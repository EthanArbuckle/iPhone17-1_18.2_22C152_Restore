void sub_25F952224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  _Unwind_Resume(a1);
}

void sub_25F952448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_25F952824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a11);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25F952B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a11);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }

  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void sub_25F952D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25F952DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25F953078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a16);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25F953334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_25F9535B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_25F953854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265540F90, MEMORY[0x263F8C060]);
}

void sub_25F9539A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::string_view::compare[abi:ne180100](void *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5 = a1[1];
  BOOL v6 = v5 >= a2;
  size_t v7 = v5 - a2;
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  uint64_t v9 = (const void *)(*a1 + a2);
  if (v7 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v7;
  }
  if (a5 >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = a5;
  }
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v10 == a5) {
    unsigned int v13 = 0;
  }
  if (result) {
    return result;
  }
  else {
    return v13;
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265540F98, MEMORY[0x263F8C068]);
}

void sub_25F953CFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void OUTLINED_FUNCTION_0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

TokenGenerationCore::TGModes_optional __swiftcall TGModes.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of TGModes.init(rawValue:);
  return (TokenGenerationCore::TGModes_optional)TGModes.init(rawValue:)(rawValue, v2, v1);
}

uint64_t TGModes.rawValue.getter()
{
  unint64_t v1 = 0xD000000000000016;
  if (*v0 != 1) {
    unint64_t v1 = 0x657A696E656B6F74;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6574656C706D6F63;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TGModes(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TGModes()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TGModes()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TGModes()
{
  return Hasher._finalize()();
}

TokenGenerationCore::TGModes_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TGModes(Swift::String *a1)
{
  return TGModes.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TGModes(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0x800000025FA3D1A0;
  unint64_t v5 = 0xD000000000000016;
  if (v2 != 1)
  {
    unint64_t v5 = 0x657A696E656B6F74;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6574656C706D6F63;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t AutomationJSON.mode.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.modelBundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.temperature.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t AutomationJSON.maxTokens.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t AutomationJSON.randomSeed.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t AutomationJSON.prompt.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.input.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.locale.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

TokenGenerationCore::AutomationJSON::InputPromptType_optional __swiftcall AutomationJSON.InputPromptType.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of AutomationJSON.InputPromptType.init(rawValue:);
  return (TokenGenerationCore::AutomationJSON::InputPromptType_optional)TGModes.init(rawValue:)(rawValue, v2, v1);
}

uint64_t AutomationJSON.InputPromptType.rawValue.getter()
{
  uint64_t v1 = 0x444974706D6F7270;
  if (*v0 != 1) {
    uint64_t v1 = 0x655474706D6F7270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74706D6F7270;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.InputPromptType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutomationJSON.InputPromptType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutomationJSON.InputPromptType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutomationJSON.InputPromptType()
{
  return Hasher._finalize()();
}

TokenGenerationCore::AutomationJSON::InputPromptType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutomationJSON.InputPromptType(Swift::String *a1)
{
  return AutomationJSON.InputPromptType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutomationJSON.InputPromptType(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x444974706D6F7270;
  if (v2 != 1)
  {
    uint64_t v5 = 0x655474706D6F7270;
    unint64_t v4 = 0xEE006574616C706DLL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x74706D6F7270;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputPromptType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputPromptType()
{
  return RawRepresentable<>.encode(to:)();
}

void AutomationJSON.inputPromptType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 120);
}

uint64_t AutomationJSON.inputVariableBindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.messages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.responses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.responses.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 144) = a1;
  return result;
}

uint64_t (*AutomationJSON.responses.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t AutomationJSON.output.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.output.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 152) = a1;
  return result;
}

uint64_t (*AutomationJSON.output.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t AutomationJSON.RenderedPrompt.originalPrompt.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.RenderedPrompt.renderedString.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.RenderedPrompt.segments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.RenderedPrompt.tokenIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.RenderedPrompt.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.RenderedPrompt.Source.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.RenderedPrompt.Source.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AutomationJSON.RenderedPrompt.Source.identifier.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t AutomationJSON.RenderedPrompt.Source.version.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.RenderedPrompt.Source.version.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AutomationJSON.RenderedPrompt.Source.version.modify())()
{
  return AutomationJSON.responses.modify;
}

TokenGenerationCore::AutomationJSON::RenderedPrompt::Source __swiftcall AutomationJSON.RenderedPrompt.Source.init(identifier:version:)(Swift::String identifier, Swift::String version)
{
  *uint64_t v2 = identifier;
  v2[1] = version;
  result.version = version;
  result.identifier = identifier;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for Hashable.hash(into:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  if (*v0) {
    return 0x6E6F6973726576;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.RenderedPrompt.Source.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.RenderedPrompt.Source.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.RenderedPrompt.Source.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  BOOL v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 16);
  v10[1] = *(void *)(v1 + 24);
  v10[2] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  uint64_t v8 = v10[3];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v8)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys);
  }
  return result;
}

uint64_t AutomationJSON.RenderedPrompt.Source.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.RenderedPrompt.Source.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v20 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v19 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v18 = v12;
  v15(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v18;
  a2[3] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.RenderedPrompt.Source@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AutomationJSON.RenderedPrompt.Source.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.RenderedPrompt.Source(void *a1)
{
  return AutomationJSON.RenderedPrompt.Source.encode(to:)(a1);
}

uint64_t AutomationJSON.RenderedPrompt.source.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  *a1 = v1[7];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void __swiftcall AutomationJSON.RenderedPrompt.init(originalPrompt:renderedString:segments:tokenIDs:userInfo:source:)(TokenGenerationCore::AutomationJSON::RenderedPrompt *__return_ptr retstr, Swift::String originalPrompt, Swift::String renderedString, Swift::OpaquePointer segments, Swift::OpaquePointer tokenIDs, Swift::OpaquePointer userInfo, TokenGenerationCore::AutomationJSON::RenderedPrompt::Source source)
{
  Swift::String v7 = *(Swift::String *)source.identifier._countAndFlagsBits;
  uint64_t v8 = *(void *)(source.identifier._countAndFlagsBits + 16);
  uint64_t v9 = *(void **)(source.identifier._countAndFlagsBits + 24);
  retstr->originalPrompt = originalPrompt;
  retstr->renderedString = renderedString;
  retstr->segments = segments;
  retstr->tokenIDs = tokenIDs;
  retstr->userInfo = userInfo;
  retstr->source.identifier = v7;
  retstr->source.version._countAndFlagsBits = v8;
  retstr->source.version._object = v9;
}

uint64_t AutomationJSON.RenderedPrompt.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (void *)v0[8];
  uint64_t v24 = v0[7];
  uint64_t v25 = v0[9];
  Swift::String v7 = (void *)v0[10];
  _StringGuts.grow(_:)(179);
  v8._countAndFlagsBits = 0xD000000000000042;
  v8._object = (void *)0x800000025FA3D270;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v1;
  v9._object = v2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x800000025FA3D2C0;
  v10._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v10);
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v4;
  v11._object = v3;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x656D676573202D0ALL;
  v12._object = (void *)0xED0000203A73746ELL;
  String.append(_:)(v12);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = MEMORY[0x261202AC0](v5, MEMORY[0x263F8D310]);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x6E656B6F74202D0ALL;
  v14._object = (void *)0xED0000203A734449;
  String.append(_:)(v14);
  uint64_t v15 = swift_bridgeObjectRetain();
  v16._countAndFlagsBits = MEMORY[0x261202AC0](v15, MEMORY[0x263F8D6C8]);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x4972657375202D0ALL;
  v17._object = (void *)0xED0000203A6F666ELL;
  String.append(_:)(v17);
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0xD000000000000016;
  v19._object = (void *)0x800000025FA3D2E0;
  String.append(_:)(v19);
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = v24;
  v20._object = v6;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x800000025FA3D300;
  v21._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v21);
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v25;
  v22._object = v7;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.RenderedPrompt.CodingKeys()
{
  uint64_t result = 0x6C616E696769726FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x64657265646E6572;
      break;
    case 2:
      uint64_t result = 0x73746E656D676573;
      break;
    case 3:
      uint64_t result = 0x7344496E656B6F74;
      break;
    case 4:
      uint64_t result = 0x6F666E4972657375;
      break;
    case 5:
      uint64_t result = 0x656372756F73;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.RenderedPrompt.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.RenderedPrompt.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.RenderedPrompt.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.RenderedPrompt.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.RenderedPrompt.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.RenderedPrompt.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.RenderedPrompt.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1[2];
  uint64_t v29 = v1[3];
  uint64_t v30 = v7;
  uint64_t v8 = v1[4];
  uint64_t v27 = v1[5];
  uint64_t v28 = v8;
  uint64_t v9 = v1[7];
  uint64_t v25 = v1[6];
  uint64_t v26 = v9;
  uint64_t v10 = v1[9];
  uint64_t v11 = v1[10];
  uint64_t v23 = v1[8];
  uint64_t v24 = v10;
  uint64_t v12 = a1[3];
  Swift::String v13 = a1;
  uint64_t v15 = v14;
  __swift_project_boxed_opaque_existential_1(v13, v12);
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys();
  Swift::String v16 = v6;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v32) = 0;
  uint64_t v17 = v31;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v17) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v15);
  }
  uint64_t v20 = v27;
  uint64_t v19 = v28;
  uint64_t v31 = v11;
  uint64_t v21 = v26;
  LOBYTE(v32) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v32 = v19;
  char v36 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v32 = v20;
  char v36 = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v32 = v25;
  char v36 = 4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v32 = v21;
  uint64_t v33 = v23;
  uint64_t v34 = v24;
  uint64_t v35 = v31;
  char v36 = 5;
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v16, v15);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source);
  }
  return result;
}

uint64_t AutomationJSON.RenderedPrompt.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.RenderedPrompt.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v37) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v36 = v9;
  LOBYTE(v37) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v34 = v12;
  uint64_t v35 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  char v41 = 2;
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v33 = v14;
  uint64_t v15 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  char v41 = 3;
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
  swift_bridgeObjectRetain();
  uint64_t v32 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v29 = v15;
  uint64_t v16 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  char v41 = 4;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((unint64_t *)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v31 = v16;
  uint64_t v17 = v37;
  char v41 = 5;
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = v35;
  uint64_t v30 = v17;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v20 = v38;
  uint64_t v32 = v37;
  uint64_t v21 = v40;
  uint64_t v28 = v39;
  swift_bridgeObjectRetain();
  uint64_t v22 = v33;
  swift_bridgeObjectRetain();
  uint64_t v23 = v29;
  swift_bridgeObjectRetain();
  uint64_t v24 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v36;
  a2[1] = v18;
  a2[2] = v34;
  a2[3] = v22;
  a2[4] = v23;
  a2[5] = v24;
  uint64_t v25 = v32;
  a2[6] = v30;
  a2[7] = v25;
  uint64_t v26 = v28;
  a2[8] = v20;
  a2[9] = v26;
  a2[10] = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.RenderedPrompt@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AutomationJSON.RenderedPrompt.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.RenderedPrompt(void *a1)
{
  return AutomationJSON.RenderedPrompt.encode(to:)(a1);
}

uint64_t AutomationJSON.renderedPrompts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.renderedPrompts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 160) = a1;
  return result;
}

uint64_t (*AutomationJSON.renderedPrompts.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t AutomationJSON.constraintValidation.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.constraintValidation.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 168) = a1;
  return result;
}

uint64_t (*AutomationJSON.constraintValidation.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t AutomationJSON.frequencyPenalty.getter()
{
  return *(void *)(v0 + 176);
}

uint64_t AutomationJSON.lengthPenalty.getter()
{
  return *(void *)(v0 + 192);
}

uint64_t AutomationJSON.stopSequence.getter()
{
  uint64_t v1 = *(void *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.prewarm.getter()
{
  return *(unsigned __int8 *)(v0 + 224);
}

uint64_t AutomationJSON.promptLookupDraftSteps.getter()
{
  return *(void *)(v0 + 232);
}

uint64_t AutomationJSON.speculativeSampling.getter()
{
  return *(unsigned __int8 *)(v0 + 241);
}

uint64_t AutomationJSON.tokenHealing.getter()
{
  return *(unsigned __int8 *)(v0 + 242);
}

uint64_t AutomationJSON.schema.getter()
{
  uint64_t v1 = *(void *)(v0 + 248);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.grammar.getter()
{
  uint64_t v1 = *(void *)(v0 + 264);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.dynamicPartsOfGrammars.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.iterationCount.getter()
{
  return *(void *)(v0 + 288);
}

uint64_t AutomationJSON.promptDelay.getter()
{
  return *(void *)(v0 + 304);
}

void AutomationJSON.samplingStrategyConfiguration.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 352);
  *(void *)a1 = *(void *)(v1 + 344);
  *(unsigned char *)(a1 + 8) = v2;
}

BOOL static AutomationJSON.SamplingStrategyConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return *(void *)&v2 == *(void *)&v3;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v4 != 1 || v2 != v3) {
      return 0;
    }
  }
  else if (v4 != 2 || *(void *)&v3 != 0)
  {
    return 0;
  }
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys()
{
  uint64_t v1 = 0x7375656C63756ELL;
  if (*v0 != 1) {
    uint64_t v1 = 0x78616D677261;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1802530676;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.SamplingStrategyConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  return 0x6C6F687365726874;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void protocol witness for Hashable.hash(into:) in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys()
{
  return 0x746E756F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys>);
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v26 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v22 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys>);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys>);
  uint64_t v21 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.SamplingStrategyConfiguration.CodingKeys>);
  uint64_t v12 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *v2;
  int v15 = *((unsigned __int8 *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!v15)
  {
    char v29 = 0;
    lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys();
    uint64_t v16 = v28;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v16);
  }
  if (v15 == 1)
  {
    char v30 = 1;
    lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys();
    uint64_t v16 = v28;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v24;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v16);
  }
  char v31 = 2;
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys();
  uint64_t v19 = v22;
  uint64_t v20 = v28;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v20);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys);
  }
  return result;
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys>);
  uint64_t v37 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  v43 = &v34[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys>);
  uint64_t v41 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v5 = &v34[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys>);
  uint64_t v38 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.SamplingStrategyConfiguration.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys();
  uint64_t v14 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_9;
  }
  int v15 = v43;
  uint64_t v36 = v10;
  v45 = v12;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v9;
    char v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v29 = &type metadata for AutomationJSON.SamplingStrategyConfiguration;
    char v30 = v45;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v36 + 8))(v30, v27);
LABEL_9:
    uint64_t v23 = (uint64_t)v44;
    return __swift_destroy_boxed_opaque_existential_1(v23);
  }
  int v17 = *(unsigned __int8 *)(v16 + 32);
  int v35 = v17;
  if (v17)
  {
    if (v17 == 1)
    {
      char v47 = 1;
      lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys();
      uint64_t v18 = v5;
      uint64_t v19 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v39;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v22 = v21;
      (*(void (**)(unsigned char *, uint64_t))(v41 + 8))(v18, v20);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v36 + 8))(v19, v9);
      uint64_t v23 = (uint64_t)v44;
      uint64_t v24 = v42;
      uint64_t v25 = v22;
    }
    else
    {
      char v48 = 2;
      lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys();
      uint64_t v32 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v15, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v36 + 8))(v32, v9);
      uint64_t v25 = 0;
      uint64_t v23 = (uint64_t)v44;
      uint64_t v24 = v42;
    }
  }
  else
  {
    char v46 = 0;
    lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys();
    char v31 = v45;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v24 = v42;
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v8, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v36 + 8))(v31, v9);
    uint64_t v23 = (uint64_t)v44;
  }
  *(void *)uint64_t v24 = v25;
  *(unsigned char *)(v24 + 8) = v35;
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.SamplingStrategyConfiguration@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomationJSON.SamplingStrategyConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.SamplingStrategyConfiguration(void *a1)
{
  return AutomationJSON.SamplingStrategyConfiguration.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.SamplingStrategyConfiguration(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = *(void *)a1 == *(void *)&v2;
  }
  unsigned int v5 = v4;
  BOOL v6 = *(double *)a1 == v2;
  if (v3 != 1) {
    BOOL v6 = 0;
  }
  BOOL v8 = v3 == 2 && *(void *)&v2 == 0;
  if (*(unsigned char *)(a1 + 8) != 1) {
    BOOL v6 = v8;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t AutomationJSON.useCaseIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 360);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.inputSafetyConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 376);
  uint64_t v3 = *(void *)(v1 + 384);
  uint64_t v4 = *(void *)(v1 + 392);
  uint64_t v5 = *(void *)(v1 + 400);
  uint64_t v6 = *(void *)(v1 + 408);
  uint64_t v7 = *(void *)(v1 + 416);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(v1 + 424);
  return outlined copy of AutomationJSON.InputSafetyConfiguration?(v2, v3);
}

uint64_t outlined copy of AutomationJSON.InputSafetyConfiguration?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t AutomationJSON.outputSafetyConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 432);
  uint64_t v3 = *(void *)(v1 + 440);
  char v4 = *(unsigned char *)(v1 + 450);
  __int16 v5 = *(_WORD *)(v1 + 448);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 18) = v4;
  *(_WORD *)(a1 + 16) = v5;
  return outlined copy of AutomationJSON.OutputSafetyConfiguration?(v2, v3);
}

uint64_t outlined copy of AutomationJSON.OutputSafetyConfiguration?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.ovs.getter()
{
  return *v0;
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.textModeration.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.textSanitization.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys()
{
  unint64_t v1 = 0x65646F4D74786574;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7566959;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.encode(to:)(void *a1)
{
  return AutomationJSON.InputSafetyConfiguration.Guardrails.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AutomationJSON.InputSafetyConfiguration.Guardrails.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputSafetyConfiguration.Guardrails@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AutomationJSON.InputSafetyConfiguration.Guardrails.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputSafetyConfiguration.Guardrails(void *a1)
{
  return AutomationJSON.InputSafetyConfiguration.Guardrails.encode(to:)(a1);
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.language.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.topK.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.init(language:topK:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys()
{
  if (*v0) {
    return 1265659764;
  }
  else {
    return 0x65676175676E616CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v10 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = v8;
  char v12 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Locale.LanguageCode]);
  lazy protocol witness table accessor for type [Locale.LanguageCode] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Locale.LanguageCode] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Locale.LanguageCode]);
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode(&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode, MEMORY[0x263F07548]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Locale.LanguageCode]);
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode(&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode, MEMORY[0x263F07548]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A]);
  }
  return result;
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Locale.LanguageCode]);
  v12[15] = 0;
  lazy protocol witness table accessor for type [Locale.LanguageCode] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v13;
  v12[14] = 1;
  swift_bridgeObjectRetain();
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  a2[1] = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(void *a1)
{
  return AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.encode(to:)(a1);
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.script.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.isEmojiAllowed.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.init(script:isEmojiAllowed:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = a2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys()
{
  if (*v0) {
    return 0x41696A6F6D457369;
  }
  else {
    return 0x747069726373;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  v10[2] = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = v8;
  char v12 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Locale]);
  lazy protocol witness table accessor for type [Locale] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Locale] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Locale] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Locale] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Locale]);
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Locale] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [Locale] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Locale] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Locale]);
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Locale] and conformance <A> [A]);
  }
  return result;
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Locale]);
  v12[15] = 0;
  lazy protocol witness table accessor for type [Locale] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v13;
  v12[14] = 1;
  swift_bridgeObjectRetain();
  char v10 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(void *a1)
{
  return AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.encode(to:)(a1);
}

uint64_t AutomationJSON.InputSafetyConfiguration.denyListIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void AutomationJSON.InputSafetyConfiguration.guardrails.getter(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 16);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(v1 + 18);
  *(_WORD *)a1 = v2;
}

uint64_t AutomationJSON.InputSafetyConfiguration.languageRecognizer.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.InputSafetyConfiguration.languageScriptValidator.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)(v1 + 40);
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

unint64_t AutomationJSON.InputSafetyConfiguration.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6961726472617567;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys()
{
  return AutomationJSON.InputSafetyConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.InputSafetyConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.InputSafetyConfiguration.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.InputSafetyConfiguration.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v26 = *(unsigned __int8 *)(v1 + 18);
  int v23 = *(unsigned __int16 *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v21 = *(void *)(v1 + 32);
  uint64_t v22 = v8;
  uint64_t v20 = *(void *)(v1 + 40);
  int v19 = *(unsigned __int8 *)(v1 + 48);
  uint64_t v9 = a1[3];
  char v10 = a1;
  uint64_t v12 = v11;
  __swift_project_boxed_opaque_existential_1(v10, v9);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v24) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v14 = v21;
    uint64_t v13 = v22;
    char v15 = v19;
    uint64_t v16 = v20;
    BYTE2(v24) = (v23 | (v26 << 16)) >> 16;
    LOWORD(v24) = v23;
    char v27 = 1;
    lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v24 = v13;
    uint64_t v25 = v14;
    char v27 = 2;
    lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v24 = v16;
    LOBYTE(v25) = v15;
    char v27 = 3;
    lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v12);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator);
  }
  return result;
}

uint64_t AutomationJSON.InputSafetyConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.InputSafetyConfiguration.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v22) = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  char v25 = 1;
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v24 = BYTE2(v22);
  int v21 = (unsigned __int16)v22;
  char v25 = 2;
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v13 = v22;
  uint64_t v19 = v23;
  char v25 = 3;
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator();
  uint64_t v20 = v13;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  int v14 = v21 | (v24 << 16);
  uint64_t v15 = v22;
  char v16 = v23;
  swift_bridgeObjectRetain();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 18) = BYTE2(v14);
  *(_WORD *)(a2 + 16) = v14;
  uint64_t v17 = v19;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v15;
  *(unsigned char *)(a2 + 48) = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputSafetyConfiguration@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomationJSON.InputSafetyConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputSafetyConfiguration(void *a1)
{
  return AutomationJSON.InputSafetyConfiguration.encode(to:)(a1);
}

uint64_t AutomationJSON.OutputSafetyConfiguration.Guardrails.ovs.getter()
{
  return *v0;
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.init(ovs:textModeration:textSanitization:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, unsigned char *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.OutputSafetyConfiguration.Guardrails.encode(to:)(void *a1)
{
  return AutomationJSON.InputSafetyConfiguration.Guardrails.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys);
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v12 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = *(unsigned __int8 *)(v3 + 1);
  v11[3] = *(unsigned __int8 *)(v3 + 2);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  uint64_t v9 = v13;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v9)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v15 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

uint64_t AutomationJSON.OutputSafetyConfiguration.Guardrails.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AutomationJSON.InputSafetyConfiguration.Guardrails.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys, a2);
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, unsigned char *a4@<X8>)
{
  char v17 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v16 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v11 = v16;
    uint64_t v10 = v17;
    char v20 = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    char v19 = 1;
    char v14 = KeyedDecodingContainer.decode(_:forKey:)();
    char v18 = 2;
    char v15 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v7);
    *uint64_t v10 = v12 & 1;
    v10[1] = v14 & 1;
    v10[2] = v15 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.OutputSafetyConfiguration.Guardrails@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AutomationJSON.OutputSafetyConfiguration.Guardrails.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.OutputSafetyConfiguration.Guardrails(void *a1)
{
  return AutomationJSON.OutputSafetyConfiguration.Guardrails.encode(to:)(a1);
}

uint64_t AutomationJSON.OutputSafetyConfiguration.denyListIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void AutomationJSON.OutputSafetyConfiguration.guardrails.getter(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 16);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(v1 + 18);
  *(_WORD *)a1 = v2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys()
{
  if (*v0) {
    return 0x6961726472617567;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.OutputSafetyConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.OutputSafetyConfiguration.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.OutputSafetyConfiguration.CodingKeys>);
  uint64_t v11 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = *(unsigned __int8 *)(v1 + 18);
  int v9 = *(unsigned __int16 *)(v1 + 16);
  int v10 = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    char v14 = (v9 | (v10 << 16)) >> 16;
    __int16 v13 = v9;
    char v12 = 1;
    lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v6, v4);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails);
  }
  return result;
}

uint64_t AutomationJSON.OutputSafetyConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.OutputSafetyConfiguration.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v19 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  char v16 = 1;
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __int16 v12 = v17;
  char v13 = v18;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 18) = v13;
  *(_WORD *)(a2 + 16) = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.OutputSafetyConfiguration@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomationJSON.OutputSafetyConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.OutputSafetyConfiguration(void *a1)
{
  return AutomationJSON.OutputSafetyConfiguration.encode(to:)(a1);
}

uint64_t AutomationJSON.decoder.getter()
{
  uint64_t v1 = *(void *)(v0 + 456);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.decoderConfig.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of AutomationJSON.DecoderConfig?(v1 + 472, (uint64_t)v4);
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v4, a1);
  return outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AutomationJSON.DecoderConfig?);
}

uint64_t outlined init with take of AutomationJSON.DecoderConfig?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutomationJSON.DecoderConfig?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of AutomationJSON.DecoderConfig?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t AutomationJSON.decoderConfig.setter(uint64_t a1)
{
  outlined init with take of AutomationJSON.DecoderConfig?(a1, (uint64_t)v3);
  outlined init with take of AutomationJSON.DecoderConfig?(v1 + 472, (uint64_t)v4);
  outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AutomationJSON.DecoderConfig?);
  return outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v3, v1 + 472);
}

uint64_t outlined retain of AutomationJSON.DecoderConfig?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 128);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), v4);
  return a1;
}

uint64_t outlined consume of AutomationJSON.DecoderConfig?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*AutomationJSON.decoderConfig.modify())()
{
  return AutomationJSON.responses.modify;
}

TokenGenerationCore::AutomationJSON::Role_optional __swiftcall AutomationJSON.Role.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of AutomationJSON.Role.init(rawValue:);
  return (TokenGenerationCore::AutomationJSON::Role_optional)TGModes.init(rawValue:)(rawValue, v2, v1);
}

uint64_t TGModes.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  unint64_t v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  char v9 = 3;
  if (v7 < 3) {
    char v9 = v7;
  }
  *a3 = v9;
  return result;
}

uint64_t AutomationJSON.Role.rawValue.getter()
{
  uint64_t v1 = 1919251317;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E61747369737361;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6D6574737973;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.Role(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutomationJSON.Role()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutomationJSON.Role()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutomationJSON.Role()
{
  return Hasher._finalize()();
}

TokenGenerationCore::AutomationJSON::Role_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutomationJSON.Role(Swift::String *a1)
{
  return AutomationJSON.Role.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutomationJSON.Role(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1919251317;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E61747369737361;
    unint64_t v4 = 0xE900000000000074;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6D6574737973;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.Role()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.Role()
{
  return RawRepresentable<>.encode(to:)();
}

void AutomationJSON.Turn.role.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t AutomationJSON.Turn.content.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.Turn.CodingKeys()
{
  if (*v0) {
    return 0x746E65746E6F63;
  }
  else {
    return 1701605234;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.Turn.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.Turn.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.Turn.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.Turn.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.Turn.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.Turn.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  uint64_t v9 = *((void *)v1 + 1);
  v11[0] = *((void *)v1 + 2);
  v11[1] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = v8;
  char v13 = 0;
  lazy protocol witness table accessor for type AutomationJSON.Role and conformance AutomationJSON.Role();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Role and conformance AutomationJSON.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role);
  }
  return result;
}

uint64_t AutomationJSON.Turn.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.Turn.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v16 = 0;
    lazy protocol witness table accessor for type AutomationJSON.Role and conformance AutomationJSON.Role();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v17;
    char v15 = 1;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(unsigned char *)a2 = v9;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.Turn@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomationJSON.Turn.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.Turn(void *a1)
{
  return AutomationJSON.Turn.encode(to:)(a1);
}

uint64_t AutomationJSON.Response.content.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

TokenGenerationCore::AutomationJSON::Response __swiftcall AutomationJSON.Response.init(content:)(TokenGenerationCore::AutomationJSON::Response content)
{
  TokenGenerationCore::AutomationJSON::Response *v1 = content;
  return content;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.Response.CodingKeys()
{
  return 0x746E65746E6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.Response.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.Response.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.Response.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.Response.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.Response.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys);
  }
  return result;
}

uint64_t AutomationJSON.Response.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.Response.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.Response@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AutomationJSON.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.Response(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.Response.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t AutomationJSON.DecoderConfig.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E75427466617264;
      break;
    case 2:
      unint64_t result = 0x646E7542796E6974;
      break;
    case 3:
      unint64_t result = 0x657A696E656B6F74;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6574537466617264;
      break;
    case 7:
      unint64_t result = 0x6572547466617264;
      break;
    case 8:
      unint64_t result = 0x6164417466617264;
      break;
    case 9:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.DecoderConfig.CodingKeys()
{
  return AutomationJSON.DecoderConfig.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.DecoderConfig.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.DecoderConfig.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.DecoderConfig.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.DecoderConfig.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.DecoderConfig.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.DecoderConfig.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.DecoderConfig.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v33 = *(void *)(v1 + 24);
  uint64_t v34 = v7;
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v31 = *(void *)(v1 + 40);
  uint64_t v32 = v8;
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v29 = *(void *)(v1 + 56);
  uint64_t v30 = v9;
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v27 = *(void *)(v1 + 64);
  uint64_t v28 = v10;
  uint64_t v11 = *(void *)(v1 + 88);
  uint64_t v25 = *(void *)(v1 + 80);
  uint64_t v26 = v11;
  uint64_t v23 = *(void *)(v1 + 96);
  int v24 = *(unsigned __int8 *)(v1 + 104);
  uint64_t v21 = *(void *)(v1 + 112);
  int v22 = *(unsigned __int8 *)(v1 + 120);
  int v20 = *(unsigned __int8 *)(v1 + 121);
  uint64_t v19 = *(unsigned int *)(v1 + 124);
  char v12 = *(unsigned char *)(v1 + 128);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1;
  uint64_t v16 = v15;
  __swift_project_boxed_opaque_existential_1(v14, v13);
  lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v46 = 0;
  uint64_t v17 = v35;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v17)
  {
    char v45 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v44 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v43 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v42 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v41 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v40 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v39 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v38 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v37 = 9;
    char v36 = v12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v16);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys);
  }
  return result;
}

uint64_t AutomationJSON.DecoderConfig.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.DecoderConfig.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v74 = 1;
  char v72 = 1;
  char v71 = 1;
  uint64_t v9 = a1[3];
  v75 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  }
  uint64_t v52 = v6;
  LOBYTE(v62[0]) = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  LOBYTE(v62[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v48 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v62[0]) = 2;
  uint64_t v14 = v13;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v51 = v14;
  uint64_t v47 = v15;
  LOBYTE(v62[0]) = 3;
  uint64_t v17 = v16;
  swift_bridgeObjectRetain();
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v50 = v17;
  uint64_t v46 = v18;
  LOBYTE(v62[0]) = 4;
  uint64_t v49 = v19;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v22 = v21;
  uint64_t v44 = v20;
  uint64_t v45 = v10;
  LOBYTE(v62[0]) = 5;
  swift_bridgeObjectRetain();
  uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v62[0]) = 6;
  uint64_t v24 = v23;
  swift_bridgeObjectRetain();
  uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v41 = v25;
  char v74 = v25 & 1;
  LOBYTE(v62[0]) = 7;
  uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v38 = v26;
  char v72 = v26 & 1;
  LOBYTE(v62[0]) = 8;
  int v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v70 = 9;
  unint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v27 = HIDWORD(v37) & 1;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v8, v5);
  char v71 = v27;
  *(void *)&long long v53 = v45;
  *((void *)&v53 + 1) = v12;
  uint64_t v29 = v50;
  uint64_t v28 = v51;
  *(void *)&long long v54 = v48;
  *((void *)&v54 + 1) = v51;
  *(void *)&long long v55 = v47;
  *((void *)&v55 + 1) = v50;
  *(void *)&long long v56 = v46;
  *((void *)&v56 + 1) = v49;
  *(void *)&long long v57 = v44;
  *((void *)&v57 + 1) = v22;
  *(void *)&long long v58 = v43;
  *((void *)&v58 + 1) = v24;
  *(void *)&long long v59 = v42;
  BYTE8(v59) = v41 & 1;
  *(void *)&long long v60 = v40;
  BYTE8(v60) = v38 & 1;
  BYTE9(v60) = v39;
  HIDWORD(v60) = v37;
  char v61 = v27;
  outlined retain of AutomationJSON.DecoderConfig((uint64_t)&v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v31 = v60;
  *(_OWORD *)(a2 + 96) = v59;
  *(_OWORD *)(a2 + 112) = v31;
  *(unsigned char *)(a2 + 128) = v61;
  long long v32 = v56;
  *(_OWORD *)(a2 + 32) = v55;
  *(_OWORD *)(a2 + 48) = v32;
  long long v33 = v58;
  *(_OWORD *)(a2 + 64) = v57;
  *(_OWORD *)(a2 + 80) = v33;
  long long v34 = v54;
  *(_OWORD *)a2 = v53;
  *(_OWORD *)(a2 + 16) = v34;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  v62[0] = v45;
  v62[1] = v12;
  v62[2] = v48;
  v62[3] = v28;
  v62[4] = v47;
  v62[5] = v29;
  v62[6] = v46;
  v62[7] = v30;
  v62[8] = v44;
  v62[9] = v22;
  v62[10] = v43;
  v62[11] = v24;
  v62[12] = v42;
  char v63 = v74;
  *(_DWORD *)v64 = *(_DWORD *)v73;
  *(_DWORD *)&v64[3] = *(_DWORD *)&v73[3];
  uint64_t v65 = v40;
  char v66 = v72;
  char v67 = v39;
  int v68 = v37;
  char v69 = v71;
  return outlined release of AutomationJSON.DecoderConfig((uint64_t)v62);
}

uint64_t outlined retain of AutomationJSON.DecoderConfig(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AutomationJSON.DecoderConfig(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.DecoderConfig@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomationJSON.DecoderConfig.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.DecoderConfig(void *a1)
{
  return AutomationJSON.DecoderConfig.encode(to:)(a1);
}

uint64_t AutomationJSON.ParameterizedPrompt.prompt.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void AutomationJSON.ParameterizedPrompt.inputPromptType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t AutomationJSON.ParameterizedPrompt.locale.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.ParameterizedPrompt.inputVariableBindings.getter()
{
  return swift_bridgeObjectRetain();
}

void AutomationJSON.ParameterizedPrompt.samplingStrategyConfiguration.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 48);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AutomationJSON.ParameterizedPrompt.temperature.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t AutomationJSON.ParameterizedPrompt.frequencyPenalty.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t AutomationJSON.ParameterizedPrompt.lengthPenalty.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t AutomationJSON.ParameterizedPrompt.stopSequence.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.ParameterizedPrompt.maxTokens.getter()
{
  return *(void *)(v0 + 128);
}

uint64_t AutomationJSON.ParameterizedPrompt.randomSeed.getter()
{
  return *(void *)(v0 + 144);
}

uint64_t AutomationJSON.ParameterizedPrompt.promptLookupDraftSteps.getter()
{
  return *(void *)(v0 + 160);
}

uint64_t AutomationJSON.ParameterizedPrompt.speculativeSampling.getter()
{
  return *(unsigned __int8 *)(v0 + 169);
}

uint64_t AutomationJSON.ParameterizedPrompt.tokenHealing.getter()
{
  return *(unsigned __int8 *)(v0 + 170);
}

uint64_t AutomationJSON.ParameterizedPrompt.schema.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.ParameterizedPrompt.grammar.getter()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.ParameterizedPrompt.dynamicPartsOfGrammars.getter()
{
  uint64_t v1 = *(void *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.ParameterizedPrompt.timeout.getter()
{
  return *(void *)(v0 + 224);
}

uint64_t AutomationJSON.ParameterizedPrompt.inputSafetyConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 240);
  uint64_t v3 = *(void *)(v1 + 248);
  uint64_t v4 = *(void *)(v1 + 256);
  uint64_t v5 = *(void *)(v1 + 264);
  uint64_t v6 = *(void *)(v1 + 272);
  uint64_t v7 = *(void *)(v1 + 280);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(v1 + 288);
  return outlined copy of AutomationJSON.InputSafetyConfiguration?(v2, v3);
}

uint64_t AutomationJSON.ParameterizedPrompt.outputSafetyConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 296);
  uint64_t v3 = *(void *)(v1 + 304);
  char v4 = *(unsigned char *)(v1 + 314);
  __int16 v5 = *(_WORD *)(v1 + 312);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 18) = v4;
  *(_WORD *)(a1 + 16) = v5;
  return outlined copy of AutomationJSON.OutputSafetyConfiguration?(v2, v3);
}

uint64_t AutomationJSON.ParameterizedPrompt.userData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 320);
  uint64_t v3 = *(void *)(v1 + 328);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(v1 + 336);
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of JSON?(v2, v3, v4);
}

uint64_t outlined copy of JSON?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of JSON(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined copy of JSON(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 4 || a3 == 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t AutomationJSON.ParameterizedPrompt.output.getter()
{
  uint64_t v1 = *(void *)(v0 + 344);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AutomationJSON.ParameterizedPrompt.output.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 344) = a1;
  *(void *)(v2 + 352) = a2;
  return result;
}

uint64_t (*AutomationJSON.ParameterizedPrompt.output.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t AutomationJSON.ParameterizedPrompt.renderedPrompt.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[45];
  uint64_t v3 = v1[46];
  uint64_t v4 = v1[47];
  uint64_t v5 = v1[48];
  uint64_t v6 = v1[49];
  uint64_t v7 = v1[50];
  uint64_t v8 = v1[51];
  uint64_t v9 = v1[52];
  uint64_t v10 = v1[53];
  uint64_t v11 = v1[54];
  uint64_t v12 = v1[55];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  return outlined copy of AutomationJSON.RenderedPrompt?(v2, v3);
}

uint64_t outlined copy of AutomationJSON.RenderedPrompt?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 AutomationJSON.ParameterizedPrompt.renderedPrompt.setter(long long *a1)
{
  long long v7 = a1[1];
  long long v8 = *a1;
  long long v5 = a1[3];
  long long v6 = a1[2];
  __n128 v4 = (__n128)a1[4];
  uint64_t v2 = *((void *)a1 + 10);
  outlined consume of AutomationJSON.RenderedPrompt?(*(void *)(v1 + 360), *(void *)(v1 + 368));
  *(_OWORD *)(v1 + 360) = v8;
  *(_OWORD *)(v1 + 376) = v7;
  *(_OWORD *)(v1 + 392) = v6;
  *(_OWORD *)(v1 + 408) = v5;
  __n128 result = v4;
  *(__n128 *)(v1 + 424) = v4;
  *(void *)(v1 + 440) = v2;
  return result;
}

uint64_t outlined consume of AutomationJSON.RenderedPrompt?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*AutomationJSON.ParameterizedPrompt.renderedPrompt.modify())()
{
  return AutomationJSON.responses.modify;
}

__n128 AutomationJSON.ParameterizedPrompt.init(prompt:inputPromptType:locale:inputVariableBindings:samplingStrategyConfiguration:temperature:frequencyPenalty:lengthPenalty:stopSequence:maxTokens:randomSeed:promptLookupDraftSteps:speculativeSampling:tokenHealing:schema:grammar:dynamicPartsOfGrammars:timeout:inputSafetyConfiguration:outputSafetyConfiguration:output:renderedPrompt:userData:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, char a12, uint64_t a13, char a14, long long a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,int a21,long long a22,long long a23,long long a24,uint64_t a25,char a26,uint64_t a27,long long *a28,uint64_t a29,uint64_t a30,long long *a31,long long *a32)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = *a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  uint64_t v32 = *a7;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = v32;
  *(unsigned char *)(a9 + 56) = *((unsigned char *)a7 + 8);
  *(void *)(a9 + 64) = a8;
  *(unsigned char *)(a9 + 72) = a10 & 1;
  *(void *)(a9 + 80) = a11;
  *(unsigned char *)(a9 + 88) = a12 & 1;
  *(void *)(a9 + 96) = a13;
  *(unsigned char *)(a9 + 104) = a14 & 1;
  *(void *)(a9 + 128) = a16;
  *(unsigned char *)(a9 + 136) = a17 & 1;
  *(void *)(a9 + 144) = a18;
  *(unsigned char *)(a9 + 152) = a19 & 1;
  *(void *)(a9 + 160) = a20;
  *(unsigned char *)(a9 + 168) = a21 & 1;
  *(_WORD *)(a9 + 169) = *(_WORD *)((char *)&a21 + 1);
  *(void *)(a9 + 224) = a25;
  *(unsigned char *)(a9 + 232) = a26 & 1;
  __n128 result = *(__n128 *)a27;
  long long v34 = *(_OWORD *)(a27 + 16);
  long long v35 = *(_OWORD *)(a27 + 32);
  char v36 = *((unsigned char *)a28 + 18);
  *(unsigned char *)(a9 + 288) = *(unsigned char *)(a27 + 48);
  *(unsigned char *)(a9 + 314) = v36;
  long long v37 = *a28;
  *(_WORD *)(a9 + 312) = *((_WORD *)a28 + 8);
  long long v38 = *a32;
  *(unsigned char *)(a9 + 336) = *((unsigned char *)a32 + 16);
  *(void *)(a9 + 344) = a29;
  *(void *)(a9 + 352) = a30;
  long long v39 = *a31;
  long long v40 = a31[1];
  long long v41 = a31[2];
  long long v42 = a31[3];
  long long v43 = a31[4];
  *(void *)(a9 + 440) = *((void *)a31 + 10);
  *(_OWORD *)(a9 + 112) = a15;
  *(_OWORD *)(a9 + 176) = a22;
  *(_OWORD *)(a9 + 192) = a23;
  *(_OWORD *)(a9 + 208) = a24;
  *(__n128 *)(a9 + 240) = result;
  *(_OWORD *)(a9 + 256) = v34;
  *(_OWORD *)(a9 + 272) = v35;
  *(_OWORD *)(a9 + 320) = v38;
  uint64_t v44 = (_OWORD *)(a9 + 296);
  _OWORD *v44 = v37;
  v44[4] = v39;
  v44[5] = v40;
  v44[6] = v41;
  v44[7] = v42;
  v44[8] = v43;
  return result;
}

unint64_t AutomationJSON.ParameterizedPrompt.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x74706D6F7270;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F72507475706E69;
      break;
    case 2:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 5:
      unint64_t result = 0x74617265706D6574;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0x65506874676E656CLL;
      break;
    case 8:
      unint64_t result = 0x75716553706F7473;
      break;
    case 9:
      unint64_t result = 0x6E656B6F5478616DLL;
      break;
    case 10:
      unint64_t result = 0x65536D6F646E6172;
      break;
    case 11:
    case 16:
      unint64_t result = 0xD000000000000016;
      break;
    case 12:
      unint64_t result = 0xD000000000000013;
      break;
    case 13:
      unint64_t result = 0x6165486E656B6F74;
      break;
    case 14:
      unint64_t result = 0x616D65686373;
      break;
    case 15:
      unint64_t result = 0x72616D6D617267;
      break;
    case 17:
      unint64_t result = 0x74756F656D6974;
      break;
    case 18:
      unint64_t result = 0xD000000000000018;
      break;
    case 19:
      unint64_t result = 0xD000000000000019;
      break;
    case 20:
      unint64_t result = 0x6174614472657375;
      break;
    case 21:
      unint64_t result = 0x74757074756FLL;
      break;
    case 22:
      unint64_t result = 0x64657265646E6572;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.ParameterizedPrompt.CodingKeys()
{
  return AutomationJSON.ParameterizedPrompt.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.ParameterizedPrompt.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.ParameterizedPrompt.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.ParameterizedPrompt.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 23;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.ParameterizedPrompt.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.ParameterizedPrompt.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.ParameterizedPrompt.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.ParameterizedPrompt.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v69 = v1[1];
  uint64_t v70 = v7;
  int v83 = *((unsigned __int8 *)v1 + 16);
  uint64_t v8 = v1[3];
  uint64_t v67 = v1[4];
  uint64_t v68 = v8;
  uint64_t v66 = v1[5];
  uint64_t v64 = v1[6];
  int v65 = *((unsigned __int8 *)v1 + 56);
  uint64_t v62 = v1[8];
  int v63 = *((unsigned __int8 *)v1 + 72);
  uint64_t v60 = v1[10];
  int v61 = *((unsigned __int8 *)v1 + 88);
  uint64_t v58 = v1[12];
  int v59 = *((unsigned __int8 *)v1 + 104);
  uint64_t v56 = v1[14];
  uint64_t v57 = v1[15];
  uint64_t v54 = v1[16];
  int v55 = *((unsigned __int8 *)v1 + 136);
  uint64_t v52 = v1[18];
  int v53 = *((unsigned __int8 *)v1 + 152);
  uint64_t v50 = v1[20];
  int v51 = *((unsigned __int8 *)v1 + 168);
  int v49 = *((unsigned __int8 *)v1 + 169);
  int v48 = *((unsigned __int8 *)v1 + 170);
  uint64_t v47 = v1[22];
  uint64_t v46 = v1[23];
  uint64_t v45 = v1[24];
  uint64_t v44 = v1[25];
  uint64_t v43 = v1[26];
  uint64_t v42 = v1[27];
  uint64_t v18 = v1[28];
  int v17 = *((unsigned __int8 *)v1 + 232);
  uint64_t v25 = v1[30];
  uint64_t v24 = v1[31];
  uint64_t v23 = v1[32];
  uint64_t v22 = v1[33];
  uint64_t v21 = v1[34];
  uint64_t v20 = v1[35];
  int v19 = *((unsigned __int8 *)v1 + 288);
  uint64_t v29 = v1[37];
  uint64_t v28 = v1[38];
  int v27 = *((unsigned __int8 *)v1 + 314);
  int v26 = *((unsigned __int16 *)v1 + 156);
  uint64_t v32 = v1[40];
  uint64_t v31 = v1[41];
  int v30 = *((unsigned __int8 *)v1 + 336);
  uint64_t v34 = v1[43];
  uint64_t v33 = v1[44];
  uint64_t v15 = v1[45];
  uint64_t v16 = v1[46];
  uint64_t v41 = v1[47];
  uint64_t v40 = v1[48];
  uint64_t v39 = v1[49];
  uint64_t v38 = v1[50];
  uint64_t v37 = v1[51];
  uint64_t v36 = v1[52];
  uint64_t v9 = v1[54];
  uint64_t v35 = v1[53];
  uint64_t v10 = v1[55];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v72) = 0;
  uint64_t v11 = v71;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v11)
  {
    uint64_t v12 = v66;
    uint64_t v70 = v10;
    uint64_t v71 = v9;
    LOBYTE(v72) = v83;
    char v84 = 1;
    lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v72) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v72 = v12;
    char v84 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v72 = v64;
    LOBYTE(v73) = v65;
    char v84 = 4;
    lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v72) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v72) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v72 = v25;
    uint64_t v73 = v24;
    uint64_t v74 = v23;
    uint64_t v75 = v22;
    uint64_t v76 = v21;
    uint64_t v77 = v20;
    LOBYTE(v78) = v19;
    char v84 = 18;
    lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v72 = v29;
    uint64_t v73 = v28;
    BYTE2(v74) = (v26 | (v27 << 16)) >> 16;
    LOWORD(v74) = v26;
    char v84 = 19;
    lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v72 = v32;
    uint64_t v73 = v31;
    LOBYTE(v74) = v30;
    char v84 = 20;
    lazy protocol witness table accessor for type JSON and conformance JSON();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v72) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v72 = v15;
    uint64_t v73 = v16;
    uint64_t v74 = v41;
    uint64_t v75 = v40;
    uint64_t v76 = v39;
    uint64_t v77 = v38;
    uint64_t v78 = v37;
    uint64_t v79 = v36;
    uint64_t v80 = v35;
    uint64_t v81 = v71;
    uint64_t v82 = v70;
    char v84 = 22;
    lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JSON and conformance JSON()
{
  unint64_t result = lazy protocol witness table cache variable for type JSON and conformance JSON;
  if (!lazy protocol witness table cache variable for type JSON and conformance JSON)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON and conformance JSON);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JSON and conformance JSON;
  if (!lazy protocol witness table cache variable for type JSON and conformance JSON)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON and conformance JSON);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JSON and conformance JSON;
  if (!lazy protocol witness table cache variable for type JSON and conformance JSON)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON and conformance JSON);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt);
  }
  return result;
}

uint64_t AutomationJSON.ParameterizedPrompt.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.ParameterizedPrompt.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  v205 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type AutomationJSON.ParameterizedPrompt.CodingKeys and conformance AutomationJSON.ParameterizedPrompt.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
LABEL_4:
    swift_bridgeObjectRelease();
    return outlined consume of AutomationJSON.RenderedPrompt?(0, 0);
  }
  uint64_t v100 = v6;
  v96 = a2;
  LOBYTE(v102) = 0;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v101[0]) = 1;
  uint64_t v13 = v12;
  lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v99 = v13;
  int v14 = v102;
  LOBYTE(v102) = 2;
  uint64_t v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  LOBYTE(v101[0]) = 3;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((unint64_t *)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v98 = v16;
  uint64_t v17 = v102;
  LOBYTE(v101[0]) = 4;
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v94 = v102;
  int v93 = v103;
  LOBYTE(v102) = 5;
  uint64_t v92 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v202 = v18 & 1;
  LOBYTE(v102) = 6;
  int v91 = v18;
  uint64_t v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v89 = v19;
  char v200 = v19 & 1;
  LOBYTE(v102) = 7;
  uint64_t v88 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v86 = v20;
  char v198 = v20 & 1;
  LOBYTE(v102) = 8;
  uint64_t v87 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v83 = v14;
  uint64_t v85 = v17;
  LOBYTE(v102) = 9;
  uint64_t v97 = v21;
  swift_bridgeObjectRetain();
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v84 = v23;
  uint64_t v24 = v22;
  char v196 = v23 & 1;
  LOBYTE(v102) = 10;
  uint64_t v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v82 = v25;
  char v194 = v25 & 1;
  LOBYTE(v102) = 11;
  uint64_t v79 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v80 = v26;
  char v192 = v26 & 1;
  LOBYTE(v102) = 12;
  int v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v102) = 13;
  int v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v102) = 14;
  uint64_t v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v76 = v27;
  LOBYTE(v102) = 15;
  swift_bridgeObjectRetain();
  uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v74 = v28;
  LOBYTE(v102) = 16;
  swift_bridgeObjectRetain();
  uint64_t v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v30 = v29;
  LOBYTE(v102) = 17;
  swift_bridgeObjectRetain();
  uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v71 = v31;
  char v189 = v31 & 1;
  LOBYTE(v101[0]) = 18;
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  LOBYTE(v101[0]) = 19;
  uint64_t v63 = v102;
  uint64_t v68 = v104;
  uint64_t v69 = v103;
  uint64_t v66 = v106;
  uint64_t v67 = v105;
  uint64_t v65 = v107;
  int v64 = v108;
  outlined copy of AutomationJSON.InputSafetyConfiguration?(v102, v103);
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(void *)&v62[4] = 0;
  LOBYTE(v101[0]) = 20;
  uint64_t v60 = v102;
  uint64_t v61 = v103;
  *(void *)uint64_t v62 = (unsigned __int16)v104 | (BYTE2(v104) << 16);
  outlined copy of AutomationJSON.OutputSafetyConfiguration?(v102, v103);
  lazy protocol witness table accessor for type JSON and conformance JSON();
  uint64_t v32 = *(void *)&v62[4];
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v8, v5);
    outlined consume of AutomationJSON.OutputSafetyConfiguration?(v60, v61);
    outlined consume of AutomationJSON.InputSafetyConfiguration?(v63, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of AutomationJSON.InputSafetyConfiguration?(v63, v69);
    if (!*(void *)&v62[4]) {
      outlined consume of AutomationJSON.OutputSafetyConfiguration?(v60, v61);
    }
    goto LABEL_4;
  }
  uint64_t v33 = v102;
  LOBYTE(v102) = 21;
  uint64_t v57 = v33;
  uint64_t v58 = v103;
  int v59 = v104;
  outlined copy of JSON?(v33, v103, v104);
  uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v35 = v34;
  char v174 = 22;
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v8, v5);
  uint64_t v36 = v176;
  uint64_t v37 = v178;
  uint64_t v38 = v179;
  uint64_t v100 = v180;
  *(void *)&v62[4] = v181;
  uint64_t v54 = v177;
  uint64_t v55 = v182;
  uint64_t v48 = v175;
  uint64_t v49 = v183;
  uint64_t v50 = v184;
  uint64_t v51 = v185;
  uint64_t v52 = v178;
  uint64_t v53 = v179;
  outlined copy of AutomationJSON.RenderedPrompt?(v175, v176);
  outlined consume of AutomationJSON.RenderedPrompt?(0, 0);
  LOBYTE(v101[9]) = v91 & 1;
  LOBYTE(v101[11]) = v89 & 1;
  LOBYTE(v101[13]) = v86 & 1;
  LOBYTE(v101[17]) = v84 & 1;
  LOBYTE(v101[19]) = v82 & 1;
  LOBYTE(v101[21]) = v80 & 1;
  v101[0] = v11;
  v101[1] = v99;
  LOBYTE(v101[2]) = v83;
  v101[3] = v95;
  v101[4] = v98;
  v101[5] = v85;
  v101[6] = v94;
  LOBYTE(v101[7]) = v93;
  v101[8] = v92;
  v101[10] = v90;
  v101[12] = v88;
  v101[14] = v87;
  v101[15] = v97;
  uint64_t v45 = v24;
  v101[16] = v24;
  v101[18] = v81;
  v101[20] = v79;
  BYTE1(v101[21]) = v78;
  BYTE2(v101[21]) = v77;
  v101[22] = v75;
  v101[23] = v76;
  v101[24] = v73;
  v101[25] = v74;
  v101[26] = v72;
  uint64_t v47 = v30;
  v101[27] = v30;
  v101[28] = v70;
  LOBYTE(v101[29]) = v71 & 1;
  v101[30] = v63;
  v101[31] = v69;
  v101[32] = v68;
  v101[33] = v67;
  v101[34] = v66;
  v101[35] = v65;
  LOBYTE(v101[36]) = v64;
  v101[37] = v60;
  v101[38] = v61;
  int v91 = *(unsigned __int16 *)&v62[2];
  BYTE2(v101[39]) = v62[2];
  LOWORD(v101[39]) = *(_WORD *)v62;
  v101[40] = v57;
  v101[41] = v58;
  LOBYTE(v101[42]) = v59;
  v101[43] = v56;
  v101[44] = v35;
  uint64_t v39 = v48;
  v101[45] = v48;
  uint64_t v46 = v36;
  v101[46] = v36;
  v101[47] = v54;
  v101[48] = v37;
  v101[49] = v38;
  v101[50] = v100;
  v101[51] = *(void *)&v62[4];
  v101[52] = v55;
  v101[53] = v49;
  v101[54] = v50;
  v101[55] = v51;
  outlined retain of AutomationJSON.ParameterizedPrompt((uint64_t)v101);
  outlined consume of AutomationJSON.RenderedPrompt?(v39, v36);
  swift_bridgeObjectRelease();
  outlined consume of JSON?(v57, v58, v59);
  outlined consume of AutomationJSON.OutputSafetyConfiguration?(v60, v61);
  outlined consume of AutomationJSON.InputSafetyConfiguration?(v63, v69);
  uint64_t v40 = v99;
  swift_bridgeObjectRelease();
  uint64_t v41 = v98;
  swift_bridgeObjectRelease();
  uint64_t v42 = v85;
  swift_bridgeObjectRelease();
  uint64_t v43 = v97;
  swift_bridgeObjectRelease();
  uint64_t v44 = v76;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v96, v101, 0x1C0uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
  uint64_t v102 = v11;
  uint64_t v103 = v40;
  LOBYTE(v104) = v83;
  uint64_t v105 = v95;
  uint64_t v106 = v41;
  uint64_t v107 = v42;
  uint64_t v108 = v94;
  char v109 = v93;
  uint64_t v111 = v92;
  uint64_t v114 = v90;
  uint64_t v117 = v88;
  uint64_t v120 = v87;
  uint64_t v121 = v43;
  uint64_t v122 = v45;
  uint64_t v125 = v81;
  uint64_t v128 = v79;
  char v130 = v78;
  char v131 = v77;
  uint64_t v134 = v75;
  uint64_t v135 = v44;
  uint64_t v136 = v73;
  uint64_t v137 = v74;
  uint64_t v138 = v72;
  uint64_t v139 = v47;
  *(_DWORD *)((char *)&v104 + 1) = v204[0];
  HIDWORD(v104) = *(_DWORD *)((char *)v204 + 3);
  *(_DWORD *)v110 = *(_DWORD *)v203;
  *(_DWORD *)&v110[3] = *(_DWORD *)&v203[3];
  char v112 = v202;
  *(_DWORD *)v113 = *(_DWORD *)v201;
  *(_DWORD *)&v113[3] = *(_DWORD *)&v201[3];
  char v115 = v200;
  *(_DWORD *)v116 = *(_DWORD *)v199;
  *(_DWORD *)&v116[3] = *(_DWORD *)&v199[3];
  char v118 = v198;
  *(_DWORD *)&v119[3] = *(_DWORD *)&v197[3];
  *(_DWORD *)v119 = *(_DWORD *)v197;
  char v123 = v196;
  *(_DWORD *)&v124[3] = *(_DWORD *)&v195[3];
  *(_DWORD *)v124 = *(_DWORD *)v195;
  char v126 = v194;
  *(_DWORD *)&v127[3] = *(_DWORD *)&v193[3];
  *(_DWORD *)v127 = *(_DWORD *)v193;
  char v129 = v192;
  char v133 = v191;
  int v132 = v190;
  uint64_t v140 = v70;
  char v141 = v189;
  *(_DWORD *)&v142[3] = *(_DWORD *)&v188[3];
  *(_DWORD *)v142 = *(_DWORD *)v188;
  uint64_t v143 = v63;
  uint64_t v144 = v69;
  uint64_t v145 = v68;
  uint64_t v146 = v67;
  uint64_t v147 = v66;
  uint64_t v148 = v65;
  char v149 = v64;
  *(_DWORD *)v150 = *(_DWORD *)v187;
  *(_DWORD *)&v150[3] = *(_DWORD *)&v187[3];
  uint64_t v151 = v60;
  uint64_t v152 = v61;
  char v154 = v91;
  __int16 v153 = *(_WORD *)v62;
  int v155 = *(_DWORD *)&v186[7];
  char v156 = v186[11];
  uint64_t v157 = v57;
  uint64_t v158 = v58;
  char v159 = v59;
  *(_DWORD *)v160 = *(_DWORD *)v186;
  *(_DWORD *)&v160[3] = *(_DWORD *)&v186[3];
  uint64_t v161 = v56;
  uint64_t v162 = v35;
  uint64_t v163 = v48;
  uint64_t v164 = v46;
  uint64_t v165 = v54;
  uint64_t v166 = v52;
  uint64_t v167 = v53;
  uint64_t v168 = v100;
  uint64_t v169 = *(void *)&v62[4];
  uint64_t v170 = v55;
  uint64_t v171 = v49;
  uint64_t v172 = v50;
  uint64_t v173 = v51;
  return outlined release of AutomationJSON.ParameterizedPrompt((uint64_t)&v102);
}

uint64_t outlined consume of JSON?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of JSON(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined consume of JSON(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 4 || a3 == 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of AutomationJSON.OutputSafetyConfiguration?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of AutomationJSON.InputSafetyConfiguration?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of AutomationJSON.ParameterizedPrompt(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 248);
  uint64_t v5 = *(void *)(a1 + 240);
  uint64_t v6 = *(void *)(a1 + 304);
  uint64_t v7 = *(void *)(a1 + 296);
  uint64_t v8 = *(void *)(a1 + 328);
  uint64_t v9 = *(void *)(a1 + 320);
  uint64_t v10 = *(void *)(a1 + 368);
  uint64_t v11 = *(void *)(a1 + 360);
  char v2 = *(unsigned char *)(a1 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of AutomationJSON.InputSafetyConfiguration?(v5, v4);
  outlined copy of AutomationJSON.OutputSafetyConfiguration?(v7, v6);
  outlined copy of JSON?(v9, v8, v2);
  swift_bridgeObjectRetain();
  outlined copy of AutomationJSON.RenderedPrompt?(v11, v10);
  return a1;
}

uint64_t outlined release of AutomationJSON.ParameterizedPrompt(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 248);
  uint64_t v5 = *(void *)(a1 + 240);
  uint64_t v6 = *(void *)(a1 + 304);
  uint64_t v7 = *(void *)(a1 + 296);
  uint64_t v8 = *(void *)(a1 + 328);
  uint64_t v9 = *(void *)(a1 + 320);
  uint64_t v10 = *(void *)(a1 + 368);
  uint64_t v11 = *(void *)(a1 + 360);
  char v2 = *(unsigned char *)(a1 + 336);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of AutomationJSON.InputSafetyConfiguration?(v5, v4);
  outlined consume of AutomationJSON.OutputSafetyConfiguration?(v7, v6);
  outlined consume of JSON?(v9, v8, v2);
  swift_bridgeObjectRelease();
  outlined consume of AutomationJSON.RenderedPrompt?(v11, v10);
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.ParameterizedPrompt@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return AutomationJSON.ParameterizedPrompt.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.ParameterizedPrompt(void *a1)
{
  return AutomationJSON.ParameterizedPrompt.encode(to:)(a1);
}

uint64_t AutomationJSON.parameterizedPrompts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.parameterizedPrompts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 608) = a1;
  return result;
}

uint64_t (*AutomationJSON.parameterizedPrompts.modify())()
{
  return AutomationJSON.responses.modify;
}

void *AutomationJSON.init(input:mode:modelBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  _s19TokenGenerationCore14AutomationJSONV13DecoderConfigVSgWOi0_((uint64_t)v13);
  *(void *)__src = a2;
  *(void *)&__src[8] = a3;
  *(void *)&__src[16] = a4;
  *(void *)&__src[24] = a5;
  *(void *)&__src[32] = 0;
  __src[40] = 1;
  *(void *)&__src[48] = 0;
  __src[56] = 1;
  *(void *)&__src[64] = 0;
  __src[72] = 1;
  *(void *)&__src[80] = 0;
  *(void *)&__src[88] = 0;
  *(void *)&__src[104] = 0;
  *(void *)&__src[112] = 0;
  *(void *)&__src[96] = a1;
  __src[120] = 3;
  memset(&__src[128], 0, 56);
  __src[184] = 1;
  *(void *)&__src[192] = 0;
  __src[200] = 1;
  *(void *)&__src[232] = 0;
  memset(&__src[208], 0, 17);
  __src[240] = 1;
  *(_WORD *)&__src[241] = 514;
  memset(&__src[248], 0, 40);
  *(void *)&__src[288] = 1;
  __src[296] = 0;
  *(void *)&__src[304] = 0;
  __src[312] = 0;
  *(void *)&__src[320] = 0;
  *(void *)&__src[328] = 0;
  __src[336] = -1;
  *(void *)&__src[344] = 0;
  __src[352] = -1;
  *(_OWORD *)&__src[368] = xmmword_25FA33400;
  *(void *)&__src[360] = 0x6974616D6F747561;
  *(void *)&__src[384] = 1;
  memset(&__src[392], 0, 33);
  *(_OWORD *)&__src[432] = xmmword_25FA33410;
  *(_WORD *)&__src[448] = 0;
  __src[450] = 0;
  *(void *)&__src[464] = 0;
  *(void *)&__src[456] = 0;
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v13, (uint64_t)&__src[472]);
  *(void *)&__src[608] = 0;
  return memcpy(a6, __src, 0x268uLL);
}

double _s19TokenGenerationCore14AutomationJSONV13DecoderConfigVSgWOi0_(uint64_t a1)
{
  *(unsigned char *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void *static AutomationJSON.Parse(filePath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v20[0] = a2;
  v20[1] = a1;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F06E50], v2);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  uint64_t v13 = v22;
  uint64_t v14 = Data.init(contentsOf:options:)();
  if (v13) {
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v17 = v14;
  unint64_t v18 = v15;
  int v19 = (void *)v20[0];
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  lazy protocol witness table accessor for type AutomationJSON and conformance AutomationJSON();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  outlined consume of Data._Representation(v17, v18);
  return memcpy(v19, v21, 0x268uLL);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON and conformance AutomationJSON()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON;
  if (!lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON;
  if (!lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON);
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t static AutomationJSON.Serialize(json:)(const void *a1)
{
  v22[77] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x270FA5388](v3 - 8);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v4 = JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  uint64_t v5 = v4;
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  memcpy(v22, a1, 0x268uLL);
  lazy protocol witness table accessor for type AutomationJSON and conformance AutomationJSON();
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    unint64_t v8 = v7;
    uint64_t v9 = v6;
    switch(v7 >> 62)
    {
      case 1uLL:
        if (v6 >> 32 < (int)v6) {
          __break(1u);
        }
        outlined copy of Data._Representation(v6, v7);
        swift_retain();
        uint64_t v5 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n((int)v9, v9 >> 32, v8 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized closure #1 in String.init<A, B>(decoding:as:));
        uint64_t v16 = v15;
        outlined consume of Data._Representation(v9, v8);
        if (v16) {
          goto LABEL_18;
        }
        goto LABEL_11;
      case 2uLL:
        uint64_t v10 = *(void *)(v6 + 16);
        uint64_t v11 = *(void *)(v6 + 24);
        outlined copy of Data._Representation(v6, v7);
        swift_retain();
        swift_retain();
        uint64_t v5 = _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n(v10, v11, v8 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized closure #1 in String.init<A, B>(decoding:as:));
        uint64_t v13 = v12;
        swift_release();
        swift_release();
        if (v13) {
          goto LABEL_18;
        }
LABEL_11:
        uint64_t v20 = v9;
        unint64_t v21 = v8;
        outlined copy of Data._Representation(v9, v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
        if (swift_dynamicCast())
        {
          outlined init with take of _HasContiguousBytes(v18, (uint64_t)v22);
          __swift_project_boxed_opaque_existential_1(v22, v22[3]);
          if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
          {
            __swift_project_boxed_opaque_existential_1(v22, v22[3]);
            dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
            outlined consume of Data._Representation(v9, v8);
            uint64_t v5 = *(void *)&v18[0];
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
            goto LABEL_19;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        }
        else
        {
          uint64_t v19 = 0;
          memset(v18, 0, sizeof(v18));
          outlined destroy of _HasContiguousBytes?((uint64_t)v18);
        }
        uint64_t v14 = specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(v9, v8);
LABEL_17:
        uint64_t v5 = v14;
LABEL_18:
        outlined consume of Data._Representation(v9, v8);
LABEL_19:
        outlined consume of Data._Representation(v9, v8);
        swift_release();
        break;
      case 3uLL:
        *(void *)((char *)v22 + 6) = 0;
        v22[0] = 0;
        goto LABEL_8;
      default:
        v22[0] = v6;
        LOWORD(v22[1]) = v7;
        BYTE2(v22[1]) = BYTE2(v7);
        BYTE3(v22[1]) = BYTE3(v7);
        BYTE4(v22[1]) = BYTE4(v7);
        BYTE5(v22[1]) = BYTE5(v7);
LABEL_8:
        uint64_t v14 = static String._fromUTF8Repairing(_:)();
        goto LABEL_17;
    }
  }
  return v5;
}

unint64_t AutomationJSON.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 1701080941;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E75426C65646F6DLL;
      break;
    case 2:
      unint64_t result = 0x74617265706D6574;
      break;
    case 3:
      unint64_t result = 0x6E656B6F5478616DLL;
      break;
    case 4:
      unint64_t result = 0x65536D6F646E6172;
      break;
    case 5:
      unint64_t result = 0x74706D6F7270;
      break;
    case 6:
      unint64_t result = 0x7475706E69;
      break;
    case 7:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 8:
      unint64_t result = 0x6F72507475706E69;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0x736567617373656DLL;
      break;
    case 11:
      unint64_t result = 0x65736E6F70736572;
      break;
    case 12:
      unint64_t result = 0x74757074756FLL;
      break;
    case 13:
      unint64_t result = 0x64657265646E6572;
      break;
    case 14:
    case 34:
      unint64_t result = 0xD000000000000014;
      break;
    case 15:
      unint64_t result = 0xD000000000000010;
      break;
    case 16:
      unint64_t result = 0x65506874676E656CLL;
      break;
    case 17:
      unint64_t result = 0x75716553706F7473;
      break;
    case 18:
      unint64_t result = 0x6D726177657270;
      break;
    case 19:
      unint64_t result = 0xD000000000000016;
      break;
    case 20:
      unint64_t result = 0xD000000000000013;
      break;
    case 21:
      unint64_t result = 0x6165486E656B6F74;
      break;
    case 22:
      unint64_t result = 0x616D65686373;
      break;
    case 23:
      unint64_t result = 0x72616D6D617267;
      break;
    case 24:
      unint64_t result = 0xD000000000000016;
      break;
    case 25:
      unint64_t result = 0x6F69746172657469;
      break;
    case 26:
      unint64_t result = 0x654474706D6F7270;
      break;
    case 27:
      unint64_t result = 0x6174614472657375;
      break;
    case 28:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 29:
      unint64_t result = 0xD000000000000011;
      break;
    case 30:
      unint64_t result = 0xD000000000000018;
      break;
    case 31:
      unint64_t result = 0xD000000000000019;
      break;
    case 32:
      unint64_t result = 0x7265646F636564;
      break;
    case 33:
      unint64_t result = 0x437265646F636564;
      break;
    default:
      return result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.CodingKeys()
{
  return AutomationJSON.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AutomationJSON.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 35;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AutomationJSON.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)v1;
  uint64_t v89 = *(void *)(v1 + 8);
  uint64_t v90 = v7;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v87 = *(void *)(v1 + 24);
  uint64_t v88 = v8;
  uint64_t v86 = *(void *)(v1 + 32);
  int v100 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v85 = *(void *)(v1 + 48);
  int v84 = *(unsigned __int8 *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  int v83 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v81 = *(void *)(v1 + 88);
  uint64_t v82 = v9;
  uint64_t v79 = *(void *)(v1 + 96);
  uint64_t v80 = v10;
  uint64_t v11 = *(void *)(v1 + 112);
  uint64_t v77 = *(void *)(v1 + 104);
  uint64_t v78 = v11;
  int v76 = *(unsigned __int8 *)(v1 + 120);
  uint64_t v12 = *(void *)(v1 + 128);
  uint64_t v74 = *(void *)(v1 + 136);
  uint64_t v75 = v12;
  uint64_t v13 = *(void *)(v1 + 144);
  uint64_t v72 = *(void *)(v1 + 152);
  uint64_t v73 = v13;
  uint64_t v14 = *(void *)(v1 + 160);
  uint64_t v70 = *(void *)(v1 + 168);
  uint64_t v71 = v14;
  uint64_t v68 = *(void *)(v1 + 176);
  int v69 = *(unsigned __int8 *)(v1 + 184);
  uint64_t v66 = *(void *)(v1 + 192);
  int v67 = *(unsigned __int8 *)(v1 + 200);
  uint64_t v15 = *(void *)(v1 + 216);
  v31[1] = *(void *)(v1 + 208);
  v31[2] = v15;
  int v32 = *(unsigned __int8 *)(v1 + 224);
  uint64_t v33 = *(void *)(v1 + 232);
  LODWORD(v14) = *(unsigned __int8 *)(v1 + 312);
  LODWORD(v15) = *(unsigned __int8 *)(v1 + 241);
  int v34 = *(unsigned __int8 *)(v1 + 240);
  int v35 = v15;
  int v36 = *(unsigned __int8 *)(v1 + 242);
  uint64_t v16 = *(void *)(v1 + 256);
  uint64_t v37 = *(void *)(v1 + 248);
  uint64_t v38 = v16;
  uint64_t v17 = *(void *)(v1 + 272);
  uint64_t v39 = *(void *)(v1 + 264);
  uint64_t v40 = v17;
  uint64_t v18 = *(void *)(v1 + 288);
  uint64_t v41 = *(void *)(v1 + 280);
  uint64_t v42 = v18;
  int v43 = *(unsigned __int8 *)(v1 + 296);
  int v44 = v14;
  uint64_t v19 = *(void *)(v1 + 320);
  uint64_t v45 = *(void *)(v1 + 304);
  uint64_t v46 = v19;
  uint64_t v47 = *(void *)(v1 + 328);
  int v48 = *(unsigned __int8 *)(v1 + 336);
  uint64_t v49 = *(void *)(v1 + 344);
  int v50 = *(unsigned __int8 *)(v1 + 352);
  uint64_t v20 = *(void *)(v1 + 368);
  uint64_t v51 = *(void *)(v1 + 360);
  uint64_t v52 = v20;
  uint64_t v21 = *(void *)(v1 + 384);
  uint64_t v53 = *(void *)(v1 + 376);
  uint64_t v54 = v21;
  uint64_t v22 = *(void *)(v1 + 400);
  uint64_t v55 = *(void *)(v1 + 392);
  uint64_t v56 = v22;
  uint64_t v23 = *(void *)(v1 + 408);
  uint64_t v58 = *(void *)(v1 + 416);
  uint64_t v59 = v23;
  int v57 = *(unsigned __int8 *)(v1 + 424);
  uint64_t v24 = *(void *)(v1 + 440);
  uint64_t v62 = *(void *)(v1 + 432);
  uint64_t v63 = v24;
  LODWORD(v24) = *(unsigned __int16 *)(v1 + 448);
  int v60 = *(unsigned __int8 *)(v1 + 450);
  int v61 = v24;
  uint64_t v25 = *(void *)(v1 + 464);
  uint64_t v64 = *(void *)(v1 + 456);
  uint64_t v65 = v25;
  outlined init with take of AutomationJSON.DecoderConfig?(v1 + 472, (uint64_t)v99);
  uint64_t v26 = *(void *)(v1 + 608);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v92) = 0;
  uint64_t v27 = v91;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v27) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v91 = v26;
  LOBYTE(v92) = 1;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 5;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v92 = v79;
  char v101 = 6;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v30 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v89 = v30;
  uint64_t v90 = v29;
  LOBYTE(v92) = 7;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = v76;
  char v101 = 8;
  lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v75;
  char v101 = 9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v74;
  char v101 = 10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AutomationJSON.Turn]]);
  lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [[AutomationJSON.Turn]] and conformance <A> [A], &demangling cache variable for type metadata for [[AutomationJSON.Turn]], (void (*)(void))lazy protocol witness table accessor for type [AutomationJSON.Turn] and conformance <A> [A]);
  uint64_t v88 = v3;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v73;
  char v101 = 11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AutomationJSON.Response]);
  lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [AutomationJSON.Response] and conformance <A> [A], &demangling cache variable for type metadata for [AutomationJSON.Response], (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.Response and conformance AutomationJSON.Response);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v72;
  char v101 = 12;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v71;
  char v101 = 13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AutomationJSON.RenderedPrompt?]);
  lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [AutomationJSON.RenderedPrompt?] and conformance <A> [A], &demangling cache variable for type metadata for [AutomationJSON.RenderedPrompt?], (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v70;
  char v101 = 14;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v92) = 15;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 16;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 17;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 18;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 19;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 20;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 21;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 22;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 23;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v92 = v41;
  char v101 = 24;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v92) = 25;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v92) = 26;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v92 = v46;
  uint64_t v93 = v47;
  LOBYTE(v94) = v48;
  char v101 = 27;
  lazy protocol witness table accessor for type JSON and conformance JSON();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v49;
  LOBYTE(v93) = v50;
  char v101 = 28;
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v92) = 29;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v92 = v53;
  uint64_t v93 = v54;
  uint64_t v94 = v55;
  uint64_t v95 = v56;
  uint64_t v96 = v59;
  uint64_t v97 = v58;
  char v98 = v57;
  char v101 = 30;
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v62;
  uint64_t v93 = v63;
  BYTE2(v94) = (v61 | (v60 << 16)) >> 16;
  LOWORD(v94) = v61;
  char v101 = 31;
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v92) = 32;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v99, (uint64_t)&v92);
  char v101 = 33;
  lazy protocol witness table accessor for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v91;
  char v101 = 34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AutomationJSON.ParameterizedPrompt]);
  lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A], &demangling cache variable for type metadata for [AutomationJSON.ParameterizedPrompt], (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.ParameterizedPrompt and conformance AutomationJSON.ParameterizedPrompt);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v88);
}

uint64_t AutomationJSON.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v145 = &v156[37];
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.CodingKeys>);
  uint64_t v5 = *(void *)(v148 - 8);
  MEMORY[0x270FA5388](v148);
  uint64_t v7 = (char *)v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(&v156[18], 0, 32);
  _s19TokenGenerationCore14AutomationJSONV13DecoderConfigVSgWOi0_((uint64_t)v157);
  v150 = &v156[59];
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v157, (uint64_t)&v156[59]);
  v156[76] = 0;
  uint64_t v8 = a1[3];
  unint64_t v149 = (unint64_t)a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v151 = v2;
    uint64_t v9 = 0x7FFFFF91DLL;
LABEL_4:
    unint64_t v10 = v9 + 0x600007EE3;
    goto LABEL_5;
  }
  uint64_t v146 = a2;
  uint64_t v147 = v5;
  LOBYTE(v153[0]) = 0;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v22 = v21;
  v156[0] = v20;
  v156[1] = v21;
  LOBYTE(v153[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v25 = v24;
  v156[2] = v23;
  v156[3] = v24;
  LOBYTE(v153[0]) = 2;
  swift_bridgeObjectRetain();
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v143 = v20;
  uint64_t v144 = v23;
  v156[4] = v26;
  LOBYTE(v156[5]) = v27 & 1;
  LOBYTE(v153[0]) = 3;
  uint64_t v28 = v26;
  LODWORD(v20) = v27;
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v158 = v20;
  uint64_t v142 = v28;
  v156[6] = v29;
  LOBYTE(v156[7]) = v30 & 1;
  LOBYTE(v153[0]) = 4;
  uint64_t v31 = v29;
  LODWORD(v28) = v30;
  uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v140 = v28;
  uint64_t v139 = v31;
  uint64_t v141 = v22;
  v156[8] = v32;
  LOBYTE(v156[9]) = v33 & 1;
  LOBYTE(v153[0]) = 5;
  uint64_t v34 = v32;
  LODWORD(v28) = v33;
  uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v135 = v28;
  uint64_t v136 = v34;
  uint64_t v137 = v35;
  v156[10] = v35;
  v156[11] = v36;
  uint64_t v37 = v36;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  LOBYTE(v152[0]) = 6;
  uint64_t v39 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
  uint64_t v138 = v37;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v132 = v39;
  uint64_t v133 = v38;
  uint64_t v40 = v137;
  uint64_t v134 = v25;
  uint64_t v41 = v153[0];
  v156[12] = v153[0];
  LOBYTE(v153[0]) = 7;
  swift_bridgeObjectRetain();
  uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v44 = v43;
  uint64_t v131 = v41;
  v156[13] = v42;
  v156[14] = v43;
  LOBYTE(v152[0]) = 8;
  lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v130 = v44;
  char v45 = v153[0];
  LOBYTE(v156[15]) = v153[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  LOBYTE(v152[0]) = 9;
  lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = 0;
  uint64_t v46 = v153[0];
  v156[16] = v153[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AutomationJSON.Turn]]);
  LOBYTE(v152[0]) = 10;
  lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [[AutomationJSON.Turn]] and conformance <A> [A], &demangling cache variable for type metadata for [[AutomationJSON.Turn]], (void (*)(void))lazy protocol witness table accessor for type [AutomationJSON.Turn] and conformance <A> [A]);
  uint64_t v129 = v46;
  swift_bridgeObjectRetain();
  uint64_t v47 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v47;
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = 0x7FFFFFC00;
    goto LABEL_4;
  }
  uint64_t v48 = v153[0];
  v156[17] = v153[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AutomationJSON.Response]);
  LOBYTE(v152[0]) = 11;
  lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [AutomationJSON.Response] and conformance <A> [A], &demangling cache variable for type metadata for [AutomationJSON.Response], (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.Response and conformance AutomationJSON.Response);
  uint64_t v128 = v48;
  swift_bridgeObjectRetain();
  uint64_t v49 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v49;
  if (v49)
  {
    unint64_t v10 = 0x600007EE3;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_54:
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v156[18] = v153[0];
  LOBYTE(v152[0]) = 12;
  uint64_t v127 = v153[0];
  swift_bridgeObjectRetain();
  uint64_t v50 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v50;
  if (v50)
  {
    unint64_t v10 = 0x600007EE3;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  uint64_t v51 = v153[0];
  v156[19] = v153[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AutomationJSON.RenderedPrompt?]);
  LOBYTE(v152[0]) = 13;
  lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [AutomationJSON.RenderedPrompt?] and conformance <A> [A], &demangling cache variable for type metadata for [AutomationJSON.RenderedPrompt?], (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?);
  uint64_t v126 = v51;
  swift_bridgeObjectRetain();
  uint64_t v52 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v52;
  if (v52)
  {
    unint64_t v10 = 0x600007EE3;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  v156[20] = v153[0];
  LOBYTE(v152[0]) = 14;
  uint64_t v53 = v153[0];
  swift_bridgeObjectRetain();
  uint64_t v54 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v54;
  if (v54)
  {
    unint64_t v10 = 0x600007EE3;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  uint64_t v55 = v153[0];
  v156[21] = v153[0];
  LOBYTE(v153[0]) = 15;
  swift_bridgeObjectRetain();
  uint64_t v56 = v151;
  uint64_t v125 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v124 = v57;
  uint64_t v151 = v56;
  if (v56)
  {
    unint64_t v10 = 0x600007EE3;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  v156[22] = v125;
  LOBYTE(v156[23]) = v124 & 1;
  LOBYTE(v153[0]) = 16;
  uint64_t v123 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v122 = v58;
  uint64_t v151 = 0;
  v156[24] = v123;
  LOBYTE(v156[25]) = v58 & 1;
  LOBYTE(v153[0]) = 17;
  uint64_t v120 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v121 = v59;
  uint64_t v151 = 0;
  v156[26] = v120;
  v156[27] = v121;
  LOBYTE(v153[0]) = 18;
  swift_bridgeObjectRetain();
  uint64_t v60 = v151;
  int v119 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v151 = v60;
  if (v60)
  {
    unint64_t v10 = 0x600027EE3;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  LOBYTE(v156[28]) = v119;
  LOBYTE(v153[0]) = 19;
  uint64_t v118 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v117 = v61;
  uint64_t v151 = 0;
  v156[29] = v118;
  LOBYTE(v156[30]) = v61 & 1;
  LOBYTE(v153[0]) = 20;
  int v116 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v151 = 0;
  BYTE1(v156[30]) = v116;
  LOBYTE(v153[0]) = 21;
  int v115 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v151 = 0;
  BYTE2(v156[30]) = v115;
  LOBYTE(v153[0]) = 22;
  uint64_t v113 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v114 = v62;
  uint64_t v151 = 0;
  v156[31] = v113;
  v156[32] = v114;
  LOBYTE(v153[0]) = 23;
  swift_bridgeObjectRetain();
  uint64_t v63 = v151;
  uint64_t v111 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v112 = v64;
  uint64_t v151 = v63;
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v10 = 0x600427EE3;
    goto LABEL_5;
  }
  v156[33] = v111;
  v156[34] = v112;
  LOBYTE(v152[0]) = 24;
  swift_bridgeObjectRetain();
  uint64_t v65 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v65;
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v10 = 0x600C27EE3;
    goto LABEL_5;
  }
  v156[35] = v153[0];
  LOBYTE(v153[0]) = 25;
  uint64_t v133 = v156[35];
  swift_bridgeObjectRetain();
  uint64_t v66 = v151;
  uint64_t v132 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v110 = v67;
  uint64_t v151 = v66;
  if (v66) {
    goto LABEL_65;
  }
  v156[36] = v132;
  *uint64_t v145 = v110 & 1;
  LOBYTE(v153[0]) = 26;
  uint64_t v68 = v151;
  uint64_t v109 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v108 = v69;
  uint64_t v151 = v68;
  if (v68
    || (v156[38] = v109,
        v145[16] = v108 & 1,
        LOBYTE(v152[0]) = 27,
        lazy protocol witness table accessor for type JSON and conformance JSON(),
        uint64_t v70 = v151,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(),
        (uint64_t v151 = v70) != 0))
  {
LABEL_65:
    unint64_t v10 = 0x601C27EE3;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  v156[40] = v153[0];
  v156[41] = v153[1];
  LOBYTE(v156[42]) = v153[2];
  LOBYTE(v152[0]) = 28;
  uint64_t v71 = v153[0];
  uint64_t v106 = v153[1];
  int v107 = LOBYTE(v153[2]);
  outlined copy of JSON?(v153[0], v153[1], v153[2]);
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration();
  uint64_t v72 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v72;
  if (v72)
  {
    unint64_t v10 = 0x609C27EE3;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    outlined consume of JSON?(v71, v106, v107);
    goto LABEL_66;
  }
  uint64_t v103 = v153[0];
  v156[43] = v153[0];
  int v102 = LOBYTE(v153[1]);
  LOBYTE(v156[44]) = v153[1];
  LOBYTE(v153[0]) = 29;
  uint64_t v104 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v105 = v73;
  uint64_t v151 = 0;
  v156[45] = v104;
  v156[46] = v105;
  LOBYTE(v152[0]) = 30;
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration();
  swift_bridgeObjectRetain();
  uint64_t v74 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v74;
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    swift_bridgeObjectRelease();
    outlined consume of JSON?(v71, v106, v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v10 = 0x629C27EE3;
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1(v149);
    uint64_t v11 = (v10 >> 22) & 1;
    uint64_t v12 = (v10 >> 23) & 1;
    uint64_t v148 = (v10 >> 27) & 1;
    unint64_t v149 = (v10 >> 29) & 1;
    uint64_t v146 = (v10 >> 17) & 1;
    uint64_t v147 = (v10 >> 24) & 1;
    if (v10)
    {
      swift_bridgeObjectRelease();
      if ((v10 & 2) == 0)
      {
LABEL_7:
        if ((v10 & 0x20) == 0) {
          goto LABEL_8;
        }
        goto LABEL_37;
      }
    }
    else if ((v10 & 2) == 0)
    {
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    if ((v10 & 0x20) == 0)
    {
LABEL_8:
      if ((v10 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_38;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    if ((v10 & 0x40) == 0)
    {
LABEL_9:
      if ((v10 & 0x80) == 0) {
        goto LABEL_10;
      }
      goto LABEL_39;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    if ((v10 & 0x80) == 0)
    {
LABEL_10:
      if ((v10 & 0x200) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    if ((v10 & 0x200) == 0)
    {
LABEL_12:
      int v13 = 0;
      BOOL v14 = 0;
      int v15 = 0;
      int v16 = 0;
      BOOL v17 = 0;
      int v18 = 0;
      if ((v10 & 0x400) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v156[47] = v153[0];
  v156[48] = v153[1];
  v156[49] = v153[2];
  v156[50] = v153[3];
  v156[51] = v153[4];
  v156[52] = v153[5];
  LOBYTE(v156[53]) = v153[6];
  LOBYTE(v152[0]) = 31;
  uint64_t v97 = v153[0];
  uint64_t v98 = v153[1];
  uint64_t v95 = v153[2];
  uint64_t v96 = v153[4];
  uint64_t v99 = v153[3];
  uint64_t v100 = v153[5];
  int v101 = LOBYTE(v153[6]);
  outlined copy of AutomationJSON.InputSafetyConfiguration?(v153[0], v153[1]);
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration();
  uint64_t v75 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  BOOL v94 = v75 == 0;
  uint64_t v151 = v75;
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
LABEL_76:
    outlined consume of AutomationJSON.InputSafetyConfiguration?(v97, v98);
    swift_bridgeObjectRelease();
    outlined consume of JSON?(v71, v106, v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v149);
    int v15 = 0;
LABEL_77:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v11) = 1;
    LODWORD(v12) = 1;
    uint64_t v147 = 1;
    uint64_t v148 = 1;
    uint64_t v146 = 1;
    unint64_t v149 = 1;
    int v13 = 1;
    BOOL v14 = v94;
LABEL_13:
    BOOL v17 = v14;
    swift_bridgeObjectRelease();
    int v16 = v13;
    int v18 = v15;
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v146)
    {
      swift_bridgeObjectRelease();
      if (!v11)
      {
LABEL_16:
        if (!v12) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    else if (!v11)
    {
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    if (!v12)
    {
LABEL_18:
      if (v147)
      {
        swift_bridgeObjectRelease();
        if (!v148)
        {
LABEL_20:
          if (!v149) {
            goto LABEL_21;
          }
          goto LABEL_31;
        }
      }
      else if (!v148)
      {
        goto LABEL_20;
      }
      outlined consume of JSON?(v156[40], v156[41], v156[42]);
      if (!v149)
      {
LABEL_21:
        if (!v16) {
          goto LABEL_22;
        }
        goto LABEL_32;
      }
LABEL_31:
      swift_bridgeObjectRelease();
      if (!v16)
      {
LABEL_22:
        if (!v17) {
          goto LABEL_23;
        }
        goto LABEL_33;
      }
LABEL_32:
      outlined consume of AutomationJSON.InputSafetyConfiguration?(v156[47], v156[48]);
      if (!v17)
      {
LABEL_23:
        if (!v18)
        {
LABEL_25:
          outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v150, (uint64_t)v153);
          outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v153, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AutomationJSON.DecoderConfig?);
          return swift_bridgeObjectRelease();
        }
LABEL_24:
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
LABEL_33:
      outlined consume of AutomationJSON.OutputSafetyConfiguration?(v156[54], v156[55]);
      if (!v18) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v76 = v153[0];
  uint64_t v77 = v153[1];
  __int16 v78 = v153[2];
  int v79 = LOWORD(v153[2]) | (BYTE2(v153[2]) << 16);
  v156[54] = v153[0];
  v156[55] = v153[1];
  uint64_t v80 = v145;
  v145[154] = BYTE2(v153[2]);
  *((_WORD *)v80 + 76) = v78;
  LOBYTE(v153[0]) = 32;
  uint64_t v91 = v76;
  uint64_t v93 = v77;
  int v92 = v79;
  outlined copy of AutomationJSON.OutputSafetyConfiguration?(v76, v77);
  uint64_t v81 = v151;
  uint64_t v89 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v90 = v82;
  uint64_t v151 = v81;
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    outlined consume of AutomationJSON.OutputSafetyConfiguration?(v91, v93);
    goto LABEL_76;
  }
  v156[57] = v89;
  v156[58] = v90;
  char v160 = 33;
  lazy protocol witness table accessor for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig();
  swift_bridgeObjectRetain();
  uint64_t v83 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v83;
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
LABEL_82:
    swift_bridgeObjectRelease();
    outlined consume of AutomationJSON.OutputSafetyConfiguration?(v91, v93);
    outlined consume of AutomationJSON.InputSafetyConfiguration?(v97, v98);
    swift_bridgeObjectRelease();
    outlined consume of JSON?(v71, v106, v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v149);
    int v15 = 1;
    goto LABEL_77;
  }
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)&v155, (uint64_t)v154);
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v154, (uint64_t)v150);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AutomationJSON.ParameterizedPrompt]);
  char v159 = 34;
  outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v154, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AutomationJSON.DecoderConfig?);
  lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A], &demangling cache variable for type metadata for [AutomationJSON.ParameterizedPrompt], (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.ParameterizedPrompt and conformance AutomationJSON.ParameterizedPrompt);
  uint64_t v84 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v151 = v84;
  if (v84)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
    outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v154, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AutomationJSON.DecoderConfig?);
    goto LABEL_82;
  }
  (*(void (**)(char *, uint64_t))(v147 + 8))(v7, v148);
  uint64_t v85 = v153[77];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v152[0] = v143;
  v152[1] = v141;
  v156[76] = v85;
  v152[2] = v144;
  v152[3] = v134;
  v152[4] = v142;
  LOBYTE(v152[5]) = v158 & 1;
  v152[6] = v139;
  LOBYTE(v152[7]) = v140 & 1;
  v152[8] = v136;
  LOBYTE(v152[9]) = v135 & 1;
  v152[10] = v40;
  v152[11] = v138;
  v152[12] = v131;
  v152[13] = v42;
  v152[14] = v130;
  LOBYTE(v152[15]) = v45;
  v152[16] = v129;
  v152[17] = v128;
  v152[18] = v127;
  v152[19] = v126;
  v88[1] = v53;
  v152[20] = v53;
  v152[21] = v55;
  v152[22] = v125;
  LOBYTE(v152[23]) = v124 & 1;
  v152[24] = v123;
  LOBYTE(v152[25]) = v122 & 1;
  v152[26] = v120;
  v152[27] = v121;
  LOBYTE(v152[28]) = v119;
  v152[29] = v118;
  LOBYTE(v152[30]) = v117 & 1;
  BYTE1(v152[30]) = v116;
  BYTE2(v152[30]) = v115;
  v152[31] = v113;
  v152[32] = v114;
  v152[33] = v111;
  v152[34] = v112;
  v152[35] = v133;
  v152[36] = v132;
  LOBYTE(v152[37]) = v110 & 1;
  LOBYTE(v152[39]) = v108 & 1;
  v152[38] = v109;
  v88[0] = v71;
  v152[40] = v71;
  v152[41] = v106;
  LOBYTE(v152[42]) = v107;
  v152[43] = v103;
  LOBYTE(v152[44]) = v102;
  v152[45] = v104;
  v152[46] = v105;
  v152[47] = v97;
  v152[48] = v98;
  v152[49] = v95;
  v152[50] = v99;
  v152[51] = v96;
  v152[52] = v100;
  LOBYTE(v152[53]) = v101;
  uint64_t v86 = v91;
  v152[54] = v91;
  uint64_t v87 = v93;
  v152[55] = v93;
  BYTE2(v152[56]) = BYTE2(v92);
  LOWORD(v152[56]) = v92;
  v152[57] = v89;
  v152[58] = v90;
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v154, (uint64_t)&v152[59]);
  v152[76] = v85;
  outlined retain of AutomationJSON((uint64_t)v152);
  swift_bridgeObjectRelease();
  outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v154, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AutomationJSON.DecoderConfig?);
  swift_bridgeObjectRelease();
  outlined consume of AutomationJSON.OutputSafetyConfiguration?(v86, v87);
  outlined consume of AutomationJSON.InputSafetyConfiguration?(v97, v98);
  swift_bridgeObjectRelease();
  outlined consume of JSON?(v88[0], v106, v107);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy((void *)v146, v152, 0x268uLL);
  __swift_destroy_boxed_opaque_existential_1(v149);
  memcpy(v153, v156, 0x268uLL);
  return outlined release of AutomationJSON((uint64_t)v153);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomationJSON.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON(void *a1)
{
  return AutomationJSON.encode(to:)(a1);
}

uint64_t default argument 1 of Grammar.init(backusNaurForm:prependSpaceToRootRule:cacheableResursiveNonTerminals:)()
{
  return 0;
}

uint64_t default argument 2 of Grammar.init(backusNaurForm:prependSpaceToRootRule:cacheableResursiveNonTerminals:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 1 of Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)()
{
  return 0;
}

uint64_t default argument 2 of Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 1 of Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  uint64_t v4 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v4;
}

uint64_t closure #2 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void *_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

uint64_t _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = (uint64_t)_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v8 = (void *)swift_allocObject();
          size_t v12 = _swift_stdlib_malloc_size(v8);
          v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        outlined copy of Data._Representation(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        outlined consume of Data._Representation(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x25F961DA8);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized closure #1 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined destroy of _HasContiguousBytes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of _HasContiguousBytes(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((unint64_t *)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [AutomationJSON.Turn] and conformance <A> [A]()
{
  return lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [AutomationJSON.Turn] and conformance <A> [A], &demangling cache variable for type metadata for [AutomationJSON.Turn], (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.Turn and conformance AutomationJSON.Turn);
}

{
  return lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type [AutomationJSON.Turn] and conformance <A> [A], &demangling cache variable for type metadata for [AutomationJSON.Turn], (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.Turn and conformance AutomationJSON.Turn);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Turn and conformance AutomationJSON.Turn()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Response and conformance AutomationJSON.Response()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?()
{
  return lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt? and conformance <A> A?, &demangling cache variable for type metadata for AutomationJSON.RenderedPrompt?, (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt);
}

{
  return lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt? and conformance <A> A?, &demangling cache variable for type metadata for AutomationJSON.RenderedPrompt?, (void (*)(void))lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.ParameterizedPrompt and conformance AutomationJSON.ParameterizedPrompt()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt and conformance AutomationJSON.ParameterizedPrompt;
  if (!lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt and conformance AutomationJSON.ParameterizedPrompt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt and conformance AutomationJSON.ParameterizedPrompt);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt and conformance AutomationJSON.ParameterizedPrompt;
  if (!lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt and conformance AutomationJSON.ParameterizedPrompt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.ParameterizedPrompt and conformance AutomationJSON.ParameterizedPrompt);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [AutomationJSON.ParameterizedPrompt] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of AutomationJSON(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 328);
  uint64_t v5 = *(void *)(a1 + 320);
  uint64_t v6 = *(void *)(a1 + 384);
  uint64_t v7 = *(void *)(a1 + 376);
  uint64_t v8 = *(void *)(a1 + 440);
  uint64_t v9 = *(void *)(a1 + 432);
  uint64_t v11 = *(void *)(a1 + 472);
  uint64_t v10 = *(void *)(a1 + 480);
  char v2 = *(unsigned char *)(a1 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of JSON?(v5, v4, v2);
  swift_bridgeObjectRetain();
  outlined copy of AutomationJSON.InputSafetyConfiguration?(v7, v6);
  outlined copy of AutomationJSON.OutputSafetyConfiguration?(v9, v8);
  swift_bridgeObjectRetain();
  outlined copy of AutomationJSON.DecoderConfig?(v11, v10);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AutomationJSON(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 328);
  uint64_t v5 = *(void *)(a1 + 320);
  uint64_t v6 = *(void *)(a1 + 384);
  uint64_t v7 = *(void *)(a1 + 376);
  uint64_t v8 = *(void *)(a1 + 440);
  uint64_t v9 = *(void *)(a1 + 432);
  uint64_t v11 = *(void *)(a1 + 472);
  uint64_t v10 = *(void *)(a1 + 480);
  char v2 = *(unsigned char *)(a1 + 336);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of JSON?(v5, v4, v2);
  swift_bridgeObjectRelease();
  outlined consume of AutomationJSON.InputSafetyConfiguration?(v7, v6);
  outlined consume of AutomationJSON.OutputSafetyConfiguration?(v9, v8);
  swift_bridgeObjectRelease();
  outlined consume of AutomationJSON.DecoderConfig?(v11, v10);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type TGModes and conformance TGModes()
{
  unint64_t result = lazy protocol witness table cache variable for type TGModes and conformance TGModes;
  if (!lazy protocol witness table cache variable for type TGModes and conformance TGModes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TGModes and conformance TGModes);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  void *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for TGModes()
{
  return &type metadata for TGModes;
}

uint64_t destroy for AutomationJSON(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 336);
  if (v2 != 255) {
    outlined consume of JSON(*(void *)(a1 + 320), *(void *)(a1 + 328), v2);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 384) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 440) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 480))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AutomationJSON(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v11;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v12 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v12;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  uint64_t v13 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v13;
  *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  uint64_t v14 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v14;
  uint64_t v15 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v15;
  uint64_t v17 = *(void *)(a2 + 280);
  uint64_t v16 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 280) = v17;
  *(void *)(a1 + 288) = v16;
  uint64_t v18 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v18;
  int v19 = *(unsigned __int8 *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 == 255)
  {
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  }
  else
  {
    uint64_t v20 = *(void *)(a2 + 320);
    uint64_t v21 = *(void *)(a2 + 328);
    outlined copy of JSON(v20, v21, v19);
    *(void *)(a1 + 320) = v20;
    *(void *)(a1 + 328) = v21;
    *(unsigned char *)(a1 + 336) = v19;
  }
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  uint64_t v22 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v22;
  uint64_t v23 = *(void *)(a2 + 384);
  swift_bridgeObjectRetain();
  if (v23 == 1)
  {
    long long v24 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v24;
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  }
  else
  {
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 384) = v23;
    *(_WORD *)(a1 + 392) = *(_WORD *)(a2 + 392);
    *(unsigned char *)(a1 + 394) = *(unsigned char *)(a2 + 394);
    uint64_t v25 = *(void *)(a2 + 408);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(void *)(a1 + 408) = v25;
    *(void *)(a1 + 416) = *(void *)(a2 + 416);
    *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v26 = *(void *)(a2 + 440);
  if (v26 == 1)
  {
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_DWORD *)(a1 + 447) = *(_DWORD *)(a2 + 447);
  }
  else
  {
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    *(void *)(a1 + 440) = v26;
    *(_WORD *)(a1 + 448) = *(_WORD *)(a2 + 448);
    *(unsigned char *)(a1 + 450) = *(unsigned char *)(a2 + 450);
    swift_bridgeObjectRetain();
  }
  uint64_t v27 = *(void *)(a2 + 464);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = v27;
  uint64_t v28 = *(void *)(a2 + 480);
  swift_bridgeObjectRetain();
  if (v28)
  {
    *(void *)(a1 + 472) = *(void *)(a2 + 472);
    *(void *)(a1 + 480) = v28;
    uint64_t v29 = *(void *)(a2 + 496);
    *(void *)(a1 + 488) = *(void *)(a2 + 488);
    *(void *)(a1 + 496) = v29;
    uint64_t v30 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = *(void *)(a2 + 504);
    *(void *)(a1 + 512) = v30;
    *(void *)(a1 + 520) = *(void *)(a2 + 520);
    *(void *)(a1 + 528) = *(void *)(a2 + 528);
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    *(void *)(a1 + 552) = *(void *)(a2 + 552);
    *(void *)(a1 + 560) = *(void *)(a2 + 560);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
    *(void *)(a1 + 584) = *(void *)(a2 + 584);
    *(_WORD *)(a1 + 592) = *(_WORD *)(a2 + 592);
    *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
    *(_DWORD *)(a1 + 596) = *(_DWORD *)(a2 + 596);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v31 = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 584) = v31;
    *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
    long long v32 = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 520) = v32;
    long long v33 = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(a1 + 552) = v33;
    long long v34 = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 488) = v34;
  }
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutomationJSON(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v7;
  uint64_t v8 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v8;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  uint64_t v9 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v9;
  *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v10;
  uint64_t v11 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v11;
  uint64_t v12 = (long long *)(a1 + 320);
  uint64_t v13 = (long long *)(a2 + 320);
  int v14 = *(unsigned __int8 *)(a2 + 336);
  if (*(unsigned __int8 *)(a1 + 336) == 255)
  {
    if (v14 == 255)
    {
      long long v23 = *v13;
      *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
      *uint64_t v12 = v23;
    }
    else
    {
      uint64_t v20 = *(void *)(a2 + 320);
      uint64_t v21 = *(void *)(a2 + 328);
      outlined copy of JSON(v20, v21, *(unsigned char *)(a2 + 336));
      *(void *)(a1 + 320) = v20;
      *(void *)(a1 + 328) = v21;
      *(unsigned char *)(a1 + 336) = v14;
    }
  }
  else if (v14 == 255)
  {
    outlined destroy of JSON(a1 + 320);
    char v22 = *(unsigned char *)(a2 + 336);
    *uint64_t v12 = *v13;
    *(unsigned char *)(a1 + 336) = v22;
  }
  else
  {
    uint64_t v15 = *(void *)(a2 + 320);
    uint64_t v16 = *(void *)(a2 + 328);
    outlined copy of JSON(v15, v16, *(unsigned char *)(a2 + 336));
    uint64_t v17 = *(void *)(a1 + 320);
    uint64_t v18 = *(void *)(a1 + 328);
    *(void *)(a1 + 320) = v15;
    *(void *)(a1 + 328) = v16;
    char v19 = *(unsigned char *)(a1 + 336);
    *(unsigned char *)(a1 + 336) = v14;
    outlined consume of JSON(v17, v18, v19);
  }
  uint64_t v24 = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 344) = v24;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = (_OWORD *)(a1 + 376);
  uint64_t v26 = (long long *)(a2 + 376);
  uint64_t v27 = *(void *)(a2 + 384);
  if (*(void *)(a1 + 384) == 1)
  {
    if (v27 == 1)
    {
      long long v28 = *v26;
      long long v29 = *(_OWORD *)(a2 + 392);
      long long v30 = *(_OWORD *)(a2 + 408);
      *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
      *(_OWORD *)(a1 + 392) = v29;
      *(_OWORD *)(a1 + 408) = v30;
      *uint64_t v25 = v28;
    }
    else
    {
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      __int16 v34 = *(_WORD *)(a2 + 392);
      *(unsigned char *)(a1 + 394) = *(unsigned char *)(a2 + 394);
      *(_WORD *)(a1 + 392) = v34;
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      *(void *)(a1 + 408) = *(void *)(a2 + 408);
      *(void *)(a1 + 416) = *(void *)(a2 + 416);
      *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v27 == 1)
  {
    outlined destroy of AutomationJSON.InputSafetyConfiguration(a1 + 376);
    long long v32 = *(_OWORD *)(a2 + 392);
    long long v31 = *(_OWORD *)(a2 + 408);
    long long v33 = *v26;
    *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
    *(_OWORD *)(a1 + 392) = v32;
    *(_OWORD *)(a1 + 408) = v31;
    *uint64_t v25 = v33;
  }
  else
  {
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __int16 v35 = *(_WORD *)(a2 + 392);
    *(unsigned char *)(a1 + 394) = *(unsigned char *)(a2 + 394);
    *(_WORD *)(a1 + 392) = v35;
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    *(void *)(a1 + 416) = *(void *)(a2 + 416);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  }
  uint64_t v36 = (long long *)(a1 + 432);
  uint64_t v37 = (long long *)(a2 + 432);
  uint64_t v38 = *(void *)(a2 + 440);
  if (*(void *)(a1 + 440) == 1)
  {
    if (v38 == 1)
    {
      long long v39 = *v37;
      *(_DWORD *)(a1 + 447) = *(_DWORD *)(a2 + 447);
      *uint64_t v36 = v39;
    }
    else
    {
      *(void *)(a1 + 432) = *(void *)(a2 + 432);
      *(void *)(a1 + 440) = *(void *)(a2 + 440);
      __int16 v41 = *(_WORD *)(a2 + 448);
      *(unsigned char *)(a1 + 450) = *(unsigned char *)(a2 + 450);
      *(_WORD *)(a1 + 448) = v41;
      swift_bridgeObjectRetain();
    }
  }
  else if (v38 == 1)
  {
    outlined destroy of AutomationJSON.OutputSafetyConfiguration(a1 + 432);
    int v40 = *(_DWORD *)(a2 + 447);
    *uint64_t v36 = *v37;
    *(_DWORD *)(a1 + 447) = v40;
  }
  else
  {
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    *(void *)(a1 + 440) = *(void *)(a2 + 440);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __int16 v42 = *(_WORD *)(a2 + 448);
    *(unsigned char *)(a1 + 450) = *(unsigned char *)(a2 + 450);
    *(_WORD *)(a1 + 448) = v42;
  }
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = (_OWORD *)(a1 + 472);
  uint64_t v44 = (_OWORD *)(a2 + 472);
  uint64_t v45 = *(void *)(a2 + 480);
  if (*(void *)(a1 + 480))
  {
    if (v45)
    {
      *(void *)(a1 + 472) = *(void *)(a2 + 472);
      *(void *)(a1 + 480) = *(void *)(a2 + 480);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 488) = *(void *)(a2 + 488);
      *(void *)(a1 + 496) = *(void *)(a2 + 496);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 504) = *(void *)(a2 + 504);
      *(void *)(a1 + 512) = *(void *)(a2 + 512);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 520) = *(void *)(a2 + 520);
      *(void *)(a1 + 528) = *(void *)(a2 + 528);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 536) = *(void *)(a2 + 536);
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 552) = *(void *)(a2 + 552);
      *(void *)(a1 + 560) = *(void *)(a2 + 560);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v46 = *(void *)(a2 + 568);
      *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
      *(void *)(a1 + 568) = v46;
      uint64_t v47 = *(void *)(a2 + 584);
      *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
      *(void *)(a1 + 584) = v47;
      *(unsigned char *)(a1 + 593) = *(unsigned char *)(a2 + 593);
      LODWORD(v47) = *(_DWORD *)(a2 + 596);
      *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
      *(_DWORD *)(a1 + 596) = v47;
    }
    else
    {
      outlined destroy of AutomationJSON.DecoderConfig(a1 + 472);
      _OWORD *v43 = *v44;
      long long v50 = *(_OWORD *)(a2 + 536);
      long long v52 = *(_OWORD *)(a2 + 488);
      long long v51 = *(_OWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
      *(_OWORD *)(a1 + 536) = v50;
      *(_OWORD *)(a1 + 488) = v52;
      *(_OWORD *)(a1 + 504) = v51;
      long long v54 = *(_OWORD *)(a2 + 568);
      long long v53 = *(_OWORD *)(a2 + 584);
      long long v55 = *(_OWORD *)(a2 + 552);
      *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
      *(_OWORD *)(a1 + 568) = v54;
      *(_OWORD *)(a1 + 584) = v53;
      *(_OWORD *)(a1 + 552) = v55;
    }
  }
  else if (v45)
  {
    *(void *)(a1 + 472) = *(void *)(a2 + 472);
    *(void *)(a1 + 480) = *(void *)(a2 + 480);
    *(void *)(a1 + 488) = *(void *)(a2 + 488);
    *(void *)(a1 + 496) = *(void *)(a2 + 496);
    *(void *)(a1 + 504) = *(void *)(a2 + 504);
    *(void *)(a1 + 512) = *(void *)(a2 + 512);
    *(void *)(a1 + 520) = *(void *)(a2 + 520);
    *(void *)(a1 + 528) = *(void *)(a2 + 528);
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    *(void *)(a1 + 552) = *(void *)(a2 + 552);
    *(void *)(a1 + 560) = *(void *)(a2 + 560);
    uint64_t v48 = *(void *)(a2 + 568);
    *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
    *(void *)(a1 + 568) = v48;
    uint64_t v49 = *(void *)(a2 + 584);
    *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
    *(void *)(a1 + 584) = v49;
    *(unsigned char *)(a1 + 593) = *(unsigned char *)(a2 + 593);
    LODWORD(v49) = *(_DWORD *)(a2 + 596);
    *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
    *(_DWORD *)(a1 + 596) = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    _OWORD *v43 = *v44;
    long long v56 = *(_OWORD *)(a2 + 488);
    long long v57 = *(_OWORD *)(a2 + 504);
    long long v58 = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(a1 + 536) = v58;
    *(_OWORD *)(a1 + 488) = v56;
    *(_OWORD *)(a1 + 504) = v57;
    long long v59 = *(_OWORD *)(a2 + 552);
    long long v60 = *(_OWORD *)(a2 + 568);
    long long v61 = *(_OWORD *)(a2 + 584);
    *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
    *(_OWORD *)(a1 + 568) = v60;
    *(_OWORD *)(a1 + 584) = v61;
    *(_OWORD *)(a1 + 552) = v59;
  }
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of JSON(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AutomationJSON.InputSafetyConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AutomationJSON.OutputSafetyConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AutomationJSON.DecoderConfig(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy616_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x268uLL);
}

uint64_t assignWithTake for AutomationJSON(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v8 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(_WORD *)(a1 + 241) = *(_WORD *)(a2 + 241);
  uint64_t v9 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  uint64_t v11 = (_OWORD *)(a2 + 320);
  int v12 = *(unsigned __int8 *)(a1 + 336);
  if (v12 != 255)
  {
    int v13 = *(unsigned __int8 *)(a2 + 336);
    if (v13 != 255)
    {
      uint64_t v14 = *(void *)(a1 + 320);
      uint64_t v15 = *(void *)(a1 + 328);
      *(_OWORD *)(a1 + 320) = *v11;
      *(unsigned char *)(a1 + 336) = v13;
      outlined consume of JSON(v14, v15, v12);
      goto LABEL_6;
    }
    outlined destroy of JSON(a1 + 320);
  }
  *(_OWORD *)(a1 + 320) = *v11;
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
LABEL_6:
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  uint64_t v16 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v16;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 384) == 1)
  {
LABEL_9:
    long long v18 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v18;
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
    goto LABEL_11;
  }
  uint64_t v17 = *(void *)(a2 + 384);
  if (v17 == 1)
  {
    outlined destroy of AutomationJSON.InputSafetyConfiguration(a1 + 376);
    goto LABEL_9;
  }
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v17;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 392) = *(_WORD *)(a2 + 392);
  *(unsigned char *)(a1 + 394) = *(unsigned char *)(a2 + 394);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
LABEL_11:
  if (*(void *)(a1 + 440) == 1)
  {
LABEL_14:
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_DWORD *)(a1 + 447) = *(_DWORD *)(a2 + 447);
    goto LABEL_16;
  }
  uint64_t v20 = *(void *)(a2 + 440);
  if (v20 == 1)
  {
    outlined destroy of AutomationJSON.OutputSafetyConfiguration(a1 + 432);
    goto LABEL_14;
  }
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v20;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 448) = *(_WORD *)(a2 + 448);
  *(unsigned char *)(a1 + 450) = *(unsigned char *)(a2 + 450);
LABEL_16:
  uint64_t v21 = *(void *)(a2 + 464);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = v21;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 480))
  {
LABEL_20:
    long long v25 = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 584) = v25;
    *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
    long long v26 = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 520) = v26;
    long long v27 = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(a1 + 552) = v27;
    long long v28 = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 488) = v28;
    goto LABEL_21;
  }
  uint64_t v22 = *(void *)(a2 + 480);
  if (!v22)
  {
    outlined destroy of AutomationJSON.DecoderConfig(a1 + 472);
    goto LABEL_20;
  }
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(a2 + 512);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a1 + 512) = v24;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(_WORD *)(a1 + 592) = *(_WORD *)(a2 + 592);
  *(_DWORD *)(a1 + 596) = *(_DWORD *)(a2 + 596);
  *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
LABEL_21:
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 616)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 616) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 616) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON()
{
  return &type metadata for AutomationJSON;
}

ValueMetadata *type metadata accessor for AutomationJSON.InputPromptType()
{
  return &type metadata for AutomationJSON.InputPromptType;
}

uint64_t destroy for AutomationJSON.RenderedPrompt()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AutomationJSON.RenderedPrompt(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AutomationJSON.RenderedPrompt(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AutomationJSON.RenderedPrompt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.RenderedPrompt(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.RenderedPrompt(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.RenderedPrompt()
{
  return &type metadata for AutomationJSON.RenderedPrompt;
}

uint64_t destroy for AutomationJSON.RenderedPrompt.Source()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AutomationJSON.RenderedPrompt.Source(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AutomationJSON.RenderedPrompt.Source(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for AutomationJSON.RenderedPrompt.Source(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.RenderedPrompt.Source(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.RenderedPrompt.Source(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.RenderedPrompt.Source()
{
  return &type metadata for AutomationJSON.RenderedPrompt.Source;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.SamplingStrategyConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.SamplingStrategyConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AutomationJSON.SamplingStrategyConfiguration(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for AutomationJSON.SamplingStrategyConfiguration(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.SamplingStrategyConfiguration()
{
  return &type metadata for AutomationJSON.SamplingStrategyConfiguration;
}

uint64_t destroy for AutomationJSON.InputSafetyConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AutomationJSON.InputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutomationJSON.InputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int16 v4 = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(_WORD *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AutomationJSON.InputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.InputSafetyConfiguration()
{
  return &type metadata for AutomationJSON.InputSafetyConfiguration;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.InputSafetyConfiguration.Guardrails()
{
  return &type metadata for AutomationJSON.InputSafetyConfiguration.Guardrails;
}

void *initializeBufferWithCopyOfBuffer for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer()
{
  return &type metadata for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer;
}

uint64_t initializeBufferWithCopyOfBuffer for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator()
{
  return &type metadata for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator;
}

uint64_t destroy for AutomationJSON.OutputSafetyConfiguration()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for AutomationJSON.OutputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutomationJSON.OutputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int16 v4 = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(_WORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy19_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AutomationJSON.OutputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.OutputSafetyConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 19)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.OutputSafetyConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 19) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 19) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.OutputSafetyConfiguration()
{
  return &type metadata for AutomationJSON.OutputSafetyConfiguration;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.Guardrails(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.Guardrails(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)__n128 result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)__n128 result = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.OutputSafetyConfiguration.Guardrails()
{
  return &type metadata for AutomationJSON.OutputSafetyConfiguration.Guardrails;
}

ValueMetadata *type metadata accessor for AutomationJSON.Role()
{
  return &type metadata for AutomationJSON.Role;
}

uint64_t destroy for AutomationJSON.Turn()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for AutomationJSON.Turn(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutomationJSON.Turn(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AutomationJSON.Turn(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.Turn(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.Turn(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.Turn()
{
  return &type metadata for AutomationJSON.Turn;
}

void *initializeBufferWithCopyOfBuffer for AutomationJSON.Response(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AutomationJSON.Response(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AutomationJSON.Response(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.Response(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.Response(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.Response()
{
  return &type metadata for AutomationJSON.Response;
}

uint64_t initializeBufferWithCopyOfBuffer for AutomationJSON.DecoderConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AutomationJSON.DecoderConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AutomationJSON.DecoderConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutomationJSON.DecoderConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v4;
  uint64_t v5 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v5;
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  LODWORD(v5) = *(_DWORD *)(a2 + 124);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = v5;
  return a1;
}

__n128 __swift_memcpy129_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for AutomationJSON.DecoderConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.DecoderConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 129)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.DecoderConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 128) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 129) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 129) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.DecoderConfig()
{
  return &type metadata for AutomationJSON.DecoderConfig;
}

uint64_t destroy for AutomationJSON.ParameterizedPrompt(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 248) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 304) != 1) {
    swift_bridgeObjectRelease();
  }
  int v2 = *(unsigned __int8 *)(a1 + 336);
  if (v2 != 255) {
    outlined consume of JSON(*(void *)(a1 + 320), *(void *)(a1 + 328), v2);
  }
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 368);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AutomationJSON.ParameterizedPrompt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v9;
  uint64_t v10 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v10;
  uint64_t v11 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v11;
  uint64_t v12 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v12;
  uint64_t v13 = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13 == 1)
  {
    long long v14 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v14;
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  }
  else
  {
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = v13;
    *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
    *(unsigned char *)(a1 + 258) = *(unsigned char *)(a2 + 258);
    uint64_t v15 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = v15;
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = *(void *)(a2 + 304);
  if (v16 == 1)
  {
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
  }
  else
  {
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = v16;
    *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
    *(unsigned char *)(a1 + 314) = *(unsigned char *)(a2 + 314);
    swift_bridgeObjectRetain();
  }
  int v17 = *(unsigned __int8 *)(a2 + 336);
  if (v17 == 255)
  {
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  }
  else
  {
    uint64_t v18 = *(void *)(a2 + 320);
    uint64_t v19 = *(void *)(a2 + 328);
    outlined copy of JSON(v18, v19, *(unsigned char *)(a2 + 336));
    *(void *)(a1 + 320) = v18;
    *(void *)(a1 + 328) = v19;
    *(unsigned char *)(a1 + 336) = v17;
  }
  uint64_t v20 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v20;
  uint64_t v21 = *(void *)(a2 + 368);
  swift_bridgeObjectRetain();
  if (v21)
  {
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a1 + 368) = v21;
    uint64_t v22 = *(void *)(a2 + 384);
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 384) = v22;
    uint64_t v23 = *(void *)(a2 + 400);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(void *)(a1 + 400) = v23;
    uint64_t v24 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    *(void *)(a1 + 416) = v24;
    uint64_t v25 = *(void *)(a2 + 432);
    *(void *)(a1 + 424) = *(void *)(a2 + 424);
    *(void *)(a1 + 432) = v25;
    *(void *)(a1 + 440) = *(void *)(a2 + 440);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v26;
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    *(void *)(a1 + 440) = *(void *)(a2 + 440);
    long long v27 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v27;
  }
  return a1;
}

uint64_t assignWithCopy for AutomationJSON.ParameterizedPrompt(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v8;
  uint64_t v9 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v10;
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v11;
  uint64_t v12 = (_OWORD *)(a1 + 240);
  uint64_t v13 = (long long *)(a2 + 240);
  uint64_t v14 = *(void *)(a2 + 248);
  if (*(void *)(a1 + 248) == 1)
  {
    if (v14 == 1)
    {
      long long v15 = *v13;
      long long v16 = *(_OWORD *)(a2 + 256);
      long long v17 = *(_OWORD *)(a2 + 272);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      *(_OWORD *)(a1 + 256) = v16;
      *(_OWORD *)(a1 + 272) = v17;
      *uint64_t v12 = v15;
    }
    else
    {
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      __int16 v21 = *(_WORD *)(a2 + 256);
      *(unsigned char *)(a1 + 258) = *(unsigned char *)(a2 + 258);
      *(_WORD *)(a1 + 256) = v21;
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v14 == 1)
  {
    outlined destroy of AutomationJSON.InputSafetyConfiguration(a1 + 240);
    long long v19 = *(_OWORD *)(a2 + 256);
    long long v18 = *(_OWORD *)(a2 + 272);
    long long v20 = *v13;
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    *(_OWORD *)(a1 + 256) = v19;
    *(_OWORD *)(a1 + 272) = v18;
    *uint64_t v12 = v20;
  }
  else
  {
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __int16 v22 = *(_WORD *)(a2 + 256);
    *(unsigned char *)(a1 + 258) = *(unsigned char *)(a2 + 258);
    *(_WORD *)(a1 + 256) = v22;
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  }
  uint64_t v23 = (long long *)(a1 + 296);
  uint64_t v24 = (long long *)(a2 + 296);
  uint64_t v25 = *(void *)(a2 + 304);
  if (*(void *)(a1 + 304) == 1)
  {
    if (v25 == 1)
    {
      long long v26 = *v24;
      *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
      *uint64_t v23 = v26;
    }
    else
    {
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      __int16 v28 = *(_WORD *)(a2 + 312);
      *(unsigned char *)(a1 + 314) = *(unsigned char *)(a2 + 314);
      *(_WORD *)(a1 + 312) = v28;
      swift_bridgeObjectRetain();
    }
  }
  else if (v25 == 1)
  {
    outlined destroy of AutomationJSON.OutputSafetyConfiguration(a1 + 296);
    int v27 = *(_DWORD *)(a2 + 311);
    *uint64_t v23 = *v24;
    *(_DWORD *)(a1 + 311) = v27;
  }
  else
  {
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __int16 v29 = *(_WORD *)(a2 + 312);
    *(unsigned char *)(a1 + 314) = *(unsigned char *)(a2 + 314);
    *(_WORD *)(a1 + 312) = v29;
  }
  long long v30 = (long long *)(a1 + 320);
  long long v31 = (long long *)(a2 + 320);
  int v32 = *(unsigned __int8 *)(a2 + 336);
  if (*(unsigned __int8 *)(a1 + 336) == 255)
  {
    if (v32 == 255)
    {
      long long v41 = *v31;
      *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
      *long long v30 = v41;
    }
    else
    {
      uint64_t v38 = *(void *)(a2 + 320);
      uint64_t v39 = *(void *)(a2 + 328);
      outlined copy of JSON(v38, v39, *(unsigned char *)(a2 + 336));
      *(void *)(a1 + 320) = v38;
      *(void *)(a1 + 328) = v39;
      *(unsigned char *)(a1 + 336) = v32;
    }
  }
  else if (v32 == 255)
  {
    outlined destroy of JSON(a1 + 320);
    char v40 = *(unsigned char *)(a2 + 336);
    *long long v30 = *v31;
    *(unsigned char *)(a1 + 336) = v40;
  }
  else
  {
    uint64_t v33 = *(void *)(a2 + 320);
    uint64_t v34 = *(void *)(a2 + 328);
    outlined copy of JSON(v33, v34, *(unsigned char *)(a2 + 336));
    uint64_t v35 = *(void *)(a1 + 320);
    uint64_t v36 = *(void *)(a1 + 328);
    *(void *)(a1 + 320) = v33;
    *(void *)(a1 + 328) = v34;
    char v37 = *(unsigned char *)(a1 + 336);
    *(unsigned char *)(a1 + 336) = v32;
    outlined consume of JSON(v35, v36, v37);
  }
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int16 v42 = (_OWORD *)(a1 + 360);
  uint64_t v43 = (_OWORD *)(a2 + 360);
  uint64_t v44 = *(void *)(a2 + 368);
  if (*(void *)(a1 + 368))
  {
    if (v44)
    {
      *(void *)(a1 + 360) = *(void *)(a2 + 360);
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 408) = *(void *)(a2 + 408);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 416) = *(void *)(a2 + 416);
      *(void *)(a1 + 424) = *(void *)(a2 + 424);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 432) = *(void *)(a2 + 432);
      *(void *)(a1 + 440) = *(void *)(a2 + 440);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of AutomationJSON.RenderedPrompt(a1 + 360);
      long long v45 = *(_OWORD *)(a2 + 376);
      *__int16 v42 = *v43;
      *(_OWORD *)(a1 + 376) = v45;
      long long v47 = *(_OWORD *)(a2 + 408);
      long long v46 = *(_OWORD *)(a2 + 424);
      long long v48 = *(_OWORD *)(a2 + 392);
      *(void *)(a1 + 440) = *(void *)(a2 + 440);
      *(_OWORD *)(a1 + 408) = v47;
      *(_OWORD *)(a1 + 424) = v46;
      *(_OWORD *)(a1 + 392) = v48;
    }
  }
  else if (v44)
  {
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    *(void *)(a1 + 416) = *(void *)(a2 + 416);
    *(void *)(a1 + 424) = *(void *)(a2 + 424);
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    *(void *)(a1 + 440) = *(void *)(a2 + 440);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v49 = *(_OWORD *)(a2 + 376);
    *__int16 v42 = *v43;
    *(_OWORD *)(a1 + 376) = v49;
    long long v50 = *(_OWORD *)(a2 + 392);
    long long v51 = *(_OWORD *)(a2 + 408);
    long long v52 = *(_OWORD *)(a2 + 424);
    *(void *)(a1 + 440) = *(void *)(a2 + 440);
    *(_OWORD *)(a1 + 408) = v51;
    *(_OWORD *)(a1 + 424) = v52;
    *(_OWORD *)(a1 + 392) = v50;
  }
  return a1;
}

uint64_t outlined destroy of AutomationJSON.RenderedPrompt(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy448_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1C0uLL);
}

uint64_t assignWithTake for AutomationJSON.ParameterizedPrompt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  uint64_t v7 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  if (*(void *)(a1 + 248) == 1) {
    goto LABEL_4;
  }
  uint64_t v10 = *(void *)(a2 + 248);
  if (v10 == 1)
  {
    outlined destroy of AutomationJSON.InputSafetyConfiguration(a1 + 240);
LABEL_4:
    long long v11 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v11;
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    goto LABEL_6;
  }
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v10;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
  *(unsigned char *)(a1 + 258) = *(unsigned char *)(a2 + 258);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
LABEL_6:
  if (*(void *)(a1 + 304) == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
    goto LABEL_11;
  }
  uint64_t v13 = *(void *)(a2 + 304);
  if (v13 == 1)
  {
    outlined destroy of AutomationJSON.OutputSafetyConfiguration(a1 + 296);
    goto LABEL_9;
  }
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v13;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
  *(unsigned char *)(a1 + 314) = *(unsigned char *)(a2 + 314);
LABEL_11:
  uint64_t v14 = (_OWORD *)(a2 + 320);
  int v15 = *(unsigned __int8 *)(a1 + 336);
  if (v15 != 255)
  {
    int v16 = *(unsigned __int8 *)(a2 + 336);
    if (v16 != 255)
    {
      uint64_t v17 = *(void *)(a1 + 320);
      uint64_t v18 = *(void *)(a1 + 328);
      *(_OWORD *)(a1 + 320) = *v14;
      *(unsigned char *)(a1 + 336) = v16;
      outlined consume of JSON(v17, v18, v15);
      goto LABEL_16;
    }
    outlined destroy of JSON(a1 + 320);
  }
  *(_OWORD *)(a1 + 320) = *v14;
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
LABEL_16:
  uint64_t v19 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v19;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 368))
  {
LABEL_20:
    long long v24 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v24;
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    *(void *)(a1 + 440) = *(void *)(a2 + 440);
    long long v25 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v25;
    return a1;
  }
  uint64_t v20 = *(void *)(a2 + 368);
  if (!v20)
  {
    outlined destroy of AutomationJSON.RenderedPrompt(a1 + 360);
    goto LABEL_20;
  }
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v21;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a2 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.ParameterizedPrompt(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 448)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.ParameterizedPrompt(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 440) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 448) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 448) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomationJSON.ParameterizedPrompt()
{
  return &type metadata for AutomationJSON.ParameterizedPrompt;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _opaque_pthread_mutex_t(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _opaque_pthread_mutex_t(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t()
{
  if (!lazy cache variable for type metadata for _opaque_pthread_mutex_t)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for _opaque_pthread_mutex_t);
    }
  }
}

uint64_t getEnumTagSinglePayload for AutomationJSON.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDE) {
    goto LABEL_17;
  }
  if (a2 + 34 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 34) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 34;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v8 = v6 - 35;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AutomationJSON.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 34 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 34) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDD)
  {
    unsigned int v6 = ((a2 - 222) >> 8) + 1;
    void *result = a2 + 34;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F966338);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 34;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for AutomationJSON.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for AutomationJSON.CodingKeys(unsigned char *result, char a2)
{
  void *result = a2;
  return result;
}

void *type metadata accessor for AutomationJSON.CodingKeys()
{
  return &unk_270BCA870;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.ParameterizedPrompt.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEA) {
    goto LABEL_17;
  }
  if (a2 + 22 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 22) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 22;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x17;
  int v8 = v6 - 23;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AutomationJSON.ParameterizedPrompt.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE9)
  {
    unsigned int v6 = ((a2 - 234) >> 8) + 1;
    void *result = a2 + 22;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F9664DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 22;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AutomationJSON.ParameterizedPrompt.CodingKeys()
{
  return &unk_270BCDE28;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.DecoderConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AutomationJSON.DecoderConfig.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    void *result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F966670);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 9;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AutomationJSON.DecoderConfig.CodingKeys()
{
  return &unk_270BCA900;
}

uint64_t getEnumTag for AutomationJSON.Response.CodingKeys()
{
  return 0;
}

void *type metadata accessor for AutomationJSON.Response.CodingKeys()
{
  return &unk_270BCB838;
}

void *type metadata accessor for AutomationJSON.Turn.CodingKeys()
{
  return &unk_270BCB728;
}

void *type metadata accessor for AutomationJSON.OutputSafetyConfiguration.CodingKeys()
{
  return &unk_270BCB1A8;
}

void *type metadata accessor for AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys()
{
  return &unk_270BCB238;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F966860);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AutomationJSON.InputSafetyConfiguration.CodingKeys()
{
  return &unk_270BCAD58;
}

void *type metadata accessor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys()
{
  return &unk_270BCB010;
}

void *type metadata accessor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys()
{
  return &unk_270BCAF00;
}

void *type metadata accessor for AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys()
{
  return &unk_270BCADE8;
}

uint64_t getEnumTagSinglePayload for TGModes(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TGModes(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F966A24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AutomationJSON.SamplingStrategyConfiguration.CodingKeys()
{
  return &unk_270BCB3D0;
}

void *type metadata accessor for AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys()
{
  return &unk_270BCB460;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.Response.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AutomationJSON.Response.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25F966B58);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  return &unk_270BCB510;
}

void *type metadata accessor for AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys()
{
  return &unk_270BCB4F0;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.RenderedPrompt.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AutomationJSON.RenderedPrompt.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    void *result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F966CFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AutomationJSON.RenderedPrompt.CodingKeys()
{
  return &unk_270BCAA30;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.Turn.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AutomationJSON.Turn.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F966E90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for AutomationJSON.RenderedPrompt.Source.CodingKeys(unsigned char *result, char a2)
{
  void *result = a2 & 1;
  return result;
}

void *type metadata accessor for AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  return &unk_270BCAAC0;
}

uint64_t specialized AutomationJSON.RenderedPrompt.Source.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized AutomationJSON.RenderedPrompt.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C616E696769726FLL && a2 == 0xEE0074706D6F7250;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64657265646E6572 && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73746E656D676573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7344496E656B6F74 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized AutomationJSON.SamplingStrategyConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1802530676 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7375656C63756ELL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x78616D677261 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1265659764 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x747069726373 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x41696A6F6D457369 && a2 == 0xEE006465776F6C6CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized AutomationJSON.InputSafetyConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025FA3D370
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6961726472617567 && a2 == 0xEA0000000000736CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000025FA3D390 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000025FA3D3B0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7566959 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65646F4D74786574 && a2 == 0xEE006E6F69746172 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025FA3D350)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized AutomationJSON.OutputSafetyConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025FA3D370
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6961726472617567 && a2 == 0xEA0000000000736CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized AutomationJSON.Turn.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701605234 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized AutomationJSON.DecoderConfig.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000025FA3D3D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E75427466617264 && a2 == 0xEF68746150656C64 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646E7542796E6974 && a2 == 0xEE0068746150656CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657A696E656B6F74 && a2 == 0xED00006874615072 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000025FA3D3F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000025FA3D410 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6574537466617264 && a2 == 0xEA00000000007370 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6572547466617264 && a2 == 0xEF726F7463614665 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6164417466617264 && a2 == 0xED00006576697470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000025FA3D430)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t specialized AutomationJSON.ParameterizedPrompt.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F72507475706E69 && a2 == 0xEF6570795474706DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000025FA3D450 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x800000025FA3D470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025FA3D490 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65506874676E656CLL && a2 == 0xED000079746C616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x75716553706F7473 && a2 == 0xEC00000065636E65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6E656B6F5478616DLL && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x65536D6F646E6172 && a2 == 0xEA00000000006465 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025FA3D4B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025FA3D4D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6165486E656B6F74 && a2 == 0xEC000000676E696CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x616D65686373 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x72616D6D617267 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025FA3D4F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x74756F656D6974 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000025FA3D510 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000025FA3D530 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x6174614472657375 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x74757074756FLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x64657265646E6572 && a2 == 0xEE0074706D6F7250)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 22;
    }
    else {
      return 23;
    }
  }
}

uint64_t specialized AutomationJSON.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E75426C65646F6DLL && a2 == 0xED00006449656C64 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E656B6F5478616DLL && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65536D6F646E6172 && a2 == 0xEA00000000006465 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74706D6F7270 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7475706E69 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6F72507475706E69 && a2 == 0xEF6570795474706DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000025FA3D450 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x736567617373656DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x74757074756FLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x64657265646E6572 && a2 == -1192481450101870000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000025FA3D550 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025FA3D490 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x65506874676E656CLL && a2 == 0xED000079746C616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x75716553706F7473 && a2 == 0xEC00000065636E65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6D726177657270 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025FA3D4B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025FA3D4D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x6165486E656B6F74 && a2 == 0xEC000000676E696CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x616D65686373 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x72616D6D617267 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025FA3D4F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x6F69746172657469 && a2 == 0xEE00746E756F436ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x654474706D6F7270 && a2 == 0xEB0000000079616CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0x6174614472657375 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x800000025FA3D470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025FA3D570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000025FA3D510 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000025FA3D530 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0x7265646F636564 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0x437265646F636564 && a2 == 0xED00006769666E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000025FA3D590)
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 34;
    }
    else {
      return 35;
    }
  }
}

uint64_t static BackusNaurParser.parsedRules(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v47 = a2;
  unint64_t v3 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v4 = MEMORY[0x261202C40](10, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x263F8D310], v3);
  long long v46 = (void *)MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  char v5 = v46;
  uint64_t v43 = *(void *)(v4 + 16);
  uint64_t v41 = v2;
  if (v43)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    BOOL v7 = (uint64_t *)(v4 + 56);
    do
    {
      uint64_t v8 = *(v7 - 3);
      uint64_t v9 = *(v7 - 2);
      uint64_t v10 = *(v7 - 1);
      uint64_t v11 = *v7;
      long long v46 = v5;
      unint64_t v13 = v5[2];
      unint64_t v12 = v5[3];
      swift_bridgeObjectRetain();
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        char v5 = v46;
      }
      v5[2] = v13 + 1;
      uint64_t v14 = &v5[5 * v13];
      v14[4] = v6;
      v14[5] = v8;
      v14[6] = v9;
      v14[7] = v10;
      v14[8] = v11;
      v7 += 4;
      ++v6;
    }
    while (v43 != v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = v5[2];
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (v15)
  {
    lazy protocol witness table accessor for type Substring and conformance Substring();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v17 = v5 + 8;
    do
    {
      uint64_t v18 = *(v17 - 4);
      uint64_t v19 = (void *)*(v17 - 3);
      uint64_t v21 = *(v17 - 2);
      uint64_t v20 = *(v17 - 1);
      uint64_t v22 = *v17;
      long long v46 = v19;
      *(void *)&long long v47 = v21;
      *((void *)&v47 + 1) = v20;
      uint64_t v48 = v22;
      uint64_t v44 = v18;
      swift_bridgeObjectRetain();
      if (BidirectionalCollection<>.starts<A>(with:)())
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v49 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
          uint64_t v16 = v49;
        }
        unint64_t v24 = *(void *)(v16 + 16);
        unint64_t v23 = *(void *)(v16 + 24);
        uint64_t v25 = v16;
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          uint64_t v25 = v49;
        }
        *(void *)(v25 + 16) = v24 + 1;
        long long v26 = (void *)(v25 + 40 * v24);
        v26[4] = v44;
        v26[5] = v19;
        v26[6] = v21;
        v26[7] = v20;
        v26[8] = v22;
        uint64_t v16 = v25;
      }
      v17 += 5;
      --v15;
    }
    while (v15);
  }
  swift_release();
  int64_t v27 = *(void *)(v16 + 16);
  if (v27)
  {
    uint64_t v45 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
    uint64_t v28 = v45;
    for (i = (uint64_t *)(v16 + 64); ; i += 5)
    {
      uint64_t v30 = *(i - 4);
      unint64_t v31 = *(i - 3);
      unint64_t v32 = *(i - 2);
      uint64_t v33 = *(i - 1);
      uint64_t v34 = *i;
      swift_bridgeObjectRetain();
      static BackusNaurParser.parse(line:lineNumber:)(v31, v32, v33, v34, v30, &v46);
      if (v41) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v35 = v46;
      long long v36 = v47;
      unint64_t v38 = *(void *)(v45 + 16);
      unint64_t v37 = *(void *)(v45 + 24);
      if (v38 >= v37 >> 1)
      {
        long long v42 = v47;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        long long v36 = v42;
      }
      *(void *)(v45 + 16) = v38 + 1;
      uint64_t v39 = v45 + 24 * v38;
      *(void *)(v39 + 32) = v35;
      *(_OWORD *)(v39 + 40) = v36;
      if (!--v27)
      {
        swift_release();
        return v28;
      }
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v28;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t static BackusNaurParser.parse(line:lineNumber:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v13 = type metadata accessor for Symbol(0);
  uint64_t v118 = *(void *)(v13 - 8);
  uint64_t v119 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v121 = (uint64_t)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v120 = (unint64_t *)((char *)&v110 - v17);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v116 = (uint64_t)&v110 - v19;
  MEMORY[0x270FA5388](v18);
  int v115 = (uint64_t *)((char *)&v110 - v20);
  uint64_t v134 = type metadata accessor for CharacterSet();
  MEMORY[0x270FA5388](v134);
  uint64_t v130 = (char *)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v129 = a2 >> 14;
  if (a2 >> 14 == a1 >> 14) {
    goto LABEL_2;
  }
  uint64_t v113 = a5;
  uint64_t v112 = v6;
  int v110 = a6;
  uint64_t v128 = a3;
  uint64_t v25 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v131 = a4;
  swift_bridgeObjectRetain();
  unint64_t v122 = 0;
  uint64_t v111 = 0;
  uint64_t v114 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  int v117 = (void *)MEMORY[0x263F8EE78];
  uint64_t v123 = (void *)MEMORY[0x263F8EE78];
  unint64_t v124 = a2;
  unint64_t v127 = a1;
  while (2)
  {
    uint64_t v30 = v25;
    unsigned __int8 v31 = v26;
    uint64_t v32 = v27;
    uint64_t v33 = Substring.subscript.getter();
    unint64_t v35 = v34;
    uint64_t v133 = Substring.index(after:)();
    uint64_t v126 = v32;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_169;
    }
    uint64_t v36 = v31;
    uint64_t v132 = v32 + 1;
    uint64_t v25 = v30;
    unint64_t v37 = v130;
    switch(v36)
    {
      case 1:
        if (v33 == 32 && v35 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          char v28 = 0;
          char v26 = 1;
          goto LABEL_5;
        }
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        unint64_t v29 = v133;
        if (v53)
        {
          swift_bridgeObjectRelease();
          char v28 = 0;
          char v26 = 1;
          goto LABEL_103;
        }
        if (v33 == 58 && v35 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v57 & 1) == 0) {
            goto LABEL_162;
          }
        }
        char v28 = 0;
        char v26 = 2;
        goto LABEL_103;
      case 2:
        if (v33 == 58 && v35 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          char v28 = 0;
          char v26 = 3;
          goto LABEL_5;
        }
        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        unint64_t v29 = v133;
        if (v54)
        {
          char v28 = 0;
          char v26 = 3;
          goto LABEL_103;
        }
LABEL_162:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError();
        swift_allocError();
        long long v92 = xmmword_25FA34FF0;
        goto LABEL_150;
      case 3:
        if (v33 == 61 && v35 == 0xE100000000000000) {
          goto LABEL_4;
        }
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        unint64_t v29 = v133;
        if ((v38 & 1) == 0) {
          goto LABEL_162;
        }
        goto LABEL_26;
      case 4:
        if (v33 != 32 || v35 != 0xE100000000000000)
        {
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          unint64_t v29 = v133;
          if (v39)
          {
            swift_bridgeObjectRelease();
LABEL_26:
            char v26 = 4;
            char v28 = 1;
            goto LABEL_103;
          }
          if (v33 == 60 && v35 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            goto LABEL_91;
          }
          if (v33 == 34 && v35 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            char v28 = 0;
            char v26 = 6;
            goto LABEL_103;
          }
          if (v33 == 124 && v35 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease();
            int v67 = v117;
            goto LABEL_137;
          }
          char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
          int v67 = v117;
          if (v80)
          {
            swift_bridgeObjectRelease();
LABEL_137:
            if (v122)
            {
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                int v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
              }
              unint64_t v82 = v67[2];
              unint64_t v81 = v67[3];
              unint64_t v83 = v122;
              if (v82 >= v81 >> 1)
              {
                uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v81 > 1), v82 + 1, 1, v67);
                unint64_t v83 = v122;
                int v67 = v90;
              }
              v67[2] = v82 + 1;
              int v117 = v67;
              v67[v82 + 4] = v83;
              swift_bridgeObjectRelease();
              unint64_t v122 = 0;
              goto LABEL_26;
            }
LABEL_169:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError();
            swift_allocError();
            *(_OWORD *)uint64_t v108 = xmmword_25FA34FE0;
            uint64_t v109 = v126;
            *(void *)(v108 + 16) = v113;
            *(void *)(v108 + 24) = v109;
            swift_willThrow();
            return swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError();
          swift_allocError();
          *int v107 = v33;
          v107[1] = v35;
LABEL_151:
          uint64_t v93 = v126;
          v107[2] = v113;
          v107[3] = v93;
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }
LABEL_4:
        swift_bridgeObjectRelease();
        char v26 = 4;
        char v28 = 1;
        goto LABEL_5;
      case 5:
        if ((v35 & 0x2000000000000000) != 0) {
          uint64_t v40 = HIBYTE(v35) & 0xF;
        }
        else {
          uint64_t v40 = v33 & 0xFFFFFFFFFFFFLL;
        }
        if (!v40) {
          goto LABEL_115;
        }
        uint64_t v125 = (v35 & 0xFFFFFFFFFFFFFFFLL) + 32;
        swift_bridgeObjectRetain_n();
        uint64_t v41 = 0;
        break;
      case 6:
        if (v33 == 92 && v35 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          char v28 = 0;
          char v26 = 7;
          goto LABEL_5;
        }
        char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
        unint64_t v29 = v133;
        if (v55)
        {
          swift_bridgeObjectRelease();
          char v28 = 0;
          char v26 = 7;
          goto LABEL_103;
        }
        uint64_t v56 = v112;
        if (v33 == 34 && v35 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          int v135 = v123;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
          lazy protocol witness table accessor for type [Character] and conformance [A]();
          unint64_t v58 = String.init<A>(_:)();
          unint64_t v60 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(v58, v59);
          uint64_t v61 = (uint64_t)v120;
          *uint64_t v120 = v60;
          swift_storeEnumTagMultiPayload();
          swift_bridgeObjectRelease();
          unint64_t v62 = v122;
          if (!v122) {
            unint64_t v62 = MEMORY[0x263F8EE78];
          }
          outlined init with copy of Symbol(v61, v121);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v62 + 16) + 1, 1, v62);
          }
          unint64_t v64 = *(void *)(v62 + 16);
          unint64_t v63 = *(void *)(v62 + 24);
          uint64_t v112 = v56;
          if (v64 >= v63 >> 1) {
            unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1, v62);
          }
          *(void *)(v62 + 16) = v64 + 1;
          unint64_t v65 = (*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
          unint64_t v122 = v62;
          outlined init with take of Symbol(v121, v62 + v65 + *(void *)(v118 + 72) * v64);
          uint64_t v66 = (uint64_t)v120;
          goto LABEL_102;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v123[2] + 1, 1, v123);
        }
        uint64_t v27 = v132;
        goto LABEL_121;
      case 7:
        if ((v35 & 0x2000000000000000) != 0) {
          uint64_t v46 = HIBYTE(v35) & 0xF;
        }
        else {
          uint64_t v46 = v33 & 0xFFFFFFFFFFFFLL;
        }
        if (!v46) {
          goto LABEL_118;
        }
        uint64_t v125 = (v35 & 0xFFFFFFFFFFFFFFFLL) + 32;
        swift_bridgeObjectRetain_n();
        uint64_t v47 = 0;
        while (2)
        {
          if ((v35 & 0x1000000000000000) != 0)
          {
            _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            uint64_t v50 = v49;
            goto LABEL_65;
          }
          if ((v35 & 0x2000000000000000) != 0)
          {
            int v135 = (void *)v33;
            uint64_t v136 = v35 & 0xFFFFFFFFFFFFFFLL;
            if (*((char *)&v135 + v47) < 0)
            {
              switch(__clz(*((unsigned __int8 *)&v135 + v47) ^ 0xFF))
              {
                case 0x1Au:
LABEL_69:
                  uint64_t v50 = 2;
                  break;
                case 0x1Bu:
LABEL_70:
                  uint64_t v50 = 3;
                  break;
                case 0x1Cu:
LABEL_71:
                  uint64_t v50 = 4;
                  break;
                default:
                  goto LABEL_64;
              }
LABEL_65:
              static CharacterSet.whitespacesAndNewlines.getter();
              char v51 = CharacterSet.contains(_:)();
              (*v25)(v37, v134);
              if ((v51 & 1) == 0)
              {
                v47 += v50;
                if (v47 >= v46)
                {
                  swift_bridgeObjectRelease_n();
LABEL_118:
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v123[2] + 1, 1, v123);
                  }
                  uint64_t v27 = v132;
                  unint64_t v29 = v133;
LABEL_121:
                  unint64_t v69 = v123[2];
                  unint64_t v68 = v123[3];
                  if (v69 >= v68 >> 1)
                  {
                    uint64_t v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v123);
                    uint64_t v27 = v132;
                    uint64_t v123 = v89;
                  }
                  char v28 = 0;
                  uint64_t v70 = v123;
                  v123[2] = v69 + 1;
                  uint64_t v71 = &v70[2 * v69];
                  v71[4] = v33;
                  v71[5] = v35;
                  char v26 = 6;
                  goto LABEL_6;
                }
                continue;
              }
LABEL_149:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError();
              swift_allocError();
              long long v92 = xmmword_25FA34FD0;
              goto LABEL_150;
            }
          }
          else
          {
            uint64_t v48 = v125;
            if ((v33 & 0x1000000000000000) == 0) {
              uint64_t v48 = _StringObject.sharedUTF8.getter();
            }
            if (*(char *)(v48 + v47) < 0)
            {
              switch(__clz(*(unsigned __int8 *)(v48 + v47) ^ 0xFF))
              {
                case 0x1Au:
                  goto LABEL_69;
                case 0x1Bu:
                  goto LABEL_70;
                case 0x1Cu:
                  goto LABEL_71;
                default:
                  goto LABEL_64;
              }
            }
          }
          break;
        }
LABEL_64:
        uint64_t v50 = 1;
        goto LABEL_65;
      default:
        if (v33 != 60 || v35 != 0xE100000000000000)
        {
          char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          unint64_t v29 = v133;
          if (v52)
          {
LABEL_91:
            char v28 = 0;
            char v26 = 5;
            goto LABEL_103;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError();
          swift_allocError();
          *int v107 = 0;
          v107[1] = 0;
          goto LABEL_151;
        }
        swift_bridgeObjectRelease();
        char v28 = 0;
        char v26 = 5;
LABEL_5:
        uint64_t v27 = v132;
        unint64_t v29 = v133;
        goto LABEL_6;
    }
    do
    {
      if ((v35 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        uint64_t v44 = v43;
        goto LABEL_41;
      }
      if ((v35 & 0x2000000000000000) == 0)
      {
        uint64_t v42 = v125;
        if ((v33 & 0x1000000000000000) == 0) {
          uint64_t v42 = _StringObject.sharedUTF8.getter();
        }
        if (*(char *)(v42 + v41) < 0)
        {
          switch(__clz(*(unsigned __int8 *)(v42 + v41) ^ 0xFF))
          {
            case 0x1Au:
              goto LABEL_45;
            case 0x1Bu:
              goto LABEL_46;
            case 0x1Cu:
              goto LABEL_47;
            default:
              break;
          }
        }
LABEL_40:
        uint64_t v44 = 1;
        goto LABEL_41;
      }
      int v135 = (void *)v33;
      uint64_t v136 = v35 & 0xFFFFFFFFFFFFFFLL;
      if ((*((char *)&v135 + v41) & 0x80000000) == 0) {
        goto LABEL_40;
      }
      switch(__clz(*((unsigned __int8 *)&v135 + v41) ^ 0xFF))
      {
        case 0x1Au:
LABEL_45:
          uint64_t v44 = 2;
          break;
        case 0x1Bu:
LABEL_46:
          uint64_t v44 = 3;
          break;
        case 0x1Cu:
LABEL_47:
          uint64_t v44 = 4;
          break;
        default:
          goto LABEL_40;
      }
LABEL_41:
      static CharacterSet.whitespacesAndNewlines.getter();
      char v45 = CharacterSet.contains(_:)();
      (*v25)(v37, v134);
      if (v45) {
        goto LABEL_149;
      }
      v41 += v44;
    }
    while (v41 < v40);
    swift_bridgeObjectRelease_n();
LABEL_115:
    if (v33 == 62 && v35 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      unint64_t v29 = v133;
      goto LABEL_126;
    }
    char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
    unint64_t v29 = v133;
    if ((v72 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v123[2] + 1, 1, v123);
      }
      uint64_t v27 = v132;
      unint64_t v86 = v123[2];
      unint64_t v85 = v123[3];
      if (v86 >= v85 >> 1)
      {
        uint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v85 > 1), v86 + 1, 1, v123);
        uint64_t v27 = v132;
        uint64_t v123 = v91;
      }
      char v28 = 0;
      uint64_t v87 = v123;
      v123[2] = v86 + 1;
      uint64_t v88 = &v87[2 * v86];
      v88[4] = v33;
      v88[5] = v35;
      char v26 = 5;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
LABEL_126:
    if (!v123[2])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError();
      swift_allocError();
      long long v92 = xmmword_25FA33410;
LABEL_150:
      *(_OWORD *)int v107 = v92;
      goto LABEL_151;
    }
    if (v114)
    {
      int v135 = v123;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
      lazy protocol witness table accessor for type [Character] and conformance [A]();
      uint64_t v73 = String.init<A>(_:)();
      uint64_t v74 = (uint64_t)v115;
      *int v115 = v73;
      *(void *)(v74 + 8) = v75;
      swift_storeEnumTagMultiPayload();
      unint64_t v76 = v122;
      if (!v122) {
        unint64_t v76 = MEMORY[0x263F8EE78];
      }
      outlined init with copy of Symbol(v74, v116);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v76 + 16) + 1, 1, v76);
      }
      unint64_t v78 = *(void *)(v76 + 16);
      unint64_t v77 = *(void *)(v76 + 24);
      if (v78 >= v77 >> 1) {
        unint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, v76);
      }
      *(void *)(v76 + 16) = v78 + 1;
      unint64_t v79 = (*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
      unint64_t v122 = v76;
      outlined init with take of Symbol(v116, v76 + v79 + *(void *)(v118 + 72) * v78);
      uint64_t v66 = (uint64_t)v115;
LABEL_102:
      outlined destroy of Symbol(v66);
      char v26 = 4;
      char v28 = 1;
      uint64_t v123 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      int v135 = v123;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
      lazy protocol witness table accessor for type [Character] and conformance [A]();
      uint64_t v111 = String.init<A>(_:)();
      uint64_t v114 = v84;
      char v28 = 0;
      char v26 = 1;
      uint64_t v123 = (void *)MEMORY[0x263F8EE78];
    }
LABEL_103:
    uint64_t v27 = v132;
LABEL_6:
    if (v129 != v29 >> 14) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v95 = v114;
  if (!v114)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a5 = v113;
LABEL_2:
    swift_bridgeObjectRetain();
    uint64_t v23 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError();
    swift_allocError();
    *(_OWORD *)uint64_t v24 = xmmword_25FA35010;
    *(void *)(v24 + 16) = a5;
    *(void *)(v24 + 24) = v23;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  if (!v122 || (v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a5 = v113;
    goto LABEL_2;
  }
  uint64_t v96 = one-time initialization token for characterSetLookup;
  swift_bridgeObjectRetain();
  if (v96 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v97 = swift_bridgeObjectRetain();
  char v98 = specialized Sequence.contains(where:)(v97, v111, v95);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v99 = v117;
  if (v98)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v100 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError();
    swift_allocError();
    *(_OWORD *)uint64_t v101 = xmmword_25FA35000;
    *(void *)(v101 + 16) = v113;
    *(void *)(v101 + 24) = v100;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v102 = v99;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99[2] + 1, 1, v99);
  }
  unint64_t v104 = v102[2];
  unint64_t v103 = v102[3];
  if (v104 >= v103 >> 1) {
    int v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v103 > 1), v104 + 1, 1, v102);
  }
  unint64_t v105 = v122;
  v102[2] = v104 + 1;
  v102[v104 + 4] = v105;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  uint64_t v106 = v110;
  *int v110 = v111;
  v106[1] = v95;
  v106[2] = v102;
  return result;
}

Swift::Int SyntaxError.Issue.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  switch(a2)
  {
    case 0:
      Swift::UInt v3 = 0;
      goto LABEL_9;
    case 1:
      Swift::UInt v3 = 1;
      goto LABEL_9;
    case 2:
      Swift::UInt v3 = 2;
      goto LABEL_9;
    case 3:
      Swift::UInt v3 = 3;
      goto LABEL_9;
    case 4:
      Swift::UInt v3 = 5;
      goto LABEL_9;
    case 5:
      Swift::UInt v3 = 6;
LABEL_9:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      break;
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SyntaxError.Issue()
{
  return SyntaxError.Issue.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance SyntaxError.Issue()
{
  switch(*(void *)(v0 + 8))
  {
    case 0:
      Swift::UInt v1 = 0;
      goto LABEL_11;
    case 1:
      Swift::UInt v1 = 1;
      goto LABEL_11;
    case 2:
      Swift::UInt v1 = 2;
      goto LABEL_11;
    case 3:
      Swift::UInt v1 = 3;
      goto LABEL_11;
    case 4:
      Swift::UInt v1 = 5;
      goto LABEL_11;
    case 5:
      Swift::UInt v1 = 6;
LABEL_11:
      Hasher._combine(_:)(v1);
      break;
    default:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      break;
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SyntaxError.Issue()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 0;
      goto LABEL_9;
    case 1:
      Swift::UInt v2 = 1;
      goto LABEL_9;
    case 2:
      Swift::UInt v2 = 2;
      goto LABEL_9;
    case 3:
      Swift::UInt v2 = 3;
      goto LABEL_9;
    case 4:
      Swift::UInt v2 = 5;
      goto LABEL_9;
    case 5:
      Swift::UInt v2 = 6;
LABEL_9:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      break;
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SyntaxError.Issue(uint64_t *a1, uint64_t a2)
{
  return specialized static SyntaxError.Issue.== infix(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

unint64_t SyntaxError.description.getter(uint64_t a1, void *a2)
{
  unint64_t result = 0xD000000000000025;
  switch((unint64_t)a2)
  {
    case 0uLL:
      return result;
    case 1uLL:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 2uLL:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 3uLL:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 4uLL:
      unint64_t result = 0xD000000000000015;
      break;
    case 5uLL:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 0xD000000000000025;
      v4._object = a2;
      String.append(_:)(v4);
      outlined consume of SyntaxError.Issue(0xD000000000000025, (unint64_t)a2);
      unint64_t result = 0xD00000000000001DLL;
      break;
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance SyntaxError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance SyntaxError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance SyntaxError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance SyntaxError()
{
  return MEMORY[0x270F9FB30]();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SyntaxError()
{
  return SyntaxError.description.getter(*(void *)v0, *(void **)(v0 + 8));
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError()
{
  unint64_t result = lazy protocol witness table cache variable for type SyntaxError and conformance SyntaxError;
  if (!lazy protocol witness table cache variable for type SyntaxError and conformance SyntaxError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxError and conformance SyntaxError);
  }
  return result;
}

uint64_t specialized static SyntaxError.Issue.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (a4) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 1:
      if (a4 != 1) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 2:
      if (a4 != 2) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 3:
      if (a4 != 3) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 4:
      if (a4 != 4) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 5:
      if (a4 != 5) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    default:
      if (a4 < 6)
      {
LABEL_18:
        uint64_t result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        uint64_t result = 1;
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      break;
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int64_t v6 = 0;
  uint64_t v7 = result + 64;
  uint64_t v8 = 1 << *(unsigned char *)(result + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(result + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v13 = v12 | (v6 << 6);
LABEL_22:
    uint64_t v17 = (void *)(*(void *)(v5 + 48) + 16 * v13);
    if (*v17 != a2 || v17[1] != a3)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    return 1;
  }
  int64_t v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v14 >= v11) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v14);
  ++v6;
  if (v15) {
    goto LABEL_21;
  }
  int64_t v6 = v14 + 1;
  if (v14 + 1 >= v11) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v6);
  if (v15) {
    goto LABEL_21;
  }
  int64_t v6 = v14 + 2;
  if (v14 + 2 >= v11) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v6);
  if (v15) {
    goto LABEL_21;
  }
  int64_t v6 = v14 + 3;
  if (v14 + 3 >= v11) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v6);
  if (v15)
  {
LABEL_21:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_22;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v11) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      return 0;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [Character] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Character] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Character] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Character]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Character] and conformance [A]);
  }
  return result;
}

uint64_t outlined init with copy of Symbol(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Symbol(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Symbol(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Symbol(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Symbol(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Symbol(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t destroy for SyntaxError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 6) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SyntaxError(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= 6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

void *assignWithCopy for SyntaxError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] >= 6uLL)
  {
    if (v4 >= 6)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of Character((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t outlined destroy of Character(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for SyntaxError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) >= 6uLL)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 >= 6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Character(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyntaxError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF9 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 6;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SyntaxError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 2147483642;
    *(void *)(result + 8) = 0;
    if (a3 > 0x7FFFFFF9) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFF9) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 5;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SyntaxError()
{
  return &type metadata for SyntaxError;
}

uint64_t outlined consume of SyntaxError.Issue(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t destroy for SyntaxError.Issue(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SyntaxError.Issue(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for SyntaxError.Issue(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SyntaxError.Issue(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SyntaxError.Issue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF9 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 5;
  if (v4 >= 7) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SyntaxError.Issue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 5;
    }
  }
  return result;
}

uint64_t getEnumTag for SyntaxError.Issue(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for SyntaxError.Issue(void *result, int a2)
{
  if (a2 < 0)
  {
    void *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SyntaxError.Issue()
{
  return &type metadata for SyntaxError.Issue;
}

unint64_t lazy protocol witness table accessor for type SyntaxError.Issue and conformance SyntaxError.Issue()
{
  unint64_t result = lazy protocol witness table cache variable for type SyntaxError.Issue and conformance SyntaxError.Issue;
  if (!lazy protocol witness table cache variable for type SyntaxError.Issue and conformance SyntaxError.Issue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxError.Issue and conformance SyntaxError.Issue);
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance JSON.JSONCodingKey()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance JSON.JSONCodingKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance JSON.JSONCodingKey(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance JSON.JSONCodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance JSON.JSONCodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t JSON.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JSON.JSONCodingKey>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JSON.JSONCodingKey>);
  MEMORY[0x270FA5388](v6);
  uint64_t v20 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {

    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    outlined destroy of SingleValueDecodingContainer?((uint64_t)&v21, &demangling cache variable for type metadata for SingleValueDecodingContainer?);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.unkeyedContainer()();
    uint64_t v18 = a2;
    uint64_t v19 = a1;
    outlined init with take of _HasContiguousBytes(&v21, (uint64_t)&v24);
    __swift_project_boxed_opaque_existential_1(&v24, v25);
    char v10 = dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter();
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
    if ((v10 & 1) == 0)
    {
      do
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v24, v25);
        lazy protocol witness table accessor for type JSON and conformance JSON();
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        long long v11 = v21;
        char v12 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        }
        unint64_t v14 = v8[2];
        unint64_t v13 = v8[3];
        if (v14 >= v13 >> 1) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v8);
        }
        v8[2] = v14 + 1;
        unint64_t v15 = &v8[3 * v14];
        *((_OWORD *)v15 + 2) = v11;
        *((unsigned char *)v15 + 48) = v12;
        __swift_project_boxed_opaque_existential_1(&v24, v25);
      }
      while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    char v9 = 3;
    a2 = v18;
    a1 = v19;
  }
  else
  {
    outlined init with take of _HasContiguousBytes(&v21, (uint64_t)&v24);
    __swift_project_boxed_opaque_existential_1(&v24, v25);
    if (dispatch thunk of SingleValueDecodingContainer.decodeNil()())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      uint64_t v8 = 0;
      char v9 = 5;
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v24, v25);
      uint64_t v8 = (void *)(dispatch thunk of SingleValueDecodingContainer.decode(_:)() & 1);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      char v9 = 0;
    }
  }
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = v9;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey()
{
  unint64_t result = lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey;
  if (!lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey;
  if (!lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey;
  if (!lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey);
  }
  return result;
}

uint64_t JSON.encode(to:)(void *a1)
{
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<JSON.JSONCodingKey>);
  MEMORY[0x270FA5388](v38);
  uint64_t v39 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)v1;
  uint64_t v7 = *(void *)(v1 + 8);
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Encoder.singleValueContainer()();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v45);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    case 2:
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Encoder.singleValueContainer()();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v45);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    case 3:
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      swift_bridgeObjectRetain();
      dispatch thunk of Encoder.unkeyedContainer()();
      uint64_t v8 = *(void *)(v6 + 16);
      if (!v8)
      {
        uint64_t v13 = v6;
        uint64_t v14 = v7;
        goto LABEL_37;
      }
      uint64_t v38 = v7;
      uint64_t v39 = v6;
      char v9 = (char *)(v6 + 48);
      while (1)
      {
        uint64_t v11 = *((void *)v9 - 1);
        char v12 = *v9;
        uint64_t v40 = *((void *)v9 - 2);
        uint64_t v10 = v40;
        uint64_t v41 = v11;
        char v42 = v12;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v45);
        outlined copy of JSON(v10, v11, v12);
        lazy protocol witness table accessor for type JSON and conformance JSON();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        if (v2) {
          break;
        }
        v9 += 24;
        outlined consume of JSON(v10, v11, v12);
        if (!--v8)
        {
          uint64_t v14 = v38;
          uint64_t v13 = v39;
LABEL_37:
          outlined consume of JSON(v13, v14, 3);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
        }
      }
      outlined consume of JSON(v39, v38, 3);
      outlined consume of JSON(v10, v11, v12);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    case 4:
      uint64_t v35 = v4;
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      lazy protocol witness table accessor for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey();
      swift_bridgeObjectRetain();
      dispatch thunk of Encoder.container<A>(keyedBy:)();
      int64_t v15 = 0;
      uint64_t v16 = *(void *)(v6 + 64);
      uint64_t v36 = v6 + 64;
      uint64_t v17 = 1 << *(unsigned char *)(v6 + 32);
      uint64_t v18 = -1;
      if (v17 < 64) {
        uint64_t v18 = ~(-1 << v17);
      }
      unint64_t v19 = v18 & v16;
      int64_t v37 = (unint64_t)(v17 + 63) >> 6;
      if ((v18 & v16) != 0) {
        goto LABEL_13;
      }
      break;
    case 5:
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Encoder.singleValueContainer()();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v45);
      dispatch thunk of SingleValueEncodingContainer.encodeNil()();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    default:
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Encoder.singleValueContainer()();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v45);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  }
LABEL_14:
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v15 >= v37) {
    goto LABEL_35;
  }
  unint64_t v23 = *(void *)(v36 + 8 * v15);
  if (v23) {
    goto LABEL_24;
  }
  int64_t v24 = v15 + 1;
  if (v15 + 1 >= v37)
  {
LABEL_35:
    uint64_t v33 = v35;
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v39, v38);
  }
  unint64_t v23 = *(void *)(v36 + 8 * v24);
  if (!v23)
  {
    int64_t v24 = v15 + 2;
    if (v15 + 2 >= v37) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v24);
    if (!v23)
    {
      int64_t v24 = v15 + 3;
      if (v15 + 3 < v37)
      {
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (v23) {
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v15 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            break;
          }
          if (v15 >= v37) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v36 + 8 * v15);
          ++v24;
          if (v23) {
            goto LABEL_24;
          }
        }
LABEL_40:
        __break(1u);
        JUMPOUT(0x25F96DF1CLL);
      }
      goto LABEL_35;
    }
  }
LABEL_23:
  int64_t v15 = v24;
LABEL_24:
  unint64_t v19 = (v23 - 1) & v23;
  for (unint64_t i = __clz(__rbit64(v23)) + (v15 << 6); ; unint64_t i = v20 | (v15 << 6))
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v6 + 48) + 16 * i);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = *(void *)(v6 + 56) + 24 * i;
    uint64_t v29 = *(void *)(v28 + 8);
    char v31 = *(unsigned char *)(v28 + 16);
    v43[0] = *(void *)v28;
    uint64_t v30 = v43[0];
    v43[1] = v29;
    char v44 = v31;
    uint64_t v40 = v26;
    uint64_t v41 = v27;
    swift_bridgeObjectRetain();
    outlined copy of JSON(v30, v29, v31);
    lazy protocol witness table accessor for type JSON and conformance JSON();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v2) {
      break;
    }
    swift_bridgeObjectRelease();
    outlined consume of JSON(v30, v29, v31);
    if (!v19) {
      goto LABEL_14;
    }
LABEL_13:
    unint64_t v20 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v39, v38);
  swift_bridgeObjectRelease();
  return outlined consume of JSON(v30, v29, v31);
}

void JSON.hash(into:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v4 = v2;
      }
      else {
        Swift::UInt64 v4 = 0;
      }
      Hasher._combine(_:)(v4);
      break;
    case 2:
      Hasher._combine(_:)(3uLL);
      String.hash(into:)();
      break;
    case 3:
      Hasher._combine(_:)(4uLL);
      specialized Array<A>.hash(into:)(a1, v2);
      break;
    case 4:
      Hasher._combine(_:)(5uLL);
      specialized Dictionary<>.hash(into:)(a1, v2);
      break;
    case 5:
      Hasher._combine(_:)(0);
      break;
    default:
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v2 & 1);
      break;
  }
}

Swift::Int JSON.hashValue.getter()
{
  char v1 = *((unsigned char *)v0 + 16);
  long long v4 = *v0;
  char v5 = v1;
  Hasher.init(_seed:)();
  JSON.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance JSON@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return JSON.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance JSON(void *a1)
{
  return JSON.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JSON()
{
  char v1 = *((unsigned char *)v0 + 16);
  long long v4 = *v0;
  char v5 = v1;
  Hasher.init(_seed:)();
  JSON.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JSON()
{
  char v1 = *((unsigned char *)v0 + 16);
  long long v4 = *v0;
  char v5 = v1;
  Hasher.init(_seed:)();
  JSON.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(symbol: String, position: Int, priority: Int)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      _DWORD v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<JSON>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      _DWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.ParserRule>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      _DWORD v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      _DWORD v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      _DWORD v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.Item>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      _DWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      _DWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, String)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      _DWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Attachment>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      _DWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptComponentValueCustomDataTransformer>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      _DWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TokenizedPrompt>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      _DWORD v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.ParserSymbol>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>, &demangling cache variable for type metadata for [Int]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.State>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<NonTerminalSymbol>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[GenerationSchema.Field]>, &demangling cache variable for type metadata for [GenerationSchema.Field]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache>, &demangling cache variable for type metadata for ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParserGuidedGenerationConstraints<EarleyParser, ExhaustiveLogitMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache>, &demangling cache variable for type metadata for ParserGuidedGenerationConstraints<EarleyParser, ExhaustiveLogitMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptModule>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Token>);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>, type metadata accessor for Symbol, type metadata accessor for Symbol);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalSymbol>, type metadata accessor for TerminalSymbol, type metadata accessor for TerminalSymbol);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CharacterSet>, MEMORY[0x263F06278], MEMORY[0x263F06278]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<GenerationSchema.Field>, MEMORY[0x263F40C00], MEMORY[0x263F40C00]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.PromptFragment>, type metadata accessor for Prompt.PromptFragment, type metadata accessor for Prompt.PromptFragment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.RenderedPromptFragment>, type metadata accessor for Prompt.RenderedPromptFragment, type metadata accessor for Prompt.RenderedPromptFragment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Delimiter>, type metadata accessor for Prompt.Delimiter, type metadata accessor for Prompt.Delimiter);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  long long v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      void v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      void v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  uint64_t v15;
  void *v16;

  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TerminalSymbol(0);
  MEMORY[0x270FA5388](v6);
  char v8 = (Swift::UInt32 *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of Prompt.SpecialToken(a1, (uint64_t)v8, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt32 *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    Swift::UInt32 v9 = *v8;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v9);
  }
  Swift::Int v10 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v10);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for GenerationSchema.Field();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F40C00];
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type GenerationSchema.Field and conformance GenerationSchema.Field, MEMORY[0x263F40C00]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F40C00], &lazy protocol witness table cache variable for type GenerationSchema.Field and conformance GenerationSchema.Field, v2, MEMORY[0x263F40C10]);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for GenerationSchema();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F40C58];
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F40C58], &lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, v2, MEMORY[0x263F40C70]);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for CharacterSet();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F06278];
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F06278], &lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, v2, MEMORY[0x263F06288]);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with copy of Locale?((uint64_t)a1 + *(int *)(v9 + 20), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  if (*(void *)((char *)a1 + *(int *)(v9 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v10 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v10);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSON>);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v34 = *(void *)v32;
      uint64_t v33 = *(void *)(v32 + 8);
      char v35 = *(unsigned char *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of JSON(v34, v33, v35);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      void *v18 = v30;
      v18[1] = v31;
      uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(void *)uint64_t v19 = v34;
      *(void *)(v19 + 8) = v33;
      *(unsigned char *)(v19 + 16) = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for TerminalSymbol(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TerminalSymbol, Int>);
  unint64_t v10 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v9 + 16))
  {
    unint64_t v26 = v3;
    uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v12 = (void *)(v9 + 64);
    int64_t v13 = -1;
    if (v11 < 64) {
      int64_t v13 = ~(-1 << v11);
    }
    uint64_t v14 = v13 & *(void *)(v9 + 64);
    unint64_t v15 = (unint64_t)(v11 + 63) >> 6;
    uint64_t result = swift_retain();
    unint64_t v17 = 0;
    while (1)
    {
      if (v14)
      {
        uint64_t v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        uint64_t v19 = v18 | (v17 << 6);
      }
      else
      {
        unint64_t v20 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v20 >= v15) {
          goto LABEL_23;
        }
        unint64_t v21 = v12[v20];
        ++v17;
        if (!v21)
        {
          unint64_t v17 = v20 + 1;
          if (v20 + 1 >= v15) {
            goto LABEL_23;
          }
          unint64_t v21 = v12[v17];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v15)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v26;
                goto LABEL_30;
              }
              int64_t v24 = 1 << *(unsigned char *)(v9 + 32);
              if (v24 >= 64) {
                bzero((void *)(v9 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v12 = -1 << v24;
              }
              uint64_t v3 = v26;
              *(void *)(v9 + 16) = 0;
              break;
            }
            unint64_t v21 = v12[v22];
            if (!v21)
            {
              while (1)
              {
                unint64_t v17 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_32;
                }
                if (v17 >= v15) {
                  goto LABEL_23;
                }
                unint64_t v21 = v12[v17];
                ++v22;
                if (v21) {
                  goto LABEL_20;
                }
              }
            }
            unint64_t v17 = v22;
          }
        }
LABEL_20:
        uint64_t v14 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
      }
      unint64_t v23 = *(void *)(v9 + 48) + *(void *)(v6 + 72) * v19;
      if (a2) {
        outlined init with take of Prompt.SpecialToken(v23, (uint64_t)v8, type metadata accessor for TerminalSymbol);
      }
      else {
        outlined init with copy of Prompt.SpecialToken(v23, (uint64_t)v8, type metadata accessor for TerminalSymbol);
      }
      uint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v8, *(void *)(*(void *)(v9 + 56) + 8 * v19), v10);
    }
  }
  uint64_t result = swift_release();
LABEL_30:
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NonTerminalSymbol, Int>);
  int64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  char v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;
  char v33;

  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, [Int]>);
  uint64_t v33 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 0;
    uint64_t v32 = (void *)(v4 + 64);
    uint64_t v8 = 1 << *(unsigned char *)(v4 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 64);
    uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v18 = v17 | (v7 << 6);
      }
      else
      {
        uint64_t v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v4 + 64;
        if (v19 >= v31) {
          goto LABEL_33;
        }
        unint64_t v20 = v32[v19];
        ++v7;
        if (!v20)
        {
          uint64_t v7 = v19 + 1;
          if (v19 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v20 = v32[v7];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if (v33)
              {
                uint64_t v30 = 1 << *(unsigned char *)(v4 + 32);
                if (v30 >= 64) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v32 = -1 << v30;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            unint64_t v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v7 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v7 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v20 = v32[v7];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v7 = v21;
          }
        }
LABEL_30:
        unint64_t v10 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      unint64_t v26 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v18);
      uint64_t v28 = *v26;
      BOOL v27 = v26[1];
      uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
      if ((v33 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
      int64_t v13 = result & ~v12;
      uint64_t v14 = v13 >> 6;
      if (((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          int64_t v24 = v14 == v23;
          if (v14 == v23) {
            uint64_t v14 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v11 + 8 * v14);
        }
        while (v25 == -1);
        unint64_t v15 = __clz(__rbit64(~v25)) + (v14 << 6);
      }
      *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = (void *)(*(void *)(v6 + 48) + 16 * v15);
      void *v16 = v28;
      v16[1] = v27;
      *(void *)(*(void *)(v6 + 56) + 8 * v15) = v29;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, (mask: BitSet, isPotentiallyDeterministic: Bool)>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  *uint64_t v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 16 * v19;
      uint64_t v29 = *(void *)v28;
      uint64_t v30 = *(unsigned char *)(v28 + 8);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        int64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          char v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = *(void *)(v7 + 56) + 16 * v16;
      *(void *)unint64_t v17 = v29;
      *(unsigned char *)(v17 + 8) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    uint64_t v34 = v3;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        uint64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          uint64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v21;
          }
        }
LABEL_21:
        uint64_t v12 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      int64_t v22 = 8 * v18;
      unint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      int64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _OWORD v27[2];

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, Any>);
  unint64_t v10 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v9 + 16))
  {
    unint64_t v26 = v3;
    uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v12 = (void *)(v9 + 64);
    int64_t v13 = -1;
    if (v11 < 64) {
      int64_t v13 = ~(-1 << v11);
    }
    uint64_t v14 = v13 & *(void *)(v9 + 64);
    unint64_t v15 = (unint64_t)(v11 + 63) >> 6;
    uint64_t result = swift_retain();
    unint64_t v17 = 0;
    while (1)
    {
      if (v14)
      {
        uint64_t v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        uint64_t v19 = v18 | (v17 << 6);
      }
      else
      {
        unint64_t v20 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v20 >= v15) {
          goto LABEL_23;
        }
        unint64_t v21 = v12[v20];
        ++v17;
        if (!v21)
        {
          unint64_t v17 = v20 + 1;
          if (v20 + 1 >= v15) {
            goto LABEL_23;
          }
          unint64_t v21 = v12[v17];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v15)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v26;
                goto LABEL_30;
              }
              int64_t v24 = 1 << *(unsigned char *)(v9 + 32);
              if (v24 >= 64) {
                bzero((void *)(v9 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v12 = -1 << v24;
              }
              uint64_t v3 = v26;
              *(void *)(v9 + 16) = 0;
              break;
            }
            unint64_t v21 = v12[v22];
            if (!v21)
            {
              while (1)
              {
                unint64_t v17 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_32;
                }
                if (v17 >= v15) {
                  goto LABEL_23;
                }
                unint64_t v21 = v12[v17];
                ++v22;
                if (v21) {
                  goto LABEL_20;
                }
              }
            }
            unint64_t v17 = v22;
          }
        }
LABEL_20:
        uint64_t v14 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
      }
      unint64_t v23 = *(void *)(v9 + 48) + *(void *)(v6 + 72) * v19;
      if (a2)
      {
        outlined init with take of Prompt.SpecialToken(v23, (uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
        outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v19), v27);
      }
      else
      {
        outlined init with copy of Prompt.SpecialToken(v23, (uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
        outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v19, (uint64_t)v27);
      }
      uint64_t result = (uint64_t)specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v8, v27, v10);
    }
  }
  uint64_t result = swift_release();
LABEL_30:
  *uint64_t v3 = v10;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  void *v29;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, String>);
  uint64_t v29 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v9 + 16))
  {
    uint64_t v28 = v2;
    unint64_t v10 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v11 = (void *)(v9 + 64);
    uint64_t v12 = -1;
    if (v10 < 64) {
      uint64_t v12 = ~(-1 << v10);
    }
    int64_t v13 = v12 & *(void *)(v9 + 64);
    uint64_t v14 = (unint64_t)(v10 + 63) >> 6;
    uint64_t result = swift_retain();
    unint64_t v16 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v16 << 6);
      }
      else
      {
        int64_t v22 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v22 >= v14) {
          goto LABEL_23;
        }
        unint64_t v23 = v11[v22];
        ++v16;
        if (!v23)
        {
          unint64_t v16 = v22 + 1;
          if (v22 + 1 >= v14) {
            goto LABEL_23;
          }
          unint64_t v23 = v11[v16];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v28;
                goto LABEL_30;
              }
              BOOL v27 = 1 << *(unsigned char *)(v9 + 32);
              if (v27 >= 64) {
                bzero((void *)(v9 + 64), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v11 = -1 << v27;
              }
              uint64_t v3 = v28;
              *(void *)(v9 + 16) = 0;
              break;
            }
            unint64_t v23 = v11[v24];
            if (!v23)
            {
              while (1)
              {
                unint64_t v16 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_32;
                }
                if (v16 >= v14) {
                  goto LABEL_23;
                }
                unint64_t v23 = v11[v16];
                ++v24;
                if (v23) {
                  goto LABEL_20;
                }
              }
            }
            unint64_t v16 = v24;
          }
        }
LABEL_20:
        int64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v16 << 6);
      }
      char v25 = *(void *)(v9 + 48) + *(void *)(v6 + 72) * v21;
      if (a2)
      {
        outlined init with take of Prompt.SpecialToken(v25, (uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
        unint64_t v26 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v21);
        uint64_t v18 = *v26;
        uint64_t v19 = v26[1];
      }
      else
      {
        outlined init with copy of Prompt.SpecialToken(v25, (uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
        unint64_t v17 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v21);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
      }
      uint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v8, v18, v19, v29);
    }
  }
  uint64_t result = swift_release();
LABEL_30:
  *uint64_t v3 = v29;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Symbol(0);
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GenerationSchema.Field();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<GenerationSchema.Field, Symbol>);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  char v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  char v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  unint64_t v21 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    unint64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    unint64_t v21 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with take of Prompt.SpecialToken(v32 + v33 * v24, v54, type metadata accessor for Symbol);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with copy of Prompt.SpecialToken(v34 + v33 * v24, v54, type metadata accessor for Symbol);
    }
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type GenerationSchema.Field and conformance GenerationSchema.Field, MEMORY[0x263F40C00]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v21 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      unint64_t v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    uint64_t result = outlined init with take of Prompt.SpecialToken(v54, *(void *)(v13 + 56) + v33 * v22, type metadata accessor for Symbol);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  uint64_t v3 = v44;
  unint64_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  void *v46;
  void (**v47)(char *, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  void (**v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Grammar(0);
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GenerationSchema();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<GenerationSchema, Grammar>);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  char v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  char v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  unint64_t v21 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    unint64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    unint64_t v21 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with take of Prompt.SpecialToken(v32 + v33 * v24, v54, type metadata accessor for Grammar);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with copy of Prompt.SpecialToken(v34 + v33 * v24, v54, type metadata accessor for Grammar);
    }
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v21 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      unint64_t v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    uint64_t result = outlined init with take of Prompt.SpecialToken(v54, *(void *)(v13 + 56) + v33 * v22, type metadata accessor for Grammar);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  uint64_t v3 = v44;
  unint64_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<CharacterSet, [Int]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<CharacterSet, Set<Int>>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for CharacterSet();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  char v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  int64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  uint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    unint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_bridgeObjectRetain();
    }
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  unint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v5 = v14;
  return result;
}

uint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TerminalSymbol(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (Swift::UInt32 *)((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of Prompt.SpecialToken(a1, (uint64_t)v13, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt32 *, uint64_t))(v7 + 32))(v9, v13, v6);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    Swift::UInt32 v14 = *v13;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v14);
  }
  Hasher._finalize()();
  unint64_t v15 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v15;
  uint64_t result = outlined init with take of Prompt.SpecialToken(a1, a3[6] + *(void *)(v11 + 72) * v15, type metadata accessor for TerminalSymbol);
  *(void *)(a3[7] + 8 * v15) = a2;
  ++a3[2];
  return result;
}

_OWORD *specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v13 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with copy of Locale?(a1 + *(int *)(v13 + 20), (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(void *)(a1 + *(int *)(v13 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._finalize()();
  unint64_t v14 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
  outlined init with take of Prompt.SpecialToken(a1, a3[6] + *(void *)(*(void *)(v13 - 8) + 72) * v14, type metadata accessor for Prompt.SpecialToken);
  uint64_t result = outlined init with take of Any(a2, (_OWORD *)(a3[7] + 32 * v14));
  ++a3[2];
  return result;
}

uint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v12 - 8);
  unint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v15 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with copy of Locale?(a1 + *(int *)(v15 + 20), (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(void *)(a1 + *(int *)(v15 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._finalize()();
  unint64_t v16 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a4 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v16;
  uint64_t result = outlined init with take of Prompt.SpecialToken(a1, a4[6] + *(void *)(*(void *)(v15 - 8) + 72) * v16, type metadata accessor for Prompt.SpecialToken);
  unint64_t v18 = (void *)(a4[7] + 16 * v16);
  void *v18 = a2;
  v18[1] = a3;
  ++a4[2];
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a1;
  uint64_t v33 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  unint64_t v31 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
  MEMORY[0x270FA5388](v38);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TerminalSymbol(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  unint64_t v34 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  unint64_t v35 = (_DWORD *)((char *)v30 - v12);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v30 - v14;
  uint64_t v16 = v2 + 64;
  uint64_t v40 = v2;
  uint64_t v17 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v18 = a2 & ~v17;
  if ((*(void *)(v2 + 64 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
  {
    uint64_t v19 = *(void *)(v13 + 72);
    uint64_t v36 = ~v17;
    uint64_t v37 = v19;
    uint64_t v32 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    v30[0] = v4 + 32;
    v30[1] = v8;
    uint64_t v20 = (uint64_t)v34;
    do
    {
      outlined init with copy of Prompt.SpecialToken(*(void *)(v40 + 48) + v37 * v18, (uint64_t)v15, type metadata accessor for TerminalSymbol);
      unint64_t v21 = &v7[*(int *)(v38 + 48)];
      outlined init with copy of Prompt.SpecialToken((uint64_t)v15, (uint64_t)v7, type metadata accessor for TerminalSymbol);
      outlined init with copy of Prompt.SpecialToken(v39, (uint64_t)v21, type metadata accessor for TerminalSymbol);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with copy of Prompt.SpecialToken((uint64_t)v7, v20, type metadata accessor for TerminalSymbol);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          int64_t v22 = v31;
          uint64_t v23 = v16;
          uint64_t v24 = v33;
          (*(void (**)(char *, char *, uint64_t))v30[0])(v31, v21, v33);
          char v25 = static CharacterSet.== infix(_:_:)();
          int64_t v26 = *v32;
          unint64_t v27 = v22;
          uint64_t v20 = (uint64_t)v34;
          (*v32)((uint64_t)v27, v24);
          uint64_t v28 = v24;
          uint64_t v16 = v23;
          v26(v20, v28);
          if (v25) {
            goto LABEL_14;
          }
LABEL_12:
          outlined destroy of Prompt.Delimiter((uint64_t)v7, type metadata accessor for TerminalSymbol);
          goto LABEL_5;
        }
        (*v32)(v20, v33);
      }
      else
      {
        outlined init with copy of Prompt.SpecialToken((uint64_t)v7, (uint64_t)v35, type metadata accessor for TerminalSymbol);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          if (*v35 == *(_DWORD *)v21)
          {
LABEL_14:
            outlined destroy of Prompt.Delimiter((uint64_t)v7, type metadata accessor for TerminalSymbol);
            outlined destroy of Prompt.Delimiter((uint64_t)v15, type metadata accessor for TerminalSymbol);
            return v18;
          }
          goto LABEL_12;
        }
      }
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v7, &demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
LABEL_5:
      outlined destroy of Prompt.Delimiter((uint64_t)v15, type metadata accessor for TerminalSymbol);
      unint64_t v18 = (v18 + 1) & v36;
    }
    while (((*(void *)(v16 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
  }
  return v18;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (uint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            uint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      lazy protocol witness table accessor for type Locale and conformance Locale(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v39 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x270FA5388](v44);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v49 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v49);
  char v19 = (void (***)(char *, uint64_t, uint64_t))((char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = v3 + 64;
  uint64_t v48 = v3;
  uint64_t v20 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v21 = a2 & ~v20;
  if ((*(void *)(v3 + 64 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21))
  {
    uint64_t v42 = a1;
    int64_t v43 = v14;
    uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v23 = *(void *)(v17 + 72);
    uint64_t v45 = ~v20;
    uint64_t v46 = v23;
    uint64_t v38 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    uint64_t v41 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    do
    {
      outlined init with copy of Prompt.SpecialToken(*(void *)(v48 + 48) + v46 * v21, (uint64_t)v19, type metadata accessor for Prompt.SpecialToken);
      BOOL v24 = *v19 == *a1 && v19[1] == a1[1];
      if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v25 = *(int *)(v49 + 20);
      uint64_t v26 = (uint64_t)v19 + v25;
      outlined init with copy of Locale?((uint64_t)a1 + v25, (uint64_t)v16);
      uint64_t v27 = (uint64_t)&v10[*(int *)(v44 + 48)];
      outlined init with copy of Locale?(v26, (uint64_t)v10);
      outlined init with copy of Locale?((uint64_t)v16, v27);
      uint64_t v28 = *v22;
      if ((*v22)(v10, 1, v6) == 1)
      {
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v16, &demangling cache variable for type metadata for Locale?);
        if (v28((char *)v27, 1, v6) != 1) {
          goto LABEL_4;
        }
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
      }
      else
      {
        uint64_t v29 = (uint64_t)v43;
        outlined init with copy of Locale?((uint64_t)v10, (uint64_t)v43);
        if (v28((char *)v27, 1, v6) == 1)
        {
          outlined destroy of SingleValueDecodingContainer?((uint64_t)v16, &demangling cache variable for type metadata for Locale?);
          (*v41)(v29, v6);
          a1 = v42;
LABEL_4:
          outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for (Locale?, Locale?));
          goto LABEL_5;
        }
        uint64_t v30 = v39;
        (*v38)(v39, v27, v6);
        lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
        int v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v31 = *v41;
        (*v41)((uint64_t)v30, v6);
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v16, &demangling cache variable for type metadata for Locale?);
        v31(v29, v6);
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
        a1 = v42;
        if ((v40 & 1) == 0) {
          goto LABEL_5;
        }
      }
      uint64_t v32 = *(int *)(v49 + 24);
      uint64_t v33 = (void *)((char *)v19 + v32);
      uint64_t v34 = *(void *)((char *)v19 + v32 + 8);
      unint64_t v35 = (void *)((char *)a1 + v32);
      uint64_t v36 = v35[1];
      if (v34)
      {
        if (v36 && (*v33 == *v35 && v34 == v36 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
LABEL_23:
          outlined destroy of Prompt.Delimiter((uint64_t)v19, type metadata accessor for Prompt.SpecialToken);
          return v21;
        }
      }
      else if (!v36)
      {
        goto LABEL_23;
      }
LABEL_5:
      outlined destroy of Prompt.Delimiter((uint64_t)v19, type metadata accessor for Prompt.SpecialToken);
      unint64_t v21 = (v21 + 1) & v45;
    }
    while (((*(void *)(v47 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) != 0);
  }
  return v21;
}

void *specialized _NativeDictionary.copy()()
{
  char v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSON>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    BOOL v24 = (void *)(*(void *)(v4 + 48) + v16);
    char v25 = *(unsigned char *)(v21 + 16);
    *BOOL v24 = v19;
    v24[1] = v18;
    uint64_t v26 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v26 = v22;
    *(void *)(v26 + 8) = v23;
    *(unsigned char *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)outlined copy of JSON(v22, v23, v25);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;

  char v1 = v0;
  uint64_t v2 = type metadata accessor for TerminalSymbol(0);
  char v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TerminalSymbol, Int>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  BOOL v24 = v1;
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = v5 + 64;
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  uint64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  unint64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      uint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    uint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = *(void *)(v25 + 72) * v17;
    outlined init with copy of Prompt.SpecialToken(*(void *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for TerminalSymbol);
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void *)(*(void *)(v5 + 56) + v19);
    uint64_t result = (void *)outlined init with take of Prompt.SpecialToken((uint64_t)v4, *(void *)(v7 + 48) + v18, type metadata accessor for TerminalSymbol);
    *(void *)(*(void *)(v7 + 56) + v19) = v20;
  }
  uint64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    char v1 = v24;
    goto LABEL_25;
  }
  uint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  char v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NonTerminalSymbol, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    BOOL v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  char v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  BOOL v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  char v1 = type metadata accessor for Symbol(0);
  int64_t v29 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerationSchema.Field();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<GenerationSchema.Field, Symbol>);
  BOOL v24 = v0;
  uint64_t v8 = *v0;
  int64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *BOOL v24 = v10;
    return result;
  }
  uint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  unint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  unint64_t v15 = -1;
  if (v14 < 64) {
    unint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = v15 & *(void *)(v8 + 64);
  char v25 = v8 + 64;
  uint64_t v26 = (unint64_t)(v14 + 63) >> 6;
  int64_t v27 = v5 + 32;
  unint64_t v28 = v5 + 16;
  while (1)
  {
    if (v16)
    {
      uint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      uint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    uint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    uint64_t v16 = (v22 - 1) & v22;
    uint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    uint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    uint64_t v20 = *(void *)(v29 + 72) * v18;
    outlined init with copy of Prompt.SpecialToken(*(void *)(v8 + 56) + v20, (uint64_t)v3, type metadata accessor for Symbol);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    uint64_t result = (void *)outlined init with take of Prompt.SpecialToken((uint64_t)v3, *(void *)(v10 + 56) + v20, type metadata accessor for Symbol);
  }
  uint64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  char v1 = type metadata accessor for Grammar(0);
  int64_t v29 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerationSchema();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<GenerationSchema, Grammar>);
  BOOL v24 = v0;
  uint64_t v8 = *v0;
  int64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *BOOL v24 = v10;
    return result;
  }
  uint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  unint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  unint64_t v15 = -1;
  if (v14 < 64) {
    unint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = v15 & *(void *)(v8 + 64);
  char v25 = v8 + 64;
  uint64_t v26 = (unint64_t)(v14 + 63) >> 6;
  int64_t v27 = v5 + 32;
  unint64_t v28 = v5 + 16;
  while (1)
  {
    if (v16)
    {
      uint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      uint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    uint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    uint64_t v16 = (v22 - 1) & v22;
    uint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    uint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    uint64_t v20 = *(void *)(v29 + 72) * v18;
    outlined init with copy of Prompt.SpecialToken(*(void *)(v8 + 56) + v20, (uint64_t)v3, type metadata accessor for Grammar);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    uint64_t result = (void *)outlined init with take of Prompt.SpecialToken((uint64_t)v3, *(void *)(v10 + 56) + v20, type metadata accessor for Grammar);
  }
  uint64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  char v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, [Int]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  BOOL v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<CharacterSet, [Int]>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<CharacterSet, Set<Int>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  char v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, (mask: BitSet, isPotentiallyDeterministic: Bool)>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    LOBYTE(v19) = *(unsigned char *)(v19 + 8);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v21 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v21 = v20;
    *(unsigned char *)(v21 + 8) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  BOOL v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  char v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  char v1 = v0;
  uint64_t v2 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, Any>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v8;
    return result;
  }
  char v25 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  }
  unint64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  uint64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      uint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    uint64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v16) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v12;
    if (!v22)
    {
      unint64_t v12 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(v10 + 8 * v12);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v22 - 1) & v22;
    uint64_t v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_9:
    uint64_t v19 = *(void *)(v3 + 72) * v18;
    outlined init with copy of Prompt.SpecialToken(*(void *)(v6 + 48) + v19, (uint64_t)v5, type metadata accessor for Prompt.SpecialToken);
    uint64_t v20 = 32 * v18;
    outlined init with copy of Any(*(void *)(v6 + 56) + v20, (uint64_t)v26);
    outlined init with take of Prompt.SpecialToken((uint64_t)v5, *(void *)(v8 + 48) + v19, type metadata accessor for Prompt.SpecialToken);
    uint64_t result = outlined init with take of Any(v26, (_OWORD *)(*(void *)(v8 + 56) + v20));
  }
  uint64_t v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    char v1 = v25;
    goto LABEL_25;
  }
  uint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    unint64_t v12 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v10 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  char v1 = v0;
  uint64_t v2 = type metadata accessor for Prompt.SpecialToken(0);
  int64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, String>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  int64_t v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  unint64_t v28 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    BOOL v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      BOOL v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = *(void *)(v29 + 72) * v16;
    outlined init with copy of Prompt.SpecialToken(*(void *)(v5 + 48) + v17, (uint64_t)v4, type metadata accessor for Prompt.SpecialToken);
    uint64_t v18 = 16 * v16;
    uint64_t v19 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v16);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    outlined init with take of Prompt.SpecialToken((uint64_t)v4, *(void *)(v7 + 48) + v17, type metadata accessor for Prompt.SpecialToken);
    uint64_t v22 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  char v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    char v1 = v27;
    goto LABEL_25;
  }
  BOOL v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    BOOL v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v26 = v9;
    return result;
  }
  uint64_t result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v11 = *(void *)(a2 + 16);
  uint64_t v27 = a1;
  Hasher._combine(_:)(v11);
  if (v11)
  {
    int64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    unint64_t v15 = v12 + 40;
    uint64_t v16 = v12;
    unint64_t v17 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 32);
    int64_t v24 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v25 = v13;
    unint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v26 = v16;
    uint64_t v19 = *(void *)(v16 + 56);
    unint64_t v22 = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v23 = v19;
    while (1)
    {
      v25(v10, v14, v4);
      uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v10, 0, 1, v4);
      uint64_t result = (*v17)(v10, 1, v4);
      if (result == 1) {
        break;
      }
      (*v24)(v7, v10, v4);
      lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
      dispatch thunk of Hashable.hash(into:)();
      (*v18)(v7, v4);
      v14 += v23;
      if (!--v11) {
        return v20(v10, 1, 1, v4);
      }
    }
  }
  else
  {
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v20(v10, 1, 1, v4);
  }
  return result;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v5 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for TerminalSymbol(0);
  uint64_t v51 = *(void *)(v65 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v65);
  uint64_t v8 = (Swift::UInt32 *)((char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  Swift::UInt v11 = (char *)v44 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  char v52 = (Swift::UInt32 *)((char *)v44 - v13);
  MEMORY[0x270FA5388](v12);
  uint64_t v55 = (uint64_t)v44 - v14;
  uint64_t v58 = type metadata accessor for Symbol(0);
  uint64_t v60 = *(void *)(v58 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v58);
  unint64_t v17 = (void *)((char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v56 = (char *)v44 - v18;
  Swift::UInt v19 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v19);
  Swift::UInt v46 = v19;
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = a2 + 32;
    unint64_t v62 = (void (**)(char *, uint64_t))(v3 + 8);
    unint64_t v63 = (void (**)(char *, Swift::UInt32 *, uint64_t))(v3 + 32);
    uint64_t v54 = v17;
    v44[0] = a2 + 32;
    do
    {
      uint64_t v22 = v21 + 24 * v20;
      uint64_t v24 = *(void *)(v22 + 8);
      uint64_t v23 = *(void *)(v22 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v47 = v24;
      String.hash(into:)();
      Hasher._combine(_:)(*(void *)(v23 + 16));
      uint64_t v49 = *(void *)(v23 + 16);
      if (!v49)
      {
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      uint64_t v45 = v20;
      uint64_t v25 = 0;
      v44[1] = v23;
      uint64_t v48 = v23 + 32;
      uint64_t v26 = (uint64_t)v56;
      do
      {
        uint64_t v27 = *(void *)(v48 + 8 * v25);
        Hasher._combine(_:)(*(void *)(v27 + 16));
        uint64_t v61 = *(void *)(v27 + 16);
        if (v61)
        {
          uint64_t v50 = v25;
          uint64_t v59 = v27 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
          swift_bridgeObjectRetain();
          unint64_t v28 = 0;
          uint64_t v57 = v27;
          while (1)
          {
            if (v28 >= *(void *)(v27 + 16))
            {
              __break(1u);
              return;
            }
            outlined init with copy of Prompt.SpecialToken(v59 + *(void *)(v60 + 72) * v28, v26, type metadata accessor for Symbol);
            outlined init with copy of Prompt.SpecialToken(v26, (uint64_t)v17, type metadata accessor for Symbol);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload)
            {
              if (EnumCaseMultiPayload == 1)
              {
                uint64_t v30 = *v17;
                Hasher._combine(_:)(1uLL);
                Hasher._combine(_:)(*(void *)(v30 + 16));
                uint64_t v31 = v30;
                uint64_t v32 = *(void *)(v30 + 16);
                if (v32)
                {
                  uint64_t v33 = *(unsigned __int8 *)(v51 + 80);
                  uint64_t v53 = v31;
                  uint64_t v34 = v31 + ((v33 + 32) & ~v33);
                  uint64_t v35 = *(void *)(v51 + 72);
                  do
                  {
                    outlined init with copy of Prompt.SpecialToken(v34, (uint64_t)v11, type metadata accessor for TerminalSymbol);
                    outlined init with copy of Prompt.SpecialToken((uint64_t)v11, (uint64_t)v8, type metadata accessor for TerminalSymbol);
                    if (swift_getEnumCaseMultiPayload() == 1)
                    {
                      uint64_t v36 = v64;
                      (*v63)(v5, v8, v64);
                      Hasher._combine(_:)(1uLL);
                      lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
                      dispatch thunk of Hashable.hash(into:)();
                      (*v62)(v5, v36);
                    }
                    else
                    {
                      Swift::UInt32 v37 = *v8;
                      Hasher._combine(_:)(0);
                      Hasher._combine(_:)(v37);
                    }
                    outlined destroy of Prompt.Delimiter((uint64_t)v11, type metadata accessor for TerminalSymbol);
                    v34 += v35;
                    --v32;
                  }
                  while (v32);
                  swift_bridgeObjectRelease();
                  unint64_t v17 = v54;
                  uint64_t v26 = (uint64_t)v56;
                  uint64_t v27 = v57;
                  goto LABEL_12;
                }
              }
              else
              {
                Hasher._combine(_:)(2uLL);
                uint64_t v27 = v57;
                String.hash(into:)();
              }
              swift_bridgeObjectRelease();
              uint64_t v26 = (uint64_t)v56;
            }
            else
            {
              uint64_t v38 = (uint64_t)v17;
              uint64_t v39 = v55;
              outlined init with take of Prompt.SpecialToken(v38, v55, type metadata accessor for TerminalSymbol);
              Hasher._combine(_:)(0);
              int v40 = v52;
              outlined init with copy of Prompt.SpecialToken(v39, (uint64_t)v52, type metadata accessor for TerminalSymbol);
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                uint64_t v41 = v64;
                (*v63)(v5, v40, v64);
                Hasher._combine(_:)(1uLL);
                lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
                dispatch thunk of Hashable.hash(into:)();
                (*v62)(v5, v41);
              }
              else
              {
                Swift::UInt32 v42 = *v40;
                Hasher._combine(_:)(0);
                Swift::UInt32 v43 = v42;
                uint64_t v27 = v57;
                Hasher._combine(_:)(v43);
              }
              outlined destroy of Prompt.Delimiter(v55, type metadata accessor for TerminalSymbol);
              unint64_t v17 = v54;
            }
LABEL_12:
            ++v28;
            outlined destroy of Prompt.Delimiter(v26, type metadata accessor for Symbol);
            if (v28 == v61)
            {
              swift_bridgeObjectRelease();
              uint64_t v25 = v50;
              break;
            }
          }
        }
        ++v25;
      }
      while (v25 != v49);
      swift_bridgeObjectRelease();
      uint64_t v20 = v45;
      uint64_t v21 = v44[0];
LABEL_4:
      ++v20;
      swift_bridgeObjectRelease();
    }
    while (v20 != v46);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt32 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt32 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  Swift::UInt v21;
  uint64_t v22;
  void (**v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt32 v33;
  uint64_t v34;
  Swift::UInt32 v35;
  Swift::UInt32 *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  Swift::UInt v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void (**v47)(char *, uint64_t);
  void (**v48)(char *, Swift::UInt32 *, uint64_t);
  uint64_t v49;

  uint64_t v3 = type metadata accessor for CharacterSet();
  uint64_t v47 = *(void (***)(char *, uint64_t))(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for TerminalSymbol(0);
  Swift::UInt32 v37 = *(void *)(v49 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v49);
  uint64_t v8 = (Swift::UInt32 *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  Swift::UInt v11 = (char *)&v36 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (Swift::UInt32 *)((char *)&v36 - v13);
  MEMORY[0x270FA5388](v12);
  int v40 = (uint64_t)&v36 - v15;
  uint64_t v44 = type metadata accessor for Symbol(0);
  uint64_t v16 = *(void *)(v44 - 8);
  unint64_t v17 = MEMORY[0x270FA5388](v44);
  Swift::UInt v46 = (uint64_t *)((char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v48 = (void (**)(char *, Swift::UInt32 *, uint64_t))a2;
  uint64_t v21 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v21);
  Swift::UInt32 v43 = v21;
  if (v21)
  {
    uint64_t v22 = 0;
    Swift::UInt32 v42 = (char *)v48 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v41 = *(void *)(v16 + 72);
    uint64_t v23 = v47++;
    uint64_t v48 = (void (**)(char *, Swift::UInt32 *, uint64_t))(v23 + 4);
    uint64_t v39 = v20;
    uint64_t v36 = v14;
    do
    {
      uint64_t v45 = v22;
      outlined init with copy of Prompt.SpecialToken((uint64_t)&v42[v41 * v22], (uint64_t)v20, type metadata accessor for Symbol);
      outlined init with copy of Prompt.SpecialToken((uint64_t)v20, (uint64_t)v46, type metadata accessor for Symbol);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v24 = (uint64_t)v20;
      if (!EnumCaseMultiPayload)
      {
        uint64_t v34 = v40;
        outlined init with take of Prompt.SpecialToken((uint64_t)v46, v40, type metadata accessor for TerminalSymbol);
        Hasher._combine(_:)(0);
        outlined init with copy of Prompt.SpecialToken(v34, (uint64_t)v14, type metadata accessor for TerminalSymbol);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          (*v48)(v5, v14, v3);
          Hasher._combine(_:)(1uLL);
          lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
          dispatch thunk of Hashable.hash(into:)();
          (*v47)(v5, v3);
        }
        else
        {
          uint64_t v35 = *v14;
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v35);
        }
        uint64_t v25 = v45;
        outlined destroy of Prompt.Delimiter(v40, type metadata accessor for TerminalSymbol);
        goto LABEL_5;
      }
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v27 = *v46;
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(*(void *)(v27 + 16));
        unint64_t v28 = v27;
        uint64_t v29 = *(void *)(v27 + 16);
        if (v29)
        {
          uint64_t v30 = *(unsigned __int8 *)(v37 + 80);
          uint64_t v38 = v28;
          uint64_t v31 = v28 + ((v30 + 32) & ~v30);
          uint64_t v32 = *(void *)(v37 + 72);
          do
          {
            outlined init with copy of Prompt.SpecialToken(v31, (uint64_t)v11, type metadata accessor for TerminalSymbol);
            outlined init with copy of Prompt.SpecialToken((uint64_t)v11, (uint64_t)v8, type metadata accessor for TerminalSymbol);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              (*v48)(v5, v8, v3);
              Hasher._combine(_:)(1uLL);
              lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
              dispatch thunk of Hashable.hash(into:)();
              (*v47)(v5, v3);
            }
            else
            {
              uint64_t v33 = *v8;
              Hasher._combine(_:)(0);
              Hasher._combine(_:)(v33);
            }
            outlined destroy of Prompt.Delimiter((uint64_t)v11, type metadata accessor for TerminalSymbol);
            v31 += v32;
            --v29;
          }
          while (v29);
          swift_bridgeObjectRelease();
          uint64_t v14 = v36;
          uint64_t v24 = (uint64_t)v39;
          goto LABEL_4;
        }
      }
      else
      {
        Hasher._combine(_:)(2uLL);
        uint64_t v24 = (uint64_t)v39;
        String.hash(into:)();
      }
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t v25 = v45;
LABEL_5:
      uint64_t v22 = v25 + 1;
      outlined destroy of Prompt.Delimiter(v24, type metadata accessor for Symbol);
      uint64_t v20 = (char *)v24;
    }
    while (v22 != v43);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt32 *v10;
  uint64_t v11;
  char *v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt32 v17;
  Swift::UInt32 v18;
  uint64_t v19;
  void (**v20)(char *, uint64_t);
  void (**v21)(char *, Swift::UInt32 *, uint64_t);
  uint64_t v22;

  uint64_t v3 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for TerminalSymbol(0);
  uint64_t v7 = *(void *)(v22 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v22);
  uint64_t v10 = (Swift::UInt32 *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v15 = *(void *)(v7 + 72);
    uint64_t v20 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v21 = (void (**)(char *, Swift::UInt32 *, uint64_t))(v4 + 32);
    do
    {
      outlined init with copy of Prompt.SpecialToken(v14, (uint64_t)v12, type metadata accessor for TerminalSymbol);
      outlined init with copy of Prompt.SpecialToken((uint64_t)v12, (uint64_t)v10, type metadata accessor for TerminalSymbol);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*v21)(v6, v10, v3);
        Hasher._combine(_:)(1uLL);
        lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
        dispatch thunk of Hashable.hash(into:)();
        (*v20)(v6, v3);
      }
      else
      {
        uint64_t v16 = v15;
        unint64_t v17 = *v10;
        Hasher._combine(_:)(0);
        uint64_t v18 = v17;
        uint64_t v15 = v16;
        Hasher._combine(_:)(v18);
      }
      outlined destroy of Prompt.Delimiter((uint64_t)v12, type metadata accessor for TerminalSymbol);
      v14 += v15;
      --v13;
    }
    while (v13);
  }
}

{
  Swift::UInt v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  Swift::UInt64 v9;

  uint64_t v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)(a2 + 48);
    do
    {
      uint64_t v6 = *((void *)v5 - 2);
      uint64_t v7 = *((void *)v5 - 1);
      uint64_t v8 = *v5;
      v5 += 24;
      switch(v8)
      {
        case 1:
          Hasher._combine(_:)(2uLL);
          if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            uint64_t v9 = v6;
          }
          else {
            uint64_t v9 = 0;
          }
          Hasher._combine(_:)(v9);
          break;
        case 2:
          Hasher._combine(_:)(3uLL);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of JSON(v6, v7, 2);
          break;
        case 3:
          Hasher._combine(_:)(4uLL);
          swift_bridgeObjectRetain();
          specialized Array<A>.hash(into:)(a1, v6);
          outlined consume of JSON(v6, v7, 3);
          break;
        case 4:
          Hasher._combine(_:)(5uLL);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v6);
          outlined consume of JSON(v6, v7, 4);
          break;
        case 5:
          Hasher._combine(_:)(0);
          break;
        default:
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(v6 & 1);
          break;
      }
      --v4;
    }
    while (v4);
  }
}

{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  Swift::UInt v9;
  Swift::UInt v10;
  Swift::UInt v11;

  uint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2 + 32;
    do
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4);
      Hasher._combine(_:)(*(void *)(v6 + 16));
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        uint64_t v8 = (Swift::UInt *)(v6 + 48);
        do
        {
          uint64_t v9 = *(v8 - 2);
          uint64_t v10 = *(v8 - 1);
          Swift::UInt v11 = *v8;
          v8 += 3;
          Hasher._combine(_:)(v9);
          Hasher._combine(_:)(v10);
          Hasher._combine(_:)(v11);
          --v7;
        }
        while (v7);
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt *v6;
  Swift::UInt v7;
  uint64_t v8;
  unsigned char *v9;
  Swift::UInt v10;
  Swift::UInt v11;

  uint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2 + 32;
    while (1)
    {
      uint64_t v6 = (Swift::UInt *)(v5 + 16 * v4);
      uint64_t v7 = v6[1];
      Hasher._combine(_:)(*v6);
      Hasher._combine(_:)(*(void *)(v7 + 16));
      uint64_t v8 = *(void *)(v7 + 16);
      if (v8) {
        break;
      }
LABEL_3:
      if (++v4 == v3) {
        return;
      }
    }
    uint64_t v9 = (unsigned char *)(v7 + 40);
    while (1)
    {
      Swift::UInt v11 = *((void *)v9 - 1);
      if (*v9)
      {
        if (*v9 != 1)
        {
          Swift::UInt v11 = 0;
          goto LABEL_8;
        }
        uint64_t v10 = 2;
      }
      else
      {
        uint64_t v10 = 1;
      }
      Hasher._combine(_:)(v10);
LABEL_8:
      v9 += 16;
      Hasher._combine(_:)(v11);
      if (!--v8) {
        goto LABEL_3;
      }
    }
  }
}

{
  Swift::UInt v3;
  unsigned char *v4;
  Swift::UInt v5;

  uint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned char *)(a2 + 40);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      if (*v4)
      {
        if (*v4 == 1) {
          Hasher._combine(_:)(2uLL);
        }
        else {
          uint64_t v5 = 0;
        }
      }
      else
      {
        Hasher._combine(_:)(1uLL);
      }
      v4 += 16;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  Swift::UInt *v4;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt v8;
  Swift::UInt v9;

  uint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt *)(a2 + 64);
    do
    {
      uint64_t v5 = *((unsigned __int8 *)v4 - 32);
      uint64_t v6 = *(v4 - 3);
      uint64_t v7 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      uint64_t v9 = *v4;
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v5);
      outlined copy of Data._Representation(v6, v7);
      Data.hash(into:)();
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      outlined consume of Data._Representation(v6, v7);
      v4 += 5;
      --v3;
    }
    while (v3);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::UInt v12;
  uint64_t v13;
  unsigned int (**v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (**v19)(char *, uint64_t);
  void (**v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v3 = type metadata accessor for Locale();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Prompt.Delimiter(0);
  uint64_t v9 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  Swift::UInt v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v22 = *(void *)(v9 + 72);
    uint64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    Swift::UInt v19 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v20 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    do
    {
      outlined init with copy of Prompt.SpecialToken(v13, (uint64_t)v11, type metadata accessor for Prompt.Delimiter);
      String.hash(into:)();
      uint64_t v16 = type metadata accessor for Prompt.SpecialToken(0);
      outlined init with copy of Locale?((uint64_t)&v11[*(int *)(v16 + 20)], (uint64_t)v8);
      if ((*v14)(v8, 1, v3) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        unint64_t v17 = v21;
        (*v20)(v21, v8, v3);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
        dispatch thunk of Hashable.hash(into:)();
        (*v19)(v17, v3);
      }
      if (*(void *)&v11[*(int *)(v16 + 24) + 8])
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t v15 = v23;
      Hasher._combine(_:)(*(void *)&v11[*(int *)(v23 + 20)]);
      Hasher._combine(_:)(*(void *)&v11[*(int *)(v15 + 24)]);
      outlined destroy of Prompt.Delimiter((uint64_t)v11, type metadata accessor for Prompt.Delimiter);
      v13 += v22;
      --v12;
    }
    while (v12);
  }
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v7 = 0;
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_20;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v22) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v23 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v22) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v23 + 8 * v8);
      if (!v12) {
        break;
      }
    }
LABEL_19:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_20:
    uint64_t v14 = *(void *)(a2 + 56) + 24 * v10;
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t v17 = *(unsigned __int8 *)(v14 + 16);
    uint64_t v18 = *(void *)(a1 + 64);
    long long v19 = *(_OWORD *)(a1 + 16);
    v24[0] = *(_OWORD *)a1;
    v24[1] = v19;
    long long v20 = *(_OWORD *)(a1 + 48);
    v24[2] = *(_OWORD *)(a1 + 32);
    v24[3] = v20;
    uint64_t v25 = v18;
    swift_bridgeObjectRetain();
    outlined copy of JSON(v15, v16, v17);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    switch(v17)
    {
      case 1:
        Hasher._combine(_:)(2uLL);
        if ((v15 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v21 = v15;
        }
        else {
          Swift::UInt64 v21 = 0;
        }
        Hasher._combine(_:)(v21);
        break;
      case 2:
        Hasher._combine(_:)(3uLL);
        String.hash(into:)();
        outlined consume of JSON(v15, v16, 2);
        break;
      case 3:
        Hasher._combine(_:)(4uLL);
        specialized Array<A>.hash(into:)(v24, v15);
        outlined consume of JSON(v15, v16, 3);
        break;
      case 4:
        Hasher._combine(_:)(5uLL);
        specialized Dictionary<>.hash(into:)(v24, v15);
        outlined consume of JSON(v15, v16, 4);
        break;
      case 5:
        Hasher._combine(_:)(0);
        break;
      default:
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v15 & 1);
        break;
    }
    v7 ^= Hasher._finalize()();
  }
  int64_t v13 = v11 + 2;
  if (v13 < v22)
  {
    unint64_t v12 = *(void *)(v23 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v8 >= v22) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v23 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_19;
        }
      }
LABEL_31:
      __break(1u);
      JUMPOUT(0x25F977384);
    }
    int64_t v8 = v13;
    goto LABEL_19;
  }
LABEL_29:
  swift_release();
  Hasher._combine(_:)(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  Swift::UInt v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;

  int64_t v11 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a2 + 64);
  uint64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  Swift::UInt v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    int64_t v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v8 >= v5) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(v11 + 8 * v8);
    ++v7;
    if (!v9)
    {
      Swift::UInt v7 = v8 + 1;
      if (v8 + 1 >= v5) {
        goto LABEL_19;
      }
      unint64_t v9 = *(void *)(v11 + 8 * v7);
      if (!v9) {
        break;
      }
    }
LABEL_18:
    uint64_t v4 = (v9 - 1) & v9;
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 ^= Hasher._finalize()();
  }
  unint64_t v10 = v8 + 2;
  if (v10 >= v5)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v6);
    return;
  }
  unint64_t v9 = *(void *)(v11 + 8 * v10);
  if (v9)
  {
    Swift::UInt v7 = v10;
    goto LABEL_18;
  }
  while (1)
  {
    Swift::UInt v7 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(v11 + 8 * v7);
    ++v10;
    if (v9) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

uint64_t specialized static JSON.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(uint64_t *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1:
      if (v7 != 1) {
        goto LABEL_21;
      }
      outlined consume of JSON(*(void *)a1, v2, 1);
      outlined consume of JSON(v5, v6, 1);
      char v8 = *(double *)&v3 == *(double *)&v5;
      break;
    case 2:
      if (v7 != 2) {
        goto LABEL_16;
      }
      if (v3 == v5 && v2 == v6) {
        char v8 = 1;
      }
      else {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of JSON(v5, v6, 2);
      outlined copy of JSON(v3, v2, 2);
      outlined consume of JSON(v3, v2, 2);
      outlined consume of JSON(v5, v6, 2);
      break;
    case 3:
      if (v7 != 3) {
        goto LABEL_16;
      }
      outlined copy of JSON(*(void *)a2, *(void *)(a2 + 8), 3);
      outlined copy of JSON(v3, v2, 3);
      char v8 = specialized static Array<A>.== infix(_:_:)(v3, v5);
      outlined consume of JSON(v3, v2, 3);
      outlined consume of JSON(v5, v6, 3);
      break;
    case 4:
      if (v7 != 4)
      {
LABEL_16:
        swift_bridgeObjectRetain();
        goto LABEL_21;
      }
      outlined copy of JSON(*(void *)a2, *(void *)(a2 + 8), 4);
      outlined copy of JSON(v3, v2, 4);
      char v8 = specialized static Dictionary<>.== infix(_:_:)(v3, v5);
      outlined consume of JSON(v3, v2, 4);
      outlined consume of JSON(v5, v6, 4);
      break;
    case 5:
      if (v7 != 5 || (v6 | v5) != 0) {
        goto LABEL_21;
      }
      outlined consume of JSON(*(void *)a1, v2, 5);
      outlined consume of JSON(0, 0, 5);
      char v8 = 1;
      break;
    default:
      if (*(unsigned char *)(a2 + 16))
      {
LABEL_21:
        outlined copy of JSON(v5, v6, v7);
        outlined consume of JSON(v3, v2, v4);
        outlined consume of JSON(v5, v6, v7);
        char v8 = 0;
      }
      else
      {
        outlined consume of JSON(*(void *)a1, v2, 0);
        outlined consume of JSON(v5, v6, 0);
        char v8 = ((v3 & 1) == 0) ^ v5;
      }
      break;
  }
  return v8 & 1;
}

uint64_t destroy for JSON(uint64_t a1)
{
  return outlined consume of JSON(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for JSON(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of JSON(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JSON(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of JSON(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of JSON(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for JSON(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of JSON(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSON(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSON(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for JSON(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for JSON(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSON()
{
  return &type metadata for JSON;
}

void *type metadata accessor for JSON.JSONCodingKey()
{
  return &unk_270BCC118;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (symbol: String, position: Int, priority: Int));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptComponentValueCustomDataTransformer);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of Prompt.Delimiter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Prompt.SpecialToken(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of Prompt.SpecialToken(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Locale and conformance Locale(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of SingleValueDecodingContainer?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay19TokenGenerationCore17NonTerminalSymbolVGG_AJ_Sits5NeverOTg506_sSi19fg6Core17ijk41VACSiIgynrd_Si6offset_AC7elementtAC_Sits5L148OIegnrzr_TR04_s19ab67Core14flattenGrammar7grammarSi_SayAA12EarleyParserC0H4RuleVGSayAA14ef33OGSayAA03NonjK0VGtAA0E0V_tFAM_SitM10_AMtXEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v11 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = (void *)(v11 + 24 * v8);
      v9[5] = v6;
      v9[6] = v3;
      v4 += 2;
      v9[4] = v5;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v3 = (uint64_t *)(a2 + 48);
    for (uint64_t i = (uint64_t *)(a1 + 48); ; i += 3)
    {
      uint64_t v5 = *i;
      uint64_t v6 = *v3;
      BOOL v7 = *(i - 2) == *(v3 - 2) && *(i - 1) == *(v3 - 1);
      if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      char v8 = specialized static Array<A>.== infix(_:_:)(v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      if ((v8 & 1) == 0) {
        break;
      }
      v3 += 3;
      if (!--v2) {
        return 1;
      }
    }
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  void (**v30)(char *, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;

  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      uint64_t v23 = 1;
    }
    else
    {
      BOOL v11 = *(unsigned __int8 *)(v6 + 80);
      unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      unint64_t v12 = v6 + 16;
      uint64_t v31 = v7;
      uint64_t v32 = v13;
      uint64_t v14 = (v11 + 32) & ~v11;
      uint64_t v15 = *(void *)(v12 + 56);
      uint64_t v33 = v12;
      uint64_t v29 = v15;
      uint64_t v30 = (void (**)(char *, uint64_t))(v12 - 8);
      uint64_t v16 = v10 - 1;
      uint64_t v17 = v7;
      do
      {
        uint64_t v18 = a1;
        long long v19 = v9;
        long long v20 = v9;
        Swift::UInt64 v21 = v32;
        v32(v19, a1 + v14, v4);
        int64_t v22 = a2;
        v21(v17, a2 + v14, v4);
        uint64_t v9 = v20;
        lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, 255, MEMORY[0x263F06278]);
        uint64_t v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v24 = *v30;
        (*v30)(v17, v4);
        v24(v20, v4);
        uint64_t v26 = v16-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v14 += v29;
        a2 = v22;
        a1 = v18;
      }
      while (v26);
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  return v23 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  char *v56;
  int EnumCaseMultiPayload;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char v85;
  void (*v86)(uint64_t, uint64_t);
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char v92;
  uint64_t v93;
  _DWORD *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void (**v114)(char *, char *, uint64_t);
  void (**v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  unint64_t v129 = type metadata accessor for CharacterSet();
  uint64_t v133 = *(void *)(v129 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v129);
  uint64_t v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v97 - v7;
  uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
  uint64_t v9 = MEMORY[0x270FA5388](v134);
  BOOL v11 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v97 - v12;
  int v135 = type metadata accessor for TerminalSymbol(0);
  uint64_t v116 = *(void *)(v135 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v135);
  uint64_t v126 = (uint64_t)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v130 = (char *)&v97 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v128 = (char *)&v97 - v19;
  long long v20 = MEMORY[0x270FA5388](v18);
  unint64_t v127 = (char *)&v97 - v21;
  int64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v97 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v118 = (_DWORD *)((char *)&v97 - v26);
  MEMORY[0x270FA5388](v25);
  uint64_t v125 = (uint64_t)&v97 - v27;
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Symbol, Symbol));
  MEMORY[0x270FA5388](v131);
  uint64_t v29 = (char *)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for Symbol(0);
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = MEMORY[0x270FA5388]((char *)&v97 - v32);
  uint64_t v34 = MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v97 - v35;
  Swift::UInt32 v37 = MEMORY[0x270FA5388](v34);
  uint64_t v132 = (uint64_t)&v97 - v41;
  Swift::UInt32 v42 = *(void *)(a1 + 16);
  if (v42 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v42 || a1 == a2) {
    return 1;
  }
  uint64_t v108 = (uint64_t *)v37;
  uint64_t v109 = (uint64_t *)v40;
  uint64_t v113 = v38;
  Swift::UInt32 v43 = 0;
  uint64_t v44 = a1 + 32;
  uint64_t v45 = a2 + 32;
  uint64_t v114 = (void (**)(char *, char *, uint64_t))(v133 + 32);
  int v115 = (void (**)(uint64_t, uint64_t))(v133 + 8);
  int v110 = v36;
  uint64_t v112 = v6;
  unint64_t v105 = v8;
  uint64_t v111 = v13;
  uint64_t v106 = v24;
  uint64_t v101 = v39;
  uint64_t v100 = v42;
  uint64_t v99 = a1 + 32;
  char v98 = a2 + 32;
  while (1)
  {
    uint64_t v47 = *(void *)(v44 + 8 * v43);
    uint64_t v48 = *(void *)(v45 + 8 * v43);
    uint64_t v49 = *(void *)(v47 + 16);
    Swift::UInt v46 = v49 == *(void *)(v48 + 16);
    if (v49 != *(void *)(v48 + 16)) {
      return v46;
    }
    if (v49 && v47 != v48) {
      break;
    }
LABEL_7:
    if (++v43 == v42) {
      return v46;
    }
  }
  int v102 = v49 == *(void *)(v48 + 16);
  unint64_t v103 = v43;
  uint64_t v50 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  unint64_t v122 = v47 + v50;
  uint64_t v120 = v48 + v50;
  int v107 = v47;
  uint64_t v51 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v52 = 0;
  uint64_t v121 = *(void *)(v51 + 72);
  uint64_t v53 = v132;
  uint64_t v119 = v48;
  int v117 = v49;
  while (1)
  {
    uint64_t v54 = v121 * v52;
    uint64_t result = outlined init with copy of Grammar(v122 + v121 * v52, v53, type metadata accessor for Symbol);
    if (v52 >= *(void *)(v48 + 16))
    {
      __break(1u);
      return result;
    }
    outlined init with copy of Grammar(v120 + v54, (uint64_t)v36, type metadata accessor for Symbol);
    uint64_t v56 = &v29[*(int *)(v131 + 48)];
    outlined init with copy of Grammar(v53, (uint64_t)v29, type metadata accessor for Symbol);
    outlined init with copy of Grammar((uint64_t)v36, (uint64_t)v56, type metadata accessor for Symbol);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      uint64_t v75 = v30;
      unint64_t v76 = v113;
      outlined init with copy of Grammar((uint64_t)v29, v113, type metadata accessor for Symbol);
      unint64_t v77 = v75;
      if (swift_getEnumCaseMultiPayload())
      {
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v76, type metadata accessor for TerminalSymbol);
        uint64_t v36 = v110;
        uint64_t v53 = v132;
        goto LABEL_57;
      }
      unint64_t v78 = (uint64_t)v56;
      unint64_t v79 = v125;
      outlined init with take of TerminalSymbol(v78, v125, type metadata accessor for TerminalSymbol);
      char v80 = (uint64_t)v111;
      unint64_t v81 = &v111[*(int *)(v134 + 48)];
      outlined init with copy of Grammar(v76, (uint64_t)v111, type metadata accessor for TerminalSymbol);
      outlined init with copy of Grammar(v79, (uint64_t)v81, type metadata accessor for TerminalSymbol);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        unint64_t v82 = (uint64_t)v106;
        outlined init with copy of Grammar(v80, (uint64_t)v106, type metadata accessor for TerminalSymbol);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          (*v115)(v82, v129);
          uint64_t v36 = v110;
LABEL_61:
          outlined destroy of SingleValueDecodingContainer?((uint64_t)v111, &demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
LABEL_62:
          _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v113, type metadata accessor for TerminalSymbol);
          _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v125, type metadata accessor for TerminalSymbol);
LABEL_63:
          _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v29, type metadata accessor for Symbol);
          uint64_t v53 = v132;
          goto LABEL_64;
        }
        uint64_t v30 = v77;
        unint64_t v83 = v105;
        uint64_t v84 = v129;
        (*v114)(v105, v81, v129);
        unint64_t v85 = static CharacterSet.== infix(_:_:)();
        unint64_t v86 = *v115;
        (*v115)((uint64_t)v83, v84);
        v86(v82, v84);
        uint64_t v48 = v119;
        uint64_t v36 = v110;
        if ((v85 & 1) == 0) {
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v93 = v80;
        BOOL v94 = v118;
        outlined init with copy of Grammar(v93, (uint64_t)v118, type metadata accessor for TerminalSymbol);
        uint64_t v95 = swift_getEnumCaseMultiPayload();
        uint64_t v48 = v119;
        uint64_t v30 = v77;
        uint64_t v36 = v110;
        if (v95 == 1) {
          goto LABEL_61;
        }
        if (*v94 != *(_DWORD *)v81)
        {
LABEL_59:
          _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v111, type metadata accessor for TerminalSymbol);
          goto LABEL_62;
        }
      }
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v111, type metadata accessor for TerminalSymbol);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v113, type metadata accessor for TerminalSymbol);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v125, type metadata accessor for TerminalSymbol);
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v87 = v29;
      uint64_t v88 = v109;
      outlined init with copy of Grammar((uint64_t)v29, (uint64_t)v109, type metadata accessor for Symbol);
      uint64_t v90 = *v88;
      uint64_t v89 = v88[1];
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        swift_bridgeObjectRelease();
        uint64_t v29 = v87;
        goto LABEL_57;
      }
      if (v90 == *(void *)v56 && v89 == *((void *)v56 + 1))
      {
        swift_bridgeObjectRelease_n();
        uint64_t v29 = v87;
        uint64_t v48 = v119;
      }
      else
      {
        long long v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v29 = v87;
        uint64_t v48 = v119;
        if ((v92 & 1) == 0) {
          goto LABEL_63;
        }
      }
      goto LABEL_13;
    }
    uint64_t v58 = v108;
    outlined init with copy of Grammar((uint64_t)v29, (uint64_t)v108, type metadata accessor for Symbol);
    uint64_t v59 = *v58;
    uint64_t v60 = swift_getEnumCaseMultiPayload();
    uint64_t v61 = v130;
    if (v60 != 1)
    {
      swift_bridgeObjectRelease();
LABEL_57:
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v29, &demangling cache variable for type metadata for (Symbol, Symbol));
      goto LABEL_64;
    }
    unint64_t v62 = v36;
    unint64_t v63 = *(void *)(v59 + 16);
    uint64_t v133 = *(void *)v56;
    if (v63 != *(void *)(v133 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v53 = v132;
      uint64_t v36 = v62;
      goto LABEL_53;
    }
    if (v63) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_47:
    uint64_t v48 = v119;
    uint64_t v36 = v62;
LABEL_13:
    ++v52;
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v29, type metadata accessor for Symbol);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v36, type metadata accessor for Symbol);
    uint64_t v53 = v132;
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v132, type metadata accessor for Symbol);
    if (v52 == v117)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v39 = v101;
      Swift::UInt32 v42 = v100;
      Swift::UInt32 v43 = v103;
      uint64_t v44 = v99;
      uint64_t v45 = v98;
      Swift::UInt v46 = v102;
      goto LABEL_7;
    }
  }
  if (v59 == v133)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_47;
  }
  uint64_t v97 = v30;
  unint64_t v104 = v29;
  uint64_t v64 = (*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
  unint64_t v124 = *(void *)(v116 + 72);
  uint64_t v66 = (uint64_t)v127;
  uint64_t v65 = (uint64_t)v128;
  while (1)
  {
    outlined init with copy of Grammar(v59 + v64, v66, type metadata accessor for TerminalSymbol);
    outlined init with copy of Grammar(v133 + v64, v65, type metadata accessor for TerminalSymbol);
    int v67 = &v11[*(int *)(v134 + 48)];
    outlined init with copy of Grammar(v66, (uint64_t)v11, type metadata accessor for TerminalSymbol);
    outlined init with copy of Grammar(v65, (uint64_t)v67, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() == 1) {
      break;
    }
    outlined init with copy of Grammar((uint64_t)v11, (uint64_t)v61, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() == 1) {
      goto LABEL_51;
    }
    if (*v61 != *(_DWORD *)v67)
    {
LABEL_49:
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v11, type metadata accessor for TerminalSymbol);
      goto LABEL_52;
    }
LABEL_22:
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v11, type metadata accessor for TerminalSymbol);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v65, type metadata accessor for TerminalSymbol);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v66, type metadata accessor for TerminalSymbol);
    v64 += v124;
    if (!--v63)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v36 = v110;
      uint64_t v29 = v104;
      uint64_t v48 = v119;
      uint64_t v30 = v97;
      goto LABEL_13;
    }
  }
  unint64_t v68 = v11;
  unint64_t v69 = (uint64_t)v11;
  uint64_t v70 = v126;
  outlined init with copy of Grammar(v69, v126, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v71 = v112;
    char v72 = v129;
    (*v114)(v112, v67, v129);
    uint64_t v123 = static CharacterSet.== infix(_:_:)();
    uint64_t v73 = *v115;
    (*v115)((uint64_t)v71, v72);
    uint64_t v74 = v72;
    uint64_t v66 = (uint64_t)v127;
    uint64_t v65 = (uint64_t)v128;
    v73(v70, v74);
    BOOL v11 = v68;
    uint64_t v61 = v130;
    if ((v123 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_22;
  }
  (*v115)(v70, v129);
  BOOL v11 = v68;
LABEL_51:
  outlined destroy of SingleValueDecodingContainer?((uint64_t)v11, &demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
LABEL_52:
  uint64_t v36 = v110;
  uint64_t v96 = v132;
  uint64_t v29 = v104;
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v65, type metadata accessor for TerminalSymbol);
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v66, type metadata accessor for TerminalSymbol);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v53 = v96;
LABEL_53:
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v29, type metadata accessor for Symbol);
LABEL_64:
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v36, type metadata accessor for Symbol);
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v53, type metadata accessor for Symbol);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  int EnumCaseMultiPayload;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  char *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v58;
  void (**v59)(char *, _DWORD *, uint64_t);
  void (**v60)(uint64_t, uint64_t);
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v71 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v69 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
  MEMORY[0x270FA5388](v6);
  unint64_t v76 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for TerminalSymbol(0);
  char v8 = MEMORY[0x270FA5388](v73);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v11 = MEMORY[0x270FA5388](v8);
  uint64_t v70 = (int *)((char *)&v58 - v12);
  MEMORY[0x270FA5388](v11);
  uint64_t v75 = (uint64_t)&v58 - v13;
  unint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Symbol, Symbol));
  MEMORY[0x270FA5388](v77);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Symbol(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v17);
  long long v19 = MEMORY[0x270FA5388]((char *)&v58 - v18);
  long long v20 = MEMORY[0x270FA5388](v19);
  int64_t v22 = (char *)&v58 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  unint64_t v28 = (char *)&v58 - v27;
  unint64_t v78 = a1;
  uint64_t v29 = *(void *)(a1 + 16);
  if (v29 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v29 || v78 == a2) {
    return 1;
  }
  uint64_t v66 = (uint64_t *)v23;
  int v67 = (uint64_t *)v26;
  unint64_t v68 = v6;
  uint64_t v61 = v10;
  unint64_t v62 = v4;
  uint64_t v30 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v74 = *(void *)(v24 + 72);
  uint64_t v59 = (void (**)(char *, _DWORD *, uint64_t))(v71 + 32);
  uint64_t v60 = (void (**)(uint64_t, uint64_t))(v71 + 8);
  uint64_t v71 = a2;
  char v72 = v25;
  uint64_t v64 = v16;
  uint64_t v65 = v22;
  while (1)
  {
    outlined init with copy of Grammar(v78 + v30, (uint64_t)v28, type metadata accessor for Symbol);
    outlined init with copy of Grammar(a2 + v30, (uint64_t)v22, type metadata accessor for Symbol);
    uint64_t v31 = (uint64_t *)&v15[*(int *)(v77 + 48)];
    outlined init with copy of Grammar((uint64_t)v28, (uint64_t)v15, type metadata accessor for Symbol);
    outlined init with copy of Grammar((uint64_t)v22, (uint64_t)v31, type metadata accessor for Symbol);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload) {
      break;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v33 = v66;
      outlined init with copy of Grammar((uint64_t)v15, (uint64_t)v66, type metadata accessor for Symbol);
      uint64_t v34 = *v33;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_28;
      }
      uint64_t v35 = specialized static Array<A>.== infix(_:_:)(v34, *v31);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v47 = v67;
      outlined init with copy of Grammar((uint64_t)v15, (uint64_t)v67, type metadata accessor for Symbol);
      uint64_t v48 = *v47;
      uint64_t v49 = v47[1];
      if (swift_getEnumCaseMultiPayload() != 2)
      {
LABEL_28:
        swift_bridgeObjectRelease();
LABEL_30:
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v15, &demangling cache variable for type metadata for (Symbol, Symbol));
        goto LABEL_35;
      }
      uint64_t v50 = *v31;
      uint64_t v51 = v31[1];
      if (v48 == v50 && v49 == v51)
      {
        swift_bridgeObjectRelease_n();
        a2 = v71;
        goto LABEL_6;
      }
      uint64_t v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    a2 = v71;
    if ((v35 & 1) == 0) {
      goto LABEL_34;
    }
LABEL_6:
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v15, type metadata accessor for Symbol);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v22, type metadata accessor for Symbol);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v28, type metadata accessor for Symbol);
    v30 += v74;
    if (!--v29) {
      return 1;
    }
  }
  uint64_t v36 = v72;
  outlined init with copy of Grammar((uint64_t)v15, v72, type metadata accessor for Symbol);
  Swift::UInt32 v37 = swift_getEnumCaseMultiPayload();
  uint64_t v38 = v68;
  if (v37)
  {
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v36, type metadata accessor for TerminalSymbol);
    goto LABEL_30;
  }
  uint64_t v39 = v75;
  outlined init with take of TerminalSymbol((uint64_t)v31, v75, type metadata accessor for TerminalSymbol);
  int v40 = (_DWORD *)(v76 + *(int *)(v38 + 48));
  outlined init with copy of Grammar(v36, v76, type metadata accessor for TerminalSymbol);
  outlined init with copy of Grammar(v39, (uint64_t)v40, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v53 = v70;
    outlined init with copy of Grammar(v76, (uint64_t)v70, type metadata accessor for TerminalSymbol);
    uint64_t v54 = swift_getEnumCaseMultiPayload();
    int64_t v22 = v65;
    if (v54 == 1) {
      goto LABEL_32;
    }
    uint64_t v55 = *v53;
    uint64_t v56 = *v40;
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v76, type metadata accessor for TerminalSymbol);
    if (v55 != v56) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }
  uint64_t v41 = (uint64_t)v61;
  outlined init with copy of Grammar(v76, (uint64_t)v61, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    Swift::UInt32 v42 = v69;
    Swift::UInt32 v43 = v40;
    uint64_t v44 = v41;
    uint64_t v45 = v62;
    (*v59)(v69, v43, v62);
    unint64_t v63 = static CharacterSet.== infix(_:_:)();
    Swift::UInt v46 = *v60;
    (*v60)((uint64_t)v42, v45);
    v46(v44, v45);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v76, type metadata accessor for TerminalSymbol);
    int64_t v22 = v65;
    if ((v63 & 1) == 0) {
      goto LABEL_33;
    }
LABEL_26:
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v75, type metadata accessor for TerminalSymbol);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v72, type metadata accessor for TerminalSymbol);
    goto LABEL_6;
  }
  (*v60)(v41, v62);
  int64_t v22 = v65;
LABEL_32:
  outlined destroy of SingleValueDecodingContainer?(v76, &demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
LABEL_33:
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v75, type metadata accessor for TerminalSymbol);
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v72, type metadata accessor for TerminalSymbol);
LABEL_34:
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v15, type metadata accessor for Symbol);
LABEL_35:
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v22, type metadata accessor for Symbol);
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v28, type metadata accessor for Symbol);
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v36;
  void (**v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  void (**v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  Swift::UInt32 v42 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
  MEMORY[0x270FA5388](v45);
  BOOL v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = type metadata accessor for TerminalSymbol(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (_DWORD *)((char *)&v36 - v13);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v36 - v16;
  MEMORY[0x270FA5388](v15);
  long long v20 = (char *)&v36 - v19;
  Swift::UInt v46 = a1;
  uint64_t v47 = a2;
  Swift::UInt64 v21 = *(void *)(a1 + 16);
  if (v21 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v21 || v46 == v47) {
    return 1;
  }
  int64_t v22 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v44 = *(void *)(v18 + 72);
  Swift::UInt32 v37 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v38 = v7;
  uint64_t v39 = (char *)&v36 - v19;
  int v40 = (void (**)(char *, uint64_t))(v4 + 8);
  while (1)
  {
    outlined init with copy of Grammar(v46 + v22, (uint64_t)v20, type metadata accessor for TerminalSymbol);
    outlined init with copy of Grammar(v47 + v22, (uint64_t)v17, type metadata accessor for TerminalSymbol);
    uint64_t v23 = &v7[*(int *)(v45 + 48)];
    outlined init with copy of Grammar((uint64_t)v20, (uint64_t)v7, type metadata accessor for TerminalSymbol);
    outlined init with copy of Grammar((uint64_t)v17, (uint64_t)v23, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() == 1) {
      break;
    }
    outlined init with copy of Grammar((uint64_t)v7, (uint64_t)v14, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() == 1) {
      goto LABEL_15;
    }
    uint64_t v33 = *v14;
    uint64_t v34 = *(_DWORD *)v23;
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v7, type metadata accessor for TerminalSymbol);
    if (v33 != v34) {
      goto LABEL_16;
    }
LABEL_5:
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v17, type metadata accessor for TerminalSymbol);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v20, type metadata accessor for TerminalSymbol);
    v22 += v44;
    if (!--v21) {
      return 1;
    }
  }
  outlined init with copy of Grammar((uint64_t)v7, (uint64_t)v11, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = v14;
    uint64_t v25 = v11;
    uint64_t v26 = v41;
    uint64_t v27 = v17;
    unint64_t v28 = v8;
    uint64_t v29 = v42;
    (*v37)(v41, v23, v42);
    Swift::UInt32 v43 = static CharacterSet.== infix(_:_:)();
    uint64_t v30 = *v40;
    uint64_t v31 = v26;
    BOOL v11 = v25;
    uint64_t v14 = v24;
    BOOL v7 = v38;
    (*v40)(v31, v29);
    uint64_t v32 = v29;
    char v8 = v28;
    uint64_t v17 = v27;
    long long v20 = v39;
    v30(v11, v32);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v7, type metadata accessor for TerminalSymbol);
    if ((v43 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  (*v40)(v11, v42);
LABEL_15:
  outlined destroy of SingleValueDecodingContainer?((uint64_t)v7, &demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
LABEL_16:
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v17, type metadata accessor for TerminalSymbol);
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v20, type metadata accessor for TerminalSymbol);
  return 0;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;
  char v17;
  char v18;
  char v19;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(a2 + 48);
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (2)
  {
    uint64_t v9 = *(v4 - 2);
    char v8 = *(v4 - 1);
    uint64_t v10 = *(v3 - 2);
    BOOL v11 = *(v3 - 1);
    unint64_t v13 = *(unsigned __int8 *)v3;
    v3 += 3;
    unint64_t v12 = v13;
    uint64_t v15 = *(unsigned __int8 *)v4;
    v4 += 3;
    uint64_t v14 = v15;
    switch(v15)
    {
      case 1:
        if (v12 != 1) {
          goto LABEL_37;
        }
        outlined consume of JSON(v9, v8, 1);
        outlined consume of JSON(v10, v11, 1);
        if (*(double *)&v9 != *(double *)&v10) {
          return 0;
        }
        goto LABEL_7;
      case 2:
        if (v12 != 2) {
          goto LABEL_36;
        }
        if (v9 == v10 && v8 == v11)
        {
          outlined copy of JSON(v9, v8, 2);
          outlined copy of JSON(v9, v8, 2);
          outlined consume of JSON(v9, v8, 2);
          uint64_t v5 = v9;
          uint64_t v6 = v8;
          BOOL v7 = 2;
LABEL_6:
          outlined consume of JSON(v5, v6, v7);
        }
        else
        {
          uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of JSON(v10, v11, 2);
          outlined copy of JSON(v9, v8, 2);
          outlined consume of JSON(v9, v8, 2);
          outlined consume of JSON(v10, v11, 2);
          if ((v17 & 1) == 0) {
            return 0;
          }
        }
        goto LABEL_7;
      case 3:
        if (v12 != 3) {
          goto LABEL_36;
        }
        outlined copy of JSON(v10, v11, 3);
        outlined copy of JSON(v9, v8, 3);
        outlined copy of JSON(v10, v11, 3);
        outlined copy of JSON(v9, v8, 3);
        uint64_t v18 = specialized static Array<A>.== infix(_:_:)(v9, v10);
        outlined consume of JSON(v9, v8, 3);
        outlined consume of JSON(v10, v11, 3);
        outlined consume of JSON(v10, v11, 3);
        outlined consume of JSON(v9, v8, 3);
        if ((v18 & 1) == 0) {
          return 0;
        }
        goto LABEL_7;
      case 4:
        if (v12 == 4)
        {
          outlined copy of JSON(v10, v11, 4);
          outlined copy of JSON(v9, v8, 4);
          outlined copy of JSON(v10, v11, 4);
          outlined copy of JSON(v9, v8, 4);
          long long v19 = specialized static Dictionary<>.== infix(_:_:)(v9, v10);
          outlined consume of JSON(v9, v8, 4);
          outlined consume of JSON(v10, v11, 4);
          outlined consume of JSON(v10, v11, 4);
          outlined consume of JSON(v9, v8, 4);
          if ((v19 & 1) == 0) {
            return 0;
          }
LABEL_7:
          if (!--v2) {
            return 1;
          }
          continue;
        }
LABEL_36:
        outlined copy of JSON(v9, v8, v14);
        swift_bridgeObjectRetain();
LABEL_37:
        outlined copy of JSON(v10, v11, v12);
        outlined consume of JSON(v9, v8, v14);
        outlined consume of JSON(v10, v11, v12);
        outlined consume of JSON(v9, v8, v14);
        return 0;
      case 5:
        if (v12 != 5 || (v11 | v10) != 0) {
          goto LABEL_37;
        }
        outlined consume of JSON(v9, v8, 5);
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        BOOL v7 = 5;
        goto LABEL_6;
      default:
        if (v12) {
          goto LABEL_37;
        }
        outlined consume of JSON(v9, v8, 0);
        outlined consume of JSON(v10, v11, 0);
        if (((((v9 & 1) == 0) ^ v10) & 1) == 0) {
          return 0;
        }
        goto LABEL_7;
    }
  }
}

{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  char v8;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned __int8 *)(a2 + 48);
    uint64_t v4 = (unsigned __int8 *)(a1 + 48);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *v3;
      if (*((void *)v4 - 2) == *((void *)v3 - 2) && *((void *)v4 - 1) == *((void *)v3 - 1))
      {
        if (v5 != v6) {
          return 0;
        }
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if (v8 & 1) == 0 || ((v5 ^ v6)) {
          return result;
        }
      }
      v3 += 24;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  char v57;
  uint64_t v58;
  char v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char v66;
  uint64_t *v68;
  uint64_t v69;
  void (**v70)(char *, uint64_t, uint64_t);
  char *v71;
  void (**v72)(uint64_t, uint64_t);
  uint64_t v73;
  unsigned int (**v74)(uint64_t, uint64_t, uint64_t);
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (**v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;

  uint64_t v4 = type metadata accessor for Locale();
  unint64_t v86 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v7 - 8);
  char v80 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x270FA5388](v77);
  unint64_t v81 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v10 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v88 = (uint64_t *)((char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v87 = (uint64_t *)((char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken?, Prompt.SpecialToken?));
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v82 = type metadata accessor for Prompt.RenderedPromptFragment(0);
  uint64_t v17 = MEMORY[0x270FA5388](v82);
  long long v19 = (uint64_t *)((char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  int64_t v22 = (uint64_t *)((char *)&v69 - v21);
  unint64_t v83 = a1;
  uint64_t v84 = a2;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23 == *(void *)(a2 + 16))
  {
    if (!v23 || v83 == v84) {
      return 1;
    }
    uint64_t v71 = v6;
    uint64_t v24 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    unint64_t v78 = (uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    unint64_t v79 = v4;
    uint64_t v74 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
    uint64_t v75 = v19;
    unint64_t v76 = *(void *)(v20 + 72);
    uint64_t v70 = (void (**)(char *, uint64_t, uint64_t))(v86 + 32);
    char v72 = (void (**)(uint64_t, uint64_t))(v86 + 8);
    uint64_t v73 = v14;
    uint64_t v25 = &demangling cache variable for type metadata for Locale?;
    while (1)
    {
      outlined init with copy of Grammar(v83 + v24, (uint64_t)v22, type metadata accessor for Prompt.RenderedPromptFragment);
      outlined init with copy of Grammar(v84 + v24, (uint64_t)v19, type metadata accessor for Prompt.RenderedPromptFragment);
      unint64_t v28 = *v22 == *v19 && v22[1] == v19[1];
      if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      unint64_t v85 = v23;
      unint64_t v86 = v24;
      uint64_t v29 = v25;
      uint64_t v30 = *(int *)(v82 + 20);
      uint64_t v31 = (uint64_t)v19 + v30;
      uint64_t v32 = (uint64_t)&v16[*(int *)(v14 + 48)];
      outlined init with copy of Locale?((uint64_t)v22 + v30, (uint64_t)v16, &demangling cache variable for type metadata for Prompt.SpecialToken?);
      outlined init with copy of Locale?(v31, v32, &demangling cache variable for type metadata for Prompt.SpecialToken?);
      uint64_t v33 = *v78;
      uint64_t v34 = v16;
      uint64_t v35 = (uint64_t)v16;
      uint64_t v36 = v89;
      if ((*v78)(v34, 1, v89) == 1)
      {
        uint64_t v26 = v33((char *)v32, 1, v36);
        uint64_t v16 = (char *)v35;
        uint64_t v25 = v29;
        uint64_t v27 = v86;
        if (v26 != 1)
        {
          unint64_t v68 = &demangling cache variable for type metadata for (Prompt.SpecialToken?, Prompt.SpecialToken?);
          goto LABEL_38;
        }
      }
      else
      {
        Swift::UInt32 v37 = (char *)v35;
        uint64_t v38 = v87;
        outlined init with copy of Locale?(v35, (uint64_t)v87, &demangling cache variable for type metadata for Prompt.SpecialToken?);
        if (v33((char *)v32, 1, v36) == 1)
        {
          uint64_t v88 = v38;
          uint64_t v16 = (char *)v35;
          long long v19 = v75;
          unint64_t v68 = &demangling cache variable for type metadata for (Prompt.SpecialToken?, Prompt.SpecialToken?);
          goto LABEL_37;
        }
        uint64_t v39 = v32;
        int v40 = v88;
        outlined init with take of TerminalSymbol(v39, (uint64_t)v88, type metadata accessor for Prompt.SpecialToken);
        uint64_t v41 = v38[1];
        Swift::UInt32 v42 = v40[1];
        unint64_t v28 = *v38 == *v40;
        Swift::UInt32 v43 = v89;
        uint64_t v16 = (char *)v35;
        uint64_t v44 = v79;
        uint64_t v45 = (uint64_t)v38;
        Swift::UInt v46 = v77;
        uint64_t v25 = v29;
        uint64_t v27 = v86;
        if (!v28 || v41 != v42)
        {
          uint64_t v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v45 = (uint64_t)v87;
          if ((v47 & 1) == 0) {
            goto LABEL_36;
          }
        }
        uint64_t v48 = *(int *)(v43 + 20);
        uint64_t v49 = v45 + v48;
        uint64_t v50 = (uint64_t)v88 + v48;
        uint64_t v51 = *(int *)(v46 + 48);
        char v52 = v81;
        uint64_t v53 = v81 + v51;
        outlined init with copy of Locale?(v49, v81, v25);
        outlined init with copy of Locale?(v50, v53, v25);
        uint64_t v54 = *v74;
        if ((*v74)(v52, 1, v44) == 1)
        {
          if (v54(v53, 1, v44) != 1) {
            goto LABEL_35;
          }
          outlined destroy of SingleValueDecodingContainer?(v81, v25);
          uint64_t v55 = v89;
          uint64_t v45 = (uint64_t)v87;
        }
        else
        {
          outlined init with copy of Locale?(v52, v80, v25);
          if (v54(v53, 1, v44) == 1)
          {
            (*v72)(v80, v44);
LABEL_35:
            outlined destroy of SingleValueDecodingContainer?(v81, &demangling cache variable for type metadata for (Locale?, Locale?));
            uint64_t v45 = (uint64_t)v87;
LABEL_36:
            _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v45, type metadata accessor for Prompt.SpecialToken);
            unint64_t v68 = &demangling cache variable for type metadata for Prompt.SpecialToken?;
            long long v19 = v75;
LABEL_37:
            _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v88, type metadata accessor for Prompt.SpecialToken);
LABEL_38:
            outlined destroy of SingleValueDecodingContainer?((uint64_t)v16, v68);
            break;
          }
          uint64_t v56 = v71;
          (*v70)(v71, v53, v44);
          lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type Locale and conformance Locale, 255, MEMORY[0x263F07690]);
          uint64_t v57 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v58 = v79;
          uint64_t v59 = v57;
          uint64_t v60 = *v72;
          (*v72)((uint64_t)v56, v79);
          uint64_t v16 = v37;
          v60(v80, v58);
          outlined destroy of SingleValueDecodingContainer?(v52, v25);
          uint64_t v55 = v89;
          uint64_t v45 = (uint64_t)v87;
          if ((v59 & 1) == 0) {
            goto LABEL_36;
          }
        }
        uint64_t v61 = *(int *)(v55 + 24);
        unint64_t v62 = (void *)(v45 + v61);
        unint64_t v63 = *(void *)(v45 + v61 + 8);
        uint64_t v64 = (void *)((char *)v88 + v61);
        uint64_t v65 = v64[1];
        if (v63)
        {
          if (!v65) {
            goto LABEL_36;
          }
          if (*v62 != *v64 || v63 != v65)
          {
            uint64_t v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v45 = (uint64_t)v87;
            if ((v66 & 1) == 0) {
              goto LABEL_36;
            }
          }
        }
        else if (v65)
        {
          goto LABEL_36;
        }
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v45, type metadata accessor for Prompt.SpecialToken);
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v88, type metadata accessor for Prompt.SpecialToken);
        long long v19 = v75;
        uint64_t v14 = v73;
      }
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v16, &demangling cache variable for type metadata for Prompt.SpecialToken?);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v19, type metadata accessor for Prompt.RenderedPromptFragment);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v22, type metadata accessor for Prompt.RenderedPromptFragment);
      uint64_t v24 = v27 + v76;
      uint64_t v23 = v85 - 1;
      if (v85 == 1) {
        return 1;
      }
    }
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v19, type metadata accessor for Prompt.RenderedPromptFragment);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v22, type metadata accessor for Prompt.RenderedPromptFragment);
  }
  return 0;
}

{
  uint64_t v2;
  unsigned char *v3;
  unsigned char *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a1 + 40);
    uint64_t v4 = (unsigned char *)(a2 + 40);
    do
    {
      uint64_t v6 = *((void *)v3 - 1);
      BOOL v7 = *((void *)v4 - 1);
      char v8 = *v4;
      if (*v3)
      {
        if (*v3 == 1)
        {
          if (v8 != 1 || v6 != v7) {
            return 0;
          }
        }
        else if (v8 != 2 || v7 != 0)
        {
          return 0;
        }
      }
      else
      {
        if (*v4) {
          uint64_t v5 = 0;
        }
        else {
          uint64_t v5 = v6 == v7;
        }
        if (!v5) {
          return 0;
        }
      }
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int64x2_t *v6;
  int64x2_t *v7;
  uint64_t v8;
  BOOL v9;
  int64x2_t *v12;
  int64x2_t *v13;
  int32x2_t v14;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(int64x2_t **)(v4 + 8 * v3);
      BOOL v7 = *(int64x2_t **)(a2 + 32 + 8 * v3);
      char v8 = v6[1].i64[0];
      if (v8 != v7[1].i64[0]) {
        break;
      }
      if (v8) {
        uint64_t v9 = v6 == v7;
      }
      else {
        uint64_t v9 = 1;
      }
      if (!v9)
      {
        if (v6[2].i64[0] != v7[2].i64[0] || v6[2].i64[1] != v7[2].i64[1] || v6[3].i64[0] != v7[3].i64[0]) {
          return 0;
        }
        unint64_t v12 = v7 + 4;
        unint64_t v13 = v6 + 4;
        while (--v8)
        {
          uint64_t result = 0;
          if (v13[-1].i64[1] == v12[-1].i64[1])
          {
            uint64_t v14 = vmovn_s64(vceqq_s64(*v13, *v12));
            if (v14.i8[0])
            {
              unint64_t v12 = (int64x2_t *)((char *)v12 + 24);
              unint64_t v13 = (int64x2_t *)((char *)v13 + 24);
              if (v14.i8[4]) {
                continue;
              }
            }
          }
          return result;
        }
      }
      ++v3;
      uint64_t result = 1;
      if (v3 == v2) {
        return result;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  uint64_t result;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t __s2;
  __int16 v83;
  char v84;
  char v85;
  char v86;
  char v87;
  void __s1[3];

  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a2 + 64);
    uint64_t v4 = (uint64_t *)(a1 + 64);
    while (1)
    {
      if (*((unsigned __int8 *)v4 - 32) != *((unsigned __int8 *)v3 - 32)) {
        return 0;
      }
      BOOL v7 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      char v8 = *(v4 - 1);
      uint64_t v9 = *v4;
      BOOL v11 = *(v3 - 3);
      uint64_t v10 = *(v3 - 2);
      unint64_t v13 = *(v3 - 1);
      unint64_t v12 = *v3;
      v3 += 5;
      v4 += 5;
      uint64_t v14 = 0;
      switch(v6 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v7) - v7;
          if (__OFSUB__(HIDWORD(v7), v7))
          {
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
          }
          uint64_t v14 = (int)v14;
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v7 + 16);
          uint64_t v15 = *(void *)(v7 + 24);
          uint64_t v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            break;
          }
          goto LABEL_128;
        case 3uLL:
          break;
        default:
          uint64_t v14 = BYTE6(v6);
          break;
      }
      uint64_t v18 = v10 >> 62;
      switch(v10 >> 62)
      {
        case 1uLL:
          LODWORD(v19) = HIDWORD(v11) - v11;
          if (__OFSUB__(HIDWORD(v11), v11)) {
            goto LABEL_129;
          }
          long long v19 = (int)v19;
LABEL_23:
          if (v14 != v19) {
            return 0;
          }
          if (v14 < 1)
          {
LABEL_6:
            if (v8 != v13 || v9 != v12) {
              return 0;
            }
          }
          else
          {
            char v80 = v13;
            unint64_t v81 = v8;
            unint64_t v79 = v12;
            switch(v6 >> 62)
            {
              case 1uLL:
                unint64_t v78 = v9;
                if ((int)v7 > v7 >> 32) {
                  goto LABEL_131;
                }
                unint64_t v77 = v6;
                outlined copy of Data._Representation(v7, v6);
                outlined copy of Data._Representation(v11, v10);
                uint64_t v27 = (char *)__DataStorage._bytes.getter();
                if (!v27) {
                  goto LABEL_37;
                }
                unint64_t v28 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v7, v28)) {
                  goto LABEL_133;
                }
                v27 += (int)v7 - v28;
LABEL_37:
                __DataStorage._length.getter();
                if (!v18)
                {
                  __s1[0] = v11;
                  LOWORD(__s1[1]) = v10;
                  BYTE2(__s1[1]) = BYTE2(v10);
                  BYTE3(__s1[1]) = BYTE3(v10);
                  BYTE4(__s1[1]) = BYTE4(v10);
                  BYTE5(__s1[1]) = BYTE5(v10);
                  if (!v27) {
                    goto LABEL_161;
                  }
                  uint64_t v33 = memcmp(v27, __s1, BYTE6(v10));
LABEL_105:
                  outlined consume of Data._Representation(v11, v10);
                  outlined consume of Data._Representation(v7, v77);
                  goto LABEL_120;
                }
                if (v18 == 1)
                {
                  if (v11 >> 32 < (int)v11) {
                    goto LABEL_142;
                  }
                  swift_retain();
                  uint64_t v29 = (char *)__DataStorage._bytes.getter();
                  if (v29)
                  {
                    uint64_t v30 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v11, v30)) {
                      goto LABEL_149;
                    }
                    v29 += (int)v11 - v30;
                  }
                  uint64_t v31 = __DataStorage._length.getter();
                  if (v31 >= (v11 >> 32) - (int)v11) {
                    uint64_t v32 = (v11 >> 32) - (int)v11;
                  }
                  else {
                    uint64_t v32 = v31;
                  }
                  if (!v27) {
                    goto LABEL_151;
                  }
                  if (!v29) {
                    goto LABEL_152;
                  }
                  uint64_t v33 = memcmp(v27, v29, v32);
                  outlined consume of Data._Representation(v11, v10);
                  goto LABEL_105;
                }
                uint64_t v65 = *(void *)(v11 + 16);
                unint64_t v76 = *(void *)(v11 + 24);
                swift_retain();
                swift_retain();
                uint64_t v66 = __DataStorage._bytes.getter();
                if (v66)
                {
                  int v67 = __DataStorage._offset.getter();
                  unint64_t v68 = v65 - v67;
                  if (__OFSUB__(v65, v67)) {
                    goto LABEL_148;
                  }
                  unint64_t v69 = v65;
                  uint64_t v70 = v27;
                  v66 += v68;
                }
                else
                {
                  unint64_t v69 = v65;
                  uint64_t v70 = v27;
                }
                uint64_t v71 = v76 - v69;
                if (__OFSUB__(v76, v69)) {
                  goto LABEL_143;
                }
                char v72 = __DataStorage._length.getter();
                if (v72 >= v71) {
                  uint64_t v73 = v71;
                }
                else {
                  uint64_t v73 = v72;
                }
                if (!v70) {
                  goto LABEL_163;
                }
                if (!v66) {
                  goto LABEL_162;
                }
                uint64_t v55 = v73;
                uint64_t v56 = v70;
                uint64_t v57 = (const void *)v66;
LABEL_117:
                uint64_t v33 = memcmp(v56, v57, v55);
LABEL_118:
                swift_release();
                swift_release();
LABEL_119:
                outlined consume of Data._Representation(v11, v10);
                outlined consume of Data._Representation(v7, v77);
                uint64_t v9 = v78;
LABEL_120:
                uint64_t result = 0;
                if (v33 || v81 != v80 || v9 != v79) {
                  return result;
                }
                break;
              case 2uLL:
                unint64_t v77 = v6;
                unint64_t v78 = v9;
                uint64_t v34 = *(void *)(v7 + 16);
                outlined copy of Data._Representation(v7, v6);
                outlined copy of Data._Representation(v11, v10);
                swift_retain();
                swift_retain();
                uint64_t v35 = __DataStorage._bytes.getter();
                if (v35)
                {
                  uint64_t v36 = v35;
                  Swift::UInt32 v37 = __DataStorage._offset.getter();
                  if (__OFSUB__(v34, v37)) {
                    goto LABEL_132;
                  }
                  uint64_t v75 = (void *)(v36 + v34 - v37);
                }
                else
                {
                  uint64_t v75 = 0;
                }
                __DataStorage._length.getter();
                if (!v18)
                {
                  __s1[0] = v11;
                  LOWORD(__s1[1]) = v10;
                  BYTE2(__s1[1]) = BYTE2(v10);
                  BYTE3(__s1[1]) = BYTE3(v10);
                  BYTE4(__s1[1]) = BYTE4(v10);
                  BYTE5(__s1[1]) = BYTE5(v10);
                  uint64_t v9 = v78;
                  if (!v75) {
                    goto LABEL_158;
                  }
                  uint64_t v33 = memcmp(v75, __s1, BYTE6(v10));
LABEL_92:
                  swift_release();
                  swift_release();
                  goto LABEL_105;
                }
                if (v18 == 1)
                {
                  if (v11 >> 32 < (int)v11) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  Swift::UInt32 v42 = (char *)__DataStorage._bytes.getter();
                  if (v42)
                  {
                    Swift::UInt32 v43 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v11, v43)) {
                      goto LABEL_147;
                    }
                    v42 += (int)v11 - v43;
                  }
                  uint64_t v44 = __DataStorage._length.getter();
                  if (v44 >= (v11 >> 32) - (int)v11) {
                    uint64_t v45 = (v11 >> 32) - (int)v11;
                  }
                  else {
                    uint64_t v45 = v44;
                  }
                  if (!v75) {
                    goto LABEL_154;
                  }
                  uint64_t v9 = v78;
                  if (!v42) {
                    goto LABEL_155;
                  }
                  uint64_t v33 = memcmp(v75, v42, v45);
                  outlined consume of Data._Representation(v11, v10);
                  goto LABEL_92;
                }
                uint64_t v59 = *(void *)(v11 + 16);
                uint64_t v58 = *(void *)(v11 + 24);
                swift_retain();
                swift_retain();
                uint64_t v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v61 = __DataStorage._offset.getter();
                  if (__OFSUB__(v59, v61)) {
                    goto LABEL_146;
                  }
                  v60 += v59 - v61;
                }
                uint64_t v17 = __OFSUB__(v58, v59);
                unint64_t v62 = v58 - v59;
                if (v17) {
                  goto LABEL_141;
                }
                unint64_t v63 = __DataStorage._length.getter();
                if (v63 >= v62) {
                  uint64_t v64 = v62;
                }
                else {
                  uint64_t v64 = v63;
                }
                if (!v75) {
                  goto LABEL_159;
                }
                if (!v60) {
                  goto LABEL_160;
                }
                uint64_t v33 = memcmp(v75, v60, v64);
                swift_release();
                swift_release();
                goto LABEL_118;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v18) {
                  goto LABEL_61;
                }
                unint64_t v77 = v6;
                unint64_t v78 = v9;
                if (v18 == 1)
                {
                  int64_t v22 = (v11 >> 32) - (int)v11;
                  if (v11 >> 32 < (int)v11) {
                    goto LABEL_135;
                  }
                  outlined copy of Data._Representation(v7, v6);
                  outlined copy of Data._Representation(v11, v10);
                  uint64_t v38 = __DataStorage._bytes.getter();
                  if (!v38) {
                    goto LABEL_153;
                  }
                  uint64_t v24 = v38;
                  uint64_t v39 = __DataStorage._offset.getter();
                  uint64_t v26 = (int)v11 - v39;
                  if (__OFSUB__((int)v11, v39)) {
                    goto LABEL_137;
                  }
LABEL_57:
                  int v40 = __DataStorage._length.getter();
                  if (v40 >= v22) {
                    uint64_t v41 = v22;
                  }
                  else {
                    uint64_t v41 = v40;
                  }
                  uint64_t v33 = memcmp(__s1, (const void *)(v24 + v26), v41);
                  goto LABEL_119;
                }
                char v52 = *(void *)(v11 + 16);
                uint64_t v53 = *(void *)(v11 + 24);
                outlined copy of Data._Representation(v7, v6);
                outlined copy of Data._Representation(v11, v10);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_145;
                  }
                  v48 += v52 - v54;
                }
                uint64_t v17 = __OFSUB__(v53, v52);
                uint64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_140;
                }
                uint64_t v51 = __DataStorage._length.getter();
                if (!v48) {
                  goto LABEL_157;
                }
LABEL_86:
                if (v51 >= v50) {
                  uint64_t v55 = v50;
                }
                else {
                  uint64_t v55 = v51;
                }
                uint64_t v56 = __s1;
                uint64_t v57 = (const void *)v48;
                goto LABEL_117;
              default:
                __s1[0] = v7;
                LOWORD(__s1[1]) = v6;
                BYTE2(__s1[1]) = BYTE2(v6);
                BYTE3(__s1[1]) = BYTE3(v6);
                BYTE4(__s1[1]) = BYTE4(v6);
                BYTE5(__s1[1]) = BYTE5(v6);
                if (!v18)
                {
LABEL_61:
                  __s2 = v11;
                  unint64_t v83 = v10;
                  uint64_t v84 = BYTE2(v10);
                  unint64_t v85 = BYTE3(v10);
                  unint64_t v86 = BYTE4(v10);
                  uint64_t v87 = BYTE5(v10);
                  uint64_t v33 = memcmp(__s1, &__s2, BYTE6(v10));
                  goto LABEL_120;
                }
                unint64_t v77 = v6;
                unint64_t v78 = v9;
                if (v18 == 1)
                {
                  int64_t v22 = (v11 >> 32) - (int)v11;
                  if (v11 >> 32 < (int)v11) {
                    goto LABEL_134;
                  }
                  outlined copy of Data._Representation(v7, v6);
                  outlined copy of Data._Representation(v11, v10);
                  uint64_t v23 = __DataStorage._bytes.getter();
                  if (!v23)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
LABEL_160:
                    __break(1u);
LABEL_161:
                    __break(1u);
LABEL_162:
                    __break(1u);
LABEL_163:
                    __break(1u);
                    JUMPOUT(0x25F97D0C0);
                  }
                  uint64_t v24 = v23;
                  uint64_t v25 = __DataStorage._offset.getter();
                  uint64_t v26 = (int)v11 - v25;
                  if (__OFSUB__((int)v11, v25)) {
                    goto LABEL_136;
                  }
                  goto LABEL_57;
                }
                Swift::UInt v46 = *(void *)(v11 + 16);
                uint64_t v47 = *(void *)(v11 + 24);
                outlined copy of Data._Representation(v7, v6);
                outlined copy of Data._Representation(v11, v10);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v49 = __DataStorage._offset.getter();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_144;
                  }
                  v48 += v46 - v49;
                }
                uint64_t v17 = __OFSUB__(v47, v46);
                uint64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_139;
                }
                uint64_t v51 = __DataStorage._length.getter();
                if (!v48) {
                  goto LABEL_156;
                }
                goto LABEL_86;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          Swift::UInt64 v21 = *(void *)(v11 + 16);
          long long v20 = *(void *)(v11 + 24);
          uint64_t v17 = __OFSUB__(v20, v21);
          long long v19 = v20 - v21;
          if (!v17) {
            goto LABEL_23;
          }
          goto LABEL_130;
        case 3uLL:
          if (!v14) {
            goto LABEL_6;
          }
          return 0;
        default:
          long long v19 = BYTE6(v10);
          goto LABEL_23;
      }
    }
  }
  return 1;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char *v9;
  unsigned char *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL result;
  uint64_t v18;

  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 4;
  uint64_t v4 = a2 + 4;
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v5 = a1[5];
  uint64_t v6 = a2[5];
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7 != *(void *)(v6 + 16)) {
    return 0;
  }
  uint64_t v8 = 1;
  do
  {
    if (v7 && v5 != v6)
    {
      uint64_t v9 = (unsigned char *)(v5 + 40);
      uint64_t v10 = (unsigned char *)(v6 + 40);
      do
      {
        unint64_t v12 = *((void *)v9 - 1);
        unint64_t v13 = *((void *)v10 - 1);
        uint64_t v14 = *v10;
        if (*v9)
        {
          if (*v9 == 1)
          {
            if (v14 != 1 || v12 != v13) {
              return 0;
            }
          }
          else if (v14 != 2 || v13 != 0)
          {
            return 0;
          }
        }
        else
        {
          if (*v10) {
            BOOL v11 = 0;
          }
          else {
            BOOL v11 = v12 == v13;
          }
          if (!v11) {
            return 0;
          }
        }
        v9 += 16;
        v10 += 16;
        --v7;
      }
      while (v7);
    }
    BOOL result = v8 == v2;
    if (v8 == v2) {
      break;
    }
    uint64_t v18 = 2 * v8;
    if (v3[2 * v8] != v4[2 * v8]) {
      break;
    }
    uint64_t v5 = v3[v18 + 1];
    ++v8;
    uint64_t v6 = v4[v18 + 1];
    uint64_t v7 = *(void *)(v5 + 16);
  }
  while (v7 == *(void *)(v6 + 16));
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 != a2[1].i64[0]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[2].i64[0] != a2[2].i64[0] || a1[2].i64[1] != a2[2].i64[1] || a1[3].i64[0] != a2[3].i64[0]) {
    return 0;
  }
  uint64_t v6 = a2 + 4;
  uint64_t v7 = a1 + 4;
  do
  {
    BOOL result = --v2 == 0;
    if (!v2) {
      break;
    }
    if (v7[-1].i64[1] != v6[-1].i64[1]) {
      break;
    }
    int32x2_t v8 = vmovn_s64(vceqq_s64(*v7, *v6));
    if ((v8.i8[0] & 1) == 0) {
      break;
    }
    uint64_t v6 = (int64x2_t *)((char *)v6 + 24);
    uint64_t v7 = (int64x2_t *)((char *)v7 + 24);
  }
  while ((v8.i8[4] & 1) != 0);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Prompt.Delimiter(0);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  Swift::UInt64 v21 = (uint64_t *)((char *)&v50 - v20);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 == *(void *)(a2 + 16))
  {
    uint64_t v56 = v11;
    uint64_t v57 = v13;
    if (!v22 || a1 == a2) {
      return 1;
    }
    uint64_t v63 = v18;
    unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v24 = *(void *)(v19 + 72);
    uint64_t v58 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v59 = a1;
    uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    char v52 = v7;
    uint64_t v53 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    uint64_t v54 = v10;
    uint64_t v25 = v22 - 1;
    uint64_t v27 = v56;
    uint64_t v26 = (uint64_t)v57;
    uint64_t v55 = a2;
    while (1)
    {
      uint64_t v61 = v25;
      unint64_t v28 = v23;
      outlined init with copy of Grammar(v59 + v23, (uint64_t)v21, type metadata accessor for Prompt.Delimiter);
      unint64_t v60 = v28;
      outlined init with copy of Grammar(a2 + v28, (uint64_t)v17, type metadata accessor for Prompt.Delimiter);
      BOOL v29 = *v21 == *v17 && v21[1] == v17[1];
      uint64_t v30 = v58;
      if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v62 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v31 = *(int *)(v62 + 20);
      uint64_t v32 = (uint64_t)v17 + v31;
      uint64_t v33 = v26 + *(int *)(v27 + 48);
      outlined init with copy of Locale?((uint64_t)v21 + v31, v26, &demangling cache variable for type metadata for Locale?);
      outlined init with copy of Locale?(v32, v33, &demangling cache variable for type metadata for Locale?);
      uint64_t v34 = *v30;
      if ((*v30)(v26, 1, v4) == 1)
      {
        if (v34(v33, 1, v4) != 1) {
          goto LABEL_30;
        }
        outlined destroy of SingleValueDecodingContainer?(v26, &demangling cache variable for type metadata for Locale?);
      }
      else
      {
        uint64_t v35 = (uint64_t)v54;
        outlined init with copy of Locale?(v26, (uint64_t)v54, &demangling cache variable for type metadata for Locale?);
        if (v34(v33, 1, v4) == 1)
        {
          (*v53)(v35, v4);
LABEL_30:
          outlined destroy of SingleValueDecodingContainer?(v26, &demangling cache variable for type metadata for (Locale?, Locale?));
          break;
        }
        uint64_t v36 = v52;
        (*v51)(v52, v33, v4);
        lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type Locale and conformance Locale, 255, MEMORY[0x263F07690]);
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v38 = *v53;
        uint64_t v39 = (uint64_t)v36;
        uint64_t v26 = (uint64_t)v57;
        (*v53)(v39, v4);
        v38(v35, v4);
        outlined destroy of SingleValueDecodingContainer?(v26, &demangling cache variable for type metadata for Locale?);
        uint64_t v27 = v56;
        if ((v37 & 1) == 0) {
          break;
        }
      }
      uint64_t v40 = *(int *)(v62 + 24);
      uint64_t v41 = (void *)((char *)v21 + v40);
      uint64_t v42 = *(void *)((char *)v21 + v40 + 8);
      Swift::UInt32 v43 = (void *)((char *)v17 + v40);
      uint64_t v44 = v43[1];
      if (v42)
      {
        if (!v44) {
          break;
        }
        BOOL v45 = *v41 == *v43 && v42 == v44;
        if (!v45 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
      }
      else if (v44)
      {
        break;
      }
      if (*(void *)((char *)v21 + *(int *)(v63 + 20)) != *(void *)((char *)v17 + *(int *)(v63 + 20))) {
        break;
      }
      uint64_t v46 = *(int *)(v63 + 24);
      uint64_t v47 = *(void *)((char *)v21 + v46);
      uint64_t v48 = *(void *)((char *)v17 + v46);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v17, type metadata accessor for Prompt.Delimiter);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v21, type metadata accessor for Prompt.Delimiter);
      uint64_t v25 = v61 - 1;
      BOOL result = v47 == v48;
      if (v47 == v48)
      {
        unint64_t v23 = v60 + v24;
        a2 = v55;
        if (v61) {
          continue;
        }
      }
      return result;
    }
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v17, type metadata accessor for Prompt.Delimiter);
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v21, type metadata accessor for Prompt.Delimiter);
  }
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EarleyParser.ParserSymbol()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (!v2)
  {
    Swift::UInt v4 = 1;
    goto LABEL_5;
  }
  Swift::UInt v3 = 0;
  if (v2 == 1)
  {
    Swift::UInt v4 = 2;
LABEL_5:
    Hasher._combine(_:)(v4);
    Swift::UInt v3 = v1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser.ParserSymbol()
{
  Swift::UInt v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    if (*(unsigned char *)(v0 + 8) != 1)
    {
      Swift::UInt v1 = 0;
      goto LABEL_7;
    }
    Swift::UInt v2 = 2;
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
LABEL_7:
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser.ParserSymbol()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      Swift::UInt v1 = 0;
      goto LABEL_7;
    }
    Swift::UInt v3 = 2;
  }
  else
  {
    Swift::UInt v3 = 1;
  }
  Hasher._combine(_:)(v3);
LABEL_7:
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser.ParserSymbol(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *((unsigned __int8 *)a2 + 8);
  if (!*(unsigned char *)(a1 + 8))
  {
    if (*((unsigned char *)a2 + 8)) {
      return 0;
    }
    return *(void *)a1 == v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v3 != 1) {
      return 0;
    }
    return *(void *)a1 == v2;
  }
  return v3 == 2 && v2 == 0;
}

void *EarleyParser.ParserGrammar.init(grammar:)(uint64_t *a1)
{
  uint64_t v100 = type metadata accessor for CharacterSet();
  uint64_t v94 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v99 = (char *)&v92 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for TerminalSymbol(0);
  uint64_t v93 = *(void *)(v108 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v108);
  int v107 = (unsigned int *)((char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v3);
  uint64_t v112 = (uint64_t)&v92 - v5;
  uint64_t v97 = a1;
  uint64_t v95 = flattenGrammar(grammar:)((uint64_t)a1);
  uint64_t v7 = v6;
  uint64_t v96 = v8;
  uint64_t v103 = v9;
  size_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = (void *)MEMORY[0x263F8EE78];
  uint64_t v12 = (void *)specialized Array.init(repeating:count:)(MEMORY[0x263F8EE78], v10);
  unint64_t v13 = (void *)specialized Array.init(repeating:count:)((uint64_t)v11, v10);
  uint64_t v114 = specialized Array.init(repeating:count:)(0, v10);
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0, v11);
  uint64_t v15 = v7[2];
  int v110 = v7;
  uint64_t v106 = v15;
  if (v15)
  {
    uint64_t v113 = v14;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_114:
    }
      unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
    unint64_t v16 = 0;
    uint64_t v7 = v110;
    uint64_t v17 = *v97;
    int v115 = (void (**)(char *, unsigned int *, uint64_t))(v13 + 4);
    uint64_t v104 = v17;
    unint64_t v105 = (void (**)(void, void))(v110 + 4);
    uint64_t v101 = (void *)(v17 + 40);
    uint64_t v102 = v103 + 32;
    uint64_t v109 = (void *)MEMORY[0x263F8EE78];
    do
    {
      if (v16 >= (unint64_t)v7[2]) {
        goto LABEL_107;
      }
      uint64_t v18 = (unint64_t *)&v105[2 * v16];
      unint64_t v20 = *v18;
      unint64_t v19 = v18[1];
      uint64_t v21 = *(void *)(v104 + 16);
      if (v21)
      {
        if ((v20 & 0x8000000000000000) != 0) {
          goto LABEL_110;
        }
        if (v20 >= *(void *)(v103 + 16)) {
          goto LABEL_111;
        }
        uint64_t v22 = v101;
        unint64_t v23 = (uint64_t *)(v102 + 16 * v20);
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        while (1)
        {
          BOOL v26 = *(v22 - 1) == v24 && *v22 == v25;
          if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          v22 += 2;
          if (!--v21) {
            goto LABEL_17;
          }
        }
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109[2] + 1, 1, v109);
        }
        unint64_t v28 = v109[2];
        unint64_t v27 = v109[3];
        if (v28 >= v27 >> 1) {
          uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v109);
        }
        BOOL v29 = v109;
        v109[2] = v28 + 1;
        v29[v28 + 4] = v16;
      }
      else
      {
LABEL_17:
        swift_bridgeObjectRetain();
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if ((v20 & 0x8000000000000000) != 0) {
          goto LABEL_108;
        }
      }
      else
      {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        if ((v20 & 0x8000000000000000) != 0) {
          goto LABEL_108;
        }
      }
      if (v20 >= v12[2]) {
        goto LABEL_109;
      }
      uint64_t v30 = v12 + 4;
      uint64_t v31 = (void *)v12[v20 + 4];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12[v20 + 4] = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v30[v20] = v31;
      }
      unint64_t v34 = v31[2];
      unint64_t v33 = v31[3];
      if (v34 >= v33 >> 1)
      {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v31);
        v30[v20] = v31;
      }
      v31[2] = v34 + 1;
      v31[v34 + 4] = v16;
      uint64_t v35 = *(void **)(v19 + 16);
      if (v35)
      {
        uint64_t v111 = v12;
        uint64_t v12 = v13;
        unint64_t v13 = 0;
        uint64_t v36 = (unsigned char *)(v19 + 40);
        while ((unint64_t)v13 < *(void *)(v19 + 16))
        {
          if (*v36 == 1)
          {
            unint64_t v37 = *((void *)v36 - 1);
            if ((v37 & 0x8000000000000000) != 0) {
              goto LABEL_97;
            }
            if (v37 >= v12[2]) {
              goto LABEL_98;
            }
            uint64_t v38 = v115;
            uint64_t v39 = v115[v37];
            char v40 = swift_isUniquelyReferenced_nonNull_native();
            v38[v37] = v39;
            if ((v40 & 1) == 0)
            {
              uint64_t v39 = (void (*)(char *, unsigned int *, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v39 + 2) + 1, 1, v39);
              v115[v37] = v39;
            }
            unint64_t v42 = *((void *)v39 + 2);
            unint64_t v41 = *((void *)v39 + 3);
            if (v42 >= v41 >> 1)
            {
              uint64_t v39 = (void (*)(char *, unsigned int *, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v39);
              v115[v37] = v39;
            }
            *((void *)v39 + 2) = v42 + 1;
            *((void *)v39 + v42 + 4) = v16;
          }
          unint64_t v13 = (void *)((char *)v13 + 1);
          v36 += 16;
          if (v35 == v13)
          {
            unint64_t v13 = v12;
            uint64_t v12 = v111;
            goto LABEL_5;
          }
        }
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
      if (swift_isUniquelyReferenced_nonNull_native()) {
        Swift::UInt32 v43 = (char *)v114;
      }
      else {
        Swift::UInt32 v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v114);
      }
      uint64_t v44 = v113;
      if (v20 >= *((void *)v43 + 2)) {
        goto LABEL_113;
      }
      uint64_t v114 = (uint64_t)v43;
      v43[v20 + 32] = 1;
      unint64_t v46 = v44[2];
      unint64_t v45 = v44[3];
      if (v46 >= v45 >> 1) {
        uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v44);
      }
      void v44[2] = v46 + 1;
      uint64_t v113 = v44;
      v44[v46 + 4] = v20;
LABEL_5:
      ++v16;
      swift_bridgeObjectRelease();
      uint64_t v7 = v110;
    }
    while ((void (*)(char *, uint64_t))v16 != v106);
    uint64_t v111 = v12;
    swift_bridgeObjectRelease();
    uint64_t v14 = v113;
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v111 = v12;
    uint64_t v109 = v11;
  }
  uint64_t v47 = (void (**)(char *, unsigned int *, uint64_t))(v13 + 4);
  uint64_t v12 = v7 + 4;
  uint64_t v106 = (void (*)(char *, uint64_t))v13;
LABEL_54:
  uint64_t v48 = v14[2] + 3;
  uint64_t v113 = v14;
  while (v48 != 3)
  {
    unint64_t v49 = v14[v48];
    v14[2] = v48 - 4;
    if ((v49 & 0x8000000000000000) != 0) {
      goto LABEL_100;
    }
    if (v49 >= v13[2]) {
      goto LABEL_101;
    }
    uint64_t v50 = v47[v49];
    uint64_t v51 = *((void *)v50 + 2);
    --v48;
    if (v51)
    {
      int v115 = v47;
      unint64_t v13 = (void *)((char *)v50 + 32);
      swift_bridgeObjectRetain();
      unint64_t v52 = 0;
      uint64_t v53 = v110;
      while (v52 < *((void *)v50 + 2))
      {
        unint64_t v54 = v13[v52];
        if ((v54 & 0x8000000000000000) != 0) {
          goto LABEL_103;
        }
        if (v54 >= (unint64_t)v53[2]) {
          goto LABEL_104;
        }
        uint64_t v55 = &v12[2 * v54];
        unint64_t v56 = *v55;
        if ((*v55 & 0x8000000000000000) != 0) {
          goto LABEL_105;
        }
        unint64_t v57 = *(void *)(v114 + 16);
        if (v56 >= v57) {
          goto LABEL_106;
        }
        if ((*(unsigned char *)(v114 + 32 + v56) & 1) == 0)
        {
          unint64_t v58 = v55[1];
          uint64_t v59 = *(void *)(v58 + 16);
          if (v59)
          {
            unint64_t v60 = (unsigned char *)(v58 + 40);
            while (*v60 == 1)
            {
              unint64_t v61 = *((void *)v60 - 1);
              if (v61 >= v57) {
                goto LABEL_99;
              }
              if (*(unsigned char *)(v114 + 32 + v61) != 1) {
                break;
              }
              v60 += 16;
              if (!--v59) {
                goto LABEL_74;
              }
            }
          }
          else
          {
LABEL_74:
            unint64_t v62 = v113[2];
            unint64_t v63 = v113[3];
            swift_bridgeObjectRetain();
            if (v62 >= v63 >> 1) {
              uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v63 > 1), v62 + 1, 1, v113);
            }
            else {
              uint64_t v64 = v113;
            }
            v64[2] = v62 + 1;
            uint64_t v113 = v64;
            v64[v62 + 4] = v56;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v65 = (char *)v114;
            }
            else {
              uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew()(v114);
            }
            if ((int64_t)v56 >= *((void *)v65 + 2)) {
              goto LABEL_112;
            }
            uint64_t v114 = (uint64_t)v65;
            v65[v56 + 32] = 1;
            swift_bridgeObjectRelease();
            uint64_t v53 = v110;
          }
        }
        if (++v52 == v51)
        {
          swift_bridgeObjectRelease();
          unint64_t v13 = v106;
          uint64_t v14 = v113;
          uint64_t v11 = (void *)MEMORY[0x263F8EE78];
          uint64_t v47 = v115;
          goto LABEL_54;
        }
      }
      goto LABEL_102;
    }
  }
  uint64_t v66 = v98;
  int v67 = v110;
  unint64_t v68 = v111;
  v98[6] = v95;
  v66[7] = v67;
  v66[9] = v68;
  uint64_t v69 = v96;
  v66[2] = v103;
  v66[3] = v69;
  int64_t v70 = *(void *)(v69 + 16);
  if (v70)
  {
    uint64_t v116 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70, 0);
    uint64_t v71 = v69 + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
    uint64_t v72 = *(void *)(v93 + 72);
    int v115 = (void (**)(char *, unsigned int *, uint64_t))(v94 + 32);
    int v110 = (void (**)(char *, uint64_t))(v94 + 8);
    uint64_t v73 = v99;
    do
    {
      uint64_t v74 = v112;
      outlined init with copy of Grammar(v71, v112, type metadata accessor for TerminalSymbol);
      uint64_t v75 = v74;
      unint64_t v76 = v107;
      outlined init with copy of Grammar(v75, (uint64_t)v107, type metadata accessor for TerminalSymbol);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        unint64_t v78 = v76;
        uint64_t v79 = v100;
        (*v115)(v73, v78, v100);
        uint64_t v80 = CharacterSet.bitmapRepresentation.getter();
        unint64_t v82 = v81;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v84 = objc_msgSend(self, sel_characterSetWithBitmapRepresentation_, isa);
        outlined consume of Data._Representation(v80, v82);

        (*v110)(v73, v79);
      }
      else
      {
        id v84 = (id)*v76;
      }
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v112, type metadata accessor for TerminalSymbol);
      unint64_t v85 = v116;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1);
        unint64_t v85 = v116;
      }
      unint64_t v87 = v85[2];
      unint64_t v86 = v85[3];
      if (v87 >= v86 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1);
        unint64_t v85 = v116;
      }
      v85[2] = v87 + 1;
      uint64_t v88 = &v85[2 * v87];
      v88[4] = v84;
      *((unsigned char *)v88 + 40) = EnumCaseMultiPayload == 1;
      v71 += v72;
      --v70;
    }
    while (v70);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v85 = (void *)MEMORY[0x263F8EE78];
  }
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v97, type metadata accessor for Grammar);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v89 = v98;
  uint64_t v90 = v114;
  v98[4] = v85;
  v89[5] = v90;
  v89[8] = v109;
  swift_bridgeObjectRelease();
  return v89;
}

uint64_t flattenGrammar(grammar:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: TerminalSymbol, value: Int)?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v159 = (uint64_t)&v145 - v6;
  uint64_t v166 = type metadata accessor for TerminalSymbol(0);
  uint64_t v172 = *(void *)(v166 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v166);
  uint64_t v163 = (uint64_t)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v148 = (_DWORD *)((char *)&v145 - v10);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v180 = (uint64_t)&v145 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v145 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v179 = (char *)&v145 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v145 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  unint64_t v23 = (char *)&v145 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v170 = (uint64_t)&v145 - v25;
  MEMORY[0x270FA5388](v24);
  unint64_t v27 = (char *)&v145 - v26;
  uint64_t v174 = type metadata accessor for Symbol(0);
  uint64_t v176 = *(void *)(v174 - 8);
  MEMORY[0x270FA5388](v174);
  BOOL v29 = (uint64_t *)((char *)&v145 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v149 = a1;
  uint64_t v30 = *(void *)(a1 + 32);
  int64_t v31 = *(void *)(v30 + 16);
  uint64_t v32 = MEMORY[0x263F8EE78];
  uint64_t v178 = v15;
  uint64_t v164 = v23;
  uint64_t v165 = v27;
  uint64_t v171 = v29;
  uint64_t v152 = v30;
  if (v31)
  {
    uint64_t v181 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
    uint64_t v32 = v181;
    unint64_t v33 = (uint64_t *)(v30 + 40);
    do
    {
      uint64_t v35 = *(v33 - 1);
      uint64_t v34 = *v33;
      uint64_t v181 = v32;
      unint64_t v36 = *(void *)(v32 + 16);
      unint64_t v37 = *(void *)(v32 + 24);
      swift_bridgeObjectRetain();
      if (v36 >= v37 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v36 + 1, 1);
        uint64_t v32 = v181;
      }
      v33 += 3;
      *(void *)(v32 + 16) = v36 + 1;
      uint64_t v38 = v32 + 16 * v36;
      *(void *)(v38 + 32) = v35;
      *(void *)(v38 + 40) = v34;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    uint64_t v15 = v178;
    unint64_t v27 = v165;
    BOOL v29 = v171;
  }
  uint64_t v39 = specialized Set.init<A>(_:)(v32);
  swift_bridgeObjectRelease();
  char v40 = specialized _copyCollectionToContiguousArray<A>(_:)(v39);
  swift_bridgeObjectRelease();
  uint64_t v41 = swift_retain();
  uint64_t v42 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay19TokenGenerationCore17NonTerminalSymbolVGG_AJ_Sits5NeverOTg506_sSi19fg6Core17ijk41VACSiIgynrd_Si6offset_AC7elementtAC_Sits5L148OIegnrzr_TR04_s19ab67Core14flattenGrammar7grammarSi_SayAA12EarleyParserC0H4RuleVGSayAA14ef33OGSayAA03NonjK0VGtAA0E0V_tFAM_SitM10_AMtXEfU0_Tf3nnnpf_nTf1cn_n(v41);
  uint64_t v147 = v40;
  swift_release();
  if (*(void *)(v42 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NonTerminalSymbol, Int>);
    uint64_t v43 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v43 = MEMORY[0x263F8EE80];
  }
  uint64_t v181 = v43;
  uint64_t v44 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v44, 1, &v181);
  char v160 = v5;
  swift_bridgeObjectRelease();
  uint64_t v45 = v181;
  uint64_t v150 = *(void *)(v152 + 16);
  if (v150)
  {
    uint64_t v167 = v181;
    uint64_t v151 = v152 + 32;
    uint64_t v46 = swift_bridgeObjectRetain();
    unint64_t v47 = 0;
    uint64_t v48 = MEMORY[0x263F8EE80];
    uint64_t v161 = (void *)MEMORY[0x263F8EE78];
    uint64_t v49 = (uint64_t)v179;
    uint64_t v162 = v20;
    do
    {
      if (v47 >= *(void *)(v46 + 16)) {
        goto LABEL_128;
      }
      uint64_t v50 = (uint64_t *)(v151 + 24 * v47);
      uint64_t v51 = v50[2];
      uint64_t v156 = *(void *)(v51 + 16);
      if (v156)
      {
        unint64_t v146 = v47;
        uint64_t v52 = v50[1];
        uint64_t v154 = *v50;
        uint64_t v157 = v51 + 32;
        uint64_t v155 = v52;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        unint64_t v53 = 0;
        uint64_t v153 = v51;
        do
        {
          if (v53 >= *(void *)(v51 + 16)) {
            goto LABEL_125;
          }
          unint64_t v158 = v53;
          uint64_t v54 = *(void *)(v157 + 8 * v53);
          uint64_t v177 = *(void *)(v54 + 16);
          if (v177)
          {
            uint64_t v175 = v54 + ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80));
            swift_bridgeObjectRetain();
            unint64_t v55 = 0;
            unint64_t v56 = (void *)MEMORY[0x263F8EE78];
            uint64_t v173 = v54;
            while (1)
            {
              if (v55 >= *(void *)(v54 + 16)) {
                goto LABEL_121;
              }
              outlined init with copy of Grammar(v175 + *(void *)(v176 + 72) * v55, (uint64_t)v29, type metadata accessor for Symbol);
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              if (!EnumCaseMultiPayload) {
                break;
              }
              if (EnumCaseMultiPayload != 1)
              {
                uint64_t v98 = v167;
                if (!*(void *)(v167 + 16)) {
                  goto LABEL_129;
                }
                unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(*v29, v29[1]);
                if ((v100 & 1) == 0) {
                  goto LABEL_129;
                }
                uint64_t v101 = *(void *)(*(void *)(v98 + 56) + 8 * v99);
                swift_bridgeObjectRelease();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
                }
                unint64_t v103 = v56[2];
                unint64_t v102 = v56[3];
                if (v103 >= v102 >> 1) {
                  unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v102 > 1), v103 + 1, 1, v56);
                }
                v56[2] = v103 + 1;
                unint64_t v57 = &v56[2 * v103];
                v57[4] = v101;
                *((unsigned char *)v57 + 40) = 1;
                uint64_t v49 = (uint64_t)v179;
                goto LABEL_19;
              }
              uint64_t v59 = *v29;
              uint64_t v60 = *(void *)(*v29 + 16);
              if (v60)
              {
                uint64_t v168 = *v29;
                unint64_t v169 = v55;
                uint64_t v61 = v59
                    + ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80));
                uint64_t v62 = *(void *)(v172 + 72);
                while (1)
                {
                  outlined init with copy of Grammar(v61, v49, type metadata accessor for TerminalSymbol);
                  outlined init with copy of Grammar(v49, (uint64_t)v15, type metadata accessor for TerminalSymbol);
                  unint64_t v63 = (uint64_t *)(v48 + 16);
                  if (*(void *)(v48 + 16))
                  {
                    unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
                    if (v65) {
                      unint64_t v63 = (uint64_t *)(*(void *)(v48 + 56) + 8 * v64);
                    }
                  }
                  uint64_t v66 = *v63;
                  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v15, type metadata accessor for TerminalSymbol);
                  uint64_t v67 = v180;
                  outlined init with copy of Grammar(v49, v180, type metadata accessor for TerminalSymbol);
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v181 = v48;
                  unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v67);
                  uint64_t v71 = *(void *)(v48 + 16);
                  BOOL v72 = (v69 & 1) == 0;
                  uint64_t v73 = v71 + v72;
                  if (__OFADD__(v71, v72)) {
                    break;
                  }
                  char v74 = v69;
                  if (*(void *)(v48 + 24) >= v73)
                  {
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                      specialized _NativeDictionary.copy()();
                    }
                  }
                  else
                  {
                    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v73, isUniquelyReferenced_nonNull_native);
                    unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v180);
                    if ((v74 & 1) != (v76 & 1)) {
                      goto LABEL_134;
                    }
                    unint64_t v70 = v75;
                  }
                  uint64_t v49 = (uint64_t)v179;
                  uint64_t v48 = v181;
                  if (v74)
                  {
                    *(void *)(*(void *)(v181 + 56) + 8 * v70) = v66;
                  }
                  else
                  {
                    *(void *)(v181 + 8 * (v70 >> 6) + 64) |= 1 << v70;
                    outlined init with copy of Grammar(v180, *(void *)(v48 + 48) + v70 * v62, type metadata accessor for TerminalSymbol);
                    *(void *)(*(void *)(v48 + 56) + 8 * v70) = v66;
                    uint64_t v77 = *(void *)(v48 + 16);
                    BOOL v78 = __OFADD__(v77, 1);
                    uint64_t v79 = v77 + 1;
                    if (v78) {
                      goto LABEL_120;
                    }
                    *(void *)(v48 + 16) = v79;
                  }
                  swift_bridgeObjectRelease();
                  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v180, type metadata accessor for TerminalSymbol);
                  char v80 = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v15 = v178;
                  if ((v80 & 1) == 0) {
                    unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
                  }
                  unint64_t v82 = v56[2];
                  unint64_t v81 = v56[3];
                  if (v82 >= v81 >> 1) {
                    unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v81 > 1), v82 + 1, 1, v56);
                  }
                  v56[2] = v82 + 1;
                  unint64_t v83 = &v56[2 * v82];
                  v83[4] = v66;
                  *((unsigned char *)v83 + 40) = 0;
                  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v49, type metadata accessor for TerminalSymbol);
                  v61 += v62;
                  if (!--v60)
                  {
                    swift_bridgeObjectRelease();
                    unint64_t v20 = v162;
                    unint64_t v27 = v165;
                    BOOL v29 = v171;
                    uint64_t v54 = v173;
                    unint64_t v55 = v169;
                    goto LABEL_20;
                  }
                }
                __break(1u);
LABEL_120:
                __break(1u);
LABEL_121:
                __break(1u);
LABEL_122:
                __break(1u);
LABEL_123:
                __break(1u);
LABEL_124:
                __break(1u);
LABEL_125:
                __break(1u);
LABEL_126:
                __break(1u);
LABEL_127:
                __break(1u);
LABEL_128:
                __break(1u);
LABEL_129:
                swift_bridgeObjectRelease();
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                swift_bridgeObjectRelease();
                __break(1u);
LABEL_132:
                swift_bridgeObjectRelease();
LABEL_133:
                swift_release();
                __break(1u);
LABEL_134:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                uint64_t result = swift_unexpectedError();
                __break(1u);
                return result;
              }
              swift_bridgeObjectRelease();
              unint64_t v27 = v165;
LABEL_20:
              if (++v55 == v177)
              {
                swift_bridgeObjectRelease();
                goto LABEL_74;
              }
            }
            outlined init with take of TerminalSymbol((uint64_t)v29, (uint64_t)v27, type metadata accessor for TerminalSymbol);
            outlined init with copy of Grammar((uint64_t)v27, v170, type metadata accessor for TerminalSymbol);
            if (swift_getEnumCaseMultiPayload() == 1) {
              _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v170, type metadata accessor for TerminalSymbol);
            }
            uint64_t v84 = (uint64_t)v164;
            outlined init with copy of Grammar((uint64_t)v27, (uint64_t)v164, type metadata accessor for TerminalSymbol);
            unint64_t v85 = (uint64_t *)(v48 + 16);
            if (*(void *)(v48 + 16))
            {
              unint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)(v84);
              if (v87) {
                unint64_t v85 = (uint64_t *)(*(void *)(v48 + 56) + 8 * v86);
              }
            }
            uint64_t v88 = *v85;
            _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v84, type metadata accessor for TerminalSymbol);
            outlined init with copy of Grammar((uint64_t)v27, (uint64_t)v20, type metadata accessor for TerminalSymbol);
            char v89 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v181 = v48;
            unint64_t v91 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
            uint64_t v92 = *(void *)(v48 + 16);
            BOOL v93 = (v90 & 1) == 0;
            uint64_t v94 = v92 + v93;
            if (__OFADD__(v92, v93)) {
              goto LABEL_122;
            }
            char v95 = v90;
            if (*(void *)(v48 + 24) >= v94)
            {
              if ((v89 & 1) == 0) {
                specialized _NativeDictionary.copy()();
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v94, v89);
              unint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
              if ((v95 & 1) != (v97 & 1)) {
                goto LABEL_134;
              }
              unint64_t v91 = v96;
            }
            uint64_t v15 = v178;
            uint64_t v48 = v181;
            if (v95)
            {
              *(void *)(*(void *)(v181 + 56) + 8 * v91) = v88;
            }
            else
            {
              *(void *)(v181 + 8 * (v91 >> 6) + 64) |= 1 << v91;
              outlined init with copy of Grammar((uint64_t)v20, *(void *)(v48 + 48) + *(void *)(v172 + 72) * v91, type metadata accessor for TerminalSymbol);
              *(void *)(*(void *)(v48 + 56) + 8 * v91) = v88;
              uint64_t v104 = *(void *)(v48 + 16);
              BOOL v78 = __OFADD__(v104, 1);
              uint64_t v105 = v104 + 1;
              if (v78) {
                goto LABEL_123;
              }
              *(void *)(v48 + 16) = v105;
            }
            swift_bridgeObjectRelease();
            _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v20, type metadata accessor for TerminalSymbol);
            char v106 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v49 = (uint64_t)v179;
            if ((v106 & 1) == 0) {
              unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
            }
            unint64_t v108 = v56[2];
            unint64_t v107 = v56[3];
            if (v108 >= v107 >> 1) {
              unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v107 > 1), v108 + 1, 1, v56);
            }
            v56[2] = v108 + 1;
            uint64_t v109 = &v56[2 * v108];
            v109[4] = v88;
            *((unsigned char *)v109 + 40) = 0;
            _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v27, type metadata accessor for TerminalSymbol);
            BOOL v29 = v171;
LABEL_19:
            uint64_t v54 = v173;
            goto LABEL_20;
          }
          unint64_t v56 = (void *)MEMORY[0x263F8EE78];
LABEL_74:
          uint64_t v110 = v167;
          uint64_t v111 = v155;
          if (!*(void *)(v167 + 16)) {
            goto LABEL_126;
          }
          swift_bridgeObjectRetain();
          unint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(v154, v111);
          if ((v113 & 1) == 0) {
            goto LABEL_131;
          }
          uint64_t v114 = *(void *)(*(void *)(v110 + 56) + 8 * v112);
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v161[2] + 1, 1, v161);
          }
          unint64_t v116 = v161[2];
          unint64_t v115 = v161[3];
          if (v116 >= v115 >> 1) {
            uint64_t v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v115 > 1), v116 + 1, 1, v161);
          }
          unint64_t v53 = v158 + 1;
          int v117 = v161;
          v161[2] = v116 + 1;
          uint64_t v118 = &v117[2 * v116];
          v118[4] = v114;
          v118[5] = v56;
          uint64_t v49 = (uint64_t)v179;
          uint64_t v51 = v153;
        }
        while (v53 != v156);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        unint64_t v47 = v146;
      }
      ++v47;
      uint64_t v46 = v152;
    }
    while (v47 != v150);
    swift_bridgeObjectRelease();
    uint64_t v45 = v167;
  }
  else
  {
    uint64_t v161 = (void *)MEMORY[0x263F8EE78];
    uint64_t v48 = MEMORY[0x263F8EE80];
  }
  if (!*(void *)(v45 + 16)) {
    goto LABEL_133;
  }
  uint64_t v119 = *(void *)(v149 + 8);
  uint64_t v120 = *(void *)(v149 + 16);
  swift_bridgeObjectRetain();
  unint64_t v121 = specialized __RawDictionaryStorage.find<A>(_:)(v119, v120);
  if ((v122 & 1) == 0) {
    goto LABEL_132;
  }
  uint64_t v180 = *(void *)(*(void *)(v45 + 56) + 8 * v121);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v123 = (uint64_t)v148;
  *uint64_t v148 = 46;
  swift_storeEnumTagMultiPayload();
  unint64_t v124 = specialized Array.init(repeating:count:)(v123, *(void *)(v48 + 16));
  uint64_t v125 = v48 + 64;
  uint64_t v126 = 1 << *(unsigned char *)(v48 + 32);
  uint64_t v127 = -1;
  if (v126 < 64) {
    uint64_t v127 = ~(-1 << v126);
  }
  unint64_t v128 = v127 & *(void *)(v48 + 64);
  int64_t v129 = (unint64_t)(v126 + 63) >> 6;
  uint64_t v179 = (char *)(v129 - 1);
  swift_bridgeObjectRetain();
  int64_t v130 = 0;
  if (!v128) {
    goto LABEL_92;
  }
LABEL_90:
  unint64_t v131 = __clz(__rbit64(v128));
  v128 &= v128 - 1;
  unint64_t v132 = v131 | (v130 << 6);
LABEL_91:
  uint64_t v133 = (uint64_t)v160;
  outlined init with copy of Grammar(*(void *)(v48 + 48) + *(void *)(v172 + 72) * v132, (uint64_t)v160, type metadata accessor for TerminalSymbol);
  uint64_t v134 = *(void *)(v48 + 56);
  uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: TerminalSymbol, value: Int));
  *(void *)(v133 + *(int *)(v135 + 48)) = *(void *)(v134 + 8 * v132);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v135 - 8) + 56))(v133, 0, 1, v135);
  while (1)
  {
    uint64_t v140 = v133;
    uint64_t v141 = v159;
    outlined init with take of (key: TerminalSymbol, value: Int)?(v140, v159);
    uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: TerminalSymbol, value: Int));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 48))(v141, 1, v142) == 1) {
      goto LABEL_118;
    }
    unint64_t v143 = *(void *)(v141 + *(int *)(v142 + 48));
    outlined init with take of TerminalSymbol(v141, v163, type metadata accessor for TerminalSymbol);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      break;
    }
    if ((v143 & 0x8000000000000000) != 0) {
      goto LABEL_117;
    }
LABEL_113:
    if (v143 >= *(void *)(v124 + 16)) {
      goto LABEL_124;
    }
    outlined assign with take of TerminalSymbol(v163, v124+ ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80))+ *(void *)(v172 + 72) * v143);
    if (v128) {
      goto LABEL_90;
    }
LABEL_92:
    int64_t v136 = v130 + 1;
    if (__OFADD__(v130, 1)) {
      goto LABEL_127;
    }
    if (v136 < v129)
    {
      unint64_t v137 = *(void *)(v125 + 8 * v136);
      if (v137) {
        goto LABEL_95;
      }
      int64_t v138 = v130 + 2;
      ++v130;
      if (v136 + 1 < v129)
      {
        unint64_t v137 = *(void *)(v125 + 8 * v138);
        if (v137) {
          goto LABEL_98;
        }
        int64_t v130 = v136 + 1;
        if (v136 + 2 < v129)
        {
          unint64_t v137 = *(void *)(v125 + 8 * (v136 + 2));
          if (v137)
          {
            v136 += 2;
            goto LABEL_95;
          }
          int64_t v138 = v136 + 3;
          int64_t v130 = v136 + 2;
          if (v136 + 3 < v129)
          {
            unint64_t v137 = *(void *)(v125 + 8 * v138);
            if (!v137)
            {
              while (1)
              {
                int64_t v136 = v138 + 1;
                if (__OFADD__(v138, 1)) {
                  goto LABEL_130;
                }
                if (v136 >= v129)
                {
                  int64_t v130 = (int64_t)v179;
                  goto LABEL_109;
                }
                unint64_t v137 = *(void *)(v125 + 8 * v136);
                ++v138;
                if (v137) {
                  goto LABEL_95;
                }
              }
            }
LABEL_98:
            int64_t v136 = v138;
LABEL_95:
            unint64_t v128 = (v137 - 1) & v137;
            unint64_t v132 = __clz(__rbit64(v137)) + (v136 << 6);
            int64_t v130 = v136;
            goto LABEL_91;
          }
        }
      }
    }
LABEL_109:
    uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: TerminalSymbol, value: Int));
    uint64_t v133 = (uint64_t)v160;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v160, 1, 1, v139);
    unint64_t v128 = 0;
  }
  unint64_t v124 = specialized _ArrayBuffer._consumeAndCreateNew()(v124);
  if ((v143 & 0x8000000000000000) == 0) {
    goto LABEL_113;
  }
LABEL_117:
  __break(1u);
LABEL_118:
  swift_release();
  swift_bridgeObjectRelease();
  return v180;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v4 = type metadata accessor for TerminalSymbol(0);
      uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v5 + 16) = a2;
      uint64_t v6 = *(void *)(v4 - 8);
      unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      outlined init with copy of Grammar(a1, v5 + v7, type metadata accessor for TerminalSymbol);
      uint64_t v8 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v9 = *(void *)(v6 + 72);
        uint64_t v10 = v5 + v9 + v7;
        do
        {
          outlined init with copy of Grammar(a1, v10, type metadata accessor for TerminalSymbol);
          v10 += v9;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x263F8EE78];
    }
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(a1, type metadata accessor for TerminalSymbol);
    return v5;
  }
  return result;
}

{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;

  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          unint64_t v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(char a1, size_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1 & 1, a2);
    return v4;
  }
  return result;
}

uint64_t EarleyParser.ParserGrammar.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EarleyParser.ParserGrammar.__deallocating_deinit()
{
  EarleyParser.ParserGrammar.deinit();
  return MEMORY[0x270FA0228](v0, 80, 7);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EarleyParser.ParserRule()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser.ParserRule()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)(v1 + 40);
    do
    {
      Swift::UInt v5 = *((void *)v3 - 1);
      if (*v3)
      {
        if (*v3 != 1)
        {
          Swift::UInt v5 = 0;
          goto LABEL_5;
        }
        Swift::UInt v4 = 2;
      }
      else
      {
        Swift::UInt v4 = 1;
      }
      Hasher._combine(_:)(v4);
LABEL_5:
      v3 += 16;
      Hasher._combine(_:)(v5);
      --v2;
    }
    while (v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser.ParserRule()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser.ParserRule(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]);
  }
  else {
    return 0;
  }
}

uint64_t EarleyParser.Item.getDescription(grammar:)(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 56);
  if (*(void *)(v4 + 16) <= a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = v4 + 16 * a2;
  unint64_t v6 = *(void *)(v5 + 32);
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(result + 16);
  if (v6 >= *(void *)(v7 + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = v7 + 16 * v6;
  uint64_t v12 = *(void *)(v10 + 32);
  uint64_t v11 = *(void **)(v10 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore12EarleyParserC0H6SymbolOG_SSs5NeverOTg504_s19de6Core12gh56C4ItemV14getDescription7grammarSSAC0E7GrammarC_tFSSAC0E6I6OXEfU_AH0hS0CTf1cn_nTf4ng_n(v9, v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (*(void *)(v13 + 16) < a3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    specialized Array.replaceSubrange<A>(_:with:)(a3, a3, 12226530, 0xA300000000000000);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v12;
    v17._object = v11;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 62;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0x203D3A3A20;
    v19._object = (void *)0xE500000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = v14;
    v20._object = v16;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 31520;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 125;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    return 60;
  }
LABEL_13:
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EarleyParser.Item()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser.Item()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser.Item()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser.Item(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

void EarleyParser.State.hash(into:)()
{
  uint64_t v1 = *v0;
  Hasher._combine(_:)(*(void *)(*v0 + 16));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    Swift::UInt v3 = (Swift::UInt *)(v1 + 48);
    do
    {
      Swift::UInt v4 = *(v3 - 2);
      Swift::UInt v5 = *(v3 - 1);
      Swift::UInt v6 = *v3;
      v3 += 3;
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      --v2;
    }
    while (v2);
  }
}

BOOL static EarleyParser.State.== infix(_:_:)(int64x2_t **a1, int64x2_t **a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int EarleyParser.State.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v1 + 16));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    Swift::UInt v3 = (Swift::UInt *)(v1 + 48);
    do
    {
      Swift::UInt v4 = *(v3 - 2);
      Swift::UInt v5 = *(v3 - 1);
      Swift::UInt v6 = *v3;
      v3 += 3;
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser.State()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    Swift::UInt v3 = (Swift::UInt *)(v1 + 48);
    do
    {
      Swift::UInt v4 = *(v3 - 2);
      Swift::UInt v5 = *(v3 - 1);
      Swift::UInt v6 = *v3;
      v3 += 3;
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      --v2;
    }
    while (v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser.State()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    Swift::UInt v3 = (Swift::UInt *)(v1 + 48);
    do
    {
      Swift::UInt v4 = *(v3 - 2);
      Swift::UInt v5 = *(v3 - 1);
      Swift::UInt v6 = *v3;
      v3 += 3;
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser.State(int64x2_t **a1, int64x2_t **a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t EarleyParser.characterSetsUsedInGrammar.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t EarleyParser.lastConsumedElement.getter()
{
  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t EarleyParser.Chart.lastState.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 8 * v3;
LABEL_5:
    *a3 = *(void *)(v4 + 24);
    return swift_bridgeObjectRetain();
  }
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v4 = result + 8 * v5;
    goto LABEL_5;
  }
  *a3 = 0;
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (symbol: String, position: Int, priority: Int));
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for Symbol);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for TerminalSymbol);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x263F40C00]);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for Prompt.Delimiter);
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  unint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptComponentValueCustomDataTransformer);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  int64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EarleyParser.Chart()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser.Chart(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  specialized Array<A>.hash(into:)(a1, v3);
  specialized Array<A>.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser.Chart()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser.Chart(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t static EarleyParser.createRootParser(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Grammar(0);
  uint64_t v3 = v2 - 8;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Grammar(a1, (uint64_t)v5, type metadata accessor for Grammar);
  type metadata accessor for EarleyParser.ParserGrammar();
  uint64_t v6 = (void *)swift_allocObject();
  EarleyParser.ParserGrammar.init(grammar:)(v5);
  uint64_t v7 = specialized static EarleyParser.createRootItems(parserGrammar:)(v6);
  uint64_t v8 = *(void *)(a1 + *(int *)(v3 + 40));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.State>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_25FA352B0;
  *(void *)(v9 + 32) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  *(_DWORD *)(v10 + 24) = 0;
  *(unsigned char *)(v10 + 28) = 1;
  *(void *)(v10 + 32) = v6;
  *(void *)(v10 + 40) = v9;
  *(void *)(v10 + 48) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  return v10;
}

uint64_t type metadata accessor for EarleyParser.ParserGrammar()
{
  return self;
}

uint64_t EarleyParser.optimized()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  int v2 = *(_DWORD *)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 28);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v5);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  *(_DWORD *)(result + 24) = v2;
  *(unsigned char *)(result + 28) = v3;
  *(void *)(result + 32) = v4;
  *(void *)(result + 40) = v7;
  *(void *)(result + 48) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t EarleyParser.childParser(consumingElement:)(uint64_t a1)
{
  int64_t v31 = (void *)MEMORY[0x263F8EE78];
  uint64_t v4 = (void *)v1[4];
  uint64_t v5 = (void *)v1[5];
  uint64_t v6 = v1[6];
  uint64_t result = EarleyParser.Chart.lastState.getter((uint64_t)v5, v6, &v30);
  uint64_t v8 = v30;
  if (!v30)
  {
    __break(1u);
    return result;
  }
  uint64_t v9 = *(void *)(v30 + 16);
  if (v9)
  {
    uint64_t v23 = v1;
    uint64_t v24 = v6;
    uint64_t v25 = v5;
    uint64_t v10 = v4[4];
    uint64_t v26 = v4;
    uint64_t v4 = (void *)v4[7];
    uint64_t v29 = v10 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)(v8 + 48);
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    unsigned int v28 = a1;
    uint64_t v27 = v10;
    while (1)
    {
      unint64_t v13 = *(v5 - 2);
      if ((v13 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, (void *)v6);
LABEL_24:
        unint64_t v22 = *(void *)(v6 + 16);
        unint64_t v21 = *(void *)(v6 + 24);
        if (v22 >= v21 >> 1) {
          uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, (void *)v6);
        }
        *(void *)(v6 + 16) = v22 + 1;
        *(void *)(v6 + 8 * v22 + 32) = v2;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v10;
        *(_DWORD *)(result + 24) = a1;
        *(unsigned char *)(result + 28) = 0;
        *(void *)(result + 32) = v4;
        *(void *)(result + 40) = v5;
        *(void *)(result + 48) = v6;
        return result;
      }
      if (v13 >= v4[2]) {
        goto LABEL_29;
      }
      uint64_t v6 = *(v5 - 1);
      uint64_t v14 = v4[2 * v13 + 5];
      if (v6 < *(void *)(v14 + 16))
      {
        uint64_t v15 = v14 + 16 * v6;
        if (!*(unsigned char *)(v15 + 40))
        {
          unint64_t v16 = *(void *)(v15 + 32);
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_30;
          }
          if (v16 >= *(void *)(v10 + 16)) {
            goto LABEL_31;
          }
          int v2 = (void *)*v5;
          uint64_t v17 = v29 + 16 * v16;
          unint64_t v18 = *(void **)v17;
          if (*(unsigned char *)(v17 + 8))
          {
            if (objc_msgSend(v18, sel_longCharacterIsMember_, a1)) {
              goto LABEL_16;
            }
          }
          else if (v18 == a1)
          {
LABEL_16:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
            }
            unint64_t v20 = v11[2];
            unint64_t v19 = v11[3];
            if (v20 >= v19 >> 1) {
              uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v11);
            }
            void v11[2] = v20 + 1;
            uint64_t v12 = &v11[3 * v20];
            v12[4] = v13;
            v12[5] = v6 + 1;
            v12[6] = v2;
            int64_t v31 = v11;
            a1 = v28;
            uint64_t v10 = v27;
          }
        }
      }
      v5 += 3;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = v25;
        uint64_t v4 = v26;
        uint64_t v6 = v24;
        uint64_t v1 = v23;
        goto LABEL_22;
      }
    }
  }
  uint64_t v11 = (void *)MEMORY[0x263F8EE78];
LABEL_22:
  swift_bridgeObjectRelease();
  if (v11[2])
  {
    specialized static EarleyParser.predictAndComplete(parserGrammar:chart:items:)(v4, (uint64_t)v5, v6, &v31);
    uint64_t v10 = v1[2];
    int v2 = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Array<A>.appendUnique(_:itemsSet:)(uint64_t result, Swift::UInt a2, Swift::UInt a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  Swift::UInt v8 = result;
  uint64_t v9 = (void *)*v4;
  unint64_t v10 = *(void *)(*v4 + 16);
  if (v10 >= 0xA)
  {
    uint64_t v17 = *a4;
    if (!*(void *)(v17 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v18 = v9 + 6;
      do
      {
        Swift::UInt v19 = *(v18 - 2);
        Swift::UInt v20 = *(v18 - 1);
        Swift::UInt v21 = *v18;
        v18 += 3;
        specialized Set._Variant.insert(_:)(v25, v19, v20, v21);
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      uint64_t v17 = *a4;
    }
    uint64_t result = specialized Set.contains(_:)(v8, a2, a3, v17);
    if (result) {
      return result;
    }
    specialized Set._Variant.insert(_:)(v25, v8, a2, a3);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      int64_t v15 = v9[2] + 1;
      goto LABEL_25;
    }
LABEL_20:
    unint64_t v23 = v9[2];
    unint64_t v22 = v9[3];
    if (v23 >= v22 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v9);
      uint64_t v9 = (void *)result;
    }
    v9[2] = v23 + 1;
    uint64_t v24 = &v9[3 * v23];
    _OWORD v24[4] = v8;
    v24[5] = a2;
    v24[6] = a3;
    void *v5 = v9;
    return result;
  }
  if (!v10)
  {
LABEL_12:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      int64_t v15 = v10 + 1;
LABEL_25:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 1, v9);
      uint64_t v9 = (void *)result;
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  uint64_t v11 = v9 + 6;
  uint64_t v12 = *(void *)(*v4 + 16);
  while (1)
  {
    BOOL v13 = *(v11 - 2) == result && *(v11 - 1) == a2;
    if (v13 && *v11 == a3) {
      return result;
    }
    v11 += 3;
    if (!--v12) {
      goto LABEL_12;
    }
  }
}

uint64_t EarleyParser.createValidatorCache()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[6];
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = v1[5];
    *a1 = v1[4];
    a1[1] = v3;
    uint64_t v4 = MEMORY[0x263F8EE78];
    a1[2] = v2;
    a1[3] = v4;
    a1[4] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

Swift::Bool __swiftcall EarleyParser.ParserValidatorCache.parse(string:skipFirst:)(Swift::String string, Swift::Int skipFirst)
{
  if (((uint64_t)string._object & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(string._object) & 0xF;
  }
  else {
    uint64_t v3 = string._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 1;
  }
  unint64_t object = (unint64_t)string._object;
  uint64_t countAndFlagsBits = string._countAndFlagsBits;
  uint64_t v26 = ((uint64_t)string._object & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v27 = (uint64_t)string._object & 0xFFFFFFFFFFFFFFLL;
  uint64_t v30 = (uint64_t *)(v2 + 16);
  unsigned int v28 = (uint64_t *)(v2 + 24);
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  Swift::Int v8 = skipFirst;
  while (1)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      uint64_t v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      uint64_t v13 = v12;
      goto LABEL_17;
    }
    if ((object & 0x2000000000000000) == 0)
    {
      uint64_t v9 = v26;
      if ((countAndFlagsBits & 0x1000000000000000) == 0) {
        uint64_t v9 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v10 = *(unsigned __int8 *)(v9 + v7);
      if (*(char *)(v9 + v7) < 0)
      {
        switch(__clz(v10 ^ 0xFF))
        {
          case 0x1Au:
            uint64_t v11 = (char *)(v7 + v9);
            goto LABEL_36;
          case 0x1Bu:
            Swift::UInt v21 = (char *)(v7 + v9);
            goto LABEL_40;
          case 0x1Cu:
            unint64_t v22 = (char *)(v7 + v9);
            goto LABEL_42;
          default:
            break;
        }
      }
LABEL_16:
      uint64_t v13 = 1;
      goto LABEL_17;
    }
    v31[0] = countAndFlagsBits;
    v31[1] = v27;
    uint64_t v10 = *((unsigned __int8 *)v31 + v7);
    if ((*((char *)v31 + v7) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    switch(__clz(v10 ^ 0xFF))
    {
      case 0x1Au:
        uint64_t v11 = (char *)v31 + v7;
LABEL_36:
        uint64_t v10 = v11[1] & 0x3F | ((v10 & 0x1F) << 6);
        uint64_t v13 = 2;
        break;
      case 0x1Bu:
        Swift::UInt v21 = (char *)v31 + v7;
LABEL_40:
        uint64_t v10 = ((v10 & 0xF) << 12) | ((v21[1] & 0x3F) << 6) | v21[2] & 0x3F;
        uint64_t v13 = 3;
        break;
      case 0x1Cu:
        unint64_t v22 = (char *)v31 + v7;
LABEL_42:
        uint64_t v10 = ((v10 & 0xF) << 18) | ((v22[1] & 0x3F) << 12) | ((v22[2] & 0x3F) << 6) | v22[3] & 0x3F;
        uint64_t v13 = 4;
        break;
      default:
        goto LABEL_16;
    }
LABEL_17:
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_46:
      Swift::Bool v23 = 1;
LABEL_43:
      swift_bridgeObjectRelease();
      return v23;
    }
    unint64_t v14 = v6 - v8;
    if (v6 >= v8) {
      break;
    }
LABEL_6:
    v7 += v13;
    ++v6;
    if (v7 >= v3) {
      goto LABEL_46;
    }
  }
  if (!__OFSUB__(v6, v8))
  {
    uint64_t v15 = v3;
    int64_t v16 = *(void *)(*v30 + 16);
    if ((uint64_t)v14 < v16)
    {
      if ((v14 & 0x8000000000000000) != 0) {
        goto LABEL_49;
      }
      uint64_t v17 = *v28;
      unint64_t v18 = *(void *)(*v28 + 16);
      if (v14 >= v18) {
        goto LABEL_50;
      }
      if (*(_DWORD *)(v17 + 4 * v14 + 32) != v10)
      {
        if (v16 != v14)
        {
          specialized Array.replaceSubrange<A>(_:with:)(v6 - v8, v16);
          Swift::Int v8 = skipFirst;
          unint64_t v18 = *(void *)(v17 + 16);
        }
        if (v18 != v14)
        {
          if (v18 < v14) {
            goto LABEL_51;
          }
          specialized Array.replaceSubrange<A>(_:with:)(v14, v18);
          Swift::Int v8 = skipFirst;
        }
      }
    }
    uint64_t v19 = *v30;
    unint64_t v20 = *(void *)(*v30 + 16);
    if (v14 == v20)
    {
      specialized EarleyParser.ParserValidatorCache.parse(_:_:)(v10);
      uint64_t v19 = *(void *)(v25 + 16);
      Swift::Int v8 = skipFirst;
      unint64_t v20 = *(void *)(v19 + 16);
    }
    uint64_t v3 = v15;
    if (v14 >= v20) {
      goto LABEL_48;
    }
    if (!*(void *)(*(void *)(v19 + 8 * v14 + 32) + 16))
    {
      Swift::Bool v23 = 0;
      goto LABEL_43;
    }
    goto LABEL_6;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return 1;
}

BOOL EarleyParser.validate(validatorCache:string:skipFirst:)(int a1, Swift::String string, Swift::Int skipFirst)
{
  return EarleyParser.ParserValidatorCache.parse(string:skipFirst:)(string, skipFirst);
}

uint64_t EarleyParser.fullMatch.getter()
{
  EarleyParser.Chart.lastState.getter(v0[5], v0[6], &v12);
  uint64_t result = v12;
  if (!v12) {
    return 0;
  }
  uint64_t v2 = *(void *)(v12 + 16);
  if (!v2)
  {
LABEL_16:
    uint64_t v11 = 0;
LABEL_17:
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t v3 = *(void *)(v0[4] + 56);
  uint64_t v4 = v3 + 32;
  uint64_t v5 = (void *)(v12 + 48);
  while (1)
  {
    if (*v5) {
      goto LABEL_4;
    }
    unint64_t v6 = *(v5 - 2);
    if ((v6 & 0x8000000000000000) != 0) {
      break;
    }
    if (v6 >= *(void *)(v3 + 16)) {
      goto LABEL_21;
    }
    if (*(void *)(v4 + 16 * v6) == *(void *)(v0[4] + 48))
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v8 = *(void *)(v4 + 16 * v6 + 8);
      if (v7 >= *(void *)(v8 + 16)
        || ((uint64_t v9 = v8 + 16 * v7, *(unsigned char *)(v9 + 40) == 2) ? (v10 = *(void *)(v9 + 32) == 0) : (v10 = 0), v10))
      {
        uint64_t v11 = 1;
        goto LABEL_17;
      }
    }
LABEL_4:
    v5 += 3;
    if (!--v2) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t EarleyParser.nextValidTerminals()()
{
  uint64_t v1 = type metadata accessor for TerminalSymbol(0);
  uint64_t v22 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  EarleyParser.Chart.lastState.getter(v0[5], v0[6], &v23);
  uint64_t v4 = v23;
  if (!v23) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v5 = *(void *)(v23 + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v6 = v0[4];
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t v8 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v20 = v4;
  BOOL v10 = (void *)(v4 + 40);
  unint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v21 = v8;
  while (1)
  {
    unint64_t v12 = *(v10 - 1);
    if ((v12 & 0x8000000000000000) != 0) {
      break;
    }
    if (v12 >= *(void *)(v7 + 16)) {
      goto LABEL_21;
    }
    uint64_t v13 = *(void *)(v7 + 32 + 16 * v12 + 8);
    if (*v10 < *(void *)(v13 + 16))
    {
      uint64_t v14 = v13 + 16 * *v10;
      if (!*(unsigned char *)(v14 + 40))
      {
        unint64_t v15 = *(void *)(v14 + 32);
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_22;
        }
        if (v15 >= *(void *)(v8 + 16)) {
          goto LABEL_23;
        }
        unint64_t v16 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
        uint64_t v17 = *(void *)(v22 + 72);
        outlined init with copy of Grammar(v8 + v16 + v17 * v15, (uint64_t)v3, type metadata accessor for TerminalSymbol);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, v11);
        }
        unint64_t v19 = *(void *)(v11 + 16);
        unint64_t v18 = *(void *)(v11 + 24);
        if (v19 >= v18 >> 1) {
          unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v11);
        }
        *(void *)(v11 + 16) = v19 + 1;
        uint64_t result = outlined init with take of TerminalSymbol((uint64_t)v3, v11 + v16 + v19 * v17, type metadata accessor for TerminalSymbol);
        uint64_t v8 = v21;
      }
    }
    v10 += 3;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

Swift::tuple_cacheKey_Int_optional_nextValidTerminals_OpaquePointer __swiftcall EarleyParser.nextValidTerminalsWithCacheKey()()
{
  uint64_t v1 = type metadata accessor for TerminalSymbol(0);
  uint64_t v68 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  EarleyParser.Chart.lastState.getter(v0[5], v0[6], &v70);
  uint64_t v4 = v70;
  if (!v70) {
    goto LABEL_55;
  }
  uint64_t v5 = *(void *)(v70 + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease();
LABEL_55:
    Swift::Int v57 = 0;
    unint64_t v11 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_57;
  }
  uint64_t v6 = (void *)v0[4];
  uint64_t v7 = v6[7];
  uint64_t v8 = v6[3];
  swift_bridgeObjectRetain();
  Swift::Int isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
  uint64_t v12 = v7 + 32;
  uint64_t v13 = v4 + 32;
  int v14 = 0;
  unint64_t v15 = 0;
  unint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v60 = (void *)MEMORY[0x263F8EE78];
  unint64_t v64 = v3;
  char v65 = v6;
  uint64_t v66 = v7 + 32;
  uint64_t v67 = v4 + 32;
  uint64_t v63 = v4;
LABEL_4:
  int v59 = v14;
  do
  {
    if (v15 >= *(void *)(v4 + 16))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    uint64_t v17 = (long long *)(v13 + 24 * v15);
    long long v18 = *v17;
    unint64_t v19 = *(void *)v17;
    if ((*(void *)v17 & 0x8000000000000000) != 0) {
      goto LABEL_60;
    }
    if (v19 >= *(void *)(v7 + 16)) {
      goto LABEL_61;
    }
    ++v15;
    uint64_t v20 = *(void *)(v12 + 16 * v19 + 8);
    uint64_t v21 = *((void *)v17 + 1);
    if (*((uint64_t *)&v18 + 1) < *(void *)(v20 + 16))
    {
      uint64_t v22 = *((void *)v17 + 2);
      uint64_t v23 = v20 + 16 * *((void *)&v18 + 1);
      if (*(unsigned char *)(v23 + 40))
      {
        if (*(unsigned char *)(v23 + 40) == 1)
        {
          uint64_t v24 = v6[8];
          uint64_t v25 = *(void *)(v24 + 16);
          if (v25)
          {
            if (*(void *)(v24 + 32) == v19)
            {
LABEL_15:
              if (*((void *)&v18 + 1))
              {
                uint64_t v43 = v22;
                long long v62 = v18;
                Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
                  uint64_t v60 = (void *)isUniquelyReferenced_nonNull_native;
                }
                long long v44 = v62;
                uint64_t v45 = v43;
                unint64_t v47 = v60[2];
                unint64_t v46 = v60[3];
                uint64_t v12 = v66;
                uint64_t v13 = v67;
                if (v47 >= v46 >> 1)
                {
                  Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v60);
                  uint64_t v45 = v43;
                  long long v44 = v62;
                  uint64_t v12 = v66;
                  uint64_t v13 = v67;
                  uint64_t v60 = (void *)isUniquelyReferenced_nonNull_native;
                }
                uint64_t v48 = v60;
                v60[2] = v47 + 1;
                uint64_t v49 = &v48[3 * v47];
                *((_OWORD *)v49 + 2) = v44;
                v49[6] = v45;
                int v14 = 1;
                uint64_t v3 = v64;
                uint64_t v6 = v65;
                if (v15 == v5) {
                  goto LABEL_64;
                }
                goto LABEL_4;
              }
            }
            else if (v25 != 1)
            {
              uint64_t v39 = 5;
              while (1)
              {
                uint64_t v40 = v39 - 3;
                if (__OFADD__(v39 - 4, 1)) {
                  break;
                }
                if (*(void *)(v24 + 8 * v39) == v19) {
                  goto LABEL_15;
                }
                ++v39;
                if (v40 == v25) {
                  goto LABEL_6;
                }
              }
LABEL_62:
              __break(1u);
              goto LABEL_63;
            }
          }
        }
      }
      else
      {
        unint64_t v26 = *(void *)(v23 + 32);
        if ((v26 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        if (v26 >= *(void *)(v8 + 16)) {
          goto LABEL_66;
        }
        uint64_t v61 = v22;
        long long v62 = v18;
        uint64_t v27 = v7;
        uint64_t v28 = v5;
        unint64_t v29 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
        uint64_t v30 = v8;
        uint64_t v31 = v8 + v29;
        uint64_t v32 = *(void *)(v68 + 72);
        outlined init with copy of Grammar(v31 + v32 * v26, (uint64_t)v3, type metadata accessor for TerminalSymbol);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, v16);
        }
        unint64_t v34 = *(void *)(v16 + 16);
        unint64_t v33 = *(void *)(v16 + 24);
        unint64_t v69 = v16;
        if (v34 >= v33 >> 1) {
          unint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v69);
        }
        unint64_t v35 = v69;
        *(void *)(v69 + 16) = v34 + 1;
        unint64_t v16 = v35;
        uint64_t v36 = v35 + v29 + v34 * v32;
        uint64_t v3 = v64;
        Swift::Int isUniquelyReferenced_nonNull_native = outlined init with take of TerminalSymbol((uint64_t)v64, v36, type metadata accessor for TerminalSymbol);
        uint64_t v6 = v65;
        uint64_t v37 = v65[8];
        uint64_t v38 = *(void *)(v37 + 16);
        if (v38)
        {
          uint64_t v8 = v30;
          uint64_t v5 = v28;
          uint64_t v7 = v27;
          uint64_t v4 = v63;
          uint64_t v12 = v66;
          uint64_t v13 = v67;
          if (*(void *)(v37 + 32) == v19)
          {
LABEL_25:
            if (v21)
            {
              Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
                uint64_t v60 = (void *)isUniquelyReferenced_nonNull_native;
              }
              long long v50 = v62;
              uint64_t v51 = v61;
              unint64_t v53 = v60[2];
              unint64_t v52 = v60[3];
              uint64_t v12 = v66;
              uint64_t v13 = v67;
              if (v53 >= v52 >> 1)
              {
                Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v60);
                uint64_t v51 = v61;
                long long v50 = v62;
                uint64_t v12 = v66;
                uint64_t v13 = v67;
                uint64_t v60 = (void *)isUniquelyReferenced_nonNull_native;
              }
              uint64_t v54 = v60;
              v60[2] = v53 + 1;
              unint64_t v55 = &v54[3 * v53];
              *((_OWORD *)v55 + 2) = v50;
              v55[6] = v51;
              int v14 = 1;
              unint64_t v16 = v69;
              uint64_t v6 = v65;
              if (v15 == v5) {
                goto LABEL_64;
              }
              goto LABEL_4;
            }
          }
          else if (v38 != 1)
          {
            uint64_t v41 = 5;
            while (1)
            {
              uint64_t v42 = v41 - 3;
              if (__OFADD__(v41 - 4, 1)) {
                break;
              }
              if (*(void *)(v37 + 8 * v41) == v19) {
                goto LABEL_25;
              }
              ++v41;
              if (v42 == v38) {
                goto LABEL_6;
              }
            }
LABEL_63:
            __break(1u);
LABEL_64:
            unint64_t v56 = (void *)v16;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_53:
            Swift::Int v57 = specialized Collection<>.itemCacheKey()((uint64_t)v60);
            swift_bridgeObjectRelease();
            Swift::Bool v10 = 0;
            unint64_t v11 = v56;
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v8 = v30;
          uint64_t v5 = v28;
          uint64_t v7 = v27;
          uint64_t v4 = v63;
          uint64_t v12 = v66;
          uint64_t v13 = v67;
        }
      }
    }
LABEL_6:
    ;
  }
  while (v15 != v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v59)
  {
    unint64_t v56 = (void *)v16;
    goto LABEL_53;
  }
  swift_bridgeObjectRelease();
  unint64_t v11 = (void *)v16;
  Swift::Int v57 = 0;
LABEL_57:
  Swift::Bool v10 = 1;
LABEL_58:
  Swift::Int isUniquelyReferenced_nonNull_native = v57;
LABEL_67:
  result.nextValidTerminals._rawValue = v11;
  result.cacheKey.value = isUniquelyReferenced_nonNull_native;
  result.cacheKey.is_nil = v10;
  return result;
}

Swift::Int specialized Collection<>.itemCacheKey()(uint64_t a1)
{
  Hasher.init()();
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (Swift::UInt *)(a1 + 48);
    do
    {
      Swift::UInt v4 = *(v3 - 2);
      Swift::UInt v5 = *(v3 - 1);
      Swift::UInt v6 = *v3;
      v3 += 3;
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v5);
      --v2;
    }
    while (v2);
  }
  return Hasher.finalize()();
}

void EarleyParser.hash(into:)(uint64_t a1)
{
  specialized Array<A>.hash(into:)(a1, *(void *)(v1[4] + 56));
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  specialized Array<A>.hash(into:)(a1, v3);
  specialized Array<A>.hash(into:)(a1, v4);
}

uint64_t EarleyParser.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EarleyParser.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

Swift::Int EarleyParser.hashValue.getter()
{
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v3, *(void *)(v0[4] + 56));
  uint64_t v1 = v0[6];
  specialized Array<A>.hash(into:)((uint64_t)v3, v0[5]);
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CharacterGrammarParser.fullMatch.getter in conformance EarleyParser()
{
  return EarleyParser.fullMatch.getter() & 1;
}

unint64_t protocol witness for CharacterGrammarParser.lastConsumedElement.getter in conformance EarleyParser()
{
  return *(unsigned int *)(*(void *)v0 + 24) | ((unint64_t)*(unsigned __int8 *)(*(void *)v0 + 28) << 32);
}

uint64_t protocol witness for CharacterGrammarParser.characterSetsUsedInGrammar.getter in conformance EarleyParser()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CharacterGrammarParser.childParser(consumingElement:) in conformance EarleyParser@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = EarleyParser.childParser(consumingElement:)(a1);
  *a2 = result;
  return result;
}

BOOL protocol witness for CharacterGrammarParser.validate(validatorCache:string:skipFirst:) in conformance EarleyParser(int a1, Swift::String string, Swift::Int skipFirst)
{
  return EarleyParser.ParserValidatorCache.parse(string:skipFirst:)(string, skipFirst);
}

uint64_t protocol witness for CharacterGrammarParser.createValidatorCache() in conformance EarleyParser@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  if (*(void *)(v3 + 16))
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 40);
    *a1 = *(void *)(v2 + 32);
    a1[1] = v4;
    uint64_t v5 = MEMORY[0x263F8EE78];
    a1[2] = v3;
    a1[3] = v5;
    a1[4] = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t protocol witness for CharacterGrammarParser.nextValidTerminals() in conformance EarleyParser()
{
  return EarleyParser.nextValidTerminals()();
}

unint64_t protocol witness for CharacterGrammarParser.nextValidTerminalsWithCacheKey() in conformance EarleyParser()
{
  return (unint64_t)EarleyParser.nextValidTerminalsWithCacheKey()();
}

uint64_t protocol witness for CharacterGrammarParser.optimized() in conformance EarleyParser@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EarleyParser.optimized()();
  *a1 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EarleyParser()
{
  uint64_t v1 = (void *)*v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, *(void *)(v1[4] + 56));
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  specialized Array<A>.hash(into:)((uint64_t)v5, v2);
  specialized Array<A>.hash(into:)((uint64_t)v5, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser(uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  specialized Array<A>.hash(into:)(a1, *(void *)(v3[4] + 56));
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  specialized Array<A>.hash(into:)(a1, v4);
  specialized Array<A>.hash(into:)(a1, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser()
{
  uint64_t v1 = (void *)*v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, *(void *)(v1[4] + 56));
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  specialized Array<A>.hash(into:)((uint64_t)v5, v2);
  specialized Array<A>.hash(into:)((uint64_t)v5, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser(void **a1, void **a2)
{
  return specialized static EarleyParser.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized Set.contains(_:)(Swift::UInt a1, Swift::UInt a2, Swift::UInt a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
    return 0;
  }
  uint64_t v11 = ~v9;
  do
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a4 + 48) + 24 * v10);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    BOOL v17 = v13 == a1 && v14 == a2 && v15 == a3;
    uint64_t result = v17;
    if (v17) {
      break;
    }
    unint64_t v10 = (v10 + 1) & v11;
  }
  while (((*(void *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  return result;
}

uint64_t EarleyParser.Chart.getDebugDescription(parserGrammar:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v35[0] = a2;
  v35[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v4 = 0;
  uint64_t v5 = 0;
  Swift::UInt v6 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    char v7 = v4;
    unint64_t v8 = *(void *)(v35[v5] + 16);
    uint64_t result = swift_bridgeObjectRetain();
    char v31 = v7;
    if (v8) {
      break;
    }
LABEL_2:
    swift_bridgeObjectRelease();
    char v4 = 1;
    uint64_t v5 = 1;
    if (v31)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [EarleyParser.State]);
      swift_arrayDestroy();
      v34[0] = v6;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v30;
    }
  }
  unint64_t v10 = 0;
  uint64_t v32 = result + 32;
  uint64_t v33 = result;
  while (v10 < v8)
  {
    uint64_t v11 = *(void *)(v32 + 8 * v10);
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    strcpy((char *)v34, "==== State: ");
    BYTE5(v34[1]) = 0;
    HIWORD(v34[1]) = -5120;
    v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 0x3D3D3D3D20;
    v13._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v13);
    uint64_t v14 = v34[0];
    uint64_t v15 = v34[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::UInt v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    }
    unint64_t v17 = v6[2];
    unint64_t v16 = v6[3];
    if (v17 >= v16 >> 1) {
      Swift::UInt v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v6);
    }
    v6[2] = v17 + 1;
    long long v18 = &v6[2 * v17];
    v18[4] = v14;
    v18[5] = v15;
    uint64_t v19 = *(void *)(v11 + 16);
    if (v19)
    {
      uint64_t v20 = v11 + 48;
      do
      {
        uint64_t v21 = EarleyParser.Item.getDescription(grammar:)(a1, *(void *)(v20 - 16), *(void *)(v20 - 8));
        uint64_t v23 = v22;
        unint64_t v25 = v6[2];
        unint64_t v24 = v6[3];
        if (v25 >= v24 >> 1) {
          Swift::UInt v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v6);
        }
        v20 += 24;
        v6[2] = v25 + 1;
        unint64_t v26 = &v6[2 * v25];
        v26[4] = v21;
        v26[5] = v23;
        --v19;
      }
      while (v19);
    }
    swift_bridgeObjectRelease();
    unint64_t v28 = v6[2];
    unint64_t v27 = v6[3];
    if (v28 >= v27 >> 1) {
      Swift::UInt v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v6);
    }
    uint64_t result = v33;
    ++v10;
    v6[2] = v28 + 1;
    unint64_t v29 = &v6[2 * v28];
    v29[4] = 0;
    v29[5] = 0xE000000000000000;
    unint64_t v8 = *(void *)(v33 + 16);
    if (v10 == v8) {
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t EarleyParser.debugDescription.getter()
{
  return EarleyParser.Chart.getDebugDescription(parserGrammar:)(v0[4], v0[5], v0[6]);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EarleyParser()
{
  return EarleyParser.Chart.getDebugDescription(parserGrammar:)(*(void *)(*(void *)v0 + 32), *(void *)(*(void *)v0 + 40), *(void *)(*(void *)v0 + 48));
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, char a2, void *a3)
{
  LOBYTE(v4) = a2;
  uint64_t v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v8 = a1[5];
  unint64_t v7 = a1[6];
  uint64_t v9 = a1[4];
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_23;
  }
  unint64_t v10 = (void *)*a3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  BOOL v15 = __OFADD__(v13, v14);
  uint64_t v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v17 = v12;
  if (v10[3] < v16)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, v4 & 1);
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v17 & 1) == (v18 & 1)) {
      goto LABEL_8;
    }
LABEL_6:
    unint64_t v11 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if (v4)
  {
LABEL_8:
    if (v17) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  unint64_t v21 = v11;
  specialized _NativeDictionary.copy()();
  unint64_t v11 = v21;
  if (v17)
  {
LABEL_9:
    uint64_t v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  uint64_t v22 = (void *)*a3;
  *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  uint64_t v23 = (uint64_t *)(v22[6] + 16 * v11);
  *uint64_t v23 = v9;
  v23[1] = v8;
  *(void *)(v22[7] + 8 * v11) = v7;
  uint64_t v24 = v22[2];
  BOOL v15 = __OFADD__(v24, 1);
  uint64_t v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v38._unint64_t object = (void *)0x800000025FA3DA40;
    v38._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v38);
    _print_unlocked<A, B>(_:_:)();
    v39._uint64_t countAndFlagsBits = 39;
    v39._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v22[2] = v25;
  if (v6 != 1)
  {
    char v4 = a1 + 9;
    unint64_t v7 = 1;
    while (v7 < a1[2])
    {
      uint64_t v8 = *(v4 - 1);
      uint64_t v26 = *v4;
      uint64_t v9 = *(v4 - 2);
      swift_bridgeObjectRetain();
      if (!v8) {
        goto LABEL_23;
      }
      unint64_t v27 = (void *)*a3;
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
      uint64_t v30 = v27[2];
      BOOL v31 = (v29 & 1) == 0;
      BOOL v15 = __OFADD__(v30, v31);
      uint64_t v32 = v30 + v31;
      if (v15) {
        goto LABEL_25;
      }
      char v17 = v29;
      if (v27[3] < v32)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, 1);
        unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
        if ((v17 & 1) != (v33 & 1)) {
          goto LABEL_6;
        }
      }
      if (v17) {
        goto LABEL_9;
      }
      unint64_t v34 = (void *)*a3;
      *(void *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      unint64_t v35 = (uint64_t *)(v34[6] + 16 * v28);
      *unint64_t v35 = v9;
      v35[1] = v8;
      *(void *)(v34[7] + 8 * v28) = v26;
      uint64_t v36 = v34[2];
      BOOL v15 = __OFADD__(v36, 1);
      uint64_t v37 = v36 + 1;
      if (v15) {
        goto LABEL_26;
      }
      ++v7;
      void v34[2] = v37;
      v4 += 3;
      if (v6 == v7) {
        goto LABEL_23;
      }
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = *(void **)v4;
  int64_t v7 = *(void *)(*(void *)v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  Swift::Int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  uint64_t v16 = &v6[2 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = v6[2];
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v16 + 2);
    unint64_t v21 = &v6[2 * a2 + 4];
    if (v16 + 2 != v21 || result >= (char *)&v21[2 * v20]) {
      uint64_t result = (char *)memmove(result, v21, 16 * v20);
    }
    uint64_t v22 = v6[2];
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      v6[2] = v23;
LABEL_20:
      void *v16 = a3;
      v16[1] = a4;
      *(void *)uint64_t v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.Item>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  return v4;
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x25F982B64);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      char v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t specialized static EarleyParser.== infix(_:_:)(void *a1, void *a2)
{
  if (!specialized static Array<A>.== infix(_:_:)(*(void **)(a1[4] + 56), *(void **)(a2[4] + 56))) {
    return 0;
  }
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  if ((specialized static Array<A>.== infix(_:_:)(v4, v6) & 1) == 0) {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v5, v7);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore12EarleyParserC0H6SymbolOG_SSs5NeverOTg504_s19de6Core12gh56C4ItemV14getDescription7grammarSSAC0E7GrammarC_tFSSAC0E6I6OXEfU_AH0hS0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for TerminalSymbol(0);
  uint64_t v26 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (!v7) {
    return v8;
  }
  v25[1] = v2;
  uint64_t v30 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  uint64_t v8 = v30;
  uint64_t v10 = (unsigned char *)(a1 + 40);
  while (1)
  {
    unint64_t v11 = *((void *)v10 - 1);
    if (!*v10)
    {
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_18;
      }
      uint64_t v20 = *(void *)(v27 + 24);
      if (v11 >= *(void *)(v20 + 16)) {
        goto LABEL_19;
      }
      outlined init with copy of Grammar(v20+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v11, (uint64_t)v6, type metadata accessor for TerminalSymbol);
      uint64_t v18 = TerminalSymbol.description.getter();
      unint64_t v19 = v21;
      uint64_t result = _s15TokenGeneration6PromptV9DelimiterVWOhTm_0((uint64_t)v6, type metadata accessor for TerminalSymbol);
      goto LABEL_12;
    }
    if (*v10 != 1)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
      goto LABEL_12;
    }
    if ((v11 & 0x8000000000000000) != 0) {
      break;
    }
    uint64_t v12 = *(void *)(v27 + 16);
    if (v11 >= *(void *)(v12 + 16)) {
      goto LABEL_17;
    }
    uint64_t v13 = v12 + 16 * v11;
    uint64_t v15 = *(void *)(v13 + 32);
    int v14 = *(void **)(v13 + 40);
    uint64_t v28 = 60;
    unint64_t v29 = 0xE100000000000000;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v15;
    v16._unint64_t object = v14;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 62;
    v17._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = v28;
    unint64_t v19 = v29;
LABEL_12:
    uint64_t v30 = v8;
    unint64_t v23 = *(void *)(v8 + 16);
    unint64_t v22 = *(void *)(v8 + 24);
    if (v23 >= v22 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      uint64_t v8 = v30;
    }
    v10 += 16;
    *(void *)(v8 + 16) = v23 + 1;
    uint64_t v24 = v8 + 16 * v23;
    *(void *)(v24 + 32) = v18;
    *(void *)(v24 + 40) = v19;
    if (!--v7) {
      return v8;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void *specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  int64_t v7 = *(void **)v4;
  int64_t v8 = *(void *)(*(void *)v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v9 > v7[3] >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v7);
      int64_t v7 = result;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0) {
    goto LABEL_27;
  }
  uint64_t v15 = (char *)&v7[v14 + 4];
  Swift::String v16 = (char *)(a2 + 8 * a3);
  if (v16 < &v15[8 * v6] && v15 < &v16[8 * v6]) {
    goto LABEL_27;
  }
  uint64_t result = memcpy(v15, v16, 8 * v6);
  if (!v6)
  {
LABEL_22:
    *(void *)uint64_t v4 = v7;
    return result;
  }
  uint64_t v18 = v7[2];
  BOOL v19 = __OFADD__(v18, v6);
  uint64_t v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static EarleyParser.predictAndComplete(parserGrammar:chart:items:)(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v180 = *(void *)(a3 + 16);
  uint64_t v181 = *(void *)(a2 + 16);
  int64_t v4 = v181 + v180;
  if (__OFADD__(v181, v180)) {
    goto LABEL_198;
  }
  unint64_t v5 = a4;
  uint64_t v6 = a1[7];
  uint64_t v7 = a1[5];
  uint64_t v206 = MEMORY[0x263F8EE88];
  int64_t v8 = *a4;
  unint64_t v9 = (*a4)[2];
  if (!v9)
  {
LABEL_181:
    return swift_bridgeObjectRelease();
  }
  unint64_t v10 = 0;
  uint64_t v11 = v6 + 32;
  uint64_t v178 = a3 + 32;
  uint64_t v176 = v7;
  uint64_t v177 = a2 + 32;
  uint64_t v175 = v7 + 32;
  uint64_t v191 = v6;
  uint64_t v198 = v6 + 32;
  while (1)
  {
    if (v10 >= v9) {
      goto LABEL_190;
    }
    uint64_t v12 = &v8[3 * v10];
    unint64_t v13 = v12[4];
    if ((v13 & 0x8000000000000000) != 0) {
      goto LABEL_191;
    }
    if (v13 >= *(void *)(v6 + 16)) {
      goto LABEL_192;
    }
    uint64_t v15 = v12[5];
    int64_t v14 = v12[6];
    Swift::String v16 = (uint64_t *)(v11 + 16 * v13);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v199 = v18;
    if (v15 >= *(void *)(v17 + 16)) {
      break;
    }
    uint64_t v19 = v17 + 16 * v15;
    if (!*(unsigned char *)(v19 + 40)) {
      goto LABEL_5;
    }
    if (*(unsigned char *)(v19 + 40) != 1) {
      break;
    }
    unint64_t v20 = *(void *)(v19 + 32);
    if ((v20 & 0x8000000000000000) != 0) {
      goto LABEL_193;
    }
    uint64_t v21 = a1[9];
    if (v20 >= *(void *)(v21 + 16)) {
      goto LABEL_196;
    }
    uint64_t v22 = *(void *)(v21 + 8 * v20 + 32);
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      unint64_t v174 = v20;
      uint64_t v182 = v15;
      unint64_t v183 = v13;
      int64_t v185 = v14;
      unint64_t v189 = v10;
      uint64_t v201 = v22 + 32;
      swift_bridgeObjectRetain();
      unint64_t v24 = 0;
      uint64_t v193 = v22;
      uint64_t v187 = v23;
      while (1)
      {
        if (v24 >= *(void *)(v22 + 16)) {
          goto LABEL_189;
        }
        Swift::UInt v25 = *(void *)(v201 + 8 * v24);
        uint64_t v26 = *v5;
        unint64_t v27 = (*v5)[2];
        if (v27 > 9)
        {
          uint64_t v40 = v206;
          if (!*(void *)(v206 + 16))
          {
            Swift::UInt v196 = *(void *)(v201 + 8 * v24);
            unint64_t v200 = v24;
            v203 = v26 + 4;
            swift_bridgeObjectRetain();
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = v40 + 56;
              while (1)
              {
                uint64_t v43 = &v203[3 * v41];
                Swift::UInt v44 = *v43;
                Swift::UInt v45 = v43[1];
                Swift::UInt v46 = v43[2];
                ++v41;
                Hasher.init(_seed:)();
                Hasher._combine(_:)(v44);
                Hasher._combine(_:)(v45);
                Hasher._combine(_:)(v46);
                Swift::Int v47 = Hasher._finalize()();
                uint64_t v48 = -1 << *(unsigned char *)(v40 + 32);
                unint64_t v49 = v47 & ~v48;
                if (((*(void *)(v42 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
                  break;
                }
                uint64_t v50 = ~v48;
                while (1)
                {
                  uint64_t v51 = (uint64_t *)(*(void *)(v40 + 48) + 24 * v49);
                  uint64_t v52 = *v51;
                  uint64_t v53 = v51[1];
                  uint64_t v54 = v51[2];
                  BOOL v55 = v52 == v44 && v53 == v45;
                  if (v55 && v54 == v46) {
                    break;
                  }
                  unint64_t v49 = (v49 + 1) & v50;
                  if (((*(void *)(v42 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
                    goto LABEL_49;
                  }
                }
                if (v41 == v27) {
                  goto LABEL_67;
                }
              }
LABEL_49:
              int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              if (*(void *)(v40 + 24) <= *(void *)(v40 + 16))
              {
                if (isUniquelyReferenced_nonNull_native) {
                  specialized _NativeSet.resize(capacity:)();
                }
                else {
                  specialized _NativeSet.copyAndResize(capacity:)();
                }
                Hasher.init(_seed:)();
                Hasher._combine(_:)(v44);
                Hasher._combine(_:)(v45);
                Hasher._combine(_:)(v46);
                Swift::Int v58 = Hasher._finalize()();
                uint64_t v59 = -1 << *(unsigned char *)(v40 + 32);
                unint64_t v49 = v58 & ~v59;
                if ((*(void *)(v40 + 56 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49))
                {
                  uint64_t v60 = ~v59;
                  do
                  {
                    uint64_t v61 = (uint64_t *)(*(void *)(v40 + 48) + 24 * v49);
                    uint64_t v62 = *v61;
                    uint64_t v63 = v61[1];
                    uint64_t v64 = v61[2];
                    BOOL v65 = v62 == v44 && v63 == v45;
                    if (v65 && v64 == v46) {
                      goto LABEL_199;
                    }
                    unint64_t v49 = (v49 + 1) & v60;
                  }
                  while (((*(void *)(v40 + 56 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) != 0);
                }
              }
              else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized _NativeSet.copy()();
              }
              *(void *)(v40 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v49;
              uint64_t v67 = (Swift::UInt *)(*(void *)(v40 + 48) + 24 * v49);
              *uint64_t v67 = v44;
              v67[1] = v45;
              v67[2] = v46;
              uint64_t v68 = *(void *)(v40 + 16);
              BOOL v69 = __OFADD__(v68, 1);
              uint64_t v70 = v68 + 1;
              if (v69) {
                goto LABEL_188;
              }
              *(void *)(v40 + 16) = v70;
              swift_bridgeObjectRelease();
            }
            while (v41 != v27);
LABEL_67:
            uint64_t v206 = v40;
            swift_bridgeObjectRelease();
            int64_t v4 = v181 + v180;
            unint64_t v5 = a4;
            uint64_t v22 = v193;
            uint64_t v23 = v187;
            unint64_t v24 = v200;
            Swift::UInt v25 = v196;
            if (!*(void *)(v40 + 16)) {
              goto LABEL_78;
            }
          }
          Swift::UInt v71 = v25;
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v71);
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v4);
          Swift::Int v72 = Hasher._finalize()();
          Swift::UInt v25 = v71;
          uint64_t v73 = -1 << *(unsigned char *)(v40 + 32);
          unint64_t v74 = v72 & ~v73;
          if ((*(void *)(v40 + 56 + ((v74 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v74))
          {
            uint64_t v75 = ~v73;
            do
            {
              char v76 = (uint64_t *)(*(void *)(v40 + 48) + 24 * v74);
              uint64_t v77 = *v76;
              uint64_t v78 = v76[1];
              uint64_t v79 = v76[2];
              BOOL v80 = v77 == v71 && v78 == 0;
              if (v80 && v79 == v4) {
                goto LABEL_16;
              }
              unint64_t v74 = (v74 + 1) & v75;
            }
            while (((*(void *)(v40 + 56 + ((v74 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v74) & 1) != 0);
          }
LABEL_78:
          Swift::UInt v82 = v25;
          specialized Set._Variant.insert(_:)(v205, v25, 0, v4);
          unint64_t v83 = *v5;
          unint64_t v34 = v24;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v35 = v83;
          }
          else {
            unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83[2] + 1, 1, v83);
          }
          unint64_t v37 = v35[2];
          unint64_t v84 = v35[3];
          unint64_t v38 = v37 + 1;
          if (v37 >= v84 >> 1)
          {
            unint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v84 > 1), v37 + 1, 1, v35);
            Swift::UInt v39 = v82;
LABEL_87:
            unint64_t v35 = v86;
            goto LABEL_82;
          }
          Swift::UInt v39 = v82;
        }
        else
        {
          if (v27)
          {
            uint64_t v28 = v26 + 6;
            uint64_t v29 = (*v5)[2];
            do
            {
              BOOL v30 = *(v28 - 2) == v25 && *(v28 - 1) == 0;
              if (v30 && *v28 == v4) {
                goto LABEL_16;
              }
              v28 += 3;
            }
            while (--v29);
          }
          Swift::UInt v32 = *(void *)(v201 + 8 * v24);
          char v33 = *v5;
          unint64_t v34 = v24;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v35 = v33;
          }
          else {
            unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 + 1, 1, v33);
          }
          unint64_t v37 = v35[2];
          unint64_t v36 = v35[3];
          unint64_t v38 = v37 + 1;
          if (v37 >= v36 >> 1)
          {
            unint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
            Swift::UInt v39 = v32;
            goto LABEL_87;
          }
          Swift::UInt v39 = v32;
        }
LABEL_82:
        void v35[2] = v38;
        unint64_t v85 = &v35[3 * v37];
        v85[4] = v39;
        v85[5] = 0;
        v85[6] = v4;
        void *v5 = v35;
        unint64_t v24 = v34;
LABEL_16:
        ++v24;
        uint64_t v11 = v198;
        if (v24 == v23)
        {
          swift_bridgeObjectRelease();
          unint64_t v10 = v189;
          unint64_t v13 = v183;
          int64_t v14 = v185;
          uint64_t v15 = v182;
          unint64_t v20 = v174;
          break;
        }
      }
    }
    if ((int64_t)v20 >= *(void *)(v176 + 16)) {
      goto LABEL_197;
    }
    uint64_t v6 = v191;
    if (*(unsigned char *)(v175 + v20) == 1)
    {
      unint64_t v172 = v10;
      Array<A>.appendUnique(_:itemsSet:)(v13, v15 + 1, v14, &v206);
      unint64_t v10 = v172;
    }
LABEL_5:
    ++v10;
    int64_t v8 = *v5;
    unint64_t v9 = (*v5)[2];
    if (v10 >= v9) {
      goto LABEL_181;
    }
  }
  unint64_t v190 = v10;
  if (v14 < v4)
  {
    unint64_t v87 = v14 - v181;
    if (v14 >= v181)
    {
      if (v87 >= v180) {
        goto LABEL_195;
      }
      int64_t v8 = *(void **)(v178 + 8 * v87);
    }
    else
    {
      if (v14 < 0) {
        goto LABEL_194;
      }
      int64_t v8 = *(void **)(v177 + 8 * v14);
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v88 = v8[2];
  if (!v88)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    unint64_t v10 = v190;
    goto LABEL_5;
  }
  unint64_t v89 = 0;
  char v90 = v8 + 4;
  char v194 = v8;
  v195 = v8 + 4;
  uint64_t v197 = v8[2];
  while (v89 < v8[2])
  {
    char v95 = &v90[3 * v89];
    Swift::UInt v96 = *v95;
    if ((*v95 & 0x8000000000000000) != 0) {
      goto LABEL_185;
    }
    if (v96 >= *(void *)(v6 + 16)) {
      goto LABEL_186;
    }
    int64_t v97 = v95[1];
    uint64_t v98 = *(void *)(v11 + 16 * v96 + 8);
    if (v97 >= *(void *)(v98 + 16)) {
      goto LABEL_99;
    }
    uint64_t v99 = v98 + 16 * v97;
    if (*(unsigned char *)(v99 + 40) != 1 || *(void *)(v99 + 32) != v199) {
      goto LABEL_99;
    }
    Swift::UInt v101 = v95[2];
    Swift::UInt v102 = v97 + 1;
    unint64_t v103 = *v5;
    unint64_t v104 = (*v5)[2];
    if (v104 <= 9)
    {
      if (v104)
      {
        uint64_t v105 = v103 + 6;
        uint64_t v106 = (*v5)[2];
        do
        {
          BOOL v107 = *(v105 - 2) == v96 && *(v105 - 1) == v102;
          if (v107 && *v105 == v101) {
            goto LABEL_99;
          }
          v105 += 3;
        }
        while (--v106);
      }
      uint64_t v109 = (*v5)[2];
      Swift::UInt v110 = v102;
      uint64_t v111 = v6;
      unint64_t v112 = v89;
      char v113 = v103;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v114 = v113;
      }
      else {
        uint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109 + 1, 1, v113);
      }
      unint64_t v116 = v114[2];
      unint64_t v115 = v114[3];
      char v90 = v195;
      uint64_t v88 = v197;
      if (v116 >= v115 >> 1)
      {
        uint64_t v171 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v115 > 1), v116 + 1, 1, v114);
        Swift::UInt v117 = v110;
        Swift::UInt v91 = v101;
        char v90 = v195;
        uint64_t v88 = v197;
        unint64_t v89 = v112;
        uint64_t v114 = v171;
      }
      else
      {
        unint64_t v89 = v112;
        Swift::UInt v91 = v101;
        Swift::UInt v117 = v110;
      }
      uint64_t v6 = v111;
      v114[2] = v116 + 1;
      uint64_t v118 = &v114[3 * v116];
      v118[4] = v96;
      v118[5] = v117;
      uint64_t v94 = v118 + 6;
      unint64_t v5 = a4;
LABEL_98:
      *uint64_t v94 = v91;
      void *v5 = v114;
      int64_t v8 = v194;
      goto LABEL_99;
    }
    uint64_t v204 = (*v5)[2];
    uint64_t v119 = v206;
    if (*(void *)(v206 + 16)) {
      goto LABEL_160;
    }
    Swift::UInt v184 = v97 + 1;
    Swift::UInt v186 = v95[2];
    unint64_t v188 = v89;
    char v202 = v103 + 4;
    swift_bridgeObjectRetain();
    uint64_t v120 = 0;
    do
    {
      uint64_t v121 = v119 + 56;
      while (1)
      {
        char v122 = &v202[3 * v120];
        Swift::UInt v124 = *v122;
        Swift::UInt v123 = v122[1];
        Swift::UInt v125 = v122[2];
        ++v120;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v124);
        Hasher._combine(_:)(v123);
        Hasher._combine(_:)(v125);
        Swift::Int v126 = Hasher._finalize()();
        uint64_t v127 = -1 << *(unsigned char *)(v119 + 32);
        unint64_t v128 = v126 & ~v127;
        if (((*(void *)(v121 + ((v128 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v128) & 1) == 0) {
          break;
        }
        uint64_t v129 = ~v127;
        while (1)
        {
          int64_t v130 = (uint64_t *)(*(void *)(v119 + 48) + 24 * v128);
          uint64_t v131 = *v130;
          uint64_t v132 = v130[1];
          uint64_t v133 = v130[2];
          BOOL v134 = v131 == v124 && v132 == v123;
          if (v134 && v133 == v125) {
            break;
          }
          unint64_t v128 = (v128 + 1) & v129;
          if (((*(void *)(v121 + ((v128 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v128) & 1) == 0) {
            goto LABEL_141;
          }
        }
        if (v120 == v204) {
          goto LABEL_159;
        }
      }
LABEL_141:
      int v136 = swift_isUniquelyReferenced_nonNull_native();
      if (*(void *)(v119 + 24) <= *(void *)(v119 + 16))
      {
        if (v136) {
          specialized _NativeSet.resize(capacity:)();
        }
        else {
          specialized _NativeSet.copyAndResize(capacity:)();
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v124);
        Hasher._combine(_:)(v123);
        Hasher._combine(_:)(v125);
        Swift::Int v137 = Hasher._finalize()();
        uint64_t v138 = -1 << *(unsigned char *)(v119 + 32);
        unint64_t v128 = v137 & ~v138;
        if ((*(void *)(v119 + 56 + ((v128 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v128))
        {
          uint64_t v139 = ~v138;
          do
          {
            uint64_t v140 = (uint64_t *)(*(void *)(v119 + 48) + 24 * v128);
            uint64_t v141 = *v140;
            uint64_t v142 = v140[1];
            uint64_t v143 = v140[2];
            BOOL v144 = v141 == v124 && v142 == v123;
            if (v144 && v143 == v125) {
              goto LABEL_199;
            }
            unint64_t v128 = (v128 + 1) & v139;
          }
          while (((*(void *)(v119 + 56 + ((v128 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v128) & 1) != 0);
        }
      }
      else if ((v136 & 1) == 0)
      {
        specialized _NativeSet.copy()();
      }
      *(void *)(v119 + ((v128 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v128;
      unint64_t v146 = (Swift::UInt *)(*(void *)(v119 + 48) + 24 * v128);
      *unint64_t v146 = v124;
      v146[1] = v123;
      v146[2] = v125;
      uint64_t v147 = *(void *)(v119 + 16);
      BOOL v69 = __OFADD__(v147, 1);
      uint64_t v148 = v147 + 1;
      if (v69) {
        goto LABEL_187;
      }
      *(void *)(v119 + 16) = v148;
      swift_bridgeObjectRelease();
    }
    while (v120 != v204);
LABEL_159:
    uint64_t v206 = v119;
    swift_bridgeObjectRelease();
    int64_t v4 = v181 + v180;
    unint64_t v5 = a4;
    uint64_t v6 = v191;
    uint64_t v11 = v198;
    int64_t v8 = v194;
    Swift::UInt v101 = v186;
    unint64_t v89 = v188;
    Swift::UInt v102 = v184;
    if (!*(void *)(v119 + 16)) {
      goto LABEL_170;
    }
LABEL_160:
    uint64_t v149 = v6;
    unint64_t v150 = v89;
    Swift::UInt v151 = v102;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v96);
    Hasher._combine(_:)(v151);
    Hasher._combine(_:)(v101);
    Swift::Int v152 = Hasher._finalize()();
    Swift::UInt v102 = v151;
    char v90 = v195;
    uint64_t v88 = v197;
    unint64_t v89 = v150;
    uint64_t v6 = v149;
    int64_t v4 = v181 + v180;
    unint64_t v5 = a4;
    uint64_t v153 = -1 << *(unsigned char *)(v119 + 32);
    unint64_t v154 = v152 & ~v153;
    if (((*(void *)(v119 + 56 + ((v154 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v154) & 1) == 0)
    {
LABEL_170:
      uint64_t v162 = v5;
      unint64_t v163 = v89;
      Swift::UInt v164 = v102;
      Swift::UInt v165 = v101;
      specialized Set._Variant.insert(_:)(v205, v96, v102, v101);
      uint64_t v166 = v162;
      uint64_t v167 = *v162;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v114 = v167;
      }
      else {
        uint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v167[2] + 1, 1, v167);
      }
      unint64_t v169 = v114[2];
      unint64_t v168 = v114[3];
      char v90 = v195;
      uint64_t v88 = v197;
      if (v169 < v168 >> 1)
      {
        unint64_t v89 = v163;
        Swift::UInt v91 = v165;
        Swift::UInt v92 = v164;
      }
      else
      {
        uint64_t v170 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v168 > 1), v169 + 1, 1, v114);
        Swift::UInt v92 = v164;
        Swift::UInt v91 = v165;
        char v90 = v195;
        uint64_t v88 = v197;
        unint64_t v89 = v163;
        uint64_t v114 = v170;
      }
      uint64_t v6 = v191;
      v114[2] = v169 + 1;
      BOOL v93 = &v114[3 * v169];
      v93[4] = v96;
      v93[5] = v92;
      uint64_t v94 = v93 + 6;
      unint64_t v5 = v166;
      goto LABEL_98;
    }
    uint64_t v155 = ~v153;
    while (1)
    {
      uint64_t v156 = (uint64_t *)(*(void *)(v119 + 48) + 24 * v154);
      uint64_t v157 = *v156;
      uint64_t v158 = v156[1];
      uint64_t v159 = v156[2];
      BOOL v160 = v157 == v96 && v158 == v102;
      if (v160 && v159 == v101) {
        break;
      }
      unint64_t v154 = (v154 + 1) & v155;
      if (((*(void *)(v119 + 56 + ((v154 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v154) & 1) == 0) {
        goto LABEL_170;
      }
    }
LABEL_99:
    if (++v89 == v88) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized static EarleyParser.createRootItems(parserGrammar:)(void *result)
{
  unint64_t v1 = result[6];
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v2 = result;
  uint64_t v3 = result[9];
  if (v1 >= *(void *)(v3 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v4 = *(void *)(v3 + 8 * v1 + 32);
  int64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  if (v5)
  {
    int64_t v14 = (void *)MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v7 = 0;
    uint64_t v6 = v14;
    uint64_t v8 = v14[2];
    uint64_t v9 = 3 * v8;
    do
    {
      uint64_t v10 = *(void *)(v4 + 32 + 8 * v7);
      int64_t v14 = v6;
      unint64_t v11 = v6[3];
      uint64_t v12 = v8 + v7 + 1;
      if (v8 + v7 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v8 + v7 + 1, 1);
        uint64_t v6 = v14;
      }
      ++v7;
      v6[2] = v12;
      unint64_t v13 = &v6[v9];
      v13[5] = 0;
      v13[6] = 0;
      v13[4] = v10;
      v9 += 3;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
  }
  int64_t v14 = v6;
  specialized static EarleyParser.predictAndComplete(parserGrammar:chart:items:)(v2, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], &v14);
  return v14;
}

unint64_t lazy protocol witness table accessor for type EarleyParser.State and conformance EarleyParser.State()
{
  unint64_t result = lazy protocol witness table cache variable for type EarleyParser.State and conformance EarleyParser.State;
  if (!lazy protocol witness table cache variable for type EarleyParser.State and conformance EarleyParser.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EarleyParser.State and conformance EarleyParser.State);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in EarleyParser(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type EarleyParser and conformance EarleyParser, a2, (void (*)(uint64_t))type metadata accessor for EarleyParser);
}

uint64_t type metadata accessor for EarleyParser()
{
  return self;
}

uint64_t method lookup function for EarleyParser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EarleyParser);
}

ValueMetadata *type metadata accessor for EarleyParser.State()
{
  return &type metadata for EarleyParser.State;
}

uint64_t destroy for EarleyParser.ParserValidatorCache()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for EarleyParser.ParserValidatorCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EarleyParser.ParserValidatorCache(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for EarleyParser.ParserValidatorCache(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EarleyParser.ParserValidatorCache(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EarleyParser.ParserValidatorCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EarleyParser.ParserValidatorCache()
{
  return &type metadata for EarleyParser.ParserValidatorCache;
}

uint64_t getEnumTagSinglePayload for EarleyParser.Item(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EarleyParser.Item(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for EarleyParser.Item()
{
  return &type metadata for EarleyParser.Item;
}

ValueMetadata *type metadata accessor for EarleyParser.ParserRule()
{
  return &type metadata for EarleyParser.ParserRule;
}

uint64_t initializeBufferWithCopyOfBuffer for EarleyParser.ParserTerminalSymbol(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of EarleyParser.ParserTerminalSymbol(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of EarleyParser.ParserTerminalSymbol(id result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

void destroy for EarleyParser.ParserTerminalSymbol(uint64_t a1)
{
}

void outlined consume of EarleyParser.ParserTerminalSymbol(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t assignWithCopy for EarleyParser.ParserTerminalSymbol(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of EarleyParser.ParserTerminalSymbol(*(id *)a2, v4);
  int64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of EarleyParser.ParserTerminalSymbol(v5, v6);
  return a1;
}

uint64_t assignWithTake for EarleyParser.ParserTerminalSymbol(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  int64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of EarleyParser.ParserTerminalSymbol(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EarleyParser.ParserTerminalSymbol(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EarleyParser.ParserTerminalSymbol(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for EarleyParser.ParserTerminalSymbol(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for EarleyParser.ParserTerminalSymbol(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EarleyParser.ParserTerminalSymbol()
{
  return &type metadata for EarleyParser.ParserTerminalSymbol;
}

uint64_t destroy for EarleyParser.Chart()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for EarleyParser.Chart(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EarleyParser.Chart(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for EarleyParser.Chart(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EarleyParser.Chart()
{
  return &type metadata for EarleyParser.Chart;
}

unint64_t lazy protocol witness table accessor for type EarleyParser.Chart and conformance EarleyParser.Chart()
{
  unint64_t result = lazy protocol witness table cache variable for type EarleyParser.Chart and conformance EarleyParser.Chart;
  if (!lazy protocol witness table cache variable for type EarleyParser.Chart and conformance EarleyParser.Chart)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EarleyParser.Chart and conformance EarleyParser.Chart);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EarleyParser.ParserRule and conformance EarleyParser.ParserRule()
{
  unint64_t result = lazy protocol witness table cache variable for type EarleyParser.ParserRule and conformance EarleyParser.ParserRule;
  if (!lazy protocol witness table cache variable for type EarleyParser.ParserRule and conformance EarleyParser.ParserRule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EarleyParser.ParserRule and conformance EarleyParser.ParserRule);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EarleyParser.Item and conformance EarleyParser.Item()
{
  unint64_t result = lazy protocol witness table cache variable for type EarleyParser.Item and conformance EarleyParser.Item;
  if (!lazy protocol witness table cache variable for type EarleyParser.Item and conformance EarleyParser.Item)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EarleyParser.Item and conformance EarleyParser.Item);
  }
  return result;
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of TerminalSymbol(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Grammar(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t specialized static EarleyParser.scan(parserGrammar:element:inputState:scanItems:)(uint64_t result, uint64_t a2, uint64_t *a3, void **a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*a3 + 16);
  if (!v5) {
    return result;
  }
  uint64_t v8 = *(void *)(result + 32);
  uint64_t v9 = *(void *)(result + 56);
  uint64_t v25 = v8 + 32;
  unint64_t result = swift_bridgeObjectRetain();
  uint64_t v22 = v8;
  uint64_t v10 = (uint64_t *)(v4 + 48);
  unsigned int v23 = a2;
  unint64_t v24 = a4;
  do
  {
    unint64_t v12 = *(v10 - 2);
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return result;
    }
    if (v12 >= *(void *)(v9 + 16)) {
      goto LABEL_24;
    }
    uint64_t v13 = *(v10 - 1);
    uint64_t v14 = *(void *)(v9 + 32 + 16 * v12 + 8);
    if (v13 < *(void *)(v14 + 16))
    {
      uint64_t v15 = v14 + 16 * v13;
      if (!*(unsigned char *)(v15 + 40))
      {
        unint64_t v16 = *(void *)(v15 + 32);
        if ((v16 & 0x8000000000000000) != 0) {
          goto LABEL_25;
        }
        if (v16 >= *(void *)(v8 + 16)) {
          goto LABEL_26;
        }
        uint64_t v17 = *v10;
        uint64_t v18 = v25 + 16 * v16;
        unint64_t result = *(void *)v18;
        if (*(unsigned char *)(v18 + 8))
        {
          unint64_t result = (uint64_t)objc_msgSend((id)result, sel_longCharacterIsMember_, a2);
          if (!result) {
            goto LABEL_4;
          }
        }
        else if (result != a2)
        {
          goto LABEL_4;
        }
        uint64_t v19 = *a4;
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
          uint64_t v19 = (void *)result;
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
          uint64_t v19 = (void *)result;
        }
        v19[2] = v21 + 1;
        unint64_t v11 = &v19[3 * v21];
        _DWORD v11[4] = v12;
        v11[5] = v13 + 1;
        v11[6] = v17;
        *unint64_t v24 = v19;
        a4 = (void **)v24;
        a2 = v23;
        uint64_t v8 = v22;
      }
    }
LABEL_4:
    v10 += 3;
    --v5;
  }
  while (v5);
  return swift_bridgeObjectRelease();
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    unint64_t result = &v4[24 * a1 + 32];
    uint64_t v15 = &v4[24 * a2 + 32];
    if (a1 != a2 || result >= &v15[24 * v14]) {
      unint64_t result = (char *)memmove(result, v15, 24 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    unint64_t result = &v4[4 * a1 + 32];
    uint64_t v15 = &v4[4 * a2 + 32];
    if (a1 != a2 || result >= &v15[4 * v14]) {
      unint64_t result = (char *)memmove(result, v15, 4 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized EarleyParser.ParserValidatorCache.parse(_:_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void **)(v1 + 32);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v6 = *v4;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, v6[2]);
  }
  else
  {
    *uint64_t v4 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v6[3] >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = *(void **)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  int64_t v9 = *(void **)(v2 + 16);
  uint64_t result = EarleyParser.Chart.lastState.getter(v7, (uint64_t)v9, &v30);
  if (v30)
  {
    uint64_t v29 = v30;
    uint64_t v11 = swift_retain();
    specialized static EarleyParser.scan(parserGrammar:element:inputState:scanItems:)(v11, a1, &v29, v4);
    swift_bridgeObjectRelease();
    swift_release();
    if ((*v4)[2])
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized static EarleyParser.predictAndComplete(parserGrammar:chart:items:)(v8, v7, (uint64_t)v9, v4);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v12 = *v4;
      int64_t v13 = (*v4)[2];
      uint64_t v14 = MEMORY[0x263F8EE78];
      if (v13)
      {
        uint64_t v30 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
        uint64_t v15 = 0;
        uint64_t v14 = v30;
        unint64_t v16 = *(void *)(v30 + 16);
        uint64_t v17 = 24 * v16;
        do
        {
          long long v18 = *(_OWORD *)&v12[v15 + 4];
          uint64_t v19 = v12[v15 + 6];
          uint64_t v30 = v14;
          unint64_t v20 = *(void *)(v14 + 24);
          unint64_t v21 = v16 + 1;
          if (v16 >= v20 >> 1)
          {
            long long v28 = v18;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v16 + 1, 1);
            long long v18 = v28;
            uint64_t v14 = v30;
          }
          *(void *)(v14 + 16) = v21;
          uint64_t v22 = v14 + v17 + v15 * 8;
          *(_OWORD *)(v22 + 32) = v18;
          *(void *)(v22 + 48) = v19;
          v15 += 3;
          unint64_t v16 = v21;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v14 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v24 = v9[2];
    unint64_t v23 = v9[3];
    if (v24 >= v23 >> 1) {
      int64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v9);
    }
    v9[2] = v24 + 1;
    v9[v24 + 4] = v14;
    swift_bridgeObjectRelease();
    *(void *)(v2 + 16) = v9;
    uint64_t v25 = *(void *)(v2 + 24);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1, (char *)v25);
      uint64_t v25 = result;
    }
    unint64_t v27 = *(void *)(v25 + 16);
    unint64_t v26 = *(void *)(v25 + 24);
    if (v27 >= v26 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, (char *)v25);
      uint64_t v25 = result;
    }
    *(void *)(v25 + 16) = v27 + 1;
    *(_DWORD *)(v25 + 4 * v27 + 32) = a1;
    *(void *)(v2 + 24) = v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (char *)&v4[a2 + 4];
    if (a1 != a2 || &v4[a1 + 4] >= (void *)&v16[8 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[a1 + 4], v16, 8 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of (key: TerminalSymbol, value: Int)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: TerminalSymbol, value: Int)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of TerminalSymbol(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TerminalSymbol(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for EarleyParser.ParserSymbol()
{
  return &type metadata for EarleyParser.ParserSymbol;
}

unint64_t lazy protocol witness table accessor for type EarleyParser.ParserSymbol and conformance EarleyParser.ParserSymbol()
{
  unint64_t result = lazy protocol witness table cache variable for type EarleyParser.ParserSymbol and conformance EarleyParser.ParserSymbol;
  if (!lazy protocol witness table cache variable for type EarleyParser.ParserSymbol and conformance EarleyParser.ParserSymbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EarleyParser.ParserSymbol and conformance EarleyParser.ParserSymbol);
  }
  return result;
}

uint64_t GenerationError.errorDescription.getter()
{
  uint64_t v1 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v4 - 8);
  char v6 = (Swift::String *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for GenerationError();
  MEMORY[0x270FA5388](v7);
  int64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of GenerationError(v0, (uint64_t)v9);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
      uint64_t v14 = *(void *)&v9[*(int *)(v13 + 48)];
      uint64_t v15 = *(void *)&v9[*(int *)(v13 + 64)];
      outlined init with take of Prompt.SpecialToken((uint64_t)v9, (uint64_t)v6);
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v16._uint64_t countAndFlagsBits = 0xD000000000000016;
      v16._unint64_t object = (void *)0x800000025FA3DA60;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*v6);
      v17._uint64_t countAndFlagsBits = 0x6F697469736F7020;
      v17._unint64_t object = (void *)0xEA0000000000206ELL;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
      uint64_t v22 = v14;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      v18._unint64_t object = (void *)0x800000025FA3DA80;
      v18._uint64_t countAndFlagsBits = 0xD000000000000014;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
      uint64_t v22 = v15;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      v19._uint64_t countAndFlagsBits = 0;
      v19._unint64_t object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
      String.LocalizationValue.init(stringInterpolation:)();
      static Locale.current.getter();
      goto LABEL_5;
    case 2u:
    case 3u:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v12 = String.init(localized:table:bundle:locale:comment:)();
      break;
    default:
      outlined init with take of Prompt.SpecialToken((uint64_t)v9, (uint64_t)v6);
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v10._uint64_t countAndFlagsBits = 0xD000000000000026;
      v10._unint64_t object = (void *)0x800000025FA3DBC0;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v10);
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*v6);
      v11._uint64_t countAndFlagsBits = 46;
      v11._unint64_t object = (void *)0xE100000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
      String.LocalizationValue.init(stringInterpolation:)();
      static Locale.current.getter();
LABEL_5:
      uint64_t v12 = String.init(localized:table:bundle:locale:comment:)();
      outlined destroy of Prompt.SpecialToken((uint64_t)v6, type metadata accessor for Prompt.SpecialToken);
      break;
  }
  return v12;
}

uint64_t type metadata accessor for GenerationError()
{
  uint64_t result = type metadata singleton initialization cache for GenerationError;
  if (!type metadata singleton initialization cache for GenerationError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of GenerationError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenerationError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Prompt.SpecialToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt.SpecialToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GenerationError and conformance GenerationError()
{
  unint64_t result = lazy protocol witness table cache variable for type GenerationError and conformance GenerationError;
  if (!lazy protocol witness table cache variable for type GenerationError and conformance GenerationError)
  {
    type metadata accessor for GenerationError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError);
  }
  return result;
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance GenerationError()
{
  return MEMORY[0x270EEE930]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance GenerationError()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance GenerationError()
{
  return MEMORY[0x270EEE920]();
}

uint64_t *initializeBufferWithCopyOfBuffer for GenerationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      uint64_t v18 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v19 = *(int *)(v18 + 20);
      __dsta = (char *)a1 + v19;
      unint64_t v20 = (char *)a2 + v19;
      uint64_t v21 = type metadata accessor for Locale();
      uint64_t v22 = *(void *)(v21 - 8);
      unint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      swift_bridgeObjectRetain();
      if (v23(v20, 1, v21))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(__dsta, v20, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dsta, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dsta, 0, 1, v21);
      }
      uint64_t v29 = *(int *)(v18 + 24);
      uint64_t v30 = (uint64_t *)((char *)a1 + v29);
      uint64_t v31 = (uint64_t *)((char *)a2 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      swift_bridgeObjectRetain();
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
      *(uint64_t *)((char *)a1 + *(int *)(v33 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v33 + 48));
      *(uint64_t *)((char *)a1 + *(int *)(v33 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v33 + 64));
      goto LABEL_14;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v10 = *(int *)(v9 + 20);
      __dst = (char *)a1 + v10;
      Swift::String v11 = (char *)a2 + v10;
      uint64_t v12 = type metadata accessor for Locale();
      uint64_t v13 = *(void *)(v12 - 8);
      uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
      swift_bridgeObjectRetain();
      if (v14(v11, 1, v12))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
      }
      uint64_t v25 = *(int *)(v9 + 24);
      unint64_t v26 = (uint64_t *)((char *)a1 + v25);
      unint64_t v27 = (uint64_t *)((char *)a2 + v25);
      uint64_t v28 = v27[1];
      *unint64_t v26 = *v27;
      v26[1] = v28;
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for GenerationError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + *(int *)(type metadata accessor for Prompt.SpecialToken(0) + 20);
    uint64_t v4 = type metadata accessor for Locale();
    uint64_t v5 = *(void *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for GenerationError(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v15 = a2[1];
    *a1 = *a2;
    a1[1] = v15;
    uint64_t v16 = type metadata accessor for Prompt.SpecialToken(0);
    uint64_t v17 = *(int *)(v16 + 20);
    __dsta = (char *)a1 + v17;
    uint64_t v18 = (char *)a2 + v17;
    uint64_t v19 = type metadata accessor for Locale();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(__dsta, v18, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dsta, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dsta, 0, 1, v19);
    }
    uint64_t v27 = *(int *)(v16 + 24);
    uint64_t v28 = (void *)((char *)a1 + v27);
    uint64_t v29 = (void *)((char *)a2 + v27);
    uint64_t v30 = v29[1];
    void *v28 = *v29;
    v28[1] = v30;
    swift_bridgeObjectRetain();
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
    *(void *)((char *)a1 + *(int *)(v31 + 48)) = *(void *)((char *)a2 + *(int *)(v31 + 48));
    *(void *)((char *)a1 + *(int *)(v31 + 64)) = *(void *)((char *)a2 + *(int *)(v31 + 64));
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = type metadata accessor for Prompt.SpecialToken(0);
    uint64_t v9 = *(int *)(v8 + 20);
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for Locale();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v23 = *(int *)(v8 + 24);
    uint64_t v24 = (void *)((char *)a1 + v23);
    uint64_t v25 = (void *)((char *)a2 + v23);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain();
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for GenerationError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Prompt.SpecialToken((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for GenerationError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v14 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v15 = *(int *)(v14 + 20);
      __dsta = (char *)a1 + v15;
      uint64_t v16 = (char *)a2 + v15;
      uint64_t v17 = type metadata accessor for Locale();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      swift_bridgeObjectRetain();
      if (v19(v16, 1, v17))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(__dsta, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dsta, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dsta, 0, 1, v17);
      }
      uint64_t v24 = *(int *)(v14 + 24);
      uint64_t v25 = (void *)((char *)a1 + v24);
      uint64_t v26 = (void *)((char *)a2 + v24);
      *uint64_t v25 = *v26;
      v25[1] = v26[1];
      swift_bridgeObjectRetain();
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
      *(void *)((char *)a1 + *(int *)(v27 + 48)) = *(void *)((char *)a2 + *(int *)(v27 + 48));
      *(void *)((char *)a1 + *(int *)(v27 + 64)) = *(void *)((char *)a2 + *(int *)(v27 + 64));
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v8 = *(int *)(v7 + 20);
      __dst = (char *)a1 + v8;
      uint64_t v9 = (char *)a2 + v8;
      uint64_t v10 = type metadata accessor for Locale();
      uint64_t v11 = *(void *)(v10 - 8);
      uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      swift_bridgeObjectRetain();
      if (v12(v9, 1, v10))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
      }
      uint64_t v21 = *(int *)(v7 + 24);
      uint64_t v22 = (void *)((char *)a1 + v21);
      uint64_t v23 = (void *)((char *)a2 + v21);
      *uint64_t v22 = *v23;
      v22[1] = v23[1];
      swift_bridgeObjectRetain();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t outlined destroy of Prompt.SpecialToken(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for GenerationError(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v14 = type metadata accessor for Prompt.SpecialToken(0);
    uint64_t v15 = *(int *)(v14 + 20);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Locale();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v14 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v14 + 24));
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
    *(void *)((char *)a1 + *(int *)(v21 + 48)) = *(void *)((char *)a2 + *(int *)(v21 + 48));
    *(void *)((char *)a1 + *(int *)(v21 + 64)) = *(void *)((char *)a2 + *(int *)(v21 + 64));
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
    uint64_t v8 = *(int *)(v7 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Locale();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for GenerationError(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Prompt.SpecialToken((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for GenerationError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v14 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v15 = *(int *)(v14 + 20);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for Locale();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v14 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v14 + 24));
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
      *(void *)((char *)a1 + *(int *)(v21 + 48)) = *(void *)((char *)a2 + *(int *)(v21 + 48));
      *(void *)((char *)a1 + *(int *)(v21 + 64)) = *(void *)((char *)a2 + *(int *)(v21 + 64));
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Locale();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GenerationError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for GenerationError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for GenerationError()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for GenerationError()
{
  uint64_t result = type metadata accessor for Prompt.SpecialToken(319);
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout3();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for GenerationOverrides(id *a1)
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for GenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenerationOverrides(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenerationOverrides(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenerationOverrides()
{
  return &type metadata for GenerationOverrides;
}

uint64_t specialized static GenerationOverrides.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t *__return_ptr, id);
  int v4;
  void (*v5)(uint64_t *__return_ptr, id);
  id v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  id v11;
  unsigned int v12;
  uint64_t v14;
  unsigned __int8 v15;

  uint64_t v2 = *(void **)a2;
  long long v3 = *(void (**)(uint64_t *__return_ptr, id))(a2 + 24);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40) == 1)
  {
    uint64_t v5 = *(void (**)(uint64_t *__return_ptr, id))(a1 + 24);
    id v6 = *(id *)a1;
    swift_bridgeObjectRetain();
    swift_retain();
    v5(&v14, v6);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v7 = v14;
    uint64_t v8 = v15;
    if (!v4)
    {
LABEL_3:
      uint64_t v9 = 0;
      uint64_t v10 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 1;
    if (!*(unsigned char *)(a2 + 40)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  v3(&v14, v11);
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v9 = v14;
  uint64_t v10 = v15;
LABEL_6:
  uint64_t v12 = (v7 == v9) & ~v10;
  if (v8) {
    return v10;
  }
  else {
    return v12;
  }
}

uint64_t static CharacterSet.swiftIdentifierHead.getter()
{
  CharacterSet.init(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  v0._unint64_t object = (void *)0x800000025FA3DC40;
  v0._uint64_t countAndFlagsBits = 0x100000000000001FLL;
  CharacterSet.insert(charactersIn:)(v0);
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  v1._uint64_t countAndFlagsBits = 9732578;
  v1._unint64_t object = (void *)0xA300000000000000;
  CharacterSet.insert(charactersIn:)(v1);
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  return CharacterSet.insert(charactersIn:)();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySSGSay19TokenGenerationCore7GrammarVGG_AI6ChoiceVs5NeverOTg506_sSS19fg5Core7i4VAA6j17VIggnr_SS_ACtAEs5k157OIegnrzr_TR04_s19ab5Core7d104V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29GenerativeFunctionsFoundation0B6SchemaO6E30VG_SDyAjCGztFZAaKVSS_R16XEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Grammar));
  uint64_t v6 = MEMORY[0x270FA5388](v76);
  *(void *)&long long v73 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v67 = (uint64_t **)((char *)&v66 - v9);
  MEMORY[0x270FA5388](v8);
  uint64_t v66 = (uint64_t *)((char *)&v66 - v10);
  unint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(void *)(a2 + 16);
  if (v12 >= v11) {
    int64_t v13 = *(void *)(a1 + 16);
  }
  else {
    int64_t v13 = *(void *)(a2 + 16);
  }
  uint64_t v84 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  uint64_t v69 = a1;
  uint64_t v68 = a2;
  unint64_t v74 = v12;
  unint64_t v75 = v11;
  if (v13)
  {
    uint64_t v14 = *(void *)(type metadata accessor for Grammar(0) - 8);
    uint64_t v71 = a2 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v72 = v14;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    uint64_t v17 = (void **)(a1 + 40);
    long long v70 = xmmword_25FA357B0;
    int64_t v77 = v13;
    uint64_t v18 = (uint64_t *)v73;
    while (v11 != v16)
    {
      if (v12 == v16) {
        goto LABEL_30;
      }
      BOOL v80 = v17;
      uint64_t v81 = v3;
      uint64_t v19 = (uint64_t)*(v17 - 1);
      uint64_t v20 = *v17;
      uint64_t v21 = v71 + *(void *)(v72 + 72) * v16;
      uint64_t v22 = (uint64_t)v18 + *(int *)(v76 + 48);
      uint64_t *v18 = v19;
      v18[1] = (uint64_t)v20;
      _s19TokenGenerationCore7GrammarVWOcTm_0(v21, v22, type metadata accessor for Grammar);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
      uint64_t v23 = *(void *)(type metadata accessor for Symbol(0) - 8);
      uint64_t v24 = *(void *)(v23 + 72);
      unint64_t v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      uint64_t v78 = 2 * v24;
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v70;
      uint64_t v79 = v26;
      uint64_t v27 = (unint64_t *)(v26 + v25);
      unint64_t v82 = 0;
      unint64_t v83 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v82 = 0x3A2265707974227BLL;
      unint64_t v83 = 0xEA00000000002220;
      v28._uint64_t countAndFlagsBits = v19;
      v28._unint64_t object = v20;
      String.append(_:)(v28);
      v29._uint64_t countAndFlagsBits = 0x756C617622202C22;
      v29._unint64_t object = (void *)0xEC000000203A2265;
      String.append(_:)(v29);
      uint64_t v30 = v81;
      unint64_t *v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(v82, v83);
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRelease();
      uint64_t v31 = (unint64_t *)((char *)v27 + v24);
      uint64_t v32 = *(void *)(v22 + 16);
      *uint64_t v31 = *(void *)(v22 + 8);
      v31[1] = v32;
      swift_storeEnumTagMultiPayload();
      uint64_t v33 = (unint64_t *)((char *)v27 + v78);
      swift_bridgeObjectRetain();
      uint64_t v3 = v30;
      *uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x7DuLL, 0xE100000000000000);
      swift_storeEnumTagMultiPayload();
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v18, &demangling cache variable for type metadata for (String, Grammar));
      uint64_t v34 = v84;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
        uint64_t v34 = v84;
      }
      int64_t v13 = v77;
      unint64_t v36 = *(void *)(v34 + 16);
      unint64_t v35 = *(void *)(v34 + 24);
      unint64_t v12 = v74;
      unint64_t v11 = v75;
      if (v36 >= v35 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v34 = v84;
      }
      ++v16;
      *(void *)(v34 + 16) = v36 + 1;
      *(void *)(v34 + 8 * v36 + 32) = v79;
      uint64_t v17 = v80 + 2;
      if (v13 == v16) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
  }
  else
  {
    uint64_t v34 = v84;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_15:
    uint64_t v81 = v3;
    if (v11 <= v12)
    {
LABEL_28:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v34;
    }
    if (v13 <= (uint64_t)v12) {
      int64_t v37 = v12;
    }
    else {
      int64_t v37 = v13;
    }
    uint64_t v78 = v37;
    unint64_t v38 = (uint64_t *)(v69 + 16 * v13 + 40);
    long long v73 = xmmword_25FA357B0;
    uint64_t v39 = v68;
    while (v11 != v13)
    {
      if (v12 == v13) {
        goto LABEL_28;
      }
      if (v78 == v13) {
        goto LABEL_32;
      }
      uint64_t v41 = *(v38 - 1);
      uint64_t v40 = *v38;
      uint64_t v42 = *(void *)(type metadata accessor for Grammar(0) - 8);
      uint64_t v43 = v39 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
      uint64_t v44 = *(void *)(v42 + 72);
      uint64_t v45 = v76;
      uint64_t v46 = *(int *)(v76 + 48);
      int64_t v77 = v13;
      uint64_t v47 = (uint64_t)v67;
      uint64_t v48 = (uint64_t)v67 + v46;
      *uint64_t v67 = v41;
      *(void *)(v47 + 8) = v40;
      _s19TokenGenerationCore7GrammarVWOcTm_0(v43 + v44 * v13, v48, type metadata accessor for Grammar);
      unint64_t v49 = v66;
      outlined init with take of (String, Grammar)(v47, (uint64_t)v66);
      uint64_t v50 = (void *)v49[1];
      uint64_t v51 = (void **)((char *)v49 + *(int *)(v45 + 48));
      uint64_t v79 = *v49;
      BOOL v80 = v51;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
      uint64_t v52 = *(void *)(type metadata accessor for Symbol(0) - 8);
      uint64_t v53 = *(void *)(v52 + 72);
      unint64_t v54 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      uint64_t v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = v73;
      unint64_t v56 = (unint64_t *)(v55 + v54);
      unint64_t v82 = 0;
      unint64_t v83 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v82 = 0x3A2265707974227BLL;
      unint64_t v83 = 0xEA00000000002220;
      v57._uint64_t countAndFlagsBits = v79;
      v57._unint64_t object = v50;
      String.append(_:)(v57);
      v58._uint64_t countAndFlagsBits = 0x756C617622202C22;
      v58._unint64_t object = (void *)0xEC000000203A2265;
      String.append(_:)(v58);
      uint64_t v59 = v81;
      *unint64_t v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(v82, v83);
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRelease();
      uint64_t v60 = (unint64_t *)((char *)v56 + v53);
      uint64_t v61 = v80[2];
      *uint64_t v60 = v80[1];
      v60[1] = v61;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      unint64_t v62 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x7DuLL, 0xE100000000000000);
      uint64_t v81 = v59;
      *(unint64_t *)((char *)v56 + 2 * v53) = v62;
      swift_storeEnumTagMultiPayload();
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v49, &demangling cache variable for type metadata for (String, Grammar));
      uint64_t v34 = v84;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
        uint64_t v34 = v84;
      }
      unint64_t v64 = *(void *)(v34 + 16);
      unint64_t v63 = *(void *)(v34 + 24);
      uint64_t v39 = v68;
      int64_t v65 = v77;
      if (v64 >= v63 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
        uint64_t v34 = v84;
      }
      int64_t v13 = v65 + 1;
      *(void *)(v34 + 16) = v64 + 1;
      *(void *)(v34 + 8 * v64 + 32) = v55;
      v38 += 2;
      unint64_t v12 = v74;
      unint64_t v11 = v75;
      if (v75 == v13) {
        goto LABEL_28;
      }
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay29GenerativeFunctionsFoundation16GenerationSchemaO6ChoiceVG_SSs5NeverOTg509_s19Tokeng76Core7GrammarV5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29de13Foundation0B6h2O6I70VG_SDyAjCGztFZSSALcfu_32cce7deb5d5afe638d5ea480a0fbc1d0cALSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = *(void *)(type metadata accessor for GenerationSchema.Choice() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = GenerationSchema.Choice.identifier.getter();
      uint64_t v9 = v8;
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay29GenerativeFunctionsFoundation16GenerationSchemaO6ChoiceVG_05TokenG4Core7GrammarVs5NeverOTg504_s19jg5Core7l64V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29de13Foundation0B6h2O6I22VG_SDyAjCGztFZAcLXEfU_ANXMtSDyAhNGTf1cn_n(uint64_t a1, void *a2)
{
  unint64_t v62 = a2;
  uint64_t v4 = type metadata accessor for GenerationSchema();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v61 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v52 - v8;
  uint64_t v10 = type metadata accessor for Grammar(0);
  uint64_t v59 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v58 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v53 = (uint64_t)&v52 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v60 = (uint64_t)&v52 - v15;
  int64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (!v16) {
    return v17;
  }
  uint64_t v52 = v2;
  uint64_t v64 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
  uint64_t v18 = *(void *)(type metadata accessor for GenerationSchema.Choice() - 8);
  uint64_t v19 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  uint64_t v20 = *(void *)(v18 + 72);
  uint64_t v54 = v5;
  uint64_t v55 = v20;
  unint64_t v56 = (void (**)(char *, uint64_t))(v5 + 8);
  Swift::String v57 = (void (**)(uint64_t, char *, uint64_t))(v5 + 16);
  while (1)
  {
    GenerationSchema.Choice.schema.getter();
    uint64_t v21 = *v62;
    if (!*(void *)(*v62 + 16)) {
      break;
    }
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if ((v23 & 1) == 0) {
      break;
    }
    uint64_t v24 = *(void *)(v59 + 72);
    uint64_t v25 = v53;
    _s19TokenGenerationCore7GrammarVWOcTm_0(*(void *)(v21 + 56) + v24 * v22, v53, type metadata accessor for Grammar);
    outlined init with take of Grammar(v25, v60, type metadata accessor for Grammar);
    (*v56)(v9, v4);
LABEL_18:
    uint64_t v17 = v64;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
      uint64_t v17 = v64;
    }
    unint64_t v50 = *(void *)(v17 + 16);
    unint64_t v49 = *(void *)(v17 + 24);
    if (v50 >= v49 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
      uint64_t v17 = v64;
    }
    *(void *)(v17 + 16) = v50 + 1;
    outlined init with take of Grammar(v60, v17 + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80)) + v24 * v50, type metadata accessor for Grammar);
    v19 += v55;
    if (!--v16) {
      return v17;
    }
  }
  uint64_t v26 = v60;
  uint64_t v27 = v4;
  Swift::String v28 = v62;
  closure #1 in static Grammar.grammar(for:with:wrapStringsInQuotes:)(v9, 1, v62);
  Swift::String v29 = *v57;
  uint64_t v30 = (uint64_t)v61;
  uint64_t v31 = v9;
  uint64_t v32 = v9;
  uint64_t v33 = v27;
  (*v57)((uint64_t)v61, v32, v27);
  _s19TokenGenerationCore7GrammarVWOcTm_0(v26, v58, type metadata accessor for Grammar);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v63 = (void *)*v28;
  unint64_t v35 = v63;
  void *v28 = 0x8000000000000000;
  unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
  uint64_t v38 = v35[2];
  BOOL v39 = (v36 & 1) == 0;
  uint64_t v40 = v38 + v39;
  if (!__OFADD__(v38, v39))
  {
    char v41 = v36;
    if (v35[3] < v40)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, isUniquelyReferenced_nonNull_native);
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v61);
      if ((v41 & 1) != (v43 & 1)) {
        goto LABEL_26;
      }
      unint64_t v37 = v42;
      uint64_t v44 = v63;
      if ((v41 & 1) == 0) {
        goto LABEL_15;
      }
LABEL_13:
      uint64_t v24 = *(void *)(v59 + 72);
      outlined assign with take of Symbol(v58, v44[7] + v24 * v37, type metadata accessor for Grammar);
LABEL_17:
      *unint64_t v62 = v44;
      swift_bridgeObjectRelease();
      uint64_t v48 = *v56;
      uint64_t v4 = v33;
      (*v56)(v61, v33);
      uint64_t v9 = v31;
      v48(v31, v4);
      goto LABEL_18;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v44 = v63;
      if (v36) {
        goto LABEL_13;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v44 = v63;
      if (v41) {
        goto LABEL_13;
      }
    }
LABEL_15:
    v44[(v37 >> 6) + 8] |= 1 << v37;
    v29(v44[6] + *(void *)(v54 + 72) * v37, v61, v33);
    uint64_t v24 = *(void *)(v59 + 72);
    outlined init with take of Grammar(v58, v44[7] + v24 * v37, type metadata accessor for Grammar);
    uint64_t v45 = v44[2];
    BOOL v46 = __OFADD__(v45, 1);
    uint64_t v47 = v45 + 1;
    if (v46) {
      goto LABEL_25;
    }
    void v44[2] = v47;
    uint64_t v44 = v63;
    goto LABEL_17;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore7GrammarVG_SSs5NeverOTg504_s19de5Core7G182V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29GenerativeFunctionsFoundation0B6SchemaO6ChoiceVG_SDyAjCGztFZSSACcfu1_33_9505c99dfe7c0469d75fe5206cfe3972ACSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = *(void *)(type metadata accessor for Grammar(0) - 8);
    uint64_t v5 = *(void *)(v4 + 72);
    uint64_t v6 = (uint64_t *)(((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                   + a1
                   + 16);
    do
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      unint64_t v10 = *(void *)(v13 + 16);
      unint64_t v9 = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
      if (v10 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v13 + 16) = v10 + 1;
      uint64_t v11 = v13 + 16 * v10;
      *(void *)(v11 + 32) = v8;
      *(void *)(v11 + 40) = v7;
      uint64_t v6 = (uint64_t *)((char *)v6 + v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay29GenerativeFunctionsFoundation16GenerationSchemaO5FieldVGG_05TokenG4Core6ChoiceVs5NeverOTg504_s19jg81Core7GrammarV10jsonObject33_DD88DD49DE63EB9CBD61CBF820251C8ALL6fields4withACSay29de13Foundation0B6h2O5i17VG_SDyAjCGztFZAA6L8VAMXEfU_SDyAjM6SymbolOGTf1cn_n(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v15;
    for (uint64_t i = (uint64_t *)(a1 + 32); ; ++i)
    {
      uint64_t v13 = *i;
      swift_bridgeObjectRetain();
      closure #1 in static Grammar.jsonObject(fields:with:)(&v13, a2, &v14);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      swift_bridgeObjectRelease();
      uint64_t v9 = v14;
      uint64_t v15 = v5;
      unint64_t v11 = *(void *)(v5 + 16);
      unint64_t v10 = *(void *)(v5 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v5 = v15;
      }
      *(void *)(v5 + 16) = v11 + 1;
      *(void *)(v5 + 8 * v11 + 32) = v9;
      if (!--v4) {
        return v5;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Grammar?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Grammar(0);
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    outlined destroy of SingleValueDecodingContainer?(a1, &demangling cache variable for type metadata for Grammar?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for GenerationSchema();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return outlined destroy of SingleValueDecodingContainer?((uint64_t)v8, &demangling cache variable for type metadata for Grammar?);
  }
  else
  {
    outlined init with take of Grammar(a1, (uint64_t)v11, type metadata accessor for Grammar);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for GenerationSchema();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t specialized RangeReplaceableCollection<>.popLast()@<X0>(char *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GenerationSchema.Field();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v16 - v8;
  unint64_t v10 = *v1;
  if (*(void *)(*v1 + 16))
  {
    uint64_t v17 = v7;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      unint64_t v10 = result;
    }
    uint64_t v12 = *(void *)(v10 + 16);
    if (v12)
    {
      uint64_t v13 = v12 - 1;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 32);
      v14(v6, v10+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * (v12 - 1), v3);
      *(void *)(v10 + 16) = v13;
      unint64_t *v1 = v10;
      v14(v9, (unint64_t)v6, v3);
      v14(a1, (unint64_t)v9, v3);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v3);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    return v15(a1, 1, 1, v3);
  }
  return result;
}

__n128 GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Grammar(0);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s19TokenGenerationCore7GrammarVWOcTm_0(a1, (uint64_t)v10, type metadata accessor for Grammar);
  v16[3] = type metadata accessor for TokenizerRunner();
  v16[4] = &protocol witness table for TokenizerRunner;
  v16[0] = a2;
  GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)((uint64_t)v10, (uint64_t)v16, a3, &v17);
  outlined destroy of Grammar(a1, type metadata accessor for Grammar);
  uint64_t v11 = v19;
  char v12 = v20;
  uint64_t v13 = v21;
  char v14 = v22;
  __n128 result = v18;
  *(void *)a4 = v17;
  *(__n128 *)(a4 + 8) = result;
  *(void *)(a4 + 24) = v11;
  *(unsigned char *)(a4 + 32) = v12;
  *(void *)(a4 + 40) = v13;
  *(unsigned char *)(a4 + 48) = v14;
  return result;
}

double GuidedGenerationConstraints.init(schema:tokenizer:stopTokenIDs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Schema();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v23[-2] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Grammar(0);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v23[-2] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (void *)((char *)&v23[-2] - v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  Grammar.init(schema:)((uint64_t)v11, v17);
  _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v17, (uint64_t)v15, type metadata accessor for Grammar);
  v23[3] = type metadata accessor for TokenizerRunner();
  v23[4] = &protocol witness table for TokenizerRunner;
  v23[0] = a2;
  GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)((uint64_t)v15, (uint64_t)v23, a3, &v24);
  outlined destroy of Grammar((uint64_t)v17, type metadata accessor for Grammar);
  uint64_t v18 = v24;
  uint64_t v19 = v26;
  LOBYTE(v11) = v27;
  uint64_t v20 = v28;
  LOBYTE(v17) = v29;
  long long v22 = v25;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  *(void *)a4 = v18;
  double result = *(double *)&v22;
  *(_OWORD *)(a4 + 8) = v22;
  *(void *)(a4 + 24) = v19;
  *(unsigned char *)(a4 + 32) = (_BYTE)v11;
  *(void *)(a4 + 40) = v20;
  *(unsigned char *)(a4 + 48) = (_BYTE)v17;
  return result;
}

uint64_t Grammar.init(schema:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for GenerationSchema();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Grammar(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = MEMORY[0x263F8EE80];
  Schema.type.getter();
  static Grammar.grammar(for:with:wrapStringsInQuotes:)((uint64_t)v7, (uint64_t)&v15, 0, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = (void *)swift_bridgeObjectRetain();
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v11, 1, (uint64_t)&outlined read-only object #0 of Grammar.init(schema:), a2);
  uint64_t v12 = type metadata accessor for Schema();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  outlined destroy of Grammar((uint64_t)v10, type metadata accessor for Grammar);
  return swift_bridgeObjectRelease();
}

__n128 GuidedGenerationConstraints.init(schema:tokenizer:stopTokenIDs:numParallelTasks:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int v11 = a5 & 1;
  uint64_t v12 = type metadata accessor for Schema();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for Grammar(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  Grammar.init(schema:)((uint64_t)v15, v18);
  outlined init with copy of GuidedGenerationTokenizer(a2, (uint64_t)v24);
  GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:numParallelTasks:)((uint64_t)v18, (uint64_t)v24, a3, a4, v11, &v25);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  uint64_t v19 = v27;
  char v20 = v28;
  uint64_t v21 = v29;
  char v22 = v30;
  __n128 result = v26;
  *(void *)a6 = v25;
  *(__n128 *)(a6 + 8) = result;
  *(void *)(a6 + 24) = v19;
  *(unsigned char *)(a6 + 32) = v20;
  *(void *)(a6 + 40) = v21;
  *(unsigned char *)(a6 + 48) = v22;
  return result;
}

__n128 GuidedGenerationConstraints.init(schema:vocabularyManager:enableDeterministicTokenRuns:numberOfParallelTasks:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Schema();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Grammar(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (uint64_t *)((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  Grammar.init(schema:)((uint64_t)v13, v16);
  uint64_t v23 = v17;
  GuidedGenerationConstraints.init(grammar:vocabularyManager:enableDeterministicTokenRuns:numberOfParallelTasks:)((uint64_t)v16, &v23, a3, a4, (uint64_t)&v24);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  uint64_t v18 = v26;
  char v19 = v27;
  uint64_t v20 = v28;
  char v21 = v29;
  __n128 result = v25;
  *(void *)a5 = v24;
  *(__n128 *)(a5 + 8) = result;
  *(void *)(a5 + 24) = v18;
  *(unsigned char *)(a5 + 32) = v19;
  *(void *)(a5 + 40) = v20;
  *(unsigned char *)(a5 + 48) = v21;
  return result;
}

uint64_t GuidedGenerationConstraints.init(schemaString:tokenizerPath:stopTokenIDs:numParallelTasks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 152) = a8;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = a1;
  type metadata accessor for Schema();
  *(void *)(v8 + 72) = swift_task_alloc();
  type metadata accessor for Grammar(0);
  *(void *)(v8 + 80) = swift_task_alloc();
  *(void *)(v8 + 88) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerationSchema();
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 104) = *(void *)(v9 - 8);
  *(void *)(v8 + 112) = swift_task_alloc();
  *(void *)(v8 + 120) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for String.Encoding();
  *(void *)(v8 + 128) = v10;
  *(void *)(v8 + 136) = *(void *)(v10 - 8);
  *(void *)(v8 + 144) = swift_task_alloc();
  return MEMORY[0x270FA2498](GuidedGenerationConstraints.init(schemaString:tokenizerPath:stopTokenIDs:numParallelTasks:), 0, 0);
}

uint64_t GuidedGenerationConstraints.init(schemaString:tokenizerPath:stopTokenIDs:numParallelTasks:)()
{
  uint64_t v35 = v0;
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    lazy protocol witness table accessor for type GenerationSchema and conformance GenerationSchema(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v8 = *(void **)(v0 + 88);
    uint64_t v9 = *(void *)(v0 + 72);
    (*(void (**)(void, void, void))(*(void *)(v0 + 104) + 16))(*(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 96));
    Schema.init(type:)();
    Grammar.init(schema:)(v9, v8);
    uint64_t v10 = type metadata accessor for TokenizerRunner();
    swift_allocObject();
    TokenizerRunner.init(tokenizerPath:)();
    uint64_t v12 = v11;
    uint64_t v27 = *(void *)(v0 + 120);
    uint64_t v13 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 88);
    uint64_t v26 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v23 = *(void *)(v0 + 56);
    uint64_t v24 = *(void *)(v0 + 64);
    int v22 = *(unsigned char *)(v0 + 152) & 1;
    uint64_t v15 = *(void *)(v0 + 16);
    _s19TokenGenerationCore7GrammarVWOcTm_0(v25, v14, type metadata accessor for Grammar);
    v34[3] = v10;
    unsigned char v34[4] = &protocol witness table for TokenizerRunner;
    v34[0] = v12;
    swift_retain();
    GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:numParallelTasks:)(v14, (uint64_t)v34, v23, v24, v22, &v28);
    swift_release();
    outlined consume of Data?(v4, v6);
    swift_release();
    outlined destroy of Grammar(v25, type metadata accessor for Grammar);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v27, v26);
    uint64_t v16 = v30;
    char v17 = v31;
    uint64_t v18 = v32;
    char v19 = v33;
    long long v20 = v29;
    *(void *)uint64_t v15 = v28;
    *(_OWORD *)(v15 + 8) = v20;
    *(void *)(v15 + 24) = v16;
    *(unsigned char *)(v15 + 32) = v17;
    *(void *)(v15 + 40) = v18;
    *(unsigned char *)(v15 + 48) = v19;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  return result;
}

uint64_t static Grammar.grammar(for:with:wrapStringsInQuotes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  int v23 = a3;
  uint64_t v24 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Grammar?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for GenerationSchema();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for Grammar(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = *(void *)a2;
  if (*(void *)(*(void *)a2 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v19 & 1) != 0))
  {
    _s19TokenGenerationCore7GrammarVWOcTm_0(*(void *)(v17 + 56) + *(void *)(v14 + 72) * v18, (uint64_t)v16, type metadata accessor for Grammar);
    return outlined init with take of Grammar((uint64_t)v16, (uint64_t)v24, type metadata accessor for Grammar);
  }
  else
  {
    char v21 = v24;
    closure #1 in static Grammar.grammar(for:with:wrapStringsInQuotes:)(a1, v23 & 1, a2, v24);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
    _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v21, (uint64_t)v8, type metadata accessor for Grammar);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v8, 0, 1, v13);
    return specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)v12);
  }
}

uint64_t outlined init with copy of GuidedGenerationTokenizer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t closure #1 in static Grammar.grammar(for:with:wrapStringsInQuotes:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(void *)&long long v51 = a3;
  LODWORD(v50) = a2;
  uint64_t v52 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  unint64_t v49 = (uint64_t *)((char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (uint64_t *)((char *)&v49 - v9);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v49 - v11;
  uint64_t v13 = type metadata accessor for GenerationSchema();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (unsigned int (*)(uint64_t *, uint64_t, uint64_t))((char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  long long v20 = (char *)&v49 - v19;
  MEMORY[0x270FA5388](v18);
  int v22 = (char *)&v49 - v21;
  int v23 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v23((char *)&v49 - v21, a1, v13);
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v22, v13);
  if (v24 == *MEMORY[0x263F40C38])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v22, v13);
    uint64_t v13 = *(void *)v22;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enumerator: [String]?, constraints: GenerationSchema.StringConstraint?));
    uint64_t v26 = (uint64_t *)swift_projectBox();
    a1 = *v26;
    outlined init with copy of GenerationSchema.StringConstraint?((uint64_t)v26 + *(int *)(v25 + 48), (uint64_t)v12);
    outlined init with copy of GenerationSchema.StringConstraint?((uint64_t)v12, (uint64_t)v10);
    uint64_t v27 = type metadata accessor for GenerationSchema.StringConstraint();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v17 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48);
    if (v17(v10, 1, v27) == 1)
    {
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
      if (!a1) {
        goto LABEL_21;
      }
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v28 + 88))(v10, v27) == *MEMORY[0x263F40BF8])
      {
        (*(void (**)(uint64_t *, uint64_t))(v28 + 96))(v10, v27);
        uint64_t v29 = *v10;
        uint64_t v30 = v10[1];
        if (a1)
        {
          int v23 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (!v23)
          {
            uint64_t v31 = specialized _ArrayProtocol.filter(_:)(a1, v29);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            static Grammar.enumerator(cases:wrapInQuotes:)(v31, v50 & 1, (uint64_t)v52);
LABEL_26:
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }
          __break(1u);
          goto LABEL_40;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_21:
        uint64_t v34 = v49;
        outlined init with copy of GenerationSchema.StringConstraint?((uint64_t)v12, (uint64_t)v49);
        if (v17(v34, 1, v27) == 1)
        {
          outlined destroy of SingleValueDecodingContainer?((uint64_t)v34, &demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
LABEL_28:
          static Grammar.string(wrapInQuotes:)(v50 & 1, (uint64_t)v52);
          goto LABEL_29;
        }
        if ((*(unsigned int (**)(uint64_t *, uint64_t))(v28 + 88))(v34, v27) != *MEMORY[0x263F40BF8])
        {
          (*(void (**)(uint64_t *, uint64_t))(v28 + 8))(v34, v27);
          goto LABEL_28;
        }
        (*(void (**)(uint64_t *, uint64_t))(v28 + 96))(v34, v27);
        uint64_t v35 = *v34;
        int v23 = *(void (**)(char *, uint64_t, uint64_t))(v34[1] + 16);
        swift_bridgeObjectRelease();
        if (!v23)
        {
          static Grammar.startsWith(prefixes:)(v35, (uint64_t)v52);
          goto LABEL_26;
        }
LABEL_40:
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        goto LABEL_41;
      }
      (*(void (**)(uint64_t *, uint64_t))(v28 + 8))(v10, v27);
      if (!a1) {
        goto LABEL_21;
      }
    }
    static Grammar.enumerator(cases:wrapInQuotes:)(a1, v50 & 1, (uint64_t)v52);
LABEL_29:
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v12, &demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
    return swift_release();
  }
  if (v24 == *MEMORY[0x263F40C30])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v22, v13);
    static Grammar.jsonObject(fields:with:)(*(void *)(*(void *)v22 + 16), (uint64_t *)v51, (uint64_t)v52);
    return swift_release();
  }
  if (v24 == *MEMORY[0x263F40C18])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v22, v13);
    uint64_t v32 = swift_projectBox();
    v23(v20, v32, v13);
    static Grammar.array(schema:with:)((uint64_t)v20, v51, (uint64_t)v52);
LABEL_17:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    return swift_release();
  }
  if (v24 == *MEMORY[0x263F40BF0])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v22, v13);
    uint64_t v33 = swift_projectBox();
    v23(v20, v33, v13);
    static Grammar.dictionary(schema:with:)((uint64_t)v20, v51, (uint64_t)v52);
    goto LABEL_17;
  }
  if (v24 == *MEMORY[0x263F40C20])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v22, v13);
    static Grammar.oneOf(choices:with:)(*(void *)(*(void *)v22 + 16), (void *)v51, v52);
    return swift_release();
  }
  if (v24 == *MEMORY[0x263F40C50])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v22, v13);
    unint64_t v37 = *(void *)(*(void *)v22 + 16);
    uint64_t v38 = *(void **)(*(void *)v22 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    uint64_t v39 = swift_allocObject();
    long long v51 = xmmword_25FA352B0;
    *(_OWORD *)(v39 + 16) = xmmword_25FA352B0;
    uint64_t v53 = 0x65646F6364726148;
    unint64_t v54 = 0xEA00000000005F64;
    v40._uint64_t countAndFlagsBits = v37;
    v40._unint64_t object = v38;
    String.append(_:)(v40);
    uint64_t v41 = v53;
    unint64_t v50 = v54;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = v51;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
    uint64_t v43 = *(void *)(type metadata accessor for Symbol(0) - 8);
    unint64_t v44 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = v51;
    swift_bridgeObjectRetain();
    unint64_t v46 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(v37, (unint64_t)v38);
    swift_bridgeObjectRelease();
    *(void *)(v45 + v44) = v46;
    swift_storeEnumTagMultiPayload();
    *(void *)(v42 + 32) = v45;
    unint64_t v47 = v50;
    *(void *)(v39 + 32) = v41;
    *(void *)(v39 + 40) = v47;
    *(void *)(v39 + 48) = v42;
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v39, 0, MEMORY[0x263F8EE78], v52);
    return swift_release();
  }
  if (v24 == *MEMORY[0x263F40C40]) {
    return static Grammar.BOOLean()(v52);
  }
  if (v24 == *MEMORY[0x263F40C48]) {
    return static Grammar.integer()(v52);
  }
  if (v24 == *MEMORY[0x263F40C28]) {
    return static Grammar.number()(v52);
  }
LABEL_41:
  v23((char *)v17, a1, v13);
  uint64_t v53 = 0;
  unint64_t v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  v48._unint64_t object = (void *)0x800000025FA3DD60;
  v48._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v48);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static Grammar.BOOLean()@<X0>(void *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_25FA352B0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_25FA357C0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  uint64_t v3 = *(void *)(type metadata accessor for Symbol(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_25FA352B0;
  *(void *)(v5 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x65757274uLL, 0xE400000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v2 + 32) = v5;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_25FA352B0;
  *(void *)(v6 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x65736C6166uLL, 0xE500000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v2 + 40) = v6;
  *(void *)(v1 + 32) = 0x6E61656C6F6F42;
  *(void *)(v1 + 40) = 0xE700000000000000;
  *(void *)(v1 + 48) = v2;
  return Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v1, 0, MEMORY[0x263F8EE78], a1);
}

uint64_t static Grammar.integer()@<X0>(void *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_25FA357D0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_25FA357B0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  uint64_t v2 = *(void *)(type metadata accessor for Symbol(0) - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_25FA352B0;
  uint64_t v6 = (void *)(v5 + v4);
  void *v6 = 0x7469676944;
  v6[1] = 0xE500000000000000;
  swift_storeEnumTagMultiPayload();
  *(void *)(v1 + 32) = v5;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_25FA357C0;
  uint64_t v8 = (void *)(v7 + v4);
  *uint64_t v8 = 0xD000000000000010;
  v8[1] = 0x800000025FA3DD80;
  swift_storeEnumTagMultiPayload();
  strcpy((char *)(v7 + v4 + v3), "PositiveDigit");
  *(_WORD *)((char *)v8 + v3 + 14) = -4864;
  swift_storeEnumTagMultiPayload();
  *(void *)(v1 + 40) = v7;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_25FA357B0;
  uint64_t v10 = (void *)(v9 + v4);
  *uint64_t v10 = 0xD000000000000010;
  v10[1] = 0x800000025FA3DD80;
  swift_storeEnumTagMultiPayload();
  strcpy((char *)(v9 + v4 + v3), "PositiveDigit");
  *(_WORD *)((char *)v10 + v3 + 14) = -4864;
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = (void *)(v9 + v4 + 2 * v3);
  *uint64_t v11 = 0x737469676944;
  v11[1] = 0xE600000000000000;
  swift_storeEnumTagMultiPayload();
  *(void *)(v1 + 48) = v9;
  *(void *)(v36 + 32) = 0x72656765746E49;
  *(void *)(v36 + 40) = 0xE700000000000000;
  *(void *)(v36 + 48) = v1;
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_25FA357C0;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_25FA352B0;
  *(void *)(v13 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x2DuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v12 + 32) = v13;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_25FA352B0;
  *(void *)(v14 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0, 0xE000000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v12 + 40) = v14;
  *(void *)(v36 + 56) = 0xD000000000000010;
  *(void *)(v36 + 64) = 0x800000025FA3DD80;
  *(void *)(v36 + 72) = v12;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_25FA357C0;
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_25FA352B0;
  uint64_t v17 = (void *)(v16 + v4);
  void *v17 = 0x7469676944;
  v17[1] = 0xE500000000000000;
  swift_storeEnumTagMultiPayload();
  *(void *)(v15 + 32) = v16;
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_25FA357C0;
  uint64_t v19 = (void *)(v18 + v4);
  void *v19 = 0x737469676944;
  v19[1] = 0xE600000000000000;
  swift_storeEnumTagMultiPayload();
  long long v20 = (void *)(v18 + v4 + v3);
  *long long v20 = 0x7469676944;
  v20[1] = 0xE500000000000000;
  swift_storeEnumTagMultiPayload();
  *(void *)(v15 + 40) = v18;
  *(void *)(v36 + 80) = 0x737469676944;
  *(void *)(v36 + 88) = 0xE600000000000000;
  *(void *)(v36 + 96) = v15;
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_25FA357C0;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_25FA352B0;
  *(void *)(v22 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x30uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v21 + 32) = v22;
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_25FA352B0;
  strcpy((char *)(v23 + v4), "PositiveDigit");
  *(_WORD *)(v23 + v4 + 14) = -4864;
  swift_storeEnumTagMultiPayload();
  *(void *)(v21 + 40) = v23;
  *(void *)(v36 + 104) = 0x7469676944;
  *(void *)(v36 + 112) = 0xE500000000000000;
  *(void *)(v36 + 120) = v21;
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_25FA357E0;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_25FA352B0;
  *(void *)(v25 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x31uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v24 + 32) = v25;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_25FA352B0;
  *(void *)(v26 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x32uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v24 + 40) = v26;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_25FA352B0;
  *(void *)(v27 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x33uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v24 + 48) = v27;
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_25FA352B0;
  *(void *)(v28 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x34uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v24 + 56) = v28;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_25FA352B0;
  *(void *)(v29 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x35uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v24 + 64) = v29;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_25FA352B0;
  *(void *)(v30 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x36uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v24 + 72) = v30;
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_25FA352B0;
  *(void *)(v31 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x37uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v24 + 80) = v31;
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_25FA352B0;
  *(void *)(v32 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x38uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v24 + 88) = v32;
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_25FA352B0;
  *(void *)(v33 + v4) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x39uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v24 + 96) = v33;
  strcpy((char *)(v36 + 128), "PositiveDigit");
  *(_WORD *)(v36 + 142) = -4864;
  *(void *)(v36 + 144) = v24;
  return Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v36, 0, MEMORY[0x263F8EE78], a1);
}

uint64_t static Grammar.number()@<X0>(void *a1@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v1 = type metadata accessor for Grammar(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v28 = (uint64_t *)((char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  uint64_t v3 = swift_allocObject();
  long long v27 = xmmword_25FA357B0;
  *(_OWORD *)(v3 + 16) = xmmword_25FA357B0;
  uint64_t v4 = v3;
  uint64_t v23 = v3;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  uint64_t v5 = *(void *)(type metadata accessor for Symbol(0) - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v25 = v7 | 7;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_25FA357F0;
  uint64_t v10 = (void *)(v9 + v8);
  unint64_t v24 = 0x800000025FA3DD80;
  *uint64_t v10 = 0xD000000000000010;
  v10[1] = 0x800000025FA3DD80;
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = (void *)(v9 + v8 + v6);
  *uint64_t v11 = 0x737469676944;
  v11[1] = 0xE600000000000000;
  swift_storeEnumTagMultiPayload();
  *(void *)(v9 + v8 + 2 * v6) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x2EuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = (void *)(v9 + v8 + 3 * v6);
  *uint64_t v12 = 0x737469676944;
  v12[1] = 0xE600000000000000;
  swift_storeEnumTagMultiPayload();
  *(void *)(v4 + 32) = v9;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = v27;
  uint64_t v14 = (void *)(v13 + v8);
  void *v14 = 0xD000000000000010;
  v14[1] = v24;
  swift_storeEnumTagMultiPayload();
  *(void *)((char *)v14 + v6) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x2EuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = (void *)(v13 + v8 + 2 * v6);
  void *v15 = 0x737469676944;
  v15[1] = 0xE600000000000000;
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = v23;
  *(void *)(v23 + 40) = v13;
  uint64_t v17 = swift_allocObject();
  long long v27 = xmmword_25FA352B0;
  *(_OWORD *)(v17 + 16) = xmmword_25FA352B0;
  uint64_t v18 = (void *)(v17 + v8);
  void *v18 = 0x72656765746E49;
  v18[1] = 0xE700000000000000;
  swift_storeEnumTagMultiPayload();
  *(void *)(v16 + 48) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v27;
  *(void *)(v19 + 32) = 0x7265626D754ELL;
  *(void *)(v19 + 40) = 0xE600000000000000;
  *(void *)(v19 + 48) = v16;
  long long v20 = v28;
  static Grammar.integer()(v28);
  uint64_t v21 = v20[4];
  swift_bridgeObjectRetain();
  outlined destroy of Grammar((uint64_t)v20, type metadata accessor for Grammar);
  uint64_t v30 = (void *)v19;
  specialized Array.append<A>(contentsOf:)(v21);
  return Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v30, 0, MEMORY[0x263F8EE78], v29);
}

uint64_t static Grammar.enumerator(cases:wrapInQuotes:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Grammar(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v42 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v42 - v13;
  if (a2)
  {
    uint64_t v47 = a3;
    static Grammar.enumerator(cases:wrapInQuotes:)(a1, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    uint64_t v15 = swift_allocObject();
    long long v44 = xmmword_25FA352B0;
    *(_OWORD *)(v15 + 16) = xmmword_25FA352B0;
    uint64_t v52 = 0x6465746F7551;
    unint64_t v53 = 0xE600000000000000;
    uint64_t v17 = (void *)*((void *)v14 + 2);
    uint64_t v45 = *((void *)v14 + 1);
    uint64_t v16 = v45;
    swift_bridgeObjectRetain();
    *(void *)&long long v50 = v12;
    v18._uint64_t countAndFlagsBits = v16;
    v18._unint64_t object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    unint64_t v48 = v53;
    unint64_t v49 = (void *)v52;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = v44;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
    uint64_t v19 = *(void *)(type metadata accessor for Symbol(0) - 8);
    uint64_t v20 = *(void *)(v19 + 72);
    unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_25FA357B0;
    *(void *)(v22 + v21) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x22uLL, 0xE100000000000000);
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = (uint64_t *)(v22 + v21 + v20);
    *uint64_t v23 = v45;
    v23[1] = (uint64_t)v17;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    *(void *)(v22 + v21 + 2 * v20) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x22uLL, 0xE100000000000000);
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = v46;
    *(void *)(v46 + 32) = v22;
    unint64_t v25 = v48;
    *(void *)(v15 + 32) = v49;
    *(void *)(v15 + 40) = v25;
    *(void *)(v15 + 48) = v24;
    uint64_t v52 = v15;
    uint64_t v26 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v26);
    uint64_t v27 = v50;
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v52, 0, MEMORY[0x263F8EE78], (void *)v50);
    outlined init with take of Grammar(v27, v47, type metadata accessor for Grammar);
    return outlined destroy of Grammar((uint64_t)v14, type metadata accessor for Grammar);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    uint64_t v29 = swift_allocObject();
    long long v50 = xmmword_25FA352B0;
    *(_OWORD *)(v29 + 16) = xmmword_25FA352B0;
    uint64_t v52 = 0x746172656D756E45;
    unint64_t v53 = 0xEB000000005F726FLL;
    uint64_t v51 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v30._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = (void *)v52;
    unint64_t v32 = v53;
    int64_t v33 = *(void *)(a1 + 16);
    uint64_t v34 = (void *)MEMORY[0x263F8EE78];
    if (v33)
    {
      unint64_t v43 = v53;
      *(void *)&long long v44 = v52;
      uint64_t v45 = v29;
      uint64_t v46 = (uint64_t)v9;
      uint64_t v47 = a3;
      uint64_t v52 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
      uint64_t v34 = (void *)v52;
      unint64_t v49 = (void *)type metadata accessor for Symbol(0);
      unint64_t v35 = (*(unsigned __int8 *)(*(v49 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(v49 - 1) + 80);
      unint64_t v48 = v35 + *(void *)(*(v49 - 1) + 72);
      uint64_t v36 = (unint64_t *)(a1 + 40);
      do
      {
        unint64_t v37 = *(v36 - 1);
        unint64_t v38 = *v36;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
        uint64_t v39 = swift_allocObject();
        *(_OWORD *)(v39 + 16) = v50;
        swift_bridgeObjectRetain();
        *(void *)(v39 + v35) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(v37, v38);
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRelease();
        uint64_t v52 = (uint64_t)v34;
        unint64_t v41 = v34[2];
        unint64_t v40 = v34[3];
        if (v41 >= v40 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
          uint64_t v34 = (void *)v52;
        }
        v36 += 2;
        void v34[2] = v41 + 1;
        v34[v41 + 4] = v39;
        --v33;
      }
      while (v33);
      uint64_t v9 = (void *)v46;
      a3 = v47;
      uint64_t v29 = v45;
      unint64_t v32 = v43;
      uint64_t v31 = (void *)v44;
    }
    *(void *)(v29 + 32) = v31;
    *(void *)(v29 + 40) = v32;
    *(void *)(v29 + 48) = v34;
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v29, 0, MEMORY[0x263F8EE78], v9);
    return outlined init with take of Grammar((uint64_t)v9, a3, type metadata accessor for Grammar);
  }
}

uint64_t static Grammar.startsWith(prefixes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Grammar(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v41 - v8;
  static Grammar.string(wrapInQuotes:)(0, (uint64_t)&v41 - v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  uint64_t v10 = swift_allocObject();
  long long v58 = xmmword_25FA352B0;
  *(_OWORD *)(v10 + 16) = xmmword_25FA352B0;
  uint64_t v63 = 0x6957737472617453;
  unint64_t v64 = 0xEB000000005F6874;
  uint64_t v62 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v11._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)v63;
  unint64_t v13 = v64;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    unint64_t v42 = v64;
    unint64_t v43 = (void *)v63;
    uint64_t v44 = v10;
    uint64_t v47 = v7;
    uint64_t v48 = a2;
    uint64_t v57 = *((void *)v9 + 1);
    uint64_t v46 = v9;
    uint64_t v56 = *((void *)v9 + 2);
    uint64_t v55 = type metadata accessor for Symbol(0);
    uint64_t v15 = *(void *)(*(void *)(v55 - 8) + 72);
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(v55 - 8) + 80);
    uint64_t v17 = (v16 + 32) & ~v16;
    uint64_t v51 = v16 | 7;
    uint64_t v52 = v17 + v15;
    uint64_t v53 = v17;
    uint64_t v54 = v15;
    uint64_t v50 = v17 + 2 * v15;
    swift_bridgeObjectRetain();
    uint64_t v45 = a1;
    Swift::String v18 = (unint64_t *)(a1 + 40);
    uint64_t v19 = (void *)MEMORY[0x263F8EE78];
    long long v49 = xmmword_25FA357C0;
    uint64_t v20 = v53;
    while (1)
    {
      uint64_t v59 = v18;
      uint64_t v60 = v14;
      unint64_t v22 = *v18;
      unint64_t v61 = *(v18 - 1);
      unint64_t v21 = v61;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v58;
      swift_bridgeObjectRetain_n();
      unint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(v21, v22);
      swift_bridgeObjectRelease();
      *(void *)(v23 + v20) = v24;
      swift_storeEnumTagMultiPayload();
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = v49;
      swift_bridgeObjectRetain();
      unint64_t v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(v61, v22);
      swift_bridgeObjectRelease();
      *(void *)(v25 + v20) = v26;
      swift_storeEnumTagMultiPayload();
      uint64_t v27 = (void *)(v25 + v20 + v54);
      uint64_t v28 = v56;
      void *v27 = v57;
      v27[1] = v28;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      int64_t v29 = v19[2];
      int64_t v30 = v29 + 2;
      if (__OFADD__(v29, 2)) {
        break;
      }
      char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v30 > v19[3] >> 1)
      {
        if (v29 <= v30) {
          int64_t v32 = v29 + 2;
        }
        else {
          int64_t v32 = v29;
        }
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v32, 1, v19);
      }
      uint64_t v33 = v60;
      unint64_t v34 = v19[2];
      unint64_t v35 = v19[3];
      unint64_t v36 = v34 + 1;
      swift_bridgeObjectRetain();
      if (v34 >= v35 >> 1) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v34 + 1, 1, v19);
      }
      v19[2] = v36;
      v19[v34 + 4] = v23;
      unint64_t v37 = v19[3];
      unint64_t v38 = v34 + 2;
      swift_bridgeObjectRetain();
      if ((uint64_t)(v34 + 2) > (uint64_t)(v37 >> 1)) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v34 + 2, 1, v19);
      }
      Swift::String v18 = v59 + 2;
      v19[2] = v38;
      v19[v36 + 4] = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = v33 - 1;
      if (!v14)
      {
        swift_bridgeObjectRelease();
        a2 = v48;
        uint64_t v7 = v47;
        uint64_t v9 = v46;
        uint64_t v10 = v44;
        uint64_t v12 = v43;
        unint64_t v13 = v42;
        goto LABEL_17;
      }
    }
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v19 = (void *)MEMORY[0x263F8EE78];
LABEL_17:
    *(void *)(v10 + 32) = v12;
    *(void *)(v10 + 40) = v13;
    *(void *)(v10 + 48) = v19;
    uint64_t v63 = v10;
    uint64_t v39 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v39);
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v63, 0, MEMORY[0x263F8EE78], v7);
    outlined init with take of Grammar((uint64_t)v7, a2, type metadata accessor for Grammar);
    return outlined destroy of Grammar((uint64_t)v9, type metadata accessor for Grammar);
  }
  return result;
}

uint64_t static Grammar.string(wrapInQuotes:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v3 = type metadata accessor for Grammar(0);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (unint64_t *)((char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v82 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  if ((a1 & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v9 = swift_allocObject();
  long long v90 = xmmword_25FA357D0;
  *(_OWORD *)(v9 + 16) = xmmword_25FA357D0;
  char v95 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  uint64_t v10 = swift_allocObject();
  long long v98 = xmmword_25FA352B0;
  *(_OWORD *)(v10 + 16) = xmmword_25FA352B0;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  uint64_t v11 = *(void *)(type metadata accessor for Symbol(0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v89 = 3 * v12;
  uint64_t v84 = v13 | 7;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_25FA357B0;
  Swift::UInt v91 = v8;
  *(void *)(v15 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x22uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = (void *)(v15 + v14 + v12);
  unint64_t v85 = 0x800000025FA3D200;
  void *v16 = 0xD000000000000019;
  v16[1] = 0x800000025FA3D200;
  swift_storeEnumTagMultiPayload();
  uint64_t v88 = 2 * v12;
  *(void *)(v15 + v14 + 2 * v12) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x22uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v10 + 32) = v15;
  uint64_t v97 = v9;
  strcpy((char *)(v9 + 32), "QuotedString");
  *(unsigned char *)(v9 + 45) = 0;
  *(_WORD *)(v9 + 46) = -5120;
  *(void *)(v9 + 48) = v10;
  uint64_t v17 = swift_allocObject();
  long long v94 = xmmword_25FA357C0;
  *(_OWORD *)(v17 + 16) = xmmword_25FA357C0;
  uint64_t v92 = v14 + v12;
  uint64_t v18 = v12;
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v98;
  unint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0, 0xE000000000000000);
  uint64_t v86 = 0;
  *(void *)(v19 + v14) = v20;
  swift_storeEnumTagMultiPayload();
  *(void *)(v17 + 32) = v19;
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = v94;
  unint64_t v22 = (void *)(v21 + v14);
  *unint64_t v22 = 0xD000000000000019;
  unint64_t v23 = v85;
  v22[1] = v85;
  swift_storeEnumTagMultiPayload();
  unint64_t v24 = (void *)(v21 + v14 + v18);
  uint64_t v87 = v18;
  unint64_t v82 = 0xD000000000000013;
  unint64_t v83 = 0x800000025FA3DDA0;
  *unint64_t v24 = 0xD000000000000013;
  v24[1] = 0x800000025FA3DDA0;
  swift_storeEnumTagMultiPayload();
  *(void *)(v17 + 40) = v21;
  uint64_t v25 = v97;
  *(void *)(v97 + 56) = 0xD000000000000019;
  *(void *)(v25 + 64) = v23;
  *(void *)(v25 + 72) = v17;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = v94;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = v98;
  uint64_t v28 = (void *)(v27 + v14);
  void *v28 = 0xD000000000000029;
  v28[1] = 0x800000025FA3DDC0;
  swift_storeEnumTagMultiPayload();
  *(void *)(v26 + 32) = v27;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v94;
  uint64_t v30 = v86;
  *(void *)(v29 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x5CuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = (void *)(v29 + v14 + v18);
  *uint64_t v31 = 0x657061637345;
  v31[1] = 0xE600000000000000;
  swift_storeEnumTagMultiPayload();
  *(void *)(v26 + 40) = v29;
  uint64_t v32 = v97;
  unint64_t v33 = v83;
  *(void *)(v97 + 80) = v82;
  *(void *)(v32 + 88) = v33;
  *(void *)(v32 + 96) = v26;
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_25FA357E0;
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = v98;
  *(void *)(v35 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x22uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v34 + 32) = v35;
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = v98;
  *(void *)(v36 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x5CuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v34 + 40) = v36;
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = v98;
  *(void *)(v37 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x2FuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v34 + 48) = v37;
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = v98;
  *(void *)(v38 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x62uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v34 + 56) = v38;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = v98;
  *(void *)(v39 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x66uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v34 + 64) = v39;
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = v98;
  *(void *)(v40 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x6EuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v34 + 72) = v40;
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v98;
  *(void *)(v41 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x72uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v34 + 80) = v41;
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = v98;
  *(void *)(v42 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x74uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v34 + 88) = v42;
  uint64_t v43 = 4 * v87;
  uint64_t v44 = v87;
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v90;
  *(void *)(v45 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x75uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v46 = (void *)(v45 + v14 + v44);
  *uint64_t v46 = 7890248;
  v46[1] = 0xE300000000000000;
  swift_storeEnumTagMultiPayload();
  uint64_t v47 = (void *)(v45 + v14 + v88);
  *uint64_t v47 = 7890248;
  v47[1] = 0xE300000000000000;
  swift_storeEnumTagMultiPayload();
  uint64_t v48 = (void *)(v45 + v14 + v89);
  *uint64_t v48 = 7890248;
  v48[1] = 0xE300000000000000;
  swift_storeEnumTagMultiPayload();
  long long v49 = (void *)(v45 + v14 + v43);
  *long long v49 = 7890248;
  v49[1] = 0xE300000000000000;
  swift_storeEnumTagMultiPayload();
  *(void *)(v34 + 96) = v45;
  uint64_t v50 = v97;
  *(void *)(v97 + 104) = 0x657061637345;
  *(void *)(v50 + 112) = 0xE600000000000000;
  *(void *)(v50 + 120) = v34;
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_25FA35800;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = v98;
  *(void *)(v52 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x30uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 32) = v52;
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = v98;
  *(void *)(v53 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x31uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 40) = v53;
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = v98;
  *(void *)(v54 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x32uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 48) = v54;
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = v98;
  *(void *)(v55 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x33uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 56) = v55;
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = v98;
  *(void *)(v56 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x34uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 64) = v56;
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = v98;
  *(void *)(v57 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x35uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 72) = v57;
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = v98;
  *(void *)(v58 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x36uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 80) = v58;
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = v98;
  *(void *)(v59 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x37uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 88) = v59;
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = v98;
  *(void *)(v60 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x38uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 96) = v60;
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = v98;
  *(void *)(v61 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x39uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 104) = v61;
  uint64_t v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = v98;
  *(void *)(v62 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x41uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 112) = v62;
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = v98;
  *(void *)(v63 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x42uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 120) = v63;
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = v98;
  *(void *)(v64 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x43uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 128) = v64;
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = v98;
  *(void *)(v65 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x44uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 136) = v65;
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = v98;
  *(void *)(v66 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x45uLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 144) = v66;
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = v98;
  *(void *)(v67 + v14) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x46uLL, 0xE100000000000000);
  uint64_t v6 = v91;
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 152) = v67;
  uint64_t v68 = (void *)v97;
  *(void *)(v97 + 128) = 7890248;
  v68[17] = 0xE300000000000000;
  v68[18] = v51;
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v68, 0, MEMORY[0x263F8EE78], v6);
  if (v30)
  {
    swift_unexpectedError();
    __break(1u);
LABEL_4:
    uint64_t v97 = swift_allocObject();
    long long v98 = xmmword_25FA352B0;
    *(_OWORD *)(v97 + 16) = xmmword_25FA352B0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
    uint64_t v69 = swift_allocObject();
    *(_OWORD *)(v69 + 16) = xmmword_25FA357B0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
    uint64_t v70 = *(void *)(type metadata accessor for Symbol(0) - 8);
    uint64_t v71 = *(void *)(v70 + 72);
    uint64_t v72 = *(unsigned __int8 *)(v70 + 80);
    char v95 = v6;
    uint64_t v73 = (v72 + 32) & ~v72;
    uint64_t v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = v98;
    *(void *)(v74 + v73) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0, 0xE000000000000000);
    swift_storeEnumTagMultiPayload();
    *(void *)(v69 + 32) = v74;
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = v98;
    uint64_t v76 = (void *)(v75 + v73);
    *uint64_t v76 = 0x48435F4C4147454CLL;
    v76[1] = 0xEF52455443415241;
    swift_storeEnumTagMultiPayload();
    *(void *)(v69 + 40) = v75;
    uint64_t v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = xmmword_25FA357C0;
    uint64_t v78 = (void *)(v77 + v73);
    *uint64_t v78 = 0x6C62616568636143;
    v78[1] = 0xEF676E6972745365;
    swift_storeEnumTagMultiPayload();
    uint64_t v79 = (void *)(v77 + v73 + v71);
    *uint64_t v79 = 0x48435F4C4147454CLL;
    v79[1] = 0xEF52455443415241;
    swift_storeEnumTagMultiPayload();
    *(void *)(v69 + 48) = v77;
    BOOL v80 = (void *)v97;
    *(void *)(v97 + 32) = 0x6C62616568636143;
    v80[5] = 0xEF676E6972745365;
    v80[6] = v69;
    uint64_t v6 = v95;
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v80, 0, MEMORY[0x263F8EE78], v95);
  }
  return outlined init with take of Grammar((uint64_t)v6, v96, type metadata accessor for Grammar);
}

uint64_t static Grammar.jsonObject(fields:with:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v92 = a3;
  uint64_t v108 = type metadata accessor for Symbol(0);
  uint64_t v104 = *(void *)(v108 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v108);
  uint64_t v107 = (uint64_t)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v106 = (uint64_t *)((char *)&v88 - v7);
  uint64_t v8 = type metadata accessor for GenerationSchema();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  long long v98 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v88 - v12;
  uint64_t v14 = type metadata accessor for Grammar(0);
  uint64_t v95 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  Swift::UInt v91 = (uint64_t *)((char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v90 = (uint64_t)&v88 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v97 = (uint64_t)&v88 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v94 = (uint64_t)&v88 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v93 = (uint64_t)&v88 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (uint64_t *)((char *)&v88 - v25);
  uint64_t v27 = type metadata accessor for GenerationSchema.Field();
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  uint64_t v105 = (char *)&v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v88 - v31;
  uint64_t v121 = (void *)MEMORY[0x263F8EE80];
  uint64_t v103 = *(void *)(a1 + 16);
  if (v103)
  {
    uint64_t v101 = v8;
    uint64_t v34 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
    uint64_t v33 = v30 + 16;
    Swift::UInt v117 = v34;
    unint64_t v102 = a1 + ((*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64));
    uint64_t v109 = *(void *)(v33 + 56);
    uint64_t v96 = (void (**)(char *, char *, uint64_t))(v9 + 16);
    uint64_t v114 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v115 = v33;
    char v113 = (void (**)(void))(v33 - 8);
    uint64_t v89 = a1;
    swift_bridgeObjectRetain();
    uint64_t v35 = 0;
    uint64_t v116 = MEMORY[0x263F8EE88];
    char v100 = v13;
    Swift::UInt v110 = v26;
    uint64_t v111 = a2;
    uint64_t v99 = v32;
    while (1)
    {
      uint64_t v112 = v35;
      v117(v32, v102 + v109 * v35, v27);
      GenerationSchema.Field.type.getter();
      uint64_t v36 = (void *)*a2;
      if (*(void *)(*a2 + 16) && (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13), (v38 & 1) != 0))
      {
        uint64_t v39 = v36[7] + *(void *)(v95 + 72) * v37;
        uint64_t v40 = v94;
        _s19TokenGenerationCore7GrammarVWOcTm_0(v39, v94, type metadata accessor for Grammar);
        uint64_t v41 = v40;
        uint64_t v42 = v93;
        outlined init with take of Grammar(v41, v93, type metadata accessor for Grammar);
        outlined init with take of Grammar(v42, (uint64_t)v26, type metadata accessor for Grammar);
        (*v114)(v13, v101);
      }
      else
      {
        closure #1 in static Grammar.grammar(for:with:wrapStringsInQuotes:)(v13, 1, a2);
        uint64_t v43 = (uint64_t)v98;
        uint64_t v44 = a2;
        uint64_t v45 = v101;
        (*v96)(v98, v13, v101);
        uint64_t v46 = v97;
        _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v26, v97, type metadata accessor for Grammar);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v118 = *v44;
        uint64_t *v44 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v46, v43, isUniquelyReferenced_nonNull_native);
        uint64_t *v44 = v118;
        swift_bridgeObjectRelease();
        uint64_t v48 = *v114;
        (*v114)((char *)v43, v45);
        v48(v13, v45);
      }
      uint64_t v49 = (uint64_t)v105;
      v117(v105, (unint64_t)v32, v27);
      uint64_t v50 = v26[2];
      uint64_t v51 = (uint64_t)v106;
      *uint64_t v106 = v26[1];
      *(void *)(v51 + 8) = v50;
      swift_storeEnumTagMultiPayload();
      uint64_t v52 = v107;
      outlined init with take of Grammar(v51, v107, type metadata accessor for Symbol);
      swift_bridgeObjectRetain();
      uint64_t v53 = v121;
      int v54 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v118 = (uint64_t)v53;
      uint64_t v121 = (void *)0x8000000000000000;
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
      uint64_t v57 = v53[2];
      BOOL v58 = (v55 & 1) == 0;
      uint64_t v59 = v57 + v58;
      if (__OFADD__(v57, v58)) {
        break;
      }
      char v60 = v55;
      if (v53[3] >= v59)
      {
        a2 = v111;
        if ((v54 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, v54);
        unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
        a2 = v111;
        if ((v60 & 1) != (v62 & 1)) {
          goto LABEL_26;
        }
        unint64_t v56 = v61;
      }
      uint64_t v26 = v110;
      uint64_t v63 = (void *)v118;
      if (v60)
      {
        outlined assign with take of Symbol(v52, *(void *)(v118 + 56) + *(void *)(v104 + 72) * v56, type metadata accessor for Symbol);
      }
      else
      {
        *(void *)(v118 + 8 * (v56 >> 6) + 64) |= 1 << v56;
        v117((char *)(v63[6] + v56 * v109), v49, v27);
        outlined init with take of Grammar(v52, v63[7] + *(void *)(v104 + 72) * v56, type metadata accessor for Symbol);
        uint64_t v64 = v63[2];
        BOOL v65 = __OFADD__(v64, 1);
        uint64_t v66 = v64 + 1;
        if (v65) {
          goto LABEL_25;
        }
        v63[2] = v66;
        uint64_t v63 = (void *)v118;
      }
      uint64_t v121 = v63;
      swift_bridgeObjectRelease();
      uint64_t v67 = *v113;
      ((void (*)(uint64_t, uint64_t))*v113)(v49, v27);
      uint64_t v68 = v26[4];
      uint64_t v69 = v116;
      uint64_t v120 = v116;
      uint64_t v70 = *(void *)(v68 + 16);
      if (v70)
      {
        swift_bridgeObjectRetain();
        uint64_t v71 = (uint64_t *)(v68 + 48);
        do
        {
          Swift::Int v72 = *(v71 - 2);
          Swift::Int v73 = *(v71 - 1);
          uint64_t v74 = *v71;
          v71 += 3;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v118, v72, v73, v74);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          --v70;
        }
        while (v70);
        swift_bridgeObjectRelease();
        uint64_t v69 = v120;
        uint64_t v26 = v110;
        a2 = v111;
      }
      uint64_t v116 = v69;
      uint64_t v35 = v112 + 1;
      outlined destroy of Grammar((uint64_t)v26, type metadata accessor for Grammar);
      uint64_t v32 = v99;
      v67();
      uint64_t v13 = v100;
      if (v35 == v103)
      {
        a1 = v89;
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    swift_release();
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
LABEL_23:
    uint64_t v75 = specialized static Grammar.fieldCombinations(for:)(a1);
    uint64_t v76 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay29GenerativeFunctionsFoundation16GenerationSchemaO5FieldVGG_05TokenG4Core6ChoiceVs5NeverOTg504_s19jg81Core7GrammarV10jsonObject33_DD88DD49DE63EB9CBD61CBF820251C8ALL6fields4withACSay29de13Foundation0B6h2O5i17VG_SDyAjCGztFZAA6L8VAMXEfU_SDyAjM6SymbolOGTf1cn_n(v75, (uint64_t *)&v121);
    swift_bridgeObjectRelease();
    uint64_t v118 = 0x2D7463656A624FLL;
    unint64_t v119 = 0xE700000000000000;
    uint64_t v120 = *(void *)(*a2 + 16) + 1;
    v77._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    uint64_t v78 = (void *)v118;
    unint64_t v79 = v119;
    uint64_t v80 = swift_bridgeObjectRetain();
    uint64_t v81 = specialized _copyCollectionToContiguousArray<A>(_:)(v80);
    swift_bridgeObjectRelease();
    uint64_t v118 = (uint64_t)v81;
    specialized MutableCollection<>.sort(by:)(&v118);
    swift_bridgeObjectRelease();
    unint64_t v82 = (void *)v118;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    uint64_t v83 = swift_allocObject();
    *(_OWORD *)(v83 + 16) = xmmword_25FA352B0;
    *(void *)(v83 + 32) = v78;
    *(void *)(v83 + 40) = v79;
    *(void *)(v83 + 48) = v76;
    uint64_t v118 = v83;
    specialized Array.append<A>(contentsOf:)((uint64_t)v82);
    uint64_t v84 = v91;
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v118, 0, MEMORY[0x263F8EE78], v91);
    uint64_t v85 = (uint64_t)v84;
    uint64_t v86 = v90;
    outlined init with take of Grammar(v85, v90, type metadata accessor for Grammar);
    outlined init with take of Grammar(v86, v92, type metadata accessor for Grammar);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static Grammar.dictionary(schema:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v81 = a3;
  uint64_t v5 = type metadata accessor for Grammar(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v80 = (void *)((char *)v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v79 = (uint64_t)v70 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v70 - v10;
  uint64_t v78 = (char *)v70 - v10;
  static Grammar.grammar(for:with:wrapStringsInQuotes:)(a1, a2, 1);
  uint64_t v12 = *((void *)v11 + 1);
  uint64_t v13 = (void *)*((void *)v11 + 2);
  uint64_t v94 = 7955787;
  unint64_t v95 = 0xE300000000000000;
  swift_bridgeObjectRetain_n();
  v14._uint64_t countAndFlagsBits = v12;
  v14._unint64_t object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 1919508816;
  v15._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v15);
  unint64_t v16 = v95;
  uint64_t v85 = (void *)v94;
  uint64_t v94 = 0x654B664F7473694CLL;
  unint64_t v95 = 0xE900000000000079;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v12;
  uint64_t v77 = v12;
  v17._unint64_t object = v13;
  String.append(_:)(v17);
  uint64_t v76 = (uint64_t)v13;
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 1919508816;
  v18._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v18);
  uint64_t v90 = (void *)v94;
  unint64_t v88 = v95;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  uint64_t v92 = swift_allocObject();
  long long v93 = xmmword_25FA357B0;
  *(_OWORD *)(v92 + 16) = xmmword_25FA357B0;
  uint64_t v94 = 0x664F74636944;
  unint64_t v95 = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v12;
  v19._unint64_t object = v13;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  uint64_t v74 = (void *)v94;
  unint64_t v73 = v95;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = v93;
  uint64_t v21 = v20;
  uint64_t v84 = v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  uint64_t v23 = *(void *)(type metadata accessor for Symbol(0) - 8);
  uint64_t v24 = *(void *)(v23 + 72);
  uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = (v25 + 32) & ~v25;
  uint64_t v75 = v26 + v24;
  uint64_t v27 = v25 | 7;
  uint64_t v82 = v22;
  uint64_t v28 = swift_allocObject();
  long long v89 = xmmword_25FA352B0;
  *(_OWORD *)(v28 + 16) = xmmword_25FA352B0;
  *(void *)(v28 + v26) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x7D7BuLL, 0xE200000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v21 + 32) = v28;
  uint64_t v71 = 3 * v24;
  uint64_t v91 = 2 * v24;
  uint64_t v87 = v26 + 3 * v24;
  v70[1] = v27;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v93;
  *(void *)(v29 + v26) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x7BuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = (void *)(v29 + v26 + v24);
  uint64_t v31 = v85;
  *uint64_t v30 = v85;
  v30[1] = v16;
  unint64_t v83 = v16;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  *(void *)(v29 + v26 + 2 * v24) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x7DuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v84 + 40) = v29;
  uint64_t v86 = v24;
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_25FA357D0;
  uint64_t v33 = (unint64_t *)(v32 + v26);
  *uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x7BuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = (void *)(v32 + v26 + v24);
  unint64_t v35 = v83;
  *uint64_t v34 = v31;
  v34[1] = v35;
  swift_storeEnumTagMultiPayload();
  uint64_t v36 = (unint64_t *)(v32 + v26 + v91);
  swift_bridgeObjectRetain();
  *uint64_t v36 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x202CuLL, 0xE200000000000000);
  swift_storeEnumTagMultiPayload();
  unint64_t v37 = (void *)(v32 + v26 + v71);
  unint64_t v38 = v88;
  *unint64_t v37 = v90;
  v37[1] = v38;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  *(unint64_t *)((char *)v33 + 4 * v24) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x7DuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v39 = v84;
  *(void *)(v84 + 48) = v32;
  uint64_t v40 = v92;
  unint64_t v41 = v73;
  *(void *)(v92 + 32) = v74;
  *(void *)(v40 + 40) = v41;
  *(void *)(v40 + 48) = v39;
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = v89;
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = v93;
  uint64_t v44 = v43 + v26;
  strcpy((char *)(v43 + v26), "QuotedString");
  *(unsigned char *)(v44 + 13) = 0;
  *(_WORD *)(v44 + 14) = -5120;
  swift_storeEnumTagMultiPayload();
  uint64_t v45 = (unint64_t *)(v43 + v26 + v86);
  unint64_t v46 = v83;
  swift_bridgeObjectRetain();
  unint64_t *v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x203AuLL, 0xE200000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v47 = (uint64_t *)(v43 + v26 + v91);
  uint64_t v48 = v76;
  *uint64_t v47 = v77;
  v47[1] = v48;
  swift_storeEnumTagMultiPayload();
  *(void *)(v42 + 32) = v43;
  uint64_t v49 = v85;
  uint64_t v50 = v92;
  *(void *)(v92 + 56) = v85;
  *(void *)(v50 + 64) = v46;
  *(void *)(v50 + 72) = v42;
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_25FA357C0;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = v89;
  uint64_t v53 = v26;
  int v54 = (void *)(v52 + v26);
  *int v54 = v49;
  v54[1] = v46;
  char v55 = v49;
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 32) = v52;
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = v93;
  uint64_t v57 = (void *)(v56 + v53);
  BOOL v58 = v90;
  unint64_t v59 = v88;
  *uint64_t v57 = v90;
  v57[1] = v59;
  swift_storeEnumTagMultiPayload();
  char v60 = (void *)((char *)v57 + v86);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *char v60 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x202CuLL, 0xE200000000000000);
  swift_storeEnumTagMultiPayload();
  unint64_t v61 = (void *)((char *)v57 + v91);
  *unint64_t v61 = v55;
  v61[1] = v46;
  swift_storeEnumTagMultiPayload();
  *(void *)(v51 + 40) = v56;
  uint64_t v62 = (uint64_t)v78;
  uint64_t v63 = (void *)v92;
  *(void *)(v92 + 80) = v58;
  v63[11] = v59;
  v63[12] = v51;
  uint64_t v94 = (uint64_t)v63;
  uint64_t v64 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v64);
  BOOL v65 = (void *)v94;
  uint64_t v66 = v79;
  static Grammar.string(wrapInQuotes:)(1, v79);
  uint64_t v67 = *(void *)(v66 + 32);
  swift_bridgeObjectRetain();
  outlined destroy of Grammar(v66, type metadata accessor for Grammar);
  uint64_t v94 = (uint64_t)v65;
  specialized Array.append<A>(contentsOf:)(v67);
  uint64_t v68 = v80;
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v94, 0, MEMORY[0x263F8EE78], v80);
  outlined init with take of Grammar((uint64_t)v68, v81, type metadata accessor for Grammar);
  return outlined destroy of Grammar(v62, type metadata accessor for Grammar);
}

uint64_t static Grammar.array(schema:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v67 = a3;
  uint64_t v5 = type metadata accessor for Grammar(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v66 = (uint64_t *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v53 - v8;
  BOOL v65 = (char *)&v53 - v8;
  static Grammar.grammar(for:with:wrapStringsInQuotes:)(a1, a2, 1);
  uint64_t v11 = (void *)*((void *)v9 + 2);
  uint64_t v69 = *((void *)v9 + 1);
  uint64_t v10 = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  uint64_t v71 = swift_allocObject();
  long long v64 = xmmword_25FA357C0;
  *(_OWORD *)(v71 + 16) = xmmword_25FA357C0;
  uint64_t v73 = 0x664F7961727241;
  unint64_t v74 = 0xE700000000000000;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v10;
  v12._unint64_t object = v11;
  String.append(_:)(v12);
  uint64_t v62 = (void *)v73;
  unint64_t v61 = v74;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  uint64_t v13 = swift_allocObject();
  long long v72 = xmmword_25FA357B0;
  *(_OWORD *)(v13 + 16) = xmmword_25FA357B0;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  uint64_t v15 = *(void *)(type metadata accessor for Symbol(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v60 = v18 + v16;
  uint64_t v68 = v17 | 7;
  uint64_t v53 = v14;
  uint64_t v19 = swift_allocObject();
  long long v59 = xmmword_25FA352B0;
  *(_OWORD *)(v19 + 16) = xmmword_25FA352B0;
  *(void *)(v19 + v18) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x5D5BuLL, 0xE200000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v55 = v13;
  *(void *)(v13 + 32) = v19;
  uint64_t v56 = 3 * v16;
  uint64_t v70 = 2 * v16;
  uint64_t v58 = v18 + 3 * v16;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = v72;
  *(void *)(v20 + v18) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x5BuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = (uint64_t *)(v20 + v18 + v16);
  *uint64_t v21 = v69;
  v21[1] = (uint64_t)v11;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  *(void *)(v20 + v18 + 2 * v16) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x5DuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  *(void *)(v13 + 40) = v20;
  uint64_t v54 = 4 * v16;
  uint64_t v22 = v16;
  uint64_t v57 = v16;
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_25FA357D0;
  uint64_t v24 = (unint64_t *)(v23 + v18);
  uint64_t v25 = v18;
  *uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x5BuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v26 = (uint64_t *)(v23 + v18 + v22);
  uint64_t v27 = v69;
  *uint64_t v26 = v69;
  v26[1] = (uint64_t)v11;
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = (unint64_t *)(v23 + v18 + v70);
  swift_bridgeObjectRetain();
  unint64_t *v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x202CuLL, 0xE200000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = (uint64_t *)(v23 + v18 + v56);
  uint64_t v73 = 0x664F7473694CLL;
  unint64_t v74 = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = v27;
  v30._unint64_t object = v11;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  unint64_t v31 = v74;
  uint64_t *v29 = v73;
  v29[1] = v31;
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = (unint64_t *)((char *)v24 + v54);
  *uint64_t v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x5DuLL, 0xE100000000000000);
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v55;
  *(void *)(v55 + 48) = v23;
  uint64_t v34 = v71;
  unint64_t v35 = v61;
  *(void *)(v71 + 32) = v62;
  *(void *)(v34 + 40) = v35;
  *(void *)(v34 + 48) = v33;
  uint64_t v73 = 0x664F7473694CLL;
  unint64_t v74 = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v36 = v27;
  v37._uint64_t countAndFlagsBits = v27;
  v37._unint64_t object = v11;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  uint64_t v62 = (void *)v73;
  unint64_t v61 = v74;
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = v64;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = v59;
  uint64_t v40 = (uint64_t *)(v39 + v25);
  *uint64_t v40 = v36;
  v40[1] = (uint64_t)v11;
  swift_storeEnumTagMultiPayload();
  *(void *)(v38 + 32) = v39;
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v72;
  uint64_t v42 = (uint64_t *)(v41 + v25);
  uint64_t v73 = 0x664F7473694CLL;
  unint64_t v74 = 0xE600000000000000;
  swift_bridgeObjectRetain_n();
  v43._uint64_t countAndFlagsBits = v36;
  v43._unint64_t object = v11;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  unint64_t v44 = v74;
  *uint64_t v42 = v73;
  v42[1] = v44;
  swift_storeEnumTagMultiPayload();
  uint64_t v45 = (unint64_t *)(v41 + v25 + v57);
  unint64_t *v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x202CuLL, 0xE200000000000000);
  swift_storeEnumTagMultiPayload();
  unint64_t v46 = (uint64_t *)(v41 + v25 + v70);
  *unint64_t v46 = v36;
  v46[1] = (uint64_t)v11;
  swift_storeEnumTagMultiPayload();
  *(void *)(v38 + 40) = v41;
  uint64_t v47 = (uint64_t)v65;
  uint64_t v48 = (void *)v71;
  unint64_t v49 = v61;
  *(void *)(v71 + 56) = v62;
  v48[8] = v49;
  v48[9] = v38;
  uint64_t v73 = (uint64_t)v48;
  uint64_t v50 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v50);
  uint64_t v51 = v66;
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v73, 0, MEMORY[0x263F8EE78], v66);
  outlined init with take of Grammar((uint64_t)v51, v67, type metadata accessor for Grammar);
  return outlined destroy of Grammar(v47, type metadata accessor for Grammar);
}

uint64_t static Grammar.oneOf(choices:with:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay29GenerativeFunctionsFoundation16GenerationSchemaO6ChoiceVG_SSs5NeverOTg509_s19Tokeng76Core7GrammarV5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29de13Foundation0B6h2O6I70VG_SDyAjCGztFZSSALcfu_32cce7deb5d5afe638d5ea480a0fbc1d0cALSSTf3nnnpk_nTf1cn_n(a1);
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay29GenerativeFunctionsFoundation16GenerationSchemaO6ChoiceVG_05TokenG4Core7GrammarVs5NeverOTg504_s19jg5Core7l64V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29de13Foundation0B6h2O6I22VG_SDyAjCGztFZAcLXEfU_ANXMtSDyAhNGTf1cn_n(a1, a2);
  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v21 = MEMORY[0x263F8EE78];
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(type metadata accessor for Grammar(0) - 8);
    uint64_t v11 = *(void *)(v10 + 72);
    unint64_t v12 = v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)) + 32;
    do
    {
      uint64_t v13 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v13);
      v12 += v11;
      --v9;
    }
    while (v9);
    uint64_t v8 = v21;
  }
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore7GrammarVG_SSs5NeverOTg504_s19de5Core7G182V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29GenerativeFunctionsFoundation0B6SchemaO6ChoiceVG_SDyAjCGztFZSSACcfu1_33_9505c99dfe7c0469d75fe5206cfe3972ACSSTf3nnnpk_nTf1cn_n(v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = v14;
  v17._unint64_t object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_25FA352B0;
  uint64_t v19 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySSGSay19TokenGenerationCore7GrammarVGG_AI6ChoiceVs5NeverOTg506_sSS19fg5Core7i4VAA6j17VIggnr_SS_ACtAEs5k157OIegnrzr_TR04_s19ab5Core7d104V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29GenerativeFunctionsFoundation0B6SchemaO6E30VG_SDyAjCGztFZAaKVSS_R16XEfU0_Tf3nnnpf_nTf1cn_n(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v18 + 32) = 0x5F664F656E4FLL;
  *(void *)(v18 + 40) = 0xE600000000000000;
  *(void *)(v18 + 48) = v19;
  specialized Array.append<A>(contentsOf:)(v8);
  return Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((void *)v18, 0, MEMORY[0x263F8EE78], a3);
}

uint64_t closure #1 in static Grammar.jsonObject(fields:with:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  unint64_t v44 = a3;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: GenerationSchema.Field));
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  *(void *)&long long v50 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (void *)((char *)v40 - v10);
  uint64_t v12 = type metadata accessor for Symbol(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  Swift::String v43 = (void *)((char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  Swift::String v17 = (void *)((char *)v40 - v16);
  uint64_t v18 = *a1;
  unint64_t *v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x7BuLL, 0xE100000000000000);
  uint64_t v42 = v17;
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v20 = *(void *)(v18 + 16);
  swift_bridgeObjectRetain();
  if (v20)
  {
    v40[0] = v4;
    v40[2] = v12;
    uint64_t v41 = v13;
    uint64_t v49 = v20;
    uint64_t v21 = type metadata accessor for GenerationSchema.Field();
    uint64_t v22 = 0;
    uint64_t v23 = *(void *)(v21 - 8);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
    uint64_t v47 = a2;
    uint64_t v48 = v24;
    uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
    v40[1] = v18;
    uint64_t v26 = v18 + ((v25 + 32) & ~v25);
    uint64_t v45 = *(void *)(v23 + 72);
    uint64_t v46 = v23 + 16;
    uint64_t v27 = (void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
    do
    {
      uint64_t v28 = v50 + *(int *)(v7 + 48);
      v48(v28, v26, v21);
      uint64_t v29 = (uint64_t)v11 + *(int *)(v7 + 48);
      *uint64_t v11 = v22;
      (*v27)(v29, v28, v21);
      unint64_t v30 = closure #1 in closure #1 in static Grammar.jsonObject(fields:with:)(v22, v29, v47);
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v11, &demangling cache variable for type metadata for (offset: Int, element: GenerationSchema.Field));
      specialized Array.append<A>(contentsOf:)(v30);
      v26 += v45;
      ++v22;
    }
    while (v49 != v22);
    uint64_t v19 = v51;
    uint64_t v13 = v41;
    uint64_t v4 = v40[0];
  }
  swift_bridgeObjectRelease();
  unint64_t v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x7DuLL, 0xE100000000000000);
  uint64_t v49 = v4;
  uint64_t v32 = (uint64_t)v43;
  unint64_t *v43 = v31;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  unint64_t v33 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v34 = swift_allocObject();
  long long v50 = xmmword_25FA352B0;
  *(_OWORD *)(v34 + 16) = xmmword_25FA352B0;
  uint64_t v35 = (uint64_t)v42;
  _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v42, v34 + v33, type metadata accessor for Symbol);
  uint64_t v51 = v34;
  specialized Array.append<A>(contentsOf:)(v19);
  uint64_t v36 = v51;
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = v50;
  _s19TokenGenerationCore7GrammarVWOcTm_0(v32, v37 + v33, type metadata accessor for Symbol);
  uint64_t v51 = v36;
  specialized Array.append<A>(contentsOf:)(v37);
  uint64_t v38 = v51;
  outlined destroy of Grammar(v32, type metadata accessor for Symbol);
  uint64_t result = outlined destroy of Grammar(v35, type metadata accessor for Symbol);
  uint64_t *v44 = v38;
  return result;
}

unint64_t closure #1 in closure #1 in static Grammar.jsonObject(fields:with:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = type metadata accessor for Symbol(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (unint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (unint64_t *)((char *)&v29 - v12);
  unint64_t result = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *a3;
  if (!*(void *)(v17 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) == 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v19 = *(void *)(v17 + 56);
  uint64_t v29 = v7;
  uint64_t v20 = *(void *)(v7 + 72);
  _s19TokenGenerationCore7GrammarVWOcTm_0(v19 + v20 * result, (uint64_t)v16, type metadata accessor for Symbol);
  if (a1) {
    unint64_t v21 = 8236;
  }
  else {
    unint64_t v21 = 0;
  }
  if (a1) {
    unint64_t v22 = 0xE200000000000000;
  }
  else {
    unint64_t v22 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  unint64_t v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(v21, v22);
  swift_bridgeObjectRelease();
  unint64_t *v13 = v23;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  unint64_t v30 = 34;
  unint64_t v31 = 0xE100000000000000;
  v24._uint64_t countAndFlagsBits = GenerationSchema.Field.name.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 2112034;
  v25._unint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v25);
  *uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(v30, v31);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  unint64_t v26 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_25FA357B0;
  uint64_t v28 = v27 + v26;
  _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v13, v28, type metadata accessor for Symbol);
  _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v10, v28 + v20, type metadata accessor for Symbol);
  _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v16, v28 + 2 * v20, type metadata accessor for Symbol);
  outlined destroy of Grammar((uint64_t)v10, type metadata accessor for Symbol);
  outlined destroy of Grammar((uint64_t)v13, type metadata accessor for Symbol);
  outlined destroy of Grammar((uint64_t)v16, type metadata accessor for Symbol);
  return v27;
}

uint64_t recurse #1 (node:path:) in static Grammar.fieldCombinations(for:)(uint64_t a1, unint64_t *a2, void **a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.Field?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for GenerationSchema.Field();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = (unint64_t *)(a1
                           + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_children);
  swift_beginAccess();
  if (*v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v22)
    {
LABEL_3:
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, a1+ OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_field, v9);
      unint64_t v14 = *a2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, v14);
      }
      unint64_t v16 = *(void *)(v14 + 16);
      unint64_t v15 = *(void *)(v14 + 24);
      if (v16 >= v15 >> 1) {
        unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1, v14);
      }
      *(void *)(v14 + 16) = v16 + 1;
      uint64_t v17 = *(void (**)(unint64_t, unsigned char *, uint64_t))(v10 + 32);
      v10 += 32;
      v17(v14+ ((*(unsigned __int8 *)(v10 + 48) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 48))+ *(void *)(v10 + 40) * v16, v12, v9);
      *a2 = v14;
      unint64_t v18 = *v13;
      if (*v13 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        if (v19) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v19)
        {
LABEL_9:
          if (v19 >= 1)
          {
            for (uint64_t i = 0; i != v19; ++i)
            {
              if ((v18 & 0xC000000000000001) != 0)
              {
                uint64_t v21 = MEMORY[0x261202D30](i, v18);
              }
              else
              {
                uint64_t v21 = *(void *)(v18 + 8 * i + 32);
                swift_retain();
              }
              recurse #1 (node:path:) in static Grammar.fieldCombinations(for:)(v21, a2, a3);
              swift_release();
            }
            goto LABEL_28;
          }
          __break(1u);
          goto LABEL_30;
        }
      }
LABEL_28:
      swift_bridgeObjectRelease();
      specialized RangeReplaceableCollection<>.popLast()(v8);
      return outlined destroy of SingleValueDecodingContainer?((uint64_t)v8, &demangling cache variable for type metadata for GenerationSchema.Field?);
    }
  }
  else if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  a2 = (unint64_t *)*a2;
  unint64_t v18 = a2[2];
  if (!v18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v23 = swift_dynamicCastClass();
  if (!v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = MEMORY[0x263F8EE78];
  }
  a3 += 2;
  uint64_t v24 = *(void *)(v23 + 16);
  swift_release();
  if (v24 == v18 - 1)
  {
    uint64_t v25 = swift_dynamicCastClass();
    if (!v25)
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = MEMORY[0x263F8EE78];
    }
    goto LABEL_22;
  }
LABEL_31:
  swift_bridgeObjectRelease();
  uint64_t v25 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)a2, (uint64_t)a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), 1, (2 * v18) | 1);
LABEL_22:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v26 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
    *a3 = v26;
  }
  unint64_t v29 = v26[2];
  unint64_t v28 = v26[3];
  if (v29 >= v28 >> 1)
  {
    unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v26);
    *a3 = v26;
  }
  v26[2] = v29 + 1;
  v26[v29 + 4] = v25;
  return swift_endAccess();
}

uint64_t __deallocating_deinit in Node #1 in static Grammar.fieldCombinations(for:)()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_field;
  uint64_t v2 = type metadata accessor for GenerationSchema.Field();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t ObjC metadata update function for Node #1 in static Grammar.fieldCombinations(for:)()
{
  return type metadata accessor for Node #1 in static Grammar.fieldCombinations(for:)();
}

uint64_t type metadata accessor for Node #1 in static Grammar.fieldCombinations(for:)()
{
  uint64_t result = type metadata singleton initialization cache for Node #1 in static Grammar.fieldCombinations(for:);
  if (!type metadata singleton initialization cache for Node #1 in static Grammar.fieldCombinations(for:)) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for Node #1 in static Grammar.fieldCombinations(for:)()
{
  uint64_t result = type metadata accessor for GenerationSchema.Field();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for GenerationSchema();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for Grammar(0);
    uint64_t v20 = *(void *)(v13 - 8);
    outlined init with take of Grammar(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for Grammar);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Grammar(0);
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenerationSchema();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        lazy protocol witness table accessor for type GenerationSchema and conformance GenerationSchema(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for Grammar(0) - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type GenerationSchema and conformance GenerationSchema(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for GenerationSchema();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of GenerationSchema.StringConstraint?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v106 = result;
  uint64_t v103 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v105 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v103;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 24 * v98), (char *)(v95 + 24 * *(void *)&v94[16 * v12 + 16]), v95 + 24 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          char v100 = &v97[16 * v96 + 32];
          *(void *)char v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v105 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v105 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v105 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v104 = *a1 + 8;
  uint64_t v102 = *a1 - 24;
  unint64_t v11 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v107 = v3;
  uint64_t v108 = v10;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    unint64_t v14 = (uint64_t *)(v10 + 24 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 24 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v104 + 24 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 24 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 3;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 24 * v20;
        uint64_t v26 = 24 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v26;
            uint64_t v30 = v10 + v25;
            uint64_t v31 = *(void *)(v10 + v26);
            long long v32 = *(_OWORD *)(v10 + v26 + 8);
            long long v33 = *(_OWORD *)(v10 + v25 - 24);
            *(void *)(v29 + 16) = *(void *)(v10 + v25 - 8);
            *(_OWORD *)uint64_t v29 = v33;
            *(void *)(v30 - 24) = v31;
            *(_OWORD *)(v30 - 16) = v32;
          }
          ++v28;
          v25 -= 24;
          v26 += 24;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v106) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v45 = *((void *)v11 + 2);
    unint64_t v44 = *((void *)v11 + 3);
    unint64_t v12 = v45 + 1;
    if (v45 >= v44 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v46 = v11 + 32;
    uint64_t v47 = &v11[16 * v45 + 32];
    *(void *)uint64_t v47 = v13;
    *((void *)v47 + 1) = v9;
    if (v45)
    {
      uint64_t v10 = v108;
      while (1)
      {
        unint64_t v48 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v53 = &v46[16 * v12];
          uint64_t v54 = *((void *)v53 - 8);
          uint64_t v55 = *((void *)v53 - 7);
          BOOL v59 = __OFSUB__(v55, v54);
          uint64_t v56 = v55 - v54;
          if (v59) {
            goto LABEL_135;
          }
          uint64_t v58 = *((void *)v53 - 6);
          uint64_t v57 = *((void *)v53 - 5);
          BOOL v59 = __OFSUB__(v57, v58);
          uint64_t v51 = v57 - v58;
          char v52 = v59;
          if (v59) {
            goto LABEL_136;
          }
          unint64_t v60 = v12 - 2;
          unint64_t v61 = &v46[16 * v12 - 32];
          uint64_t v63 = *(void *)v61;
          uint64_t v62 = *((void *)v61 + 1);
          BOOL v59 = __OFSUB__(v62, v63);
          uint64_t v64 = v62 - v63;
          if (v59) {
            goto LABEL_138;
          }
          BOOL v59 = __OFADD__(v51, v64);
          uint64_t v65 = v51 + v64;
          if (v59) {
            goto LABEL_141;
          }
          if (v65 >= v56)
          {
            unint64_t v83 = &v46[16 * v48];
            uint64_t v85 = *(void *)v83;
            uint64_t v84 = *((void *)v83 + 1);
            BOOL v59 = __OFSUB__(v84, v85);
            uint64_t v86 = v84 - v85;
            if (v59) {
              goto LABEL_145;
            }
            BOOL v76 = v51 < v86;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v77 = *((void *)v11 + 4);
            uint64_t v78 = *((void *)v11 + 5);
            BOOL v59 = __OFSUB__(v78, v77);
            uint64_t v70 = v78 - v77;
            char v71 = v59;
            goto LABEL_99;
          }
          uint64_t v50 = *((void *)v11 + 4);
          uint64_t v49 = *((void *)v11 + 5);
          BOOL v59 = __OFSUB__(v49, v50);
          uint64_t v51 = v49 - v50;
          char v52 = v59;
        }
        if (v52) {
          goto LABEL_137;
        }
        unint64_t v60 = v12 - 2;
        uint64_t v66 = &v46[16 * v12 - 32];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v69 = __OFSUB__(v67, v68);
        uint64_t v70 = v67 - v68;
        char v71 = v69;
        if (v69) {
          goto LABEL_140;
        }
        long long v72 = &v46[16 * v48];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v59 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v59) {
          goto LABEL_143;
        }
        if (__OFADD__(v70, v75)) {
          goto LABEL_144;
        }
        if (v70 + v75 >= v51)
        {
          BOOL v76 = v51 < v75;
LABEL_105:
          if (v76) {
            unint64_t v48 = v60;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v71) {
          goto LABEL_139;
        }
        uint64_t v79 = &v46[16 * v48];
        uint64_t v81 = *(void *)v79;
        uint64_t v80 = *((void *)v79 + 1);
        BOOL v59 = __OFSUB__(v80, v81);
        uint64_t v82 = v80 - v81;
        if (v59) {
          goto LABEL_142;
        }
        if (v82 < v70) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v87 = v48 - 1;
        if (v48 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v88 = v10;
        long long v89 = &v46[16 * v87];
        uint64_t v90 = *(void *)v89;
        uint64_t v91 = &v46[16 * v48];
        uint64_t v92 = *((void *)v91 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v88 + 24 * *(void *)v89), (char *)(v88 + 24 * *(void *)v91), v88 + 24 * v92, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v92 < v90) {
          goto LABEL_132;
        }
        if (v48 > *((void *)v11 + 2)) {
          goto LABEL_133;
        }
        *(void *)long long v89 = v90;
        *(void *)&v46[16 * v87 + 8] = v92;
        unint64_t v93 = *((void *)v11 + 2);
        if (v48 >= v93) {
          goto LABEL_134;
        }
        unint64_t v12 = v93 - 1;
        memmove(&v46[16 * v48], v91 + 16, 16 * (v93 - 1 - v48));
        *((void *)v11 + 2) = v93 - 1;
        BOOL v76 = v93 > 2;
        uint64_t v10 = v108;
        if (!v76) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
    uint64_t v10 = v108;
LABEL_15:
    Swift::Int v3 = v107;
    if (v9 >= v107)
    {
      uint64_t v8 = v105;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v106)) {
    goto LABEL_153;
  }
  if (v13 + v106 >= v3) {
    Swift::Int v34 = v3;
  }
  else {
    Swift::Int v34 = v13 + v106;
  }
  if (v34 >= v13)
  {
    if (v9 != v34)
    {
      uint64_t v35 = v102 + 24 * v9;
      do
      {
        uint64_t v36 = (uint64_t *)(v10 + 24 * v9);
        uint64_t v37 = *v36;
        uint64_t v38 = v36[1];
        Swift::Int v39 = v13;
        uint64_t v40 = v35;
        do
        {
          BOOL v41 = v37 == *(void *)v40 && v38 == *(void *)(v40 + 8);
          if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          long long v42 = *(_OWORD *)(v40 + 32);
          uint64_t v43 = *(void *)(v40 + 16);
          uint64_t v37 = *(void *)(v40 + 24);
          *(_OWORD *)(v40 + 24) = *(_OWORD *)v40;
          *(void *)(v40 + 40) = v43;
          *(void *)uint64_t v40 = v37;
          *(_OWORD *)(v40 + 8) = v42;
          uint64_t v38 = v42;
          v40 -= 24;
          ++v39;
        }
        while (v9 != v39);
        ++v9;
        v35 += 24;
      }
      while (v9 != v34);
      Swift::Int v9 = v34;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v19;
  Swift::Int v20;
  void *v21;
  Swift::Int v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  void *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          char v100 = &v97[16 * v96 + 32];
          *(void *)char v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  unint64_t v11 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    unint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    BOOL v41 = *((void *)v11 + 2);
    uint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    long long v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          uint64_t v55 = __OFSUB__(v51, v50);
          char v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          uint64_t v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          unint64_t v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          uint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          BOOL v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          uint64_t v55 = __OFSUB__(v58, v59);
          unint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          uint64_t v55 = __OFADD__(v47, v60);
          unint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            uint64_t v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            long long v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            uint64_t v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            uint64_t v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          unint64_t v45 = *((void *)v11 + 5);
          uint64_t v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          unint64_t v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        uint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        uint64_t v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        uint64_t v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        BOOL v69 = *((void *)v68 + 1);
        uint64_t v55 = __OFSUB__(v69, v70);
        char v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          long long v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        BOOL v76 = *((void *)v75 + 1);
        uint64_t v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        unint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        long long v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        unint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        long long v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    long long v32 = v3;
  }
  else {
    long long v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      long long v33 = (void *)(v10 + 16 * v9);
      do
      {
        Swift::Int v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        uint64_t v37 = v13;
        uint64_t v38 = v33;
        do
        {
          Swift::Int v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long long v24;
  uint64_t v25;
  Swift::Int v26;
  void *v27;
  Swift::Int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  Swift::Int v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  char *__dst;
  Swift::Int v106;
  char *v107;
  uint64_t v108;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_132;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_140;
  }
  uint64_t v104 = v3;
  unint64_t v101 = result;
  uint64_t v108 = v1;
  uint64_t v97 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    char v100 = MEMORY[0x263F8EE78];
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_99:
      if (v11 >= 2)
      {
        uint64_t v90 = *v97;
        do
        {
          uint64_t v91 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_127;
          }
          if (!v90) {
            goto LABEL_139;
          }
          uint64_t v92 = *(void *)&v8[16 * v91 + 32];
          unint64_t v93 = *(void *)&v8[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v90 + 24 * v92), (char *)(v90 + 24 * *(void *)&v8[16 * v11 + 16]), v90 + 24 * v93, __dst);
          if (v108) {
            break;
          }
          if (v93 < v92) {
            goto LABEL_128;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
          }
          if (v91 >= *((void *)v8 + 2)) {
            goto LABEL_129;
          }
          uint64_t v94 = &v8[16 * v91 + 32];
          *(void *)uint64_t v94 = v92;
          *((void *)v94 + 1) = v93;
          uint64_t v95 = *((void *)v8 + 2);
          if (v11 > v95) {
            goto LABEL_130;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v95 - v11));
          *((void *)v8 + 2) = v95 - 1;
          unint64_t v11 = v95 - 1;
        }
        while (v95 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      *(void *)(v100 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenID: Int, tokenText: String));
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v104;
    char v100 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v98 = *a1 + 64;
  unint64_t v96 = *a1 + 16;
  uint64_t v8 = (char *)MEMORY[0x263F8EE78];
  while (1)
  {
    unint64_t v12 = v9++;
    Swift::Int v106 = v12;
    if (v9 < v3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v102 = String.count.getter();
      Swift::Int v13 = String.count.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        unint64_t v14 = v98 + 24 * v12;
        while (1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v15 = String.count.getter();
          uint64_t v16 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v102 < v13 == v15 >= v16) {
            break;
          }
          v14 += 24;
          ++v9;
          Swift::Int v3 = v104;
          if (v104 == v9)
          {
            Swift::Int v9 = v104;
            goto LABEL_22;
          }
        }
        Swift::Int v3 = v104;
LABEL_22:
        unint64_t v12 = v106;
      }
      if (v102 < v13)
      {
        if (v9 < v12) {
          goto LABEL_133;
        }
        if (v12 < v9)
        {
          uint64_t v17 = 24 * v9;
          int64_t v18 = 24 * v12;
          int v19 = v9;
          Swift::Int v20 = v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_138;
              }
              uint64_t v21 = v10 + v18;
              Swift::Int v22 = v10 + v17;
              uint64_t v23 = *(void *)(v10 + v18 + 16);
              uint64_t v24 = *(_OWORD *)(v10 + v18);
              uint64_t v25 = *(void *)(v10 + v17 - 8);
              *(_OWORD *)uint64_t v21 = *(_OWORD *)(v10 + v17 - 24);
              *(void *)(v21 + 16) = v25;
              *(_OWORD *)(v22 - 24) = v24;
              *(void *)(v22 - 8) = v23;
            }
            ++v20;
            v17 -= 24;
            v18 += 24;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v12)) {
        goto LABEL_131;
      }
      if (v9 - v12 < v101) {
        break;
      }
    }
LABEL_48:
    if (v9 < v12) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    uint64_t v38 = *((void *)v8 + 2);
    uint64_t v37 = *((void *)v8 + 3);
    unint64_t v11 = v38 + 1;
    if (v38 >= v37 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v11;
    Swift::Int v107 = v8 + 32;
    Swift::Int v39 = &v8[16 * v38 + 32];
    *(void *)Swift::Int v39 = v12;
    *((void *)v39 + 1) = v9;
    if (v38)
    {
      uint64_t v40 = v8 + 32;
      while (1)
      {
        BOOL v41 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v46 = &v40[16 * v11];
          uint64_t v47 = *((void *)v46 - 8);
          unint64_t v48 = *((void *)v46 - 7);
          char v52 = __OFSUB__(v48, v47);
          uint64_t v49 = v48 - v47;
          if (v52) {
            goto LABEL_115;
          }
          uint64_t v51 = *((void *)v46 - 6);
          uint64_t v50 = *((void *)v46 - 5);
          char v52 = __OFSUB__(v50, v51);
          unint64_t v44 = v50 - v51;
          unint64_t v45 = v52;
          if (v52) {
            goto LABEL_116;
          }
          uint64_t v53 = v11 - 2;
          uint64_t v54 = &v40[16 * v11 - 32];
          uint64_t v56 = *(void *)v54;
          uint64_t v55 = *((void *)v54 + 1);
          char v52 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          if (v52) {
            goto LABEL_118;
          }
          char v52 = __OFADD__(v44, v57);
          uint64_t v58 = v44 + v57;
          if (v52) {
            goto LABEL_121;
          }
          if (v58 >= v49)
          {
            BOOL v76 = &v40[16 * v41];
            uint64_t v78 = *(void *)v76;
            uint64_t v77 = *((void *)v76 + 1);
            char v52 = __OFSUB__(v77, v78);
            uint64_t v79 = v77 - v78;
            if (v52) {
              goto LABEL_125;
            }
            BOOL v69 = v44 < v79;
            goto LABEL_86;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v70 = *((void *)v8 + 4);
            char v71 = *((void *)v8 + 5);
            char v52 = __OFSUB__(v71, v70);
            uint64_t v63 = v71 - v70;
            uint64_t v64 = v52;
            goto LABEL_80;
          }
          uint64_t v43 = *((void *)v8 + 4);
          long long v42 = *((void *)v8 + 5);
          char v52 = __OFSUB__(v42, v43);
          unint64_t v44 = v42 - v43;
          unint64_t v45 = v52;
        }
        if (v45) {
          goto LABEL_117;
        }
        uint64_t v53 = v11 - 2;
        BOOL v59 = &v40[16 * v11 - 32];
        unint64_t v61 = *(void *)v59;
        unint64_t v60 = *((void *)v59 + 1);
        uint64_t v62 = __OFSUB__(v60, v61);
        uint64_t v63 = v60 - v61;
        uint64_t v64 = v62;
        if (v62) {
          goto LABEL_120;
        }
        uint64_t v65 = &v40[16 * v41];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        char v52 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v52) {
          goto LABEL_123;
        }
        if (__OFADD__(v63, v68)) {
          goto LABEL_124;
        }
        if (v63 + v68 >= v44)
        {
          BOOL v69 = v44 < v68;
LABEL_86:
          if (v69) {
            BOOL v41 = v53;
          }
          goto LABEL_88;
        }
LABEL_80:
        if (v64) {
          goto LABEL_119;
        }
        long long v72 = &v40[16 * v41];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        char v52 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v52) {
          goto LABEL_122;
        }
        if (v75 < v63) {
          goto LABEL_14;
        }
LABEL_88:
        uint64_t v80 = v41 - 1;
        if (v41 - 1 >= v11)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        uint64_t v81 = v10;
        if (!v10) {
          goto LABEL_137;
        }
        uint64_t v82 = v8;
        unint64_t v83 = v40;
        uint64_t v84 = &v40[16 * v80];
        uint64_t v85 = *(void *)v84;
        uint64_t v86 = &v83[16 * v41];
        unint64_t v87 = *((void *)v86 + 1);
        uint64_t v88 = v81;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v81 + 24 * *(void *)v84), (char *)(v81 + 24 * *(void *)v86), v81 + 24 * v87, __dst);
        if (v108) {
          goto LABEL_110;
        }
        if (v87 < v85) {
          goto LABEL_112;
        }
        if (v41 > *((void *)v82 + 2)) {
          goto LABEL_113;
        }
        *(void *)uint64_t v84 = v85;
        uint64_t v40 = v107;
        *(void *)&v107[16 * v80 + 8] = v87;
        long long v89 = *((void *)v82 + 2);
        if (v41 >= v89) {
          goto LABEL_114;
        }
        uint64_t v8 = v82;
        unint64_t v11 = v89 - 1;
        memmove(v86, v86 + 16, 16 * (v89 - 1 - v41));
        *((void *)v82 + 2) = v89 - 1;
        uint64_t v10 = v88;
        if (v89 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_14:
    Swift::Int v3 = v104;
    if (v9 >= v104) {
      goto LABEL_99;
    }
  }
  if (__OFADD__(v12, v101)) {
    goto LABEL_134;
  }
  if (v12 + v101 >= v3) {
    uint64_t v26 = v3;
  }
  else {
    uint64_t v26 = v12 + v101;
  }
  if (v26 >= v12)
  {
    if (v9 != v26)
    {
      uint64_t v99 = v8;
      Swift::Int v27 = (void *)(v96 + 24 * v9);
      uint64_t v103 = v26;
      do
      {
        Swift::Int v28 = v12;
        uint64_t v29 = v27;
        do
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v30 = String.count.getter();
          uint64_t v31 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v30 >= v31) {
            break;
          }
          if (!v10) {
            goto LABEL_136;
          }
          long long v32 = v29 - 2;
          long long v33 = v29 - 5;
          Swift::Int v34 = *(v29 - 3);
          *(v29 - 3) = *v29;
          v29 -= 3;
          uint64_t v35 = v29[1];
          uint64_t v36 = v29[2];
          *(_OWORD *)long long v32 = *v33;
          v32[2] = v34;
          *(v29 - 2) = v35;
          *(v29 - 1) = v36;
          ++v28;
        }
        while (v9 != v28);
        ++v9;
        v27 += 3;
        unint64_t v12 = v106;
      }
      while (v9 != v103);
      Swift::Int v9 = v103;
      uint64_t v8 = v99;
    }
    goto LABEL_48;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  Swift::Int v20;
  void *v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t *v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  Swift::Int v108;
  uint64_t v109;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v107 = result;
  uint64_t v104 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      unint64_t v96 = v11;
      Swift::Int v106 = v8;
      if (v12 >= 2)
      {
        uint64_t v97 = *v104;
        do
        {
          uint64_t v98 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v97) {
            goto LABEL_159;
          }
          uint64_t v99 = v96;
          char v100 = *(void *)&v96[16 * v98 + 32];
          unint64_t v101 = *(void *)&v96[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v97 + 24 * v100), (char *)(v97 + 24 * *(void *)&v96[16 * v12 + 16]), v97 + 24 * v101, __dst);
          if (v1) {
            break;
          }
          if (v101 < v100) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v99);
          }
          if (v98 >= *((void *)v99 + 2)) {
            goto LABEL_149;
          }
          uint64_t v102 = &v99[16 * v98 + 32];
          *(void *)uint64_t v102 = v100;
          *((void *)v102 + 1) = v101;
          uint64_t v103 = *((void *)v99 + 2);
          if (v12 > v103) {
            goto LABEL_150;
          }
          memmove(&v99[16 * v12 + 16], &v99[16 * v12 + 32], 16 * (v103 - v12));
          unint64_t v96 = v99;
          *((void *)v99 + 2) = v103 - 1;
          unint64_t v12 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    Swift::Int v106 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenID: Int, tokenText: String));
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v106 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v105 = *a1 + 16;
  unint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v108 = v3;
  uint64_t v109 = v10;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    unint64_t v14 = v10 + 24 * v9;
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
    uint64_t v17 = v10 + 24 * v13;
    if (v15 == *(void *)(v17 + 8) && v16 == *(void *)(v17 + 16))
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v105 + 24 * v20);
    do
    {
      uint64_t v23 = v10 + 24 * v9;
      if (*(v21 - 1) == *(void *)(v23 + 8) && *v21 == *(void *)(v23 + 16))
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      Swift::Int v22 = v20 + 1;
      v21 += 3;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 24 * v20;
        uint64_t v26 = 24 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v26;
            uint64_t v30 = v10 + v25;
            uint64_t v31 = *(void *)(v10 + v26 + 16);
            long long v32 = *(_OWORD *)(v10 + v26);
            long long v33 = *(void *)(v10 + v25 - 8);
            *(_OWORD *)uint64_t v29 = *(_OWORD *)(v10 + v25 - 24);
            *(void *)(v29 + 16) = v33;
            *(_OWORD *)(v30 - 24) = v32;
            *(void *)(v30 - 8) = v31;
          }
          ++v28;
          v25 -= 24;
          v26 += 24;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v107) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    uint64_t v47 = *((void *)v11 + 2);
    uint64_t v46 = *((void *)v11 + 3);
    unint64_t v12 = v47 + 1;
    if (v47 >= v46 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    unint64_t v48 = v11 + 32;
    uint64_t v49 = &v11[16 * v47 + 32];
    *(void *)uint64_t v49 = v13;
    *((void *)v49 + 1) = v9;
    if (v47)
    {
      uint64_t v10 = v109;
      while (1)
      {
        uint64_t v50 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v55 = &v48[16 * v12];
          uint64_t v56 = *((void *)v55 - 8);
          uint64_t v57 = *((void *)v55 - 7);
          unint64_t v61 = __OFSUB__(v57, v56);
          uint64_t v58 = v57 - v56;
          if (v61) {
            goto LABEL_135;
          }
          unint64_t v60 = *((void *)v55 - 6);
          BOOL v59 = *((void *)v55 - 5);
          unint64_t v61 = __OFSUB__(v59, v60);
          uint64_t v53 = v59 - v60;
          uint64_t v54 = v61;
          if (v61) {
            goto LABEL_136;
          }
          uint64_t v62 = v12 - 2;
          uint64_t v63 = &v48[16 * v12 - 32];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          unint64_t v61 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v61) {
            goto LABEL_138;
          }
          unint64_t v61 = __OFADD__(v53, v66);
          uint64_t v67 = v53 + v66;
          if (v61) {
            goto LABEL_141;
          }
          if (v67 >= v58)
          {
            uint64_t v85 = &v48[16 * v50];
            unint64_t v87 = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            unint64_t v61 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v61) {
              goto LABEL_145;
            }
            uint64_t v78 = v53 < v88;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v79 = *((void *)v11 + 4);
            uint64_t v80 = *((void *)v11 + 5);
            unint64_t v61 = __OFSUB__(v80, v79);
            long long v72 = v80 - v79;
            uint64_t v73 = v61;
            goto LABEL_99;
          }
          char v52 = *((void *)v11 + 4);
          uint64_t v51 = *((void *)v11 + 5);
          unint64_t v61 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          uint64_t v54 = v61;
        }
        if (v54) {
          goto LABEL_137;
        }
        uint64_t v62 = v12 - 2;
        uint64_t v68 = &v48[16 * v12 - 32];
        uint64_t v70 = *(void *)v68;
        BOOL v69 = *((void *)v68 + 1);
        char v71 = __OFSUB__(v69, v70);
        long long v72 = v69 - v70;
        uint64_t v73 = v71;
        if (v71) {
          goto LABEL_140;
        }
        uint64_t v74 = &v48[16 * v50];
        BOOL v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        unint64_t v61 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v61) {
          goto LABEL_143;
        }
        if (__OFADD__(v72, v77)) {
          goto LABEL_144;
        }
        if (v72 + v77 >= v53)
        {
          uint64_t v78 = v53 < v77;
LABEL_105:
          if (v78) {
            uint64_t v50 = v62;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v73) {
          goto LABEL_139;
        }
        uint64_t v81 = &v48[16 * v50];
        unint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        unint64_t v61 = __OFSUB__(v82, v83);
        uint64_t v84 = v82 - v83;
        if (v61) {
          goto LABEL_142;
        }
        if (v84 < v72) {
          goto LABEL_15;
        }
LABEL_107:
        long long v89 = v50 - 1;
        if (v50 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v90 = v10;
        uint64_t v91 = &v48[16 * v89];
        uint64_t v92 = *(void *)v91;
        unint64_t v93 = &v48[16 * v50];
        uint64_t v94 = *((void *)v93 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v90 + 24 * *(void *)v91), (char *)(v90 + 24 * *(void *)v93), v90 + 24 * v94, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v94 < v92) {
          goto LABEL_132;
        }
        if (v50 > *((void *)v11 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v91 = v92;
        *(void *)&v48[16 * v89 + 8] = v94;
        uint64_t v95 = *((void *)v11 + 2);
        if (v50 >= v95) {
          goto LABEL_134;
        }
        unint64_t v12 = v95 - 1;
        memmove(&v48[16 * v50], v93 + 16, 16 * (v95 - 1 - v50));
        *((void *)v11 + 2) = v95 - 1;
        uint64_t v78 = v95 > 2;
        uint64_t v10 = v109;
        if (!v78) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
    uint64_t v10 = v109;
LABEL_15:
    Swift::Int v3 = v108;
    if (v9 >= v108)
    {
      uint64_t v8 = v106;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v107)) {
    goto LABEL_153;
  }
  if (v13 + v107 >= v3) {
    Swift::Int v34 = v3;
  }
  else {
    Swift::Int v34 = v13 + v107;
  }
  if (v34 >= v13)
  {
    if (v9 != v34)
    {
      uint64_t v35 = (uint64_t *)(v105 + 24 * v9);
      do
      {
        uint64_t v36 = v10 + 24 * v9;
        uint64_t v37 = *(void *)(v36 + 8);
        uint64_t v38 = *(void *)(v36 + 16);
        Swift::Int v39 = v13;
        uint64_t v40 = v35;
        do
        {
          BOOL v41 = v37 == *(v40 - 4) && v38 == *(v40 - 3);
          if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          long long v42 = v40 - 2;
          uint64_t v43 = v40 - 5;
          uint64_t v38 = *v40;
          unint64_t v44 = *(v40 - 3);
          *(v40 - 3) = *v40;
          v40 -= 3;
          unint64_t v45 = v40[1];
          uint64_t v37 = v40[2];
          *(_OWORD *)long long v42 = *(_OWORD *)v43;
          v42[2] = v44;
          *(v40 - 2) = v45;
          *(v40 - 1) = v37;
          ++v39;
        }
        while (v9 != v39);
        ++v9;
        v35 += 3;
      }
      while (v9 != v34);
      Swift::Int v9 = v34;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  Swift::Int v31;
  void *v32;
  uint64_t v33;
  Swift::Int v34;
  void *v35;
  _OWORD *v36;
  long long v37;
  long long v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  long long v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  Swift::Int v115;
  Swift::Int v116;
  uint64_t v117;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v92 = 0;
      unint64_t v93 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v95 = *(void *)(v93 + 32 * i + 24);
        unint64_t v96 = v92;
        do
        {
          uint64_t v97 = v93 + v96;
          if (v95 >= *(void *)(v93 + v96 + 24)) {
            break;
          }
          if (!v93) {
            goto LABEL_140;
          }
          uint64_t v98 = *(void *)(v97 + 32);
          uint64_t v99 = (void *)(v93 + v96);
          char v100 = *(void *)(v93 + v96 + 40);
          unint64_t v101 = *(void *)(v93 + v96 + 48);
          uint64_t v102 = *(_OWORD *)(v97 + 16);
          *(_OWORD *)(v97 + 32) = *(_OWORD *)v97;
          *(_OWORD *)(v97 + 48) = v102;
          *uint64_t v99 = v98;
          v99[1] = v100;
          v99[2] = v101;
          *(void *)(v97 + 24) = v95;
          v96 -= 32;
        }
        while (v96 != -32);
        v92 += 32;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v6 = result;
  uint64_t v112 = a1;
  if (v3 < 2)
  {
    Swift::Int v9 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      Swift::Int v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_102:
      uint64_t v103 = v12;
      uint64_t v114 = v9;
      if (v13 >= 2)
      {
        uint64_t v104 = *v112;
        do
        {
          uint64_t v105 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v104) {
            goto LABEL_144;
          }
          Swift::Int v106 = v103;
          Swift::Int v107 = *(void *)&v103[16 * v105 + 32];
          uint64_t v108 = *(void *)&v103[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v104 + 32 * v107), (char *)(v104 + 32 * *(void *)&v103[16 * v13 + 16]), v104 + 32 * v108, __dst);
          if (v1) {
            break;
          }
          if (v108 < v107) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::Int v106 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v106);
          }
          if (v105 >= *((void *)v106 + 2)) {
            goto LABEL_133;
          }
          uint64_t v109 = &v106[16 * v105 + 32];
          *(void *)uint64_t v109 = v107;
          *((void *)v109 + 1) = v108;
          Swift::UInt v110 = *((void *)v106 + 2);
          if (v13 > v110) {
            goto LABEL_134;
          }
          memmove(&v106[16 * v13 + 16], &v106[16 * v13 + 32], 16 * (v110 - v13));
          uint64_t v103 = v106;
          *((void *)v106 + 2) = v110 - 1;
          Swift::Int v13 = v110 - 1;
        }
        while (v110 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v114 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v114 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (symbol: String, position: Int, priority: Int));
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v114 = v8;
    __dst = (char *)(v8 + 32);
  }
  uint64_t v10 = 0;
  unint64_t v11 = *a1;
  char v113 = *a1 + 88;
  uint64_t v111 = *a1 + 16;
  unint64_t v12 = (char *)MEMORY[0x263F8EE78];
  uint64_t v115 = v6;
  uint64_t v116 = v3;
  Swift::UInt v117 = v11;
  while (1)
  {
    unint64_t v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 32 * v10 + 24);
      uint64_t v16 = *(void *)(v11 + 32 * v14 + 24);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (uint64_t *)(v113 + 32 * v14);
        int64_t v18 = v15;
        while (1)
        {
          Swift::Int v20 = *v17;
          v17 += 4;
          int v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          int64_t v18 = v19;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v21 = 32 * v10;
          Swift::Int v22 = 32 * v14;
          uint64_t v23 = v10;
          uint64_t v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = (_OWORD *)(v11 + v22);
              uint64_t v26 = v11 + v21;
              Swift::Int v27 = *(void *)(v11 + v22);
              Swift::Int v28 = *(void *)(v11 + v22 + 8);
              uint64_t v29 = *(_OWORD *)(v11 + v22 + 16);
              uint64_t v30 = *(_OWORD *)(v11 + v21 - 16);
              *uint64_t v25 = *(_OWORD *)(v11 + v21 - 32);
              v25[1] = v30;
              *(void *)(v26 - 32) = v27;
              *(void *)(v26 - 24) = v28;
              *(_OWORD *)(v26 - 16) = v29;
            }
            ++v24;
            v21 -= 32;
            v22 += 32;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v31 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v31 >= v3) {
      uint64_t v31 = v3;
    }
    if (v31 < v14) {
      break;
    }
    if (v10 != v31)
    {
      long long v32 = (void *)(v111 + 32 * v10);
      do
      {
        long long v33 = *(void *)(v11 + 32 * v10 + 24);
        Swift::Int v34 = v14;
        uint64_t v35 = v32;
        do
        {
          if (v33 >= *(v35 - 3)) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v36 = v35 - 2;
          uint64_t v38 = *((_OWORD *)v35 - 3);
          uint64_t v37 = *((_OWORD *)v35 - 2);
          *(v35 - 4) = *v35;
          v35 -= 4;
          Swift::Int v39 = v35[2];
          uint64_t v40 = v35[3];
          *uint64_t v36 = v38;
          v36[1] = v37;
          *(v35 - 2) = v39;
          *(v35 - 1) = v40;
          v35[1] = v33;
          ++v34;
        }
        while (v10 != v34);
        ++v10;
        v32 += 4;
      }
      while (v10 != v31);
      uint64_t v10 = v31;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    long long v42 = *((void *)v12 + 2);
    BOOL v41 = *((void *)v12 + 3);
    Swift::Int v13 = v42 + 1;
    unint64_t v11 = v117;
    if (v42 >= v41 >> 1)
    {
      uint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v12);
      unint64_t v11 = v117;
      unint64_t v12 = v91;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v43 = v12 + 32;
    unint64_t v44 = &v12[16 * v42 + 32];
    *(void *)unint64_t v44 = v14;
    *((void *)v44 + 1) = v10;
    if (v42)
    {
      while (1)
      {
        unint64_t v45 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v50 = &v43[16 * v13];
          uint64_t v51 = *((void *)v50 - 8);
          char v52 = *((void *)v50 - 7);
          uint64_t v56 = __OFSUB__(v52, v51);
          uint64_t v53 = v52 - v51;
          if (v56) {
            goto LABEL_119;
          }
          uint64_t v55 = *((void *)v50 - 6);
          uint64_t v54 = *((void *)v50 - 5);
          uint64_t v56 = __OFSUB__(v54, v55);
          unint64_t v48 = v54 - v55;
          uint64_t v49 = v56;
          if (v56) {
            goto LABEL_120;
          }
          uint64_t v57 = v13 - 2;
          uint64_t v58 = &v43[16 * v13 - 32];
          unint64_t v60 = *(void *)v58;
          BOOL v59 = *((void *)v58 + 1);
          uint64_t v56 = __OFSUB__(v59, v60);
          unint64_t v61 = v59 - v60;
          if (v56) {
            goto LABEL_122;
          }
          uint64_t v56 = __OFADD__(v48, v61);
          uint64_t v62 = v48 + v61;
          if (v56) {
            goto LABEL_125;
          }
          if (v62 >= v53)
          {
            uint64_t v80 = &v43[16 * v45];
            uint64_t v82 = *(void *)v80;
            uint64_t v81 = *((void *)v80 + 1);
            uint64_t v56 = __OFSUB__(v81, v82);
            unint64_t v83 = v81 - v82;
            if (v56) {
              goto LABEL_129;
            }
            uint64_t v73 = v48 < v83;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v74 = *((void *)v12 + 4);
            uint64_t v75 = *((void *)v12 + 5);
            uint64_t v56 = __OFSUB__(v75, v74);
            uint64_t v67 = v75 - v74;
            uint64_t v68 = v56;
            goto LABEL_77;
          }
          uint64_t v47 = *((void *)v12 + 4);
          uint64_t v46 = *((void *)v12 + 5);
          uint64_t v56 = __OFSUB__(v46, v47);
          unint64_t v48 = v46 - v47;
          uint64_t v49 = v56;
        }
        if (v49) {
          goto LABEL_121;
        }
        uint64_t v57 = v13 - 2;
        uint64_t v63 = &v43[16 * v13 - 32];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        uint64_t v66 = __OFSUB__(v64, v65);
        uint64_t v67 = v64 - v65;
        uint64_t v68 = v66;
        if (v66) {
          goto LABEL_124;
        }
        BOOL v69 = &v43[16 * v45];
        char v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        uint64_t v56 = __OFSUB__(v70, v71);
        long long v72 = v70 - v71;
        if (v56) {
          goto LABEL_127;
        }
        if (__OFADD__(v67, v72)) {
          goto LABEL_128;
        }
        if (v67 + v72 >= v48)
        {
          uint64_t v73 = v48 < v72;
LABEL_83:
          if (v73) {
            unint64_t v45 = v57;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v68) {
          goto LABEL_123;
        }
        BOOL v76 = &v43[16 * v45];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        uint64_t v56 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v56) {
          goto LABEL_126;
        }
        if (v79 < v67) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v84 = v45 - 1;
        if (v45 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v85 = v12;
        uint64_t v86 = &v43[16 * v84];
        unint64_t v87 = *(void *)v86;
        uint64_t v88 = &v43[16 * v45];
        long long v89 = *((void *)v88 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 32 * *(void *)v86), (char *)(v11 + 32 * *(void *)v88), v11 + 32 * v89, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v89 < v87) {
          goto LABEL_116;
        }
        if (v45 > *((void *)v85 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v43[16 * v84 + 8] = v89;
        uint64_t v90 = *((void *)v85 + 2);
        if (v45 >= v90) {
          goto LABEL_118;
        }
        unint64_t v12 = v85;
        Swift::Int v13 = v90 - 1;
        memmove(&v43[16 * v45], v88 + 16, 16 * (v90 - 1 - v45));
        *((void *)v85 + 2) = v90 - 1;
        unint64_t v11 = v117;
        if (v90 <= 2) {
          goto LABEL_15;
        }
      }
    }
    Swift::Int v13 = 1;
LABEL_15:
    uint64_t v6 = v115;
    Swift::Int v3 = v116;
    if (v10 >= v116)
    {
      Swift::Int v9 = v114;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  Swift::Int v24;
  void *v25;
  uint64_t v26;
  Swift::Int v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  Swift::Int v91;
  Swift::Int v92;
  uint64_t v93;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_130;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_138;
  }
  uint64_t v6 = result;
  uint64_t v88 = a1;
  if (v3 < 2)
  {
    Swift::Int v9 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      Swift::Int v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_96:
      uint64_t v80 = v12;
      uint64_t v90 = v9;
      if (v13 >= 2)
      {
        uint64_t v81 = *v88;
        do
        {
          uint64_t v82 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_125;
          }
          if (!v81) {
            goto LABEL_137;
          }
          unint64_t v83 = v80;
          uint64_t v84 = *(void *)&v80[16 * v82 + 32];
          uint64_t v85 = *(void *)&v80[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v81 + 8 * v84), (char *)(v81 + 8 * *(void *)&v80[16 * v13 + 16]), v81 + 8 * v85, __dst);
          if (v1) {
            break;
          }
          if (v85 < v84) {
            goto LABEL_126;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v83);
          }
          if (v82 >= *((void *)v83 + 2)) {
            goto LABEL_127;
          }
          uint64_t v86 = &v83[16 * v82 + 32];
          *(void *)uint64_t v86 = v84;
          *((void *)v86 + 1) = v85;
          unint64_t v87 = *((void *)v83 + 2);
          if (v13 > v87) {
            goto LABEL_128;
          }
          memmove(&v83[16 * v13 + 16], &v83[16 * v13 + 32], 16 * (v87 - v13));
          uint64_t v80 = v83;
          *((void *)v83 + 2) = v87 - 1;
          Swift::Int v13 = v87 - 1;
        }
        while (v87 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v90 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v90 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v90 = v8;
    __dst = (char *)(v8 + 32);
  }
  uint64_t v10 = 0;
  unint64_t v11 = *a1;
  long long v89 = *a1 - 8;
  unint64_t v12 = (char *)MEMORY[0x263F8EE78];
  uint64_t v91 = v6;
  uint64_t v92 = v3;
  unint64_t v93 = v11;
  while (1)
  {
    unint64_t v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(*(void *)(v11 + 8 * v10) + 16);
      uint64_t v16 = *(void *)(*(void *)(v11 + 8 * v14) + 16);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = v15;
        while (1)
        {
          int64_t v18 = *(void *)(*(void *)(v11 + 8 * v10) + 16);
          if (v15 < v16 == v18 >= v17) {
            break;
          }
          ++v10;
          uint64_t v17 = v18;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_131;
        }
        if (v14 < v10)
        {
          int v19 = (uint64_t *)(v89 + 8 * v10);
          Swift::Int v20 = v10;
          uint64_t v21 = v14;
          Swift::Int v22 = (uint64_t *)(v11 + 8 * v14);
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_136;
              }
              uint64_t v23 = *v22;
              *Swift::Int v22 = *v19;
              void *v19 = v23;
            }
            ++v21;
            --v19;
            ++v22;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_129;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v24 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_132;
    }
    if (v24 >= v3) {
      uint64_t v24 = v3;
    }
    if (v24 < v14) {
      break;
    }
    if (v10 != v24)
    {
      uint64_t v25 = (void *)(v89 + 8 * v10);
      do
      {
        uint64_t v26 = *(void *)(v11 + 8 * v10);
        Swift::Int v27 = v14;
        Swift::Int v28 = v25;
        do
        {
          uint64_t v29 = *v28;
          if (*(void *)(v26 + 16) >= *(void *)(*v28 + 16)) {
            break;
          }
          if (!v11) {
            goto LABEL_134;
          }
          unint64_t *v28 = v26;
          v28[1] = v29;
          --v28;
          ++v27;
        }
        while (v10 != v27);
        ++v10;
        ++v25;
      }
      while (v10 != v24);
      uint64_t v10 = v24;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_124;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    uint64_t v31 = *((void *)v12 + 2);
    uint64_t v30 = *((void *)v12 + 3);
    Swift::Int v13 = v31 + 1;
    unint64_t v11 = v93;
    if (v31 >= v30 >> 1)
    {
      uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v12);
      unint64_t v11 = v93;
      unint64_t v12 = v79;
    }
    *((void *)v12 + 2) = v13;
    long long v32 = v12 + 32;
    long long v33 = &v12[16 * v31 + 32];
    *(void *)long long v33 = v14;
    *((void *)v33 + 1) = v10;
    if (v31)
    {
      while (1)
      {
        Swift::Int v34 = v13 - 1;
        if (v13 >= 4)
        {
          Swift::Int v39 = &v32[16 * v13];
          uint64_t v40 = *((void *)v39 - 8);
          BOOL v41 = *((void *)v39 - 7);
          unint64_t v45 = __OFSUB__(v41, v40);
          long long v42 = v41 - v40;
          if (v45) {
            goto LABEL_113;
          }
          unint64_t v44 = *((void *)v39 - 6);
          uint64_t v43 = *((void *)v39 - 5);
          unint64_t v45 = __OFSUB__(v43, v44);
          uint64_t v37 = v43 - v44;
          uint64_t v38 = v45;
          if (v45) {
            goto LABEL_114;
          }
          uint64_t v46 = v13 - 2;
          uint64_t v47 = &v32[16 * v13 - 32];
          uint64_t v49 = *(void *)v47;
          unint64_t v48 = *((void *)v47 + 1);
          unint64_t v45 = __OFSUB__(v48, v49);
          uint64_t v50 = v48 - v49;
          if (v45) {
            goto LABEL_116;
          }
          unint64_t v45 = __OFADD__(v37, v50);
          uint64_t v51 = v37 + v50;
          if (v45) {
            goto LABEL_119;
          }
          if (v51 >= v42)
          {
            BOOL v69 = &v32[16 * v34];
            char v71 = *(void *)v69;
            uint64_t v70 = *((void *)v69 + 1);
            unint64_t v45 = __OFSUB__(v70, v71);
            long long v72 = v70 - v71;
            if (v45) {
              goto LABEL_123;
            }
            uint64_t v62 = v37 < v72;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v63 = *((void *)v12 + 4);
            uint64_t v64 = *((void *)v12 + 5);
            unint64_t v45 = __OFSUB__(v64, v63);
            uint64_t v56 = v64 - v63;
            uint64_t v57 = v45;
            goto LABEL_77;
          }
          uint64_t v36 = *((void *)v12 + 4);
          uint64_t v35 = *((void *)v12 + 5);
          unint64_t v45 = __OFSUB__(v35, v36);
          uint64_t v37 = v35 - v36;
          uint64_t v38 = v45;
        }
        if (v38) {
          goto LABEL_115;
        }
        uint64_t v46 = v13 - 2;
        char v52 = &v32[16 * v13 - 32];
        uint64_t v54 = *(void *)v52;
        uint64_t v53 = *((void *)v52 + 1);
        uint64_t v55 = __OFSUB__(v53, v54);
        uint64_t v56 = v53 - v54;
        uint64_t v57 = v55;
        if (v55) {
          goto LABEL_118;
        }
        uint64_t v58 = &v32[16 * v34];
        unint64_t v60 = *(void *)v58;
        BOOL v59 = *((void *)v58 + 1);
        unint64_t v45 = __OFSUB__(v59, v60);
        unint64_t v61 = v59 - v60;
        if (v45) {
          goto LABEL_121;
        }
        if (__OFADD__(v56, v61)) {
          goto LABEL_122;
        }
        if (v56 + v61 >= v37)
        {
          uint64_t v62 = v37 < v61;
LABEL_83:
          if (v62) {
            Swift::Int v34 = v46;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v57) {
          goto LABEL_117;
        }
        uint64_t v65 = &v32[16 * v34];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        unint64_t v45 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v45) {
          goto LABEL_120;
        }
        if (v68 < v56) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v73 = v34 - 1;
        if (v34 - 1 >= v13)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if (!v11) {
          goto LABEL_135;
        }
        uint64_t v74 = &v32[16 * v73];
        uint64_t v75 = *(void *)v74;
        BOOL v76 = &v32[16 * v34];
        uint64_t v77 = *((void *)v76 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 8 * *(void *)v74), (char *)(v11 + 8 * *(void *)v76), v11 + 8 * v77, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v77 < v75) {
          goto LABEL_110;
        }
        if (v34 > *((void *)v12 + 2)) {
          goto LABEL_111;
        }
        *(void *)uint64_t v74 = v75;
        *(void *)&v32[16 * v73 + 8] = v77;
        uint64_t v78 = *((void *)v12 + 2);
        if (v34 >= v78) {
          goto LABEL_112;
        }
        Swift::Int v13 = v78 - 1;
        memmove(&v32[16 * v34], v76 + 16, 16 * (v78 - 1 - v34));
        *((void *)v12 + 2) = v78 - 1;
        unint64_t v11 = v93;
        if (v78 <= 2) {
          goto LABEL_15;
        }
      }
    }
    Swift::Int v13 = 1;
LABEL_15:
    uint64_t v6 = v91;
    Swift::Int v3 = v92;
    if (v10 >= v92)
    {
      Swift::Int v9 = v90;
      goto LABEL_96;
    }
  }
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 24 * a3 - 24;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 24 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    while (1)
    {
      BOOL v13 = result == *(void *)v12 && v10 == *(void *)(v12 + 8);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 24;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      long long v14 = *(_OWORD *)(v12 + 32);
      uint64_t v15 = *(void *)(v12 + 16);
      Swift::Int result = *(void *)(v12 + 24);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
      *(void *)(v12 + 40) = v15;
      *(void *)uint64_t v12 = result;
      *(_OWORD *)(v12 + 8) = v14;
      uint64_t v10 = v14;
      v12 -= 24;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  uint64_t v17 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 24 * a3 + 16;
LABEL_5:
    uint64_t v7 = v17;
    uint64_t v8 = (void *)v6;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Swift::Int v9 = String.count.getter();
      uint64_t v10 = String.count.getter();
      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      if (v9 >= v10)
      {
LABEL_4:
        ++v4;
        v6 += 24;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v11 = v8 - 2;
      uint64_t v12 = v8 - 5;
      BOOL v13 = *(v8 - 3);
      *(v8 - 3) = *v8;
      v8 -= 3;
      long long v14 = v8[1];
      uint64_t v15 = v8[2];
      *(_OWORD *)uint64_t v11 = *v12;
      void v11[2] = v13;
      *(v8 - 2) = v14;
      *(v8 - 1) = v15;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 24 * a3 + 16;
LABEL_5:
    Swift::Int v9 = v7 + 24 * v4;
    Swift::Int result = *(void *)(v9 + 8);
    uint64_t v10 = *(void *)(v9 + 16);
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 4) && v10 == *(v12 - 3);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 24;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      long long v14 = v12 - 2;
      uint64_t v15 = v12 - 5;
      uint64_t v10 = *v12;
      uint64_t v16 = *(v12 - 3);
      *(v12 - 3) = *v12;
      v12 -= 3;
      uint64_t v17 = v12[1];
      Swift::Int result = v12[2];
      *(_OWORD *)long long v14 = *(_OWORD *)v15;
      v14[2] = v16;
      *(v12 - 2) = v17;
      *(v12 - 1) = result;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v6 = *(void *)(v4 + 8 * a3);
    uint64_t v7 = result;
    uint64_t v8 = (void *)v5;
    while (1)
    {
      Swift::Int v9 = *v8;
      if (*(void *)(v6 + 16) >= *(void *)(*v8 + 16))
      {
LABEL_4:
        ++a3;
        v5 += 8;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v4) {
        break;
      }
      *uint64_t v8 = v6;
      v8[1] = v9;
      --v8;
      if (a3 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v29 = __src;
  Swift::Int v28 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      uint64_t v17 = &v4[24 * v11];
      Swift::Int v27 = v17;
      uint64_t v29 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v18 = a3 - 24;
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = (char *)(v18 + 24);
          uint64_t v21 = *((void *)v19 - 3);
          uint64_t v22 = *((void *)v19 - 2);
          v19 -= 24;
          BOOL v23 = *((void *)v17 - 3) == v21 && *((void *)v17 - 2) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            Swift::Int v27 = v17 - 24;
            if (v20 < v17 || v18 >= (unint64_t)v17 || v20 != v17)
            {
              long long v25 = *(_OWORD *)(v17 - 24);
              *(void *)(v18 + 16) = *((void *)v17 - 1);
              *(_OWORD *)unint64_t v18 = v25;
            }
            int v19 = v6;
            v17 -= 24;
            if (v6 <= v7) {
              goto LABEL_46;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= (unint64_t)v6)
            {
              long long v24 = *(_OWORD *)v19;
              *(void *)(v18 + 16) = *((void *)v19 + 2);
              *(_OWORD *)unint64_t v18 = v24;
            }
            uint64_t v29 = v19;
            if (v19 <= v7) {
              goto LABEL_46;
            }
          }
          v18 -= 24;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_46;
          }
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    Swift::Int v27 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        BOOL v13 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            long long v16 = *(_OWORD *)v4;
            *((void *)v7 + 2) = *((void *)v4 + 2);
            *(_OWORD *)uint64_t v7 = v16;
          }
          v4 += 24;
          Swift::Int v28 = v4;
          long long v14 = v6;
        }
        else
        {
          long long v14 = v6 + 24;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
          {
            long long v15 = *(_OWORD *)v6;
            *((void *)v7 + 2) = *((void *)v6 + 2);
            *(_OWORD *)uint64_t v7 = v15;
          }
        }
        v7 += 24;
        if (v4 >= v12) {
          break;
        }
        uint64_t v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      uint64_t v29 = v7;
    }
LABEL_46:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v29, (const void **)&v28, &v27);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  BOOL v13 = v12 >> 3;
  long long v24 = __src;
  BOOL v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      long long v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      long long v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        while (1)
        {
          unint64_t v18 = v17 + 8;
          int v19 = v6 - 8;
          Swift::Int v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = v20;
            }
            long long v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    long long v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          BOOL v23 = v4;
          long long v15 = v6;
        }
        else
        {
          long long v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      long long v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  BOOL v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      long long v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        unint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            long long v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)unint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    long long v14 = &v4[16 * v10];
    long long v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        long long v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          long long v16 = v6;
        }
        else
        {
          long long v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v5;
  char *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  long long v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  long long v24;
  long long v25;
  uint64_t result;
  char *v28;
  const void *v29;
  char *v30;

  uint64_t v4 = __dst;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  uint64_t v7 = a2 - __src;
  int64_t v8 = (a2 - __src) / 24;
  int64_t v9 = a3 - (void)a2;
  uint64_t v10 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v30 = __src;
  uint64_t v29 = __dst;
  if (v8 >= v10)
  {
    if (v9 >= -23)
    {
      if (__dst != a2 || &a2[24 * v10] <= __dst) {
        memmove(__dst, a2, 24 * v10);
      }
      unint64_t v18 = &v4[24 * v10];
      Swift::Int v28 = v18;
      uint64_t v30 = v5;
      if (v6 < v5 && v9 >= 24)
      {
        int v19 = a3 - 24;
        do
        {
          Swift::Int v20 = (char *)(v19 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v21 = String.count.getter();
          uint64_t v22 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v21 >= v22)
          {
            Swift::Int v28 = v18 - 24;
            if (v20 < v18 || v19 >= (unint64_t)v18 || v20 != v18)
            {
              long long v25 = *(_OWORD *)(v18 - 24);
              *(void *)(v19 + 16) = *((void *)v18 - 1);
              *(_OWORD *)int v19 = v25;
            }
            BOOL v23 = v5;
            v18 -= 24;
          }
          else
          {
            BOOL v23 = v5 - 24;
            if (v20 != v5 || v19 >= (unint64_t)v5)
            {
              long long v24 = *(_OWORD *)v23;
              *(void *)(v19 + 16) = *((void *)v5 - 1);
              *(_OWORD *)int v19 = v24;
            }
            uint64_t v30 = v5 - 24;
          }
          if (v23 <= v6) {
            break;
          }
          v19 -= 24;
          uint64_t v5 = v23;
        }
        while (v18 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v30, &v29, &v28);
      return 1;
    }
  }
  else if (v7 >= -23)
  {
    if (__dst != __src || &__src[24 * v8] <= __dst) {
      memmove(__dst, __src, 24 * v8);
    }
    uint64_t v11 = &v4[24 * v8];
    Swift::Int v28 = v11;
    if ((unint64_t)v5 < a3 && v7 >= 24)
    {
      uint64_t v12 = v4;
      while (1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        BOOL v13 = String.count.getter();
        long long v14 = String.count.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v13 >= v14)
        {
          uint64_t v4 = v12 + 24;
          long long v16 = v12;
          long long v15 = v5;
          if (v6 == v12)
          {
            v12 += 24;
            if (v6 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v12 += 24;
          }
        }
        else
        {
          long long v15 = v5 + 24;
          long long v16 = v5;
          if (v6 == v5 && v6 < v15) {
            goto LABEL_18;
          }
        }
        uint64_t v17 = *(_OWORD *)v16;
        *((void *)v6 + 2) = *((void *)v16 + 2);
        *(_OWORD *)uint64_t v6 = v17;
LABEL_18:
        v6 += 24;
        if (v12 < v11)
        {
          uint64_t v5 = v15;
          if ((unint64_t)v15 < a3) {
            continue;
          }
        }
        uint64_t v29 = v4;
        uint64_t v30 = v6;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  char *v15;
  char *v16;
  long long v17;
  char *v18;
  unint64_t v19;
  char *v20;
  BOOL v21;
  char *v22;
  long long v23;
  long long v24;
  uint64_t result;
  char *v26;
  const void *v27;
  char *v28;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  Swift::Int v28 = __src;
  Swift::Int v27 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      unint64_t v18 = &v4[24 * v11];
      uint64_t v26 = v18;
      Swift::Int v28 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        int v19 = a3 - 24;
        do
        {
          Swift::Int v20 = (char *)(v19 + 24);
          uint64_t v21 = *((void *)v18 - 2) == *((void *)v6 - 2) && *((void *)v18 - 1) == *((void *)v6 - 1);
          if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v26 = v18 - 24;
            if (v20 < v18 || v19 >= (unint64_t)v18 || v20 != v18)
            {
              long long v24 = *(_OWORD *)(v18 - 24);
              *(void *)(v19 + 16) = *((void *)v18 - 1);
              *(_OWORD *)int v19 = v24;
            }
            uint64_t v22 = v6;
            v18 -= 24;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v22 = v6 - 24;
            if (v20 != v6 || v19 >= (unint64_t)v6)
            {
              BOOL v23 = *(_OWORD *)v22;
              *(void *)(v19 + 16) = *((void *)v6 - 1);
              *(_OWORD *)int v19 = v23;
            }
            Swift::Int v28 = v6 - 24;
            if (v22 <= v7) {
              break;
            }
          }
          v19 -= 24;
          uint64_t v6 = v22;
        }
        while (v18 > v4);
      }
LABEL_48:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v28, &v27, &v26);
      return 1;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    uint64_t v26 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      BOOL v13 = v4;
      while (1)
      {
        long long v14 = *((void *)v6 + 1) == *((void *)v13 + 1) && *((void *)v6 + 2) == *((void *)v13 + 2);
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v4 = v13 + 24;
          long long v16 = v13;
          long long v15 = v6;
          if (v7 == v13)
          {
            v13 += 24;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v13 += 24;
          }
        }
        else
        {
          long long v15 = v6 + 24;
          long long v16 = v6;
          if (v7 == v6 && v7 < v15) {
            goto LABEL_22;
          }
        }
        uint64_t v17 = *(_OWORD *)v16;
        *((void *)v7 + 2) = *((void *)v16 + 2);
        *(_OWORD *)uint64_t v7 = v17;
LABEL_22:
        v7 += 24;
        if (v13 < v12)
        {
          uint64_t v6 = v15;
          if ((unint64_t)v15 < a3) {
            continue;
          }
        }
        Swift::Int v27 = v4;
        Swift::Int v28 = v7;
        goto LABEL_48;
      }
    }
    goto LABEL_48;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  long long v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  long long v23;
  long long v24;
  uint64_t result;
  char *v26;
  const void *v27;
  char *v28;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 31;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  BOOL v13 = v12 >> 5;
  Swift::Int v28 = __src;
  Swift::Int v27 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[32 * v13] <= __dst) {
        memmove(__dst, a2, 32 * v13);
      }
      int v19 = &v4[32 * v13];
      uint64_t v26 = v19;
      Swift::Int v28 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        Swift::Int v20 = (char *)(a3 - 32);
        do
        {
          uint64_t v21 = v20 + 32;
          if (*((void *)v19 - 1) >= *((void *)v6 - 1))
          {
            uint64_t v26 = v19 - 32;
            if (v21 < v19 || v20 >= v19 || v21 != v19)
            {
              long long v24 = *((_OWORD *)v19 - 1);
              *(_OWORD *)Swift::Int v20 = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 1) = v24;
            }
            uint64_t v22 = v6;
            v19 -= 32;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v22 = v6 - 32;
            if (v21 != v6 || v20 >= v6)
            {
              BOOL v23 = *((_OWORD *)v6 - 1);
              *(_OWORD *)Swift::Int v20 = *(_OWORD *)v22;
              *((_OWORD *)v20 + 1) = v23;
            }
            Swift::Int v28 = v6 - 32;
            if (v22 <= v7) {
              break;
            }
          }
          v20 -= 32;
          uint64_t v6 = v22;
        }
        while (v19 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v28, &v27, &v26);
      return 1;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[32 * v10] <= __dst) {
      memmove(__dst, __src, 32 * v10);
    }
    long long v14 = &v4[32 * v10];
    uint64_t v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      long long v15 = v4;
      while (1)
      {
        if (*((void *)v6 + 3) >= *((void *)v15 + 3))
        {
          uint64_t v4 = v15 + 32;
          uint64_t v17 = v15;
          long long v16 = v6;
          if (v7 == v15)
          {
            v15 += 32;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 32;
          }
        }
        else
        {
          long long v16 = v6 + 32;
          uint64_t v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }
        unint64_t v18 = *((_OWORD *)v17 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
        *((_OWORD *)v7 + 1) = v18;
LABEL_22:
        v7 += 32;
        if (v15 < v14)
        {
          uint64_t v6 = v16;
          if ((unint64_t)v16 < a3) {
            continue;
          }
        }
        Swift::Int v27 = v4;
        Swift::Int v28 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  BOOL v13 = v12 >> 3;
  long long v24 = __src;
  BOOL v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      long long v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      long long v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        while (1)
        {
          unint64_t v18 = v17 + 8;
          int v19 = v6 - 8;
          Swift::Int v20 = *((void *)v6 - 1);
          if (*(void *)(*((void *)v16 - 1) + 16) >= *(void *)(v20 + 16))
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = v20;
            }
            long long v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    long long v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)(*(void *)v6 + 16) >= *(void *)(*(void *)v4 + 16))
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          BOOL v23 = v4;
          long long v15 = v6;
        }
        else
        {
          long long v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      long long v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = a2;
  unint64_t v4 = 0;
  uint64_t v19 = a2 + 40;
  uint64_t v20 = result + 32;
  uint64_t v21 = MEMORY[0x263F8EE78];
  unint64_t v17 = *(void *)(result + 16);
  do
  {
    if (v4 <= v2) {
      unint64_t v5 = v2;
    }
    else {
      unint64_t v5 = v4;
    }
    unint64_t v6 = v4;
    unint64_t v16 = v5;
    while (1)
    {
      if (v6 == v5)
      {
        __break(1u);
        return result;
      }
      unint64_t v4 = v6 + 1;
      uint64_t v7 = *(void *)(v3 + 16);
      if (v7) {
        break;
      }
LABEL_7:
      unint64_t v6 = v4;
      if (v4 == v2) {
        return v21;
      }
    }
    int64_t v8 = (uint64_t *)(v20 + 16 * v6);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = v19;
    while ((BidirectionalCollection<>.starts<A>(with:)() & 1) == 0)
    {
      v11 += 16;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = a2;
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v5 = v16;
        unint64_t v2 = v17;
        goto LABEL_7;
      }
    }
    uint64_t v3 = a2;
    swift_bridgeObjectRelease();
    uint64_t v12 = v21;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
      uint64_t v12 = v21;
    }
    unint64_t v14 = *(void *)(v12 + 16);
    unint64_t v13 = *(void *)(v12 + 24);
    if (v14 >= v13 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      uint64_t v12 = v21;
    }
    *(void *)(v12 + 16) = v14 + 1;
    uint64_t v21 = v12;
    uint64_t v15 = v12 + 16 * v14;
    *(void *)(v15 + 32) = v10;
    *(void *)(v15 + 40) = v9;
    unint64_t v2 = v17;
  }
  while (v4 != v17);
  return v21;
}

{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v4 = 0;
  unint64_t v5 = result + 32;
  unint64_t v6 = MEMORY[0x263F8EE78];
  do
  {
    if (v4 <= v2) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v4;
    }
    while (1)
    {
      if (v4 == v7) {
        goto LABEL_24;
      }
      int64_t v8 = *(void *)(v5 + 8 * v4++);
      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        goto LABEL_15;
      }
      if (*(void *)(a2 + 32) != v8) {
        break;
      }
LABEL_6:
      if (v4 == v2) {
        return v6;
      }
    }
    if (v9 != 1)
    {
      uint64_t v10 = 5;
      while (1)
      {
        uint64_t v11 = v10 - 3;
        if (__OFADD__(v10 - 4, 1)) {
          break;
        }
        if (*(void *)(a2 + 8 * v10) == v8) {
          goto LABEL_6;
        }
        ++v10;
        if (v11 == v9) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
      return result;
    }
LABEL_15:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    }
    unint64_t v13 = *(void *)(v6 + 16);
    uint64_t v12 = *(void *)(v6 + 24);
    if (v13 >= v12 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
    }
    *(void *)(v6 + 16) = v13 + 1;
    *(void *)(v6 + 8 * v13 + 32) = v8;
  }
  while (v4 != v2);
  return v6;
}

uint64_t outlined init with take of Grammar(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized static Grammar.fieldCombinations(for:)(uint64_t a1)
{
  uint64_t v59 = a1;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for GenerationSchema();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v4 = (uint64_t *)((char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for GenerationSchema.Field();
  uint64_t v65 = *(void *)(v5 - 8);
  uint64_t v51 = v65;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v67 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  char v52 = (char *)&v49 - v12;
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v49 - v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = MEMORY[0x263F8EE78];
  *unint64_t v4 = v15;
  uint64_t v16 = *MEMORY[0x263F40C30];
  unint64_t v17 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 104);
  v17(v4, v16, v1);
  GenerationSchema.Field.init(name:type:required:)();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = MEMORY[0x263F8EE78];
  *unint64_t v4 = v18;
  v17(v4, v16, v1);
  GenerationSchema.Field.init(name:type:required:)();
  uint64_t v19 = v51;
  uint64_t v21 = v51 + 16;
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v50 = v14;
  v20(v10, v14, v5);
  uint64_t v63 = type metadata accessor for Node #1 in static Grammar.fieldCombinations(for:)();
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v19;
  long long v24 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  uint64_t v66 = v10;
  unint64_t v61 = v24;
  uint64_t v62 = v19 + 32;
  v24(v22+ OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_field, v10, v5);
  *(void *)(v22
            + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_children) = MEMORY[0x263F8EE78];
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v25 = swift_allocObject();
  long long v53 = xmmword_25FA35810;
  *(_OWORD *)(v25 + 16) = xmmword_25FA35810;
  *(void *)(v25 + 32) = v22;
  uint64_t v70 = v25;
  specialized Array._endMutation()();
  unint64_t v69 = v70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GenerationSchema.Field>);
  unint64_t v26 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v60 = *(void *)(v65 + 72);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_25FA352B0;
  uint64_t v64 = v20;
  uint64_t v65 = v21;
  v20((char *)(v27 + v26), v52, v5);
  uint64_t v70 = v59;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v27);
  uint64_t v28 = v70;
  uint64_t v59 = *(void *)(v70 + 16);
  if (!v59)
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v49 = v22;
  unint64_t v29 = 0;
  uint64_t v57 = v5;
  unint64_t v58 = v70 + v26;
  uint64_t v55 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v56 = v70;
  uint64_t v30 = v67;
  do
  {
    if (v29 >= *(void *)(v28 + 16))
    {
      __break(1u);
LABEL_26:
      __break(1u);
    }
    long long v33 = v64;
    v64(v30, (char *)(v58 + v29 * v60), v5);
    Swift::Int v34 = v66;
    v33(v66, v30, v5);
    uint64_t v35 = swift_allocObject();
    v61(v35+ OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_field, v34, v5);
    *(void *)(v35
              + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_children) = MEMORY[0x263F8EE78];
    unint64_t v36 = v69;
    if (v69 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      if (!v37) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v37 = *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v37) {
        goto LABEL_18;
      }
    }
    if (v37 < 1) {
      goto LABEL_26;
    }
    uint64_t v38 = 0;
    do
    {
      if ((v36 & 0xC000000000000001) != 0)
      {
        uint64_t v39 = MEMORY[0x261202D30](v38, v36);
      }
      else
      {
        uint64_t v39 = *(void *)(v36 + 8 * v38 + 32);
        swift_retain();
      }
      uint64_t v40 = (void *)(v39
                     + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_children);
      swift_beginAccess();
      uint64_t v41 = swift_retain();
      MEMORY[0x261202A90](v41);
      if (*(void *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v38;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
    }
    while (v37 != v38);
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v30 = v67;
    if (GenerationSchema.Field.required.getter())
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = v53;
      *(void *)(v31 + 32) = v35;
      uint64_t v70 = v31;
      specialized Array._endMutation()();
      uint64_t v32 = v70;
      uint64_t v5 = v57;
      (*v55)(v30, v57);
      unint64_t v69 = v32;
      uint64_t v28 = v56;
    }
    else
    {
      uint64_t v42 = swift_retain();
      MEMORY[0x261202A90](v42);
      uint64_t v28 = v56;
      uint64_t v5 = v57;
      if (*(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      (*v55)(v30, v5);
    }
    ++v29;
  }
  while (v29 != v59);
  swift_bridgeObjectRelease();
  uint64_t v23 = v51;
  uint64_t v22 = v49;
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t v43 = swift_allocObject();
  unint64_t v44 = MEMORY[0x263F8EE78];
  *(void *)(v43 + 16) = MEMORY[0x263F8EE78];
  unint64_t v45 = (uint64_t *)(v43 + 16);
  unint64_t v68 = v44;
  recurse #1 (node:path:) in static Grammar.fieldCombinations(for:)(v22, &v68, (void **)v43);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v23 + 8);
  v46(v52, v5);
  v46(v50, v5);
  swift_beginAccess();
  uint64_t v47 = *v45;
  swift_bridgeObjectRetain();
  swift_release();
  return v47;
}

uint64_t _s19TokenGenerationCore7GrammarVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Grammar(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25F9909D4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t outlined init with take of (String, Grammar)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Grammar));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Symbol(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if (a1) {
    unint64_t v2 = 0xEC00000074655372;
  }
  else {
    unint64_t v2 = 0xE900000000000072;
  }
  if (a2) {
    unint64_t v3 = 0xEC00000074655372;
  }
  else {
    unint64_t v3 = 0xE900000000000072;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v2 = 0xE900000000000072;
    }
    else {
      unint64_t v2 = 0xEC00000074655372;
    }
    uint64_t v3 = 0x6574636172616863;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        unint64_t v5 = 0xE900000000000072;
      }
      else {
        unint64_t v5 = 0xEC00000074655372;
      }
      if (v3 != 0x6574636172616863) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v2 = 0xE400000000000000;
    uint64_t v3 = 1684957547;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v5 = 0xE400000000000000;
  if (v3 != 1684957547)
  {
LABEL_15:
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v2 != v5) {
    goto LABEL_15;
  }
  char v6 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1919251317;
    }
    else {
      uint64_t v3 = 0x6E61747369737361;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE900000000000074;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1919251317;
      }
      else {
        uint64_t v6 = 0x6E61747369737361;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE900000000000074;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x6D6574737973;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x6D6574737973)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x444974706D6F7270;
    }
    else {
      uint64_t v3 = 0x655474706D6F7270;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xEE006574616C706DLL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x444974706D6F7270;
      }
      else {
        uint64_t v6 = 0x655474706D6F7270;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xEE006574616C706DLL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x74706D6F7270;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x74706D6F7270)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0xD000000000000016;
    }
    else {
      uint64_t v3 = 0x657A696E656B6F74;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x800000025FA3D1A0;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0xD000000000000016;
      }
      else {
        uint64_t v6 = 0x657A696E656B6F74;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x800000025FA3D1A0;
      }
      else {
        unint64_t v7 = 0xE800000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    uint64_t v3 = 0x6574656C706D6F63;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x6574656C706D6F63)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore6SymbolOG_SSs5NeverOTg504_s19de73Core7GrammarV29validateNoRightRecursiveRules5rulesySayAA4RuleVG_tKFZSSAA6G53Ocfu_32f5710a733efaae9cdfe884b2973571ecAJSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = *(void *)(type metadata accessor for Symbol(0) - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = Symbol.description.getter();
      uint64_t v9 = v8;
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_SSs5NeverOTg504_s19de35Core7GrammarV11descriptionSSvgSSAA4G53Vcfu_32dd3a78f75bedf894b6433eb10654a64fAFSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v12;
    uint64_t v4 = a1 + 40;
    do
    {
      uint64_t v5 = Rule.description.getter();
      uint64_t v7 = v6;
      unint64_t v9 = *(void *)(v12 + 16);
      unint64_t v8 = *(void *)(v12 + 24);
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      }
      v4 += 24;
      *(void *)(v12 + 16) = v9 + 1;
      uint64_t v10 = v12 + 16 * v9;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for TerminalSymbol(0);
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (_DWORD *)((char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v8 = specialized Collection.count.getter(a1, a2);
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!v8) {
    return v9;
  }
  int64_t v10 = v8;
  uint64_t v37 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
  if (v10 < 0) {
    goto LABEL_55;
  }
  uint64_t v12 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  uint64_t v14 = HIBYTE(a2) & 0xF;
  v27[2] = v14;
  v27[0] = v2;
  v27[1] = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v34 = v14;
  uint64_t v28 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v29 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v15 = 15;
  uint64_t v30 = v13;
  unint64_t v31 = a1;
  while (1)
  {
    unint64_t v16 = v15 & 0xC;
    BOOL v17 = (v15 & 1) == 0 || v16 == v13;
    BOOL v18 = v17;
    if (v17) {
      break;
    }
    unint64_t result = v15;
    if (v15 >> 16 >= v34) {
      goto LABEL_52;
    }
LABEL_23:
    if ((a2 & 0x1000000000000000) != 0)
    {
      int v19 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        unint64_t v35 = a1;
        uint64_t v36 = v29;
      }
      else if ((a1 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      int v19 = _decodeScalar(_:startingAt:)();
    }
    *uint64_t v7 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
      uint64_t v9 = v37;
    }
    unint64_t v21 = *(void *)(v9 + 16);
    unint64_t v20 = *(void *)(v9 + 24);
    if (v21 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      uint64_t v9 = v37;
    }
    *(void *)(v9 + 16) = v21 + 1;
    unint64_t result = _s19TokenGenerationCore7GrammarVWObTm_0((uint64_t)v7, v9+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v21, type metadata accessor for TerminalSymbol);
    if (v18)
    {
      uint64_t v13 = v30;
      a1 = v31;
      if (v16 == v30)
      {
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, v31, a2);
        unint64_t v15 = result;
      }
      if (v34 <= v15 >> 16) {
        goto LABEL_53;
      }
      if ((v15 & 1) == 0) {
        unint64_t v15 = v15 & 0xC | _StringGuts.scalarAlignSlow(_:)(v15, a1, a2) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
    }
    else
    {
      uint64_t v13 = v30;
      a1 = v31;
      if (v34 <= v15 >> 16) {
        goto LABEL_54;
      }
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t v15 = String.UnicodeScalarView._foreignIndex(after:)();
      if (!--v10) {
        return v9;
      }
    }
    else
    {
      unint64_t v22 = v15 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        unint64_t v35 = a1;
        uint64_t v36 = v29;
        int v24 = *((unsigned __int8 *)&v35 + v22);
      }
      else
      {
        uint64_t v23 = v28;
        if ((a1 & 0x1000000000000000) == 0) {
          uint64_t v23 = _StringObject.sharedUTF8.getter();
        }
        int v24 = *(unsigned __int8 *)(v23 + v22);
      }
      int v25 = (char)v24;
      unsigned int v26 = __clz(v24 ^ 0xFF) - 24;
      if (v25 >= 0) {
        LOBYTE(v26) = 1;
      }
      unint64_t v15 = ((v22 + v26) << 16) | 5;
      if (!--v10) {
        return v9;
      }
    }
  }
  unint64_t result = v15;
  if (v16 == v13) {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a1, a2);
  }
  if (result >> 16 < v34)
  {
    if ((result & 1) == 0) {
      _StringGuts.scalarAlignSlow(_:)(result, a1, a2);
    }
    goto LABEL_23;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF17NonTerminalSymbolVs5NeverOTg504_s19de63Core7GrammarV5rules22prependSpaceToRootRule30cacheableResursiveh35TerminalsACSayAA0J0VG_SbSaySSGtKcfcw3M14iJ55VAHcfu_33_9193222a294e39e08c9aa65de551d98cAhLTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v4 += 3;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF10ExpressionVs5NeverOTg506_sSa19def3AA4g52VRszlE12nonTerminalsSayAA17NonTerminalSymbolVGyFAA10H55VACcfu_33_26c799ed354f6f1d9d11a9e5c2957f23AcITf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v5 = *v4;
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t static Symbol.nonterminal(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for Symbol(0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for Symbol(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Symbol);
}

TokenGenerationCore::Choice __swiftcall Choice.init(sequence:)(TokenGenerationCore::Choice sequence)
{
  v1->sequence._rawValue = sequence.sequence._rawValue;
  return sequence;
}

uint64_t static Symbol.terminal(_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  swift_bridgeObjectRetain();
  unint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(a1, a2);
  swift_bridgeObjectRelease();
  *a3 = v6;
  type metadata accessor for Symbol(0);
  return swift_storeEnumTagMultiPayload();
}

TokenGenerationCore::Rule __swiftcall Rule.init(symbol:_:)(Swift::String symbol, Swift::OpaquePointer _)
{
  *(Swift::String *)uint64_t v2 = symbol;
  *(Swift::OpaquePointer *)(v2 + 16) = _;
  result.symbol.identifier = symbol;
  result.expression.choices = _;
  return result;
}

uint64_t NonTerminalSymbol.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._unint64_t object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 62;
  v4._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 60;
}

uint64_t TerminalSymbol.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TerminalSymbol(0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (unsigned int *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TerminalSymbol(v1, (uint64_t)v8, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, unsigned int *, uint64_t))(v3 + 32))(v5, v8, v2);
    uint64_t v9 = CharacterSet.description.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    unsigned int v10 = *v8;
    uint64_t v22 = 34;
    unint64_t v23 = 0xE100000000000000;
    if (v10 > 0x7F)
    {
      int v15 = (v10 & 0x3F) << 8;
      if (v10 >= 0x800)
      {
        unsigned int v16 = v10 >> 12;
        int v17 = (v15 | (v10 >> 6) & 0x3F) << 8;
        unsigned int v18 = HIWORD(v10);
        unsigned int v11 = (((v17 | (v10 >> 12) & 0x3F) << 8) | (v10 >> 18)) - 2122219023;
        int v19 = (v17 | v16) + 8487393;
        if (!v18) {
          unsigned int v11 = v19;
        }
      }
      else
      {
        unsigned int v11 = (v15 | (v10 >> 6)) + 33217;
      }
    }
    else
    {
      unsigned int v11 = v10 + 1;
    }
    uint64_t v21 = (v11 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v11) >> 3))));
    v12._uint64_t countAndFlagsBits = MEMORY[0x261202940](&v21);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 34;
    v13._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    return v22;
  }
  return v9;
}

uint64_t type metadata accessor for TerminalSymbol(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for TerminalSymbol);
}

uint64_t Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v168 = a2;
  uint64_t v177 = type metadata accessor for TerminalSymbol(0);
  uint64_t v166 = *(void *)(v177 - 8);
  MEMORY[0x270FA5388](v177);
  unint64_t v172 = (char *)&v166 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v193 = (char *)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  Swift::String v12 = (char *)&v166 - v11;
  uint64_t v13 = type metadata accessor for CharacterSet();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  unint64_t v169 = (char *)&v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v167 = (char *)&v166 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v175 = (char *)&v166 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  unint64_t v188 = (char *)&v166 - v22;
  MEMORY[0x270FA5388](v21);
  *(void *)&long long v196 = (char *)&v166 - v23;
  uint64_t v171 = a4;
  *a4 = a3;
  uint64_t v24 = swift_bridgeObjectRetain();
  uint64_t v25 = Array<A>.nonTerminals()(v24);
  Swift::UInt v184 = a1;
  swift_bridgeObjectRelease();
  unsigned int v26 = *(char **)(v25 + 16);
  uint64_t v189 = v13;
  uint64_t v182 = v14;
  Swift::UInt v186 = v26;
  if (v26)
  {
    unint64_t v27 = 0;
    uint64_t v185 = v25 + 32;
    uint64_t v197 = v14 + 56;
    uint64_t v195 = v14 + 16;
    char v194 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v192 = v14 + 32;
    unint64_t v190 = (void (**)(char *, uint64_t))(v14 + 8);
    unint64_t v28 = MEMORY[0x263F8EE78];
    long long v178 = xmmword_25FA352B0;
    uint64_t v176 = v12;
    uint64_t v173 = v25;
    while (1)
    {
      if (v27 >= *(void *)(v25 + 16))
      {
        __break(1u);
        goto LABEL_117;
      }
      uint64_t v29 = (uint64_t *)(v185 + 16 * v27);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = one-time initialization token for characterSetLookup;
      swift_bridgeObjectRetain();
      if (v32 != -1) {
        swift_once();
      }
      uint64_t v33 = static Grammar.characterSetLookup;
      uint64_t v34 = *(void *)(static Grammar.characterSetLookup + 16);
      uint64_t v187 = v30;
      if (v34)
      {
        swift_bridgeObjectRetain();
        uint64_t v183 = v31;
        unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30);
        if (v36)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v12, *(void *)(v33 + 56) + *(void *)(v14 + 72) * v35, v13);
          uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
          v37(v12, 0, 1, v13);
        }
        else
        {
          uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v197;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v197)(v12, 1, 1, v13);
        }
        uint64_t v38 = v193;
        swift_bridgeObjectRelease();
        uint64_t v39 = *v194;
        if ((*v194)(v12, 1, v13) != 1)
        {
          unint64_t v179 = v27;
          uint64_t v191 = *(void (**)(void, char *, uint64_t))v192;
          v191(v196, v12, v13);
          uint64_t v40 = *(void *)(v28 + 16);
          unint64_t v181 = v195 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          if (v40)
          {
            unint64_t v174 = v197 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
            unint64_t v41 = v28 + ((*(unsigned __int8 *)(v182 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80));
            unint64_t v42 = v28;
            uint64_t v43 = *(void *)(v182 + 72);
            unint64_t v44 = *(void (**)(unint64_t, void, uint64_t))(v182 + 16);
            unint64_t v180 = v42;
            swift_bridgeObjectRetain();
            while (1)
            {
              unint64_t v45 = v44;
              v44((unint64_t)v38, v41, v13);
              v37(v38, 0, 1, v13);
              if (v39(v38, 1, v13) == 1)
              {
                unint64_t v28 = v180;
                swift_bridgeObjectRelease();
                uint64_t v51 = v175;
                uint64_t v50 = v173;
                goto LABEL_23;
              }
              uint64_t v46 = v188;
              v191(v188, v38, v13);
              lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
              char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v48 = v13;
              uint64_t v49 = *v190;
              (*v190)(v46, v48);
              if (v47) {
                break;
              }
              v41 += v43;
              --v40;
              uint64_t v13 = v189;
              uint64_t v38 = v193;
              if (!v40)
              {
                unint64_t v28 = v180;
                uint64_t v50 = v173;
                goto LABEL_21;
              }
            }
            unint64_t v28 = v180;
            swift_bridgeObjectRelease();
            uint64_t v65 = v189;
            v49((char *)v196, v189);
            uint64_t v13 = v65;
            swift_bridgeObjectRelease();
            uint64_t v14 = v182;
            Swift::String v12 = v176;
            uint64_t v25 = v173;
            unint64_t v27 = v179;
          }
          else
          {
            uint64_t v50 = v25;
            swift_bridgeObjectRetain();
LABEL_21:
            v37(v38, 1, 1, v13);
            swift_bridgeObjectRelease();
            unint64_t v45 = *(void (**)(unint64_t, void, uint64_t))v195;
            uint64_t v51 = v175;
LABEL_23:
            char v52 = v45;
            v45((unint64_t)v51, v196, v13);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28);
            }
            uint64_t v25 = v50;
            unint64_t v54 = *(void *)(v28 + 16);
            unint64_t v53 = *(void *)(v28 + 24);
            if (v54 >= v53 >> 1) {
              unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, v28);
            }
            *(void *)(v28 + 16) = v54 + 1;
            v191(v28+ ((*(unsigned __int8 *)(v182 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80))+ *(void *)(v182 + 72) * v54, v51, v13);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
            uint64_t v55 = swift_allocObject();
            *(_OWORD *)(v55 + 16) = v178;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
            uint64_t v56 = *(void *)(type metadata accessor for Symbol(0) - 8);
            unint64_t v57 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
            uint64_t v58 = swift_allocObject();
            *(_OWORD *)(v58 + 16) = v178;
            v52(v58 + v57, v196, v13);
            swift_storeEnumTagMultiPayload();
            swift_storeEnumTagMultiPayload();
            *(void *)(v55 + 32) = v58;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v59 = v184;
            }
            else {
              uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v184[2] + 1, 1, v184);
            }
            uint64_t v60 = v183;
            unint64_t v27 = v179;
            unint64_t v62 = v59[2];
            unint64_t v61 = v59[3];
            if (v62 >= v61 >> 1) {
              uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v62 + 1, 1, v59);
            }
            uint64_t v63 = v187;
            v59[2] = v62 + 1;
            Swift::UInt v184 = v59;
            uint64_t v64 = &v59[3 * v62];
            v64[4] = v60;
            v64[5] = v63;
            v64[6] = v55;
            (*v190)((char *)v196, v13);
            uint64_t v14 = v182;
            Swift::String v12 = v176;
          }
          goto LABEL_5;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v197)(v12, 1, 1, v13);
      }
      swift_bridgeObjectRelease();
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v12, &demangling cache variable for type metadata for CharacterSet?);
LABEL_5:
      if ((char *)++v27 == v186)
      {
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v28 = MEMORY[0x263F8EE78];
LABEL_36:
  uint64_t v66 = MEMORY[0x263F8EE78];
  uint64_t v192 = type metadata accessor for Grammar(0);
  char v194 = (unsigned int (**)(char *, uint64_t, uint64_t))*(int *)(v192 + 32);
  *(unsigned int (**)(char *, uint64_t, uint64_t))((char *)v194 + (void)v171) = (unsigned int (*)(char *, uint64_t, uint64_t))v28;
  swift_bridgeObjectRetain();
  uint64_t v67 = swift_bridgeObjectRetain();
  unint64_t v68 = v170;
  uint64_t v195 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF17NonTerminalSymbolVs5NeverOTg504_s19de63Core7GrammarV5rules22prependSpaceToRootRule30cacheableResursiveh35TerminalsACSayAA0J0VG_SbSaySSGtKcfcw3M14iJ55VAHcfu_33_9193222a294e39e08c9aa65de551d98cAhLTf3nnnpk_nTf1cn_n(v67);
  swift_bridgeObjectRelease();
  uint64_t v69 = swift_bridgeObjectRetain();
  uint64_t v70 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF10ExpressionVs5NeverOTg506_sSa19def3AA4g52VRszlE12nonTerminalsSayAA17NonTerminalSymbolVGyFAA10H55VACcfu_33_26c799ed354f6f1d9d11a9e5c2957f23AcITf3nnnpk_nTf1cn_nTm(v69);
  uint64_t v193 = v68;
  swift_bridgeObjectRelease();
  v199[0] = v66;
  uint64_t v197 = *(void *)(v70 + 16);
  if (!v197)
  {
LABEL_65:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v94 = v199[0];
    uint64_t v95 = Array<A>.nonTerminals()(v199[0]);
    uint64_t v96 = Array<A>.terminals()(v94);
    swift_bridgeObjectRelease();
    uint64_t v97 = v95[2];
    if (!v97)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_77;
    }
    uint64_t v197 = v96;
    uint64_t v98 = 0;
    uint64_t v99 = *(void *)(v195 + 16);
    *(void *)&long long v196 = v95;
    char v100 = v95 + 4;
    unint64_t v101 = (void *)(v195 + 40);
    while (1)
    {
      uint64_t v102 = v100;
      uint64_t v103 = &v100[2 * v98];
      uint64_t v104 = *v103;
      uint64_t v105 = v103[1];
      ++v98;
      Swift::Int v106 = v101;
      uint64_t v107 = v99;
      if (!v99) {
        break;
      }
      while (1)
      {
        BOOL v108 = *(v101 - 1) == v104 && *v101 == v105;
        if (v108 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        v101 += 2;
        if (!--v107) {
          goto LABEL_75;
        }
      }
      char v100 = v102;
      unint64_t v101 = v106;
      if (v98 == v97) {
        goto LABEL_114;
      }
    }
LABEL_75:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type InvalidGrammar and conformance InvalidGrammar();
    swift_allocError();
    *(void *)uint64_t v109 = v104;
    *(void *)(v109 + 8) = v105;
    *(unsigned char *)(v109 + 16) = 0;
    goto LABEL_83;
  }
  *(void *)&long long v196 = v70 + 32;
  uint64_t v191 = (void (*)(void, char *, uint64_t))v70;
  swift_bridgeObjectRetain();
  uint64_t v71 = 0;
  unint64_t v180 = v28;
  while (1)
  {
    uint64_t v72 = *(void *)(v196 + 8 * v71);
    uint64_t v73 = *(void *)(v72 + 16);
    if (v73) {
      break;
    }
    uint64_t v75 = MEMORY[0x263F8EE78];
LABEL_39:
    ++v71;
    specialized Array.append<A>(contentsOf:)(v75);
    if (v71 == v197)
    {
      swift_bridgeObjectRelease();
      goto LABEL_65;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v74 = 0;
  uint64_t v75 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v76 = *(void *)(v72 + 8 * v74 + 32);
    uint64_t v77 = *(void *)(v76 + 16);
    int64_t v78 = *(void *)(v75 + 16);
    int64_t v79 = v78 + v77;
    if (__OFADD__(v78, v77))
    {
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v79 <= *(void *)(v75 + 24) >> 1)
    {
      if (!*(void *)(v76 + 16)) {
        goto LABEL_42;
      }
    }
    else
    {
      if (v78 <= v79) {
        int64_t v81 = v78 + v77;
      }
      else {
        int64_t v81 = v78;
      }
      uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v81, 1, v75);
      if (!*(void *)(v76 + 16))
      {
LABEL_42:
        if (v77) {
          goto LABEL_86;
        }
        goto LABEL_43;
      }
    }
    int64_t v78 = *(void *)(v75 + 16);
    int64_t v79 = (*(void *)(v75 + 24) >> 1) - v78;
    uint64_t v82 = *(void *)(type metadata accessor for Symbol(0) - 8);
    uint64_t v83 = *(void *)(v82 + 72);
    if (v79 < v77) {
      goto LABEL_87;
    }
    unint64_t v84 = (*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
    unint64_t v85 = v75 + v84 + v83 * v78;
    unint64_t v86 = v76 + v84;
    uint64_t v87 = v83 * v77;
    unint64_t v88 = v85 + v87;
    unint64_t v89 = v86 + v87;
    if (v86 < v88 && v85 < v89) {
      goto LABEL_125;
    }
    swift_arrayInitWithCopy();
    if (v77) {
      break;
    }
LABEL_43:
    ++v74;
    swift_bridgeObjectRelease();
    if (v73 == v74)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_39;
    }
  }
  uint64_t v91 = *(void *)(v75 + 16);
  BOOL v92 = __OFADD__(v91, v77);
  uint64_t v93 = v91 + v77;
  if (!v92)
  {
    *(void *)(v75 + 16) = v93;
    goto LABEL_43;
  }
  __break(1u);
LABEL_114:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v96 = v197;
LABEL_77:
  if (!v184[2])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type InvalidGrammar and conformance InvalidGrammar();
    swift_allocError();
    *(void *)uint64_t v110 = 0;
    *(void *)(v110 + 8) = 0;
    *(unsigned char *)(v110 + 16) = 2;
LABEL_83:
    swift_willThrow();
    goto LABEL_84;
  }
  int64_t v79 = v184[4];
  int64_t v78 = v184[5];
  uint64_t v74 = v184[6];
  uint64_t v197 = v96;
  if ((v168 & 1) == 0) {
    goto LABEL_89;
  }
  uint64_t v76 = 0x45444E4550455250;
  if (v79 == 0x45444E4550455250 && v78 == 0xEF45434150535F44)
  {
    swift_bridgeObjectRetain();
    *(void *)&long long v196 = v74;
    swift_bridgeObjectRetain();
    *(void *)&long long v178 = 0x45444E4550455250;
    int64_t v78 = 0xEF45434150535F44;
    goto LABEL_90;
  }
LABEL_88:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
    uint64_t v155 = swift_allocObject();
    long long v196 = xmmword_25FA352B0;
    *(_OWORD *)(v155 + 16) = xmmword_25FA352B0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
    uint64_t v156 = *(void *)(type metadata accessor for Symbol(0) - 8);
    int64_t v157 = v78;
    uint64_t v158 = *(void *)(v156 + 72);
    unint64_t v159 = (*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
    uint64_t v160 = swift_allocObject();
    *(_OWORD *)(v160 + 16) = xmmword_25FA357C0;
    uint64_t v161 = (unint64_t *)(v160 + v159);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v162 = v193;
    unint64_t v163 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_19TokenGenerationCore14TerminalSymbolOs5NeverOTg504_s19gh5Core6k21O8terminalyACSSFZAA08j5D0Os7d2O6E6VXEfU_Tf1cn_n(0x20uLL, 0xE100000000000000);
    uint64_t v193 = v162;
    *uint64_t v161 = v163;
    swift_storeEnumTagMultiPayload();
    Swift::UInt v164 = (int64_t *)((char *)v161 + v158);
    *Swift::UInt v164 = v79;
    v164[1] = v157;
    swift_storeEnumTagMultiPayload();
    *(void *)(v155 + 32) = v160;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    uint64_t v165 = swift_allocObject();
    *(_OWORD *)(v165 + 16) = v196;
    *(void *)(v165 + 32) = v76;
    *(void *)(v165 + 40) = 0xEF45434150535F44;
    *(void *)(v165 + 48) = v155;
    v199[0] = v165;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)((uint64_t)v184);
    Swift::UInt v184 = (void *)v199[0];
    *(void *)&long long v178 = 0x45444E4550455250;
    int64_t v78 = 0xEF45434150535F44;
    *(void *)&long long v196 = v155;
  }
  else
  {
LABEL_89:
    *(void *)&long long v178 = v79;
    swift_bridgeObjectRetain();
    *(void *)&long long v196 = v74;
    swift_bridgeObjectRetain();
  }
LABEL_90:
  uint64_t v112 = swift_allocObject();
  *(void *)(v112 + 16) = 0xD00000000000001CLL;
  *(void *)(v112 + 24) = 0x800000025FA3DDF0;
  uint64_t v191 = (void (*)(void, char *, uint64_t))v112;
  id v113 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v114 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v115 = objc_msgSend(v113, sel_initWithSuiteName_, v114);

  if (!v115)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  id v116 = (id)MobileGestalt_get_current_device();
  if (!v116)
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  Swift::UInt v117 = v116;
  LODWORD(v190) = MobileGestalt_get_internalBuild();

  uint64_t v118 = swift_allocObject();
  uint64_t v187 = (uint64_t)"com.apple.tokengeneration";
  *(void *)(v118 + 16) = 0xD000000000000014;
  *(void *)(v118 + 24) = 0x800000025FA3DE30;
  id v119 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v120 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  uint64_t v121 = (char *)objc_msgSend(v119, sel_initWithSuiteName_, v120);

  unint64_t v188 = v121;
  if (!v121)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  uint64_t v185 = (uint64_t)v115;
  Swift::UInt v186 = "XCEPT_QUOTE_AND_BACKSLASH";
  id v122 = (id)MobileGestalt_get_current_device();
  if (!v122)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  Swift::UInt v123 = v122;
  LODWORD(v183) = MobileGestalt_get_internalBuild();

  uint64_t v124 = swift_allocObject();
  unint64_t v181 = (unint64_t)"enableRightRecursion";
  unint64_t v180 = 0xD000000000000010;
  *(void *)(v124 + 16) = 0xD000000000000010;
  *(void *)(v124 + 24) = 0x800000025FA3DE50;
  id v125 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  Swift::Int v126 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v127 = objc_msgSend(v125, sel_initWithSuiteName_, v126);

  if (!v127)
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  uint64_t v195 = v78;
  id v128 = (id)MobileGestalt_get_current_device();
  if (!v128)
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  uint64_t v129 = v128;
  LODWORD(v179) = MobileGestalt_get_internalBuild();

  uint64_t v130 = swift_allocObject();
  *(void *)(v130 + 16) = 0xD000000000000014;
  *(void *)(v130 + 24) = 0x800000025FA3DE70;
  id v131 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v132 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v133 = objc_msgSend(v131, sel_initWithSuiteName_, v132);

  if (!v133)
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  id v134 = (id)MobileGestalt_get_current_device();
  if (v134)
  {
    uint64_t v135 = v134;
    char internalBuild = MobileGestalt_get_internalBuild();

    v199[0] = v185;
    v199[1] = 0xD00000000000001CLL;
    v199[2] = (unint64_t)v186 | 0x8000000000000000;
    v199[3] = (uint64_t)partial apply for closure #1 in Overridable<A>.init(key:);
    v199[4] = (uint64_t)v191;
    char v200 = (char)v190;
    uint64_t v201 = v188;
    unint64_t v202 = 0xD000000000000014;
    unint64_t v203 = v187 | 0x8000000000000000;
    uint64_t v204 = closure #1 in Overridable<A>.init(key:)partial apply;
    uint64_t v205 = v118;
    char v206 = v183;
    id v207 = v127;
    unint64_t v208 = v180;
    unint64_t v209 = v181 | 0x8000000000000000;
    v210 = partial apply for closure #1 in Overridable<A>.init(key:);
    uint64_t v211 = v124;
    char v212 = v179;
    id v213 = v133;
    unint64_t v214 = 0xD000000000000014;
    unint64_t v215 = 0x800000025FA3DE70;
    v216 = closure #1 in Overridable<A>.init(key:)partial apply;
    uint64_t v217 = v130;
    char v218 = internalBuild;
    if (v183)
    {
      Swift::Int v137 = v188;
      outlined retain of GuidedGenerationOverrides((uint64_t)v199);
      id v138 = v137;
      swift_bridgeObjectRetain();
      swift_retain();
      closure #1 in Overridable<A>.init(key:)(v138, *(void *)(v118 + 16), *(void *)(v118 + 24), &v198);
      swift_release();
      swift_bridgeObjectRelease();

      outlined release of GuidedGenerationOverrides((uint64_t)v199);
      uint64_t v139 = (uint64_t)v172;
      uint64_t v140 = v189;
      uint64_t v141 = v167;
      uint64_t v142 = v184;
      uint64_t v143 = v197;
      uint64_t v144 = v195;
      if (v198)
      {
LABEL_105:
        uint64_t v148 = v171;
        v171[1] = v178;
        v148[2] = v144;
        v148[3] = v196;
        v148[4] = v142;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        CharacterSet.init()();
        uint64_t v149 = *(void *)(v143 + 16);
        if (v149)
        {
          uint64_t v150 = v143 + ((*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80));
          uint64_t v151 = *(void *)(v166 + 72);
          Swift::Int v152 = (void (**)(char *, uint64_t, uint64_t))(v182 + 32);
          uint64_t v153 = (void (**)(char *, uint64_t))(v182 + 8);
          swift_bridgeObjectRetain();
          unint64_t v154 = v169;
          do
          {
            outlined init with copy of TerminalSymbol(v150, v139, type metadata accessor for TerminalSymbol);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              (*v152)(v154, v139, v140);
              CharacterSet.formUnion(_:)();
              (*v153)(v154, v140);
            }
            else
            {
              CharacterSet.insert(_:)();
            }
            v150 += v151;
            --v149;
            uint64_t v139 = (uint64_t)v172;
          }
          while (v149);
          swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, char *, uint64_t))(v182 + 32))((char *)v171 + *(int *)(v192 + 28), v141, v140);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of GuidedGenerationOverrides((uint64_t)v199);
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v139 = (uint64_t)v172;
      uint64_t v140 = v189;
      uint64_t v141 = v167;
      uint64_t v142 = v184;
      uint64_t v143 = v197;
      uint64_t v144 = v195;
    }
    uint64_t v145 = v142;
    uint64_t v146 = swift_bridgeObjectRetain();
    uint64_t v147 = v193;
    specialized static Grammar.validateNoRightRecursiveRules(rules:)(v146);
    uint64_t v193 = v147;
    if (!v147)
    {
      swift_bridgeObjectRelease();
      uint64_t v142 = v145;
      goto LABEL_105;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of GuidedGenerationOverrides((uint64_t)v199);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_84:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_124:
  __break(1u);
LABEL_125:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Grammar.init(rules:prependSpaceToRootRule:)@<X0>(void *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  return Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(a1, a2, MEMORY[0x263F8EE78], a3);
}

unint64_t one-time initialization function for characterSetLookup()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CharacterSet)>);
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CharacterSet))
                 - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_25FA35830;
  uint64_t v8 = (void *)(v7 + v6);
  *uint64_t v8 = 0x48435F4C4147454CLL;
  v8[1] = 0xEF52455443415241;
  static CharacterSet.illegalCharacters.getter();
  CharacterSet.inverted.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v9 = (void *)(v7 + v6 + v5);
  *uint64_t v9 = 0xD000000000000029;
  v9[1] = 0x800000025FA3DDC0;
  CharacterSet.init(charactersIn:)();
  v10._uint64_t countAndFlagsBits = 23586;
  v10._unint64_t object = (void *)0xE200000000000000;
  CharacterSet.remove(charactersIn:)(v10);
  uint64_t v11 = (void *)(v7 + v6 + 2 * v5);
  *uint64_t v11 = 0xD000000000000015;
  v11[1] = 0x800000025FA3DF70;
  static CharacterSet.swiftIdentifierHead.getter();
  Swift::String v12 = (void *)(v7 + v6 + 3 * v5);
  *Swift::String v12 = 0xD00000000000001ALL;
  v12[1] = 0x800000025FA3DF90;
  static CharacterSet.swiftIdentifierHead.getter();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  uint64_t v13 = (void *)(v7 + v6 + 4 * v5);
  void *v13 = 0xD000000000000012;
  v13[1] = 0x800000025FA3DFB0;
  static CharacterSet.controlCharacters.getter();
  uint64_t v14 = (void *)(v7 + v6 + 5 * v5);
  void *v14 = 0x4150534554494857;
  v14[1] = 0xEB00000000534543;
  static CharacterSet.whitespaces.getter();
  uint64_t v15 = (void *)(v7 + v6 + 6 * v5);
  void *v15 = 0xD000000000000018;
  v15[1] = 0x800000025FA3DFD0;
  static CharacterSet.whitespacesAndNewlines.getter();
  uint64_t v16 = (char *)(v7 + v6 + 7 * v5);
  strcpy(v16, "DECIMAL_DIGITS");
  v16[15] = -18;
  static CharacterSet.decimalDigits.getter();
  uint64_t v17 = (void *)(v7 + v6 + 8 * v5);
  void *v17 = 0x5352455454454CLL;
  v17[1] = 0xE700000000000000;
  static CharacterSet.letters.getter();
  uint64_t v18 = (void *)(v7 + v6 + 9 * v5);
  void *v18 = 0xD000000000000011;
  v18[1] = 0x800000025FA3DFF0;
  static CharacterSet.lowercaseLetters.getter();
  uint64_t v19 = (void *)(v7 + v6 + 10 * v5);
  void *v19 = 0xD000000000000011;
  v19[1] = 0x800000025FA3E010;
  static CharacterSet.uppercaseLetters.getter();
  uint64_t v20 = (void *)(v7 + v6 + 11 * v5);
  *uint64_t v20 = 0xD000000000000013;
  v20[1] = 0x800000025FA3E030;
  static CharacterSet.nonBaseCharacters.getter();
  uint64_t v21 = v7 + v6 + 12 * v5;
  strcpy((char *)v21, "ALPHANUMERICS");
  *(_WORD *)(v21 + 14) = -4864;
  static CharacterSet.alphanumerics.getter();
  uint64_t v22 = v7 + v6 + 13 * v5;
  strcpy((char *)v22, "DECOMPOSABLES");
  *(_WORD *)(v22 + 14) = -4864;
  static CharacterSet.decomposables.getter();
  uint64_t v23 = (void *)(v7 + v6 + 14 * v5);
  *uint64_t v23 = 0xD000000000000012;
  v23[1] = 0x800000025FA3E050;
  static CharacterSet.illegalCharacters.getter();
  uint64_t v24 = (void *)(v7 + v6 + 15 * v5);
  *uint64_t v24 = 0xD000000000000016;
  v24[1] = 0x800000025FA3E070;
  static CharacterSet.punctuationCharacters.getter();
  uint64_t v25 = (void *)(v7 + v6 + 16 * v5);
  *uint64_t v25 = 0xD000000000000013;
  v25[1] = 0x800000025FA3E090;
  static CharacterSet.capitalizedLetters.getter();
  unsigned int v26 = (void *)(v7 + v6 + 17 * v5);
  *unsigned int v26 = 0x534C4F424D5953;
  v26[1] = 0xE700000000000000;
  static CharacterSet.symbols.getter();
  unint64_t v27 = (void *)(v7 + v6 + 18 * v5);
  void *v27 = 0x53454E494C57454ELL;
  v27[1] = 0xE800000000000000;
  static CharacterSet.newlines.getter();
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v7);
  static Grammar.characterSetLookup = result;
  return result;
}

uint64_t Grammar.cacheableResursiveNonTerminals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Grammar.root.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  *a1 = v1[1];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Grammar.rules.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Grammar.vocabulary.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Grammar(0) + 28);
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Grammar.init(backusNaurForm:prependSpaceToRootRule:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for Grammar(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v12 = (void *)static BackusNaurParser.parsedRules(_:)(a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v12, a3 & 1, MEMORY[0x263F8EE78], v11);
    return _s19TokenGenerationCore7GrammarVWObTm_0((uint64_t)v11, a4, type metadata accessor for Grammar);
  }
  return result;
}

uint64_t Grammar.init(backusNaurForm:prependSpaceToRootRule:cacheableResursiveNonTerminals:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = (void *)static BackusNaurParser.parsedRules(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  else {
    return Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v9, a3 & 1, a4, a5);
  }
}

uint64_t Grammar.characterSetsUsedInGrammar.getter()
{
  type metadata accessor for Grammar(0);
  return swift_bridgeObjectRetain();
}

uint64_t static NonTerminalSymbol.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t Rule.description.getter()
{
  uint64_t v1 = type metadata accessor for Symbol(0);
  uint64_t v41 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  uint64_t v4 = (void *)v0[1];
  uint64_t v6 = v0[2];
  int64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v38 = *v0;
    uint64_t v39 = v4;
    uint64_t v45 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v9 = 0;
    v37[1] = v6;
    uint64_t v42 = v6 + 32;
    int64_t v40 = v7;
    do
    {
      uint64_t v44 = v9;
      uint64_t v10 = *(void *)(v42 + 8 * v9);
      int64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        uint64_t v47 = v8;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
        uint64_t v12 = *(unsigned __int8 *)(v41 + 80);
        uint64_t v43 = v10;
        uint64_t v13 = v10 + ((v12 + 32) & ~v12);
        uint64_t v14 = *(void *)(v41 + 72);
        uint64_t v15 = v47;
        do
        {
          outlined init with copy of TerminalSymbol(v13, (uint64_t)v3, type metadata accessor for Symbol);
          uint64_t v16 = Symbol.description.getter();
          uint64_t v18 = v17;
          outlined destroy of Symbol((uint64_t)v3, type metadata accessor for Symbol);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
            uint64_t v15 = v47;
          }
          unint64_t v20 = *(void *)(v15 + 16);
          unint64_t v19 = *(void *)(v15 + 24);
          if (v20 >= v19 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            uint64_t v15 = v47;
          }
          *(void *)(v15 + 16) = v20 + 1;
          unint64_t v21 = v15 + 16 * v20;
          *(void *)(v21 + 32) = v16;
          *(void *)(v21 + 40) = v18;
          v13 += v14;
          --v11;
        }
        while (v11);
        uint64_t v8 = MEMORY[0x263F8EE78];
        int64_t v7 = v40;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = v8;
      }
      uint64_t v47 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v25 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
        uint64_t v25 = v45;
      }
      uint64_t v26 = v44;
      unint64_t v28 = *(void *)(v25 + 16);
      unint64_t v27 = *(void *)(v25 + 24);
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        uint64_t v26 = v44;
        uint64_t v25 = v45;
      }
      uint64_t v9 = v26 + 1;
      *(void *)(v25 + 16) = v28 + 1;
      unint64_t v29 = v25 + 16 * v28;
      *(void *)(v29 + 32) = v22;
      *(void *)(v29 + 40) = v24;
    }
    while (v9 != v7);
    swift_bridgeObjectRelease();
    uint64_t v5 = v38;
    uint64_t v4 = v39;
  }
  else
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
  }
  uint64_t v45 = 60;
  unint64_t v46 = 0xE100000000000000;
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = v5;
  v30._unint64_t object = v4;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0x203D3A3A203ELL;
  v31._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v31);
  uint64_t v47 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = v32;
  v35._unint64_t object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  return v45;
}

uint64_t Symbol.description.getter()
{
  uint64_t v51 = type metadata accessor for TerminalSymbol(0);
  uint64_t v1 = *(void *)(v51 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v51);
  uint64_t v4 = (unsigned int *)((char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = MEMORY[0x270FA5388](v2);
  int64_t v7 = (char *)v49 - v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v49 - v8;
  uint64_t v10 = type metadata accessor for Symbol(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (void *)((char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TerminalSymbol(v0, (uint64_t)v12, type metadata accessor for Symbol);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = *v12;
      int64_t v15 = *(void *)(*v12 + 16);
      if (v15)
      {
        uint64_t v58 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
        uint64_t v16 = v14 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        uint64_t v17 = *(void *)(v1 + 72);
        v49[1] = v14;
        uint64_t v50 = v17;
        do
        {
          outlined init with copy of TerminalSymbol(v16, (uint64_t)v7, type metadata accessor for TerminalSymbol);
          outlined init with copy of TerminalSymbol((uint64_t)v7, (uint64_t)v4, type metadata accessor for TerminalSymbol);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            outlined destroy of Symbol((uint64_t)v4, type metadata accessor for TerminalSymbol);
            uint64_t v18 = 0;
            unint64_t v19 = 0xE000000000000000;
          }
          else
          {
            unsigned int v20 = *v4;
            if (*v4 > 0x7F)
            {
              int v27 = (*v4 & 0x3F) << 8;
              if (v20 >= 0x800)
              {
                unsigned int v28 = v20 >> 12;
                int v29 = (v27 | (v20 >> 6) & 0x3F) << 8;
                unsigned int v30 = HIWORD(v20);
                unsigned int v21 = (((v29 | (v20 >> 12) & 0x3F) << 8) | (v20 >> 18)) - 2122219023;
                int v31 = (v29 | v28) + 8487393;
                if (!v30) {
                  unsigned int v21 = v31;
                }
              }
              else
              {
                unsigned int v21 = (v27 | (v20 >> 6)) + 33217;
              }
            }
            else
            {
              unsigned int v21 = v20 + 1;
            }
            uint64_t v56 = (v21 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v21) >> 3))));
            uint64_t v18 = MEMORY[0x261202940](&v56);
            unint64_t v19 = v22;
          }
          outlined destroy of Symbol((uint64_t)v7, type metadata accessor for TerminalSymbol);
          uint64_t v23 = v58;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1);
            uint64_t v23 = v58;
          }
          unint64_t v25 = *(void *)(v23 + 16);
          unint64_t v24 = *(void *)(v23 + 24);
          if (v25 >= v24 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
            uint64_t v23 = v58;
          }
          *(void *)(v23 + 16) = v25 + 1;
          unint64_t v26 = v23 + 16 * v25;
          *(void *)(v26 + 32) = v18;
          *(void *)(v26 + 40) = v19;
          v16 += v50;
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = MEMORY[0x263F8EE78];
      }
      uint64_t v58 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v39 = v38;
      swift_bridgeObjectRelease();
      uint64_t v58 = 34;
      unint64_t v59 = 0xE100000000000000;
      uint64_t v56 = v37;
      uint64_t v57 = v39;
      uint64_t v54 = 92;
      unint64_t v55 = 0xE100000000000000;
      uint64_t v52 = 23644;
      unint64_t v53 = 0xE200000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v42 = v41;
      swift_bridgeObjectRelease();
      uint64_t v56 = v40;
      uint64_t v57 = v42;
      uint64_t v54 = 34;
      unint64_t v55 = 0xE100000000000000;
      uint64_t v52 = 8796;
      unint64_t v53 = 0xE200000000000000;
      uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      v46._uint64_t countAndFlagsBits = v43;
      v46._unint64_t object = v45;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._uint64_t countAndFlagsBits = 34;
      v47._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v47);
    }
    else
    {
      uint64_t v33 = *v12;
      uint64_t v34 = (void *)v12[1];
      uint64_t v58 = 60;
      unint64_t v59 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      v35._uint64_t countAndFlagsBits = v33;
      v35._unint64_t object = v34;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._uint64_t countAndFlagsBits = 62;
      v36._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
    }
    return v58;
  }
  else
  {
    _s19TokenGenerationCore7GrammarVWObTm_0((uint64_t)v12, (uint64_t)v9, type metadata accessor for TerminalSymbol);
    uint64_t v32 = TerminalSymbol.description.getter();
    outlined destroy of Symbol((uint64_t)v9, type metadata accessor for TerminalSymbol);
  }
  return v32;
}

uint64_t static Grammar.parsedRules(backusNaurForm:)(uint64_t a1, uint64_t a2)
{
  return static BackusNaurParser.parsedRules(_:)(a1, a2);
}

uint64_t Array<A>.nonTerminals()(uint64_t a1)
{
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF10ExpressionVs5NeverOTg506_sSa19def3AA4g52VRszlE12nonTerminalsSayAA17NonTerminalSymbolVGyFAA10H55VACcfu_33_26c799ed354f6f1d9d11a9e5c2957f23AcITf3nnnpk_nTf1cn_nTm(a1);
  uint64_t v32 = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = MEMORY[0x263F8EE78];
LABEL_30:
    int v29 = Array<A>.nonTerminals()(v28);
    swift_bridgeObjectRelease();
    return (uint64_t)v29;
  }
  uint64_t v31 = v1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *(void *)(v31 + 8 * v3);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5) {
      break;
    }
    uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_4:
    ++v3;
    specialized Array.append<A>(contentsOf:)(v7);
    if (v3 == v2)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v28 = v32;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v6 = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v8 = *(void *)(v4 + 8 * v6 + 32);
    uint64_t v9 = *(void *)(v8 + 16);
    int64_t v10 = *(void *)(v7 + 16);
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      break;
    }
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v11 <= *(void *)(v7 + 24) >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_18;
      }
    }
    else
    {
      if (v10 <= v11) {
        int64_t v13 = v10 + v9;
      }
      else {
        int64_t v13 = v10;
      }
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      if (*(void *)(v8 + 16))
      {
LABEL_18:
        uint64_t v14 = *(void *)(v7 + 16);
        uint64_t v15 = (*(void *)(v7 + 24) >> 1) - v14;
        uint64_t v16 = *(void *)(type metadata accessor for Symbol(0) - 8);
        uint64_t v17 = *(void *)(v16 + 72);
        if (v15 < v9) {
          goto LABEL_33;
        }
        unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        unint64_t v19 = v7 + v18 + v17 * v14;
        unint64_t v20 = v8 + v18;
        uint64_t v21 = v17 * v9;
        unint64_t v22 = v19 + v21;
        unint64_t v23 = v20 + v21;
        if (v20 < v22 && v19 < v23) {
          goto LABEL_35;
        }
        swift_arrayInitWithCopy();
        if (v9)
        {
          uint64_t v25 = *(void *)(v7 + 16);
          BOOL v26 = __OFADD__(v25, v9);
          uint64_t v27 = v25 + v9;
          if (v26) {
            goto LABEL_34;
          }
          *(void *)(v7 + 16) = v27;
        }
        goto LABEL_8;
      }
    }
    if (v9) {
      goto LABEL_32;
    }
LABEL_8:
    ++v6;
    swift_bridgeObjectRelease();
    if (v5 == v6)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

TokenGenerationCore::Rule __swiftcall Rule.init(nonterminal:_:)(TokenGenerationCore::NonTerminalSymbol nonterminal, Swift::OpaquePointer _)
{
  uint64_t v3 = *(void *)(nonterminal.identifier._countAndFlagsBits + 8);
  *uint64_t v2 = *(void *)nonterminal.identifier._countAndFlagsBits;
  v2[1] = v3;
  v2[2] = nonterminal.identifier._object;
  result.symbol = nonterminal;
  result.expression.choices = _;
  return result;
}

void *Array<A>.nonTerminals()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Symbol(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v3);
  uint64_t v8 = (char *)v19 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v10 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v11 = *(void *)(v6 + 72);
  v19[0] = a1;
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)MEMORY[0x263F8EE78];
  v19[1] = v2;
  do
  {
    outlined init with copy of TerminalSymbol(v10, (uint64_t)v8, type metadata accessor for Symbol);
    outlined init with copy of TerminalSymbol((uint64_t)v8, (uint64_t)v5, type metadata accessor for Symbol);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v14 = *v5;
      uint64_t v13 = v5[1];
      outlined destroy of Symbol((uint64_t)v8, type metadata accessor for Symbol);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      }
      unint64_t v16 = v12[2];
      unint64_t v15 = v12[3];
      if (v16 >= v15 >> 1) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v12);
      }
      v12[2] = v16 + 1;
      uint64_t v17 = &v12[2 * v16];
      v17[4] = v14;
      v17[5] = v13;
    }
    else
    {
      outlined destroy of Symbol((uint64_t)v5, type metadata accessor for Symbol);
      outlined destroy of Symbol((uint64_t)v8, type metadata accessor for Symbol);
    }
    v10 += v11;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t Array<A>.terminals()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TerminalSymbol(0);
  uint64_t v21 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Symbol(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v19 - v10;
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v22 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v15 = *(void *)(v9 + 72);
    v19[1] = a1;
    swift_bridgeObjectRetain();
    long long v20 = xmmword_25FA352B0;
    do
    {
      outlined init with copy of TerminalSymbol(v14, (uint64_t)v11, type metadata accessor for Symbol);
      outlined init with copy of TerminalSymbol((uint64_t)v11, (uint64_t)v8, type metadata accessor for Symbol);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v16 = *v8;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v16 = MEMORY[0x263F8EE78];
        }
      }
      else
      {
        _s19TokenGenerationCore7GrammarVWObTm_0((uint64_t)v8, (uint64_t)v4, type metadata accessor for TerminalSymbol);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalSymbol>);
        unint64_t v18 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = v20;
        _s19TokenGenerationCore7GrammarVWObTm_0((uint64_t)v4, v16 + v18, type metadata accessor for TerminalSymbol);
      }
      outlined destroy of Symbol((uint64_t)v11, type metadata accessor for Symbol);
      specialized Array.append<A>(contentsOf:)(v16);
      v14 += v15;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    return v22;
  }
  return result;
}

uint64_t Grammar.description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v36 = MEMORY[0x263F8EE78];
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    uint64_t v32 = swift_bridgeObjectRetain();
    uint64_t v33 = v3;
    uint64_t v7 = (_OWORD *)(v32 + 40);
    uint64_t v8 = &unk_26A7EE000;
    while (1)
    {
      uint64_t v9 = *((void *)v7 - 1);
      long long v35 = *v7;
      uint64_t v10 = one-time initialization token for characterSetLookup;
      uint64_t v11 = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v10 != -1) {
        swift_once();
      }
      uint64_t v12 = v8[280];
      if (!*(void *)(v12 + 16)) {
        break;
      }
      swift_bridgeObjectRetain();
      uint64_t v34 = v9;
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
      if (v14)
      {
        unint64_t v15 = v13;
        uint64_t v16 = *(void *)(v12 + 56);
        uint64_t v17 = type metadata accessor for CharacterSet();
        uint64_t v18 = *(void *)(v17 - 8);
        unint64_t v19 = v8;
        uint64_t v20 = v18;
        uint64_t v21 = v16 + *(void *)(v18 + 72) * v15;
        uint64_t v3 = v33;
        (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v33, v21, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v3, 0, 1, v17);
        uint64_t v8 = v19;
      }
      else
      {
        uint64_t v17 = type metadata accessor for CharacterSet();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v3, 1, 1, v17);
      }
      swift_bridgeObjectRelease();
      type metadata accessor for CharacterSet();
      int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v3, 1, v17);
      uint64_t v9 = v34;
      if (v23 == 1) {
        goto LABEL_13;
      }
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v3, &demangling cache variable for type metadata for CharacterSet?);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t v7 = (_OWORD *)((char *)v7 + 24);
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = v36;
        goto LABEL_19;
      }
    }
    uint64_t v22 = type metadata accessor for CharacterSet();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v3, 1, 1, v22);
LABEL_13:
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v3, &demangling cache variable for type metadata for CharacterSet?);
    uint64_t v24 = v36;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
      uint64_t v24 = v36;
    }
    unint64_t v26 = *(void *)(v24 + 16);
    unint64_t v25 = *(void *)(v24 + 24);
    if (v26 >= v25 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
      uint64_t v24 = v36;
    }
    *(void *)(v24 + 16) = v26 + 1;
    unint64_t v27 = v24 + 24 * v26;
    *(void *)(v27 + 32) = v9;
    *(_OWORD *)(v27 + 40) = v35;
    goto LABEL_4;
  }
LABEL_19:
  uint64_t v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_SSs5NeverOTg504_s19de35Core7GrammarV11descriptionSSvgSSAA4G53Vcfu_32dd3a78f75bedf894b6433eb10654a64fAFSSTf3nnnpk_nTf1cn_n(v5);
  swift_release();
  uint64_t v36 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t Grammar.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  Hasher._combine(_:)(*(void *)(*v1 + 16));
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = v4 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = v1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v7 + 16));
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v7 + 32);
    do
    {
      uint64_t v10 = *v9++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v10);
      swift_bridgeObjectRelease();
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v1[4];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for Grammar(0);
  type metadata accessor for CharacterSet();
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v13 = *(void *)((char *)v2 + *(int *)(v12 + 32));
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v13);
  return swift_bridgeObjectRelease();
}

Swift::Int Grammar.hashValue.getter()
{
  return Grammar.hashValue.getter((void (*)(unsigned char *))Grammar.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Grammar(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Grammar(a1, a2, (void (*)(unsigned char *))Grammar.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Grammar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Grammar(a1, a2, a3, (void (*)(unsigned char *))Grammar.hash(into:));
}

uint64_t Rule.symbol.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Rule.expression.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

void Rule.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v3 + 8 * v5++ + 32);
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v6);
      swift_bridgeObjectRelease();
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t static Expression.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Rule.CodingKeys()
{
  if (*v0) {
    return 0x6973736572707865;
  }
  else {
    return 0x6C6F626D7973;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Rule.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Rule.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Rule.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Rule.CodingKeys and conformance Rule.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Rule.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Rule.CodingKeys and conformance Rule.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Rule.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Rule.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  v11[0] = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Rule.CodingKeys and conformance Rule.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v12 = v8;
  uint64_t v13 = v7;
  char v14 = 0;
  lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
  uint64_t v9 = v11[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    uint64_t v12 = v11[0];
    char v14 = 1;
    lazy protocol witness table accessor for type Expression and conformance Expression();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Rule.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v1 + 16));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)((uint64_t)v6, v4);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

uint64_t Rule.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Rule.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Rule.CodingKeys and conformance Rule.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v14 = 0;
  lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v13[0];
  uint64_t v9 = v13[1];
  char v14 = 1;
  lazy protocol witness table accessor for type Expression and conformance Expression();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = v13[0];
  *a2 = v10;
  a2[1] = v9;
  a2[2] = v11;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable.hash(into:) in conformance Rule(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  String.hash(into:)();
  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v3 + 32);
    do
    {
      uint64_t v6 = *v5++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v6);
      swift_bridgeObjectRelease();
      --v4;
    }
    while (v4);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Rule()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)((uint64_t)v6, v4);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Rule@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Rule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Rule(void *a1)
{
  return Rule.encode(to:)(a1);
}

uint64_t Symbol.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TerminalSymbol(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (Swift::UInt32 *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = type metadata accessor for Symbol(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TerminalSymbol(v2, (uint64_t)v16, type metadata accessor for Symbol);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = *v16;
      Hasher._combine(_:)(1uLL);
      specialized Array<A>.hash(into:)(a1, v18);
    }
    else
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    _s19TokenGenerationCore7GrammarVWObTm_0((uint64_t)v16, (uint64_t)v13, type metadata accessor for TerminalSymbol);
    Hasher._combine(_:)(0);
    outlined init with copy of TerminalSymbol((uint64_t)v13, (uint64_t)v11, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, Swift::UInt32 *, uint64_t))(v5 + 32))(v7, v11, v4);
      Hasher._combine(_:)(1uLL);
      lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      Swift::UInt32 v20 = *v11;
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v20);
    }
    return outlined destroy of Symbol((uint64_t)v13, type metadata accessor for TerminalSymbol);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Symbol.CodingKeys()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0x696D7265746E6F6ELL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C616E696D726574;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Symbol.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Symbol.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Symbol.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Symbol.CodingKeys and conformance Symbol.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Symbol.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Symbol.CodingKeys and conformance Symbol.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Symbol.NonterminalCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Symbol.NonterminalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Symbol.NonterminalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Symbol.TerminalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Symbol.TerminalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Symbol.NonterminalCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Symbol.TerminalSequenceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Symbol.TerminalSequenceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Symbol.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Symbol.NonterminalCodingKeys>);
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Symbol.TerminalSequenceCodingKeys>);
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  MEMORY[0x270FA5388](v4);
  unsigned int v30 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Symbol.TerminalCodingKeys>);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for TerminalSymbol(0);
  MEMORY[0x270FA5388](v27);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Symbol(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Symbol.CodingKeys>);
  uint64_t v37 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Symbol.CodingKeys and conformance Symbol.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of TerminalSymbol(v36, (uint64_t)v13, type metadata accessor for Symbol);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = *v13;
      LOBYTE(v38) = 1;
      lazy protocol witness table accessor for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys();
      unint64_t v19 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v38 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TerminalSymbol]);
      lazy protocol witness table accessor for type [TerminalSymbol] and conformance <A> [A](&lazy protocol witness table cache variable for type [TerminalSymbol] and conformance <A> [A], &lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol);
      uint64_t v20 = v33;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v21 = v32;
    }
    else
    {
      uint64_t v25 = *v13;
      uint64_t v24 = v13[1];
      LOBYTE(v38) = 2;
      lazy protocol witness table accessor for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys();
      unint64_t v19 = v31;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v38 = v25;
      uint64_t v39 = v24;
      lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
      uint64_t v20 = v35;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v21 = v34;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v14);
    return swift_bridgeObjectRelease();
  }
  else
  {
    _s19TokenGenerationCore7GrammarVWObTm_0((uint64_t)v13, (uint64_t)v10, type metadata accessor for TerminalSymbol);
    LOBYTE(v38) = 0;
    lazy protocol witness table accessor for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol, (void (*)(uint64_t))type metadata accessor for TerminalSymbol);
    uint64_t v22 = v29;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v22);
    outlined destroy of Symbol((uint64_t)v10, type metadata accessor for TerminalSymbol);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v16, v14);
  }
}

Swift::Int Symbol.hashValue.getter()
{
  return Grammar.hashValue.getter((void (*)(unsigned char *))Symbol.hash(into:));
}

Swift::Int Grammar.hashValue.getter(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

uint64_t Symbol.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Symbol.NonterminalCodingKeys>);
  uint64_t v59 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v65 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Symbol.TerminalSequenceCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  uint64_t v58 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v64 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Symbol.TerminalCodingKeys>);
  uint64_t v55 = *(void *)(v7 - 8);
  uint64_t v56 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v62 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Symbol.CodingKeys>);
  uint64_t v61 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Symbol(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v49 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v49 - v21;
  uint64_t v23 = a1[3];
  uint64_t v66 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  lazy protocol witness table accessor for type Symbol.CodingKeys and conformance Symbol.CodingKeys();
  uint64_t v24 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    uint64_t v51 = v17;
    uint64_t v52 = v20;
    uint64_t v50 = v14;
    uint64_t v26 = v64;
    uint64_t v25 = v65;
    unint64_t v53 = v22;
    uint64_t v69 = v11;
    uint64_t v28 = v62;
    uint64_t v27 = v63;
    uint64_t v29 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v29 + 16) == 1)
    {
      if (*(unsigned char *)(v29 + 32))
      {
        if (*(unsigned char *)(v29 + 32) == 1)
        {
          LOBYTE(v67) = 1;
          lazy protocol witness table accessor for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TerminalSymbol]);
          lazy protocol witness table accessor for type [TerminalSymbol] and conformance <A> [A](&lazy protocol witness table cache variable for type [TerminalSymbol] and conformance <A> [A], &lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol);
          uint64_t v36 = v27;
          uint64_t v37 = v57;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v58 + 8))(v26, v37);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v61 + 8))(v10, v36);
          uint64_t v38 = (uint64_t)v51;
          *uint64_t v51 = v67;
          swift_storeEnumTagMultiPayload();
          uint64_t v39 = (uint64_t)v53;
          _s19TokenGenerationCore7GrammarVWObTm_0(v38, (uint64_t)v53, type metadata accessor for Symbol);
          uint64_t v40 = (uint64_t)v66;
LABEL_12:
          _s19TokenGenerationCore7GrammarVWObTm_0(v39, v60, type metadata accessor for Symbol);
          return __swift_destroy_boxed_opaque_existential_1(v40);
        }
        uint64_t v64 = (char *)v29;
        LOBYTE(v67) = 2;
        lazy protocol witness table accessor for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        unint64_t v62 = v10;
        lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
        uint64_t v45 = v54;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v40 = (uint64_t)v66;
        uint64_t v46 = v61;
        (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v45);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v62, v27);
        uint64_t v47 = v68;
        uint64_t v48 = v50;
        *uint64_t v50 = v67;
        v48[1] = v47;
        swift_storeEnumTagMultiPayload();
        uint64_t v44 = (uint64_t)v48;
      }
      else
      {
        LOBYTE(v67) = 0;
        lazy protocol witness table accessor for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        type metadata accessor for TerminalSymbol(0);
        lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol, (void (*)(uint64_t))type metadata accessor for TerminalSymbol);
        uint64_t v41 = (uint64_t)v52;
        uint64_t v42 = v27;
        uint64_t v43 = v56;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v28, v43);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v10, v42);
        uint64_t v40 = (uint64_t)v66;
        swift_storeEnumTagMultiPayload();
        uint64_t v44 = v41;
      }
      uint64_t v39 = (uint64_t)v53;
      _s19TokenGenerationCore7GrammarVWObTm_0(v44, (uint64_t)v53, type metadata accessor for Symbol);
      goto LABEL_12;
    }
    unsigned int v30 = v10;
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v27;
    uint64_t v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v34 = v69;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v34, *MEMORY[0x263F8DCB0], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v30, v32);
  }
  uint64_t v40 = (uint64_t)v66;
  return __swift_destroy_boxed_opaque_existential_1(v40);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Symbol(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Grammar(a1, a2, (void (*)(unsigned char *))Symbol.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Grammar(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Symbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Grammar(a1, a2, a3, (void (*)(unsigned char *))Symbol.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Grammar(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Symbol@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Symbol.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Symbol(void *a1)
{
  return Symbol.encode(to:)(a1);
}

uint64_t TerminalSymbol.contains(_:)(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TerminalSymbol(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (_DWORD *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TerminalSymbol(v2, (uint64_t)v10, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, _DWORD *, uint64_t))(v5 + 32))(v7, v10, v4);
    char v11 = CharacterSet.contains(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    char v11 = *v10 == a1;
  }
  return v11 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TerminalSymbol.Kind(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TerminalSymbol.Kind()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TerminalSymbol.Kind()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TerminalSymbol.Kind()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TerminalSymbol.Kind@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TerminalSymbol.Kind.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TerminalSymbol.Kind(void *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000072;
  if (*v1) {
    unint64_t v2 = 0xEC00000074655372;
  }
  *a1 = 0x6574636172616863;
  a1[1] = v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TerminalSymbol.Kind()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TerminalSymbol.Kind()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TerminalSymbol.CodingKeys(char *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TerminalSymbol.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TerminalSymbol.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TerminalSymbol.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TerminalSymbol.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized TerminalSymbol.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TerminalSymbol.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE900000000000072;
  if (v2 != 1) {
    unint64_t v4 = 0xEC00000074655372;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = 0x6574636172616863;
  }
  else {
    uint64_t v6 = 1684957547;
  }
  if (!v5) {
    unint64_t v3 = v4;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TerminalSymbol.CodingKeys()
{
  if (*v0) {
    return 0x6574636172616863;
  }
  else {
    return 1684957547;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance TerminalSymbol.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized TerminalSymbol.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TerminalSymbol.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TerminalSymbol.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TerminalSymbol.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: CharacterSet)?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v27 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for CharacterSet();
  uint64_t v28 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v29 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TerminalSymbol(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TerminalSymbol.CodingKeys>);
  uint64_t v31 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of TerminalSymbol(v2, (uint64_t)v12, type metadata accessor for TerminalSymbol);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1) {
    outlined destroy of Symbol((uint64_t)v12, type metadata accessor for TerminalSymbol);
  }
  BOOL v36 = EnumCaseMultiPayload == 1;
  char v35 = 0;
  lazy protocol witness table accessor for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind();
  uint64_t v17 = v32;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v17) {
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v13);
  }
  outlined init with copy of TerminalSymbol(v2, (uint64_t)v10, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    char v33 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v13);
  }
  uint64_t v18 = v28;
  uint64_t v19 = (uint64_t)v29;
  uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 32))(v29, v10, v30);
  if (one-time initialization token for characterSetLookup != -1) {
    uint64_t v20 = swift_once();
  }
  uint64_t v21 = static Grammar.characterSetLookup;
  MEMORY[0x270FA5388](v20);
  *(&v27 - 2) = v19;
  swift_bridgeObjectRetain();
  uint64_t v22 = v27;
  specialized Sequence.first(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in TerminalSymbol.encode(to:), v21, v27);
  swift_bridgeObjectRelease();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: CharacterSet));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    uint64_t v26 = v30;
    v25(v22 + *(int *)(v23 + 48), v30);
    char v34 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v13);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v25)(v29, v26);
  }
  return result;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v36 = a1;
  uint64_t v32 = a3;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: CharacterSet));
  uint64_t v31 = *(void *)(v37 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v37);
  uint64_t v35 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v33 = a2 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = *(void *)(v38 + 56);
    uint64_t v21 = (uint64_t *)(*(void *)(v38 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    uint64_t v24 = type metadata accessor for CharacterSet();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(&v8[*(int *)(v37 + 48)], v20 + *(void *)(*(void *)(v24 - 8) + 72) * i, v24);
    *(void *)uint64_t v8 = v23;
    *((void *)v8 + 1) = v22;
    uint64_t v25 = v35;
    outlined init with take of (key: String, value: CharacterSet)((uint64_t)v8, v35);
    swift_bridgeObjectRetain();
    char v26 = v36(v25);
    if (v3)
    {
      outlined destroy of SingleValueDecodingContainer?(v25, &demangling cache variable for type metadata for (key: String, value: CharacterSet));
      return swift_release();
    }
    if (v26)
    {
      swift_release();
      uint64_t v27 = v32;
      outlined init with take of (key: String, value: CharacterSet)(v25, v32);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v37);
    }
    uint64_t result = outlined destroy of SingleValueDecodingContainer?(v25, &demangling cache variable for type metadata for (key: String, value: CharacterSet));
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v34) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v33 + 8 * v14);
    if (!v18) {
      break;
    }
LABEL_17:
    unint64_t v12 = (v18 - 1) & v18;
  }
  int64_t v19 = v14 + 1;
  if (v14 + 1 >= v34) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v33 + 8 * v19);
  if (v18) {
    goto LABEL_16;
  }
  int64_t v19 = v14 + 2;
  if (v14 + 2 >= v34) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v33 + 8 * v19);
  if (v18) {
    goto LABEL_16;
  }
  int64_t v19 = v14 + 3;
  if (v14 + 3 >= v34) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v33 + 8 * v19);
  if (v18) {
    goto LABEL_16;
  }
  int64_t v19 = v14 + 4;
  if (v14 + 4 >= v34)
  {
LABEL_28:
    uint64_t v29 = v31;
    uint64_t v28 = v32;
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v28, 1, 1, v37);
  }
  unint64_t v18 = *(void *)(v33 + 8 * v19);
  if (v18)
  {
LABEL_16:
    int64_t v14 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v34) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v33 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t TerminalSymbol.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TerminalSymbol.CodingKeys>);
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TerminalSymbol(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int64_t v14 = (char *)&v40 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys();
  unint64_t v15 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v42 = v12;
  uint64_t v43 = v9;
  uint64_t v47 = v14;
  uint64_t v16 = v45;
  LOBYTE(v50) = 0;
  lazy protocol witness table accessor for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind();
  uint64_t v17 = v46;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v18 = v8;
  if ((v48 & 1) == 0)
  {
    LOBYTE(v48) = 1;
    unsigned int v28 = KeyedDecodingContainer.decode(_:forKey:)();
    unsigned int v29 = v28;
    if (HIWORD(v28) > 0x10u || (v28 & 0xFFFFF800) == 55296)
    {
      uint64_t v47 = (_DWORD *)type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v44 = v31;
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Decoder.codingPath.getter();
      unint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v48 = 0xD00000000000001ALL;
      unint64_t v49 = 0x800000025FA3DE90;
      unsigned int v50 = v29;
      v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      uint64_t v33 = v44;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void))(*((void *)v47 - 1) + 104))(v33, *MEMORY[0x263F8DCB8]);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v17);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v17);
    int64_t v34 = v47;
    *uint64_t v47 = v29;
    swift_storeEnumTagMultiPayload();
LABEL_17:
    _s19TokenGenerationCore7GrammarVWObTm_0((uint64_t)v34, v44, type metadata accessor for TerminalSymbol);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v48) = 2;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  if (one-time initialization token for characterSetLookup != -1)
  {
    uint64_t v38 = v19;
    uint64_t v39 = v20;
    swift_once();
    uint64_t v19 = v38;
    uint64_t v20 = v39;
  }
  uint64_t v21 = static Grammar.characterSetLookup;
  uint64_t v22 = v5;
  if (*(void *)(static Grammar.characterSetLookup + 16)
    && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20), (v24 & 1) != 0))
  {
    uint64_t v25 = *(void *)(v21 + 56);
    unint64_t v40 = v23;
    uint64_t v41 = v25;
    uint64_t v26 = type metadata accessor for CharacterSet();
    uint64_t v27 = *(void *)(v26 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v5, v41 + *(void *)(v27 + 72) * v40, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v5, 0, 1, v26);
  }
  else
  {
    uint64_t v26 = type metadata accessor for CharacterSet();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v5, 1, 1, v26);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CharacterSet();
  uint64_t v35 = *(void *)(v26 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v5, 1, v26);
  if (result != 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v46);
    uint64_t v37 = (uint64_t)v42;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v42, v22, v26);
    swift_storeEnumTagMultiPayload();
    int64_t v34 = v47;
    _s19TokenGenerationCore7GrammarVWObTm_0(v37, (uint64_t)v47, type metadata accessor for TerminalSymbol);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

void TerminalSymbol.hash(into:)()
{
  uint64_t v1 = type metadata accessor for CharacterSet();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TerminalSymbol(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (Swift::UInt32 *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TerminalSymbol(v0, (uint64_t)v7, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt32 *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    Swift::UInt32 v8 = *v7;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v8);
  }
}

Swift::Int TerminalSymbol.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TerminalSymbol(0);
  MEMORY[0x270FA5388](v6);
  Swift::UInt32 v8 = (Swift::UInt32 *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of TerminalSymbol(v1, (uint64_t)v8, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt32 *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    Swift::UInt32 v9 = *v8;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v9);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TerminalSymbol@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TerminalSymbol.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TerminalSymbol(void *a1)
{
  return TerminalSymbol.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance TerminalSymbol()
{
  uint64_t v1 = type metadata accessor for CharacterSet();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (Swift::UInt32 *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TerminalSymbol(v0, (uint64_t)v7, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt32 *, uint64_t))(v2 + 32))(v5, v7, v1);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  else
  {
    Swift::UInt32 v8 = *v7;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v8);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TerminalSymbol()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  Swift::UInt32 v8 = (Swift::UInt32 *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of TerminalSymbol(v1, (uint64_t)v8, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt32 *, uint64_t))(v3 + 32))(v6, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    Swift::UInt32 v9 = *v8;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v9);
  }
  return Hasher._finalize()();
}

uint64_t NonTerminalSymbol.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NonTerminalSymbol.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NonTerminalSymbol.CodingKeys()
{
  return 0x696669746E656469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NonTerminalSymbol.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NonTerminalSymbol.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NonTerminalSymbol.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t NonTerminalSymbol.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NonTerminalSymbol.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int NonTerminalSymbol.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t NonTerminalSymbol.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NonTerminalSymbol.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::UInt32 v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NonTerminalSymbol@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return NonTerminalSymbol.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NonTerminalSymbol(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NonTerminalSymbol.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NonTerminalSymbol()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NonTerminalSymbol()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NonTerminalSymbol()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NonTerminalSymbol()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._unint64_t object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 62;
  v4._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 60;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NonTerminalSymbol(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t Expression.choices.getter()
{
  return swift_bridgeObjectRetain();
}

void Expression.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  Hasher._combine(_:)(*(void *)(*v1 + 16));
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v3 + 8 * v5++ + 32);
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v6);
      swift_bridgeObjectRelease();
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Expression.CodingKeys()
{
  return 0x736563696F6863;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Expression.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x736563696F6863 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Expression.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Expression.CodingKeys and conformance Expression.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Expression.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Expression.CodingKeys and conformance Expression.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Expression.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Expression.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Expression.CodingKeys and conformance Expression.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Choice]);
  lazy protocol witness table accessor for type [Choice] and conformance <A> [A](&lazy protocol witness table cache variable for type [Choice] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Choice and conformance Choice);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Expression.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v1 + 16));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)((uint64_t)v6, v4);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

uint64_t Expression.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Expression.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::UInt32 v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Expression.CodingKeys and conformance Expression.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Choice]);
    lazy protocol witness table accessor for type [Choice] and conformance <A> [A](&lazy protocol witness table cache variable for type [Choice] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Choice and conformance Choice);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance Expression(uint64_t a1)
{
  uint64_t v3 = *v1;
  Swift::UInt v4 = *(void *)(*v1 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v3 + 32);
    do
    {
      uint64_t v6 = *v5++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v6);
      swift_bridgeObjectRelease();
      --v4;
    }
    while (v4);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Expression()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)((uint64_t)v6, v4);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Expression@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Expression.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Expression(void *a1)
{
  return Expression.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Expression(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t Choice.sequence.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*Choice.sequence.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Choice.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static Choice.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Choice.CodingKeys()
{
  return 0x65636E6575716573;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Choice.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65636E6575716573 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Choice.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Choice.CodingKeys and conformance Choice.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Choice.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Choice.CodingKeys and conformance Choice.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Choice.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Choice.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Choice.CodingKeys and conformance Choice.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Symbol]);
  lazy protocol witness table accessor for type [Symbol] and conformance <A> [A](&lazy protocol witness table cache variable for type [Symbol] and conformance <A> [A], &lazy protocol witness table cache variable for type Symbol and conformance Symbol);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Choice.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t Choice.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Choice.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::UInt32 v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Choice.CodingKeys and conformance Choice.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Symbol]);
    lazy protocol witness table accessor for type [Symbol] and conformance <A> [A](&lazy protocol witness table cache variable for type [Symbol] and conformance <A> [A], &lazy protocol witness table cache variable for type Symbol and conformance Symbol);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Choice()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Choice(uint64_t a1)
{
  specialized Array<A>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Choice()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Choice@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Choice.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Choice(void *a1)
{
  return Choice.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Choice(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

unint64_t InvalidGrammar.description.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  if (!*(unsigned char *)(v0 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD00000000000001FLL;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD000000000000027;
LABEL_5:
    v3._uint64_t countAndFlagsBits = v1;
    v3._unint64_t object = v2;
    String.append(_:)(v3);
    return v5;
  }
  return 0xD000000000000028;
}

void InvalidGrammar.hash(into:)()
{
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Swift::UInt v1 = 2;
  }
  else
  {
    Swift::UInt v1 = 1;
  }
  Hasher._combine(_:)(v1);
  String.hash(into:)();
}

Swift::Int InvalidGrammar.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 2;
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  String.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InvalidGrammar()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 2;
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  String.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance InvalidGrammar()
{
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Swift::UInt v1 = 2;
  }
  else
  {
    Swift::UInt v1 = 1;
  }
  Hasher._combine(_:)(v1);
  String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InvalidGrammar()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 2;
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *Swift::String v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *Swift::String v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalSymbol>, type metadata accessor for TerminalSymbol);
  *Swift::String v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *Swift::String v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NonTerminalSymbol>);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Expression>);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Grammar>, type metadata accessor for Grammar);
  *Swift::String v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *Swift::String v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::String v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Delimiter>, type metadata accessor for Prompt.Delimiter);
  *Swift::String v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>, MEMORY[0x263F62098]);
  *Swift::String v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(symbol: String, position: Int, priority: Int)>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    _DWORD v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (symbol: String, position: Int, priority: Int));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(number: Int, line: Substring)>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    _DWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (number: Int, line: Substring));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NonTerminalSymbol, Int)>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    _DWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NonTerminalSymbol, Int));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(tokenID: Int, tokenText: String)>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    _DWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenID: Int, tokenText: String));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.ParserTerminalSymbol>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  unint64_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.Item>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Attachment>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  char v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Grammar(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Grammar);
}

uint64_t type metadata accessor for Symbol(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InvalidGrammar and conformance InvalidGrammar()
{
  unint64_t result = lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar;
  if (!lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar;
  if (!lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar);
  }
  return result;
}

uint64_t sub_25F99BEC4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in Overridable<A>.init(key:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Overridable<A>.init(key:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

{
  uint64_t v2;

  return closure #1 in Overridable<A>.init(key:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

{
  uint64_t v2;

  return closure #1 in Overridable<A>.init(key:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

unint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  unint64_t v6 = v5 | (v4 << 16);
  unint64_t v7 = _StringGuts.validateInclusiveScalarIndex(_:)(0xFuLL, a1, a2);
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(v6, a1, a2);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        unint64_t v7 = result;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_40;
  }
  return 0;
}

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

uint64_t specialized static InvalidGrammar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v7 == 1)
      {
        if (v3 == v6 && v2 == v5) {
          char v9 = 1;
        }
        else {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        outlined copy of InvalidGrammar(v6, v5, 1u);
        outlined copy of InvalidGrammar(v3, v2, 1u);
        outlined consume of InvalidGrammar(v3, v2, 1u);
        uint64_t v12 = v6;
        uint64_t v13 = v5;
        unsigned __int8 v14 = 1;
LABEL_25:
        outlined consume of InvalidGrammar(v12, v13, v14);
        return v9 & 1;
      }
    }
    else if (v7 == 2 && (v5 | v6) == 0)
    {
      outlined consume of InvalidGrammar(*(void *)a1, v2, 2u);
      outlined consume of InvalidGrammar(0, 0, 2u);
      char v9 = 1;
      return v9 & 1;
    }
  }
  else if (!*(unsigned char *)(a2 + 16))
  {
    if (v3 == v6 && v2 == v5) {
      char v9 = 1;
    }
    else {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    outlined copy of InvalidGrammar(v6, v5, 0);
    outlined copy of InvalidGrammar(v3, v2, 0);
    outlined consume of InvalidGrammar(v3, v2, 0);
    uint64_t v12 = v6;
    uint64_t v13 = v5;
    unsigned __int8 v14 = 0;
    goto LABEL_25;
  }
  outlined copy of InvalidGrammar(*(void *)a2, *(void *)(a2 + 8), v7);
  outlined copy of InvalidGrammar(v3, v2, v4);
  outlined consume of InvalidGrammar(v3, v2, v4);
  outlined consume of InvalidGrammar(v6, v5, v7);
  char v9 = 0;
  return v9 & 1;
}

uint64_t specialized static TerminalSymbol.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TerminalSymbol(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  int64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (_DWORD *)((char *)&v22 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v16[*(int *)(v14 + 56)];
  outlined init with copy of TerminalSymbol(a1, (uint64_t)v16, type metadata accessor for TerminalSymbol);
  outlined init with copy of TerminalSymbol(a2, (uint64_t)v17, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of TerminalSymbol((uint64_t)v16, (uint64_t)v12, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      char v19 = *v12 == *(_DWORD *)v17;
      goto LABEL_6;
    }
LABEL_8:
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v16, &demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
    char v19 = 0;
    return v19 & 1;
  }
  outlined init with copy of TerminalSymbol((uint64_t)v16, (uint64_t)v10, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v23);
    goto LABEL_8;
  }
  uint64_t v18 = v23;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v17, v23);
  char v19 = static CharacterSet.== infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
  v20(v6, v18);
  v20(v10, v18);
LABEL_6:
  outlined destroy of Symbol((uint64_t)v16, type metadata accessor for TerminalSymbol);
  return v19 & 1;
}

uint64_t specialized static Rule.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = specialized static Array<A>.== infix(_:_:)(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized static Symbol.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TerminalSymbol(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Symbol(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  int64_t v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (uint64_t *)((char *)&v29 - v12);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Symbol, Symbol));
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  char v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t *)&v19[*(int *)(v17 + 56)];
  outlined init with copy of TerminalSymbol(a1, (uint64_t)v19, type metadata accessor for Symbol);
  outlined init with copy of TerminalSymbol(a2, (uint64_t)v20, type metadata accessor for Symbol);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of TerminalSymbol((uint64_t)v19, (uint64_t)v15, type metadata accessor for Symbol);
    if (!swift_getEnumCaseMultiPayload())
    {
      _s19TokenGenerationCore7GrammarVWObTm_0((uint64_t)v20, (uint64_t)v6, type metadata accessor for TerminalSymbol);
      char v23 = specialized static TerminalSymbol.== infix(_:_:)((uint64_t)v15, (uint64_t)v6);
      outlined destroy of Symbol((uint64_t)v6, type metadata accessor for TerminalSymbol);
      outlined destroy of Symbol((uint64_t)v15, type metadata accessor for TerminalSymbol);
      goto LABEL_18;
    }
    outlined destroy of Symbol((uint64_t)v15, type metadata accessor for TerminalSymbol);
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of TerminalSymbol((uint64_t)v19, (uint64_t)v13, type metadata accessor for Symbol);
    uint64_t v22 = *v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      char v23 = specialized static Array<A>.== infix(_:_:)(v22, *v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_18:
      outlined destroy of Symbol((uint64_t)v19, type metadata accessor for Symbol);
      return v23 & 1;
    }
    goto LABEL_14;
  }
  outlined init with copy of TerminalSymbol((uint64_t)v19, (uint64_t)v10, type metadata accessor for Symbol);
  uint64_t v25 = *v10;
  uint64_t v24 = v10[1];
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v19, &demangling cache variable for type metadata for (Symbol, Symbol));
    goto LABEL_16;
  }
  if (v25 == *v20 && v24 == v20[1])
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_20;
  }
  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v27)
  {
LABEL_20:
    outlined destroy of Symbol((uint64_t)v19, type metadata accessor for Symbol);
    char v23 = 1;
    return v23 & 1;
  }
  outlined destroy of Symbol((uint64_t)v19, type metadata accessor for Symbol);
LABEL_16:
  char v23 = 0;
  return v23 & 1;
}

uint64_t specialized static Grammar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Array<A>.== infix(_:_:)(*(void **)a1, *(void **)a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  BOOL v6 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  char v7 = specialized static Array<A>.== infix(_:_:)(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if ((v7 & 1) == 0) {
    return 0;
  }
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = type metadata accessor for Grammar(0);
  if ((static CharacterSet.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v9 = *(int *)(v8 + 32);
  uint64_t v10 = *(void *)(a1 + v9);
  uint64_t v11 = *(void *)(a2 + v9);
  return specialized static Array<A>.== infix(_:_:)(v10, v11);
}

uint64_t specialized static Grammar.validateNoRightRecursiveRules(rules:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v38 = type metadata accessor for Symbol(0);
  uint64_t v4 = *(void *)(v38 - 8);
  uint64_t result = MEMORY[0x270FA5388](v38);
  char v7 = (void *)((char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return result;
  }
  v34[0] = a1;
  v34[1] = v2;
  uint64_t v9 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  uint64_t v35 = a1 + 32;
  uint64_t v36 = v8;
  while (1)
  {
    uint64_t v11 = (uint64_t *)(v9 + 24 * v10);
    uint64_t v12 = v11[2];
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13) {
      break;
    }
LABEL_4:
    if (++v10 == v8) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v37 = v10;
  uint64_t v15 = *v11;
  uint64_t v14 = v11[1];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = 0;
  unint64_t v39 = v14;
  while (1)
  {
    uint64_t v17 = *(void *)(v12 + 8 * v16 + 32);
    uint64_t v18 = *(void *)(v17 + 16);
    if (!v18) {
      goto LABEL_8;
    }
    outlined init with copy of TerminalSymbol(v17+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * (v18 - 1), (uint64_t)v7, type metadata accessor for Symbol);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      outlined destroy of Symbol((uint64_t)v7, type metadata accessor for Symbol);
      goto LABEL_8;
    }
    if (v15 == *v7 && v14 == v7[1]) {
      break;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = v39;
LABEL_8:
    if (v13 == ++v16)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v9 = v35;
      uint64_t v8 = v36;
      uint64_t v10 = v37;
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_16:
  unint64_t v20 = v39;
  swift_bridgeObjectRelease();
  uint64_t v40 = v15;
  unint64_t v41 = v20;
  uint64_t v42 = v12;
  uint64_t v21 = Rule.description.getter();
  char v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore6SymbolOG_SSs5NeverOTg504_s19de73Core7GrammarV29validateNoRightRecursiveRules5rulesySayAA4RuleVG_tKFZSSAA6G53Ocfu_32f5710a733efaae9cdfe884b2973571ecAJSSTf3nnnpk_nTf1cn_n(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
  char v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v40 = 0;
  unint64_t v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  uint64_t v40 = 0x203A656C7552;
  unint64_t v41 = 0xE600000000000000;
  v28._uint64_t countAndFlagsBits = v21;
  v28._unint64_t object = v23;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._unint64_t object = (void *)0x800000025FA3DF50;
  v29._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = v25;
  v30._unint64_t object = v27;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  uint64_t v31 = v40;
  unint64_t v32 = v41;
  lazy protocol witness table accessor for type InvalidGrammar and conformance InvalidGrammar();
  swift_allocError();
  *(void *)uint64_t v33 = v31;
  *(void *)(v33 + 8) = v32;
  *(unsigned char *)(v33 + 16) = 1;
  return swift_willThrow();
}

uint64_t outlined release of GuidedGenerationOverrides(uint64_t a1)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 96);
  uint64_t v4 = *(void **)(a1 + 144);
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t outlined retain of GuidedGenerationOverrides(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 96);
  uint64_t v4 = *(void **)(a1 + 144);
  id v5 = *(id *)a1;
  swift_bridgeObjectRetain();
  swift_retain();
  id v6 = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  id v7 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  id v8 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined init with copy of TerminalSymbol(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Symbol(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s19TokenGenerationCore7GrammarVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Rule.CodingKeys and conformance Rule.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rule.CodingKeys and conformance Rule.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol()
{
  unint64_t result = lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Expression and conformance Expression()
{
  unint64_t result = lazy protocol witness table cache variable for type Expression and conformance Expression;
  if (!lazy protocol witness table cache variable for type Expression and conformance Expression)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Expression and conformance Expression);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Expression and conformance Expression;
  if (!lazy protocol witness table cache variable for type Expression and conformance Expression)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Expression and conformance Expression);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Expression and conformance Expression;
  if (!lazy protocol witness table cache variable for type Expression and conformance Expression)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Expression and conformance Expression);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Symbol.CodingKeys and conformance Symbol.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.CodingKeys and conformance Symbol.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.NonterminalCodingKeys and conformance Symbol.NonterminalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.TerminalSequenceCodingKeys and conformance Symbol.TerminalSequenceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys;
  if (!lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Symbol.TerminalCodingKeys and conformance Symbol.TerminalCodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TerminalSymbol] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TerminalSymbol]);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(a2, (void (*)(uint64_t))type metadata accessor for TerminalSymbol);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalSymbol.CodingKeys and conformance TerminalSymbol.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind;
  if (!lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind;
  if (!lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind;
  if (!lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind;
  if (!lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalSymbol.Kind and conformance TerminalSymbol.Kind);
  }
  return result;
}

uint64_t partial apply for closure #1 in TerminalSymbol.encode(to:)()
{
  return static CharacterSet.== infix(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol.CodingKeys and conformance NonTerminalSymbol.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Expression.CodingKeys and conformance Expression.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys;
  if (!lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys;
  if (!lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys;
  if (!lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys;
  if (!lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Expression.CodingKeys and conformance Expression.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Choice and conformance Choice()
{
  unint64_t result = lazy protocol witness table cache variable for type Choice and conformance Choice;
  if (!lazy protocol witness table cache variable for type Choice and conformance Choice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Choice and conformance Choice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Choice and conformance Choice;
  if (!lazy protocol witness table cache variable for type Choice and conformance Choice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Choice and conformance Choice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Choice and conformance Choice;
  if (!lazy protocol witness table cache variable for type Choice and conformance Choice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Choice and conformance Choice);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Choice] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Choice]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Choice.CodingKeys and conformance Choice.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys;
  if (!lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys;
  if (!lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys;
  if (!lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys;
  if (!lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Choice.CodingKeys and conformance Choice.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Symbol] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Symbol]);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(a2, (void (*)(uint64_t))type metadata accessor for Symbol);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Grammar()
{
  return lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Grammar and conformance Grammar, (void (*)(uint64_t))type metadata accessor for Grammar);
}

unint64_t lazy protocol witness table accessor for type Rule and conformance Rule()
{
  unint64_t result = lazy protocol witness table cache variable for type Rule and conformance Rule;
  if (!lazy protocol witness table cache variable for type Rule and conformance Rule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rule and conformance Rule);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Symbol()
{
  return lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Symbol and conformance Symbol, (void (*)(uint64_t))type metadata accessor for Symbol);
}

uint64_t instantiation function for generic protocol witness table for TerminalSymbol(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol, (void (*)(uint64_t))type metadata accessor for TerminalSymbol);
  uint64_t result = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol, (void (*)(uint64_t))type metadata accessor for TerminalSymbol);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in TerminalSymbol()
{
  return lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol, (void (*)(uint64_t))type metadata accessor for TerminalSymbol);
}

unint64_t instantiation function for generic protocol witness table for NonTerminalSymbol(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
  unint64_t result = lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Grammar(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    id v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (char *)a1 + v10;
    uint64_t v11 = type metadata accessor for CharacterSet();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v15, v14, v11);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Grammar(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for CharacterSet();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Grammar(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)a2 + v8;
  uint64_t v13 = (char *)a1 + v8;
  uint64_t v9 = type metadata accessor for CharacterSet();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v13, v12, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 32)) = *(void *)((char *)a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Grammar(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CharacterSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 32)) = *(void *)((char *)a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Grammar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CharacterSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  return a1;
}

void *assignWithTake for Grammar(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for CharacterSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(a3 + 32)) = *(void *)((char *)a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Grammar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F99E41C);
}

uint64_t sub_25F99E41C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CharacterSet();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Grammar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F99E4E0);
}

void *sub_25F99E4E0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    char *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CharacterSet();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for Grammar()
{
  uint64_t result = type metadata accessor for CharacterSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for Rule()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for Rule(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Rule(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Rule(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Rule(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Rule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Rule()
{
  return &type metadata for Rule;
}

uint64_t *initializeBufferWithCopyOfBuffer for Symbol(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v9 = type metadata accessor for TerminalSymbol(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v10 = type metadata accessor for CharacterSet();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Symbol(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    type metadata accessor for TerminalSymbol(0);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 1)
    {
      uint64_t v3 = type metadata accessor for CharacterSet();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    }
  }
  return result;
}

void *initializeWithCopy for Symbol(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for TerminalSymbol(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for Symbol(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of Symbol((uint64_t)a1, type metadata accessor for Symbol);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v5 = type metadata accessor for TerminalSymbol(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v6 = type metadata accessor for CharacterSet();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for Symbol(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for TerminalSymbol(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for Symbol(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Symbol((uint64_t)a1, type metadata accessor for Symbol);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for TerminalSymbol(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = type metadata accessor for CharacterSet();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for Symbol()
{
  uint64_t result = type metadata accessor for TerminalSymbol(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TerminalSymbol(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for CharacterSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for TerminalSymbol(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for CharacterSet();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for TerminalSymbol(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for CharacterSet();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for TerminalSymbol(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Symbol((uint64_t)a1, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for TerminalSymbol(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for CharacterSet();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for TerminalSymbol(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Symbol((uint64_t)a1, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for TerminalSymbol()
{
  uint64_t result = type metadata accessor for CharacterSet();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NonTerminalSymbol()
{
  return &type metadata for NonTerminalSymbol;
}

ValueMetadata *type metadata accessor for Expression()
{
  return &type metadata for Expression;
}

ValueMetadata *type metadata accessor for Choice()
{
  return &type metadata for Choice;
}

uint64_t outlined copy of InvalidGrammar(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for InvalidGrammar(uint64_t a1)
{
  return outlined consume of InvalidGrammar(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of InvalidGrammar(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for InvalidGrammar(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of InvalidGrammar(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for InvalidGrammar(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of InvalidGrammar(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of InvalidGrammar(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for InvalidGrammar(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of InvalidGrammar(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidGrammar(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidGrammar(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for InvalidGrammar(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for InvalidGrammar(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for InvalidGrammar()
{
  return &type metadata for InvalidGrammar;
}

void *type metadata accessor for Choice.CodingKeys()
{
  return &unk_270BCE140;
}

void *type metadata accessor for Expression.CodingKeys()
{
  return &unk_270BCE1D0;
}

void *type metadata accessor for NonTerminalSymbol.CodingKeys()
{
  return &unk_270BCE260;
}

void *type metadata accessor for TerminalSymbol.Kind()
{
  return &unk_270BCE2F0;
}

void *type metadata accessor for TerminalSymbol.CodingKeys()
{
  return &unk_270BCE380;
}

unsigned char *storeEnumTagSinglePayload for TerminalSymbol.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F99F820);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Symbol.CodingKeys()
{
  return &unk_270BCE410;
}

void *type metadata accessor for Symbol.TerminalCodingKeys()
{
  return &unk_270BCE4A0;
}

void *type metadata accessor for Symbol.TerminalSequenceCodingKeys()
{
  return &unk_270BCE530;
}

unsigned char *storeEnumTagSinglePayload for Choice.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        char *result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      char *result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25F99F914);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Symbol.NonterminalCodingKeys()
{
  return &unk_270BCE5C0;
}

unsigned char *storeEnumTagSinglePayload for TerminalSymbol.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F99FA18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Rule.CodingKeys()
{
  return &unk_270BCE650;
}

uint64_t specialized Rule.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6973736572707865 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized Symbol.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C616E696D726574 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025FA3DF30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696D7265746E6F6ELL && a2 == 0xEB000000006C616ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t specialized TerminalSymbol.CodingKeys.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TerminalSymbol.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t outlined init with take of (key: String, value: CharacterSet)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: CharacterSet));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of CharacterGrammarParser.fullMatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CharacterGrammarParser.lastConsumedElement.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 24))();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t dispatch thunk of CharacterGrammarParser.characterSetsUsedInGrammar.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CharacterGrammarParser.childParser(consumingElement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CharacterGrammarParser.validate(validatorCache:string:skipFirst:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of CharacterGrammarParser.createValidatorCache()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CharacterGrammarParser.nextValidTerminals()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CharacterGrammarParser.nextValidTerminalsWithCacheKey()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of CharacterGrammarParser.optimized()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.partialMatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.fullMatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.childParser(consumingTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 32) + **(int **)(a3 + 32));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenID:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenID:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 40) + **(int **)(a3 + 40));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenID:);
  return v9(a1, a2, a3);
}

Swift::Bool __swiftcall TokenizerAwareGrammarParser.accepts(tokenID:)(Swift::Int tokenID)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = *(void *)(v1 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](tokenID);
  unsigned __int8 v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v9 + 24))(v6);
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v3 & 1;
}

void *TokenizerAwareGrammarParser.accepts(tokenIDs:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  do
  {
    Swift::Int v5 = *(void *)(a1 + 8 * v3 + 32);
    if (TokenizerAwareGrammarParser.accepts(tokenID:)(v5))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      }
      unint64_t v7 = v4[2];
      unint64_t v6 = v4[3];
      if (v7 >= v6 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
      }
      v4[2] = v7 + 1;
      v4[v7 + 4] = v5;
    }
    ++v3;
  }
  while (v1 != v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for TokenizerAwareGrammarParser.accepts(tokenID:) in conformance TokenGrammarParser<A>(Swift::Int a1)
{
  BOOL v2 = TokenizerAwareGrammarParser.accepts(tokenID:)(a1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return protocol witness for TokenizerAwareGrammarParser.accepts(tokenIDs:) in conformance TokenGrammarParser<A>(v3, v1, v2);
}

uint64_t protocol witness for TokenizerAwareGrammarParser.accepts(tokenIDs:) in conformance TokenGrammarParser<A>(uint64_t a1)
{
  BOOL v2 = TokenizerAwareGrammarParser.accepts(tokenIDs:)(a1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return protocol witness for TokenizerAwareGrammarParser.accepts(tokenIDs:) in conformance TokenGrammarParser<A>(v3, v1, (uint64_t)v2);
}

uint64_t protocol witness for TokenizerAwareGrammarParser.accepts(tokenIDs:) in conformance TokenGrammarParser<A>(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5081_sSo19TokenizerRunnerObjCC19TokenGenerationCoreE8tokenize4textSaySiGSgSS_tKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAISiTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return v3;
    }
    uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x261202D30](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      unint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_integerValue);

      unint64_t v10 = *(void *)(v11 + 16);
      unint64_t v9 = *(void *)(v11 + 24);
      if (v10 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      }
      ++v5;
      *(void *)(v11 + 16) = v10 + 1;
      *(void *)(v11 + 8 * v10 + 32) = v8;
      if (v2 == v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenizerRunnerObjC.tokenize(text:)(Swift::String text)
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x261202880](text._countAndFlagsBits, text._object);
  v10[0] = 0;
  id v3 = objc_msgSend(v1, sel_tokenize_error_, v2, v10);

  id v4 = v10[0];
  if (v3)
  {
    type metadata accessor for TokenizerRunnerObjC(0, &lazy cache variable for type metadata for NSNumber);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = v4;

    id v7 = (id)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5081_sSo19TokenizerRunnerObjCC19TokenGenerationCoreE8tokenize4textSaySiGSgSS_tKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAISiTf3nnnpk_nTf1cn_n(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v7 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  unint64_t v9 = v7;
  result.value._rawValue = v9;
  result.is_nil = v8;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenizerRunnerObjC.detokenize(tokenIDs:)(Swift::OpaquePointer tokenIDs)
{
  uint64_t v2 = v1;
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)tokenIDs._rawValue + 2);
  if (v3)
  {
    id v16 = (id)MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v5 = (uint64_t *)((char *)tokenIDs._rawValue + 32);
    do
    {
      uint64_t v6 = *v5++;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v6, v16, v17);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v3;
    }
    while (v3);
  }
  type metadata accessor for TokenizerRunnerObjC(0, &lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = 0;
  id v8 = objc_msgSend(v1, sel_detokenize_error_, isa, &v16);

  id v9 = v16;
  if (v8)
  {
    id v10 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v2 = v11;
    id v12 = v9;
  }
  else
  {
    id v10 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  uint64_t v13 = (uint64_t)v10;
  uint64_t v14 = v2;
  result._unint64_t object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

uint64_t closure #1 in TokenizerRunnerObjC.collectPrefixes(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id v8 = (void *)*a4;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a4 = (uint64_t)v8;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    id v8 = (void *)result;
    *a4 = result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    id v8 = (void *)result;
    *a4 = result;
  }
  v8[2] = v11 + 1;
  id v12 = &v8[3 * v11];
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  return result;
}

uint64_t TokenizerRunnerObjC.prefixTokenIDs(forPrefix:)(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  void v11[2] = &v13;
  id v5 = v2;
  uint64_t v6 = MEMORY[0x261202880](a1, a2);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = closure #1 in TokenizerRunnerObjC.collectPrefixes(_:_:)partial apply;
  *(void *)(v7 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed (@unowned Int, @guaranteed String) -> ()partial apply;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed String) -> ();
  aBlock[3] = &block_descriptor_17;
  id v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_enumeratePrefixTokenIDsForPrefix_block_, v6, v8);

  _Block_release(v8);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v13;

    return v10;
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed String) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3(a2, v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t TokenizerRunnerObjC.tokenIDs(forRawPrefix:)(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  void v11[2] = &v13;
  id v5 = v2;
  uint64_t v6 = MEMORY[0x261202880](a1, a2);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = closure #1 in TokenizerRunnerObjC.collectPrefixes(_:_:)partial apply;
  *(void *)(v7 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed (@unowned Int, @guaranteed String) -> ()partial apply;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed String) -> ();
  aBlock[3] = &block_descriptor_9;
  id v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_enumerateTokenIDsForRawPrefix_block_, v6, v8);

  _Block_release(v8);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v13;

    return v10;
  }
  return result;
}

uint64_t TokenizerRunnerObjC.tokenIDs(forDecodedPrefix:)(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  void v11[2] = &v13;
  id v5 = v2;
  uint64_t v6 = MEMORY[0x261202880](a1, a2);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in TokenizerRunnerObjC.collectPrefixes(_:_:);
  *(void *)(v7 + 24) = v11;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@unowned Int, @guaranteed String) -> ();
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed String) -> ();
  aBlock[3] = &block_descriptor;
  id v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_enumerateTokenIDsForDecodedPrefix_block_, v6, v8);

  _Block_release(v8);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v13;

    return v10;
  }
  return result;
}

id protocol witness for TokenizerRunnerTokenizer.tokenID(forText:) in conformance TokenizerRunnerObjC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)MEMORY[0x261202880]();
  id v3 = objc_msgSend(v1, sel_tokenIDForText_, v2);

  return v3;
}

uint64_t protocol witness for TokenizerRunnerTokenizer.text(forTokenID:) in conformance TokenizerRunnerObjC(uint64_t a1)
{
  id v2 = objc_msgSend(*v1, sel_textForTokenID_, a1);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t protocol witness for TokenizerRunnerTokenizer.tokenize(text:) in conformance TokenizerRunnerObjC(uint64_t a1, uint64_t a2)
{
  return (unint64_t)TokenizerRunnerObjC.tokenize(text:)(*(Swift::String *)&a1);
}

uint64_t protocol witness for TokenizerRunnerTokenizer.detokenize(tokenIDs:) in conformance TokenizerRunnerObjC(Swift::OpaquePointer a1)
{
  return TokenizerRunnerObjC.detokenize(tokenIDs:)(a1)._countAndFlagsBits;
}

uint64_t protocol witness for TokenizerRunnerTokenizer.vocabulary() in conformance TokenizerRunnerObjC()
{
  id v1 = objc_msgSend(*v0, sel_vocabulary);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id protocol witness for TokenizerRunnerTokenizer.longestTokenLength.getter in conformance TokenizerRunnerObjC()
{
  return objc_msgSend(*v0, sel_longestTokenLength);
}

id protocol witness for TokenizerRunnerTokenizer.vocabularyCount.getter in conformance TokenizerRunnerObjC()
{
  return objc_msgSend(*v0, sel_vocabularyCount);
}

id protocol witness for TokenizerRunnerTokenizer.isByte(tokenID:) in conformance TokenizerRunnerObjC(uint64_t a1)
{
  return objc_msgSend(*v1, sel_isByte_, a1);
}

uint64_t protocol witness for TokenizerRunnerTokenizer.prefixTokenIDs(forPrefix:) in conformance TokenizerRunnerObjC(uint64_t a1, uint64_t a2)
{
  return TokenizerRunnerObjC.prefixTokenIDs(forPrefix:)(a1, a2);
}

uint64_t protocol witness for TokenizerRunnerTokenizer.tokenIDs(forRawPrefix:) in conformance TokenizerRunnerObjC(uint64_t a1, uint64_t a2)
{
  return TokenizerRunnerObjC.tokenIDs(forRawPrefix:)(a1, a2);
}

uint64_t protocol witness for TokenizerRunnerTokenizer.tokenIDs(forDecodedPrefix:) in conformance TokenizerRunnerObjC(uint64_t a1, uint64_t a2)
{
  return TokenizerRunnerObjC.tokenIDs(forDecodedPrefix:)(a1, a2);
}

uint64_t GuidedGenerationConstraints.init(grammarString:tokenizerPath:stopTokenIDs:numParallelTasks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 104) = a8;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = a1;
  type metadata accessor for Grammar(0);
  *(void *)(v8 + 72) = swift_task_alloc();
  *(void *)(v8 + 80) = swift_task_alloc();
  *(void *)(v8 + 88) = swift_task_alloc();
  *(void *)(v8 + 96) = swift_task_alloc();
  return MEMORY[0x270FA2498](GuidedGenerationConstraints.init(grammarString:tokenizerPath:stopTokenIDs:numParallelTasks:), 0, 0);
}

uint64_t GuidedGenerationConstraints.init(grammarString:tokenizerPath:stopTokenIDs:numParallelTasks:)()
{
  uint64_t v28 = v0;
  id v1 = (void *)static BackusNaurParser.parsedRules(_:)(*(void *)(v0 + 24), *(void *)(v0 + 32));
  uint64_t v2 = *(void **)(v0 + 80);
  swift_bridgeObjectRelease();
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v1, 1, MEMORY[0x263F8EE78], v2);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  outlined init with take of Grammar(*(void *)(v0 + 80), v3);
  outlined init with take of Grammar(v3, v4);
  uint64_t v5 = type metadata accessor for TokenizerRunner();
  swift_allocObject();
  TokenizerRunner.init(tokenizerPath:)();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v12 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 16);
  int v14 = *(unsigned char *)(v0 + 104) & 1;
  outlined init with copy of Grammar(v9, v10);
  void v27[3] = v5;
  v27[4] = &protocol witness table for TokenizerRunner;
  v27[0] = v8;
  GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:numParallelTasks:)(v10, (uint64_t)v27, v12, v11, v14, &v21);
  outlined destroy of Grammar(v9);
  uint64_t v15 = v23;
  char v16 = v24;
  uint64_t v17 = v25;
  char v18 = v26;
  long long v19 = v22;
  *(void *)uint64_t v13 = v21;
  *(_OWORD *)(v13 + 8) = v19;
  *(void *)(v13 + 24) = v15;
  *(unsigned char *)(v13 + 32) = v16;
  *(void *)(v13 + 40) = v17;
  *(unsigned char *)(v13 + 48) = v18;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t outlined init with take of Grammar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Grammar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Grammar(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Grammar(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Grammar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Grammar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t instantiation function for generic protocol witness table for TokenizerRunnerObjC(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TokenizerRunnerObjC and conformance NSObject();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenizerRunnerObjC and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenizerRunnerObjC and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TokenizerRunnerObjC and conformance NSObject)
  {
    type metadata accessor for TokenizerRunnerObjC(255, (unint64_t *)&lazy cache variable for type metadata for TokenizerRunnerObjC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerRunnerObjC and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in TokenizerRunnerObjC.collectPrefixes(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in TokenizerRunnerObjC.collectPrefixes(_:_:)(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_25F9A1F14()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @guaranteed String) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_25F9A1F64()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25F9A1F74()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t type metadata accessor for TokenizerRunnerObjC(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t Lock.__deallocating_deinit()
{
  pthread_mutex_destroy(*(pthread_mutex_t **)(v0 + 16));
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t MaskCache.getMask(forHashKey:)(uint64_t a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(*(void *)(v1 + 24) + 16);
  pthread_mutex_lock(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  if (*(void *)(v4 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 16 * v5);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift_endAccess();
  pthread_mutex_unlock(v3);
  return v7;
}

uint64_t MaskCache.setMask(forHashKey:result:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *(void *)(v3 + 24);
  pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 16));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a3, a1, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 16) = v10;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 16));
}

uint64_t MaskCache.__deallocating_deinit()
{
  return MaskCache.__deallocating_deinit(MEMORY[0x263F8EEA0], MEMORY[0x263F8EED8]);
}

BOOL static ValidationResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ValidationResult.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ValidationResult.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ValidationResult and conformance ValidationResult()
{
  unint64_t result = lazy protocol witness table cache variable for type ValidationResult and conformance ValidationResult;
  if (!lazy protocol witness table cache variable for type ValidationResult and conformance ValidationResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValidationResult and conformance ValidationResult);
  }
  return result;
}

uint64_t type metadata accessor for Lock()
{
  return self;
}

uint64_t type metadata accessor for MaskCache()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ValidationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F9A2394);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ValidationResult()
{
  return &type metadata for ValidationResult;
}

uint64_t type metadata instantiation function for ParserGuidedGenerationConstraints.TokenParserManager()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for ParserGuidedGenerationConstraints.TokenParserManager()
{
  return swift_initClassMetadata2();
}

uint64_t ParserGuidedGenerationConstraints.TokenParserManager.__deallocating_deinit()
{
  return MaskCache.__deallocating_deinit(MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
}

uint64_t MaskCache.__deallocating_deinit(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 24));
  return MEMORY[0x270FA0228](v2, 32, 7);
}

uint64_t type metadata accessor for ParserGuidedGenerationConstraints.TokenParserManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for SpaceLookaheadMaskGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for SpaceLookaheadMaskGenerator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata completion function for ConstraintsProvider()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConstraintsProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for ConstraintsProvider(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for ConstraintsProvider(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ConstraintsProvider(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x25F9A2B10);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for ConstraintsProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for ParserGuidedGenerationConstraints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

uint64_t type metadata completion function for ParserGuidedGenerationConstraints()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ParserGuidedGenerationConstraints(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((((v6 + 24) & ~v6) + v7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    unsigned int v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v12 = *v13;
    unsigned int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v14 = *v15;
    uint64_t v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    uint64_t v17 = ((unint64_t)v15 + v6 + 8) & ~v6;
    char v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v18(v16, v17, v4);
    *(unsigned char *)(v16 + v7) = *(unsigned char *)(v17 + v7);
    unint64_t v19 = (v16 + v7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v17 + v7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = *(void *)(v20 + 8);
    *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
    *(void *)(v19 + 8) = v21;
  }
  return a1;
}

uint64_t destroy for ParserGuidedGenerationConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((((v3 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return v5(v6);
}

void *initializeWithCopy for ParserGuidedGenerationConstraints(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)(((v4 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 24);
  unsigned int v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  uint64_t v11 = *(void *)(v9 - 8) + 16;
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(v9 - 8) + 80);
  uint64_t v13 = ((unint64_t)v7 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v8 + v12 + 8) & ~v12;
  swift_retain();
  swift_retain();
  swift_retain();
  v10(v13, v14, v9);
  uint64_t v15 = *(void *)(v11 + 48);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15 + v14;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  v16 &= 0xFFFFFFFFFFFFFFF8;
  v17 &= 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 16);
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(unsigned char *)(v16 + 16) = v18;
  return a1;
}

void *assignWithCopy for ParserGuidedGenerationConstraints(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)(((v5 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_retain();
  swift_release();
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 40);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  v16 &= 0xFFFFFFFFFFFFFFF8;
  char v17 = *(unsigned char *)(v16 + 16);
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  *(unsigned char *)(v15 + 16) = v17;
  return a1;
}

void *initializeWithTake for ParserGuidedGenerationConstraints(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  unint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 32);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  char v16 = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  *(unsigned char *)(v14 + 16) = v16;
  return a1;
}

void *assignWithTake for ParserGuidedGenerationConstraints(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  void *v6 = *(void *)v5;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_release();
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 24);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  v16 &= 0xFFFFFFFFFFFFFFF8;
  char v17 = *(unsigned char *)(v16 + 16);
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  *(unsigned char *)(v15 + 16) = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for ParserGuidedGenerationConstraints(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 24) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25F9A3368);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((v6 + 24) & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                  + v6
                                                                  + 8) & ~v6);
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ParserGuidedGenerationConstraints(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((v9 + 24) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v20 = (((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
              uint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(v20);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = a2 - 1;
              }
              *(void *)a1 = v19;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x25F9A35A0);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for ParserGuidedGenerationConstraints()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t destroy for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for SentencePieceVocabularyTextConverter()
{
  return &type metadata for SentencePieceVocabularyTextConverter;
}

uint64_t associated type witness table accessor for LogitMaskGenerating.CharacterParser : CharacterGrammarParser in SpaceLookaheadMaskGenerator<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ExhaustiveLogitMaskGenerator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t *))result;
    unint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x263F8EE78];
    unsigned int v12 = (uint64_t (*)(uint64_t *))result;
    while (v7 < *(void *)(a3 + 16))
    {
      uint64_t v11 = *(void *)(a3 + 8 * v7 + 32);
      uint64_t v13 = v11;
      uint64_t result = v6(&v13);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }
      if (result)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
          uint64_t v8 = v14;
        }
        unint64_t v10 = *(void *)(v8 + 16);
        unint64_t v9 = *(void *)(v8 + 24);
        if (v10 >= v9 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
          uint64_t v8 = v14;
        }
        *(void *)(v8 + 16) = v10 + 1;
        *(void *)(v8 + 8 * v10 + 32) = v11;
        uint64_t v6 = v12;
      }
      if (v5 == ++v7) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_14:
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

void GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v78 = a2;
  uint64_t v7 = type metadata accessor for Grammar(0);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  unint64_t v75 = (unint64_t)"XCEPT_QUOTE_AND_BACKSLASH";
  *(void *)(v10 + 16) = 0xD00000000000001CLL;
  *(void *)(v10 + 24) = 0x800000025FA3DDF0;
  uint64_t v77 = v10;
  id v11 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  unsigned int v12 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v13 = objc_msgSend(v11, sel_initWithSuiteName_, v12);

  id v76 = v13;
  if (!v13)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v73 = v7;
  uint64_t v74 = a1;
  id v14 = (id)MobileGestalt_get_current_device();
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  int v15 = v14;
  int internalBuild = MobileGestalt_get_internalBuild();

  uint64_t v17 = swift_allocObject();
  unint64_t v72 = (unint64_t)"com.apple.tokengeneration";
  *(void *)(v17 + 16) = 0xD000000000000014;
  *(void *)(v17 + 24) = 0x800000025FA3DE30;
  id v18 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v19 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v20 = objc_msgSend(v18, sel_initWithSuiteName_, v19);

  id v71 = v20;
  if (!v20)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v69 = a3;
  uint64_t v70 = v9;
  id v21 = (id)MobileGestalt_get_current_device();
  if (!v21)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  long long v22 = v21;
  int v67 = MobileGestalt_get_internalBuild();

  uint64_t v23 = swift_allocObject();
  unint64_t v68 = (unint64_t)"enableRightRecursion";
  *(void *)(v23 + 16) = 0xD000000000000010;
  *(void *)(v23 + 24) = 0x800000025FA3DE50;
  id v24 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v25 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v26 = objc_msgSend(v24, sel_initWithSuiteName_, v25);

  id v80 = v26;
  if (!v26)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v66 = a4;
  id v27 = (id)MobileGestalt_get_current_device();
  if (!v27)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v28 = v27;
  uint64_t v65 = v17;
  int v79 = MobileGestalt_get_internalBuild();

  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0xD000000000000014;
  *(void *)(v29 + 24) = 0x800000025FA3DE70;
  id v30 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v31 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v32 = objc_msgSend(v30, sel_initWithSuiteName_, v31);

  if (!v32)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int v33 = internalBuild;
  id v34 = (id)MobileGestalt_get_current_device();
  if (v34)
  {
    uint64_t v35 = v34;
    char v36 = MobileGestalt_get_internalBuild();

    v89[0] = v76;
    v89[1] = 0xD00000000000001CLL;
    v89[2] = v75 | 0x8000000000000000;
    v89[3] = partial apply for closure #1 in Overridable<A>.init(key:);
    v89[4] = v77;
    char v90 = v33;
    id v91 = v71;
    unint64_t v92 = 0xD000000000000014;
    unint64_t v93 = v72 | 0x8000000000000000;
    uint64_t v94 = closure #1 in Overridable<A>.init(key:)partial apply;
    uint64_t v95 = v65;
    char v96 = v67;
    id v97 = v80;
    unint64_t v98 = 0xD000000000000010;
    unint64_t v99 = v68 | 0x8000000000000000;
    char v100 = partial apply for closure #1 in Overridable<A>.init(key:);
    uint64_t v101 = v23;
    char v102 = v79;
    id v103 = v32;
    unint64_t v104 = 0xD000000000000014;
    unint64_t v105 = 0x800000025FA3DE70;
    Swift::Int v106 = closure #1 in Overridable<A>.init(key:)partial apply;
    uint64_t v107 = v29;
    char v108 = v36;
    if (v33)
    {
      uint64_t v37 = v77;
      uint64_t v38 = v76;
      outlined retain of GuidedGenerationOverrides((uint64_t)v89);
      id v39 = v38;
      swift_bridgeObjectRetain();
      swift_retain();
      closure #1 in Overridable<A>.init(key:)(v39, *(void *)(v37 + 16), *(void *)(v37 + 24), &v81);
      swift_release();
      swift_bridgeObjectRelease();

      outlined release of GuidedGenerationOverrides((uint64_t)v89);
      LODWORD(v77) = v81 & 1;
      uint64_t v40 = v73;
      if (!v79)
      {
LABEL_11:
        uint64_t v41 = 4;
LABEL_15:
        id v80 = (id)v41;
        uint64_t v43 = v78;
        outlined init with copy of GuidedGenerationTokenizer(v78, (uint64_t)&v81);
        uint64_t v44 = *(int *)(v40 + 32);
        uint64_t v45 = v74;
        uint64_t v46 = *(void *)(v74 + v44);
        outlined init with copy of GuidedGenerationTokenizer((uint64_t)&v81, (uint64_t)v88);
        v87[3] = &type metadata for SentencePieceVocabularyTextConverter;
        v87[4] = &protocol witness table for SentencePieceVocabularyTextConverter;
        uint64_t v47 = (void *)swift_allocObject();
        v87[0] = v47;
        v47[2] = 8492770;
        v47[3] = 0xA300000000000000;
        v47[4] = 8492770;
        v47[5] = 0xA300000000000000;
        type metadata accessor for VocabularyManager(0);
        unint64_t v48 = (void *)swift_allocObject();
        uint64_t v49 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v87, (uint64_t)&type metadata for SentencePieceVocabularyTextConverter);
        MEMORY[0x270FA5388](v49);
        uint64_t v51 = (uint64_t *)((char *)&v65 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
        (*(void (**)(uint64_t *))(v52 + 16))(v51);
        uint64_t v53 = *v51;
        uint64_t v54 = v51[1];
        uint64_t v56 = v51[2];
        uint64_t v55 = v51[3];
        swift_bridgeObjectRetain();
        uint64_t v57 = specialized VocabularyManager.init(tokenizer:characterSetsUsedInGrammar:vocabConverter:stopTokenIDs:)(v88, v46, v53, v54, v56, v55, v69, v48);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
        uint64_t v58 = (uint64_t)v70;
        _s19TokenGenerationCore7GrammarVWOcTm_1(v45, (uint64_t)v70, type metadata accessor for Grammar);
        v88[0] = (uint64_t)v57;
        GuidedGenerationConstraints.init(grammar:vocabularyManager:enableDeterministicTokenRuns:numberOfParallelTasks:)(v58, v88, v77, (uint64_t)v80, (uint64_t)&v81);
        outlined release of GuidedGenerationOverrides((uint64_t)v89);
        __swift_destroy_boxed_opaque_existential_1(v43);
        _s19TokenGenerationCore7GrammarVWOhTm_0(v45, type metadata accessor for Grammar);
        uint64_t v59 = v83;
        char v60 = v84;
        uint64_t v61 = v85;
        char v62 = v86;
        long long v63 = v82;
        uint64_t v64 = v66;
        *uint64_t v66 = v81;
        *(_OWORD *)(v64 + 1) = v63;
        v64[3] = v59;
        *((unsigned char *)v64 + 32) = v60;
        v64[5] = v61;
        *((unsigned char *)v64 + 48) = v62;
        return;
      }
    }
    else
    {
      LODWORD(v77) = 0;
      uint64_t v40 = v73;
      if (!v79) {
        goto LABEL_11;
      }
    }
    outlined retain of GuidedGenerationOverrides((uint64_t)v89);
    id v42 = v80;
    swift_bridgeObjectRetain();
    swift_retain();
    closure #1 in Overridable<A>.init(key:)(v42, *(void *)(v23 + 16), *(void *)(v23 + 24), (uint64_t)&v81);
    swift_release();
    swift_bridgeObjectRelease();

    outlined release of GuidedGenerationOverrides((uint64_t)v89);
    uint64_t v41 = v81;
    if ((_BYTE)v82) {
      uint64_t v41 = 4;
    }
    goto LABEL_15;
  }
LABEL_23:
  __break(1u);
}

void GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:numParallelTasks:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v81 = a1;
  uint64_t v77 = type metadata accessor for Grammar(0);
  MEMORY[0x270FA5388](v77);
  id v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  unint64_t v78 = (unint64_t)"XCEPT_QUOTE_AND_BACKSLASH";
  *(void *)(v12 + 16) = 0xD00000000000001CLL;
  *(void *)(v12 + 24) = 0x800000025FA3DDF0;
  uint64_t v82 = v12;
  id v13 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  id v14 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v15 = objc_msgSend(v13, sel_initWithSuiteName_, v14);

  id v79 = v15;
  if (!v15)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v76 = a3;
  id v16 = (id)MobileGestalt_get_current_device();
  if (!v16)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v17 = v16;
  int internalBuild = MobileGestalt_get_internalBuild();

  uint64_t v19 = swift_allocObject();
  unint64_t v74 = (unint64_t)"com.apple.tokengeneration";
  uint64_t v75 = v19;
  *(void *)(v19 + 16) = 0xD000000000000014;
  *(void *)(v19 + 24) = 0x800000025FA3DE30;
  id v20 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  id v21 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v22 = objc_msgSend(v20, sel_initWithSuiteName_, v21);

  id v73 = v22;
  if (!v22)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v71 = v11;
  int v72 = a5;
  id v23 = (id)MobileGestalt_get_current_device();
  if (!v23)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v24 = v23;
  int v69 = MobileGestalt_get_internalBuild();

  uint64_t v25 = swift_allocObject();
  unint64_t v70 = (unint64_t)"enableRightRecursion";
  *(void *)(v25 + 16) = 0xD000000000000010;
  *(void *)(v25 + 24) = 0x800000025FA3DE50;
  id v26 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  id v27 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v28 = objc_msgSend(v26, sel_initWithSuiteName_, v27);

  id v84 = v28;
  if (!v28)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v67 = a4;
  unint64_t v68 = a6;
  id v29 = (id)MobileGestalt_get_current_device();
  if (!v29)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  id v30 = v29;
  int v83 = MobileGestalt_get_internalBuild();

  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = 0xD000000000000014;
  *(void *)(v31 + 24) = 0x800000025FA3DE70;
  id v32 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  int v33 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v34 = objc_msgSend(v32, sel_initWithSuiteName_, v33);

  if (!v34)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int v35 = internalBuild;
  id v36 = (id)MobileGestalt_get_current_device();
  uint64_t v37 = v82;
  if (!v36)
  {
LABEL_26:
    __break(1u);
    return;
  }
  uint64_t v38 = v36;
  char v39 = MobileGestalt_get_internalBuild();

  v93[0] = v79;
  v93[1] = 0xD00000000000001CLL;
  v93[2] = v78 | 0x8000000000000000;
  v93[3] = closure #1 in Overridable<A>.init(key:)partial apply;
  v93[4] = v37;
  char v94 = v35;
  id v95 = v73;
  unint64_t v96 = 0xD000000000000014;
  unint64_t v97 = v74 | 0x8000000000000000;
  unint64_t v98 = closure #1 in Overridable<A>.init(key:)partial apply;
  uint64_t v99 = v75;
  char v100 = v69;
  id v101 = v84;
  unint64_t v102 = 0xD000000000000010;
  unint64_t v103 = v70 | 0x8000000000000000;
  unint64_t v104 = closure #1 in Overridable<A>.init(key:)partial apply;
  uint64_t v105 = v25;
  char v106 = v83;
  id v107 = v34;
  unint64_t v108 = 0xD000000000000014;
  unint64_t v109 = 0x800000025FA3DE70;
  uint64_t v110 = closure #1 in Overridable<A>.init(key:)partial apply;
  uint64_t v111 = v31;
  char v112 = v39;
  if (!v35)
  {
    LODWORD(v82) = 0;
    if (!v83) {
      goto LABEL_11;
    }
LABEL_13:
    outlined retain of GuidedGenerationOverrides((uint64_t)v93);
    id v43 = v84;
    swift_bridgeObjectRetain();
    swift_retain();
    closure #1 in Overridable<A>.init(key:)(v43, *(void *)(v25 + 16), *(void *)(v25 + 24), (uint64_t)&v85);
    swift_release();
    swift_bridgeObjectRelease();

    outlined release of GuidedGenerationOverrides((uint64_t)v93);
    uint64_t v42 = v85;
    if ((_BYTE)v86) {
      uint64_t v42 = 4;
    }
    goto LABEL_15;
  }
  uint64_t v40 = v79;
  outlined retain of GuidedGenerationOverrides((uint64_t)v93);
  id v41 = v40;
  swift_bridgeObjectRetain();
  swift_retain();
  closure #1 in Overridable<A>.init(key:)(v41, *(void *)(v37 + 16), *(void *)(v37 + 24), &v85);
  swift_release();
  swift_bridgeObjectRelease();

  outlined release of GuidedGenerationOverrides((uint64_t)v93);
  LODWORD(v82) = v85 & 1;
  if (v83) {
    goto LABEL_13;
  }
LABEL_11:
  uint64_t v42 = 4;
LABEL_15:
  id v84 = (id)v42;
  uint64_t v44 = v77;
  uint64_t v45 = v80;
  outlined init with copy of GuidedGenerationTokenizer(v80, (uint64_t)&v85);
  uint64_t v46 = v81;
  uint64_t v47 = *(void *)(v81 + *(int *)(v44 + 32));
  outlined init with copy of GuidedGenerationTokenizer((uint64_t)&v85, (uint64_t)v92);
  v91[3] = &type metadata for SentencePieceVocabularyTextConverter;
  v91[4] = &protocol witness table for SentencePieceVocabularyTextConverter;
  unint64_t v48 = (void *)swift_allocObject();
  v91[0] = v48;
  v48[2] = 8492770;
  v48[3] = 0xA300000000000000;
  v48[4] = 8492770;
  v48[5] = 0xA300000000000000;
  type metadata accessor for VocabularyManager(0);
  uint64_t v49 = (void *)swift_allocObject();
  uint64_t v50 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v91, (uint64_t)&type metadata for SentencePieceVocabularyTextConverter);
  MEMORY[0x270FA5388](v50);
  uint64_t v52 = (uint64_t *)((char *)&v67 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v53 + 16))(v52);
  uint64_t v54 = *v52;
  uint64_t v55 = v52[1];
  uint64_t v57 = v52[2];
  uint64_t v56 = v52[3];
  swift_bridgeObjectRetain();
  uint64_t v58 = specialized VocabularyManager.init(tokenizer:characterSetsUsedInGrammar:vocabConverter:stopTokenIDs:)(v92, v47, v54, v55, v57, v56, v76, v49);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
  uint64_t v59 = (uint64_t)v71;
  _s19TokenGenerationCore7GrammarVWOcTm_1(v46, (uint64_t)v71, type metadata accessor for Grammar);
  v92[0] = (uint64_t)v58;
  if (v72) {
    uint64_t v60 = (uint64_t)v84;
  }
  else {
    uint64_t v60 = v67;
  }
  GuidedGenerationConstraints.init(grammar:vocabularyManager:enableDeterministicTokenRuns:numberOfParallelTasks:)(v59, v92, v82, v60, (uint64_t)&v85);
  outlined release of GuidedGenerationOverrides((uint64_t)v93);
  __swift_destroy_boxed_opaque_existential_1(v45);
  _s19TokenGenerationCore7GrammarVWOhTm_0(v46, type metadata accessor for Grammar);
  uint64_t v61 = v87;
  char v62 = v88;
  uint64_t v63 = v89;
  char v64 = v90;
  long long v65 = v86;
  uint64_t v66 = v68;
  *unint64_t v68 = v85;
  *(_OWORD *)(v66 + 1) = v65;
  v66[3] = v61;
  *((unsigned char *)v66 + 32) = v62;
  v66[5] = v63;
  *((unsigned char *)v66 + 48) = v64;
}

void GuidedGenerationConstraints.init(grammar:vocabularyManager:enableDeterministicTokenRuns:numberOfParallelTasks:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v72 = a4;
  int v59 = a3;
  uint64_t v8 = type metadata accessor for Grammar(0);
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  id v11 = (uint64_t *)((char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *a2;
  _s19TokenGenerationCore7GrammarVWOcTm_1(a1, (uint64_t)v11, type metadata accessor for Grammar);
  type metadata accessor for EarleyParser.ParserGrammar();
  swift_allocObject();
  id v13 = EarleyParser.ParserGrammar.init(grammar:)(v11);
  id v14 = specialized static EarleyParser.createRootItems(parserGrammar:)(v13);
  uint64_t v15 = *(int *)(v9 + 40);
  uint64_t v73 = a1;
  uint64_t v16 = *(void *)(a1 + v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.State>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_25FA352B0;
  *(void *)(v17 + 32) = v14;
  type metadata accessor for EarleyParser();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  *(_DWORD *)(v18 + 24) = 0;
  *(unsigned char *)(v18 + 28) = 1;
  *(void *)(v18 + 32) = v13;
  *(void *)(v18 + 40) = v17;
  *(void *)(v18 + 48) = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGrammarParser<EarleyParser>);
  uint64_t v19 = swift_allocObject();
  *(unsigned char *)(v19 + 16) = 0;
  *(void *)(v19 + 48) = 0;
  type metadata accessor for Lock();
  uint64_t v20 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  id v21 = (pthread_mutex_t *)swift_slowAlloc();
  *(void *)(v20 + 16) = v21;
  pthread_mutex_init(v21, 0);
  *(void *)(v19 + 56) = v20;
  *(void *)(v19 + 24) = v12;
  swift_beginAccess();
  *(void *)(v19 + 48) = v18;
  swift_release();
  *(void *)(v19 + 32) = 0;
  *(unsigned char *)(v19 + 40) = 1;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0xD00000000000001CLL;
  *(void *)(v22 + 24) = 0x800000025FA3DDF0;
  uint64_t v74 = v22;
  id v23 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  swift_retain();
  id v24 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v25 = objc_msgSend(v23, sel_initWithSuiteName_, v24);

  if (!v25)
  {
    __break(1u);
    goto LABEL_16;
  }
  id v26 = (id)MobileGestalt_get_current_device();
  if (!v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v27 = v26;
  int internalBuild = MobileGestalt_get_internalBuild();

  uint64_t v28 = swift_allocObject();
  unint64_t v69 = (unint64_t)"com.apple.tokengeneration";
  uint64_t v70 = v28;
  *(void *)(v28 + 16) = 0xD000000000000014;
  *(void *)(v28 + 24) = 0x800000025FA3DE30;
  id v29 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  id v30 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v31 = objc_msgSend(v29, sel_initWithSuiteName_, v30);

  id v68 = v31;
  if (!v31)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v66 = a5;
  unint64_t v67 = (unint64_t)"XCEPT_QUOTE_AND_BACKSLASH";
  id v32 = (id)MobileGestalt_get_current_device();
  if (!v32)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  int v33 = v32;
  int v65 = MobileGestalt_get_internalBuild();

  uint64_t v34 = swift_allocObject();
  unint64_t v63 = 0xD000000000000010;
  unint64_t v64 = (unint64_t)"enableRightRecursion";
  *(void *)(v34 + 16) = 0xD000000000000010;
  *(void *)(v34 + 24) = 0x800000025FA3DE50;
  id v35 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  id v36 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v37 = objc_msgSend(v35, sel_initWithSuiteName_, v36);

  if (!v37)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v62 = v25;
  id v38 = (id)MobileGestalt_get_current_device();
  if (!v38)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  char v39 = v38;
  int v61 = MobileGestalt_get_internalBuild();

  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = 0xD000000000000014;
  *(void *)(v40 + 24) = 0x800000025FA3DE70;
  id v41 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v42 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v43 = objc_msgSend(v41, sel_initWithSuiteName_, v42);

  if (!v43)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v60 = v18;
  id v44 = (id)MobileGestalt_get_current_device();
  if (v44)
  {
    uint64_t v45 = v44;
    char v46 = MobileGestalt_get_internalBuild();

    uint64_t v47 = v62;
    v75[0] = v62;
    v75[1] = 0xD00000000000001CLL;
    v75[2] = v67 | 0x8000000000000000;
    v75[3] = closure #1 in Overridable<A>.init(key:)partial apply;
    v75[4] = v74;
    char v76 = internalBuild;
    id v77 = v68;
    unint64_t v78 = 0xD000000000000014;
    unint64_t v79 = v69 | 0x8000000000000000;
    uint64_t v80 = closure #1 in Overridable<A>.init(key:)partial apply;
    uint64_t v81 = v70;
    char v82 = v65;
    id v83 = v37;
    unint64_t v84 = v63;
    unint64_t v85 = v64 | 0x8000000000000000;
    long long v86 = closure #1 in Overridable<A>.init(key:)partial apply;
    uint64_t v87 = v34;
    char v88 = v61;
    id v89 = v43;
    unint64_t v90 = 0xD000000000000014;
    unint64_t v91 = 0x800000025FA3DE70;
    unint64_t v92 = closure #1 in Overridable<A>.init(key:)partial apply;
    uint64_t v93 = v40;
    char v94 = v46;
    if (internalBuild)
    {
      uint64_t v48 = v74;
      outlined retain of GuidedGenerationOverrides((uint64_t)v75);
      id v49 = v47;
      swift_bridgeObjectRetain();
      swift_retain();
      closure #1 in Overridable<A>.init(key:)(v49, *(void *)(v48 + 16), *(void *)(v48 + 24), &v95);
      swift_release();
      swift_bridgeObjectRelease();

      outlined release of GuidedGenerationOverrides((uint64_t)v75);
      uint64_t v50 = v66;
      uint64_t v51 = v72;
      uint64_t v52 = v73;
      if (v95 != 2)
      {
        char v53 = v95 & 1;
LABEL_14:
        specialized ParserGuidedGenerationConstraints.init(tokenParser:maskGenerator:enableDeterministicTokenRuns:numParallelTasks:)(v19, v53 & 1, v51, 0, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache>, &demangling cache variable for type metadata for ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager, (uint64_t)&v95);
        uint64_t v54 = v96;
        char v55 = v97;
        uint64_t v56 = v98;
        char v57 = v99;
        swift_release();
        outlined release of GuidedGenerationOverrides((uint64_t)v75);
        _s19TokenGenerationCore7GrammarVWOhTm_0(v52, type metadata accessor for Grammar);
        *(void *)uint64_t v50 = v19;
        *(_OWORD *)(v50 + 8) = v95;
        *(void *)(v50 + 24) = v54;
        *(unsigned char *)(v50 + 32) = v55;
        *(void *)(v50 + 40) = v56;
        *(unsigned char *)(v50 + 48) = v57;
        return;
      }
    }
    else
    {
      uint64_t v50 = v66;
      uint64_t v51 = v72;
      uint64_t v52 = v73;
    }
    char v53 = v59;
    goto LABEL_14;
  }
LABEL_22:
  __break(1u);
}

unint64_t specialized ParserGuidedGenerationConstraints.TokenParserManager.childParserIndex(for:tokenID:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(unint64_t), uint64_t (*a4)(BOOL, unint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = *(void *)(v4 + 16);
  id v11 = *(pthread_mutex_t **)(v10 + 16);
  pthread_mutex_lock(v11);
  uint64_t v12 = (unint64_t *)(v4 + 24);
  swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v13 = *(void *)(v4 + 24);
  if (*(void *)(v13 + 16) <= a1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v14 = v13 + 16 * a1;
  uint64_t v15 = *(void *)(v14 + 40);
  if (!*(void *)(v15 + 16) || (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v17 & 1) == 0))
  {
    swift_endAccess();
    unint64_t v4 = *(void *)(v14 + 32);
    swift_retain();
    id v11 = (pthread_mutex_t *)specialized TokenGrammarParser.childParser(consumingTokenID:)(a2);
    swift_release();
    swift_beginAccess();
    unint64_t v5 = *(void *)(*v12 + 16);
    if (v5 > a1)
    {
      uint64_t v18 = *(void *)(*v12 + 16 * a1 + 40);
      if (*(void *)(v18 + 16))
      {
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
        if (v20)
        {
          unint64_t v5 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
LABEL_16:
          swift_endAccess();
          swift_release();
          id v11 = *(pthread_mutex_t **)(v10 + 16);
          goto LABEL_17;
        }
      }
      swift_endAccess();
      swift_beginAccess();
      unint64_t v4 = *v12;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v12 = v4;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_11:
        if (*(void *)(v4 + 16) <= a1)
        {
          __break(1u);
        }
        else
        {
          unint64_t v22 = v4 + 16 * a1;
          char v23 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v29 = *(void *)(v22 + 40);
          *(void *)(v22 + 40) = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, a2, v23);
          *(void *)(v22 + 40) = v29;
          swift_bridgeObjectRelease();
          swift_endAccess();
          unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
          swift_beginAccess();
          a2 = *v12;
          swift_retain();
          char v24 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v12 = a2;
          if (v24)
          {
LABEL_13:
            unint64_t v26 = *(void *)(a2 + 16);
            unint64_t v25 = *(void *)(a2 + 24);
            if (v26 >= v25 >> 1)
            {
              a2 = a4(v25 > 1, v26 + 1, 1, a2);
              *uint64_t v12 = a2;
            }
            *(void *)(a2 + 16) = v26 + 1;
            uint64_t v27 = a2 + 16 * v26;
            *(void *)(v27 + 32) = v11;
            *(void *)(v27 + 40) = v4;
            goto LABEL_16;
          }
        }
        a2 = a4(0, *(void *)(a2 + 16) + 1, 1, a2);
        *uint64_t v12 = a2;
        goto LABEL_13;
      }
LABEL_21:
      unint64_t v4 = a3(v4);
      *uint64_t v12 = v4;
      goto LABEL_11;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v5 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
  swift_endAccess();
LABEL_17:
  pthread_mutex_unlock(v11);
  return v5;
}

uint64_t specialized TokenGrammarParser.childParser(consumingTokenID:)(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (unint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(v1 + 56);
  pthread_mutex_lock(*(pthread_mutex_t **)(v6 + 16));
  uint64_t v7 = *(void *)(v1 + 24);
  VocabularyManager.prefixLookUp.getter(v5);
  unint64_t v8 = v5[6];
  swift_bridgeObjectRetain();
  uint64_t result = _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v5, type metadata accessor for VocabularyManager.PrefixLookup);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v8 + 16) > a1)
  {
    unint64_t v10 = v8 + 16 * a1;
    uint64_t v11 = *(void *)(v10 + 32);
    unint64_t v12 = *(void *)(v10 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v13 = specialized TokenGrammarParser.parse(consuming:)(v11, v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_allocObject();
    *(unsigned char *)(v14 + 16) = 0;
    *(void *)(v14 + 48) = 0;
    type metadata accessor for Lock();
    uint64_t v15 = swift_allocObject();
    swift_retain();
    unint64_t v16 = (pthread_mutex_t *)swift_slowAlloc();
    *(void *)(v15 + 16) = v16;
    pthread_mutex_init(v16, 0);
    *(void *)(v14 + 56) = v15;
    *(void *)(v14 + 24) = v7;
    swift_beginAccess();
    *(void *)(v14 + 48) = v13;
    swift_release();
    *(void *)(v14 + 32) = a1;
    *(unsigned char *)(v14 + 40) = 0;
    pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 16));
    return v14;
  }
  __break(1u);
  return result;
}

unint64_t specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(unint64_t), uint64_t (*a4)(BOOL, unint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7 < 0 || v7 >= a2)
    {
LABEL_32:
      if (one-time initialization token for guided == -1)
      {
LABEL_33:
        uint64_t v33 = type metadata accessor for Logger();
        __swift_project_value_buffer(v33, (uint64_t)static Log.guided);
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          id v36 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)id v36 = 134217984;
          uint64_t v44 = v7;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_25F950000, v34, v35, "Out-of-vocabulary token ID (%ld) passed to generateNextTokenIDMask", v36, 0xCu);
          MEMORY[0x2612040B0](v36, -1, -1);
        }

        lazy protocol witness table accessor for type GuidedGenerationError and conformance GuidedGenerationError();
        swift_allocError();
        *id v37 = 1;
        swift_willThrow();
        return v5;
      }
LABEL_39:
      swift_once();
      goto LABEL_33;
    }
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized ParserGuidedGenerationConstraints.TokenParserManager.childParserIndex(for:tokenID:)(0, v7, a3, a4);
    uint64_t v39 = *(void *)(v4 + 16);
    uint64_t v9 = *(pthread_mutex_t **)(v39 + 16);
    pthread_mutex_lock(v9);
    swift_beginAccess();
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 24);
      if (v5 < *(void *)(v10 + 16))
      {
        uint64_t v11 = *(void *)(v10 + 16 * v5 + 32);
        swift_retain();
        pthread_mutex_unlock(v9);
        swift_beginAccess();
        if (*(void *)(v11 + 48))
        {
          uint64_t v12 = 0;
          char v13 = 0;
          uint64_t v40 = v6 - 1;
          uint64_t v14 = (void *)MEMORY[0x263F8EE78];
          while (1)
          {
            if ((v13 & 1) == 0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
              }
              unint64_t v16 = v14[2];
              unint64_t v15 = v14[3];
              if (v16 >= v15 >> 1) {
                uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
              }
              v14[2] = v16 + 1;
              v14[v16 + 4] = v7;
            }
            uint64_t v17 = *(pthread_mutex_t **)(*(void *)(v11 + 56) + 16);
            pthread_mutex_lock(v17);
            char v13 = *(unsigned char *)(v11 + 16);
            pthread_mutex_unlock(v17);
            swift_release();
            if (v40 == v12)
            {
              swift_bridgeObjectRelease();
              goto LABEL_22;
            }
            unint64_t v18 = a1 + 8 * v12;
            uint64_t v7 = *(void *)(v18 + 40);
            if (v7 < 0 || v7 >= a2)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_32;
            }
            unint64_t v5 = specialized ParserGuidedGenerationConstraints.TokenParserManager.childParserIndex(for:tokenID:)(v5, *(void *)(v18 + 40), a3, a4);
            unint64_t v19 = *(pthread_mutex_t **)(v39 + 16);
            pthread_mutex_lock(v19);
            if ((v5 & 0x8000000000000000) != 0) {
              break;
            }
            uint64_t v20 = *(void *)(v4 + 24);
            if (v5 >= *(void *)(v20 + 16)) {
              goto LABEL_38;
            }
            uint64_t v11 = *(void *)(v20 + 16 * v5 + 32);
            swift_retain();
            pthread_mutex_unlock(v19);
            swift_beginAccess();
            ++v12;
            if (!*(void *)(v11 + 48)) {
              goto LABEL_23;
            }
          }
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_23:
        unint64_t v5 = a1;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (one-time initialization token for guided == -1)
        {
LABEL_24:
          uint64_t v21 = type metadata accessor for Logger();
          __swift_project_value_buffer(v21, (uint64_t)static Log.guided);
          unint64_t v22 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v22, v23))
          {
            char v24 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)char v24 = 0;
            _os_log_impl(&dword_25F950000, v22, v23, "contextTokenIDs fail to match grammar", v24, 2u);
            MEMORY[0x2612040B0](v24, -1, -1);
          }

          swift_bridgeObjectRetain_n();
          unint64_t v25 = Logger.logObject.getter();
          os_log_type_t v26 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v27 = (uint8_t *)swift_slowAlloc();
            uint64_t v28 = swift_slowAlloc();
            uint64_t v44 = v28;
            *(_DWORD *)uint64_t v27 = 136642819;
            uint64_t v29 = swift_bridgeObjectRetain();
            uint64_t v30 = MEMORY[0x261202AC0](v29, MEMORY[0x263F8D6C8]);
            unint64_t v5 = v31;
            swift_bridgeObjectRelease();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v5, &v44);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_25F950000, v25, v26, "contextTokenIDs fail to match grammar with contextTokenIDs %{sensitive}s", v27, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2612040B0](v28, -1, -1);
            MEMORY[0x2612040B0](v27, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          lazy protocol witness table accessor for type GuidedGenerationError and conformance GuidedGenerationError();
          swift_allocError();
          *id v32 = 0;
          swift_willThrow();
          swift_release();
          return v5;
        }
LABEL_42:
        swift_once();
        goto LABEL_24;
      }
    }
    __break(1u);
    goto LABEL_42;
  }
  unint64_t v5 = 0;
LABEL_22:
  Array<A>.hashValue.getter();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized ParserGuidedGenerationConstraints.init(tokenParser:maskGenerator:enableDeterministicTokenRuns:numParallelTasks:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_25FA352B0;
  uint64_t v14 = MEMORY[0x263F8EE78];
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v13 + 32) = a1;
  *(void *)(v13 + 40) = v15;
  __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t v16 = swift_allocObject();
  type metadata accessor for Lock();
  uint64_t v17 = swift_allocObject();
  swift_retain_n();
  unint64_t v18 = (pthread_mutex_t *)swift_slowAlloc();
  *(void *)(v17 + 16) = v18;
  pthread_mutex_init(v18, 0);
  swift_release();
  *(void *)(v16 + 16) = v17;
  *(void *)(v16 + 24) = v13;
  type metadata accessor for MaskCache();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v14);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = (pthread_mutex_t *)swift_slowAlloc();
  *(void *)(v20 + 16) = v21;
  uint64_t result = pthread_mutex_init(v21, 0);
  *(void *)(v19 + 24) = v20;
  *(void *)a7 = v16;
  *(void *)(a7 + 8) = v19;
  *(void *)(a7 + 16) = a1;
  *(unsigned char *)(a7 + 24) = a2;
  *(void *)(a7 + 32) = a3;
  *(unsigned char *)(a7 + 40) = a4 & 1;
  return result;
}

uint64_t specialized TokenGrammarParser.spaceLookAheadParser()()
{
  uint64_t v1 = v0[7];
  pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 16));
  swift_beginAccess();
  if (v0[6])
  {
    swift_retain();
    uint64_t v2 = EarleyParser.childParser(consumingElement:)(32);
    swift_release();
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v0[3];
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 0;
  *(void *)(v4 + 48) = 0;
  type metadata accessor for Lock();
  uint64_t v5 = swift_allocObject();
  swift_retain();
  uint64_t v6 = (pthread_mutex_t *)swift_slowAlloc();
  *(void *)(v5 + 16) = v6;
  pthread_mutex_init(v6, 0);
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 24) = v3;
  swift_beginAccess();
  *(void *)(v4 + 48) = v2;
  swift_release();
  *(void *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 40) = 1;
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 16));
  return v4;
}

uint64_t specialized ParserGuidedGenerationConstraints.nextMask(follow:)@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = type metadata accessor for LogitMaskResponse(0);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = specialized ParserGuidedGenerationConstraints.possiblyDeterministicTokens(follow:)(a1, *(void *)v2, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24) & 1);
  if (!v3)
  {
    if (result)
    {
      specialized ParserGuidedGenerationConstraints.generateNextLogitMask(from:)(a1, v8);
      outlined init with take of LogitMaskResponse((uint64_t)v8, (uint64_t)a2, type metadata accessor for LogitMaskResponse);
      type metadata accessor for LogitMaskComputation(0);
      return swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v10 = swift_allocObject();
      long long v11 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v10 + 32) = v11;
      *(_OWORD *)(v10 + 41) = *(_OWORD *)(v2 + 25);
      *(void *)(v10 + 64) = a1;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = partial apply for specialized closure #1 in ParserGuidedGenerationConstraints.nextMask(follow:);
      *(void *)(v12 + 24) = v10;
      *a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error);
      a2[1] = v12;
      type metadata accessor for LogitMaskComputation(0);
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_retain();
      swift_retain();
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t specialized ParserGuidedGenerationConstraints.generateNextLogitMask(from:)@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v4 = type metadata accessor for IndexSet();
  uint64_t v37 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  uint64_t v39 = v2[1];
  uint64_t v8 = v2[2];
  int v38 = *((unsigned __int8 *)v2 + 24);
  uint64_t v36 = v2[4];
  int v35 = *((unsigned __int8 *)v2 + 40);
  uint64_t v9 = *(void **)(v8 + 24);
  uint64_t v10 = v9[11];
  uint64_t v11 = v9[12];
  __swift_project_boxed_opaque_existential_1(v9 + 8, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
  uint64_t v13 = v41;
  uint64_t result = specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(a1, v12, (uint64_t (*)(unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  if (v13) {
    return result;
  }
  unint64_t v16 = result;
  Swift::UInt v17 = v15;
  uint64_t v32 = v4;
  uint64_t v33 = v8;
  unint64_t v18 = *(pthread_mutex_t **)(*(void *)(v7 + 16) + 16);
  pthread_mutex_lock(v18);
  uint64_t result = swift_beginAccess();
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v19 = *(void *)(v7 + 24);
  if (v16 >= *(void *)(v19 + 16))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v34 = 0;
  unint64_t v20 = v16;
  uint64_t v21 = *(void *)(v19 + 16 * v16 + 32);
  swift_retain();
  pthread_mutex_unlock(v18);
  uint64_t v22 = v9[14];
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v41 = v21;
  uint64_t v23 = v39;
  specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(v21, (uint64_t)v9, v22, v17, 0, v39);
  uint64_t v25 = v24;
  char v27 = v26;
  swift_release();
  swift_bridgeObjectRelease();
  if (v38 & 1) != 0 && (v27)
  {
    uint64_t v46 = v7;
    uint64_t v47 = v23;
    uint64_t v48 = v33;
    char v49 = 1;
    uint64_t v50 = v36;
    char v51 = v35;
    specialized ParserGuidedGenerationConstraints.performDeterministicRunLookaheadFallback(nextMask:parserIndex:)(v25, v20, v40);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
    uint64_t v28 = v32;
    dispatch thunk of SetAlgebra.init()();
    uint64_t v43 = BitSet.Iterator.init(_:)();
    uint64_t v44 = v29;
    uint64_t v45 = v30;
    Swift::Int_optional v52 = BitSet.Iterator.next()();
    for (i = v40; !v52.is_nil; Swift::Int_optional v52 = BitSet.Iterator.next()())
    {
      Swift::Int value = v52.value;
      dispatch thunk of SetAlgebra.insert(_:)();
    }
    swift_bridgeObjectRelease();
    (*(void (**)(void *, char *, uint64_t))(v37 + 32))(i, v6, v28);
    swift_release();
    type metadata accessor for LogitMaskResponse(0);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error)(uint64_t a1, void (*a2)(void))
{
  a2();
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
  return thunk for @escaping @callee_guaranteed @Sendable () -> (@out TokenIDMaskResponse, @error @owned Error)(v3);
}

uint64_t specialized ParserGuidedGenerationConstraints.nextTokenIDMaskComputation(follow:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized ParserGuidedGenerationConstraints.possiblyDeterministicTokens(follow:)(a1, *(void *)v2, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24) & 1);
  if (!v3)
  {
    if (result)
    {
      uint64_t result = specialized ParserGuidedGenerationConstraints.generateNextTokenIDMask(from:)(a1, (uint64_t)&v11);
      char v7 = v12;
      *(_OWORD *)a2 = v11;
      *(unsigned char *)(a2 + 16) = v7;
    }
    else
    {
      uint64_t v8 = swift_allocObject();
      long long v9 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v8 + 32) = v9;
      *(_OWORD *)(v8 + 41) = *(_OWORD *)(v2 + 25);
      *(void *)(v8 + 64) = a1;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = partial apply for specialized closure #1 in ParserGuidedGenerationConstraints.nextTokenIDMaskComputation(follow:);
      *(void *)(v10 + 24) = v8;
      *(void *)a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out TokenIDMaskResponse, @error @owned Error);
      *(void *)(a2 + 8) = v10;
      *(unsigned char *)(a2 + 16) = 0x80;
      swift_retain();
      swift_retain();
      swift_retain();
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t specialized ParserGuidedGenerationConstraints.generateNextTokenIDMask(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v26 = v2[1];
  char v25 = *((unsigned char *)v2 + 24);
  uint64_t v6 = *(void **)(v2[2] + 24);
  uint64_t v7 = v6[11];
  uint64_t v8 = v6[12];
  __swift_project_boxed_opaque_existential_1(v6 + 8, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  uint64_t result = specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(a1, v9, (uint64_t (*)(unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  if (v3) {
    return result;
  }
  unint64_t v12 = result;
  Swift::UInt v13 = v11;
  uint64_t v14 = *(pthread_mutex_t **)(*(void *)(v5 + 16) + 16);
  pthread_mutex_lock(v14);
  uint64_t result = swift_beginAccess();
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)(v5 + 24);
  if (v12 >= *(void *)(v15 + 16))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v16 = *(void *)(v15 + 16 * v12 + 32);
  swift_retain();
  pthread_mutex_unlock(v14);
  uint64_t v17 = v6[14];
  swift_retain();
  swift_bridgeObjectRetain();
  specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(v16, (uint64_t)v6, v17, v13, 0, v26);
  uint64_t v19 = v18;
  char v21 = v20;
  swift_release();
  swift_bridgeObjectRelease();
  if (v25 & 1) != 0 && (v21)
  {
    specialized ParserGuidedGenerationConstraints.performDeterministicRunLookahead(nextMask:parserIndex:)(v19, v12, a2);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = v6[11];
    uint64_t v23 = v6[12];
    __swift_project_boxed_opaque_existential_1(v6 + 8, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 56))(v22, v23);
    uint64_t result = swift_release();
    *(void *)a2 = v19;
    *(void *)(a2 + 8) = v24;
    *(unsigned char *)(a2 + 16) = 1;
  }
  return result;
}

{
  long long *v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  long long v23;

  uint64_t v23 = *v2;
  uint64_t v22 = *((unsigned char *)v2 + 24);
  uint64_t v5 = *(void **)(*((void *)v2 + 2) + 24);
  uint64_t v6 = v5[11];
  uint64_t v7 = v5[12];
  __swift_project_boxed_opaque_existential_1(v5 + 8, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(v6, v7);
  uint64_t result = specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(a1, v8, (uint64_t (*)(unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  if (v3) {
    return result;
  }
  uint64_t v10 = result;
  char v21 = v5 + 8;
  Swift::UInt v11 = *(pthread_mutex_t **)(*(void *)(v23 + 16) + 16);
  pthread_mutex_lock(v11);
  uint64_t result = swift_beginAccess();
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v12 = *(void *)(v23 + 24);
  if (v10 >= *(void *)(v12 + 16))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  Swift::UInt v13 = *(void *)(v12 + 16 * v10 + 32);
  swift_retain();
  pthread_mutex_unlock(v11);
  uint64_t v14 = v5[14];
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized ExhaustiveLogitMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(v13, v5, v14);
  uint64_t v17 = v16;
  swift_release();
  swift_bridgeObjectRelease();
  if (v22 & 1) != 0 && (v17)
  {
    specialized ParserGuidedGenerationConstraints.performDeterministicRunLookahead(nextMask:parserIndex:)(v15, v10, a2);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = v5[11];
    uint64_t v18 = v5[12];
    __swift_project_boxed_opaque_existential_1(v21, v19);
    char v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 56))(v19, v18);
    uint64_t result = swift_release();
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = v20;
    *(unsigned char *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t specialized ParserGuidedGenerationConstraints.performDeterministicRunLookaheadFallback(nextMask:parserIndex:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v72 = a1;
  uint64_t v7 = type metadata accessor for IndexSet();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v69 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v67 - v11;
  uint64_t v13 = *v3;
  uint64_t v74 = *(void *)(v13 + 16);
  uint64_t v14 = *(void *)(v74 + 16);
  pthread_mutex_lock((pthread_mutex_t *)v14);
  uint64_t v73 = (uint64_t *)(v13 + 24);
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_28;
  }
  uint64_t v15 = *(void *)(v13 + 24);
  if (*(void *)(v15 + 16) <= a2)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v16 = *(void *)(v15 + 16 * a2 + 32);
  swift_retain();
  pthread_mutex_unlock((pthread_mutex_t *)v14);
  uint64_t v70 = v16;
  uint64_t v17 = *(void **)(v16 + 24);
  swift_retain();
  uint64_t v4 = specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)(v72, v17);
  swift_release();
  if (BitSet.count.getter() != 1)
  {
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
    dispatch thunk of SetAlgebra.init()();
    v77[3] = BitSet.Iterator.init(_:)();
    v77[4] = v31;
    v77[5] = v32;
    while (1)
    {
      Swift::Int_optional v78 = BitSet.Iterator.next()();
      if (v78.is_nil) {
        break;
      }
      Swift::Int value = v78.value;
      dispatch thunk of SetAlgebra.insert(_:)();
    }
    swift_bridgeObjectRelease();
    (*(void (**)(void *, char *, uint64_t))(v8 + 32))(a3, v12, v7);
    swift_release();
    type metadata accessor for LogitMaskResponse(0);
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v18 = BitSet.startIndex.getter();
  uint64_t v14 = BitSet.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 == v14) {
    goto LABEL_30;
  }
  uint64_t v67 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_25FA352B0;
  *(void *)(v14 + 32) = v18;
  uint64_t v19 = *(pthread_mutex_t **)(v74 + 16);
  pthread_mutex_lock(v19);
  uint64_t v20 = *v73;
  if (*(void *)(*v73 + 16) <= a2)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRelease();
LABEL_33:
    uint64_t v34 = *(void **)(v4 + 24);
    uint64_t v35 = *(void *)(v70 + 32);
    char v36 = *(unsigned char *)(v70 + 40);
    swift_retain();
    uint64_t v37 = v35;
    uint64_t v38 = v71;
    char v39 = specialized ParserGuidedGenerationConstraints.enforceTokenizationStability(tokenIDs:vocabManager:lastConsumedTokenID:)((void *)v14, v34, v37, v36);
    if (v38)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    else
    {
      char v41 = v39;
      uint64_t v42 = v40;
      swift_bridgeObjectRelease();
      swift_release();
      if (v41)
      {
        swift_release();
        swift_release();
        *id v68 = v42;
        type metadata accessor for LogitMaskResponse(0);
      }
      else
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
        swift_bridgeObjectRetain();
        uint64_t v43 = v69;
        dispatch thunk of SetAlgebra.init()();
        v77[0] = BitSet.Iterator.init(_:)();
        v77[1] = v44;
        v77[2] = v45;
        while (1)
        {
          Swift::Int_optional v79 = BitSet.Iterator.next()();
          if (v79.is_nil) {
            break;
          }
          Swift::Int v76 = v79.value;
          dispatch thunk of SetAlgebra.insert(_:)();
        }
        swift_bridgeObjectRelease();
        (*(void (**)(void *, char *, uint64_t))(v67 + 32))(v68, v43, v7);
        swift_release();
        swift_release();
        type metadata accessor for LogitMaskResponse(0);
      }
      return swift_storeEnumTagMultiPayload();
    }
  }
  id v68 = a3;
  uint64_t v4 = *(void *)(v20 + 16 * a2 + 32);
  swift_retain();
  pthread_mutex_unlock(v19);
  swift_beginAccess();
  char v21 = *(void **)(v4 + 48);
  if (v21)
  {
    EarleyParser.Chart.lastState.getter(v21[5], v21[6], v77);
    if (v77[0])
    {
      uint64_t v22 = *(void *)(v77[0] + 16);
      if (v22)
      {
        uint64_t v23 = *(void *)(v21[4] + 56);
        uint64_t v24 = v23 + 32;
        char v25 = (void *)(v77[0] + 48);
        do
        {
          if (!*v25)
          {
            unint64_t v26 = *(v25 - 2);
            if ((v26 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_27:
              __break(1u);
LABEL_28:
              __break(1u);
              goto LABEL_29;
            }
            if (v26 >= *(void *)(v23 + 16)) {
              goto LABEL_27;
            }
            if (*(void *)(v24 + 16 * v26) == *(void *)(v21[4] + 48))
            {
              uint64_t v27 = *(v25 - 1);
              uint64_t v28 = *(void *)(v24 + 16 * v26 + 8);
              if (v27 >= *(void *)(v28 + 16)) {
                goto LABEL_32;
              }
              uint64_t v29 = v28 + 16 * v27;
              if (*(unsigned char *)(v29 + 40) == 2 && *(void *)(v29 + 32) == 0) {
                goto LABEL_32;
              }
            }
          }
          v25 += 3;
          --v22;
        }
        while (v22);
      }
LABEL_42:
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
  }
  while (1)
  {
LABEL_43:
    a2 = specialized ParserGuidedGenerationConstraints.TokenParserManager.childParserIndex(for:tokenID:)(a2, v18, (uint64_t (*)(unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v46 = *(pthread_mutex_t **)(v74 + 16);
    uint64_t result = pthread_mutex_lock(v46);
    if ((a2 & 0x8000000000000000) != 0) {
      goto LABEL_72;
    }
    if (a2 >= *(void *)(*v73 + 16)) {
      break;
    }
    uint64_t v4 = *(void *)(*v73 + 16 * a2 + 32);
    swift_retain();
    pthread_mutex_unlock(v46);
    swift_release();
    uint64_t v47 = *(void *)(v4 + 24);
    uint64_t v48 = *(void *)(v47 + 112);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(v4, v47, v48, 0, 1, 0);
    uint64_t v50 = v49;
    char v52 = v51;
    swift_release();
    swift_bridgeObjectRelease();
    if (BitSet.count.getter() != 1 && (v52 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_33;
    }
    char v53 = *(void **)(v4 + 24);
    swift_retain();
    swift_release();
    specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)(v50, v53);
    swift_release();
    swift_bridgeObjectRelease();
    if (BitSet.count.getter() != 1) {
      goto LABEL_32;
    }
    uint64_t v18 = BitSet.startIndex.getter();
    uint64_t v54 = BitSet.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v18 == v54) {
      goto LABEL_74;
    }
    unint64_t v56 = *(void *)(v14 + 16);
    unint64_t v55 = *(void *)(v14 + 24);
    if (v56 >= v55 >> 1) {
      uint64_t v14 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, (void *)v14);
    }
    *(void *)(v14 + 16) = v56 + 1;
    *(void *)(v14 + 8 * v56 + 32) = v18;
    swift_beginAccess();
    char v57 = *(void **)(v4 + 48);
    if (v57 && (*(void *)(v57[6] + 16) || *(void *)(v57[5] + 16)))
    {
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v58 = *(void *)(result + 16);
      if (v58)
      {
        uint64_t v59 = *(void *)(v57[4] + 56);
        uint64_t v60 = v59 + 32;
        int v61 = (void *)(result + 48);
        while (1)
        {
          if (!*v61)
          {
            unint64_t v62 = *(v61 - 2);
            if ((v62 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
            if (v62 >= *(void *)(v59 + 16)) {
              goto LABEL_71;
            }
            if (*(void *)(v60 + 16 * v62) == *(void *)(v57[4] + 48))
            {
              uint64_t v63 = *(v61 - 1);
              uint64_t v64 = *(void *)(v60 + 16 * v62 + 8);
              if (v63 >= *(void *)(v64 + 16)) {
                goto LABEL_32;
              }
              uint64_t v65 = v64 + 16 * v63;
              if (*(unsigned char *)(v65 + 40) == 2 && *(void *)(v65 + 32) == 0) {
                goto LABEL_32;
              }
            }
          }
          v61 += 3;
          if (!--v58) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
  return result;
}

uint64_t specialized ParserGuidedGenerationConstraints.performDeterministicRunLookahead(nextMask:parserIndex:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *v3;
  uint64_t v70 = *(void *)(v10 + 16);
  uint64_t v11 = *(pthread_mutex_t **)(v70 + 16);
  pthread_mutex_lock(v11);
  uint64_t v68 = v10 + 24;
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v12 = *(void *)(v10 + 24);
  if (*(void *)(v12 + 16) <= a2)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v6 = *(void *)(v12 + 16 * a2 + 32);
  swift_retain();
  pthread_mutex_unlock(v11);
  uint64_t v13 = *(void **)(v6 + 24);
  swift_retain();
  uint64_t v5 = specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)(a1, v13);
  swift_release();
  if (BitSet.count.getter() != 1)
  {
    uint64_t v27 = *(void **)(v6 + 24);
    uint64_t v28 = v27[11];
    uint64_t v29 = v27[12];
    __swift_project_boxed_opaque_existential_1(v27 + 8, v28);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 56))(v28, v29);
    uint64_t result = swift_release();
    *(void *)a3 = v5;
    *(void *)(a3 + 8) = v30;
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
  uint64_t v14 = BitSet.startIndex.getter();
  uint64_t v15 = BitSet.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14 == v15) {
    goto LABEL_27;
  }
  uint64_t v65 = a1;
  uint64_t v66 = a3;
  uint64_t v67 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  a1 = swift_allocObject();
  *(_OWORD *)(a1 + 16) = xmmword_25FA352B0;
  *(void *)(a1 + 32) = v14;
  uint64_t v16 = *(pthread_mutex_t **)(v70 + 16);
  pthread_mutex_lock(v16);
  if (*(void *)(*(void *)v68 + 16) <= a2)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    uint64_t v32 = *(void **)(v5 + 24);
    uint64_t v33 = *(void *)(v6 + 32);
    char v34 = *(unsigned char *)(v6 + 40);
    swift_retain();
    char v35 = specialized ParserGuidedGenerationConstraints.enforceTokenizationStability(tokenIDs:vocabManager:lastConsumedTokenID:)((void *)a1, v32, v33, v34);
    if (v67)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    else
    {
      char v37 = v35;
      uint64_t v38 = v36;
      swift_bridgeObjectRelease();
      swift_release();
      if (v37)
      {
        swift_release();
        uint64_t result = swift_release();
        *(void *)uint64_t v66 = v38;
        *(void *)(v66 + 8) = 0;
        *(unsigned char *)(v66 + 16) = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        char v39 = *(void **)(v6 + 24);
        uint64_t v40 = v39[11];
        uint64_t v41 = v39[12];
        __swift_project_boxed_opaque_existential_1(v39 + 8, v40);
        uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 56);
        swift_bridgeObjectRetain();
        uint64_t v43 = v42(v40, v41);
        swift_release();
        uint64_t result = swift_release();
        *(void *)uint64_t v66 = v65;
        *(void *)(v66 + 8) = v43;
        *(unsigned char *)(v66 + 16) = 1;
      }
    }
    return result;
  }
  uint64_t v5 = *(void *)(*(void *)v68 + 16 * a2 + 32);
  swift_retain();
  pthread_mutex_unlock(v16);
  swift_beginAccess();
  uint64_t v17 = *(void **)(v5 + 48);
  if (v17)
  {
    EarleyParser.Chart.lastState.getter(v17[5], v17[6], v69);
    if (v69[0])
    {
      uint64_t v18 = *(void *)(v69[0] + 16);
      if (v18)
      {
        uint64_t v19 = *(void *)(v17[4] + 56);
        uint64_t v20 = v19 + 32;
        char v21 = (void *)(v69[0] + 48);
        do
        {
          if (!*v21)
          {
            unint64_t v22 = *(v21 - 2);
            if ((v22 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_24:
              __break(1u);
LABEL_25:
              __break(1u);
              goto LABEL_26;
            }
            if (v22 >= *(void *)(v19 + 16)) {
              goto LABEL_24;
            }
            if (*(void *)(v20 + 16 * v22) == *(void *)(v17[4] + 48))
            {
              uint64_t v23 = *(v21 - 1);
              uint64_t v24 = *(void *)(v20 + 16 * v22 + 8);
              if (v23 >= *(void *)(v24 + 16)) {
                goto LABEL_29;
              }
              uint64_t v25 = v24 + 16 * v23;
              if (*(unsigned char *)(v25 + 40) == 2 && *(void *)(v25 + 32) == 0) {
                goto LABEL_29;
              }
            }
          }
          v21 += 3;
          --v18;
        }
        while (v18);
      }
LABEL_35:
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
  }
  while (1)
  {
LABEL_36:
    a2 = specialized ParserGuidedGenerationConstraints.TokenParserManager.childParserIndex(for:tokenID:)(a2, v14, (uint64_t (*)(unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v44 = *(pthread_mutex_t **)(v70 + 16);
    uint64_t result = pthread_mutex_lock(v44);
    if ((a2 & 0x8000000000000000) != 0) {
      goto LABEL_65;
    }
    if (a2 >= *(void *)(*(void *)v68 + 16)) {
      break;
    }
    uint64_t v5 = *(void *)(*(void *)v68 + 16 * a2 + 32);
    swift_retain();
    pthread_mutex_unlock(v44);
    swift_release();
    uint64_t v45 = *(void *)(v5 + 24);
    uint64_t v46 = *(void *)(v45 + 112);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(v5, v45, v46, 0, 1, 0);
    uint64_t v48 = v47;
    char v50 = v49;
    swift_release();
    swift_bridgeObjectRelease();
    if (BitSet.count.getter() != 1 && (v50 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_30;
    }
    char v51 = *(void **)(v5 + 24);
    swift_retain();
    swift_release();
    specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)(v48, v51);
    swift_release();
    swift_bridgeObjectRelease();
    if (BitSet.count.getter() != 1) {
      goto LABEL_29;
    }
    uint64_t v14 = BitSet.startIndex.getter();
    uint64_t v52 = BitSet.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v14 == v52) {
      goto LABEL_67;
    }
    unint64_t v54 = *(void *)(a1 + 16);
    unint64_t v53 = *(void *)(a1 + 24);
    if (v54 >= v53 >> 1) {
      a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, (void *)a1);
    }
    *(void *)(a1 + 16) = v54 + 1;
    *(void *)(a1 + 8 * v54 + 32) = v14;
    swift_beginAccess();
    unint64_t v55 = *(void **)(v5 + 48);
    if (v55 && (*(void *)(v55[6] + 16) || *(void *)(v55[5] + 16)))
    {
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v56 = *(void *)(result + 16);
      if (v56)
      {
        uint64_t v57 = *(void *)(v55[4] + 56);
        uint64_t v58 = v57 + 32;
        uint64_t v59 = (void *)(result + 48);
        while (1)
        {
          if (!*v59)
          {
            unint64_t v60 = *(v59 - 2);
            if ((v60 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
              goto LABEL_66;
            }
            if (v60 >= *(void *)(v57 + 16)) {
              goto LABEL_64;
            }
            if (*(void *)(v58 + 16 * v60) == *(void *)(v55[4] + 48))
            {
              uint64_t v61 = *(v59 - 1);
              uint64_t v62 = *(void *)(v58 + 16 * v60 + 8);
              if (v61 >= *(void *)(v62 + 16)) {
                goto LABEL_29;
              }
              uint64_t v63 = v62 + 16 * v61;
              if (*(unsigned char *)(v63 + 40) == 2 && *(void *)(v63 + 32) == 0) {
                goto LABEL_29;
              }
            }
          }
          v59 += 3;
          if (!--v56) {
            goto LABEL_35;
          }
        }
      }
      goto LABEL_35;
    }
  }
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  pthread_mutex_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  pthread_mutex_t *v44;
  void *v45;
  uint64_t v46;
  int64_t v47;
  char v48;
  char v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void v68[3];
  uint64_t v69;

  uint64_t v10 = *v3;
  unint64_t v69 = *(void *)(v10 + 16);
  uint64_t v11 = *(pthread_mutex_t **)(v69 + 16);
  pthread_mutex_lock(v11);
  uint64_t v67 = v10 + 24;
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v12 = *(void *)(v10 + 24);
  if (*(void *)(v12 + 16) <= a2)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v6 = *(void *)(v12 + 16 * a2 + 32);
  swift_retain();
  pthread_mutex_unlock(v11);
  uint64_t v13 = *(void **)(v6 + 24);
  swift_retain();
  uint64_t v5 = specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)(a1, v13);
  swift_release();
  if (BitSet.count.getter() != 1)
  {
    uint64_t v27 = *(void **)(v6 + 24);
    uint64_t v28 = v27[11];
    uint64_t v29 = v27[12];
    __swift_project_boxed_opaque_existential_1(v27 + 8, v28);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 56))(v28, v29);
    uint64_t result = swift_release();
    *(void *)a3 = v5;
    *(void *)(a3 + 8) = v30;
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
  uint64_t v14 = BitSet.startIndex.getter();
  uint64_t v15 = BitSet.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14 == v15) {
    goto LABEL_27;
  }
  uint64_t v64 = a1;
  uint64_t v65 = a3;
  uint64_t v66 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  a1 = swift_allocObject();
  *(_OWORD *)(a1 + 16) = xmmword_25FA352B0;
  *(void *)(a1 + 32) = v14;
  uint64_t v16 = *(pthread_mutex_t **)(v69 + 16);
  pthread_mutex_lock(v16);
  if (*(void *)(*(void *)v67 + 16) <= a2)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    uint64_t v32 = *(void **)(v5 + 24);
    uint64_t v33 = *(void *)(v6 + 32);
    char v34 = *(unsigned char *)(v6 + 40);
    swift_retain();
    char v35 = specialized ParserGuidedGenerationConstraints.enforceTokenizationStability(tokenIDs:vocabManager:lastConsumedTokenID:)((void *)a1, v32, v33, v34);
    if (v66)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    else
    {
      char v37 = v35;
      uint64_t v38 = v36;
      swift_bridgeObjectRelease();
      swift_release();
      if (v37)
      {
        swift_release();
        uint64_t result = swift_release();
        *(void *)uint64_t v65 = v38;
        *(void *)(v65 + 8) = 0;
        *(unsigned char *)(v65 + 16) = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        char v39 = *(void **)(v6 + 24);
        uint64_t v40 = v39[11];
        uint64_t v41 = v39[12];
        __swift_project_boxed_opaque_existential_1(v39 + 8, v40);
        uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 56);
        swift_bridgeObjectRetain();
        uint64_t v43 = v42(v40, v41);
        swift_release();
        uint64_t result = swift_release();
        *(void *)uint64_t v65 = v64;
        *(void *)(v65 + 8) = v43;
        *(unsigned char *)(v65 + 16) = 1;
      }
    }
    return result;
  }
  uint64_t v5 = *(void *)(*(void *)v67 + 16 * a2 + 32);
  swift_retain();
  pthread_mutex_unlock(v16);
  swift_beginAccess();
  uint64_t v17 = *(void **)(v5 + 48);
  if (v17)
  {
    EarleyParser.Chart.lastState.getter(v17[5], v17[6], v68);
    if (v68[0])
    {
      uint64_t v18 = *(void *)(v68[0] + 16);
      if (v18)
      {
        uint64_t v19 = *(void *)(v17[4] + 56);
        uint64_t v20 = v19 + 32;
        char v21 = (void *)(v68[0] + 48);
        do
        {
          if (!*v21)
          {
            unint64_t v22 = *(v21 - 2);
            if ((v22 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_24:
              __break(1u);
LABEL_25:
              __break(1u);
              goto LABEL_26;
            }
            if (v22 >= *(void *)(v19 + 16)) {
              goto LABEL_24;
            }
            if (*(void *)(v20 + 16 * v22) == *(void *)(v17[4] + 48))
            {
              uint64_t v23 = *(v21 - 1);
              uint64_t v24 = *(void *)(v20 + 16 * v22 + 8);
              if (v23 >= *(void *)(v24 + 16)) {
                goto LABEL_29;
              }
              uint64_t v25 = v24 + 16 * v23;
              if (*(unsigned char *)(v25 + 40) == 2 && *(void *)(v25 + 32) == 0) {
                goto LABEL_29;
              }
            }
          }
          v21 += 3;
          --v18;
        }
        while (v18);
      }
LABEL_35:
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
  }
  while (1)
  {
LABEL_36:
    a2 = specialized ParserGuidedGenerationConstraints.TokenParserManager.childParserIndex(for:tokenID:)(a2, v14, (uint64_t (*)(unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v44 = *(pthread_mutex_t **)(v69 + 16);
    uint64_t result = pthread_mutex_lock(v44);
    if ((a2 & 0x8000000000000000) != 0) {
      goto LABEL_65;
    }
    if (a2 >= *(void *)(*(void *)v67 + 16)) {
      break;
    }
    uint64_t v5 = *(void *)(*(void *)v67 + 16 * a2 + 32);
    swift_retain();
    pthread_mutex_unlock(v44);
    swift_release();
    uint64_t v45 = *(void **)(v5 + 24);
    uint64_t v46 = v45[14];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v47 = specialized ExhaustiveLogitMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(v5, v45, v46);
    char v49 = v48;
    swift_release();
    swift_bridgeObjectRelease();
    if (BitSet.count.getter() != 1 && (v49 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_30;
    }
    char v50 = *(void **)(v5 + 24);
    swift_retain();
    swift_release();
    specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)(v47, v50);
    swift_release();
    swift_bridgeObjectRelease();
    if (BitSet.count.getter() != 1) {
      goto LABEL_29;
    }
    uint64_t v14 = BitSet.startIndex.getter();
    char v51 = BitSet.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v14 == v51) {
      goto LABEL_67;
    }
    unint64_t v53 = *(void *)(a1 + 16);
    uint64_t v52 = *(void *)(a1 + 24);
    if (v53 >= v52 >> 1) {
      a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, (void *)a1);
    }
    *(void *)(a1 + 16) = v53 + 1;
    *(void *)(a1 + 8 * v53 + 32) = v14;
    swift_beginAccess();
    unint64_t v54 = *(void **)(v5 + 48);
    if (v54 && (*(void *)(v54[6] + 16) || *(void *)(v54[5] + 16)))
    {
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v55 = *(void *)(result + 16);
      if (v55)
      {
        uint64_t v56 = *(void *)(v54[4] + 56);
        uint64_t v57 = v56 + 32;
        uint64_t v58 = (void *)(result + 48);
        while (1)
        {
          if (!*v58)
          {
            uint64_t v59 = *(v58 - 2);
            if ((v59 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
              goto LABEL_66;
            }
            if (v59 >= *(void *)(v56 + 16)) {
              goto LABEL_64;
            }
            if (*(void *)(v57 + 16 * v59) == *(void *)(v54[4] + 48))
            {
              unint64_t v60 = *(v58 - 1);
              uint64_t v61 = *(void *)(v57 + 16 * v59 + 8);
              if (v60 >= *(void *)(v61 + 16)) {
                goto LABEL_29;
              }
              uint64_t v62 = v61 + 16 * v60;
              if (*(unsigned char *)(v62 + 40) == 2 && *(void *)(v62 + 32) == 0) {
                goto LABEL_29;
              }
            }
          }
          v58 += 3;
          if (!--v55) {
            goto LABEL_35;
          }
        }
      }
      goto LABEL_35;
    }
  }
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

void specialized ParserGuidedGenerationConstraints.validate(tokenIDs:)(unint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(v2[2] + 24);
  uint64_t v7 = v6[11];
  uint64_t v8 = v6[12];
  __swift_project_boxed_opaque_existential_1(v6 + 8, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  unint64_t v10 = specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(a1, v9, (uint64_t (*)(unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  uint64_t v11 = *(pthread_mutex_t **)(*(void *)(v5 + 16) + 16);
  pthread_mutex_lock(v11);
  swift_beginAccess();
  if ((v10 & 0x8000000000000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v12 = *(void *)(v5 + 24);
  if (v10 >= *(void *)(v12 + 16))
  {
LABEL_26:
    __break(1u);
    if (v12 == 1)
    {

      __break(1u);
    }

    __break(1u);
  }
  else
  {
    uint64_t v13 = *(void *)(v12 + 16 * v10 + 32);
    swift_retain();
    pthread_mutex_unlock(v11);
    swift_beginAccess();
    uint64_t v14 = *(void **)(v13 + 48);
    if (v14 && (EarleyParser.Chart.lastState.getter(v14[5], v14[6], v24), (uint64_t v11 = (pthread_mutex_t *)v24[0]) != 0))
    {
      uint64_t v12 = *(void *)(v24[0] + 16);
      if (v12)
      {
        uint64_t v15 = *(void *)(v14[4] + 56);
        uint64_t v16 = v15 + 32;
        uint64_t v17 = (void *)(v24[0] + 48);
        do
        {
          if (!*v17)
          {
            unint64_t v18 = *(v17 - 2);
            if ((v18 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_24:
              __break(1u);
LABEL_25:
              __break(1u);
              goto LABEL_26;
            }
            if (v18 >= *(void *)(v15 + 16)) {
              goto LABEL_24;
            }
            if (*(void *)(v16 + 16 * v18) == *(void *)(v14[4] + 48))
            {
              uint64_t v19 = *(v17 - 1);
              uint64_t v20 = *(void *)(v16 + 16 * v18 + 8);
              if (v19 >= *(void *)(v20 + 16)
                || ((uint64_t v21 = v20 + 16 * v19, *(unsigned char *)(v21 + 40) == 2) ? (v22 = *(void *)(v21 + 32) == 0) : (v22 = 0),
                    v22))
              {
                swift_release();
                swift_bridgeObjectRelease();
                char v23 = 0;
                goto LABEL_22;
              }
            }
          }
          v17 += 3;
          --v12;
        }
        while (v12);
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    char v23 = 1;
LABEL_22:
    *a2 = v23;
  }
}

uint64_t specialized TokenGrammarParser.optimize()()
{
  uint64_t v1 = *(void *)(v0 + 56);
  pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 16));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    int v4 = *(_DWORD *)(v2 + 24);
    char v5 = *(unsigned char *)(v2 + 28);
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *(void *)(v2 + 48);
    uint64_t v10 = *(void *)(v2 + 40);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v7);
    type metadata accessor for EarleyParser();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v3;
    *(_DWORD *)(v8 + 24) = v4;
    *(unsigned char *)(v8 + 28) = v5;
    *(void *)(v8 + 32) = v6;
    *(void *)(v8 + 40) = v10;
    *(void *)(v8 + 48) = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(void *)(v0 + 48) = v8;
  swift_release();
  return pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 16));
}

void *specialized TokenGrammarParser.accepts(tokenIDs:spaceLookAhead:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (void *)((char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(v1 + 56);
  pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 16));
  VocabularyManager.prefixLookUp.getter(v6);
  unint64_t v8 = v6[6];
  swift_bridgeObjectRetain();
  _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v6, type metadata accessor for VocabularyManager.PrefixLookup);
  swift_beginAccess();
  uint64_t result = *(void **)(v2 + 48);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x263F8EE78];
    goto LABEL_5;
  }
  uint64_t v16 = *(void *)(v2 + 48);
  uint64_t v10 = result[6];
  if (!*(void *)(v10 + 16))
  {
    uint64_t v11 = result[5];
    v15[0] = result[4];
    v15[1] = v11;
    v15[2] = v10;
    v15[3] = MEMORY[0x263F8EE78];
    v15[4] = MEMORY[0x263F8EE78];
    MEMORY[0x270FA5388](result);
    *(&v14 - 4) = (uint64_t)&v16;
    *(&v14 - 3) = (uint64_t)v15;
    *(&v14 - 2) = v8;
    *(&v14 - 1) = v12;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v13 = specialized _ArrayProtocol.filter(_:)((uint64_t)partial apply for specialized closure #1 in TokenGrammarParser.accepts(tokenIDs:spaceLookAhead:), (uint64_t)(&v14 - 6), a1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_5:
    pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 16));
    return (void *)v13;
  }
  __break(1u);
  return result;
}

Swift::Int specialized TokenGrammarParser.nextValidTerminalsWithCacheKey()()
{
  uint64_t v1 = *(void *)(v0 + 56);
  pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 16));
  swift_beginAccess();
  if (*(void *)(v0 + 48))
  {
    swift_retain();
    Swift::tuple_cacheKey_Int_optional_nextValidTerminals_OpaquePointer v5 = EarleyParser.nextValidTerminalsWithCacheKey()();
    Swift::Int value = v5.cacheKey.value;
    rawValue = v5.nextValidTerminals._rawValue;
    swift_release();
  }
  else
  {
    Swift::Int value = 0;
    rawValue = 0;
  }
  if (!rawValue) {
    Swift::Int value = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 16));
  return value;
}

BOOL static GuidedGenerationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GuidedGenerationError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int GuidedGenerationError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t TokenIDMask.init(vocabularySize:)@<X0>(uint64_t result@<X0>, int64_t *a2@<X8>)
{
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = (int64_t *)result;
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = (int64_t *)swift_allocObject();
    int64_t v5 = _swift_stdlib_malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = (int64_t)v2;
    v4[3] = 2 * (v6 >> 3);
    if (specialized Sequence._copyContents(initializing:)(v12, v4 + 4, (uint64_t)v2, 0, (int64_t)v2) == v2) {
      goto LABEL_8;
    }
    __break(1u);
  }
  uint64_t v4 = (int64_t *)MEMORY[0x263F8EE78];
LABEL_8:
  uint64_t v7 = BitSet.init()();
  v12[0] = v7;
  int64_t v8 = v4[2];
  if (v8)
  {
    swift_retain();
    for (uint64_t i = 0; i != v8; ++i)
    {
      Swift::Int v10 = v4[i + 4];
      BitSet.insert(_:)(v10);
    }
    uint64_t result = swift_release_n();
    int64_t v11 = v12[0];
  }
  else
  {
    int64_t v11 = v7;
    uint64_t result = swift_release();
  }
  *a2 = v11;
  a2[1] = (int64_t)v2;
  return result;
}

uint64_t TokenIDMask.BOOLeanMask(ofSize:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3 <= a1)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = BitArray.init(_:)();
    uint64_t v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v8, v9);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v10 + 16);
    if (v3 < v12)
    {
      __break(1u);
    }
    else
    {
      size_t v13 = a1 - v12;
      if (!__OFSUB__(a1, v12))
      {
        if ((v13 & 0x8000000000000000) == 0)
        {
          if (v13)
          {
            uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
            *(void *)(v14 + 16) = v13;
            bzero((void *)(v14 + 32), v13);
          }
          else
          {
            uint64_t v14 = MEMORY[0x263F8EE78];
          }
          specialized ContiguousArray.append<A>(contentsOf:)(v14);
          swift_release();
          return v10;
        }
LABEL_17:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  if (one-time initialization token for guided != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.guided);
  swift_bridgeObjectRetain();
  int64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25F950000, v5, v6, "Mask size passed to BOOLeanMask (%ld) is smaller than the vocabulary size (%ld)", (uint8_t *)v7, 0x16u);
    MEMORY[0x2612040B0](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type GuidedGenerationError and conformance GuidedGenerationError();
  swift_allocError();
  unsigned char *v15 = 2;
  return swift_willThrow();
}

uint64_t TokenIDMask.allowedTokenIDs()()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = specialized _copyCollectionToContiguousArray<A>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TokenIDMask.bitSet()()
{
  return swift_bridgeObjectRetain();
}

uint64_t static TokenIDMask.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return MEMORY[0x261202260](*a1, *a2) & (v2 == v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TokenIDMask(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return MEMORY[0x261202260](*a1, *a2) & (v2 == v3);
}

uint64_t GuidedGenerationVocabularyManager.init(tokenizer:stopTokenIDs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (void *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of GuidedGenerationTokenizer(a1, (uint64_t)v20);
  if (one-time initialization token for characterSetLookup != -1) {
    swift_once();
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  size_t v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v9);
  swift_bridgeObjectRelease();
  v19[3] = &type metadata for SentencePieceVocabularyTextConverter;
  v19[4] = &protocol witness table for SentencePieceVocabularyTextConverter;
  int64_t v11 = (void *)swift_allocObject();
  v19[0] = v11;
  void v11[2] = 8492770;
  void v11[3] = 0xA300000000000000;
  _DWORD v11[4] = 8492770;
  v11[5] = 0xA300000000000000;
  type metadata accessor for VocabularyManager(0);
  uint64_t v12 = (void *)swift_allocObject();
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, (uint64_t)&type metadata for SentencePieceVocabularyTextConverter);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (void *)((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = specialized VocabularyManager.init(tokenizer:characterSetsUsedInGrammar:vocabConverter:stopTokenIDs:)(v20, v10, *v15, v15[1], v15[2], v15[3], a2, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  swift_retain();
  VocabularyManager.prefixLookUp.getter(v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1);
  uint64_t result = _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v8, type metadata accessor for VocabularyManager.PrefixLookup);
  *a3 = v17;
  return result;
}

uint64_t GuidedGenerationVocabularyManager.init(tokenizer:stopTokenIDs:characterSetsUsedInGrammar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  outlined init with copy of GuidedGenerationTokenizer(a1, (uint64_t)v17);
  v16[3] = &type metadata for SentencePieceVocabularyTextConverter;
  v16[4] = &protocol witness table for SentencePieceVocabularyTextConverter;
  uint64_t v8 = (void *)swift_allocObject();
  v16[0] = v8;
  v8[2] = 8492770;
  v8[3] = 0xA300000000000000;
  v8[4] = 8492770;
  v8[5] = 0xA300000000000000;
  type metadata accessor for VocabularyManager(0);
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, (uint64_t)&type metadata for SentencePieceVocabularyTextConverter);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (void *)((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = specialized VocabularyManager.init(tokenizer:characterSetsUsedInGrammar:vocabConverter:stopTokenIDs:)(v17, a3, *v12, v12[1], v12[2], v12[3], a2, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  *a4 = v14;
  return result;
}

Swift::Void __swiftcall GuidedGenerationVocabularyManager.initVocabManager()()
{
  uint64_t v0 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (unint64_t *)((char *)&v3 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  VocabularyManager.prefixLookUp.getter(v2);
  _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v2, type metadata accessor for VocabularyManager.PrefixLookup);
}

uint64_t GuidedGenerationConstraints.generateNextLogitMask(from:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = a2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 80) = v4;
  *(void *)(v3 + 88) = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  type metadata accessor for Signpost();
  *(void *)(v3 + 104) = swift_task_alloc();
  long long v5 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 41) = *(_OWORD *)(v2 + 33);
  return MEMORY[0x270FA2498](GuidedGenerationConstraints.generateNextLogitMask(from:), 0, 0);
}

uint64_t GuidedGenerationConstraints.generateNextLogitMask(from:)()
{
  if (one-time initialization token for guided != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = (void *)v0[8];
  unint64_t v5 = v0[9];
  uint64_t v7 = __swift_project_value_buffer(v3, (uint64_t)static Log.guided);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  Signpost.init(_:_:)(v1, "GuidedGenerationConstraints.generateNextLogitMask", 49, 2, v2);
  swift_retain();
  swift_retain();
  swift_retain();
  specialized ParserGuidedGenerationConstraints.generateNextLogitMask(from:)(v5, v6);
  swift_release();
  swift_release();
  swift_release();
  Signpost.end()();
  _s19TokenGenerationCore7GrammarVWOhTm_0(v2, (uint64_t (*)(void))type metadata accessor for Signpost);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GuidedGenerationConstraints.possiblyDeterministicTokens(follow:)(Swift::OpaquePointer follow)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Signpost();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t v11 = *(void *)(v1 + 24);
  char v12 = *(unsigned char *)(v1 + 32);
  if (one-time initialization token for guided != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v3, (uint64_t)static Log.guided);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v13, v3);
  Signpost.init(_:_:)((uint64_t)v6, "GuidedGenerationConstraints.nextMaskPossiblyDeterministic", 57, 2, (uint64_t)v9);
  swift_retain();
  swift_retain();
  swift_retain();
  char v14 = specialized ParserGuidedGenerationConstraints.possiblyDeterministicTokens(follow:)((unint64_t)follow._rawValue, v10, v11, v12);
  swift_release();
  swift_release();
  swift_release();
  Signpost.end()();
  _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Signpost);
  return v14 & 1;
}

uint64_t GuidedGenerationConstraints.nextMask(following:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = a2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 80) = v4;
  *(void *)(v3 + 88) = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  type metadata accessor for Signpost();
  *(void *)(v3 + 104) = swift_task_alloc();
  long long v5 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 41) = *(_OWORD *)(v2 + 33);
  return MEMORY[0x270FA2498](GuidedGenerationConstraints.nextMask(following:), 0, 0);
}

uint64_t GuidedGenerationConstraints.nextMask(following:)()
{
  if (one-time initialization token for guided != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = (void *)v0[8];
  unint64_t v5 = v0[9];
  uint64_t v7 = __swift_project_value_buffer(v3, (uint64_t)static Log.guided);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  Signpost.init(_:_:)(v1, "GuidedGenerationConstraints.nextMask", 36, 2, v2);
  swift_retain();
  swift_retain();
  swift_retain();
  specialized ParserGuidedGenerationConstraints.nextMask(follow:)(v5, v6);
  swift_release();
  swift_release();
  swift_release();
  Signpost.end()();
  _s19TokenGenerationCore7GrammarVWOhTm_0(v2, (uint64_t (*)(void))type metadata accessor for Signpost);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t GuidedGenerationConstraints.generateNextTokenIDMask(from:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = a2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 80) = v4;
  *(void *)(v3 + 88) = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  type metadata accessor for Signpost();
  *(void *)(v3 + 104) = swift_task_alloc();
  long long v5 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 41) = *(_OWORD *)(v2 + 33);
  return MEMORY[0x270FA2498](GuidedGenerationConstraints.generateNextTokenIDMask(from:), 0, 0);
}

uint64_t GuidedGenerationConstraints.generateNextTokenIDMask(from:)()
{
  if (one-time initialization token for guided != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[8];
  unint64_t v5 = v0[9];
  uint64_t v7 = __swift_project_value_buffer(v3, (uint64_t)static Log.guided);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  Signpost.init(_:_:)(v1, "GuidedGenerationConstraints.generateNextTokenIDMask", 51, 2, v2);
  swift_retain();
  swift_retain();
  swift_retain();
  specialized ParserGuidedGenerationConstraints.generateNextTokenIDMask(from:)(v5, v6);
  swift_release();
  swift_release();
  swift_release();
  Signpost.end()();
  _s19TokenGenerationCore7GrammarVWOhTm_0(v2, (uint64_t (*)(void))type metadata accessor for Signpost);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t GuidedGenerationConstraints.nextTokenIDMaskComputation(following:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = a2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 80) = v4;
  *(void *)(v3 + 88) = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  type metadata accessor for Signpost();
  *(void *)(v3 + 104) = swift_task_alloc();
  long long v5 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 41) = *(_OWORD *)(v2 + 33);
  return MEMORY[0x270FA2498](GuidedGenerationConstraints.nextTokenIDMaskComputation(following:), 0, 0);
}

uint64_t GuidedGenerationConstraints.nextTokenIDMaskComputation(following:)()
{
  if (one-time initialization token for guided != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[8];
  unint64_t v5 = v0[9];
  uint64_t v7 = __swift_project_value_buffer(v3, (uint64_t)static Log.guided);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  Signpost.init(_:_:)(v1, "GuidedGenerationConstraints.nextTokenIDMaskComputation", 54, 2, v2);
  swift_retain();
  swift_retain();
  swift_retain();
  specialized ParserGuidedGenerationConstraints.nextTokenIDMaskComputation(follow:)(v5, v6);
  swift_release();
  swift_release();
  swift_release();
  Signpost.end()();
  _s19TokenGenerationCore7GrammarVWOhTm_0(v2, (uint64_t (*)(void))type metadata accessor for Signpost);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t GuidedGenerationConstraints.validateTokens(from:candidateTokenIDs:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = *(void *)(v4 - 8);
  *(void *)(v3 + 48) = swift_task_alloc();
  type metadata accessor for Signpost();
  *(void *)(v3 + 56) = swift_task_alloc();
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(v2 + 8);
  *(void *)(v3 + 80) = *(void *)(v2 + 24);
  return MEMORY[0x270FA2498](GuidedGenerationConstraints.validateTokens(from:candidateTokenIDs:), 0, 0);
}

uint64_t GuidedGenerationConstraints.validateTokens(from:candidateTokenIDs:)()
{
  if (one-time initialization token for guided != -1) {
    swift_once();
  }
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  unint64_t v3 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v7 = v0[3];
  uint64_t v6 = v0[4];
  unint64_t v8 = v0[2];
  uint64_t v9 = __swift_project_value_buffer(v6, (uint64_t)static Log.guided);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v9, v6);
  Signpost.init(_:_:)(v4, "GuidedGenerationConstraints.validateTokens", 42, 2, v2);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v10 = specialized ParserGuidedGenerationConstraints.validateTokens(from:candidateTokenIDs:)(v8, v7, v3, v1);
  char v12 = v11;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v13 = v0[7];
  Signpost.end()();
  _s19TokenGenerationCore7GrammarVWOhTm_0(v13, (uint64_t (*)(void))type metadata accessor for Signpost);
  swift_task_dealloc();
  swift_task_dealloc();
  char v14 = (uint64_t (*)(uint64_t, void))v0[1];
  return v14(v10, v12 & 1);
}

uint64_t GuidedGenerationConstraints.generateNextTokenIDMaskExhaustively(from:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a1;
  v3[9] = a2;
  v3[10] = *v2;
  return MEMORY[0x270FA2498](GuidedGenerationConstraints.generateNextTokenIDMaskExhaustively(from:), 0, 0);
}

uint64_t GuidedGenerationConstraints.generateNextTokenIDMaskExhaustively(from:)()
{
  uint64_t result = v0[10];
  if (result)
  {
    uint64_t v3 = v0[8];
    unint64_t v2 = v0[9];
    uint64_t v4 = swift_retain();
    specialized ParserGuidedGenerationConstraints.init(tokenParser:maskGenerator:enableDeterministicTokenRuns:numParallelTasks:)(v4, 0, 0, 1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParserGuidedGenerationConstraints<EarleyParser, ExhaustiveLogitMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache>, &demangling cache variable for type metadata for ParserGuidedGenerationConstraints<EarleyParser, ExhaustiveLogitMaskGenerator<EarleyParser>>.TokenParserManager, (uint64_t)(v0 + 2));
    swift_retain();
    swift_retain();
    swift_retain();
    specialized ParserGuidedGenerationConstraints.generateNextTokenIDMask(from:)(v2, v3);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

TokenGenerationCore::ValidationResult __swiftcall GuidedGenerationConstraints.validate(tokenIDs:)(Swift::OpaquePointer tokenIDs)
{
  uint64_t v3 = v1;
  swift_retain();
  swift_retain();
  swift_retain();
  specialized ParserGuidedGenerationConstraints.validate(tokenIDs:)((unint64_t)tokenIDs._rawValue, v3);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t GuidedGenerationConstraints.vocabularyCount.getter()
{
  if (!*(void *)v0) {
    return 0;
  }
  uint64_t v1 = *(void **)(*(void *)v0 + 24);
  uint64_t v2 = v1[11];
  uint64_t v3 = v1[12];
  __swift_project_boxed_opaque_existential_1(v1 + 8, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
}

uint64_t sub_25F9A9A44()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25F9A9A7C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t specialized TokenGrammarParser.parse(consuming:)(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 48);
  if (v5)
  {
    if ((a2 & 0x2000000000000000) != 0) {
      uint64_t v6 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i < v6; i += v10)
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          uint64_t v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          uint64_t v8 = _decodeScalar(_:startingAt:)();
        }
        uint64_t v10 = v9;
        uint64_t v5 = EarleyParser.childParser(consumingElement:)(v8);
        swift_release();
        if (!v5) {
          break;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
    }
  }
  return v5;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<NonTerminalSymbol>);
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  uint64_t v3 = (void *)swift_allocObject();
  uint64_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : CharacterSet].Iterator._Variant();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  uint64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : CharacterSet].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_21;
  }
  if (!v5) {
    return MEMORY[0x263F8EE78];
  }
  if (v5 <= 0)
  {
    char v11 = (void *)MEMORY[0x263F8EE78];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(type metadata accessor for GenerationSchema.Field() - 8);
      uint64_t v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v16 = *(void *)(v14 + 72);
      unint64_t v17 = a2 + v16 * a3;
      uint64_t v18 = v16 * v5;
      uint64_t v19 = &v15[v18];
      unint64_t v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20) {
        goto LABEL_24;
      }
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GenerationSchema.Field>);
  uint64_t v8 = *(void *)(type metadata accessor for GenerationSchema.Field() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  char v11 = (void *)swift_allocObject();
  size_t v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1) {
      goto LABEL_23;
    }
    void v11[2] = v5;
    void v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 8 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (char *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        size_t v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v9 = (char *)swift_allocObject();
      unint64_t v10 = _swift_stdlib_malloc_size(v9);
      char v11 = v10 - 32;
      if (v10 < 32) {
        char v11 = v10 - 25;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

int64_t *specialized _copyCollectionToContiguousArray<A>(_:)(int64_t *result, int64_t a2)
{
  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (int64_t *)MEMORY[0x263F8EE78];
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = (int64_t *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v5 = (int64_t *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      uint64_t v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    uint64_t result = specialized Sequence._copyContents(initializing:)(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  int64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v2;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v9, v4 + 4, v2, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : CharacterSet].Iterator._Variant();
  if (v7 != v2)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v4;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CharacterSet>);
  uint64_t v3 = *(void *)(type metadata accessor for CharacterSet() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      uint64_t v9 = specialized Sequence._copySequenceContents(initializing:)(&v10, (char *)v6 + v5, v1, a1);
      outlined consume of [String : CharacterSet].Iterator._Variant();
      if (v9 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      char v11 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          long long v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          unint64_t v90 = &v86[16 * v85 + 32];
          *(void *)unint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          char v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  unint64_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  char v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      BOOL v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        uint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          uint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *uint64_t v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      id v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      char v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        char v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        unint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x261202940);
      }
    }
    else
    {
      char v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x261202940](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x261202940]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x270F9D808](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x270F9D808](a1, a2, a3, a4);
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    Swift::Int result = v12;
    if (v17 == v15) {
      Swift::Int result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      Swift::Int result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        Swift::Int result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          Swift::Int result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    Swift::Int result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

int64_t *specialized Sequence._copyContents(initializing:)(int64_t *result, int64_t *a2, uint64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    int64_t v5 = a4;
LABEL_7:
    void *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  int64_t v6 = a5 - a4;
  if (a5 > a4)
  {
    int64_t v5 = a4 + 1;
    *a2 = a4;
    if (a3 == 1) {
      goto LABEL_7;
    }
    if (v5 == a5)
    {
      a3 = 1;
      int64_t v5 = a5;
      goto LABEL_7;
    }
    unint64_t v7 = v6 - 2;
    if (v6 - 2 >= (unint64_t)(a3 - 2)) {
      unint64_t v7 = a3 - 2;
    }
    if (v7 >= ~a4 + a5) {
      unint64_t v7 = ~a4 + a5;
    }
    unint64_t v8 = v7 + 1;
    if (v8 >= 5)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      int64_t v13 = v5 + v8 - v11;
      unint64_t v10 = &a2[v8 - v11];
      uint64_t v9 = v12 + 2;
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_25FA33410);
      uint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        int64x2_t *v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      int64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 2;
      unint64_t v10 = a2;
    }
    unint64_t v17 = v10 + 1;
    while (v5 < a5)
    {
      int64_t v18 = v5 + 1;
      int64_t *v17 = v5;
      if (a3 == v9)
      {
        ++v5;
        goto LABEL_7;
      }
      ++v9;
      ++v17;
      ++v5;
      if (a5 == v18)
      {
        int64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    void *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  unint64_t v10 = a2;
  uint64_t v22 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v23 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    char v19 = (void *)(*(void *)(a4 + 48) + 24 * v15);
    uint64_t v20 = v19[1];
    uint64_t v21 = v19[2];
    *unint64_t v10 = *v19;
    v10[1] = v20;
    id v10[2] = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 3;
    swift_bridgeObjectRetain();
    Swift::Int result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0;
        int64_t v11 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v16 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v22;
      Swift::Int result = v23;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *int64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    Swift::Int result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CharacterSet();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = MEMORY[0x270FA5388](v11);
  uint64_t v40 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 64;
  uint64_t v14 = *(void *)(a4 + 64);
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  if (-v32 < 64) {
    uint64_t v16 = ~(-1 << -(char)v32);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v28 = ~v32;
    *a1 = v42;
    a1[1] = v15;
    a1[2] = v28;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v36 = a3;
  int64_t v18 = 0;
  a3 = 0;
  int64_t v19 = v40;
  uint64_t v38 = v41 + 16;
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v37 = v41 + 48;
  char v35 = (uint64_t (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v33 = v15;
  int64_t v34 = (unint64_t)(63 - v32) >> 6;
  int64_t v30 = v34 - 1;
  unint64_t v31 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    uint64_t v25 = v41;
    uint64_t v26 = *(void *)(v41 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v10, *(void *)(v42 + 56) + v26 * v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v33;
      goto LABEL_38;
    }
    ++a3;
    unint64_t v27 = *v35;
    (*v35)(v19, v10, v11);
    uint64_t result = v27(a2, v19, v11);
    if (a3 == v36)
    {
      a3 = v36;
      a1 = v31;
      uint64_t v15 = v33;
      goto LABEL_39;
    }
    a2 += v26;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v33;
    if (v22 >= v34) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (!v23)
    {
      int64_t v24 = v18 + 2;
      ++v18;
      if (v22 + 1 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v24);
      if (v23) {
        goto LABEL_14;
      }
      int64_t v18 = v22 + 1;
      if (v22 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * (v22 + 2));
      if (v23)
      {
        v22 += 2;
      }
      else
      {
        int64_t v18 = v22 + 2;
        if (v22 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v33 + 8 * (v22 + 3));
        if (!v23)
        {
          int64_t v24 = v22 + 4;
          int64_t v18 = v22 + 3;
          if (v22 + 4 < v34)
          {
            unint64_t v23 = *(void *)(v33 + 8 * v24);
            if (!v23)
            {
              while (1)
              {
                int64_t v22 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v34)
                {
                  int64_t v18 = v30;
                  goto LABEL_37;
                }
                unint64_t v23 = *(void *)(v33 + 8 * v22);
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v22 = v24;
            goto LABEL_21;
          }
LABEL_37:
          (*v39)(v10, 1, 1, v11);
          unint64_t v17 = 0;
LABEL_38:
          outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for CharacterSet?);
          a1 = v31;
          goto LABEL_39;
        }
        v22 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void *specialized VocabularyManager.init(tokenizer:characterSetsUsedInGrammar:vocabConverter:stopTokenIDs:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v28 = &type metadata for SentencePieceVocabularyTextConverter;
  uint64_t v29 = &protocol witness table for SentencePieceVocabularyTextConverter;
  uint64_t v15 = (void *)swift_allocObject();
  v27[0] = v15;
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  void v15[5] = a6;
  uint64_t v16 = (char *)a8 + OBJC_IVAR____TtC19TokenGenerationCore17VocabularyManager____lazy_storage___prefixLookUp;
  uint64_t v17 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  outlined init with copy of GuidedGenerationTokenizer((uint64_t)a1, (uint64_t)(a8 + 8));
  outlined init with copy of GuidedGenerationTokenizer((uint64_t)v27, (uint64_t)(a8 + 2));
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  unint64_t v20 = __swift_project_boxed_opaque_existential_1(v27, (uint64_t)v28);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8);
  swift_bridgeObjectRetain();
  uint64_t v24 = v23(v21, v22, v18, v19);
  swift_bridgeObjectRelease();
  a8[7] = a2;
  a8[13] = v24;
  a8[14] = a7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return a8;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)()
{
  uint64_t v0 = BitSet.count.getter();
  if (!v0) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v1 = v0;
  if (v0 < 1)
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v2 = (void *)swift_allocObject();
    int64_t v3 = _swift_stdlib_malloc_size(v2);
    uint64_t v4 = v3 - 32;
    if (v3 < 32) {
      uint64_t v4 = v3 - 25;
    }
    v2[2] = v1;
    v2[3] = 2 * (v4 >> 3);
  }
  uint64_t result = BitSet.Iterator.init(_:)();
  if (v1 >= 1)
  {
    Swift::Int_optional v7 = BitSet.Iterator.next()();
    if (v7.is_nil)
    {
LABEL_13:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __break(1u);
    }
    else
    {
      uint64_t v6 = 0;
      while (1)
      {
        v2[v6 + 4] = v7.value;
        if (v1 - 1 == v6) {
          break;
        }
        Swift::Int_optional v7 = BitSet.Iterator.next()();
        ++v6;
        if (v7.is_nil) {
          goto LABEL_13;
        }
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copyContents(initializing:)(void *result, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  if (!a3) {
    goto LABEL_7;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else if ((a5 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = a5;
    if (!a5)
    {
LABEL_9:
      void *result = a4;
      result[1] = a5;
      result[2] = v5;
      return (void *)v5;
    }
    *a2 = *(unsigned char *)(a4 + 32) & 1;
    if (a3 != 1)
    {
      uint64_t v5 = a5;
      if (a5 == 1) {
        goto LABEL_9;
      }
      uint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = v6 + 1;
        a2[v6 + 1] = (*(void *)(a4 + 32 + (((unint64_t)(v6 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 + 1)) & 1;
        if (a3 - 2 == v6) {
          break;
        }
        ++v6;
        if (a5 - 1 == v7)
        {
          uint64_t v5 = a5;
          goto LABEL_9;
        }
      }
    }
LABEL_7:
    uint64_t v5 = a3;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      uint64_t v3 = result;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v4 = swift_allocObject();
      size_t v5 = _swift_stdlib_malloc_size((const void *)v4);
      *(void *)(v4 + 16) = a2;
      *(void *)(v4 + 24) = 2 * v5 - 64;
      uint64_t v6 = specialized Sequence._copyContents(initializing:)(v7, (unsigned char *)(v4 + 32), a2, v3, a2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v6 == (void *)a2) {
        return v4;
      }
      __break(1u);
    }
    return MEMORY[0x263F8EE78];
  }
  __break(1u);
  return result;
}

unint64_t *specialized closure #1 in TokenGrammarParser.accepts(tokenIDs:spaceLookAhead:)(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5)
{
  unint64_t v5 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v5 < *(void *)(a4 + 16))
  {
    uint64_t v7 = a4 + 16 * v5;
    uint64_t v8 = *(void *)(v7 + 32);
    unint64_t v9 = *(void **)(v7 + 40);
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = v8;
    v10._unint64_t object = v9;
    Swift::Bool v11 = EarleyParser.ParserValidatorCache.parse(string:skipFirst:)(v10, a5);
    swift_bridgeObjectRelease();
    return (unint64_t *)v11;
  }
  __break(1u);
  return result;
}

BOOL specialized static TokenIDMaskResponse.== infix(_:_:)(uint64_t *a1, void **a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v4 = *((unsigned __int8 *)a1 + 16);
  uint64_t v6 = (uint64_t)*a2;
  unint64_t v5 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  if (v4)
  {
    if (v7)
    {
      outlined copy of TokenIDMaskResponse(*a2, a2[1], 1);
      outlined copy of TokenIDMaskResponse(v3, v2, 1);
      outlined copy of TokenIDMaskResponse(v6, v5, 1);
      outlined copy of TokenIDMaskResponse(v3, v2, 1);
      char v8 = MEMORY[0x261202260](v3, v6);
      outlined consume of TokenIDMaskResponse(v3, v2, 1);
      outlined consume of TokenIDMaskResponse(v6, v5, 1);
      outlined consume of TokenIDMaskResponse(v6, v5, 1);
      outlined consume of TokenIDMaskResponse(v3, v2, 1);
      return v8 & (v2 == v5);
    }
    goto LABEL_5;
  }
  if (v7)
  {
LABEL_5:
    outlined copy of TokenIDMaskResponse(*a2, a2[1], v7);
    outlined copy of TokenIDMaskResponse(v3, v2, v4);
    outlined consume of TokenIDMaskResponse(v3, v2, v4);
    outlined consume of TokenIDMaskResponse(v6, v5, v7);
    return 0;
  }
  BOOL v10 = specialized static Array<A>.== infix(_:_:)((void *)*a1, *a2);
  outlined copy of TokenIDMaskResponse(v6, v5, 0);
  outlined copy of TokenIDMaskResponse(v3, v2, 0);
  outlined consume of TokenIDMaskResponse(v3, v2, 0);
  outlined consume of TokenIDMaskResponse(v6, v5, 0);
  return v10;
}

uint64_t specialized static LogitMaskResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = type metadata accessor for IndexSet();
  uint64_t v4 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LogitMaskResponse(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  BOOL v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  int64_t v12 = (uint64_t *)((char *)&v23 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LogitMaskResponse, LogitMaskResponse));
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v16[*(int *)(v14 + 56)];
  _s19TokenGenerationCore7GrammarVWOcTm_1(a1, (uint64_t)v16, type metadata accessor for LogitMaskResponse);
  _s19TokenGenerationCore7GrammarVWOcTm_1(a2, (uint64_t)v17, type metadata accessor for LogitMaskResponse);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s19TokenGenerationCore7GrammarVWOcTm_1((uint64_t)v16, (uint64_t)v10, type metadata accessor for LogitMaskResponse);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = v24;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v17, v24);
      char v19 = MEMORY[0x261202160](v10, v6);
      unint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
      v20(v6, v18);
      v20(v10, v18);
LABEL_9:
      _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v16, type metadata accessor for LogitMaskResponse);
      return v19 & 1;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v24);
  }
  else
  {
    _s19TokenGenerationCore7GrammarVWOcTm_1((uint64_t)v16, (uint64_t)v12, type metadata accessor for LogitMaskResponse);
    uint64_t v21 = (void *)*v12;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      char v19 = specialized static Array<A>.== infix(_:_:)(v21, *(void **)v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
  }
  outlined destroy of SingleValueDecodingContainer?((uint64_t)v16, &demangling cache variable for type metadata for (LogitMaskResponse, LogitMaskResponse));
  char v19 = 0;
  return v19 & 1;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  uint64_t result = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (void *)((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = a1 + 32;
    v23[0] = v8 - 1;
    uint64_t v11 = MEMORY[0x263F8EE78];
    v23[1] = v2;
    while (1)
    {
      uint64_t v24 = v11;
      if (v9 <= v8) {
        unint64_t v12 = v8;
      }
      else {
        unint64_t v12 = v9;
      }
      unint64_t v13 = v9;
      while (1)
      {
        if (v12 == v13)
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        unint64_t v14 = *(void *)(v10 + 8 * v13);
        VocabularyManager.prefixLookUp.getter(v7);
        unint64_t v15 = v7[6];
        swift_bridgeObjectRetain();
        uint64_t result = _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v7, type metadata accessor for VocabularyManager.PrefixLookup);
        if ((v14 & 0x8000000000000000) != 0) {
          goto LABEL_27;
        }
        if (v14 >= *(void *)(v15 + 16)) {
          goto LABEL_28;
        }
        unint64_t v16 = v15 + 16 * v14;
        uint64_t v18 = *(void *)(v16 + 32);
        uint64_t v17 = *(void *)(v16 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v18 || v17 != 0xE000000000000000) {
          break;
        }
        uint64_t result = swift_bridgeObjectRelease();
LABEL_8:
        if (v8 == ++v13) {
          return v24;
        }
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_8;
      }
      uint64_t v11 = v24;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = v11;
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v26;
      }
      unint64_t v22 = *(void *)(v11 + 16);
      unint64_t v21 = *(void *)(v11 + 24);
      if (v22 >= v21 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        uint64_t v11 = v26;
      }
      unint64_t v9 = v13 + 1;
      *(void *)(v11 + 16) = v22 + 1;
      *(void *)(v11 + 8 * v22 + 32) = v14;
      if (v23[0] == v13) {
        return v11;
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5241_s19TokenGenerationCore27SpaceLookaheadMaskGeneratorV012performWhitedA9LookAhead4from12vocabManager04stopA3IDs19CollectionsInternal6BitSetV08acceptedP0_Sb26isPotentiallyDeterministictAA0A13GrammarParserCyxG_AA010VocabularyN0CSaySiGtFS2iXEfU_AFTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t result = v13;
    uint64_t v6 = (unint64_t *)(a1 + 32);
    unint64_t v7 = *(void *)(a2 + 16);
    while (1)
    {
      unint64_t v9 = *v6++;
      unint64_t v8 = v9;
      if (v9 >= v7) {
        break;
      }
      uint64_t v10 = *(void *)(a2 + 32 + 8 * v8);
      uint64_t v14 = result;
      unint64_t v12 = *(void *)(result + 16);
      unint64_t v11 = *(void *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t result = v14;
      }
      *(void *)(result + 16) = v12 + 1;
      *(void *)(result + 8 * v12 + 32) = v10;
      if (!--v3) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF19CollectionsInternal6BitSetV_Si7tokenID_SS0H4Textts5NeverOTg50107_s19TokenGenerationCore012ParserGuidedB11ConstraintsV013selectLongestA6Prefix07allowedA3IDs12vocabManager19d9Internal6fg32VAI_AA010VocabularyM0CtFSi7tokenI18_SS0S4TexttSiXEfU_0mN4Core17VocabularyManagerCTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  uint64_t v2 = BitSet.count.getter();
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v4 = v2;
  uint64_t v16 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  uint64_t v3 = v16;
  uint64_t result = BitSet.startIndex.getter();
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = a2[11];
      uint64_t v8 = a2[12];
      __swift_project_boxed_opaque_existential_1(a2 + 8, v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v7, v8);
      uint64_t v11 = v10;
      unint64_t v13 = *(void *)(v16 + 16);
      unint64_t v12 = *(void *)(v16 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      *(void *)(v16 + 16) = v13 + 1;
      uint64_t v14 = (void *)(v16 + 24 * v13);
      v14[4] = v6;
      v14[5] = v9;
      v14[6] = v11;
      uint64_t v6 = BitSet.index(after:)();
      --v4;
    }
    while (v4);
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized ParserGuidedGenerationConstraints.possiblyDeterministicTokens(follow:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v68 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalSymbol?);
  MEMORY[0x270FA5388](v13 - 8);
  unint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TerminalSymbol(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  char v20 = (char *)&v61 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  unint64_t v27 = (char *)&v61 - v26;
  if ((a4 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v64 = v10;
  uint64_t v65 = v20;
  uint64_t v62 = v24;
  uint64_t v63 = v11;
  uint64_t v66 = v23;
  uint64_t v67 = v25;
  uint64_t v28 = v22;
  uint64_t v29 = *(void **)(a3 + 24);
  uint64_t v30 = v5;
  uint64_t v31 = v29[11];
  uint64_t v32 = v29[12];
  __swift_project_boxed_opaque_existential_1(v29 + 8, v31);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 56))(v31, v32);
  unint64_t v34 = specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(a1, v33, (uint64_t (*)(unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  if (v30) {
    return v31 & 1;
  }
  unint64_t v35 = v34;
  uint64_t v36 = *(pthread_mutex_t **)(*(void *)(a2 + 16) + 16);
  pthread_mutex_lock(v36);
  uint64_t result = swift_beginAccess();
  if ((v35 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v38 = *(void *)(a2 + 24);
    if (v35 < *(void *)(v38 + 16))
    {
      uint64_t v39 = v28;
      uint64_t v40 = *(void *)(v38 + 16 * v35 + 32);
      swift_retain();
      pthread_mutex_unlock(v36);
      uint64_t v41 = *(void *)(v40 + 56);
      pthread_mutex_lock(*(pthread_mutex_t **)(v41 + 16));
      swift_beginAccess();
      uint64_t v42 = v67;
      if (*(void *)(v40 + 48))
      {
        swift_retain();
        uint64_t valid = EarleyParser.nextValidTerminals()();
        swift_release();
      }
      else
      {
        uint64_t valid = MEMORY[0x263F8EE78];
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(v41 + 16));
      unint64_t v44 = *(void *)(valid + 16);
      if (v44 > 1) {
        goto LABEL_27;
      }
      if (!v44) {
        goto LABEL_14;
      }
      uint64_t v45 = valid + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
      swift_bridgeObjectRetain();
      _s19TokenGenerationCore7GrammarVWOcTm_1(v45, (uint64_t)v27, type metadata accessor for TerminalSymbol);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v46 = (uint64_t)v27;
LABEL_26:
        _s19TokenGenerationCore7GrammarVWOhTm_0(v46, type metadata accessor for TerminalSymbol);
LABEL_27:
        swift_bridgeObjectRelease();
        swift_release();
LABEL_28:
        LOBYTE(v31) = 0;
        return v31 & 1;
      }
      _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v27, type metadata accessor for TerminalSymbol);
      swift_bridgeObjectRelease();
      uint64_t v47 = *(void *)(valid + 16);
      if (v47)
      {
        _s19TokenGenerationCore7GrammarVWOcTm_1(v45 + *(void *)(v42 + 72) * (v47 - 1), (uint64_t)v15, type metadata accessor for TerminalSymbol);
        uint64_t v48 = 0;
      }
      else
      {
LABEL_14:
        uint64_t v48 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v15, v48, 1, v39);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v15, 1, v39) == 1)
      {
        swift_release();
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v15, &demangling cache variable for type metadata for TerminalSymbol?);
        LOBYTE(v31) = 1;
        return v31 & 1;
      }
      uint64_t v49 = v66;
      outlined init with take of LogitMaskResponse((uint64_t)v15, v66, type metadata accessor for TerminalSymbol);
      uint64_t v50 = v49;
      uint64_t v51 = v65;
      _s19TokenGenerationCore7GrammarVWOcTm_1(v50, (uint64_t)v65, type metadata accessor for TerminalSymbol);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v53 = v63;
        uint64_t v52 = v64;
        char v54 = v68;
        (*(void (**)(char *, _DWORD *, uint64_t))(v63 + 32))(v68, v51, v64);
        char v55 = CharacterSet.contains(_:)();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v52);
        if ((v55 & 1) == 0)
        {
LABEL_19:
          _s19TokenGenerationCore7GrammarVWOhTm_0(v66, type metadata accessor for TerminalSymbol);
          swift_release();
          LOBYTE(v31) = 1;
          return v31 & 1;
        }
      }
      else if (*v51 != 32)
      {
        goto LABEL_19;
      }
      uint64_t v56 = specialized TokenGrammarParser.spaceLookAheadParser()();
      uint64_t v57 = *(void *)(v56 + 56);
      pthread_mutex_lock(*(pthread_mutex_t **)(v57 + 16));
      swift_beginAccess();
      if (*(void *)(v56 + 48))
      {
        swift_retain();
        uint64_t v58 = EarleyParser.nextValidTerminals()();
        swift_release();
      }
      else
      {
        uint64_t v58 = MEMORY[0x263F8EE78];
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(v57 + 16));
      swift_release();
      unint64_t v59 = *(void *)(v58 + 16);
      if (v59 > 1)
      {
        uint64_t v46 = v66;
        goto LABEL_26;
      }
      if (v59)
      {
        uint64_t v60 = v58 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
        swift_bridgeObjectRetain();
        uint64_t v31 = v62;
        _s19TokenGenerationCore7GrammarVWOcTm_1(v60, v62, type metadata accessor for TerminalSymbol);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          swift_bridgeObjectRelease();
          _s19TokenGenerationCore7GrammarVWOhTm_0(v31, type metadata accessor for TerminalSymbol);
          swift_release();
          LOBYTE(v31) = 0;
LABEL_36:
          _s19TokenGenerationCore7GrammarVWOhTm_0(v66, type metadata accessor for TerminalSymbol);
          swift_bridgeObjectRelease();
          return v31 & 1;
        }
        _s19TokenGenerationCore7GrammarVWOhTm_0(v31, type metadata accessor for TerminalSymbol);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      LOBYTE(v31) = 1;
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized SpaceLookaheadMaskGenerator.generateValidSearchCandidates(prefixes:vocabManager:allowSpacePrefix:)(uint64_t a1, uint64_t a2, int a3)
{
  int v47 = a3;
  uint64_t v45 = a2;
  uint64_t v4 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  unint64_t v43 = (unint64_t *)((char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  unint64_t v44 = (unint64_t *)((char *)&v42 - v7);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!v8)
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_18:
    uint64_t v27 = specialized Set.init<A>(_:)(v10);
    swift_bridgeObjectRelease();
    uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v27, &demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    swift_bridgeObjectRelease();
    uint64_t v48 = v28;
    swift_retain();
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v48, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_release();
    uint64_t v29 = (uint64_t)v48;
    uint64_t v48 = (void *)v9;
    uint64_t v30 = *(void *)(v29 + 16);
    if (!v30)
    {
      swift_release();
      return MEMORY[0x263F8EE78];
    }
    uint64_t v31 = (uint64_t *)(v29 + 40);
    uint64_t v32 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v35 = *(v31 - 1);
      uint64_t v34 = *v31;
      if (v47) {
        break;
      }
      BOOL v40 = v35 == 32 && v34 == 0xE100000000000000;
      if (!v40 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v36 = v43;
        VocabularyManager.prefixLookUp.getter(v43);
        unint64_t v37 = *v36;
LABEL_25:
        swift_bridgeObjectRetain();
        _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v36, type metadata accessor for VocabularyManager.PrefixLookup);
        if (*(void *)(v37 + 16) && (unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34), (v39 & 1) != 0))
        {
          uint64_t v33 = *(void *)(*(void *)(v37 + 56) + 8 * v38);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v33 = v32;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized Array.append<A>(contentsOf:)(v33);
      }
      v31 += 2;
      if (!--v30)
      {
        swift_release();
        return (uint64_t)v48;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v36 = v44;
    VocabularyManager.prefixLookUp.getter(v44);
    unint64_t v37 = v36[1];
    goto LABEL_25;
  }
  uint64_t v48 = (void *)MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
  uint64_t v10 = (uint64_t)v48;
  int64_t v11 = specialized Set.startIndex.getter(a1);
  int v13 = v12;
  char v15 = v14 & 1;
  uint64_t v46 = a1 + 56;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v46 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
      goto LABEL_37;
    }
    if (*(_DWORD *)(a1 + 36) != v13) {
      goto LABEL_38;
    }
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    if ((v17 & 0x2000000000000000) != 0)
    {
      if ((v17 & 0xF00000000000000) == 0) {
        goto LABEL_40;
      }
LABEL_12:
      swift_bridgeObjectRetain();
      goto LABEL_13;
    }
    if ((v18 & 0xFFFFFFFFFFFFLL) == 0) {
      goto LABEL_39;
    }
    if ((v18 & 0x1000000000000000) != 0) {
      goto LABEL_12;
    }
    swift_bridgeObjectRetain();
    uint64_t v18 = static String._copying(_:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v17 = v20;
LABEL_13:
    uint64_t v48 = (void *)v10;
    unint64_t v22 = *(void *)(v10 + 16);
    unint64_t v21 = *(void *)(v10 + 24);
    if (v22 >= v21 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      uint64_t v10 = (uint64_t)v48;
    }
    *(void *)(v10 + 16) = v22 + 1;
    uint64_t v23 = v10 + 16 * v22;
    *(void *)(v23 + 32) = v18;
    *(void *)(v23 + 40) = v17;
    int64_t v24 = specialized _NativeSet.index(after:)(v11, v13, v15 & 1, a1);
    int64_t v11 = v24;
    int v13 = v25;
    char v15 = v26 & 1;
    if (!--v8)
    {
      outlined consume of Set<String>.Index._Variant(v24, v25, v26 & 1);
      uint64_t v9 = MEMORY[0x263F8EE78];
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized SpaceLookaheadMaskGenerator.performWhiteSpaceTokenLookAhead(from:vocabManager:stopTokenIDs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TerminalSymbol(0);
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  MEMORY[0x270FA5388](v6);
  int64_t v8 = (unint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::Int v9 = *(void *)(a2 + 104);
  uint64_t v30 = BitSet.init()();
  BitSet.insert(_:)(v9);
  uint64_t v31 = v30;
  uint64_t v10 = specialized TokenGrammarParser.spaceLookAheadParser()();
  specialized TokenGrammarParser.optimize()();
  uint64_t v11 = *(void *)(v10 + 56);
  pthread_mutex_lock(*(pthread_mutex_t **)(v11 + 16));
  swift_beginAccess();
  if (*(void *)(v10 + 48))
  {
    swift_retain();
    v12._rawValue = (void *)EarleyParser.nextValidTerminals()();
    swift_release();
  }
  else
  {
    v12._rawValue = (void *)MEMORY[0x263F8EE78];
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 16));
  VocabularyManager.extractCandidates(nextValidTerminals:afterStartWord:)((uint64_t)v12._rawValue, 1);
  uint64_t v14 = v13;
  uint64_t v29 = v15;
  BitSet.formUnion(_:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = specialized SpaceLookaheadMaskGenerator.generateValidSearchCandidates(prefixes:vocabManager:allowSpacePrefix:)(v14, a2, 1);
  swift_bridgeObjectRelease();
  specialized static VocabularyManager.mergeSortedRanks(_:_:)((uint64_t)&v29, v16);
  swift_bridgeObjectRelease();
  VocabularyManager.prefixLookUp.getter(v8);
  uint64_t v17 = *(unint64_t *)((char *)v8 + *(int *)(v6 + 36));
  swift_bridgeObjectRetain();
  _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v8, type metadata accessor for VocabularyManager.PrefixLookup);
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5241_s19TokenGenerationCore27SpaceLookaheadMaskGeneratorV012performWhitedA9LookAhead4from12vocabManager04stopA3IDs19CollectionsInternal6BitSetV08acceptedP0_Sb26isPotentiallyDeterministictAA0A13GrammarParserCyxG_AA010VocabularyN0CSaySiGtFS2iXEfU_AFTf1cn_nTf4ng_nTm(v18, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v20 = specialized TokenGrammarParser.accepts(tokenIDs:spaceLookAhead:)(v19);
  swift_bridgeObjectRelease();
  uint64_t v21 = v20[2];
  if (v21)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v21; ++i)
    {
      Swift::Int v23 = v20[i + 4];
      BitSet.insert(_:)(v23);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  VocabularyManager.allPrefixesHaveStartOfWordTokenPair(terminals:)(v12);
  if (*((void *)v12._rawValue + 2) == 1)
  {
    uint64_t v24 = (uint64_t)v12._rawValue
        + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    swift_bridgeObjectRetain();
    _s19TokenGenerationCore7GrammarVWOcTm_1(v24, (uint64_t)v5, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v5, type metadata accessor for TerminalSymbol);
      swift_release();
      swift_bridgeObjectRelease_n();
      return v31;
    }
    swift_bridgeObjectRelease();
    _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v5, type metadata accessor for TerminalSymbol);
  }
  swift_bridgeObjectRelease();
  swift_release();
  return v31;
}

void specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, int a5, uint64_t a6)
{
  uint64_t v127 = a6;
  uint64_t v128 = a2;
  int v121 = a5;
  Swift::UInt v109 = a4;
  uint64_t v131 = type metadata accessor for CharacterSet();
  uint64_t v107 = *(void *)(v131 - 8);
  MEMORY[0x270FA5388](v131);
  uint64_t v130 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = type metadata accessor for TerminalSymbol(0);
  uint64_t v110 = *(void *)(v133 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v133);
  uint64_t v132 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v105 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v106 = (uint64_t)&v105 - v14;
  uint64_t v15 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (unint64_t *)((char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  specialized TokenGrammarParser.optimize()();
  uint64_t v126 = a1;
  Swift::UInt valid = specialized TokenGrammarParser.nextValidTerminalsWithCacheKey()();
  int v122 = v18;
  uint64_t v20 = v19;
  uint64_t v21 = swift_allocObject();
  Swift::Int v124 = (Swift::Int)"XCEPT_QUOTE_AND_BACKSLASH";
  uint64_t v125 = v21;
  *(void *)(v21 + 16) = 0xD00000000000001CLL;
  *(void *)(v21 + 24) = 0x800000025FA3DDF0;
  id v22 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  Swift::Int v23 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v24 = objc_msgSend(v22, sel_initWithSuiteName_, v23);

  uint64_t v123 = (uint64_t)v24;
  if (!v24)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v113 = a3;
  id v25 = (id)MobileGestalt_get_current_device();
  if (!v25)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  uint64_t v26 = v25;
  int internalBuild = MobileGestalt_get_internalBuild();

  uint64_t v27 = swift_allocObject();
  unint64_t v118 = (unint64_t)"com.apple.tokengeneration";
  uint64_t v119 = v27;
  *(void *)(v27 + 16) = 0xD000000000000014;
  *(void *)(v27 + 24) = 0x800000025FA3DE30;
  id v28 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v29 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v30 = objc_msgSend(v28, sel_initWithSuiteName_, v29);

  id v117 = v30;
  if (!v30)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  char v112 = v17;
  uint64_t v129 = v20;
  id v31 = (id)MobileGestalt_get_current_device();
  if (!v31)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  uint64_t v32 = v31;
  char v33 = MobileGestalt_get_internalBuild();

  uint64_t v34 = swift_allocObject();
  unint64_t v115 = 0xD000000000000010;
  unint64_t v116 = (unint64_t)"enableRightRecursion";
  *(void *)(v34 + 16) = 0xD000000000000010;
  *(void *)(v34 + 24) = 0x800000025FA3DE50;
  id v35 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v36 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v37 = objc_msgSend(v35, sel_initWithSuiteName_, v36);

  if (!v37)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v111 = v15;
  id v38 = (id)MobileGestalt_get_current_device();
  if (!v38)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  char v39 = v38;
  int v114 = MobileGestalt_get_internalBuild();

  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = 0xD000000000000014;
  *(void *)(v40 + 24) = 0x800000025FA3DE70;
  id v41 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v42 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v43 = objc_msgSend(v41, sel_initWithSuiteName_, v42);

  if (!v43)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  id v44 = (id)MobileGestalt_get_current_device();
  if (!v44)
  {
LABEL_76:
    __break(1u);
    return;
  }
  uint64_t v45 = v44;
  int v46 = MobileGestalt_get_internalBuild();

  v142[0] = v123;
  v142[1] = 0xD00000000000001CLL;
  v142[2] = v124 | 0x8000000000000000;
  v142[3] = closure #1 in Overridable<A>.init(key:)partial apply;
  v142[4] = v125;
  char v143 = internalBuild;
  id v144 = v117;
  unint64_t v145 = 0xD000000000000014;
  unint64_t v146 = v118 | 0x8000000000000000;
  uint64_t v147 = closure #1 in Overridable<A>.init(key:)partial apply;
  uint64_t v148 = v119;
  char v149 = v33;
  id v150 = v37;
  unint64_t v151 = v115;
  unint64_t v152 = v116 | 0x8000000000000000;
  uint64_t v153 = closure #1 in Overridable<A>.init(key:)partial apply;
  uint64_t v154 = v34;
  char v155 = v114;
  id v156 = v43;
  unint64_t v157 = 0xD000000000000014;
  unint64_t v158 = 0x800000025FA3DE70;
  unint64_t v159 = closure #1 in Overridable<A>.init(key:)partial apply;
  uint64_t v160 = v40;
  char v161 = v46;
  if (v46)
  {
    id v47 = v43;
    swift_bridgeObjectRetain();
    swift_retain();
    closure #1 in Overridable<A>.init(key:)(v47, 0xD000000000000014, 0x800000025FA3DE70, v162);
    swift_release();
    swift_bridgeObjectRelease();

    outlined release of GuidedGenerationOverrides((uint64_t)v142);
    int v48 = LOBYTE(v162[0]);
  }
  else
  {
    outlined release of GuidedGenerationOverrides((uint64_t)v142);
    int v48 = 2;
  }
  uint64_t v49 = v129;
  uint64_t v50 = v132;
  int v51 = v48 | v122 | (v127 == 0) | v121;
  if ((v48 | v122) & 1 | (v127 == 0) | v121 & 1)
  {
    Swift::Int v124 = 0;
  }
  else
  {
    Hasher.init()();
    Hasher._combine(_:)(valid);
    Hasher._combine(_:)(v109);
    v162[2] = v136;
    v162[3] = v137;
    uint64_t v163 = v138;
    v162[0] = v134;
    v162[1] = v135;
    Swift::Int v52 = Hasher.finalize()();
    uint64_t v53 = v126;
    char v54 = *(pthread_mutex_t **)(*(void *)(v126 + 56) + 16);
    swift_retain();
    pthread_mutex_lock(v54);
    *(unsigned char *)(v53 + 16) = 1;
    pthread_mutex_unlock(v54);
    uint64_t v55 = MaskCache.getMask(forHashKey:)(v52);
    swift_release();
    if (v55)
    {
      swift_bridgeObjectRelease();
      return;
    }
    Swift::Int v124 = v52;
    uint64_t v50 = v132;
  }
  uint64_t v56 = VocabularyManager.extractCandidates(nextValidTerminals:afterStartWord:)(v49, 0);
  uint64_t v58 = v57;
  uint64_t v140 = v59;
  uint64_t v141 = v56;
  uint64_t v60 = *(void *)(v49 + 16);
  LODWORD(v125) = v51;
  if (v60)
  {
    uint64_t v123 = v57;
    uint64_t v61 = v49 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
    uint64_t v62 = (void (**)(char *, _DWORD *, uint64_t))(v107 + 32);
    uint64_t v63 = (void (**)(char *, uint64_t))(v107 + 8);
    uint64_t v64 = *(void *)(v110 + 72);
    swift_bridgeObjectRetain();
    do
    {
      _s19TokenGenerationCore7GrammarVWOcTm_1(v61, (uint64_t)v13, type metadata accessor for TerminalSymbol);
      _s19TokenGenerationCore7GrammarVWOcTm_1((uint64_t)v13, (uint64_t)v50, type metadata accessor for TerminalSymbol);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v65 = v130;
        uint64_t v66 = v50;
        uint64_t v67 = v131;
        (*v62)(v130, v66, v131);
        char v68 = CharacterSet.contains(_:)();
        uint64_t v69 = v67;
        uint64_t v50 = v132;
        (*v63)(v65, v69);
        _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v13, type metadata accessor for TerminalSymbol);
        if (v68) {
          goto LABEL_23;
        }
      }
      else
      {
        int v70 = *v50;
        _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v13, type metadata accessor for TerminalSymbol);
        if (v70 == 32)
        {
LABEL_23:
          uint64_t v49 = v129;
          swift_bridgeObjectRelease();
          uint64_t v71 = v126;
          specialized SpaceLookaheadMaskGenerator.performWhiteSpaceTokenLookAhead(from:vocabManager:stopTokenIDs:)(v126, v128);
          char v73 = v72;
          BitSet.formUnion(_:)();
          goto LABEL_26;
        }
      }
      v61 += v64;
      --v60;
    }
    while (v60);
    char v73 = 1;
    uint64_t v49 = v129;
    uint64_t v71 = v126;
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v58 = v123;
  }
  else
  {
    char v73 = 1;
    uint64_t v71 = v126;
  }
  uint64_t v74 = specialized SpaceLookaheadMaskGenerator.generateValidSearchCandidates(prefixes:vocabManager:allowSpacePrefix:)(v58, v128, 0);
  swift_bridgeObjectRelease();
  specialized static VocabularyManager.mergeSortedRanks(_:_:)((uint64_t)&v140, v74);
  swift_bridgeObjectRelease();
  specialized MutableCollection<>.sort(by:)(&v140, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  uint64_t v75 = v112;
  VocabularyManager.prefixLookUp.getter(v112);
  uint64_t v76 = *(unint64_t *)((char *)v75 + *(int *)(v111 + 36));
  swift_bridgeObjectRetain();
  _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)v75, type metadata accessor for VocabularyManager.PrefixLookup);
  swift_bridgeObjectRetain();
  uint64_t v77 = swift_bridgeObjectRetain();
  uint64_t v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5241_s19TokenGenerationCore27SpaceLookaheadMaskGeneratorV012performWhitedA9LookAhead4from12vocabManager04stopA3IDs19CollectionsInternal6BitSetV08acceptedP0_Sb26isPotentiallyDeterministictAA0A13GrammarParserCyxG_AA010VocabularyN0CSaySiGtFS2iXEfU_AFTf1cn_nTf4ng_nTm(v77, v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v79 = specialized TokenGrammarParser.accepts(tokenIDs:spaceLookAhead:)(v78);
  swift_bridgeObjectRelease();
  uint64_t v80 = v79[2];
  if (v80)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v80; ++i)
    {
      Swift::Int v82 = v79[i + 4];
      BitSet.insert(_:)(v82);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v49 = v129;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v83 = *(void **)(v71 + 48);
  uint64_t v84 = v113;
  if (v83)
  {
    EarleyParser.Chart.lastState.getter(v83[5], v83[6], v139);
    if (v139[0])
    {
      uint64_t v85 = *(void *)(v139[0] + 16);
      if (v85)
      {
        uint64_t v86 = *(void *)(v83[4] + 56);
        uint64_t v87 = v86 + 32;
        uint64_t v88 = (void *)(v139[0] + 48);
        while (1)
        {
          if (!*v88)
          {
            unint64_t v89 = *(v88 - 2);
            if ((v89 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_68:
              __break(1u);
              goto LABEL_69;
            }
            if (v89 >= *(void *)(v86 + 16)) {
              goto LABEL_68;
            }
            if (*(void *)(v87 + 16 * v89) == *(void *)(v83[4] + 48))
            {
              uint64_t v90 = *(v88 - 1);
              uint64_t v91 = *(void *)(v87 + 16 * v89 + 8);
              if (v90 >= *(void *)(v91 + 16)) {
                break;
              }
              uint64_t v92 = v91 + 16 * v90;
              if (*(unsigned char *)(v92 + 40) == 2 && *(void *)(v92 + 32) == 0) {
                break;
              }
            }
          }
          v88 += 3;
          if (!--v85) {
            goto LABEL_53;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v139[0] = BitSet.init()();
        uint64_t v94 = *(void *)(v84 + 16);
        if (v94)
        {
          swift_bridgeObjectRetain();
          for (uint64_t j = 0; j != v94; ++j)
          {
            Swift::Int v96 = *(void *)(v84 + 8 * j + 32);
            BitSet.insert(_:)(v96);
          }
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        BitSet.formUnion(_:)();
      }
LABEL_53:
      swift_bridgeObjectRelease();
    }
  }
  if ((v73 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    char v102 = 0;
    if (v125) {
      return;
    }
    goto LABEL_66;
  }
  unint64_t v97 = *(void *)(v49 + 16);
  char v98 = v125;
  if (v97 > 1) {
    goto LABEL_59;
  }
  if (!v97)
  {
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  uint64_t v99 = v49 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
  swift_bridgeObjectRetain();
  uint64_t v100 = v99;
  uint64_t v101 = v106;
  _s19TokenGenerationCore7GrammarVWOcTm_1(v100, v106, type metadata accessor for TerminalSymbol);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s19TokenGenerationCore7GrammarVWOhTm_0(v101, type metadata accessor for TerminalSymbol);
    swift_bridgeObjectRelease_n();
LABEL_65:
    char v102 = 1;
    if (v98) {
      return;
    }
LABEL_66:
    unint64_t v103 = *(pthread_mutex_t **)(*(void *)(v71 + 56) + 16);
    swift_retain();
    pthread_mutex_lock(v103);
    *(unsigned char *)(v71 + 16) = 1;
    pthread_mutex_unlock(v103);
    uint64_t v104 = v141;
    swift_bridgeObjectRetain();
    MaskCache.setMask(forHashKey:result:)(v124, v104, v102);
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  _s19TokenGenerationCore7GrammarVWOhTm_0(v101, type metadata accessor for TerminalSymbol);
LABEL_59:
  swift_bridgeObjectRelease();
  char v102 = 0;
  if ((v98 & 1) == 0) {
    goto LABEL_66;
  }
}

int64_t specialized ExhaustiveLogitMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v30 = BitSet.init()();
  specialized TokenGrammarParser.optimize()();
  uint64_t v6 = a2[11];
  uint64_t v7 = a2[12];
  __swift_project_boxed_opaque_existential_1(a2 + 8, v6);
  int64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(v6, v7);
  if (result < 0)
  {
LABEL_32:
    __break(1u);
  }
  else
  {
    uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(0, result);
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized _ArrayProtocol.filter(_:)((uint64_t)v9, a3);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v11 = specialized TokenGrammarParser.accepts(tokenIDs:spaceLookAhead:)(v10);
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v12 = specialized _ArrayProtocol.filter(_:)((uint64_t)v11, (uint64_t)a2);
    swift_bridgeObjectRelease();
    swift_release();
    v29[1] = BitSet.init()();
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v13; ++i)
      {
        Swift::Int v15 = *(void *)(v12 + 8 * i + 32);
        BitSet.insert(_:)(v15);
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    BitSet.formUnion(_:)();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v16 = *(void **)(a1 + 48);
    if (v16)
    {
      EarleyParser.Chart.lastState.getter(v16[5], v16[6], v29);
      int64_t result = v29[0];
      if (v29[0])
      {
        uint64_t v17 = *(void *)(v29[0] + 16);
        if (v17)
        {
          uint64_t v18 = *(void *)(v16[4] + 56);
          uint64_t v19 = v18 + 32;
          uint64_t v20 = (void *)(v29[0] + 48);
          while (1)
          {
            if (!*v20)
            {
              unint64_t v21 = *(v20 - 2);
              if ((v21 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_31:
                __break(1u);
                goto LABEL_32;
              }
              if (v21 >= *(void *)(v18 + 16)) {
                goto LABEL_31;
              }
              if (*(void *)(v19 + 16 * v21) == *(void *)(v16[4] + 48))
              {
                uint64_t v22 = *(v20 - 1);
                uint64_t v23 = *(void *)(v19 + 16 * v21 + 8);
                if (v22 >= *(void *)(v23 + 16)) {
                  break;
                }
                uint64_t v24 = v23 + 16 * v22;
                if (*(unsigned char *)(v24 + 40) == 2 && *(void *)(v24 + 32) == 0) {
                  break;
                }
              }
            }
            v20 += 3;
            if (!--v17) {
              goto LABEL_28;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v29[0] = BitSet.init()();
          uint64_t v26 = *(void *)(a3 + 16);
          if (v26)
          {
            swift_bridgeObjectRetain();
            for (uint64_t j = 0; j != v26; ++j)
            {
              Swift::Int v28 = *(void *)(a3 + 8 * j + 32);
              BitSet.insert(_:)(v28);
            }
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          BitSet.formUnion(_:)();
        }
LABEL_28:
        swift_bridgeObjectRelease();
      }
    }
    return v30;
  }
  return result;
}

uint64_t specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)(uint64_t a1, void *a2)
{
  if (BitSet.count.getter() == 1)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_retain();
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF19CollectionsInternal6BitSetV_Si7tokenID_SS0H4Textts5NeverOTg50107_s19TokenGenerationCore012ParserGuidedB11ConstraintsV013selectLongestA6Prefix07allowedA3IDs12vocabManager19d9Internal6fg32VAI_AA010VocabularyM0CtFSi7tokenI18_SS0S4TexttSiXEfU_0mN4Core17VocabularyManagerCTf1cn_nTf4ng_n(a1, a2);
  swift_release();
  uint64_t v24 = v4;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v24, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease();
  swift_retain();
  specialized MutableCollection<>.sort(by:)(&v24, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_release();
  uint64_t v5 = v24;
  uint64_t v6 = *(void *)(v24 + 16);
  if (!v6)
  {
    swift_release();
    if (one-time initialization token for guided == -1)
    {
LABEL_18:
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Log.guided);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_25F950000, v20, v21, "allowedTokenIDs is empty. Something is likely wrong with the tokenizer", v22, 2u);
        MEMORY[0x2612040B0](v22, -1, -1);
      }

      goto LABEL_22;
    }
LABEL_30:
    swift_once();
    goto LABEL_18;
  }
  Swift::Int v7 = *(void *)(v24 + 24 * v6 + 8);
  uint64_t v8 = BitSet.count.getter();
  uint64_t v9 = v8 - 2;
  if (__OFSUB__(v8, 2))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v9 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v10 = v8 - 1;
  if (__OFADD__(v9, 1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v6 < v10)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v10 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v11 = (void **)(v5 + 48);
  do
  {
    if (!v10)
    {
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v13 = (uint64_t)*(v11 - 1);
    uint64_t v12 = *v11;
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = v13;
    v14._unint64_t object = v12;
    LOBYTE(v13) = String.hasPrefix(_:)(v14);
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release_n();
      goto LABEL_22;
    }
    v11 += 3;
    --v10;
  }
  while (v10);
  swift_release_n();
  if (one-time initialization token for guided != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.guided);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_25F950000, v16, v17, "All allowedTokens are prefixes of the longest token. Picking the longest token.", v18, 2u);
    MEMORY[0x2612040B0](v18, -1, -1);
  }

  swift_bridgeObjectRelease();
  uint64_t v24 = BitSet.init()();
  BitSet.insert(_:)(v7);
  return v24;
}

uint64_t specialized ParserGuidedGenerationConstraints.enforceTokenizationStability(tokenIDs:vocabManager:lastConsumedTokenID:)(void *a1, void *a2, uint64_t a3, char a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = (uint64_t)a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25FA352B0;
    *(void *)(v9 + 32) = a3;
    v64[0] = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v10);
    uint64_t v11 = v64[0];
  }
  char v12 = (_BYTE)a2 + 64;
  uint64_t v13 = a2[11];
  uint64_t v14 = a2[12];
  __swift_project_boxed_opaque_existential_1(a2 + 8, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v11, v13, v14);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v63 = a1;
    uint64_t v18 = a2[11];
    uint64_t v17 = a2[12];
    unint64_t v19 = v16;
    uint64_t v20 = v15;
    __swift_project_boxed_opaque_existential_1(a2 + 8, v18);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v17 + 24))(v20, v19, v18, v17);
    uint64_t v23 = (void *)v21;
    uint64_t v61 = v20;
    uint64_t v62 = a2 + 8;
    uint64_t v65 = v21;
    if (a4)
    {
      unint64_t v26 = v19;
    }
    else
    {
      uint64_t v24 = *(void *)(v21 + 16);
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      uint64_t v25 = swift_dynamicCastClass();
      unint64_t v26 = v19;
      if (!v25)
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = MEMORY[0x263F8EE78];
      }
      uint64_t v27 = *(void *)(v25 + 16);
      swift_release();
      if (v27 == v24 - (v24 != 0))
      {
        uint64_t v28 = swift_dynamicCastClass();
        if (!v28)
        {
          swift_bridgeObjectRelease();
          uint64_t v28 = MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v23, (uint64_t)(v23 + 4), v24 != 0, (2 * v24) | 1);
      }
      swift_bridgeObjectRelease_n();
      uint64_t v65 = v28;
      uint64_t v23 = (void *)v28;
    }
    BOOL v29 = specialized static Array<A>.== infix(_:_:)(v23, a1);
    char v12 = v29;
    if (v29)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      BOOL v60 = v29;
      if (one-time initialization token for guided != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Log.guided);
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        char v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v33 = 0;
        _os_log_impl(&dword_25F950000, v31, v32, "Deterministic run lookahead found unstable tokenization. Emitting retokenized tokenIDs", v33, 2u);
        MEMORY[0x2612040B0](v33, -1, -1);
      }

      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        v64[0] = v37;
        *(_DWORD *)uint64_t v36 = 136643331;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v26, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v36 + 12) = 2085;
        swift_beginAccess();
        uint64_t v38 = swift_bridgeObjectRetain();
        uint64_t v39 = MEMORY[0x261202AC0](v38, MEMORY[0x263F8D6C8]);
        unint64_t v41 = v40;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 22) = 2085;
        uint64_t v42 = swift_bridgeObjectRetain();
        uint64_t v43 = MEMORY[0x261202AC0](v42, MEMORY[0x263F8D6C8]);
        unint64_t v45 = v44;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25F950000, v34, v35, "detokenizedText: %{sensitive}s failed stability check %{sensitive}s did not match greedy prefix search: %{sensitive}s", (uint8_t *)v36, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x2612040B0](v37, -1, -1);
        MEMORY[0x2612040B0](v36, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v46 = a2[11];
      uint64_t v47 = a2[12];
      __swift_project_boxed_opaque_existential_1(v62, v46);
      swift_beginAccess();
      int v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 32);
      uint64_t v49 = swift_bridgeObjectRetain();
      uint64_t v50 = v48(v49, v46, v47);
      uint64_t v52 = v51;
      swift_bridgeObjectRelease();
      uint64_t v54 = a2[11];
      uint64_t v53 = a2[12];
      __swift_project_boxed_opaque_existential_1(v62, v54);
      if (v50 == (*(uint64_t (**)(void *, uint64_t, uint64_t))(v53 + 32))(v63, v54, v53) && v52 == v55)
      {
        swift_bridgeObjectRelease_n();
        char v12 = v60;
      }
      else
      {
        char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v12 = v60;
        if ((v56 & 1) == 0)
        {
          uint64_t v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v59 = 0;
            _os_log_impl(&dword_25F950000, v57, v58, "Token stability changed expect characters.", v59, 2u);
            MEMORY[0x2612040B0](v59, -1, -1);
          }
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized ParserGuidedGenerationConstraints.validateTokens(from:candidateTokenIDs:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(a4 + 24);
  uint64_t v9 = v8[11];
  uint64_t v10 = v8[12];
  __swift_project_boxed_opaque_existential_1(v8 + 8, v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 56))(v9, v10);
  unint64_t v12 = specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(a1, v11, (uint64_t (*)(unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  if (v4) {
    return a3;
  }
  unint64_t v13 = v12;
  uint64_t v14 = *(pthread_mutex_t **)(*(void *)(a3 + 16) + 16);
  pthread_mutex_lock(v14);
  uint64_t result = swift_beginAccess();
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v13 < *(void *)(*(void *)(a3 + 24) + 16))
  {
    swift_retain();
    pthread_mutex_unlock(v14);
    uint64_t v16 = *(void *)(a2 + 16);
    if (v16)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = 0;
      while (1)
      {
        a3 = *(void *)(a2 + 8 * v17 + 32);
        uint64_t v18 = specialized TokenGrammarParser.childParser(consumingTokenID:)(a3);
        swift_beginAccess();
        uint64_t v19 = *(void *)(v18 + 48);
        swift_release();
        if (v19) {
          break;
        }
        if (v16 == ++v17)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      return 0;
    }
    return a3;
  }
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.append<A>(contentsOf:)(uint64_t a1)
{
  size_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!result || (int64_t v8 = *(void *)(v3 + 24) >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v9, 1);
    uint64_t v3 = *v1;
    int64_t v8 = *(void *)(*v1 + 24) >> 1;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  int64_t v11 = v8 - v10;
  if (v2)
  {
    if (v11 < (uint64_t)v2)
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    unint64_t v12 = (void *)(v3 + v10 + 32);
    if (a1 + 32 < (unint64_t)v12 + v2 && (unint64_t)v12 < a1 + 32 + v2) {
      goto LABEL_52;
    }
    uint64_t result = (uint64_t)memcpy(v12, (const void *)(a1 + 32), v2);
    uint64_t v14 = *(void *)(v3 + 16);
    uint64_t v10 = v14 + v2;
    if (__OFADD__(v14, v2)) {
      goto LABEL_50;
    }
    *(void *)(v3 + 16) = v10;
  }
  if (v2 != v11 || (size_t v15 = *(void *)(a1 + 16), v2 == v15))
  {
LABEL_46:
    uint64_t *v1 = v3;
    return result;
  }
  if (v2 < v15)
  {
    uint64_t v16 = a1 + 32;
    size_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(a1 + 32 + v2);
    uint64_t v19 = a1 + 39;
    while (1)
    {
LABEL_22:
      unint64_t v20 = *(void *)(v3 + 24);
      uint64_t v21 = v10 + 1;
      if (v10 + 1 > (uint64_t)(v20 >> 1))
      {
        uint64_t v37 = v19;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v10 + 1, 1);
        uint64_t v19 = v37;
      }
      uint64_t v3 = *v1;
      uint64_t v22 = *(void *)(*v1 + 24) >> 1;
      if (v10 < v22) {
        break;
      }
      *(void *)(v3 + 16) = v10;
    }
    *(unsigned char *)(v3 + v10 + 32) = v18 & 1;
    if (v17 != v15)
    {
      size_t v23 = *(void *)(a1 + 16);
      if (v17 > v23) {
        size_t v23 = v17;
      }
      size_t v24 = v15 + ~v17;
      if (v24 >= v22 + ~v10) {
        size_t v24 = v22 + ~v10;
      }
      if (v24 >= v23 - v17) {
        size_t v24 = v23 - v17;
      }
      unint64_t v25 = v24 + 1;
      if (v25 >= 9 && v10 + v3 - (v16 + v17) + 33 >= 8)
      {
        uint64_t v26 = v25 & 7;
        if ((v25 & 7) == 0) {
          uint64_t v26 = 8;
        }
        unint64_t v27 = v25 - v26;
        size_t v28 = v17 + v27;
        v21 += v27;
        BOOL v29 = (int8x8_t *)(v3 + v10 + 33);
        uint64_t v30 = (__int8 *)(v19 + v17);
        do
        {
          uint64_t result = *(v30 - 3);
          v31.i16[0] = *(_WORD *)(v30 - 7);
          v31.i8[2] = *(v30 - 5);
          __int8 v32 = *(v30 - 2);
          __int8 v33 = *(v30 - 1);
          v31.i8[3] = *(v30 - 4);
          v31.i8[4] = *(v30 - 3);
          __int8 v34 = *v30;
          v30 += 8;
          v31.i8[5] = v32;
          v31.i8[6] = v33;
          v31.i8[7] = v34;
          *v29++ = vand_s8(v31, (int8x8_t)0x101010101010101);
          v27 -= 8;
        }
        while (v27);
        size_t v17 = v28;
      }
      uint64_t v35 = 0;
      size_t v36 = v23 - v17;
      while (v36 != v35)
      {
        char v18 = *(unsigned char *)(v16 + v17 + v35);
        if (v22 - v21 == v35)
        {
          v17 += v35 + 1;
          uint64_t v10 = v22;
          *(void *)(v3 + 16) = v22;
          goto LABEL_22;
        }
        *(unsigned char *)(v3 + v21 + 32 + v35++) = v18;
        if (!(v17 - v15 + v35))
        {
          v21 += v35;
          goto LABEL_45;
        }
      }
      __break(1u);
      goto LABEL_48;
    }
LABEL_45:
    *(void *)(v3 + 16) = v21;
    goto LABEL_46;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type GuidedGenerationError and conformance GuidedGenerationError()
{
  unint64_t result = lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError;
  if (!lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError;
  if (!lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError);
  }
  return result;
}

uint64_t _s19TokenGenerationCore7GrammarVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for GuidedGenerationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F9B1CCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GuidedGenerationError()
{
  return &type metadata for GuidedGenerationError;
}

uint64_t *initializeBufferWithCopyOfBuffer for LogitMaskComputation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_retain();
    }
    else
    {
      type metadata accessor for LogitMaskResponse(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v8 = type metadata accessor for IndexSet();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      }
      else
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for LogitMaskResponse(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for LogitMaskResponse);
}

uint64_t destroy for LogitMaskComputation(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return swift_release();
  }
  else
  {
    type metadata accessor for LogitMaskResponse(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v3 = type metadata accessor for IndexSet();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
}

void *initializeWithCopy for LogitMaskComputation(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    type metadata accessor for LogitMaskResponse(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for IndexSet();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for LogitMaskComputation(void *a1, void *a2)
{
  if (a1 != a2)
  {
    _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)a1, type metadata accessor for LogitMaskComputation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      swift_retain();
    }
    else
    {
      type metadata accessor for LogitMaskResponse(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v5 = type metadata accessor for IndexSet();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      }
      else
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for LogitMaskComputation(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for LogitMaskComputation);
}

void *initializeWithTake for LogitMaskComputation(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for LogitMaskResponse(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for IndexSet();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for LogitMaskComputation(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)a1, type metadata accessor for LogitMaskComputation);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for LogitMaskResponse(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = type metadata accessor for IndexSet();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for LogitMaskComputation()
{
  uint64_t result = type metadata accessor for LogitMaskResponse(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LogitMaskResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for IndexSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for LogitMaskResponse(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for IndexSet();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for LogitMaskResponse(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for IndexSet();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for LogitMaskResponse(void *a1, void *a2)
{
  if (a1 != a2)
  {
    _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)a1, type metadata accessor for LogitMaskResponse);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for IndexSet();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for LogitMaskResponse(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for IndexSet();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for LogitMaskResponse(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s19TokenGenerationCore7GrammarVWOhTm_0((uint64_t)a1, type metadata accessor for LogitMaskResponse);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for IndexSet();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for LogitMaskResponse()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenIDMask()
{
  return &type metadata for TokenIDMask;
}

uint64_t outlined copy of TokenIDMaskComputation(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 < 0) {
    return swift_retain();
  }
  else {
    return outlined copy of TokenIDMaskResponse(a1, a2, a3 & 1);
  }
}

uint64_t destroy for TokenIDMaskComputation(uint64_t a1)
{
  return outlined consume of TokenIDMaskComputation(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of TokenIDMaskComputation(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 < 0) {
    return swift_release();
  }
  else {
    return outlined consume of TokenIDMaskResponse(a1, a2, a3 & 1);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for TokenIDMaskComputation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TokenIDMaskComputation(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TokenIDMaskComputation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TokenIDMaskComputation(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of TokenIDMaskComputation(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for TokenIDMaskComputation(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of TokenIDMaskComputation(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenIDMaskComputation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (*(unsigned char *)(a1 + 16) & 0x7E | (*(unsigned __int8 *)(a1 + 16) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TokenIDMaskComputation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 127;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t getEnumTag for TokenIDMaskComputation(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 7;
}

uint64_t destructiveProjectEnumData for TokenIDMaskComputation(uint64_t result)
{
  *(unsigned char *)(result + 16) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for TokenIDMaskComputation(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for TokenIDMaskComputation()
{
  return &type metadata for TokenIDMaskComputation;
}

uint64_t destroy for TokenIDMaskResponse(uint64_t a1)
{
  return outlined consume of TokenIDMaskResponse(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for TokenIDMaskResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *((unsigned __int8 *)a2 + 16);
  outlined copy of TokenIDMaskResponse(*a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t *assignWithCopy for TokenIDMaskResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *((unsigned __int8 *)a2 + 16);
  outlined copy of TokenIDMaskResponse(*a2, v4, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *a1 = v3;
  a1[1] = v4;
  *((unsigned char *)a1 + 16) = v5;
  outlined consume of TokenIDMaskResponse(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for TokenIDMaskResponse(uint64_t *a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *((unsigned __int8 *)a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((unsigned char *)a1 + 16) = v3;
  outlined consume of TokenIDMaskResponse(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenIDMaskResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenIDMaskResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TokenIDMaskResponse(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for TokenIDMaskResponse(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TokenIDMaskResponse()
{
  return &type metadata for TokenIDMaskResponse;
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.tokenID(forText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.text(forTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.tokenize(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.detokenize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.vocabulary()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.longestTokenLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.vocabularyCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

ValueMetadata *type metadata accessor for GuidedGenerationVocabularyManager()
{
  return &type metadata for GuidedGenerationVocabularyManager;
}

uint64_t destroy for GuidedGenerationConstraints()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for GuidedGenerationConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GuidedGenerationConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithTake for GuidedGenerationConstraints(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GuidedGenerationConstraints(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GuidedGenerationConstraints(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GuidedGenerationConstraints()
{
  return &type metadata for GuidedGenerationConstraints;
}

unint64_t partial apply for specialized closure #1 in TokenGrammarParser.accepts(tokenIDs:spaceLookAhead:)(unint64_t *a1)
{
  return (unint64_t)specialized closure #1 in TokenGrammarParser.accepts(tokenIDs:spaceLookAhead:)(a1, v1[2], v1[3], v1[4], v1[5]) & 1;
}

uint64_t partial apply for specialized closure #1 in ParserGuidedGenerationConstraints.nextTokenIDMaskComputation(follow:)@<X0>(uint64_t a1@<X8>)
{
  return specialized ParserGuidedGenerationConstraints.generateNextTokenIDMask(from:)(*(void *)(v1 + 64), a1);
}

uint64_t sub_25F9B3104()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out TokenIDMaskResponse, @error @owned Error)(uint64_t a1)
{
  uint64_t v4 = *(void (**)(void))(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out TokenIDMaskResponse, @error @owned Error);
  uint64_t v6 = (uint64_t (*)(uint64_t, void (*)(void)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable () -> (@out TokenIDMaskResponse, @error @owned Error)
                                                       + async function pointer to thunk for @escaping @callee_guaranteed @Sendable () -> (@out TokenIDMaskResponse, @error @owned Error));
  return v6(a1, v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out TokenIDMaskResponse, @error @owned Error)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> (@out TokenIDMaskResponse, @error @owned Error)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t _s19TokenGenerationCore7GrammarVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of Set<String>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t objectdestroy_66Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for specialized closure #1 in ParserGuidedGenerationConstraints.nextMask(follow:)@<X0>(void *a1@<X8>)
{
  return specialized ParserGuidedGenerationConstraints.generateNextLogitMask(from:)(*(void *)(v1 + 64), a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error)(uint64_t a1)
{
  uint64_t v4 = *(void (**)(void))(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error);
  uint64_t v6 = (uint64_t (*)(uint64_t, void (*)(void)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error)
                                                       + async function pointer to thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error));
  return v6(a1, v4);
}

uint64_t outlined init with take of LogitMaskResponse(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    type metadata accessor for IndexSet();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

uint64_t destroy for Signpost(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  return swift_release();
}

uint64_t initializeWithTake for Signpost(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Signpost(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F9B3878);
}

uint64_t sub_25F9B3878(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for OSSignposter();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for OSSignpostID();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[7]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F9B399C);
}

uint64_t sub_25F9B399C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for OSSignposter();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = type metadata accessor for OSSignpostID();
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[7]) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  return v13(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for Signpost()
{
  uint64_t result = type metadata singleton initialization cache for Signpost;
  if (!type metadata singleton initialization cache for Signpost) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for Signpost()
{
  uint64_t result = type metadata accessor for OSSignposter();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OSSignpostID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t Signpost.init(_:_:)@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = &v33[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v33[-v15];
  uint64_t v17 = type metadata accessor for Logger();
  MEMORY[0x270FA5388](v17);
  uint64_t v38 = a1;
  uint64_t v39 = (char *)a2;
  *(void *)a5 = a2;
  *(void *)(a5 + 8) = a3;
  uint64_t v20 = v19;
  *(unsigned char *)(a5 + 16) = a4;
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v19 + 16);
  uint64_t v37 = v22;
  v21(&v33[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)], a1);
  uint64_t v23 = type metadata accessor for Signpost();
  OSSignposter.init(logger:)();
  uint64_t v36 = v23;
  uint64_t v24 = a5 + *(int *)(v23 + 24);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v35 = v11;
  unint64_t v25 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16);
  v25(v16, v24, v10);
  uint64_t v26 = OSSignposter.logHandle.getter();
  int v34 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    uint64_t v29 = v35;
LABEL_11:
    v25(v14, (uint64_t)v16, v10);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v32 = OSSignpostIntervalState.init(id:isOpen:)();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v38, v37);
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v29 + 8))(v16, v10);
    *(void *)(a5 + *(int *)(v36 + 28)) = v32;
    return result;
  }
  if ((a4 & 1) == 0)
  {
    if (v39)
    {
      uint64_t v28 = v20;
LABEL_10:
      v25(v14, (uint64_t)v16, v10);
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      os_signpost_id_t v31 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_25F950000, v26, (os_signpost_type_t)v34, v31, v39, "", v30, 2u);
      MEMORY[0x2612040B0](v30, -1, -1);

      uint64_t v29 = v35;
      (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v14, v10);
      uint64_t v20 = v28;
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((unint64_t)v39 >> 32)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v39 >> 11 != 27)
  {
    if (v39 >> 16 <= 0x10)
    {
      uint64_t v28 = v20;
      uint64_t v39 = &v40;
      goto LABEL_10;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t one-time initialization function for tokenization(uint64_t a1)
{
  return one-time initialization function for tokenization(a1, static Log.tokenization);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t one-time initialization function for stopSequenceMonitor(uint64_t a1)
{
  return one-time initialization function for tokenization(a1, static Log.stopSequenceMonitor);
}

uint64_t one-time initialization function for guided(uint64_t a1)
{
  return one-time initialization function for tokenization(a1, static Log.guided);
}

uint64_t one-time initialization function for prompt(uint64_t a1)
{
  return one-time initialization function for tokenization(a1, static Log.prompt);
}

uint64_t one-time initialization function for configuration(uint64_t a1)
{
  return one-time initialization function for tokenization(a1, static Log.configuration);
}

uint64_t one-time initialization function for tokenization(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

Swift::Void __swiftcall Signpost.end()()
{
  uint64_t v1 = type metadata accessor for OSSignpostError();
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  MEMORY[0x270FA5388](v1);
  os_signpost_id_t v31 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v35 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v35);
  int v34 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = type metadata accessor for OSSignposter();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Signpost();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v0 + *(int *)(v12 + 20), v8);
  uint64_t v13 = *(const char **)v0;
  char v14 = *(unsigned char *)(v0 + 16);
  uint64_t v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v30 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v35);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return;
  }
  uint64_t v27 = v9;
  uint64_t v28 = v11;
  uint64_t v16 = v7;
  uint64_t v29 = v8;
  uint64_t v17 = v35;
  if (v14)
  {
    if (!((unint64_t)v13 >> 32))
    {
      if (v13 >> 11 == 27)
      {
LABEL_18:
        __break(1u);
        return;
      }
      if (v13 >> 16 <= 0x10)
      {
        uint64_t v18 = &v36;
        goto LABEL_10;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v13)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v18 = v13;
LABEL_10:
  swift_retain();
  uint64_t v19 = v31;
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v21 = v32;
  uint64_t v20 = v33;
  if ((*(unsigned int (**)(char *, uint64_t))(v32 + 88))(v19, v33) == *MEMORY[0x263F90238])
  {
    uint64_t v22 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
    uint64_t v22 = "";
  }
  uint64_t v23 = v34;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v34, v16, v17);
  uint64_t v24 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v24 = 0;
  os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_25F950000, v15, (os_signpost_type_t)v30, v25, v18, v22, v24, 2u);
  MEMORY[0x2612040B0](v24, -1, -1);

  uint64_t v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v16, v17);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  v26(v23, v17);
}

uint64_t ModelConfiguration.init(modelConfigurationData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for _LoadedModelConfiguration();
  uint64_t v7 = static _LoadedModelConfiguration.create(modelConfigurationData:)();
  uint64_t result = outlined consume of Data._Representation(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t type metadata accessor for _LoadedModelConfiguration()
{
  return self;
}

uint64_t static _LoadedModelConfiguration.create(modelConfigurationData:)()
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  lazy protocol witness table accessor for type _LoadedModelConfiguration and conformance _LoadedModelConfiguration(&lazy protocol witness table cache variable for type _LoadedModelConfiguration and conformance _LoadedModelConfiguration, v1, (void (*)(uint64_t))type metadata accessor for _LoadedModelConfiguration);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t result = swift_release();
  if (!v0) {
    return v3;
  }
  return result;
}

uint64_t ModelConfiguration.init(modelbundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return ModelConfiguration.init(modelbundleIdentifier:)(a1, (uint64_t (*)(uint64_t))static _LoadedModelConfiguration.create(modelBundleIdentifier:), &demangling cache variable for type metadata for ResourceBundleIdentifier<LLMBundle>, a2);
}

{
  return ModelConfiguration.init(modelbundleIdentifier:)(a1, (uint64_t (*)(uint64_t))static _LoadedModelConfiguration.create(modelBundleIdentifier:), &demangling cache variable for type metadata for ResourceBundleIdentifier<AssetBackedLLMBundle>, a2);
}

void *static _LoadedModelConfiguration.create(modelBundleIdentifier:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<LLMBundle>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ResourceBundleIdentifier<>.serverConfiguration()();
  if (!v37)
  {
    outlined destroy of SingleValueDecodingContainer?((uint64_t)&v36, &demangling cache variable for type metadata for AssetBackedServerConfiguration?);
    if (one-time initialization token for configuration != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.configuration);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      v39[0] = v42;
      *(_DWORD *)uint64_t v20 = 136446210;
      v35[1] = v20 + 4;
      uint64_t v21 = MEMORY[0x261202230](v5);
      *(void *)&long long v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      _os_log_impl(&dword_25F950000, v18, v19, "Could not find a corresponding server configuration for LLM bundle ID: %{public}s", v20, 0xCu);
      uint64_t v23 = v42;
      swift_arrayDestroy();
      MEMORY[0x2612040B0](v23, -1, -1);
      MEMORY[0x2612040B0](v20, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    return 0;
  }
  outlined init with take of _HasContiguousBytes(&v36, (uint64_t)v39);
  type metadata accessor for CatalogClient();
  swift_allocObject();
  CatalogClient.init()();
  uint64_t v9 = v40;
  uint64_t v10 = v41;
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(v39, v40);
  uint64_t v37 = v9;
  uint64_t v38 = *(void *)(v10 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, v11, v9);
  specialized CatalogClient.metadataWithAssetInformation(from:)(&v36);
  if (!v2)
  {
    uint64_t v24 = v13;
    unint64_t v25 = v14;
    uint64_t v26 = v15;
    uint64_t v27 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    if (v27)
    {
      uint64_t v42 = v26;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      lazy protocol witness table accessor for type _LoadedModelConfiguration and conformance _LoadedModelConfiguration(&lazy protocol witness table cache variable for type _LoadedModelConfiguration and conformance _LoadedModelConfiguration, v28, (void (*)(uint64_t))type metadata accessor for _LoadedModelConfiguration);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      uint64_t v3 = (void *)v36;
      uint64_t v30 = MEMORY[0x261202230](v5);
      uint64_t v32 = v31;
      swift_beginAccess();
      uint64_t v33 = v3[3];
      uint64_t v34 = v3[4];
      v3[3] = v30;
      v3[4] = v32;
      v3[5] = v42;
      v3[6] = v27;
      outlined consume of _LoadedModelConfiguration.AssetInformation?(v33, v34);
      outlined consume of Data._Representation(v24, v25);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      return v3;
    }
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    return 0;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return v3;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  uint64_t v20;
  void v21[4];
  unsigned char v22[40];

  uint64_t v3 = v1;
  static _LoadedModelConfiguration.assetBackedResource(for:)(a1, (uint64_t)v22);
  if (!v2)
  {
    outlined init with copy of Locale?((uint64_t)v22, (uint64_t)&v19, &demangling cache variable for type metadata for AssetBackedResource?);
    if (v20)
    {
      outlined init with take of _HasContiguousBytes(&v19, (uint64_t)v21);
      type metadata accessor for CatalogClient();
      swift_allocObject();
      CatalogClient.init()();
      specialized CatalogClient.metadataWithAssetInformation(from:)(v21);
      uint64_t v9 = v7;
      if (v7)
      {
        uint64_t v10 = v4;
        uint64_t v11 = v5;
        uint64_t v12 = v6;
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        lazy protocol witness table accessor for type _LoadedModelConfiguration and conformance _LoadedModelConfiguration(&lazy protocol witness table cache variable for type _LoadedModelConfiguration and conformance _LoadedModelConfiguration, v13, (void (*)(uint64_t))type metadata accessor for _LoadedModelConfiguration);
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        swift_release();
        uint64_t v3 = (void *)v19;
        __swift_project_boxed_opaque_existential_1(v21, v21[3]);
        unint64_t v14 = dispatch thunk of CatalogResource.id.getter();
        uint64_t v16 = v15;
        swift_beginAccess();
        uint64_t v17 = v3[3];
        uint64_t v18 = v3[4];
        v3[3] = v14;
        v3[4] = v16;
        v3[5] = v12;
        v3[6] = v9;
        outlined consume of _LoadedModelConfiguration.AssetInformation?(v17, v18);
        outlined consume of Data._Representation(v10, v11);
        swift_release();
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v22, &demangling cache variable for type metadata for AssetBackedResource?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        return v3;
      }
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v22, &demangling cache variable for type metadata for AssetBackedResource?);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    }
    else
    {
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v22, &demangling cache variable for type metadata for AssetBackedResource?);
      outlined destroy of SingleValueDecodingContainer?((uint64_t)&v19, &demangling cache variable for type metadata for AssetBackedResource?);
    }
    return 0;
  }
  return v3;
}

uint64_t ModelConfiguration.init(modelbundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for _LoadedModelConfiguration();
  uint64_t v9 = a2(a1);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  if (!v4) {
    *a4 = v9;
  }
  return result;
}

TokenGenerationCore::ModelConfigurationPromptTemplate_optional __swiftcall ModelConfiguration.promptTemplate(for:)(TokenGenerationCore::ModelConfigurationPromptTemplate_optional result)
{
  uint64_t v3 = v1;
  if (!*(void *)v2) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (!v4 || !*(void *)(v4 + 16)) {
    goto LABEL_9;
  }
  unint64_t object = result.value.rawTemplateString._object;
  uint64_t countAndFlagsBits = result.value.rawTemplateString._countAndFlagsBits;
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v8 & 1) == 0)
  {
    result.value.rawTemplateString._uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
LABEL_9:
    *uint64_t v3 = 0;
    v3[1] = 0;
    return result;
  }
  uint64_t v9 = (void *)(*(void *)(v4 + 56) + 16 * v7);
  uint64_t v10 = v9[1];
  *uint64_t v3 = *v9;
  v3[1] = v10;
  swift_bridgeObjectRetain();
  result.value.rawTemplateString._uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
  return result;
}

uint64_t ModelConfigurationPromptTemplate.rawTemplateString.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _LoadedModelConfiguration.AssetInformation.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _LoadedModelConfiguration.AssetInformation.version.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _LoadedModelConfiguration.promptTemplates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for _LoadedModelConfiguration.assetInformation : _LoadedModelConfiguration@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (void *)*a1;
  swift_beginAccess();
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  uint64_t v6 = v3[5];
  uint64_t v7 = v3[6];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return outlined copy of _LoadedModelConfiguration.AssetInformation?(v4, v5);
}

uint64_t key path setter for _LoadedModelConfiguration.assetInformation : _LoadedModelConfiguration(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = (void *)*a2;
  swift_beginAccess();
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  v6[3] = v2;
  v6[4] = v3;
  v6[5] = v4;
  v6[6] = v5;
  outlined copy of _LoadedModelConfiguration.AssetInformation?(v2, v3);
  return outlined consume of _LoadedModelConfiguration.AssetInformation?(v7, v8);
}

uint64_t _LoadedModelConfiguration.assetInformation.getter@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return outlined copy of _LoadedModelConfiguration.AssetInformation?(v3, v4);
}

uint64_t _LoadedModelConfiguration.assetInformation.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  long long v7 = *(_OWORD *)(a1 + 1);
  uint64_t v3 = a1[3];
  swift_beginAccess();
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  v1[3] = v2;
  *((_OWORD *)v1 + 2) = v7;
  v1[6] = v3;
  return outlined consume of _LoadedModelConfiguration.AssetInformation?(v4, v5);
}

uint64_t (*_LoadedModelConfiguration.assetInformation.modify())()
{
  return _LoadedModelConfiguration.assetInformation.modify;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _LoadedModelConfiguration.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _LoadedModelConfiguration.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _LoadedModelConfiguration.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance _LoadedModelConfiguration.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance _LoadedModelConfiguration.CodingKeys, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance _LoadedModelConfiguration.CodingKeys(void *a1@<X8>)
{
  *a1 = 0x655474706D6F7270;
  a1[1] = 0xEF736574616C706DLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _LoadedModelConfiguration.CodingKeys()
{
  return 0x655474706D6F7270;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _LoadedModelConfiguration.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance _LoadedModelConfiguration.CodingKeys, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _LoadedModelConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LoadedModelConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t _LoadedModelConfiguration.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  _LoadedModelConfiguration.init(from:)(a1);
  return v2;
}

uint64_t _LoadedModelConfiguration.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<_LoadedModelConfiguration.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  uint64_t v9 = a1[3];
  uint64_t v18 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v10 = (uint64_t)v18;
    outlined consume of _LoadedModelConfiguration.AssetInformation?(*(void *)(v3 + 24), *(void *)(v3 + 32));
    type metadata accessor for _LoadedModelConfiguration();
    swift_deallocPartialClassInstance();
    uint64_t v11 = v10;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (v17)
    {
      uint64_t v13 = specialized _NativeDictionary.mapValues<A>(_:)(v17);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)(v3 + 16) = v13;
    swift_beginAccess();
    uint64_t v14 = *(void *)(v3 + 24);
    uint64_t v15 = *(void *)(v3 + 32);
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    outlined consume of _LoadedModelConfiguration.AssetInformation?(v14, v15);
    uint64_t v11 = (uint64_t)v18;
  }
  __swift_destroy_boxed_opaque_existential_1(v11);
  return v3;
}

uint64_t static _LoadedModelConfiguration.assetBackedResource(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<AssetBackedLLMBundle>);
  char v56 = *(uint8_t **)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v57 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetBackedLLMBundle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AssetBackedLLMBundle();
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v49 - v12;
  type metadata accessor for CatalogClient();
  swift_allocObject();
  uint64_t v14 = CatalogClient.init()();
  MEMORY[0x261202230](v3);
  uint64_t v15 = v65;
  dispatch thunk of CatalogClient.resourceBundle(for:)();
  uint64_t v65 = v15;
  if (v15)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v50 = v11;
  uint64_t v52 = a1;
  uint64_t v17 = v56;
  uint64_t v51 = v13;
  uint64_t v53 = v14;
  swift_bridgeObjectRelease();
  outlined init with copy of Locale?((uint64_t)v64, (uint64_t)v62, &demangling cache variable for type metadata for ResourceBundle?);
  uint64_t v18 = v55;
  os_log_type_t v19 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
  if (!v63)
  {
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v62, &demangling cache variable for type metadata for ResourceBundle?);
    uint64_t v20 = (uint64_t)v7;
    (*v19)(v7, 1, 1, v8);
    uint64_t v24 = v17;
    uint64_t v25 = v52;
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundle);
  uint64_t v20 = (uint64_t)v7;
  uint64_t v21 = (char *)v8;
  int v22 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v7, v22 ^ 1u, 1, v8);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v8);
  uint64_t v24 = v17;
  uint64_t v25 = v52;
  if (v23 == 1)
  {
LABEL_8:
    outlined destroy of SingleValueDecodingContainer?(v20, &demangling cache variable for type metadata for AssetBackedLLMBundle?);
    if (one-time initialization token for configuration != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.configuration);
    uint64_t v31 = v57;
    (*((void (**)(char *, uint64_t, uint64_t))v24 + 2))(v57, v25, v3);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v62[0] = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      uint64_t v36 = MEMORY[0x261202230](v3);
      *(void *)&long long v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v24 + 1))(v57, v3);
      _os_log_impl(&dword_25F950000, v32, v33, "Could not find a corresponding model bundle LLM bundle ID: %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2612040B0](v35, -1, -1);
      MEMORY[0x2612040B0](v34, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
      (*((void (**)(char *, uint64_t))v24 + 1))(v31, v3);
    }
    goto LABEL_13;
  }
  uint64_t v26 = v51;
  (*(void (**)(char *, uint64_t, char *))(v18 + 32))(v51, v20, v21);
  AssetBackedLLMBundle.adapter.getter();
  uint64_t v27 = v63;
  if (v63)
  {
    __swift_project_boxed_opaque_existential_1(v62, v63);
    uint64_t v27 = dispatch thunk of CatalogResource.id.getter();
    unint64_t v29 = v28;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  }
  else
  {
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v62, &demangling cache variable for type metadata for AssetBackedLLMAdapter?);
    unint64_t v29 = 0;
  }
  uint64_t v39 = v50;
  (*(void (**)(char *, char *, char *))(v18 + 16))(v50, v26, v21);
  if (v29)
  {
    uint64_t v40 = *(void (**)(char *, char *))(v18 + 8);
    v40(v39, v21);
  }
  else
  {
    AssetBackedLLMBundle.baseModel.getter();
    __swift_project_boxed_opaque_existential_1(v62, v63);
    uint64_t v27 = dispatch thunk of CatalogResource.id.getter();
    unint64_t v29 = v41;
    uint64_t v40 = *(void (**)(char *, char *))(v18 + 8);
    v40(v39, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  }
  uint64_t v42 = v65;
  dispatch thunk of CatalogClient.resource(for:)();
  uint64_t v65 = v42;
  if (v42)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v40(v26, v21);
    return outlined destroy of SingleValueDecodingContainer?((uint64_t)v64, &demangling cache variable for type metadata for ResourceBundle?);
  }
  outlined init with copy of Locale?((uint64_t)v62, (uint64_t)v58, &demangling cache variable for type metadata for CatalogResource?);
  if (!v58[3])
  {
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v58, &demangling cache variable for type metadata for CatalogResource?);
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v61 = 0;
    goto LABEL_26;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetBackedResource);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v61 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    goto LABEL_26;
  }
  if (!*((void *)&v60 + 1))
  {
LABEL_26:
    outlined destroy of SingleValueDecodingContainer?((uint64_t)&v59, &demangling cache variable for type metadata for AssetBackedResource?);
    if (one-time initialization token for configuration != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Log.configuration);
    swift_bridgeObjectRetain();
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      uint64_t v57 = v21;
      uint64_t v48 = v47;
      *(void *)&long long v59 = v47;
      *(_DWORD *)uint64_t v46 = 136446210;
      char v56 = v46 + 4;
      swift_bridgeObjectRetain();
      v58[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25F950000, v44, v45, "Model catalog asset: %{public}s is not an asset backed resource", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2612040B0](v48, -1, -1);
      MEMORY[0x2612040B0](v46, -1, -1);

      swift_release();
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v62, &demangling cache variable for type metadata for CatalogResource?);
      v40(v51, v57);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_release();
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v62, &demangling cache variable for type metadata for CatalogResource?);
      v40(v51, v21);
    }
LABEL_13:
    uint64_t result = outlined destroy of SingleValueDecodingContainer?((uint64_t)v64, &demangling cache variable for type metadata for ResourceBundle?);
    uint64_t v38 = (_OWORD *)v54;
    *(void *)(v54 + 32) = 0;
    *uint64_t v38 = 0u;
    v38[1] = 0u;
    return result;
  }
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of SingleValueDecodingContainer?((uint64_t)v62, &demangling cache variable for type metadata for CatalogResource?);
  v40(v26, v21);
  outlined destroy of SingleValueDecodingContainer?((uint64_t)v64, &demangling cache variable for type metadata for ResourceBundle?);
  return outlined init with take of _HasContiguousBytes(&v59, v54);
}

uint64_t static _LoadedModelConfiguration.expectedRequestedAsset(modelBundleIdentifier:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<LLMBundle>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ResourceBundleIdentifier<>.serverConfiguration()();
  if (v23)
  {
    outlined init with take of _HasContiguousBytes(&v22, (uint64_t)v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AssetBackedResource>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_25FA352B0;
    uint64_t v9 = v25;
    uint64_t v8 = v26;
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(v24, v25);
    *(void *)(v7 + 56) = v9;
    *(void *)(v7 + 64) = *(void *)(v8 + 8);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 32));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, v10, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    outlined destroy of SingleValueDecodingContainer?((uint64_t)&v22, &demangling cache variable for type metadata for AssetBackedServerConfiguration?);
    if (one-time initialization token for configuration != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.configuration);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v27 = v1;
      uint64_t v16 = (uint8_t *)v15;
      uint64_t v17 = swift_slowAlloc();
      v24[0] = v17;
      *(_DWORD *)uint64_t v16 = 136446210;
      v21[1] = v16 + 4;
      uint64_t v18 = MEMORY[0x261202230](v3);
      *(void *)&long long v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      _os_log_impl(&dword_25F950000, v13, v14, "Could not find a corresponding server configuration for LLM bundle ID: %{public}s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2612040B0](v17, -1, -1);
      MEMORY[0x2612040B0](v16, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }

    return MEMORY[0x263F8EE78];
  }
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  long long v4;
  uint64_t v5;
  long long v6[2];
  unsigned char v7[40];

  static _LoadedModelConfiguration.assetBackedResource(for:)(a1, (uint64_t)v7);
  if (!v2)
  {
    outlined init with copy of Locale?((uint64_t)v7, (uint64_t)&v4, &demangling cache variable for type metadata for AssetBackedResource?);
    if (v5)
    {
      outlined init with take of _HasContiguousBytes(&v4, (uint64_t)v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AssetBackedResource>);
      uint64_t v1 = swift_allocObject();
      *(_OWORD *)(v1 + 16) = xmmword_25FA352B0;
      outlined init with take of _HasContiguousBytes(v6, v1 + 32);
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v7, &demangling cache variable for type metadata for AssetBackedResource?);
    }
    else
    {
      outlined destroy of SingleValueDecodingContainer?((uint64_t)&v4, &demangling cache variable for type metadata for AssetBackedResource?);
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v7, &demangling cache variable for type metadata for AssetBackedResource?);
      return MEMORY[0x263F8EE78];
    }
  }
  return v1;
}

uint64_t _LoadedModelConfiguration.deinit()
{
  swift_bridgeObjectRelease();
  outlined consume of _LoadedModelConfiguration.AssetInformation?(*(void *)(v0 + 24), *(void *)(v0 + 32));
  return v0;
}

uint64_t _LoadedModelConfiguration.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined consume of _LoadedModelConfiguration.AssetInformation?(*(void *)(v0 + 24), *(void *)(v0 + 32));
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t protocol witness for Decodable.init(from:) in conformance _LoadedModelConfiguration@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 120))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t closure #1 in CatalogClient.metadataWithAssetInformation(from:)@<X0>(uint64_t *a1@<X8>)
{
  long long v22 = a1;
  uint64_t v24 = type metadata accessor for AssetVersion();
  uint64_t v1 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CachedAsset.Contents();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  CachedAsset.contents.getter();
  CachedAsset.Contents.metadataURL.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  CachedAsset.version.getter();
  uint64_t v11 = AssetVersion.number.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v24);
  uint64_t v14 = v25;
  uint64_t v15 = Data.init(contentsOf:options:)();
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = v15;
    uint64_t v19 = v16;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v23);
    uint64_t v20 = v22;
    *long long v22 = v18;
    v20[1] = v19;
    void v20[2] = v11;
    v20[3] = v13;
  }
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ModelConfigurationPromptTemplate>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  unint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = result + 64;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = 16 * i;
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t result = v17[1];
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 56) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    long long v22 = (void *)(v3[6] + 16 * i);
    *long long v22 = v18;
    v22[1] = result;
    uint64_t v23 = (void *)(v3[7] + v16);
    *uint64_t v23 = v20;
    v23[1] = v21;
    uint64_t v24 = v3[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v26;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  void *v25;
  void *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  unint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v34 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  unint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  int64_t v9 = -1;
  if (v8 < 64) {
    int64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & v5;
  uint64_t v31 = v6;
  uint64_t v32 = (unint64_t)(v8 + 63) >> 6;
  os_log_type_t v33 = result + 64;
  uint64_t v30 = (void *)result;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v34 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void *)(*(void *)(v34 + 56) + 8 * i);
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v21 = (void **)(v19 + 40);
      do
      {
        long long v22 = (uint64_t)*(v21 - 1);
        uint64_t v23 = *v21;
        swift_bridgeObjectRetain();
        v24._uint64_t countAndFlagsBits = v22;
        v24._unint64_t object = v23;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v21 += 3;
        --v20;
      }
      while (v20);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v3 = v30;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRetain();
    }
    *(void *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    BOOL v25 = (void *)(v3[6] + 16 * i);
    *BOOL v25 = v18;
    v25[1] = v17;
    uint64_t v26 = (void *)(v3[7] + 16 * i);
    *uint64_t v26 = 0;
    v26[1] = 0xE000000000000000;
    uint64_t v27 = v3[2];
    unint64_t v28 = __OFADD__(v27, 1);
    unint64_t v29 = v27 + 1;
    if (v28)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v3[2] = v29;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_29;
    }
    if (v13 >= v32) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v32) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v31 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v32) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v10 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v32) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v32) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t result;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PromptTemplateInfo.RichVariableBinding>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  unint64_t v3 = (void *)result;
  int64_t v4 = 0;
  unint64_t v29 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  unint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  int64_t v9 = -1;
  if (v8 < 64) {
    int64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & v5;
  uint64_t v26 = v6;
  uint64_t v27 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v28 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v29 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = (uint64_t *)(*(void *)(v29 + 56) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptTemplateInfo.RichVariableBinding.Component>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_25FA352B0;
    *(void *)(result + 32) = v20;
    *(void *)(result + 40) = v21;
    *(unsigned char *)(result + 48) = 0;
    *(void *)(v28 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    long long v22 = (void *)(v3[6] + 16 * i);
    *long long v22 = v17;
    v22[1] = v18;
    *(void *)(v3[7] + 8 * i) = result;
    uint64_t v23 = v3[2];
    uint64_t v24 = __OFADD__(v23, 1);
    BOOL v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v25;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v27) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v27) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v27) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v10 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v27) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v26 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v27) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  void *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  long long v27[2];
  uint64_t v28;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PromptComponentValueConvertible>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v4 = (void *)result;
  uint64_t v5 = 0;
  uint64_t v26 = a1;
  unint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  int64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v6;
  uint64_t v24 = v7;
  BOOL v25 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = result + 64;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  int64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(v26 + 48) + 16 * i);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v28 = *(void *)(*(void *)(v26 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in ModelConfigurationPromptTemplate.render(richVariableBindings:locale:)(&v28, (uint64_t *)v27);
    swift_bridgeObjectRelease();
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v4;
    }
    *(void *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v21 = (void *)(v4[6] + 16 * i);
    *uint64_t v21 = v19;
    v21[1] = v20;
    uint64_t result = outlined init with take of _HasContiguousBytes(v27, v4[7] + 40 * i);
    long long v22 = v4[2];
    int64_t v15 = __OFADD__(v22, 1);
    uint64_t v23 = v22 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v23;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = __OFADD__(v5++, 1);
    if (v15) {
      goto LABEL_27;
    }
    if (v5 >= v25) {
      return (uint64_t)v4;
    }
    uint64_t v16 = *(void *)(v24 + 8 * v5);
    if (!v16) {
      break;
    }
LABEL_15:
    unint64_t v11 = (v16 - 1) & v16;
  }
  uint64_t v17 = v5 + 1;
  if (v5 + 1 >= v25) {
    return (uint64_t)v4;
  }
  uint64_t v16 = *(void *)(v24 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  uint64_t v17 = v5 + 2;
  if (v5 + 2 >= v25) {
    return (uint64_t)v4;
  }
  uint64_t v16 = *(void *)(v24 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  uint64_t v17 = v5 + 3;
  if (v5 + 3 >= v25) {
    return (uint64_t)v4;
  }
  uint64_t v16 = *(void *)(v24 + 8 * v17);
  if (v16)
  {
LABEL_14:
    uint64_t v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v25) {
      return (uint64_t)v4;
    }
    uint64_t v16 = *(void *)(v24 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v38 = type metadata accessor for CharacterSet();
  uint64_t v2 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  unint64_t v37 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CharacterSet, BitSet>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = 0;
  uint64_t v39 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v30 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v8 = -1;
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  int64_t v9 = v8 & v6;
  uint64_t v31 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v32 = result;
  uint64_t v34 = result + 64;
  uint64_t v35 = v2 + 16;
  uint64_t v36 = v2;
  uint64_t v10 = v2 + 32;
  unint64_t v11 = result;
  os_log_type_t v33 = v10;
  int64_t v13 = v36;
  uint64_t v12 = v37;
  unint64_t v14 = v38;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  int64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  uint64_t v16 = v5;
  for (unint64_t i = v15 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
  {
    long long v22 = *(void *)(v13 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v12, *(void *)(v39 + 48) + v22, v14);
    uint64_t v23 = 8 * i;
    uint64_t v24 = swift_bridgeObjectRetain();
    BOOL v25 = specialized BitSet.init<A>(_:)(v24);
    *(void *)(v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    unint64_t v11 = v32;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(void *)(v32 + 48) + v22, v12, v14);
    *(void *)(*(void *)(v11 + 56) + v23) = v25;
    uint64_t v26 = *(void *)(v11 + 16);
    uint64_t v27 = __OFADD__(v26, 1);
    unint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(void *)(v11 + 16) = v28;
    uint64_t v5 = v16;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v18 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_24;
    }
    if (v18 >= v31) {
      return v11;
    }
    uint64_t v19 = *(void *)(v30 + 8 * v18);
    uint64_t v20 = v5 + 1;
    if (!v19)
    {
      uint64_t v20 = v5 + 2;
      if (v5 + 2 >= v31) {
        return v11;
      }
      uint64_t v19 = *(void *)(v30 + 8 * v20);
      if (!v19)
      {
        uint64_t v20 = v5 + 3;
        if (v5 + 3 >= v31) {
          return v11;
        }
        uint64_t v19 = *(void *)(v30 + 8 * v20);
        if (!v19) {
          break;
        }
      }
    }
LABEL_18:
    int64_t v9 = (v19 - 1) & v19;
    uint64_t v16 = v20;
  }
  uint64_t v21 = v5 + 4;
  if (v5 + 4 >= v31) {
    return v11;
  }
  uint64_t v19 = *(void *)(v30 + 8 * v21);
  if (v19)
  {
    uint64_t v20 = v5 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v20 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v20 >= v31) {
      return v11;
    }
    uint64_t v19 = *(void *)(v30 + 8 * v20);
    ++v21;
    if (v19) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void specialized CatalogClient.metadataWithAssetInformation(from:)(void *a1)
{
  uint64_t v3 = type metadata accessor for CatalogErrors.AssetErrors();
  uint64_t v8 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for AssetCacheConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModelCache();
  static ModelCache.shared.getter();
  type metadata accessor for AssetCache();
  AssetCacheConfiguration.init()();
  lazy protocol witness table accessor for type _LoadedModelConfiguration and conformance _LoadedModelConfiguration(&lazy protocol witness table cache variable for type AssetCache and conformance AssetCache, 255, MEMORY[0x263F41508]);
  ModelCache.getModel<A>(modelType:modelConfiguration:prewarm:keepAlive:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (!v1)
  {
    swift_release();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (metadata: Data, version: String)?);
    AssetCache.withAsset<A, B>(_:assetLockGenerator:_:)();
  }
  swift_release();
}

uint64_t outlined consume of _LoadedModelConfiguration.AssetInformation?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of _LoadedModelConfiguration.AssetInformation?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ModelConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for ModelConfiguration()
{
  return swift_release();
}

void *assignWithCopy for ModelConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  void *result = *a2;
  return result;
}

void *assignWithTake for ModelConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelConfiguration(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelConfiguration()
{
  return &type metadata for ModelConfiguration;
}

ValueMetadata *type metadata accessor for ModelConfigurationPromptTemplate()
{
  return &type metadata for ModelConfigurationPromptTemplate;
}

uint64_t method lookup function for _LoadedModelConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _LoadedModelConfiguration);
}

uint64_t dispatch thunk of _LoadedModelConfiguration.assetInformation.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of _LoadedModelConfiguration.assetInformation.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of _LoadedModelConfiguration.assetInformation.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of _LoadedModelConfiguration.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for _LoadedModelConfiguration.AssetInformation()
{
  return &type metadata for _LoadedModelConfiguration.AssetInformation;
}

uint64_t dispatch thunk of ModelConfigurationProtocol.promptTemplate(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

unsigned char *storeEnumTagSinglePayload for _LoadedModelConfiguration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25F9B794CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _LoadedModelConfiguration.CodingKeys()
{
  return &type metadata for _LoadedModelConfiguration.CodingKeys;
}

uint64_t lazy protocol witness table accessor for type _LoadedModelConfiguration and conformance _LoadedModelConfiguration(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Overridable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + 40) == 1) {
    return (*(uint64_t (**)(void))(v2 + 24))(*(void *)v2);
  }
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
  return v4(a2, 1, 1);
}

void Overridable<A>.init(key:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  id v7 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v9 = objc_msgSend(v7, sel_initWithSuiteName_, v8);

  if (v9)
  {
    id v10 = (id)MobileGestalt_get_current_device();
    if (v10)
    {
      unint64_t v11 = v10;
      char internalBuild = MobileGestalt_get_internalBuild();

      *(void *)a3 = v9;
      *(void *)(a3 + 8) = a1;
      *(void *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = partial apply for closure #1 in Overridable<A>.init(key:);
      *(void *)(a3 + 32) = v6;
      *(unsigned char *)(a3 + 40) = internalBuild;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

{
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  char internalBuild;

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  id v7 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v9 = objc_msgSend(v7, sel_initWithSuiteName_, v8);

  if (v9)
  {
    id v10 = (id)MobileGestalt_get_current_device();
    if (v10)
    {
      unint64_t v11 = v10;
      char internalBuild = MobileGestalt_get_internalBuild();

      *(void *)a3 = v9;
      *(void *)(a3 + 8) = a1;
      *(void *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = partial apply for closure #1 in Overridable<A>.init(key:);
      *(void *)(a3 + 32) = v6;
      *(unsigned char *)(a3 + 40) = internalBuild;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

{
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  char internalBuild;

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  id v7 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v9 = objc_msgSend(v7, sel_initWithSuiteName_, v8);

  if (v9)
  {
    id v10 = (id)MobileGestalt_get_current_device();
    if (v10)
    {
      unint64_t v11 = v10;
      char internalBuild = MobileGestalt_get_internalBuild();

      *(void *)a3 = v9;
      *(void *)(a3 + 8) = a1;
      *(void *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = partial apply for closure #1 in Overridable<A>.init(key:);
      *(void *)(a3 + 32) = v6;
      *(unsigned char *)(a3 + 40) = internalBuild;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

{
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  char internalBuild;

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  id v7 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v9 = objc_msgSend(v7, sel_initWithSuiteName_, v8);

  if (v9)
  {
    id v10 = (id)MobileGestalt_get_current_device();
    if (v10)
    {
      unint64_t v11 = v10;
      char internalBuild = MobileGestalt_get_internalBuild();

      *(void *)a3 = v9;
      *(void *)(a3 + 8) = a1;
      *(void *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = partial apply for closure #1 in Overridable<A>.init(key:);
      *(void *)(a3 + 32) = v6;
      *(unsigned char *)(a3 + 40) = internalBuild;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

{
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  char internalBuild;

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  id v7 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)MEMORY[0x261202880](0xD000000000000019, 0x800000025FA3DE10);
  id v9 = objc_msgSend(v7, sel_initWithSuiteName_, v8);

  if (v9)
  {
    id v10 = (id)MobileGestalt_get_current_device();
    if (v10)
    {
      unint64_t v11 = v10;
      char internalBuild = MobileGestalt_get_internalBuild();

      *(void *)a3 = v9;
      *(void *)(a3 + 8) = a1;
      *(void *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = partial apply for closure #1 in Overridable<A>.init(key:);
      *(void *)(a3 + 32) = v6;
      *(unsigned char *)(a3 + 40) = internalBuild;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v6 = (void *)MEMORY[0x261202880](a2, a3);
  id v7 = objc_msgSend(a1, sel_valueForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    uint64_t result = outlined destroy of Any?((uint64_t)v10);
    goto LABEL_8;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
LABEL_8:
  }
    *a4 = 2;
  return result;
}

uint64_t closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (void *)MEMORY[0x261202880](a2, a3);
  id v7 = objc_msgSend(a1, sel_URLForKey_, v6);

  if (v7)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = type metadata accessor for URL();
    id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    uint64_t v10 = v8;
    uint64_t v11 = a4;
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v13 = type metadata accessor for URL();
    id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v10 = v13;
    uint64_t v11 = a4;
    uint64_t v12 = 1;
  }
  return v9(v11, v12, 1, v10);
}

{
  void *v6;
  id v7;
  uint64_t result;
  char v9;
  _OWORD v10[2];
  unsigned char v11[24];
  uint64_t v12;

  uint64_t v6 = (void *)MEMORY[0x261202880](a2, a3);
  id v7 = objc_msgSend(a1, sel_valueForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    uint64_t result = swift_dynamicCast();
    if ((result & 1) == 0) {
      *(void *)a4 = 0;
    }
    id v9 = result ^ 1;
  }
  else
  {
    uint64_t result = outlined destroy of Any?((uint64_t)v11);
    *(void *)a4 = 0;
    id v9 = 1;
  }
  *(unsigned char *)(a4 + 8) = v9;
  return result;
}

{
  void *v6;
  id v7;
  uint64_t result;
  char v9;
  _OWORD v10[2];
  unsigned char v11[24];
  uint64_t v12;

  uint64_t v6 = (void *)MEMORY[0x261202880](a2, a3);
  id v7 = objc_msgSend(a1, sel_valueForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    uint64_t result = swift_dynamicCast();
    if ((result & 1) == 0) {
      *(_DWORD *)a4 = 0;
    }
    id v9 = result ^ 1;
  }
  else
  {
    uint64_t result = outlined destroy of Any?((uint64_t)v11);
    *(_DWORD *)a4 = 0;
    id v9 = 1;
  }
  *(unsigned char *)(a4 + 4) = v9;
  return result;
}

void closure #1 in Overridable<A>.init(key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = (void *)MEMORY[0x261202880](a2, a3);
  id v7 = objc_msgSend(a1, sel_stringForKey_, v6);

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  *a4 = v8;
  a4[1] = v10;
}

uint64_t sub_25F9B8294()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in Overridable<A>.init(key:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  closure #1 in Overridable<A>.init(key:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t type metadata accessor for Overridable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *Prompt.renderPromptModules(tokenTable:localizationOverrideMap:)(uint64_t a1, uint64_t a2)
{
  uint64_t v87 = a2;
  uint64_t v80 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.RenderedPromptFragment?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v79 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Prompt.RenderedPromptFragment(0);
  uint64_t v85 = *(void *)(v88 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v88);
  uint64_t v90 = (unint64_t *)((char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v82 = (uint64_t)&v72 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v83 = (uint64_t)&v72 - v10;
  uint64_t v11 = type metadata accessor for Prompt.Delimiter(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for Prompt.PromptFragment(0);
  Swift::Int v95 = *(void **)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (uint64_t *)((char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *v2;
  uint64_t v18 = v2[1];
  uint64_t v19 = v2[2];
  uint64_t v20 = v2[3];
  uint64_t v91 = *v2;
  uint64_t v92 = v18;
  uint64_t v93 = v19;
  uint64_t v94 = v20;
  unint64_t v21 = Prompt.promptFragments()();
  if (!v3)
  {
    uint64_t v75 = v20;
    uint64_t v76 = v19;
    uint64_t v77 = v18;
    uint64_t v78 = v17;
    uint64_t v84 = v14;
    uint64_t v86 = v13;
    uint64_t v23 = *(void *)(v21 + 16);
    if (v23)
    {
      uint64_t v81 = 0;
      unint64_t v24 = (*((unsigned __int8 *)v95 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v95 + 80);
      unint64_t v72 = v21;
      uint64_t v25 = v21 + v24;
      uint64_t v74 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56);
      char v73 = (uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v85 + 48);
      uint64_t v89 = v95[9];
      unint64_t v26 = MEMORY[0x263F8EE78];
      Swift::Int v95 = (void *)MEMORY[0x263F8EE78];
      uint64_t v27 = v87;
      unint64_t v28 = v86;
      while (1)
      {
        outlined init with copy of Prompt.PromptFragment(v25, (uint64_t)v16, type metadata accessor for Prompt.PromptFragment);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          uint64_t v46 = *v16;
          uint64_t v47 = v16[1];
          uint64_t v48 = v90;
          uint64_t v49 = (char *)v90 + *(int *)(v88 + 20);
          uint64_t v50 = type metadata accessor for Prompt.SpecialToken(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 1, 1, v50);
          *uint64_t v48 = v46;
          v48[1] = v47;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1, v26);
          }
          unint64_t v52 = *(void *)(v26 + 16);
          unint64_t v51 = *(void *)(v26 + 24);
          uint64_t v27 = v87;
          uint64_t v53 = v85;
          if (v52 >= v51 >> 1)
          {
            uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, v26);
            uint64_t v53 = v85;
            unint64_t v26 = v64;
          }
          *(void *)(v26 + 16) = v52 + 1;
          outlined init with take of Prompt.RenderedPromptFragment((uint64_t)v90, v26+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v52, type metadata accessor for Prompt.RenderedPromptFragment);
          goto LABEL_5;
        }
        outlined init with take of Prompt.RenderedPromptFragment((uint64_t)v16, (uint64_t)v28, type metadata accessor for Prompt.Delimiter);
        uint64_t v30 = *v28;
        uint64_t v29 = v28[1];
        uint64_t v31 = one-time initialization token for promptModule;
        swift_bridgeObjectRetain();
        if (v31 != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Prompt.SpecialToken(0);
        os_log_type_t v33 = (void *)__swift_project_value_buffer(v32, (uint64_t)static Prompt.SpecialToken.promptModule);
        if (v30 == *v33 && v29 == v33[1])
        {
          swift_bridgeObjectRelease();
LABEL_23:
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            unint64_t v28 = v86;
            uint64_t v54 = v95;
          }
          else
          {
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v95[2] + 1, 1, v95);
            unint64_t v28 = v86;
          }
          unint64_t v56 = v54[2];
          unint64_t v55 = v54[3];
          if (v56 >= v55 >> 1) {
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v54);
          }
          v54[2] = v56 + 1;
          Swift::Int v95 = v54;
          uint64_t v57 = &v54[2 * v56];
          v57[4] = v26;
          *((unsigned char *)v57 + 40) = 0;
          _s15TokenGeneration6PromptV9DelimiterVWOhTm_1((uint64_t)v28, type metadata accessor for Prompt.Delimiter);
          unint64_t v26 = MEMORY[0x263F8EE78];
          goto LABEL_5;
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v35) {
          goto LABEL_23;
        }
        uint64_t v91 = v78;
        uint64_t v92 = v77;
        uint64_t v93 = v76;
        uint64_t v94 = v75;
        uint64_t v36 = v81;
        uint64_t v37 = Prompt.renderDelimiter(delimiter:tokenTable:localizationOverrideMap:)(v86, v80, v27);
        uint64_t v81 = v36;
        if (v36)
        {
          _s15TokenGeneration6PromptV9DelimiterVWOhTm_1((uint64_t)v86, type metadata accessor for Prompt.Delimiter);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v22;
        }
        uint64_t v39 = v37;
        uint64_t v40 = v38;
        if (String.count.getter() > 0) {
          break;
        }
        unint64_t v44 = (uint64_t *)v79;
        uint64_t v58 = v88;
        (*v74)(v79, 1, 1, v88);
        swift_bridgeObjectRelease();
        int v59 = (*v73)(v44, 1, v58);
        uint64_t v45 = v83;
        if (v59 != 1) {
          goto LABEL_29;
        }
        unint64_t v28 = v86;
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_1((uint64_t)v86, type metadata accessor for Prompt.Delimiter);
        outlined destroy of Prompt.RenderedPromptFragment?((uint64_t)v44);
        uint64_t v27 = v87;
LABEL_5:
        v25 += v89;
        if (!--v23)
        {
          swift_bridgeObjectRelease();
          uint64_t v66 = v95;
          goto LABEL_37;
        }
      }
      unint64_t v41 = (uint64_t *)v79;
      uint64_t v42 = (uint64_t)&v79[*(int *)(v88 + 20)];
      outlined init with copy of Prompt.PromptFragment((uint64_t)v86, v42, type metadata accessor for Prompt.SpecialToken);
      uint64_t v43 = v42;
      unint64_t v44 = v41;
      uint64_t v45 = v83;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v43, 0, 1, v32);
      uint64_t *v44 = v39;
      v44[1] = v40;
      (*v74)((char *)v44, 0, 1, v88);
LABEL_29:
      outlined init with take of Prompt.RenderedPromptFragment((uint64_t)v44, v45, type metadata accessor for Prompt.RenderedPromptFragment);
      outlined init with copy of Prompt.PromptFragment(v45, v82, type metadata accessor for Prompt.RenderedPromptFragment);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1, v26);
      }
      unint64_t v28 = v86;
      uint64_t v27 = v87;
      uint64_t v60 = v85;
      unint64_t v62 = *(void *)(v26 + 16);
      unint64_t v61 = *(void *)(v26 + 24);
      uint64_t v63 = v82;
      if (v62 >= v61 >> 1)
      {
        uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, v26);
        uint64_t v60 = v85;
        unint64_t v26 = v65;
        uint64_t v63 = v82;
      }
      *(void *)(v26 + 16) = v62 + 1;
      outlined init with take of Prompt.RenderedPromptFragment(v63, v26+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v62, type metadata accessor for Prompt.RenderedPromptFragment);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_1(v83, type metadata accessor for Prompt.RenderedPromptFragment);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_1((uint64_t)v28, type metadata accessor for Prompt.Delimiter);
      goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    unint64_t v26 = MEMORY[0x263F8EE78];
    uint64_t v66 = (void *)MEMORY[0x263F8EE78];
LABEL_37:
    uint64_t v67 = v66;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      long long v22 = v67;
    }
    else {
      long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
    }
    unint64_t v69 = v22[2];
    unint64_t v68 = v22[3];
    if (v69 >= v68 >> 1) {
      long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v22);
    }
    v22[2] = v69 + 1;
    int v70 = &v22[2 * v69];
    v70[4] = v26;
    *((unsigned char *)v70 + 40) = 1;
  }
  return v22;
}

uint64_t specialized static PromptModule.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    char v4 = 0;
    return v4 & 1;
  }
  if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  char v4 = specialized static Array<A>.== infix(_:_:)(v3, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t outlined init with take of Prompt.RenderedPromptFragment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Prompt.RenderedPromptFragment?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.RenderedPromptFragment?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s15TokenGeneration6PromptV9DelimiterVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Prompt.PromptFragment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for PromptModule(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PromptModule(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptModule(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PromptModule()
{
  return &type metadata for PromptModule;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v248 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v249 = (unint64_t)(v5 + 63) >> 6;
  while (2)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v251 = v4;
      unint64_t v12 = v11 | (v4 << 6);
    }
    else
    {
      int64_t v13 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_225;
      }
      if (v13 >= v249) {
        return 1;
      }
      unint64_t v14 = *(void *)(v248 + 8 * v13);
      int64_t v15 = v4 + 1;
      if (!v14)
      {
        int64_t v15 = v4 + 2;
        if (v4 + 2 >= v249) {
          return 1;
        }
        unint64_t v14 = *(void *)(v248 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v4 + 3;
          if (v4 + 3 >= v249) {
            return 1;
          }
          unint64_t v14 = *(void *)(v248 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v4 + 4;
            if (v4 + 4 >= v249) {
              return 1;
            }
            unint64_t v14 = *(void *)(v248 + 8 * v15);
            if (!v14)
            {
              uint64_t v16 = v4 + 5;
              if (v4 + 5 >= v249) {
                return 1;
              }
              unint64_t v14 = *(void *)(v248 + 8 * v16);
              if (!v14)
              {
                while (1)
                {
                  int64_t v15 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_231;
                  }
                  if (v15 >= v249) {
                    return 1;
                  }
                  unint64_t v14 = *(void *)(v248 + 8 * v15);
                  ++v16;
                  if (v14) {
                    goto LABEL_25;
                  }
                }
              }
              int64_t v15 = v4 + 5;
            }
          }
        }
      }
LABEL_25:
      unint64_t v7 = (v14 - 1) & v14;
      int64_t v251 = v15;
      unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    }
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v12);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(v3 + 56) + 24 * v12;
    uint64_t v22 = *(uint64_t *)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    int v23 = *(unsigned __int8 *)(v20 + 16);
    swift_bridgeObjectRetain();
    outlined copy of JSON(v22, v21, v23);
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    char v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      goto LABEL_221;
    }
    uint64_t v27 = *(void *)(v2 + 56) + 24 * v24;
    uint64_t v28 = *(uint64_t *)v27;
    uint64_t v29 = *(void *)(v27 + 8);
    char v30 = *(unsigned char *)(v27 + 16);
    switch(v30)
    {
      case 1:
        if (v23 != 1) {
          goto LABEL_192;
        }
        outlined consume of JSON(*(void *)v27, *(void *)(v27 + 8), 1);
        outlined consume of JSON(v22, v21, 1);
        int64_t v4 = v251;
        if (*(double *)&v28 != *(double *)&v22) {
          return 0;
        }
        continue;
      case 2:
        if (v23 != 2) {
          goto LABEL_191;
        }
        if (v28 == v22 && v29 == v21)
        {
          swift_bridgeObjectRetain();
          outlined consume of JSON(v22, v21, 2);
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          char v10 = 2;
          goto LABEL_7;
        }
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        outlined consume of JSON(v28, v29, 2);
        uint64_t v33 = v22;
        uint64_t v34 = v21;
        char v35 = 2;
LABEL_47:
        outlined consume of JSON(v33, v34, v35);
        int64_t v4 = v251;
        if ((v32 & 1) == 0) {
          return 0;
        }
        continue;
      case 3:
        if (v23 != 3) {
          goto LABEL_191;
        }
        uint64_t v36 = *(void *)(v28 + 16);
        if (v36 != *(void *)(v22 + 16))
        {
          char v30 = 3;
          outlined copy of JSON(v28, v29, 3);
          outlined copy of JSON(v22, v21, 3);
          outlined copy of JSON(v28, v29, 3);
          goto LABEL_219;
        }
        if (!v36)
        {
          outlined copy of JSON(v28, v29, 3);
          outlined copy of JSON(v22, v21, 3);
          outlined copy of JSON(v28, v29, 3);
          goto LABEL_56;
        }
        outlined copy of JSON(v28, v29, 3);
        outlined copy of JSON(v22, v21, 3);
        outlined copy of JSON(v28, v29, 3);
        if (v28 == v22)
        {
LABEL_56:
          outlined consume of JSON(v28, v29, 3);
          outlined consume of JSON(v22, v21, 3);
          outlined consume of JSON(v28, v29, 3);
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          char v10 = 3;
LABEL_7:
          outlined consume of JSON(v8, v9, v10);
          int64_t v4 = v251;
          continue;
        }
        unint64_t v37 = 0;
        uint64_t v247 = v28 + 32;
        uint64_t v236 = v29;
        uint64_t v244 = v36;
        uint64_t v245 = v2;
        while (2)
        {
          if (v37 >= *(void *)(v28 + 16))
          {
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
            JUMPOUT(0x25F9BAA78);
          }
          if (v37 >= *(void *)(v22 + 16)) {
            goto LABEL_224;
          }
          unint64_t v43 = v37 + 1;
          uint64_t v44 = *(void *)(v247 + 24 * v37);
          uint64_t v45 = *(void *)(v247 + 24 * v37 + 8);
          uint64_t v46 = *(unsigned __int8 *)(v247 + 24 * v37 + 16);
          uint64_t v47 = v22 + 32 + 24 * v37;
          uint64_t v49 = *(void *)v47;
          uint64_t v48 = *(void *)(v47 + 8);
          int v50 = *(unsigned __int8 *)(v47 + 16);
          unint64_t v250 = v43;
          switch(v46)
          {
            case 1:
              if (v50 != 1) {
                goto LABEL_198;
              }
              double v55 = *(double *)&v44;
              double v56 = *(double *)v47;
              uint64_t v57 = *(void *)(v47 + 8);
              outlined consume of JSON(v44, v45, 1);
              outlined consume of JSON(v49, v57, 1);
              uint64_t v2 = v245;
              if (v55 != v56) {
                goto LABEL_199;
              }
              goto LABEL_60;
            case 2:
              if (v50 != 2)
              {
                uint64_t v246 = *(void *)v47;
                uint64_t v181 = *(void *)(v47 + 8);
LABEL_197:
                uint64_t v182 = v44;
                outlined copy of JSON(v44, v45, v46);
                swift_bridgeObjectRetain();
                uint64_t v44 = v182;
                uint64_t v48 = v181;
                uint64_t v49 = v246;
                uint64_t v29 = v236;
LABEL_198:
                uint64_t v183 = v45;
                uint64_t v184 = v44;
                uint64_t v185 = v48;
                outlined copy of JSON(v49, v48, v50);
                outlined consume of JSON(v184, v183, v46);
                outlined consume of JSON(v49, v185, v50);
                outlined consume of JSON(v184, v183, v46);
LABEL_199:
                char v30 = 3;
                goto LABEL_219;
              }
              if (v44 == v49 && v45 == v48)
              {
                uint64_t v39 = v44;
                outlined copy of JSON(v44, v45, 2);
                outlined copy of JSON(v39, v45, 2);
                outlined consume of JSON(v39, v45, 2);
                uint64_t v40 = v39;
                uint64_t v41 = v45;
                char v42 = 2;
LABEL_58:
                outlined consume of JSON(v40, v41, v42);
                goto LABEL_59;
              }
              uint64_t v59 = v44;
              uint64_t v60 = *(void *)v47;
              uint64_t v61 = v45;
              uint64_t v62 = *(void *)(v47 + 8);
              char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
              outlined copy of JSON(v60, v62, 2);
              outlined copy of JSON(v59, v61, 2);
              outlined consume of JSON(v59, v61, 2);
              uint64_t v64 = v60;
              uint64_t v29 = v236;
              outlined consume of JSON(v64, v62, 2);
LABEL_83:
              uint64_t v2 = v245;
              if ((v63 & 1) == 0) {
                goto LABEL_199;
              }
              goto LABEL_60;
            case 3:
              uint64_t v246 = *(void *)v47;
              if (v50 != 3) {
                goto LABEL_196;
              }
              uint64_t v65 = *(void *)(v44 + 16);
              uint64_t v242 = v44;
              uint64_t v231 = *(void *)(v47 + 8);
              if (v65 != *(void *)(v49 + 16))
              {
                uint64_t v186 = v44;
                uint64_t v187 = *(void *)(v47 + 8);
                outlined copy of JSON(v49, v48, 3);
                outlined copy of JSON(v186, v45, 3);
                outlined copy of JSON(v49, v187, 3);
                outlined copy of JSON(v186, v45, 3);
                goto LABEL_218;
              }
              uint64_t v66 = *(void *)v47;
              uint64_t v67 = v45;
              uint64_t v233 = *(void *)(v44 + 16);
              if (!v65)
              {
                uint64_t v76 = v66;
                uint64_t v77 = v48;
                outlined copy of JSON(v66, v48, 3);
                uint64_t v69 = v242;
                outlined copy of JSON(v242, v67, 3);
                uint64_t v78 = v77;
                uint64_t v45 = v67;
                outlined copy of JSON(v76, v78, 3);
                outlined copy of JSON(v242, v67, 3);
LABEL_92:
                outlined consume of JSON(v69, v45, 3);
                outlined consume of JSON(v246, v231, 3);
                uint64_t v29 = v236;
                outlined consume of JSON(v246, v231, 3);
                outlined consume of JSON(v69, v45, 3);
LABEL_59:
                uint64_t v2 = v245;
LABEL_60:
                unint64_t v37 = v250;
                if (v250 == v244) {
                  goto LABEL_56;
                }
                continue;
              }
              uint64_t v68 = v48;
              outlined copy of JSON(v66, v48, 3);
              uint64_t v69 = v242;
              outlined copy of JSON(v242, v67, 3);
              uint64_t v70 = v68;
              uint64_t v45 = v67;
              outlined copy of JSON(v246, v70, 3);
              outlined copy of JSON(v242, v67, 3);
              uint64_t v71 = v233;
              if (v242 == v246) {
                goto LABEL_92;
              }
              unint64_t v72 = 0;
              uint64_t v239 = v242 + 32;
              uint64_t v229 = v45;
              uint64_t v225 = v3;
              while (2)
              {
                if (v72 >= *(void *)(v69 + 16)) {
                  goto LABEL_226;
                }
                if (v72 >= *(void *)(v246 + 16)) {
                  goto LABEL_227;
                }
                unint64_t v84 = v72 + 1;
                uint64_t v85 = *(void *)(v239 + 24 * v72);
                uint64_t v86 = *(void *)(v239 + 24 * v72 + 8);
                uint64_t v87 = *(unsigned __int8 *)(v239 + 24 * v72 + 16);
                uint64_t v88 = v246 + 32 + 24 * v72;
                uint64_t v90 = *(void *)v88;
                uint64_t v89 = *(void *)(v88 + 8);
                int v91 = *(unsigned __int8 *)(v88 + 16);
                unint64_t v243 = v84;
                switch(v87)
                {
                  case 1:
                    if (v91 != 1) {
                      goto LABEL_204;
                    }
                    double v97 = *(double *)&v85;
                    double v98 = *(double *)v88;
                    uint64_t v99 = *(void *)v88;
                    uint64_t v100 = *(void *)(v88 + 8);
                    outlined consume of JSON(v85, v86, 1);
                    outlined consume of JSON(v99, v100, 1);
                    if (v97 != v98) {
                      goto LABEL_218;
                    }
                    goto LABEL_95;
                  case 2:
                    if (v91 != 2)
                    {
                      uint64_t v237 = *(void *)v88;
                      uint64_t v221 = *(void *)(v88 + 8);
                      goto LABEL_203;
                    }
                    if (v85 == v90 && v86 == v89)
                    {
                      uint64_t v79 = v85;
                      uint64_t v80 = v86;
                      outlined copy of JSON(v85, v86, 2);
                      outlined copy of JSON(v79, v80, 2);
                      outlined consume of JSON(v79, v80, 2);
                      uint64_t v81 = v79;
                      uint64_t v82 = v80;
                      char v83 = 2;
LABEL_94:
                      outlined consume of JSON(v81, v82, v83);
                    }
                    else
                    {
                      uint64_t v102 = v85;
                      uint64_t v103 = v86;
                      uint64_t v104 = *(void *)v88;
                      uint64_t v105 = *(void *)(v88 + 8);
                      char v240 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      outlined copy of JSON(v104, v105, 2);
                      outlined copy of JSON(v102, v103, 2);
                      outlined consume of JSON(v102, v103, 2);
                      uint64_t v106 = v104;
                      uint64_t v45 = v229;
                      uint64_t v107 = v105;
                      uint64_t v3 = v225;
                      outlined consume of JSON(v106, v107, 2);
LABEL_118:
                      if ((v240 & 1) == 0) {
                        goto LABEL_218;
                      }
                    }
                    goto LABEL_95;
                  case 3:
                    uint64_t v221 = *(void *)(v88 + 8);
                    uint64_t v237 = *(void *)v88;
                    if (v91 != 3) {
                      goto LABEL_203;
                    }
                    uint64_t v108 = *(void *)(v85 + 16);
                    uint64_t v224 = v86;
                    uint64_t v234 = v85;
                    if (v108 != *(void *)(v90 + 16))
                    {
                      uint64_t v197 = v85;
                      uint64_t v198 = v86;
                      uint64_t v199 = *(void *)v88;
                      uint64_t v200 = *(void *)(v88 + 8);
                      outlined copy of JSON(v90, v89, 3);
                      outlined copy of JSON(v197, v198, 3);
                      outlined copy of JSON(v199, v200, 3);
                      outlined copy of JSON(v197, v198, 3);
                      goto LABEL_217;
                    }
                    if (!v108)
                    {
                      uint64_t v119 = *(void *)(v88 + 8);
                      outlined copy of JSON(v90, v89, 3);
                      outlined copy of JSON(v234, v224, 3);
                      outlined copy of JSON(v237, v119, 3);
                      outlined copy of JSON(v234, v224, 3);
                      uint64_t v110 = v237;
                      uint64_t v111 = v234;
                      goto LABEL_127;
                    }
                    uint64_t v228 = *(void *)(v85 + 16);
                    uint64_t v109 = *(void *)(v88 + 8);
                    outlined copy of JSON(v90, v89, 3);
                    outlined copy of JSON(v234, v224, 3);
                    outlined copy of JSON(v237, v109, 3);
                    outlined copy of JSON(v234, v224, 3);
                    uint64_t v110 = v237;
                    uint64_t v111 = v234;
                    if (v234 == v237)
                    {
LABEL_127:
                      uint64_t v120 = v111;
                      outlined consume of JSON(v111, v224, 3);
                      outlined consume of JSON(v110, v221, 3);
                      outlined consume of JSON(v110, v221, 3);
                      uint64_t v121 = v120;
                      uint64_t v71 = v233;
                      outlined consume of JSON(v121, v224, 3);
                      uint64_t v3 = v225;
                      uint64_t v45 = v229;
LABEL_95:
                      uint64_t v69 = v242;
                      unint64_t v72 = v243;
                      if (v243 == v71) {
                        goto LABEL_92;
                      }
                      continue;
                    }
                    unint64_t v112 = 0;
                    uint64_t v230 = v234 + 32;
                    while (2)
                    {
                      if (v112 >= *(void *)(v111 + 16)) {
                        goto LABEL_228;
                      }
                      if (v112 >= *(void *)(v110 + 16)) {
                        goto LABEL_229;
                      }
                      unint64_t v125 = v112 + 1;
                      uint64_t v126 = *(uint64_t *)(v230 + 24 * v112);
                      uint64_t v241 = *(void *)(v230 + 24 * v112 + 8);
                      uint64_t v127 = *(unsigned __int8 *)(v230 + 24 * v112 + 16);
                      uint64_t v128 = v237 + 32 + 24 * v112;
                      uint64_t v130 = *(void *)v128;
                      uint64_t v129 = *(void *)(v128 + 8);
                      int v131 = *(unsigned __int8 *)(v128 + 16);
                      unint64_t v235 = v125;
                      switch(v127)
                      {
                        case 1:
                          if (v131 != 1) {
                            goto LABEL_210;
                          }
                          double v136 = *(double *)v128;
                          uint64_t v137 = *(void *)v128;
                          uint64_t v138 = *(void *)(v128 + 8);
                          outlined consume of JSON(v126, v241, 1);
                          outlined consume of JSON(v137, v138, 1);
                          if (*(double *)&v126 != v136) {
                            goto LABEL_217;
                          }
                          goto LABEL_130;
                        case 2:
                          if (v131 != 2)
                          {
                            uint64_t v227 = *(void *)v128;
                            uint64_t v195 = *(void *)(v128 + 8);
                            uint64_t v196 = v241;
LABEL_209:
                            outlined copy of JSON(v126, v196, v127);
                            swift_bridgeObjectRetain();
                            uint64_t v129 = v195;
                            uint64_t v130 = v227;
LABEL_210:
                            uint64_t v201 = v130;
                            uint64_t v202 = v129;
                            outlined copy of JSON(v130, v129, v131);
                            outlined consume of JSON(v126, v241, v127);
                            outlined consume of JSON(v201, v202, v131);
                            uint64_t v203 = v126;
                            uint64_t v204 = v241;
                            char v205 = v127;
                            goto LABEL_216;
                          }
                          if (v126 == v130 && v241 == v129)
                          {
                            outlined copy of JSON(v126, v241, 2);
                            outlined copy of JSON(v126, v241, 2);
                            outlined consume of JSON(v126, v241, 2);
                            uint64_t v122 = v126;
                            uint64_t v123 = v241;
                            char v124 = 2;
                            goto LABEL_129;
                          }
                          uint64_t v140 = *(void *)v128;
                          uint64_t v141 = *(void *)(v128 + 8);
                          char v142 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          outlined copy of JSON(v140, v141, 2);
                          outlined copy of JSON(v126, v241, 2);
                          outlined consume of JSON(v126, v241, 2);
                          uint64_t v143 = v140;
                          uint64_t v144 = v141;
                          char v145 = 2;
LABEL_153:
                          outlined consume of JSON(v143, v144, v145);
                          if ((v142 & 1) == 0) {
                            goto LABEL_217;
                          }
                          goto LABEL_130;
                        case 3:
                          if (v131 != 3) {
                            goto LABEL_205;
                          }
                          uint64_t v146 = *(void *)(v126 + 16);
                          uint64_t v217 = *(void *)(v128 + 8);
                          uint64_t v218 = v126;
                          if (v146 != *(void *)(v130 + 16))
                          {
                            uint64_t v206 = *(void *)v128;
                            uint64_t v207 = *(void *)(v128 + 8);
                            outlined copy of JSON(v130, v129, 3);
                            outlined copy of JSON(v126, v241, 3);
                            uint64_t v226 = v206;
                            outlined copy of JSON(v206, v207, 3);
                            outlined copy of JSON(v126, v241, 3);
                            goto LABEL_215;
                          }
                          if (!v146)
                          {
                            uint64_t v178 = *(void *)v128;
                            uint64_t v179 = *(void *)(v128 + 8);
                            outlined copy of JSON(v130, v129, 3);
                            outlined copy of JSON(v126, v241, 3);
                            outlined copy of JSON(v178, v179, 3);
                            outlined copy of JSON(v126, v241, 3);
                            uint64_t v148 = v178;
LABEL_189:
                            outlined consume of JSON(v218, v241, 3);
                            outlined consume of JSON(v148, v217, 3);
                            outlined consume of JSON(v148, v217, 3);
                            uint64_t v122 = v218;
                            uint64_t v123 = v241;
                            char v124 = 3;
LABEL_129:
                            outlined consume of JSON(v122, v123, v124);
LABEL_130:
                            uint64_t v111 = v234;
                            unint64_t v112 = v235;
                            uint64_t v110 = v237;
                            if (v235 == v228) {
                              goto LABEL_127;
                            }
                            continue;
                          }
                          uint64_t v223 = *(void *)(v126 + 16);
                          uint64_t v226 = *(void *)v128;
                          uint64_t v147 = *(void *)(v128 + 8);
                          outlined copy of JSON(v130, v129, 3);
                          outlined copy of JSON(v126, v241, 3);
                          outlined copy of JSON(v226, v147, 3);
                          outlined copy of JSON(v126, v241, 3);
                          uint64_t v148 = v226;
                          if (v126 == v226) {
                            goto LABEL_189;
                          }
                          unint64_t v149 = 0;
                          id v150 = (uint64_t *)(v226 + 48);
                          unint64_t v151 = (char *)(v218 + 48);
                          while (2)
                          {
                            if (v149 >= *(void *)(v148 + 16)) {
                              goto LABEL_230;
                            }
                            uint64_t v160 = *((void *)v151 - 2);
                            uint64_t v161 = *((void *)v151 - 1);
                            char v162 = *v151;
                            uint64_t v164 = *(v150 - 2);
                            uint64_t v163 = *(v150 - 1);
                            int v165 = *(unsigned __int8 *)v150;
                            unint64_t v232 = v149 + 1;
                            switch(*v151)
                            {
                              case 1:
                                if (v165 != 1) {
                                  goto LABEL_214;
                                }
                                double v168 = *((double *)v151 - 2);
                                uint64_t v169 = *(v150 - 1);
                                outlined consume of JSON(v160, v161, 1);
                                outlined consume of JSON(v164, v169, 1);
                                if (v168 != *(double *)&v164) {
                                  goto LABEL_215;
                                }
                                goto LABEL_162;
                              case 2:
                                if (v165 == 2)
                                {
                                  if (v160 == v164 && v161 == v163)
                                  {
                                    uint64_t v171 = *((void *)v151 - 2);
                                    uint64_t v172 = *((void *)v151 - 1);
                                    outlined copy of JSON(v160, v161, 2);
                                    outlined copy of JSON(v171, v172, 2);
                                    outlined consume of JSON(v171, v172, 2);
                                    outlined consume of JSON(v171, v172, 2);
                                  }
                                  else
                                  {
                                    uint64_t v219 = *((void *)v151 - 2);
                                    uint64_t v155 = *((void *)v151 - 1);
                                    uint64_t v156 = *(v150 - 1);
                                    char v216 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    outlined copy of JSON(v164, v156, 2);
                                    outlined copy of JSON(v219, v155, 2);
                                    outlined consume of JSON(v219, v155, 2);
                                    uint64_t v157 = v164;
                                    uint64_t v158 = v156;
                                    char v159 = 2;
LABEL_161:
                                    outlined consume of JSON(v157, v158, v159);
                                    if ((v216 & 1) == 0) {
                                      goto LABEL_215;
                                    }
                                  }
LABEL_162:
                                  v150 += 3;
                                  v151 += 24;
                                  unint64_t v149 = v232;
                                  uint64_t v148 = v226;
                                  if (v223 == v232) {
                                    goto LABEL_189;
                                  }
                                  continue;
                                }
                                uint64_t v222 = *(v150 - 1);
LABEL_213:
                                uint64_t v208 = *((void *)v151 - 2);
                                uint64_t v209 = v161;
                                char v210 = v162;
                                outlined copy of JSON(v160, v161, v162);
                                swift_bridgeObjectRetain();
                                char v162 = v210;
                                uint64_t v160 = v208;
                                uint64_t v161 = v209;
                                uint64_t v163 = v222;
LABEL_214:
                                uint64_t v211 = v164;
                                uint64_t v212 = v160;
                                uint64_t v213 = v161;
                                char v214 = v162;
                                uint64_t v215 = v163;
                                outlined copy of JSON(v211, v163, v165);
                                outlined consume of JSON(v212, v213, v214);
                                outlined consume of JSON(v211, v215, v165);
                                outlined consume of JSON(v212, v213, v214);
LABEL_215:
                                outlined consume of JSON(v218, v241, 3);
                                outlined consume of JSON(v226, v217, 3);
                                outlined consume of JSON(v226, v217, 3);
                                uint64_t v203 = v218;
                                uint64_t v204 = v241;
                                char v205 = 3;
LABEL_216:
                                outlined consume of JSON(v203, v204, v205);
LABEL_217:
                                outlined consume of JSON(v234, v224, 3);
                                outlined consume of JSON(v237, v221, 3);
                                outlined consume of JSON(v237, v221, 3);
                                outlined consume of JSON(v234, v224, 3);
                                uint64_t v45 = v229;
LABEL_218:
                                char v30 = 3;
                                outlined consume of JSON(v242, v45, 3);
                                outlined consume of JSON(v246, v231, 3);
                                outlined consume of JSON(v246, v231, 3);
                                outlined consume of JSON(v242, v45, 3);
LABEL_219:
                                LOBYTE(v23) = 3;
LABEL_220:
                                outlined consume of JSON(v28, v29, v30);
                                outlined consume of JSON(v22, v21, v23);
                                outlined consume of JSON(v28, v29, v30);
LABEL_221:
                                outlined consume of JSON(v22, v21, v23);
                                return 0;
                              case 3:
                                uint64_t v222 = *(v150 - 1);
                                if (v165 != 3) {
                                  goto LABEL_213;
                                }
                                uint64_t v173 = *((void *)v151 - 2);
                                uint64_t v174 = *((void *)v151 - 1);
                                outlined copy of JSON(v164, v163, 3);
                                outlined copy of JSON(v173, v174, 3);
                                outlined copy of JSON(v164, v222, 3);
                                outlined copy of JSON(v173, v174, 3);
                                char v216 = specialized static Array<A>.== infix(_:_:)(v173, v164);
                                outlined consume of JSON(v173, v174, 3);
                                outlined consume of JSON(v164, v222, 3);
                                outlined consume of JSON(v164, v222, 3);
                                uint64_t v157 = v173;
                                uint64_t v158 = v174;
                                char v159 = 3;
                                goto LABEL_161;
                              case 4:
                                uint64_t v222 = *(v150 - 1);
                                if (v165 != 4) {
                                  goto LABEL_213;
                                }
                                uint64_t v175 = *((void *)v151 - 2);
                                uint64_t v220 = *((void *)v151 - 1);
                                uint64_t v176 = *(v150 - 1);
                                outlined copy of JSON(v164, v163, 4);
                                outlined copy of JSON(v175, v220, 4);
                                outlined copy of JSON(v164, v176, 4);
                                outlined copy of JSON(v175, v220, 4);
                                char v216 = specialized static Dictionary<>.== infix(_:_:)(v175, v164);
                                outlined consume of JSON(v175, v220, 4);
                                outlined consume of JSON(v164, v222, 4);
                                outlined consume of JSON(v164, v222, 4);
                                uint64_t v157 = v175;
                                uint64_t v158 = v220;
                                char v159 = 4;
                                goto LABEL_161;
                              case 5:
                                if (v165 != 5 || (v163 | v164) != 0) {
                                  goto LABEL_214;
                                }
                                outlined consume of JSON(v160, v161, 5);
                                outlined consume of JSON(0, 0, 5);
                                goto LABEL_162;
                              default:
                                if (*(unsigned char *)v150) {
                                  goto LABEL_214;
                                }
                                BOOL v166 = (*((void *)v151 - 2) & 1) == 0;
                                uint64_t v167 = *(v150 - 1);
                                outlined consume of JSON(v160, v161, 0);
                                outlined consume of JSON(v164, v167, 0);
                                if (((v166 ^ v164) & 1) == 0) {
                                  goto LABEL_215;
                                }
                                goto LABEL_162;
                            }
                          }
                        case 4:
                          if (v131 != 4)
                          {
LABEL_205:
                            uint64_t v227 = *(void *)v128;
                            uint64_t v195 = *(void *)(v128 + 8);
                            uint64_t v196 = v241;
                            goto LABEL_209;
                          }
                          uint64_t v152 = *(void *)v128;
                          uint64_t v153 = *(void *)(v128 + 8);
                          outlined copy of JSON(v130, v129, 4);
                          outlined copy of JSON(v126, v241, 4);
                          outlined copy of JSON(v152, v153, 4);
                          outlined copy of JSON(v126, v241, 4);
                          char v142 = specialized static Dictionary<>.== infix(_:_:)(v126, v152);
                          outlined consume of JSON(v126, v241, 4);
                          outlined consume of JSON(v152, v153, 4);
                          outlined consume of JSON(v152, v153, 4);
                          uint64_t v143 = v126;
                          uint64_t v144 = v241;
                          char v145 = 4;
                          goto LABEL_153;
                        case 5:
                          if (v131 != 5 || (v129 | v130) != 0) {
                            goto LABEL_210;
                          }
                          outlined consume of JSON(v126, v241, 5);
                          uint64_t v122 = 0;
                          uint64_t v123 = 0;
                          char v124 = 5;
                          goto LABEL_129;
                        default:
                          if (*(unsigned char *)(v128 + 16)) {
                            goto LABEL_210;
                          }
                          BOOL v132 = (v126 & 1) == 0;
                          uint64_t v133 = v126;
                          uint64_t v134 = *(void *)v128;
                          uint64_t v135 = *(void *)(v128 + 8);
                          outlined consume of JSON(v133, v241, 0);
                          outlined consume of JSON(v134, v135, 0);
                          if (((v132 ^ v134) & 1) == 0) {
                            goto LABEL_217;
                          }
                          goto LABEL_130;
                      }
                    }
                  case 4:
                    if (v91 != 4)
                    {
                      uint64_t v237 = *(void *)v88;
                      uint64_t v221 = *(void *)(v88 + 8);
LABEL_203:
                      uint64_t v188 = v85;
                      uint64_t v189 = v86;
                      outlined copy of JSON(v85, v86, v87);
                      swift_bridgeObjectRetain();
                      uint64_t v85 = v188;
                      uint64_t v86 = v189;
                      uint64_t v89 = v221;
                      uint64_t v90 = v237;
                      uint64_t v45 = v229;
LABEL_204:
                      uint64_t v238 = v90;
                      uint64_t v190 = v85;
                      uint64_t v191 = v45;
                      uint64_t v192 = v86;
                      uint64_t v193 = v89;
                      outlined copy of JSON(v90, v89, v91);
                      outlined consume of JSON(v190, v192, v87);
                      outlined consume of JSON(v238, v193, v91);
                      uint64_t v194 = v192;
                      uint64_t v45 = v191;
                      outlined consume of JSON(v190, v194, v87);
                      goto LABEL_218;
                    }
                    uint64_t v113 = v85;
                    uint64_t v114 = v86;
                    uint64_t v115 = *(void *)v88;
                    uint64_t v116 = *(void *)(v88 + 8);
                    outlined copy of JSON(v90, v89, 4);
                    outlined copy of JSON(v113, v114, 4);
                    outlined copy of JSON(v115, v116, 4);
                    outlined copy of JSON(v113, v114, 4);
                    char v240 = specialized static Dictionary<>.== infix(_:_:)(v113, v115);
                    outlined consume of JSON(v113, v114, 4);
                    outlined consume of JSON(v115, v116, 4);
                    uint64_t v117 = v116;
                    uint64_t v3 = v225;
                    outlined consume of JSON(v115, v117, 4);
                    outlined consume of JSON(v113, v114, 4);
                    uint64_t v45 = v229;
                    goto LABEL_118;
                  case 5:
                    if (v91 != 5 || (v89 | v90) != 0) {
                      goto LABEL_204;
                    }
                    outlined consume of JSON(v85, v86, 5);
                    uint64_t v81 = 0;
                    uint64_t v82 = 0;
                    char v83 = 5;
                    goto LABEL_94;
                  default:
                    if (*(unsigned char *)(v88 + 16)) {
                      goto LABEL_204;
                    }
                    uint64_t v92 = v45;
                    BOOL v93 = (v85 & 1) == 0;
                    uint64_t v94 = *(void *)v88;
                    uint64_t v95 = *(void *)(v88 + 8);
                    outlined consume of JSON(v85, v86, 0);
                    outlined consume of JSON(v94, v95, 0);
                    char v96 = v93 ^ v94;
                    uint64_t v45 = v92;
                    uint64_t v71 = v233;
                    if ((v96 & 1) == 0) {
                      goto LABEL_218;
                    }
                    goto LABEL_95;
                }
              }
            case 4:
              if (v50 != 4)
              {
                uint64_t v246 = *(void *)v47;
LABEL_196:
                uint64_t v181 = *(void *)(v47 + 8);
                goto LABEL_197;
              }
              uint64_t v73 = v44;
              uint64_t v74 = *(void *)(v47 + 8);
              outlined copy of JSON(v49, v48, 4);
              outlined copy of JSON(v73, v45, 4);
              outlined copy of JSON(v49, v74, 4);
              outlined copy of JSON(v73, v45, 4);
              char v63 = specialized static Dictionary<>.== infix(_:_:)(v73, v49);
              outlined consume of JSON(v73, v45, 4);
              outlined consume of JSON(v49, v74, 4);
              outlined consume of JSON(v49, v74, 4);
              outlined consume of JSON(v73, v45, 4);
              uint64_t v29 = v236;
              goto LABEL_83;
            case 5:
              if (v50 != 5 || (v48 | v49) != 0) {
                goto LABEL_198;
              }
              outlined consume of JSON(v44, v45, 5);
              uint64_t v40 = 0;
              uint64_t v41 = 0;
              char v42 = 5;
              goto LABEL_58;
            default:
              if (*(unsigned char *)(v47 + 16)) {
                goto LABEL_198;
              }
              BOOL v51 = (v44 & 1) == 0;
              uint64_t v52 = v45;
              uint64_t v53 = *(void *)(v47 + 8);
              outlined consume of JSON(v44, v52, 0);
              outlined consume of JSON(v49, v53, 0);
              char v54 = v51 ^ v49;
              uint64_t v2 = v245;
              if ((v54 & 1) == 0) {
                goto LABEL_199;
              }
              goto LABEL_60;
          }
        }
      case 4:
        if (v23 != 4)
        {
LABEL_191:
          outlined copy of JSON(*(void *)v27, *(void *)(v27 + 8), *(unsigned char *)(v27 + 16));
          swift_bridgeObjectRetain();
LABEL_192:
          outlined copy of JSON(v22, v21, v23);
          goto LABEL_220;
        }
        outlined copy of JSON(*(void *)v27, *(void *)(v27 + 8), 4);
        outlined copy of JSON(v22, v21, 4);
        outlined copy of JSON(v28, v29, 4);
        char v32 = specialized static Dictionary<>.== infix(_:_:)(v28, v22);
        outlined consume of JSON(v28, v29, 4);
        outlined consume of JSON(v22, v21, 4);
        outlined consume of JSON(v28, v29, 4);
        uint64_t v33 = v22;
        uint64_t v34 = v21;
        char v35 = 4;
        goto LABEL_47;
      case 5:
        if (v23 != 5 || (v21 | v22) != 0) {
          goto LABEL_192;
        }
        outlined consume of JSON(v28, v29, 5);
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        char v10 = 5;
        goto LABEL_7;
      default:
        if (v23) {
          goto LABEL_192;
        }
        outlined consume of JSON(*(void *)v27, *(void *)(v27 + 8), 0);
        outlined consume of JSON(v22, v21, 0);
        int64_t v4 = v251;
        if (((v22 ^ ((v28 & 1) == 0)) & 1) == 0) {
          return 0;
        }
        continue;
    }
  }
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v27) {
            return 1;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    uint64_t v14 = 16 * v10;
    int64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v27) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    int64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void v21[2];
  void (**v22)(char *, char *, uint64_t);
  uint64_t v23;
  unsigned int (**v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  uint64_t v2 = type metadata accessor for CharacterSet();
  int64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int64_t v27 = (char *)v21 - v6;
  unint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    Swift::Int v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    int64_t v11 = v3 + 16;
    Swift::Int v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    int64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    unint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    char v25 = v12;
    char v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    char v23 = v14;
    char v26 = v11;
    int64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    Swift::Int v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      specialized Set._Variant.insert(_:)(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CharacterSet));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    unint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CharacterSet>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  unint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Locale?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, CharacterSet));
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    uint64_t *v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for CharacterSet();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    unint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CharacterSet, Set<Int>), &demangling cache variable for type metadata for _DictionaryStorage<CharacterSet, Set<Int>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CharacterSet, [Int]), &demangling cache variable for type metadata for _DictionaryStorage<CharacterSet, [Int]>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, [String : String]));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    unint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, [String : String]>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  unint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Locale?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (Prompt.SpecialToken, [String : String]));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v15) {
      break;
    }
    int64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v17 = v7[6];
    unint64_t v18 = type metadata accessor for Prompt.SpecialToken(0);
    unint64_t result = _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, type metadata accessor for Prompt.SpecialToken);
    *(void *)(v7[7] + 8 * v16) = *(void *)((char *)v5 + v9);
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void v24[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, String));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    unint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, String>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  unint64_t v9 = (void *)((char *)v5 + *(int *)(v2 + 48));
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Locale?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (Prompt.SpecialToken, String));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v15) {
      break;
    }
    int64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v17 = v7[6];
    unint64_t v18 = type metadata accessor for Prompt.SpecialToken(0);
    unint64_t result = _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, type metadata accessor for Prompt.SpecialToken);
    uint64_t v19 = (void *)(v7[7] + 16 * v16);
    uint64_t v20 = v9[1];
    uint64_t *v19 = *v9;
    v19[1] = v20;
    uint64_t v21 = v7[2];
    uint64_t v22 = __OFADD__(v21, 1);
    BOOL v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      unint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      unint64_t v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  unsigned char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned char *v14;
  uint64_t v15;
  char v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, (mask: BitSet, isPotentiallyDeterministic: Bool)>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned char *)(a1 + 48);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  unint64_t v9 = (unsigned char *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v5;
    uint64_t v10 = v3[7] + 16 * result;
    *(void *)uint64_t v10 = v4;
    *(unsigned char *)(v10 + 8) = v6 & 1;
    unint64_t v11 = v3[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 24;
    uint64_t v5 = *((void *)v9 - 2);
    uint64_t v15 = *((void *)v9 - 1);
    uint64_t v6 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    unint64_t v9 = v14;
    uint64_t v4 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    unint64_t v11 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Locale?(v16, (uint64_t)v9, a2);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if (v19) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v21 = v11[6];
    uint64_t v22 = type metadata accessor for CharacterSet();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v20, v9, v22);
    *(void *)(v11[7] + 8 * v20) = *(void *)&v9[v13];
    uint64_t v23 = v11[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    void v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t Prompt.promptFragments()()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Prompt.PromptFragment(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v107 = v3;
  uint64_t v108 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  double v98 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  double v97 = (uint64_t *)((char *)&v96 - v8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v96 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v102 = (uint64_t *)((char *)&v96 - v12);
  uint64_t v106 = type metadata accessor for Prompt.Delimiter(0);
  uint64_t v13 = *(void *)(v106 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v106);
  uint64_t v101 = (uint64_t)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v100 = (uint64_t *)((char *)&v96 - v17);
  MEMORY[0x270FA5388](v16);
  char v19 = (char *)&v96 - v18;
  uint64_t v20 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *v0;
  unint64_t v23 = v0[1];
  uint64_t v25 = v0[2];
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v105 = v13;
  if (v26)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v27 = v25;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Delimiter>);
    unint64_t v28 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_25FA352B0;
    uint64_t v29 = v27 + v28;
    uint64_t v30 = one-time initialization token for endPrompt;
    swift_bridgeObjectRetain();
    if (v30 != -1) {
      swift_once();
    }
    uint64_t v31 = __swift_project_value_buffer(v20, (uint64_t)static Prompt.SpecialToken.endPrompt);
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v31, (uint64_t)v22, type metadata accessor for Prompt.SpecialToken);
    uint64_t v32 = String.count.getter();
    _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v22, v29, type metadata accessor for Prompt.SpecialToken);
    uint64_t v33 = v106;
    *(void *)(v29 + *(int *)(v106 + 20)) = v32;
    *(void *)(v29 + *(int *)(v33 + 24)) = 0;
  }
  uint64_t v99 = v2;
  unint64_t v34 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  uint64_t v35 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v35 = v24;
  }
  uint64_t v109 = v24;
  unint64_t v110 = v23;
  uint64_t v36 = 7;
  if (((v23 >> 60) & ((v24 & 0x800000000000000) == 0)) != 0) {
    uint64_t v36 = 11;
  }
  unint64_t v37 = v36 | (v35 << 16);
  uint64_t v38 = *(void *)(v27 + 16);
  if (v38)
  {
    uint64_t v39 = v105;
    unint64_t v103 = v27 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
    uint64_t v104 = v36 | (v35 << 16);
    while (1)
    {
      if (v38 > *(void *)(v27 + 16))
      {
        __break(1u);
        goto LABEL_34;
      }
      --v38;
      _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v103 + *(void *)(v39 + 72) * v38, (uint64_t)v19, type metadata accessor for Prompt.Delimiter);
      uint64_t v40 = *(int *)(v106 + 20);
      unint64_t v41 = String.index(_:offsetBy:limitedBy:)();
      if (v42) {
        break;
      }
      unint64_t v43 = v41;
      if (v41 >> 14 < v37 >> 14)
      {
        uint64_t v44 = String.subscript.getter();
        uint64_t v45 = MEMORY[0x2612028F0](v44);
        uint64_t v47 = v46;
        swift_bridgeObjectRelease();
        uint64_t v48 = v102;
        *uint64_t v102 = v45;
        v48[1] = v47;
        swift_storeEnumTagMultiPayload();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1, v34);
        }
        unint64_t v50 = *(void *)(v34 + 16);
        unint64_t v49 = *(void *)(v34 + 24);
        if (v50 >= v49 >> 1) {
          unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1, v34);
        }
        *(void *)(v34 + 16) = v50 + 1;
        _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v102, v34+ ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80))+ *(void *)(v108 + 72) * v50, type metadata accessor for Prompt.PromptFragment);
      }
      _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v19, (uint64_t)v11, type metadata accessor for Prompt.Delimiter);
      swift_storeEnumTagMultiPayload();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1, v34);
      }
      unint64_t v52 = *(void *)(v34 + 16);
      unint64_t v51 = *(void *)(v34 + 24);
      if (v52 >= v51 >> 1) {
        unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, v34);
      }
      *(void *)(v34 + 16) = v52 + 1;
      _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v11, v34+ ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80))+ *(void *)(v108 + 72) * v52, type metadata accessor for Prompt.PromptFragment);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v19, type metadata accessor for Prompt.Delimiter);
      unint64_t v37 = v43;
      uint64_t v39 = v105;
      if (!v38) {
        goto LABEL_35;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for prompt != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Log.prompt);
    char v54 = v100;
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v19, (uint64_t)v100, type metadata accessor for Prompt.Delimiter);
    uint64_t v55 = v101;
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v19, v101, type metadata accessor for Prompt.Delimiter);
    swift_bridgeObjectRetain();
    double v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    int v58 = v57;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v59 = swift_slowAlloc();
      LODWORD(v107) = v58;
      uint64_t v60 = v59;
      uint64_t v108 = swift_slowAlloc();
      uint64_t v112 = v108;
      *(_DWORD *)uint64_t v60 = 136446722;
      uint64_t v61 = *v54;
      unint64_t v62 = v54[1];
      swift_bridgeObjectRetain();
      uint64_t v111 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v54, type metadata accessor for Prompt.Delimiter);
      *(_WORD *)(v60 + 12) = 2050;
      uint64_t v63 = v55;
      uint64_t v64 = *(void *)(v55 + *(int *)(v106 + 20));
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2(v63, type metadata accessor for Prompt.Delimiter);
      uint64_t v111 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 22) = 2050;
      uint64_t v111 = String.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25F950000, v56, (os_log_type_t)v107, "Failed to create prompt fragments since token %{public}s position %{public}ld for prompt with string length %{public}ld is invalid", (uint8_t *)v60, 0x20u);
      uint64_t v65 = v108;
      swift_arrayDestroy();
      MEMORY[0x2612040B0](v65, -1, -1);
      MEMORY[0x2612040B0](v60, -1, -1);
    }
    else
    {
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2(v55, type metadata accessor for Prompt.Delimiter);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v54, type metadata accessor for Prompt.Delimiter);

      swift_bridgeObjectRelease();
    }
    unint64_t v34 = type metadata accessor for GenerationError();
    lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (void (*)(uint64_t))type metadata accessor for GenerationError);
    swift_allocError();
    uint64_t v67 = v66;
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
    uint64_t v69 = *(int *)(v68 + 48);
    uint64_t v70 = *(int *)(v68 + 64);
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v19, v67, type metadata accessor for Prompt.SpecialToken);
    *(void *)(v67 + v69) = *(void *)&v19[v40];
    uint64_t v71 = String.count.getter();
    swift_bridgeObjectRelease();
    *(void *)(v67 + v70) = v71;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v19, type metadata accessor for Prompt.Delimiter);
  }
  else
  {
LABEL_34:
    unint64_t v43 = v37;
LABEL_35:
    swift_bridgeObjectRelease();
    if (v43 >= 0x4000)
    {
      uint64_t v74 = String.subscript.getter();
      uint64_t v76 = v75;
      uint64_t v78 = v77;
      uint64_t v80 = v79;
      swift_bridgeObjectRelease();
      uint64_t v81 = MEMORY[0x2612028F0](v74, v76, v78, v80);
      uint64_t v83 = v82;
      swift_bridgeObjectRelease();
      unint64_t v84 = (unint64_t)v97;
      *double v97 = v81;
      *(void *)(v84 + 8) = v83;
      swift_storeEnumTagMultiPayload();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v73 = (uint64_t)v98;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_56;
      }
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    uint64_t v73 = (uint64_t)v98;
LABEL_41:
    uint64_t v88 = *(void *)(v34 + 16);
    if (v88)
    {
      unint64_t v84 = v88 - 1;
      if (v88 != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
        }
        uint64_t v89 = 1;
        do
        {
          unint64_t v91 = v89 - 1;
          if (v89 - 1 != v84)
          {
            unint64_t v92 = *(void *)(v34 + 16);
            if (v91 >= v92)
            {
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1, v34);
LABEL_38:
              unint64_t v87 = *(void *)(v34 + 16);
              unint64_t v86 = *(void *)(v34 + 24);
              if (v87 >= v86 >> 1) {
                unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1, v34);
              }
              *(void *)(v34 + 16) = v87 + 1;
              _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(v84, v34+ ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80))+ *(void *)(v108 + 72) * v87, type metadata accessor for Prompt.PromptFragment);
              goto LABEL_41;
            }
            unint64_t v93 = v34 + ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80));
            uint64_t v94 = *(void *)(v108 + 72);
            uint64_t v95 = v93 + v94 * v91;
            _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v95, v73, type metadata accessor for Prompt.PromptFragment);
            if (v84 >= v92) {
              goto LABEL_54;
            }
            outlined assign with copy of Prompt.PromptFragment(v93 + v94 * v84, v95);
            if (v84 >= *(void *)(v34 + 16)) {
              goto LABEL_55;
            }
            outlined assign with take of Prompt.SpecialToken(v73, v93 + v94 * v84, type metadata accessor for Prompt.PromptFragment);
          }
        }
        while (v89++ < (uint64_t)--v84);
      }
    }
  }
  return v34;
}

uint64_t Prompt.SpecialToken.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Prompt.SpecialToken.locale.getter@<X0>(uint64_t a1@<X8>)
{
  return Prompt.SpecialToken.locale.getter(type metadata accessor for Prompt.SpecialToken, &demangling cache variable for type metadata for Locale?, a1);
}

uint64_t type metadata accessor for Prompt.SpecialToken(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.SpecialToken);
}

uint64_t Prompt.SpecialToken.locale.setter(uint64_t a1)
{
  return Prompt.SpecialToken.locale.setter(a1, type metadata accessor for Prompt.SpecialToken, &demangling cache variable for type metadata for Locale?);
}

uint64_t (*Prompt.SpecialToken.locale.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.SpecialToken.instance.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Prompt.SpecialToken(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Prompt.SpecialToken.init(identifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v7 = (char *)a3 + *(int *)(v6 + 20);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *a3 = a1;
  a3[1] = a2;
  uint64_t v10 = (void *)((char *)a3 + *(int *)(v6 + 24));
  *uint64_t v10 = 0;
  v10[1] = 0;
  return result;
}

uint64_t Prompt.SpecialToken.init(identifier:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v9 = (uint64_t)a4 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *a4 = a1;
  a4[1] = a2;
  unint64_t v11 = (void *)((char *)a4 + *(int *)(v8 + 24));
  *unint64_t v11 = 0;
  v11[1] = 0;
  return outlined assign with take of Locale?(a3, v9, &demangling cache variable for type metadata for Locale?);
}

uint64_t Prompt.SpecialToken.init(identifier:instance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Prompt.SpecialToken(0);
  unint64_t v11 = (char *)a5 + *(int *)(v10 + 20);
  uint64_t v12 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *a5 = a1;
  a5[1] = a2;
  uint64_t v14 = (void *)((char *)a5 + *(int *)(v10 + 24));
  void *v14 = a3;
  v14[1] = a4;
  return result;
}

uint64_t Prompt.SpecialToken.init(identifier:instance:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v13 = (uint64_t)a6 + *(int *)(v12 + 20);
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *a6 = a1;
  a6[1] = a2;
  uint64_t v15 = (void *)((char *)a6 + *(int *)(v12 + 24));
  void *v15 = a3;
  v15[1] = a4;
  return outlined assign with take of Locale?(a5, v13, &demangling cache variable for type metadata for Locale?);
}

uint64_t Prompt.SpecialToken.description.getter()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v9 = (uint64_t *)((char *)v0 + *(int *)(v8 + 24));
  uint64_t v10 = v9[1];
  if (v10)
  {
    uint64_t v11 = *v9;
    uint64_t v25 = 45;
    unint64_t v26 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)(&v10 - 1));
    uint64_t v13 = v25;
    uint64_t v12 = (void *)v26;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = (void *)0xE000000000000000;
  }
  outlined init with copy of Locale?((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v7, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (void *)0xE000000000000000;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    uint64_t v25 = 0x656C61636F6C2820;
    unint64_t v26 = 0xEA0000000000203ALL;
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 41;
    v17._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    uint64_t v14 = v25;
    uint64_t v15 = (void *)v26;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  uint64_t v25 = 0x3A6E656B6F743C3CLL;
  unint64_t v26 = 0xE800000000000000;
  uint64_t v19 = *v0;
  uint64_t v18 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = v19;
  v20._unint64_t object = v18;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = v13;
  v21._unint64_t object = v12;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = v14;
  v22._unint64_t object = v15;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 15934;
  v23._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  return v25;
}

uint64_t one-time initialization function for endPrompt()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.endPrompt);
  uint64_t v1 = (void *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.endPrompt);
  uint64_t v2 = (char *)v1 + *(int *)(v0 + 20);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  void *v1 = 0xD000000000000010;
  v1[1] = 0x800000025FA3E670;
  uint64_t v5 = (void *)((char *)v1 + *(int *)(v0 + 24));
  void *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t static Prompt.SpecialToken.endPrompt.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for endPrompt, (uint64_t)static Prompt.SpecialToken.endPrompt, a1);
}

uint64_t one-time initialization function for startPrompt()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.startPrompt);
  uint64_t v1 = (void *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.startPrompt);
  uint64_t v2 = (char *)v1 + *(int *)(v0 + 20);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  void *v1 = 0xD000000000000012;
  v1[1] = 0x800000025FA3E650;
  uint64_t v5 = (void *)((char *)v1 + *(int *)(v0 + 24));
  void *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t static Prompt.SpecialToken.startPrompt.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for startPrompt, (uint64_t)static Prompt.SpecialToken.startPrompt, a1);
}

uint64_t one-time initialization function for localeInstruction()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.localeInstruction);
  uint64_t v1 = (void *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.localeInstruction);
  uint64_t v2 = (char *)v1 + *(int *)(v0 + 20);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  void *v1 = 0xD000000000000012;
  v1[1] = 0x800000025FA3E630;
  uint64_t v5 = (void *)((char *)v1 + *(int *)(v0 + 24));
  void *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t static Prompt.SpecialToken.localeInstruction.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for localeInstruction, (uint64_t)static Prompt.SpecialToken.localeInstruction, a1);
}

uint64_t one-time initialization function for localeInstructionInjectionLocation()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.localeInstructionInjectionLocation);
  uint64_t v1 = (void *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.localeInstructionInjectionLocation);
  uint64_t v2 = (char *)v1 + *(int *)(v0 + 20);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  void *v1 = 0xD000000000000025;
  v1[1] = 0x800000025FA3E600;
  uint64_t v5 = (void *)((char *)v1 + *(int *)(v0 + 24));
  void *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t static Prompt.SpecialToken.localeInstructionInjectionLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for localeInstructionInjectionLocation, (uint64_t)static Prompt.SpecialToken.localeInstructionInjectionLocation, a1);
}

uint64_t one-time initialization function for promptModule()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.promptModule);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.promptModule);
  uint64_t v2 = v1 + *(int *)(v0 + 20);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  strcpy((char *)v1, "prompt_module");
  *(_WORD *)(v1 + 14) = -4864;
  uint64_t v5 = (void *)(v1 + *(int *)(v0 + 24));
  void *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t static Prompt.SpecialToken.promptModule.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for promptModule, (uint64_t)static Prompt.SpecialToken.promptModule, a1);
}

uint64_t one-time initialization function for instructions()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (uint64_t *)((char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - v7;
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.Chat.instructions);
  uint64_t v9 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.Chat.instructions);
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v8, 1, 1, v10);
  outlined init with copy of Locale?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v12 = (uint64_t)v2 + *(int *)(v0 + 20);
  v11((char *)v12, 1, 1, v10);
  *uint64_t v2 = 0xD000000000000010;
  v2[1] = 0x800000025FA3E540;
  uint64_t v13 = (void *)((char *)v2 + *(int *)(v0 + 24));
  void *v13 = 0;
  v13[1] = 0;
  outlined assign with take of Locale?((uint64_t)v6, v12, &demangling cache variable for type metadata for Locale?);
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v2, v9, type metadata accessor for Prompt.SpecialToken);
  return outlined destroy of SingleValueDecodingContainer?((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.instructions(locale:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v8 = (uint64_t)a2 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *a2 = 0xD000000000000010;
  a2[1] = 0x800000025FA3E540;
  uint64_t v10 = (void *)((char *)a2 + *(int *)(v7 + 24));
  *uint64_t v10 = 0;
  v10[1] = 0;
  return outlined assign with take of Locale?((uint64_t)v6, v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.instructions.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for instructions, (uint64_t)static Prompt.SpecialToken.Chat.instructions, a1);
}

uint64_t one-time initialization function for response()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (uint64_t *)((char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - v7;
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.Chat.response);
  uint64_t v9 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.Chat.response);
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v8, 1, 1, v10);
  outlined init with copy of Locale?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v12 = (uint64_t)v2 + *(int *)(v0 + 20);
  v11((char *)v12, 1, 1, v10);
  *uint64_t v2 = 0xD000000000000013;
  v2[1] = 0x800000025FA3E560;
  uint64_t v13 = (void *)((char *)v2 + *(int *)(v0 + 24));
  void *v13 = 0;
  v13[1] = 0;
  outlined assign with take of Locale?((uint64_t)v6, v12, &demangling cache variable for type metadata for Locale?);
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v2, v9, type metadata accessor for Prompt.SpecialToken);
  return outlined destroy of SingleValueDecodingContainer?((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.response(locale:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v8 = (uint64_t)a2 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *a2 = 0xD000000000000013;
  a2[1] = 0x800000025FA3E560;
  uint64_t v10 = (void *)((char *)a2 + *(int *)(v7 + 24));
  *uint64_t v10 = 0;
  v10[1] = 0;
  return outlined assign with take of Locale?((uint64_t)v6, v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.response.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for response, (uint64_t)static Prompt.SpecialToken.Chat.response, a1);
}

uint64_t one-time initialization function for user()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - v7;
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.Chat.user);
  uint64_t v9 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.Chat.user);
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v8, 1, 1, v10);
  outlined init with copy of Locale?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v12 = (uint64_t)&v2[*(int *)(v0 + 20)];
  v11((char *)v12, 1, 1, v10);
  strcpy(v2, "chat.role.user");
  v2[15] = -18;
  uint64_t v13 = &v2[*(int *)(v0 + 24)];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  outlined assign with take of Locale?((uint64_t)v6, v12, &demangling cache variable for type metadata for Locale?);
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v2, v9, type metadata accessor for Prompt.SpecialToken);
  return outlined destroy of SingleValueDecodingContainer?((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.user(locale:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v8 = (uint64_t)&a2[*(int *)(v7 + 20)];
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  strcpy(a2, "chat.role.user");
  a2[15] = -18;
  uint64_t v10 = &a2[*(int *)(v7 + 24)];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  return outlined assign with take of Locale?((uint64_t)v6, v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.user.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for user, (uint64_t)static Prompt.SpecialToken.Chat.user, a1);
}

uint64_t one-time initialization function for tool()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - v7;
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.Chat.tool);
  uint64_t v9 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.Chat.tool);
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v8, 1, 1, v10);
  outlined init with copy of Locale?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v12 = (uint64_t)&v2[*(int *)(v0 + 20)];
  v11((char *)v12, 1, 1, v10);
  strcpy(v2, "chat.role.tool");
  v2[15] = -18;
  uint64_t v13 = &v2[*(int *)(v0 + 24)];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  outlined assign with take of Locale?((uint64_t)v6, v12, &demangling cache variable for type metadata for Locale?);
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v2, v9, type metadata accessor for Prompt.SpecialToken);
  return outlined destroy of SingleValueDecodingContainer?((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v5;

  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.ToolUse.tool);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.ToolUse.tool);
  uint64_t v2 = v1 + *(int *)(v0 + 20);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  strcpy((char *)v1, "tooluse.tool");
  *(unsigned char *)(v1 + 13) = 0;
  *(_WORD *)(v1 + 14) = -5120;
  uint64_t v5 = (void *)(v1 + *(int *)(v0 + 24));
  void *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t static Prompt.SpecialToken.Chat.tool(locale:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v8 = (uint64_t)&a2[*(int *)(v7 + 20)];
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  strcpy(a2, "chat.role.tool");
  a2[15] = -18;
  uint64_t v10 = &a2[*(int *)(v7 + 24)];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  return outlined assign with take of Locale?((uint64_t)v6, v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.tool.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for tool, (uint64_t)static Prompt.SpecialToken.Chat.tool, a1);
}

uint64_t one-time initialization function for turnEnd()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (uint64_t *)((char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - v7;
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.Chat.turnEnd);
  uint64_t v9 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.Chat.turnEnd);
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v8, 1, 1, v10);
  outlined init with copy of Locale?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v12 = (uint64_t)v2 + *(int *)(v0 + 20);
  v11((char *)v12, 1, 1, v10);
  *uint64_t v2 = 0xD000000000000016;
  v2[1] = 0x800000025FA3E580;
  uint64_t v13 = (void *)((char *)v2 + *(int *)(v0 + 24));
  void *v13 = 0;
  v13[1] = 0;
  outlined assign with take of Locale?((uint64_t)v6, v12, &demangling cache variable for type metadata for Locale?);
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v2, v9, type metadata accessor for Prompt.SpecialToken);
  return outlined destroy of SingleValueDecodingContainer?((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.turnEnd(locale:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v8 = (uint64_t)a2 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *a2 = 0xD000000000000016;
  a2[1] = 0x800000025FA3E580;
  uint64_t v10 = (void *)((char *)a2 + *(int *)(v7 + 24));
  *uint64_t v10 = 0;
  v10[1] = 0;
  return outlined assign with take of Locale?((uint64_t)v6, v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.turnEnd.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for turnEnd, (uint64_t)static Prompt.SpecialToken.Chat.turnEnd, a1);
}

uint64_t one-time initialization function for defaultInstructions()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (uint64_t *)((char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - v7;
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.Chat.defaultInstructions);
  uint64_t v9 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.Chat.defaultInstructions);
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v8, 1, 1, v10);
  outlined init with copy of Locale?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v12 = (uint64_t)v2 + *(int *)(v0 + 20);
  v11((char *)v12, 1, 1, v10);
  *uint64_t v2 = 0xD000000000000018;
  v2[1] = 0x800000025FA3E5A0;
  uint64_t v13 = (void *)((char *)v2 + *(int *)(v0 + 24));
  void *v13 = 0;
  v13[1] = 0;
  outlined assign with take of Locale?((uint64_t)v6, v12, &demangling cache variable for type metadata for Locale?);
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v2, v9, type metadata accessor for Prompt.SpecialToken);
  return outlined destroy of SingleValueDecodingContainer?((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.defaultInstructions(locale:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v8 = (uint64_t)a2 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *a2 = 0xD000000000000018;
  a2[1] = 0x800000025FA3E5A0;
  uint64_t v10 = (void *)((char *)a2 + *(int *)(v7 + 24));
  *uint64_t v10 = 0;
  v10[1] = 0;
  return outlined assign with take of Locale?((uint64_t)v6, v8, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.SpecialToken.Chat.defaultInstructions.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for defaultInstructions, (uint64_t)static Prompt.SpecialToken.Chat.defaultInstructions, a1);
}

uint64_t one-time initialization function for actionStart()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.ToolUse.actionStart);
  uint64_t v1 = (void *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.ToolUse.actionStart);
  uint64_t v2 = (char *)v1 + *(int *)(v0 + 20);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  void *v1 = 0xD000000000000014;
  v1[1] = 0x800000025FA3E5E0;
  uint64_t v5 = (void *)((char *)v1 + *(int *)(v0 + 24));
  void *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t static Prompt.SpecialToken.ToolUse.actionStart.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for actionStart, (uint64_t)static Prompt.SpecialToken.ToolUse.actionStart, a1);
}

uint64_t one-time initialization function for actionEnd()
{
  uint64_t v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.ToolUse.actionEnd);
  uint64_t v1 = (void *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.ToolUse.actionEnd);
  uint64_t v2 = (char *)v1 + *(int *)(v0 + 20);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  void *v1 = 0xD000000000000012;
  v1[1] = 0x800000025FA3E5C0;
  uint64_t v5 = (void *)((char *)v1 + *(int *)(v0 + 24));
  void *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t static Prompt.SpecialToken.ToolUse.actionEnd.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for actionEnd, (uint64_t)static Prompt.SpecialToken.ToolUse.actionEnd, a1);
}

uint64_t static Prompt.SpecialToken.ToolUse.tool.getter@<X0>(uint64_t a1@<X8>)
{
  return static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for tool, (uint64_t)static Prompt.SpecialToken.ToolUse.tool, a1);
}

uint64_t static Prompt.SpecialToken.endPrompt.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  return _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v6, a3, type metadata accessor for Prompt.SpecialToken);
}

uint64_t static Prompt.SpecialToken.ToolUse.toolCall(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v7 = a3 + *(int *)(v6 + 20);
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  strcpy((char *)a3, "tooluse.tool");
  *(unsigned char *)(a3 + 13) = 0;
  *(_WORD *)(a3 + 14) = -5120;
  uint64_t v9 = (void *)(a3 + *(int *)(v6 + 24));
  *uint64_t v9 = a1;
  v9[1] = a2;
  return swift_bridgeObjectRetain();
}

void Prompt.SpecialToken.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with copy of Locale?(v1 + *(int *)(v9 + 20), (uint64_t)v8, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  if (*(void *)(v1 + *(int *)(v9 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int Prompt.SpecialToken.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with copy of Locale?(v1 + *(int *)(v9 + 20), (uint64_t)v8, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  if (*(void *)(v1 + *(int *)(v9 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Prompt.SpecialToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.hash(into:)();
  outlined init with copy of Locale?(v4 + *(int *)(a2 + 20), (uint64_t)v11, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  if (*(void *)(v4 + *(int *)(a2 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.SpecialToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  String.hash(into:)();
  outlined init with copy of Locale?(v4 + *(int *)(a2 + 20), (uint64_t)v11, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  if (*(void *)(v4 + *(int *)(a2 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Prompt.Delimiter.token.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v1, a1, type metadata accessor for Prompt.SpecialToken);
}

uint64_t Prompt.Delimiter.token.setter(uint64_t a1)
{
  return outlined assign with take of Prompt.SpecialToken(a1, v1, type metadata accessor for Prompt.SpecialToken);
}

uint64_t (*Prompt.Delimiter.token.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Delimiter.position.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Prompt.Delimiter(0) + 20));
}

uint64_t Prompt.Delimiter.position.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for Prompt.Delimiter(0);
  *(void *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*Prompt.Delimiter.position.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Delimiter.priority.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Prompt.Delimiter(0) + 24));
}

uint64_t Prompt.Delimiter.priority.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for Prompt.Delimiter(0);
  *(void *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Prompt.Delimiter.priority.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Delimiter.init(token:position:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(a1, a3, type metadata accessor for Prompt.SpecialToken);
  uint64_t result = type metadata accessor for Prompt.Delimiter(0);
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  *(void *)(a3 + *(int *)(result + 24)) = -1;
  return result;
}

uint64_t Prompt.Delimiter.init(token:position:priority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(a1, a4, type metadata accessor for Prompt.SpecialToken);
  uint64_t result = type metadata accessor for Prompt.Delimiter(0);
  *(void *)(a4 + *(int *)(result + 20)) = a2;
  *(void *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

void Prompt.Delimiter.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.hash(into:)();
  uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with copy of Locale?(v1 + *(int *)(v9 + 20), (uint64_t)v8, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  if (*(void *)(v1 + *(int *)(v9 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v10 = type metadata accessor for Prompt.Delimiter(0);
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v10 + 20)));
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v10 + 24)));
}

BOOL static Prompt.Delimiter.== infix(_:_:)(void *a1, void *a2)
{
  if ((specialized static Prompt.SpecialToken.== infix(_:_:)(a1, a2) & 1) != 0
    && (uint64_t v4 = type metadata accessor for Prompt.Delimiter(0),
        *(void *)((char *)a1 + *(int *)(v4 + 20)) == *(void *)((char *)a2 + *(int *)(v4 + 20))))
  {
    return *(void *)((char *)a1 + *(int *)(v4 + 24)) == *(void *)((char *)a2 + *(int *)(v4 + 24));
  }
  else
  {
    return 0;
  }
}

Swift::Int Prompt.Delimiter.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with copy of Locale?(v1 + *(int *)(v9 + 20), (uint64_t)v8, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  if (*(void *)(v1 + *(int *)(v9 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v10 = type metadata accessor for Prompt.Delimiter(0);
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v10 + 20)));
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v10 + 24)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Prompt.Delimiter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.hash(into:)();
  uint64_t v12 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with copy of Locale?(v4 + *(int *)(v12 + 20), (uint64_t)v11, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  if (*(void *)(v4 + *(int *)(v12 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(void *)(v4 + *(int *)(a2 + 20)));
  Hasher._combine(_:)(*(void *)(v4 + *(int *)(a2 + 24)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Delimiter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v12 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with copy of Locale?(v4 + *(int *)(v12 + 20), (uint64_t)v11, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  if (*(void *)(v4 + *(int *)(v12 + 24) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(void *)(v4 + *(int *)(a2 + 20)));
  Hasher._combine(_:)(*(void *)(v4 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.Delimiter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Prompt.SpecialToken.== infix(_:_:)() & 1) != 0
      && *(void *)(a1 + *(int *)(a3 + 20)) == *(void *)(a2 + *(int *)(a3 + 20))
      && *(void *)(a1 + *(int *)(a3 + 24)) == *(void *)(a2 + *(int *)(a3 + 24));
}

uint64_t Prompt.Attachment.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  return outlined copy of Data._Representation(v2, v3);
}

uint64_t Prompt.Attachment.content.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t result = outlined consume of Data._Representation(*(void *)(v1 + 8), *(void *)(v1 + 16));
  *(unsigned char *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(void *)(v1 + 16) = v4;
  return result;
}

uint64_t (*Prompt.Attachment.content.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Attachment.position.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t Prompt.Attachment.position.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*Prompt.Attachment.position.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Attachment.priority.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Prompt.Attachment.priority.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*Prompt.Attachment.priority.modify())()
{
  return AutomationJSON.responses.modify;
}

__n128 Prompt.Attachment.init(content:position:priority:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = *(unsigned char *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a4 + 8) = result;
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  return result;
}

void Prompt.Attachment.hash(into:)()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
}

uint64_t static Prompt.AttachmentContent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)a2;
  v6[0] = *(unsigned char *)a1;
  long long v7 = *(_OWORD *)(a1 + 8);
  v4[0] = v2;
  long long v5 = *(_OWORD *)(a2 + 8);
  return specialized static Prompt.ImageAttachment.== infix(_:_:)(v6, v4) & 1;
}

Swift::Int Prompt.Attachment.hashValue.getter()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.Attachment()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Prompt.Attachment()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Attachment()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t Prompt.AttachmentContent.hash(into:)()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v3);
}

Swift::Int Prompt.AttachmentContent.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.AttachmentContent()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Prompt.AttachmentContent()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.AttachmentContent()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.AttachmentContent(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)a2;
  v6[0] = *(unsigned char *)a1;
  long long v7 = *(_OWORD *)(a1 + 8);
  v4[0] = v2;
  long long v5 = *(_OWORD *)(a2 + 8);
  return specialized static Prompt.ImageAttachment.== infix(_:_:)(v6, v4) & 1;
}

void Prompt.ImageAttachment.format.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Prompt.ImageAttachment.format.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*Prompt.ImageAttachment.format.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.ImageAttachment.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t Prompt.ImageAttachment.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*Prompt.ImageAttachment.data.modify())()
{
  return AutomationJSON.responses.modify;
}

unsigned char *Prompt.ImageAttachment.init(format:data:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = *result;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  return result;
}

BOOL static Prompt.ImageAttachment.Format.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Prompt.ImageAttachment.Format.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Prompt.ImageAttachment.Format.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Prompt.ImageAttachment.hash(into:)()
{
  uint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Hasher._combine(_:)(*v0);
  outlined copy of Data._Representation(v1, v2);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v1, v2);
}

Swift::Int Prompt.ImageAttachment.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Data.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.ImageAttachment()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Data.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Prompt.ImageAttachment()
{
  Hasher._combine(_:)(*v0);
  return Data.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.ImageAttachment()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Data.hash(into:)();
  return Hasher._finalize()();
}

uint64_t static Prompt.+= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  MEMORY[0x261202900](0);
  Swift::UInt v4 = (void *)MEMORY[0x263F8EE78];
  v6[2] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, MEMORY[0x263F8EE78]);
  v6[3] = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, v4);
  Prompt.StringInterpolation.appendInterpolation(token:)(a2);
  specialized static Prompt.+= infix(_:_:)(a1, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

TokenGeneration::Prompt::StringInterpolation __swiftcall Prompt.StringInterpolation.init(literalCapacity:interpolationCount:)(Swift::Int literalCapacity, Swift::Int interpolationCount)
{
  Swift::UInt v4 = v2;
  *unint64_t v2 = 0;
  v2[1] = 0xE000000000000000;
  MEMORY[0x261202900](literalCapacity);
  Swift::Int v5 = interpolationCount & ~(interpolationCount >> 63);
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  v4[2] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0, MEMORY[0x263F8EE78]);
  long long v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0, v6);
  v4[3] = v7;
  result.attachments._rawValue = v10;
  result.delimiters._rawValue = v9;
  result.result._unint64_t object = v8;
  result.result._uint64_t countAndFlagsBits = (uint64_t)v7;
  return result;
}

uint64_t Prompt.StringInterpolation.appendInterpolation(token:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Prompt.Delimiter(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  long long v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v19 - v8;
  _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(a1, (uint64_t)&v19 - v8, type metadata accessor for Prompt.SpecialToken);
  uint64_t v10 = String.count.getter();
  unint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(*(void *)(v1 + 24) + 16);
  BOOL v14 = __OFADD__(v12, v13);
  uint64_t v15 = v12 + v13;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    *(void *)&v9[*(int *)(v3 + 20)] = v10;
    *(void *)&v9[*(int *)(v3 + 24)] = v15;
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v9, (uint64_t)v7, type metadata accessor for Prompt.Delimiter);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 + 1, 1, v11);
LABEL_3:
  unint64_t v17 = *(void *)(v11 + 16);
  unint64_t v16 = *(void *)(v11 + 24);
  if (v17 >= v16 >> 1) {
    unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1, v11);
  }
  *(void *)(v11 + 16) = v17 + 1;
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v7, v11+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v17, type metadata accessor for Prompt.Delimiter);
  *(void *)(v1 + 16) = v11;
  return _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v9, type metadata accessor for Prompt.Delimiter);
}

TokenGeneration::Prompt __swiftcall Prompt.init(stringInterpolation:)(TokenGeneration::Prompt stringInterpolation)
{
  uint64_t v2 = *(void *)(stringInterpolation.string._countAndFlagsBits + 24);
  *(void *)uint64_t v1 = *(void *)stringInterpolation.string._countAndFlagsBits;
  *(_OWORD *)(v1 + 8) = *(_OWORD *)(stringInterpolation.string._countAndFlagsBits + 8);
  *(void *)(v1 + 24) = v2;
  return stringInterpolation;
}

uint64_t Prompt.StringInterpolation.appendInterpolation(image:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  unint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *v1;
  outlined copy of Data._Representation(v3, v4);
  uint64_t v6 = String.count.getter();
  long long v7 = (void *)v1[3];
  uint64_t v8 = *(void *)(v1[2] + 16);
  uint64_t v9 = v7[2];
  uint64_t v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v6;
    outlined copy of Data._Representation(v3, v4);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  long long v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 + 1, 1, v7);
LABEL_3:
  unint64_t v12 = v7[2];
  unint64_t v11 = v7[3];
  if (v12 >= v11 >> 1) {
    long long v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v7);
  }
  v7[2] = v12 + 1;
  uint64_t v13 = &v7[5 * v12];
  *((unsigned char *)v13 + 32) = v2;
  v13[5] = v3;
  v13[6] = v4;
  v13[7] = v5;
  v13[8] = v10;
  uint64_t result = outlined consume of Data._Representation(v3, v4);
  v1[3] = (uint64_t)v7;
  return result;
}

uint64_t static Prompt.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v5[2] = MEMORY[0x263F8EE78];
  v5[3] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized static Prompt.+= infix(_:_:)(a1, v5);
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

void static Prompt.+ infix(_:_:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 24);
  *a3 = *a1;
  a3[1] = v4;
  a3[2] = v5;
  a3[3] = v6;
  uint64_t v9 = v7;
  long long v10 = *(_OWORD *)(a2 + 8);
  uint64_t v11 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static Prompt.+= infix(_:_:)((uint64_t)a3, &v9);
}

uint64_t static Prompt.+ infix(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  *a4 = *a1;
  a4[1] = v5;
  a4[2] = v6;
  a4[3] = v7;
  v9[0] = a2;
  v9[1] = a3;
  _OWORD v9[2] = MEMORY[0x263F8EE78];
  v9[3] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static Prompt.+= infix(_:_:)((uint64_t)a4, v9);
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t Prompt.string.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Prompt.string.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *char v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Prompt.string.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.delimiters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.delimiters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*Prompt.delimiters.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.attachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.attachments.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*Prompt.attachments.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.description.getter()
{
  uint64_t v48 = type metadata accessor for Prompt.Delimiter(0);
  uint64_t v1 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v3 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0[1];
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v53 = *v0;
  uint64_t v54 = v4;
  int64_t v7 = *(void *)(v6 + 16);
  uint64_t v46 = v5;
  if (v7)
  {
    uint64_t v50 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v8 = *(unsigned __int8 *)(v1 + 80);
    v45[1] = v6;
    uint64_t v9 = v6 + ((v8 + 32) & ~v8);
    uint64_t v47 = *(void **)(v1 + 72);
    long long v10 = (void *)v50;
    do
    {
      _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v9, (uint64_t)v3, type metadata accessor for Prompt.Delimiter);
      uint64_t v11 = Prompt.SpecialToken.description.getter();
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)&v3[*(int *)(v48 + 20)];
      uint64_t v15 = *(void *)&v3[*(int *)(v48 + 24)];
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v3, type metadata accessor for Prompt.Delimiter);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1);
        long long v10 = (void *)v50;
      }
      unint64_t v17 = v10[2];
      unint64_t v16 = v10[3];
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        long long v10 = (void *)v50;
      }
      id v10[2] = v17 + 1;
      uint64_t v18 = &v10[4 * v17];
      v18[4] = v11;
      v18[5] = v13;
      v18[6] = v14;
      v18[7] = v15;
      v9 += (uint64_t)v47;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    uint64_t v5 = v46;
  }
  else
  {
    swift_bridgeObjectRetain();
    long long v10 = (void *)MEMORY[0x263F8EE78];
  }
  int64_t v19 = *(void *)(v5 + 16);
  uint64_t v20 = MEMORY[0x263F8EE78];
  if (v19)
  {
    uint64_t v47 = v10;
    uint64_t v52 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v20 = v52;
    Swift::String v21 = (void *)(v5 + 64);
    while (2)
    {
      char v22 = *((unsigned char *)v21 - 32);
      uint64_t v23 = *(v21 - 3);
      unint64_t v24 = *(v21 - 2);
      uint64_t v25 = *v21;
      uint64_t v48 = *(v21 - 1);
      uint64_t v50 = 0;
      unint64_t v51 = 0xE000000000000000;
      outlined copy of Data._Representation(v23, v24);
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      uint64_t v50 = 0x3A6567616D693C3CLL;
      unint64_t v51 = 0xE800000000000000;
      LOBYTE(v49) = v22;
      v26._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 58;
      v27._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      v21 += 5;
      uint64_t v28 = 0;
      switch(v24 >> 62)
      {
        case 1uLL:
          LODWORD(v28) = HIDWORD(v23) - v23;
          if (__OFSUB__(HIDWORD(v23), v23)) {
            goto LABEL_28;
          }
          uint64_t v28 = (int)v28;
LABEL_17:
          uint64_t v49 = v28;
          v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v32);
          swift_bridgeObjectRelease();
          v33._uint64_t countAndFlagsBits = 0x3E3E7365747962;
          v33._unint64_t object = (void *)0xE700000000000000;
          String.append(_:)(v33);
          outlined consume of Data._Representation(v23, v24);
          unint64_t v34 = (void *)v50;
          unint64_t v35 = v51;
          uint64_t v52 = v20;
          unint64_t v37 = *(void *)(v20 + 16);
          unint64_t v36 = *(void *)(v20 + 24);
          if (v37 >= v36 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
            uint64_t v20 = v52;
          }
          *(void *)(v20 + 16) = v37 + 1;
          uint64_t v38 = (void *)(v20 + 32 * v37);
          v38[4] = v34;
          v38[5] = v35;
          v38[6] = v48;
          v38[7] = v25;
          if (--v19) {
            continue;
          }
          swift_bridgeObjectRelease();
          long long v10 = v47;
          break;
        case 2uLL:
          uint64_t v30 = *(void *)(v23 + 16);
          uint64_t v29 = *(void *)(v23 + 24);
          BOOL v31 = __OFSUB__(v29, v30);
          uint64_t v28 = v29 - v30;
          if (!v31) {
            goto LABEL_17;
          }
          goto LABEL_27;
        case 3uLL:
          goto LABEL_17;
        default:
          uint64_t v28 = BYTE6(v24);
          goto LABEL_17;
      }
      break;
    }
  }
  uint64_t v50 = (uint64_t)v10;
  specialized Array.append<A>(contentsOf:)(v20);
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((void **)&v50);
  swift_bridgeObjectRelease();
  uint64_t v39 = (void *)v50;
  uint64_t v40 = *(void *)(v50 + 16);
  if (v40)
  {
    unint64_t v41 = (void *)(v50 + 32 * v40 + 16);
    do
    {
      if (v40 > v39[2])
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        swift_release();
        __break(1u);
        JUMPOUT(0x25F9C130CLL);
      }
      --v40;
      unint64_t v43 = (void *)*(v41 - 2);
      unint64_t v42 = *(v41 - 1);
      v41 -= 4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.index(_:offsetBy:)();
      swift_bridgeObjectRelease();
      uint64_t v50 = (uint64_t)v43;
      unint64_t v51 = v42;
      lazy protocol witness table accessor for type String and conformance String();
      String.insert<A>(contentsOf:at:)();
      swift_bridgeObjectRelease();
    }
    while (v40);
  }
  swift_release();
  return v53;
}

TokenGeneration::Prompt __swiftcall Prompt.init(string:delimiters:attachments:)(Swift::String string, Swift::OpaquePointer delimiters, Swift::OpaquePointer attachments)
{
  *(Swift::String *)uint64_t v3 = string;
  *(Swift::OpaquePointer *)(v3 + 16) = delimiters;
  *(Swift::OpaquePointer *)(v3 + 24) = attachments;
  result.string = string;
  result.attachments = attachments;
  result.delimiters = delimiters;
  return result;
}

TokenGeneration::Prompt __swiftcall Prompt.init(string:delimiters:)(Swift::String string, Swift::OpaquePointer delimiters)
{
  *(Swift::String *)uint64_t v2 = string;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(Swift::OpaquePointer *)(v2 + 16) = delimiters;
  *(void *)(v2 + 24) = v3;
  result.string = string;
  result.delimiters = delimiters;
  return result;
}

TokenGeneration::Prompt __swiftcall Prompt.init(stringLiteral:)(Swift::String stringLiteral)
{
  Swift::String *v1 = stringLiteral;
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  v1[1]._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
  v1[1]._unint64_t object = v2;
  result.string = stringLiteral;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Prompt.render(tokenTable:)(Swift::OpaquePointer tokenTable)
{
  uint64_t v30 = type metadata accessor for Prompt.Delimiter(0);
  uint64_t v3 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  long long v10 = (void *)v1[1];
  uint64_t v11 = v1[2];
  if (*(void *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Delimiter>);
    unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_25FA352B0;
    uint64_t v13 = v11 + v12;
    uint64_t v14 = one-time initialization token for endPrompt;
    swift_bridgeObjectRetain();
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v15 = __swift_project_value_buffer(v6, (uint64_t)static Prompt.SpecialToken.endPrompt);
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v15, (uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
    uint64_t v16 = String.count.getter();
    _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v8, v13, type metadata accessor for Prompt.SpecialToken);
    uint64_t v17 = v30;
    *(void *)(v13 + *(int *)(v30 + 20)) = v16;
    *(void *)(v13 + *(int *)(v17 + 24)) = 0;
  }
  uint64_t v33 = v9;
  unint64_t v34 = v10;
  swift_bridgeObjectRelease();
  uint64_t v18 = v9;
  uint64_t v19 = *(void *)(v11 + 16);
  if (v19)
  {
    unint64_t v35 = v11 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    while (v19 <= *(void *)(v11 + 16))
    {
      --v19;
      _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v35 + *(void *)(v3 + 72) * v19, (uint64_t)v5, type metadata accessor for Prompt.Delimiter);
      if (!*((void *)tokenTable._rawValue + 2)
        || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v21 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for GenerationError();
        lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (void (*)(uint64_t))type metadata accessor for GenerationError);
        swift_allocError();
        _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v5, v26, type metadata accessor for Prompt.SpecialToken);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v25 = _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v5, type metadata accessor for Prompt.Delimiter);
        goto LABEL_14;
      }
      char v22 = (uint64_t *)(*((void *)tokenTable._rawValue + 7) + 16 * v20);
      long long v10 = (void *)v11;
      uint64_t v23 = v3;
      uint64_t v24 = *v22;
      uint64_t v18 = v22[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.index(_:offsetBy:)();
      swift_bridgeObjectRelease();
      uint64_t v31 = v24;
      uint64_t v32 = v18;
      uint64_t v3 = v23;
      uint64_t v11 = (uint64_t)v10;
      lazy protocol witness table accessor for type String and conformance String();
      String.insert<A>(contentsOf:at:)();
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v5, type metadata accessor for Prompt.Delimiter);
      swift_bridgeObjectRelease();
      if (!v19)
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = v33;
        long long v10 = v34;
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = v18;
LABEL_14:
  Swift::String v27 = v10;
  result._unint64_t object = v27;
  result._uint64_t countAndFlagsBits = v25;
  return result;
}

void *Prompt.renderPromptFragments(tokenTable:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for Prompt.RenderedPromptFragment(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (void *)((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v24 = *(void **)v1;
  long long v25 = *(_OWORD *)(v1 + 8);
  uint64_t v26 = v8;
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v11 = &v24;
  unint64_t v12 = Prompt.renderPromptFragments(tokenTable:localizationOverrideMap:)(a1, v10);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    int64_t isa = (int64_t)v12[2].isa;
    if (isa)
    {
      uint64_t v27 = 0;
      uint64_t v24 = v9;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, isa, 0);
      uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
      v23[1] = v12;
      uint64_t v15 = (uint64_t)v12 + ((v14 + 32) & ~v14);
      uint64_t v16 = *(void *)(v5 + 72);
      uint64_t v11 = v24;
      do
      {
        _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v15, (uint64_t)v7, type metadata accessor for Prompt.RenderedPromptFragment);
        uint64_t v17 = *v7;
        uint64_t v18 = v7[1];
        swift_bridgeObjectRetain();
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v7, type metadata accessor for Prompt.RenderedPromptFragment);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1);
          uint64_t v11 = v24;
        }
        unint64_t v20 = v11[2];
        unint64_t v19 = v11[3];
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          uint64_t v11 = v24;
        }
        void v11[2] = v20 + 1;
        char v21 = &v11[2 * v20];
        v21[4] = v17;
        v21[5] = v18;
        v15 += v16;
        --isa;
      }
      while (isa);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v11;
}

NSObject *Prompt.renderPromptFragments(tokenTable:localizationOverrideMap:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.RenderedPromptFragment?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Prompt.RenderedPromptFragment(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v88 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  unint64_t v87 = (char *)&v71 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v76 = (uint64_t)&v71 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v75 = (uint64_t)&v71 - v16;
  uint64_t v17 = type metadata accessor for Prompt.Delimiter(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v90 = (uint64_t *)((char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v86 = type metadata accessor for Prompt.PromptFragment(0);
  uint64_t v72 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v89 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *v2;
  uint64_t v80 = v2[1];
  uint64_t v81 = v20;
  uint64_t v21 = v2[2];
  uint64_t v78 = v2[3];
  uint64_t v79 = v21;
  if (one-time initialization token for prompt != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Log.prompt);
  swift_bridgeObjectRetain_n();
  uint64_t v83 = v23;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v84 = a2;
  uint64_t v85 = v8;
  unint64_t v91 = (uint64_t *)v7;
  uint64_t v77 = a1;
  if (v26)
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v92 = v28;
    *(_DWORD *)uint64_t v27 = 136642819;
    uint64_t v74 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 4);
    type metadata accessor for Prompt.SpecialToken(0);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, (void (*)(uint64_t))type metadata accessor for Prompt.SpecialToken);
    swift_bridgeObjectRetain();
    uint64_t v29 = Dictionary.description.getter();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v92);
    a2 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25F950000, v24, v25, "Token table: %{sensitive}s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2612040B0](v28, -1, -1);
    MEMORY[0x2612040B0](v27, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v92 = v35;
    *(_DWORD *)unint64_t v34 = 136642819;
    type metadata accessor for Prompt.SpecialToken(0);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, (void (*)(uint64_t))type metadata accessor for Prompt.SpecialToken);
    uint64_t v36 = Dictionary.description.getter();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a2 = v84;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25F950000, v32, v33, "Localization override map: %{sensitive}s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2612040B0](v35, -1, -1);
    MEMORY[0x2612040B0](v34, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v39 = v91;
  uint64_t v40 = v82;
  uint64_t v92 = v81;
  uint64_t v93 = v80;
  uint64_t v94 = v79;
  uint64_t v95 = v78;
  unint64_t v41 = Prompt.promptFragments()();
  if (!v40)
  {
    uint64_t v43 = *(void *)(v41 + 16);
    if (!v43)
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    uint64_t v83 = 0;
    unint64_t v44 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
    unint64_t v71 = v41;
    uint64_t v45 = v41 + v44;
    uint64_t v73 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v74 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v82 = *(void *)(v72 + 72);
    uint64_t v32 = MEMORY[0x263F8EE78];
    uint64_t v46 = (uint64_t *)v89;
    while (1)
    {
      _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v45, (uint64_t)v46, type metadata accessor for Prompt.PromptFragment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v49 = v90;
        _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v46, (uint64_t)v90, type metadata accessor for Prompt.Delimiter);
        uint64_t v50 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v77);
        uint64_t v92 = v81;
        uint64_t v93 = v80;
        uint64_t v94 = v79;
        uint64_t v95 = v78;
        uint64_t v51 = v83;
        uint64_t v52 = Prompt.renderDelimiter(delimiter:tokenTable:localizationOverrideMap:)(v49, v50, a2);
        uint64_t v83 = v51;
        if (v51)
        {
          swift_bridgeObjectRelease();
          _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v90, type metadata accessor for Prompt.Delimiter);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v32;
        }
        uint64_t v54 = v52;
        uint64_t v55 = v53;
        uint64_t v56 = v9;
        if (String.count.getter() <= 0)
        {
          uint64_t v57 = v85;
          (*v73)(v39, 1, 1, v85);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v57 = v85;
          uint64_t v58 = (uint64_t)v91 + *(int *)(v85 + 20);
          _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v90, v58, type metadata accessor for Prompt.SpecialToken);
          uint64_t v59 = type metadata accessor for Prompt.SpecialToken(0);
          uint64_t v60 = v58;
          uint64_t v39 = v91;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v60, 0, 1, v59);
          *uint64_t v39 = v54;
          v39[1] = v55;
          (*v73)(v39, 0, 1, v57);
        }
        a2 = v84;
        swift_bridgeObjectRelease();
        if ((*v74)(v39, 1, v57) == 1)
        {
          _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v90, type metadata accessor for Prompt.Delimiter);
          outlined destroy of SingleValueDecodingContainer?((uint64_t)v39, &demangling cache variable for type metadata for Prompt.RenderedPromptFragment?);
          uint64_t v9 = v56;
          goto LABEL_15;
        }
        uint64_t v68 = v75;
        _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v39, v75, type metadata accessor for Prompt.RenderedPromptFragment);
        _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v68, v76, type metadata accessor for Prompt.RenderedPromptFragment);
        uint64_t v9 = v56;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v32[2].isa + 1, 1, (unint64_t)v32);
        }
        unint64_t isa = (unint64_t)v32[2].isa;
        unint64_t v69 = (unint64_t)v32[3].isa;
        if (isa >= v69 >> 1) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, isa + 1, 1, (unint64_t)v32);
        }
        v32[2].unint64_t isa = (Class)(isa + 1);
        _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(v76, (uint64_t)v32+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * isa, type metadata accessor for Prompt.RenderedPromptFragment);
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_2(v75, type metadata accessor for Prompt.RenderedPromptFragment);
        uint64_t v47 = type metadata accessor for Prompt.Delimiter;
        uint64_t v48 = (uint64_t)v90;
      }
      else
      {
        uint64_t v61 = *v46;
        uint64_t v62 = v46[1];
        uint64_t v63 = v87;
        uint64_t v64 = &v87[*(int *)(v85 + 20)];
        uint64_t v65 = type metadata accessor for Prompt.SpecialToken(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v64, 1, 1, v65);
        *uint64_t v63 = v61;
        v63[1] = v62;
        _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v63, v88, type metadata accessor for Prompt.RenderedPromptFragment);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v32[2].isa + 1, 1, (unint64_t)v32);
        }
        unint64_t v67 = (unint64_t)v32[2].isa;
        unint64_t v66 = (unint64_t)v32[3].isa;
        if (v67 >= v66 >> 1) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1, (unint64_t)v32);
        }
        v32[2].unint64_t isa = (Class)(v67 + 1);
        _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(v88, (uint64_t)v32+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v67, type metadata accessor for Prompt.RenderedPromptFragment);
        uint64_t v47 = type metadata accessor for Prompt.RenderedPromptFragment;
        uint64_t v48 = (uint64_t)v87;
      }
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2(v48, v47);
      uint64_t v39 = v91;
LABEL_15:
      uint64_t v46 = (uint64_t *)v89;
      v45 += v82;
      if (!--v43)
      {
        swift_bridgeObjectRelease();
        return v32;
      }
    }
  }
  return v32;
}

uint64_t Prompt.RenderedPromptFragment.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Prompt.RenderedPromptFragment.text.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.RenderedPromptFragment.specialToken.getter@<X0>(uint64_t a1@<X8>)
{
  return Prompt.SpecialToken.locale.getter(type metadata accessor for Prompt.RenderedPromptFragment, &demangling cache variable for type metadata for Prompt.SpecialToken?, a1);
}

uint64_t Prompt.SpecialToken.locale.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1(0);
  return outlined init with copy of Locale?(v3 + *(int *)(v6 + 20), a3, a2);
}

uint64_t Prompt.RenderedPromptFragment.specialToken.setter(uint64_t a1)
{
  return Prompt.SpecialToken.locale.setter(a1, type metadata accessor for Prompt.RenderedPromptFragment, &demangling cache variable for type metadata for Prompt.SpecialToken?);
}

uint64_t Prompt.SpecialToken.locale.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v6 = a2(0);
  return outlined assign with take of Locale?(a1, v3 + *(int *)(v6 + 20), a3);
}

uint64_t (*Prompt.RenderedPromptFragment.specialToken.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any));
  MEMORY[0x270FA5388](v50);
  uint64_t v3 = (char *)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, Any));
  MEMORY[0x270FA5388](v49);
  uint64_t v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v47 = (uint64_t)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v46 = (uint64_t)v41 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: String));
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v41 - v14;
  uint64_t v51 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, Any>);
    uint64_t v16 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v17 = *(void *)(v51 + 64);
  uint64_t v43 = v51 + 64;
  uint64_t v18 = -1 << *(unsigned char *)(v51 + 32);
  if (-v18 < 64) {
    uint64_t v19 = ~(-1 << -(char)v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v17;
  v41[1] = -1 << *(unsigned char *)(v51 + 32);
  int64_t v42 = (unint64_t)(63 - v18) >> 6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v52 = 0;
  uint64_t v44 = MEMORY[0x263F8EE58] + 8;
  for (i = v16; ; uint64_t result = (uint64_t)specialized _NativeDictionary._unsafeInsertNew(key:value:)(v36, v53, i))
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v52 << 6);
      goto LABEL_9;
    }
    int64_t v37 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v37 >= v42) {
      goto LABEL_27;
    }
    unint64_t v38 = *(void *)(v43 + 8 * v37);
    int64_t v39 = v52 + 1;
    if (!v38)
    {
      int64_t v39 = v52 + 2;
      if (v52 + 2 >= v42) {
        goto LABEL_27;
      }
      unint64_t v38 = *(void *)(v43 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = v52 + 3;
        if (v52 + 3 >= v42) {
          goto LABEL_27;
        }
        unint64_t v38 = *(void *)(v43 + 8 * v39);
        if (!v38)
        {
          int64_t v39 = v52 + 4;
          if (v52 + 4 >= v42) {
            goto LABEL_27;
          }
          unint64_t v38 = *(void *)(v43 + 8 * v39);
          if (!v38) {
            break;
          }
        }
      }
    }
LABEL_26:
    unint64_t v20 = (v38 - 1) & v38;
    unint64_t v23 = __clz(__rbit64(v38)) + (v39 << 6);
    int64_t v52 = v39;
LABEL_9:
    uint64_t v24 = v51;
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(*(void *)(v51 + 48) + *(void *)(v48 + 72) * v23, (uint64_t)v15, type metadata accessor for Prompt.SpecialToken);
    os_log_type_t v25 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v23);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = &v15[*(int *)(v10 + 48)];
    *(void *)uint64_t v28 = v26;
    *((void *)v28 + 1) = v27;
    outlined init with take of (key: Prompt.SpecialToken, value: String)((uint64_t)v15, (uint64_t)v13);
    uint64_t v29 = &v13[*(int *)(v10 + 48)];
    unint64_t v30 = &v3[*(int *)(v50 + 48)];
    _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v13, (uint64_t)v3, type metadata accessor for Prompt.SpecialToken);
    uint64_t v31 = *((void *)v29 + 1);
    *(void *)&v54[0] = *(void *)v29;
    *((void *)&v54[0] + 1) = v31;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t v32 = &v5[*(int *)(v49 + 48)];
    _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v3, (uint64_t)v5, type metadata accessor for Prompt.SpecialToken);
    outlined init with take of Any(v30, v32);
    uint64_t v33 = v46;
    _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v5, v46, type metadata accessor for Prompt.SpecialToken);
    outlined init with take of Any(v32, v54);
    uint64_t v34 = v33;
    uint64_t v35 = v47;
    _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(v34, v47, type metadata accessor for Prompt.SpecialToken);
    outlined init with take of Any(v54, v53);
    uint64_t v36 = v35;
    uint64_t v16 = i;
  }
  int64_t v40 = v52 + 5;
  if (v52 + 5 >= v42)
  {
LABEL_27:
    swift_release();
    outlined consume of [String : CharacterSet].Iterator._Variant();
    return (uint64_t)v16;
  }
  unint64_t v38 = *(void *)(v43 + 8 * v40);
  if (v38)
  {
    int64_t v39 = v52 + 5;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v39 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v39 >= v42) {
      goto LABEL_27;
    }
    unint64_t v38 = *(void *)(v43 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_26;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t Prompt.renderDelimiter(delimiter:tokenTable:localizationOverrideMap:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v102 = (uint64_t *)((char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v105 = (uint64_t *)((char *)&v96 - v13);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v106 = (uint64_t *)((char *)&v96 - v15);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (uint64_t *)((char *)&v96 - v17);
  uint64_t v20 = *a1;
  uint64_t v19 = a1[1];
  uint64_t v21 = (char *)&v96 + *(int *)(v16 + 20) - v17;
  uint64_t v22 = type metadata accessor for Locale();
  unint64_t v23 = v21;
  uint64_t v24 = (uint64_t)v8;
  uint64_t v25 = a2;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v23, 1, 1, v22);
  uint64_t *v18 = v20;
  v18[1] = v19;
  uint64_t v26 = (uint64_t *)((char *)v18 + *(int *)(v9 + 24));
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v103 = v9;
  outlined init with copy of Locale?((uint64_t)a1 + *(int *)(v9 + 20), v24, &demangling cache variable for type metadata for Locale?);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v104 = a3;
  uint64_t v27 = Prompt.getLocalizationOverrideValue(from:token:locale:)(a3, v18, v24);
  if (v28)
  {
    uint64_t v29 = v27;
    unint64_t v30 = v28;
    if (one-time initialization token for prompt != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.prompt);
    uint64_t v32 = v106;
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v18, (uint64_t)v106, type metadata accessor for Prompt.SpecialToken);
    swift_bridgeObjectRetain_n();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v101 = v24;
      uint64_t v37 = v36;
      uint64_t v100 = swift_slowAlloc();
      *(void *)&long long v109 = v100;
      *(_DWORD *)uint64_t v37 = 136643075;
      int v99 = v35;
      uint64_t v97 = v29;
      uint64_t v38 = (uint64_t)v32;
      uint64_t v39 = *v32;
      unint64_t v40 = v32[1];
      swift_bridgeObjectRetain();
      *(void *)&v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&v109);
      os_log_t v98 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2(v38, type metadata accessor for Prompt.SpecialToken);
      *(_WORD *)(v37 + 12) = 2085;
      swift_bridgeObjectRetain();
      uint64_t v29 = v97;
      *(void *)&v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v30, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v41 = v98;
      _os_log_impl(&dword_25F950000, v98, (os_log_type_t)v99, "Updating value of special token: %{sensitive}s to %{sensitive}s", (uint8_t *)v37, 0x16u);
      uint64_t v42 = v100;
      swift_arrayDestroy();
      MEMORY[0x2612040B0](v42, -1, -1);
      uint64_t v43 = v37;
      uint64_t v24 = v101;
      MEMORY[0x2612040B0](v43, -1, -1);
    }
    else
    {
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v32, type metadata accessor for Prompt.SpecialToken);

      swift_bridgeObjectRelease_n();
    }
    uint64_t v45 = v107;
    uint64_t v46 = v105;
    uint64_t v47 = v29;
    uint64_t v44 = v18;
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v18, (uint64_t)v105, type metadata accessor for Prompt.SpecialToken);
    uint64_t v110 = MEMORY[0x263F8D310];
    *(void *)&long long v109 = v47;
    *((void *)&v109 + 1) = v30;
    outlined init with take of Any(&v109, v108);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v25;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v108, v46, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = v111;
    swift_bridgeObjectRelease();
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v46, type metadata accessor for Prompt.SpecialToken);
  }
  else
  {
    uint64_t v44 = v18;
    uint64_t v45 = v107;
  }
  uint64_t v49 = Prompt.renderDelimiter(delimiter:tokenTable:)(a1, v25);
  uint64_t v51 = v50;
  swift_bridgeObjectRelease();
  if (v45) {
    goto LABEL_10;
  }
  if (one-time initialization token for localeInstruction != -1) {
    swift_once();
  }
  uint64_t v52 = v103;
  uint64_t v53 = (void *)__swift_project_value_buffer(v103, (uint64_t)static Prompt.SpecialToken.localeInstruction);
  uint64_t v54 = v104;
  uint64_t v55 = Prompt.getLocalizationOverrideValue(from:token:locale:)(v104, v53, v24);
  if (!v56) {
    goto LABEL_25;
  }
  uint64_t v57 = v56;
  uint64_t v107 = v55;
  if (one-time initialization token for localeInstructionInjectionLocation != -1) {
    swift_once();
  }
  uint64_t v58 = (void *)__swift_project_value_buffer(v52, (uint64_t)static Prompt.SpecialToken.localeInstructionInjectionLocation);
  uint64_t v59 = Prompt.getLocalizationOverrideValue(from:token:locale:)(v54, v58, v24);
  if (!v60)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v74 = v24;
    goto LABEL_26;
  }
  uint64_t v61 = v59;
  unint64_t v62 = v60;
  uint64_t v101 = v24;
  *(void *)&long long v109 = v59;
  *((void *)&v109 + 1) = v60;
  *(void *)&v108[0] = 58;
  *((void *)&v108[0] + 1) = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v63 = (void *)StringProtocol.components<A>(separatedBy:)();
  uint64_t v64 = v63;
  uint64_t v65 = v63[2];
  if (v65)
  {
    uint64_t v106 = (uint64_t *)v61;
    if (v63[4] == *v44 && v63[5] == v44[1] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v66 = (uint64_t)&v64[2 * v65 + 4];
      uint64_t v67 = *(void *)(v66 - 16);
      uint64_t v68 = *(void **)(v66 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v69._uint64_t countAndFlagsBits = v67;
      v69._unint64_t object = v68;
      Swift::Int v70 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Prompt.SpecialToken.LocaleInstructionPosition.init(rawValue:), v69);
      swift_bridgeObjectRelease();
      if (v70 == 1)
      {
        swift_bridgeObjectRelease();
        *(void *)&long long v109 = v49;
        *((void *)&v109 + 1) = v51;
        swift_bridgeObjectRetain();
        v83._uint64_t countAndFlagsBits = v107;
        v83._unint64_t object = v57;
        String.append(_:)(v83);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v73 = *((void *)&v109 + 1);
        uint64_t v49 = v109;
        unint64_t v71 = v102;
        goto LABEL_35;
      }
      unint64_t v71 = v102;
      if (!v70)
      {
        swift_bridgeObjectRelease();
        *(void *)&long long v109 = v107;
        *((void *)&v109 + 1) = v57;
        swift_bridgeObjectRetain();
        v72._uint64_t countAndFlagsBits = v49;
        v72._unint64_t object = v51;
        String.append(_:)(v72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v73 = *((void *)&v109 + 1);
        uint64_t v49 = v109;
LABEL_35:
        if (one-time initialization token for prompt != -1) {
          swift_once();
        }
        uint64_t v84 = type metadata accessor for Logger();
        __swift_project_value_buffer(v84, (uint64_t)static Log.prompt);
        _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v44, (uint64_t)v71, type metadata accessor for Prompt.SpecialToken);
        swift_bridgeObjectRetain_n();
        uint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.debug.getter();
        int v87 = v86;
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v88 = swift_slowAlloc();
          LODWORD(v105) = v87;
          uint64_t v89 = v88;
          uint64_t v106 = (uint64_t *)swift_slowAlloc();
          *(void *)&long long v109 = v106;
          *(_DWORD *)uint64_t v89 = 136643075;
          uint64_t v107 = (uint64_t)v44;
          uint64_t v90 = *v71;
          unint64_t v91 = v71[1];
          swift_bridgeObjectRetain();
          *(void *)&v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, (uint64_t *)&v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v71, type metadata accessor for Prompt.SpecialToken);
          *(_WORD *)(v89 + 12) = 2085;
          swift_bridgeObjectRetain();
          *(void *)&v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v73, (uint64_t *)&v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25F950000, v85, (os_log_type_t)v105, "Value of special token: %{sensitive}s after adding locale instruction: %{sensitive}s", (uint8_t *)v89, 0x16u);
          uint64_t v92 = (uint64_t)v106;
          swift_arrayDestroy();
          MEMORY[0x2612040B0](v92, -1, -1);
          MEMORY[0x2612040B0](v89, -1, -1);

          outlined destroy of SingleValueDecodingContainer?(v101, &demangling cache variable for type metadata for Locale?);
          uint64_t v75 = v107;
        }
        else
        {
          swift_bridgeObjectRelease_n();

          _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v71, type metadata accessor for Prompt.SpecialToken);
          outlined destroy of SingleValueDecodingContainer?(v101, &demangling cache variable for type metadata for Locale?);
          uint64_t v75 = (uint64_t)v44;
        }
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for prompt != -1) {
        swift_once();
      }
      uint64_t v93 = type metadata accessor for Logger();
      __swift_project_value_buffer(v93, (uint64_t)static Log.prompt);
      swift_bridgeObjectRetain();
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.error.getter();
      BOOL v94 = os_log_type_enabled(v78, v79);
      uint64_t v95 = (uint64_t)v106;
      if (v94)
      {
        uint64_t v80 = (uint8_t *)swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        *(void *)&long long v109 = v81;
        *(_DWORD *)uint64_t v80 = 136446210;
        uint64_t v49 = (uint64_t)(v80 + 4);
        swift_bridgeObjectRetain();
        *(void *)&v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v62, (uint64_t *)&v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v82 = "Invalid locale instruction injection location as position is not valid: %{public}s";
        goto LABEL_43;
      }
LABEL_44:

      swift_bridgeObjectRelease_n();
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v74 = v101;
LABEL_26:
    outlined destroy of SingleValueDecodingContainer?(v74, &demangling cache variable for type metadata for Locale?);
    uint64_t v75 = (uint64_t)v44;
LABEL_27:
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_2(v75, type metadata accessor for Prompt.SpecialToken);
    return v49;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for prompt != -1) {
    swift_once();
  }
  uint64_t v77 = type metadata accessor for Logger();
  __swift_project_value_buffer(v77, (uint64_t)static Log.prompt);
  swift_bridgeObjectRetain();
  uint64_t v78 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v78, v79)) {
    goto LABEL_44;
  }
  uint64_t v80 = (uint8_t *)swift_slowAlloc();
  uint64_t v81 = swift_slowAlloc();
  *(void *)&long long v109 = v81;
  *(_DWORD *)uint64_t v80 = 136446210;
  uint64_t v49 = (uint64_t)(v80 + 4);
  swift_bridgeObjectRetain();
  *(void *)&v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, (uint64_t *)&v109);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  uint64_t v82 = "Invalid locale instruction injection location as token identifier not provided: %{public}s";
LABEL_43:
  _os_log_impl(&dword_25F950000, v78, v79, v82, v80, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x2612040B0](v81, -1, -1);
  MEMORY[0x2612040B0](v80, -1, -1);

LABEL_45:
  uint64_t v24 = v101;
  type metadata accessor for GenerationError();
  lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (void (*)(uint64_t))type metadata accessor for GenerationError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
LABEL_10:
  outlined destroy of SingleValueDecodingContainer?(v24, &demangling cache variable for type metadata for Locale?);
  _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v44, type metadata accessor for Prompt.SpecialToken);
  return v49;
}

uint64_t Prompt.getLocalizationOverrideValue(from:token:locale:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Locale();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v17 & 1) == 0) {
    return 0;
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v16);
  outlined init with copy of Locale?(a3, (uint64_t)v11, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v11, &demangling cache variable for type metadata for Locale?);
    if (one-time initialization token for prompt != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.prompt);
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)a2, (uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v33 = v23;
      *(_DWORD *)uint64_t v22 = 136642819;
      uint64_t v24 = *v8;
      unint64_t v25 = v8[1];
      swift_bridgeObjectRetain();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
      _os_log_impl(&dword_25F950000, v20, v21, "Locale is not provided hence could not find localization override for special token: %{sensitive}s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2612040B0](v23, -1, -1);
      MEMORY[0x2612040B0](v22, -1, -1);
    }
    else
    {
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
    }

    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = specialized Set.init<A>(_:)(v18);
  specialized Set._Variant.insert(_:)(&v33, 28261, 0xE200000000000000);
  swift_bridgeObjectRelease();
  uint64_t v26 = closure #1 in Prompt.getLocalizationOverrideValue(from:token:locale:)();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  if (v28)
  {
    if (*(void *)(v18 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v28), (v30 & 1) != 0))
    {
      uint64_t v26 = *(void *)(*(void *)(v18 + 56) + 16 * v29);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v26 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    swift_bridgeObjectRelease();
  }
  return v26;
}

uint64_t Prompt.renderDelimiter(delimiter:tokenTable:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (void *)((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = (char *)v7 + *(int *)(v5 + 20);
  uint64_t v11 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *uint64_t v7 = v9;
  v7[1] = v8;
  uint64_t v12 = (void *)((char *)v7 + *(int *)(v4 + 24));
  *uint64_t v12 = 0;
  v12[1] = 0;
  uint64_t v13 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v13
    && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v15 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v14, (uint64_t)v26), (swift_dynamicCast() & 1) != 0))
  {
    v26[0] = v24;
    v26[1] = v25;
    uint64_t v24 = 0x7D7D64697B7BLL;
    unint64_t v25 = 0xE600000000000000;
    unint64_t v16 = (uint64_t *)((char *)a1 + *(int *)(v4 + 24));
    unint64_t v17 = v16[1];
    if (v17)
    {
      uint64_t v18 = *v16;
      unint64_t v19 = v17;
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
    }
    v23[0] = v18;
    v23[1] = v19;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v7, type metadata accessor for Prompt.SpecialToken);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = type metadata accessor for GenerationError();
    lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (void (*)(uint64_t))type metadata accessor for GenerationError);
    swift_allocError();
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)a1, v21, type metadata accessor for Prompt.SpecialToken);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v7, type metadata accessor for Prompt.SpecialToken);
  }
  return v20;
}

uint64_t closure #1 in Prompt.getLocalizationOverrideValue(from:token:locale:)()
{
  uint64_t v0 = type metadata accessor for Locale.Language();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = self;
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_25FA352B0;
  Locale.language.getter();
  uint64_t v8 = Locale.Language.minimalIdentifier.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v4, sel_preferredLocalizationsFromArray_forPreferences_, isa, v11);

  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v13 + 16))
  {
    uint64_t v14 = *(void *)(v13 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v14 = 0;
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t static Prompt.averageCharactersPerToken.getter()
{
  return 3;
}

Swift::Int __swiftcall Prompt.overestimatedTokenCount()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Swift::Int result = String.count.getter();
  double v3 = ceil((double)result / 3.0);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::Int result = (uint64_t)v3 + v4;
  if (__OFADD__((uint64_t)v3, v4)) {
LABEL_9:
  }
    __break(1u);
  return result;
}

uint64_t Prompt.StringInterpolation.appendInterpolation(if:token:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for Prompt.Delimiter(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  Class v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t result = a1(v12);
  if ((result & 1) == 0) {
    return result;
  }
  _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(a3, (uint64_t)v14, type metadata accessor for Prompt.SpecialToken);
  uint64_t v16 = String.count.getter();
  unint64_t v17 = *(void *)(v3 + 16);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v19 = *(void *)(*(void *)(v4 + 24) + 16);
  BOOL v20 = __OFADD__(v18, v19);
  uint64_t v21 = v18 + v19;
  if (v20)
  {
    __break(1u);
    goto LABEL_9;
  }
  *(void *)&v14[*(int *)(v7 + 20)] = v16;
  *(void *)&v14[*(int *)(v7 + 24)] = v21;
  _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v14, (uint64_t)v11, type metadata accessor for Prompt.Delimiter);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
  }
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, v17);
  unint64_t v23 = *(void *)(v17 + 16);
  unint64_t v22 = *(void *)(v17 + 24);
  if (v23 >= v22 >> 1) {
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v17);
  }
  *(void *)(v17 + 16) = v23 + 1;
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v11, v17+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v23, type metadata accessor for Prompt.Delimiter);
  *(void *)(v4 + 16) = v17;
  return _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v14, type metadata accessor for Prompt.Delimiter);
}

void *protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance Prompt.StringInterpolation@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  MEMORY[0x261202900]();
  int64_t v4 = a1 & ~(a1 >> 63);
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  a2[2] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0, MEMORY[0x263F8EE78]);
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0, v5);
  a2[3] = result;
  return result;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance Prompt.StringInterpolation(Swift::String *a1)
{
}

uint64_t Prompt.Rendering.originalPrompt.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Prompt.Rendering.renderedString.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Prompt.Rendering.segments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.Rendering.tokenIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.Rendering.detokenizedString.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Prompt.Rendering.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.Rendering.source.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  uint64_t v4 = v1[12];
  *a1 = v1[9];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void __swiftcall Prompt.Rendering.init(segments:renderedString:originalPrompt:tokenIDs:)(TokenGeneration::Prompt::Rendering *__return_ptr retstr, Swift::OpaquePointer segments, Swift::String renderedString, Swift::String originalPrompt, Swift::OpaquePointer tokenIDs)
{
  unint64_t object = originalPrompt._object;
  uint64_t countAndFlagsBits = originalPrompt._countAndFlagsBits;
  uint64_t v8 = renderedString._object;
  uint64_t v9 = renderedString._countAndFlagsBits;
  if (one-time initialization token for prompt != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.prompt);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    char v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v15 = 0;
    _os_log_impl(&dword_25F950000, v13, v14, "Using deprecated initialize: Prompt source will be bogus!", v15, 2u);
    MEMORY[0x2612040B0](v15, -1, -1);
  }

  uint64_t v16 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  retstr->originalPrompt._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->originalPrompt._unint64_t object = object;
  retstr->renderedString._uint64_t countAndFlagsBits = v9;
  retstr->renderedString._unint64_t object = v8;
  retstr->segments = segments;
  retstr->tokenIDs = tokenIDs;
  retstr->detokenizedString.value._uint64_t countAndFlagsBits = 0;
  retstr->detokenizedString.value._unint64_t object = 0;
  retstr->userInfo._rawValue = v16;
  retstr->source.identifier._uint64_t countAndFlagsBits = 0;
  retstr->source.identifier._unint64_t object = (void *)0xE000000000000000;
  retstr->source.version._uint64_t countAndFlagsBits = 0;
  retstr->source.version._unint64_t object = (void *)0xE000000000000000;
}

TokenGeneration::Prompt::Rendering::Source __swiftcall Prompt.Rendering.Source.init(identifier:version:)(Swift::String identifier, Swift::String version)
{
  *uint64_t v2 = identifier;
  v2[1] = version;
  result.version = version;
  result.identifier = identifier;
  return result;
}

void __swiftcall Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:)(TokenGeneration::Prompt::Rendering *__return_ptr retstr, TokenGeneration::Prompt::Rendering::Source source, Swift::OpaquePointer segments, Swift::String renderedString, Swift::String originalPrompt, Swift::OpaquePointer tokenIDs, Swift::OpaquePointer userInfo)
{
  Swift::String v7 = *(Swift::String *)source.identifier._countAndFlagsBits;
  uint64_t v8 = *(void *)(source.identifier._countAndFlagsBits + 16);
  uint64_t v9 = *(void **)(source.identifier._countAndFlagsBits + 24);
  retstr->originalPrompt._uint64_t countAndFlagsBits = (uint64_t)segments._rawValue;
  retstr->originalPrompt._unint64_t object = (void *)renderedString._countAndFlagsBits;
  retstr->renderedString._uint64_t countAndFlagsBits = source.version._countAndFlagsBits;
  retstr->renderedString._unint64_t object = source.version._object;
  retstr->segments._rawValue = source.identifier._object;
  retstr->tokenIDs._rawValue = renderedString._object;
  retstr->detokenizedString.value._uint64_t countAndFlagsBits = 0;
  retstr->detokenizedString.value._unint64_t object = 0;
  retstr->userInfo._rawValue = (void *)originalPrompt._countAndFlagsBits;
  retstr->source.identifier = v7;
  retstr->source.version._uint64_t countAndFlagsBits = v8;
  retstr->source.version._unint64_t object = v9;
}

void __swiftcall Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:detokenizedString:)(TokenGeneration::Prompt::Rendering *__return_ptr retstr, TokenGeneration::Prompt::Rendering::Source source, Swift::OpaquePointer segments, Swift::String renderedString, Swift::String originalPrompt, Swift::OpaquePointer tokenIDs, Swift::OpaquePointer userInfo, Swift::String_optional detokenizedString)
{
  Swift::String v8 = *(Swift::String *)source.identifier._countAndFlagsBits;
  uint64_t v9 = *(void *)(source.identifier._countAndFlagsBits + 16);
  uint64_t v10 = *(void **)(source.identifier._countAndFlagsBits + 24);
  retstr->originalPrompt._uint64_t countAndFlagsBits = (uint64_t)segments._rawValue;
  retstr->originalPrompt._unint64_t object = (void *)renderedString._countAndFlagsBits;
  retstr->renderedString._uint64_t countAndFlagsBits = source.version._countAndFlagsBits;
  retstr->renderedString._unint64_t object = source.version._object;
  retstr->segments._rawValue = source.identifier._object;
  retstr->tokenIDs._rawValue = renderedString._object;
  retstr->detokenizedString.value._uint64_t countAndFlagsBits = (uint64_t)originalPrompt._object;
  retstr->detokenizedString.value._unint64_t object = tokenIDs._rawValue;
  retstr->userInfo._rawValue = (void *)originalPrompt._countAndFlagsBits;
  retstr->source.identifier = v8;
  retstr->source.version._uint64_t countAndFlagsBits = v9;
  retstr->source.version._unint64_t object = v10;
}

uint64_t (*Prompt.Rendering.Source.identifier.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Rendering.Source.version.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Prompt.Rendering.Source.version.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Prompt.Rendering.Source.version.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Rendering.Source.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int Prompt.Rendering.Source.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.Rendering.Source()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Prompt.Rendering.Source()
{
  String.hash(into:)();
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Rendering.Source()
{
  return Hasher._finalize()();
}

uint64_t Prompt.Rendering.hash(into:)(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v3 = v1[5];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v4 + 16));
  uint64_t v7 = *(void *)(v4 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = v4 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v8 += 16;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(*(void *)(v3 + 16));
  uint64_t v9 = *(void *)(v3 + 16);
  if (v9)
  {
    uint64_t v10 = (Swift::UInt *)(v3 + 32);
    do
    {
      Swift::UInt v11 = *v10++;
      Hasher._combine(_:)(v11);
      --v9;
    }
    while (v9);
  }
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int Prompt.Rendering.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 96);
  *(_OWORD *)&v7[72] = *(_OWORD *)v0;
  uint64_t v8 = v1;
  long long v9 = *(_OWORD *)(v0 + 24);
  uint64_t v10 = v2;
  long long v4 = *(_OWORD *)(v0 + 64);
  long long v5 = *(_OWORD *)(v0 + 80);
  long long v11 = *(_OWORD *)(v0 + 48);
  long long v12 = v4;
  long long v13 = v5;
  uint64_t v14 = v3;
  Hasher.init(_seed:)();
  Prompt.Rendering.hash(into:)((uint64_t)v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.Rendering()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 96);
  *(_OWORD *)&v7[72] = *(_OWORD *)v0;
  uint64_t v8 = v1;
  long long v9 = *(_OWORD *)(v0 + 24);
  uint64_t v10 = v2;
  long long v4 = *(_OWORD *)(v0 + 64);
  long long v5 = *(_OWORD *)(v0 + 80);
  long long v11 = *(_OWORD *)(v0 + 48);
  long long v12 = v4;
  long long v13 = v5;
  uint64_t v14 = v3;
  Hasher.init(_seed:)();
  Prompt.Rendering.hash(into:)((uint64_t)v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Rendering()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 96);
  *(_OWORD *)&v7[72] = *(_OWORD *)v0;
  uint64_t v8 = v1;
  long long v9 = *(_OWORD *)(v0 + 24);
  uint64_t v10 = v2;
  long long v4 = *(_OWORD *)(v0 + 64);
  long long v5 = *(_OWORD *)(v0 + 80);
  long long v11 = *(_OWORD *)(v0 + 48);
  long long v12 = v4;
  long long v13 = v5;
  uint64_t v14 = v3;
  Hasher.init(_seed:)();
  Prompt.Rendering.hash(into:)((uint64_t)v7);
  return Hasher._finalize()();
}

uint64_t Prompt.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int Prompt.hashValue.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Prompt(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Prompt@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  uint64_t v3 = MEMORY[0x263F8EE78];
  a2[2] = MEMORY[0x263F8EE78];
  a2[3] = v3;
  return result;
}

__n128 protocol witness for ExpressibleByStringInterpolation.init(stringInterpolation:) in conformance Prompt@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)a2 = *(void *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = v2;
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  void *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for GenerationSchema();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  long long v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for Grammar(0);
      return outlined assign with take of Prompt.SpecialToken(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, type metadata accessor for Grammar);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  BOOL v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  void *v3;
  void *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  long long v11 = *(void *)(v8 + 16);
  long long v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    char v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    uint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  long long v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v19 = a1;
      *(unsigned char *)(v19 + 8) = a2 & 1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v21 = v18[7] + 16 * v12;
    *(void *)uint64_t v21 = a1;
    *(unsigned char *)(v21 + 8) = a2 & 1;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      long long v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v17 & 1) == (v23 & 1))
    {
      unint64_t v13 = v22;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)a2, (uint64_t)v10, type metadata accessor for Prompt.SpecialToken);
      return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  char v20 = (_OWORD *)(v19[7] + 32 * v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return outlined init with take of Any(a1, v20);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for GenerationSchema();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for Grammar(0);
  uint64_t result = _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for Grammar);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CharacterSet();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  char v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  long long v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
  _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for Prompt.SpecialToken);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    BOOL v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  void *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    BOOL v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

{
  void *v3;
  void *v4;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  Swift::Int *v16;
  Swift::Int v17;
  uint64_t v19;
  void *v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;

  uint64_t v4 = v3;
  Swift::Int v8 = *v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v9 = Hasher._finalize()();
  unint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = v9 & ~v10;
  BOOL v12 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    BOOL v13 = *(void *)(v8 + 48);
    BOOL v14 = (void *)(v13 + 16 * v11);
    Swift::Int v15 = *v14 == a2 && v14[1] == a3;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      uint64_t v16 = (Swift::Int *)(*(void *)(*v4 + 48) + 16 * v11);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain();
      return 0;
    }
    BOOL v19 = ~v10;
    while (1)
    {
      uint64_t v11 = (v11 + 1) & v19;
      if (((*(void *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        break;
      }
      char v20 = (void *)(v13 + 16 * v11);
      uint64_t v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v23 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v11, isUniquelyReferenced_nonNull_native);
  *uint64_t v4 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, Swift::UInt a3, Swift::UInt a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = ~v11;
    while (1)
    {
      BOOL v14 = (uint64_t *)(*(void *)(v9 + 48) + 24 * v12);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      uint64_t v17 = v14[2];
      BOOL v18 = v15 == a2 && v16 == a3;
      if (v18 && v17 == a4) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }
    uint64_t result = 0;
    unint64_t v22 = (Swift::UInt *)(*(void *)(*v4 + 48) + 24 * v12);
    a2 = *v22;
    a3 = v22[1];
    a4 = v22[2];
  }
  else
  {
LABEL_11:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v23;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(a4 + 16));
  uint64_t v9 = *(void *)(a4 + 16);
  if (v9)
  {
    Swift::Int v10 = (uint64_t *)(a4 + 32);
    do
    {
      uint64_t v11 = *v10++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)((uint64_t)v27, v11);
      swift_bridgeObjectRelease();
      --v9;
    }
    while (v9);
  }
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    while (1)
    {
      uint64_t v17 = (void *)(*(void *)(v8 + 48) + 24 * v14);
      uint64_t v18 = v17[2];
      BOOL v19 = *v17 == a2 && v17[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        char v16 = specialized static Array<A>.== infix(_:_:)(v18, a4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if (v16) {
          break;
        }
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v22 = (Swift::Int *)(*(void *)(*v25 + 48) + 24 * v14);
    Swift::Int v23 = v22[1];
    Swift::Int v24 = v22[2];
    *a1 = *v22;
    a1[1] = v23;
    a1[2] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27[0] = *v25;
    *char v25 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, v14, isUniquelyReferenced_nonNull_native);
    *char v25 = v27[0];
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    uint64_t result = 1;
    a1[2] = a4;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      char v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NonTerminalSymbol>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::UInt *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::UInt *v17;
  Swift::UInt v18;
  Swift::UInt v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<EarleyParser.Item>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v30 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      unint64_t v7 = ~(-1 << v6);
    }
    else {
      unint64_t v7 = -1;
    }
    int64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v29 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        unint64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = v30[v14];
        ++v5;
        if (!v15)
        {
          uint64_t v5 = v14 + 1;
          if (v14 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v15 = v30[v5];
          if (!v15)
          {
            uint64_t v5 = v14 + 2;
            if (v14 + 2 >= v29) {
              goto LABEL_33;
            }
            unint64_t v15 = v30[v5];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v29)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v28;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v30[v16];
              if (!v15)
              {
                while (1)
                {
                  uint64_t v5 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v29) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v30[v5];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v16;
            }
          }
        }
LABEL_23:
        int64_t v8 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
      }
      unint64_t v17 = (Swift::UInt *)(*(void *)(v2 + 48) + 24 * v13);
      int64_t v18 = *v17;
      unint64_t v19 = v17[1];
      uint64_t v20 = v17[2];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v10 = __clz(__rbit64((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v9 + 8 * v23);
        }
        while (v27 == -1);
        uint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      int64_t v11 = (Swift::UInt *)(*(void *)(v4 + 48) + 24 * v10);
      *int64_t v11 = v18;
      v11[1] = v19;
      void v11[2] = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    unint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v26 = -1 << v7;
    BOOL v27 = v1;
    if (v7 < 64) {
      int64_t v8 = ~(-1 << v7);
    }
    else {
      int64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    int64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  void *v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      uint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            uint64_t v21 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for CharacterSet();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  os_log_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CharacterSet>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    int v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        unint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        uint64_t v20 = v37[v19];
        uint64_t v21 = v13 + 1;
        if (!v20)
        {
          uint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          uint64_t v20 = v37[v21];
          if (!v20)
          {
            uint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            uint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              uint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  uint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v10 = (v20 - 1) & v20;
        unint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      unint64_t v24 = *(void *)(v4 + 48);
      char v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      BOOL v27 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v29 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      unint64_t v7 = ~(-1 << v6);
    }
    else {
      unint64_t v7 = -1;
    }
    int64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v9 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v9) {
          goto LABEL_33;
        }
        int64_t v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v9) {
            goto LABEL_33;
          }
          int64_t v16 = v29[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v9) {
              goto LABEL_33;
            }
            int64_t v16 = v29[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  char *v29 = -1 << v28;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v9) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v29[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        int64_t v8 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
      unint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        int64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        int64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
      *unint64_t v12 = v19;
      v12[1] = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Rule>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v5 = (void *)(v2 + 56);
    uint64_t v6 = -1;
    if (v4 < 64) {
      uint64_t v6 = ~(-1 << v4);
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v11 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        if (v13 >= v8) {
          goto LABEL_22;
        }
        unint64_t v14 = v5[v13];
        ++v10;
        if (!v14)
        {
          int64_t v10 = v13 + 1;
          if (v13 + 1 >= v8) {
            goto LABEL_22;
          }
          unint64_t v14 = v5[v10];
          if (!v14)
          {
            int64_t v10 = v13 + 2;
            if (v13 + 2 >= v8) {
              goto LABEL_22;
            }
            unint64_t v14 = v5[v10];
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v8)
              {
LABEL_22:
                swift_release();
                uint64_t v16 = 1 << *(unsigned char *)(v2 + 32);
                if (v16 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v5 = -1 << v16;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v14 = v5[v15];
              if (!v14)
              {
                while (1)
                {
                  int64_t v10 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_28;
                  }
                  if (v10 >= v8) {
                    goto LABEL_22;
                  }
                  unint64_t v14 = v5[v10];
                  ++v15;
                  if (v14) {
                    goto LABEL_21;
                  }
                }
              }
              int64_t v10 = v15;
            }
          }
        }
LABEL_21:
        unint64_t v7 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      unint64_t result = specialized _NativeSet._unsafeInsertNew(_:)(*(void *)(*(void *)(v2 + 48) + 24 * v12), *(void *)(*(void *)(v2 + 48) + 24 * v12 + 8), *(void *)(*(void *)(v2 + 48) + 24 * v12 + 16), v3);
    }
  }
  unint64_t result = swift_release();
  uint64_t *v1 = v3;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(a3 + 16));
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(a3 + 32);
    do
    {
      uint64_t v10 = *v9++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)((uint64_t)v13, v10);
      swift_bridgeObjectRelease();
      --v8;
    }
    while (v8);
  }
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a4 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  unint64_t v12 = (void *)(*(void *)(a4 + 48) + 24 * result);
  *unint64_t v12 = a1;
  v12[1] = a2;
  v12[2] = a3;
  ++*(void *)(a4 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<NonTerminalSymbol>);
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<Character>);
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::UInt a2, Swift::UInt a3, unint64_t a4, char a5)
{
  Swift::UInt v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_18;
  }
  if (a5)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_18;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  unint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a4 = result & ~v13;
  if ((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v14 = ~v13;
    do
    {
      int64_t v15 = (uint64_t *)(*(void *)(v12 + 48) + 24 * a4);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      uint64_t v18 = v15[2];
      BOOL v19 = v16 == v9 && v17 == a2;
      if (v19 && v18 == a3) {
        goto LABEL_21;
      }
      a4 = (a4 + 1) & v14;
    }
    while (((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_18:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v22 = (Swift::UInt *)(*(void *)(v21 + 48) + 24 * a4);
  *uint64_t v22 = v9;
  v22[1] = a2;
  v22[2] = a3;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_21:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, uint64_t a3, unint64_t a4, char a5)
{
  Swift::Int v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_21;
  }
  if (a5)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_21;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(a3 + 16));
  uint64_t v13 = *(void *)(a3 + 16);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)(a3 + 32);
    do
    {
      uint64_t v15 = *v14++;
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)((uint64_t)v28, v15);
      swift_bridgeObjectRelease();
      --v13;
    }
    while (v13);
  }
  unint64_t result = Hasher._finalize()();
  uint64_t v16 = -1 << *(unsigned char *)(v12 + 32);
  a4 = result & ~v16;
  if ((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v17 = ~v16;
    do
    {
      BOOL v19 = (void *)(*(void *)(v12 + 48) + 24 * a4);
      uint64_t v20 = v19[2];
      BOOL v21 = *v19 == v9 && v19[1] == a2;
      if (v21 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        char v18 = specialized static Array<A>.== infix(_:_:)(v20, a3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        unint64_t result = swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_24;
        }
      }
      a4 = (a4 + 1) & v17;
    }
    while (((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_21:
  uint64_t v22 = *v27;
  *(void *)(*v27 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v23 = (Swift::Int *)(*(void *)(v22 + 48) + 24 * a4);
  *uint64_t v23 = v9;
  v23[1] = a2;
  void v23[2] = a3;
  uint64_t v24 = *(void *)(v22 + 16);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    *(void *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_24:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  unint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<EarleyParser.Item>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v17;
    *(void *)(v19 + 16) = v18;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Rule>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = *(_OWORD *)(v17 + 8);
    *(void *)uint64_t v18 = *(void *)v17;
    *(_OWORD *)(v18 + 8) = v19;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CharacterSet>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    uint64_t *v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  uint64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    uint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      uint64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      uint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        uint64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        uint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    uint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    uint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  uint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    uint64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    uint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v14) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22)
      {
        int64_t v10 = v21 + 2;
        if (v21 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v7 + 8 * v10);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = v18[1];
    int64_t v20 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v20 = *v18;
    v20[1] = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v14) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NonTerminalSymbol>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt *v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt *v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;

  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<EarleyParser.Item>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = result;
  if (!*(void *)(v1 + 16))
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t *v0 = v3;
    return result;
  }
  uint64_t v4 = 0;
  BOOL v27 = v1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(v1 + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v1 + 56);
  uint64_t v28 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v8 = result + 56;
  while (1)
  {
    if (v7)
    {
      int64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_24;
    }
    unint64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v13 >= v28) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    ++v4;
    if (!v14)
    {
      uint64_t v4 = v13 + 1;
      if (v13 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v4);
      if (!v14)
      {
        uint64_t v4 = v13 + 2;
        if (v13 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_24:
    int64_t v16 = (Swift::UInt *)(*(void *)(v1 + 48) + 24 * v12);
    unint64_t v17 = *v16;
    int64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    Hasher._combine(_:)(v19);
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      uint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        char v25 = v22 == v24;
        if (v22 == v24) {
          uint64_t v22 = 0;
        }
        v23 |= v25;
        unint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      uint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    int64_t v10 = (Swift::UInt *)(*(void *)(v3 + 48) + 24 * v9);
    *int64_t v10 = v17;
    v10[1] = v18;
    id v10[2] = v19;
    ++*(void *)(v3 + 16);
  }
  unint64_t v15 = v13 + 3;
  if (v15 >= v28) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    uint64_t v4 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v28) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  int64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          uint64_t v21 = 0;
        }
        v22 |= v24;
        char v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CharacterSet>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  int v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    uint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      uint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        uint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    char v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x263F06278]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    BOOL v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  uint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v28 = (unint64_t)(v7 + 63) >> 6;
  int64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_23;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v15 >= v28) {
      goto LABEL_32;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_32;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_32;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16)
        {
          unint64_t v17 = v15 + 3;
          if (v17 >= v28)
          {
LABEL_32:
            uint64_t result = swift_release();
            uint64_t v1 = v0;
            goto LABEL_34;
          }
          int64_t v16 = *(void *)(v6 + 8 * v17);
          uint64_t v5 = v17;
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_23:
    int64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      int64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      char v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_35;
        }
        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        BOOL v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      int64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
    *unint64_t v12 = v20;
    v12[1] = v19;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_bridgeObjectRetain();
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_32;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Rule>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    unint64_t result = swift_release();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v20 = v1;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_6;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8) {
      goto LABEL_22;
    }
    unint64_t v18 = *(void *)(v5 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        goto LABEL_22;
      }
      unint64_t v18 = *(void *)(v5 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          goto LABEL_22;
        }
        unint64_t v18 = *(void *)(v5 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_6:
    unint64_t v13 = (uint64_t *)(*(void *)(v2 + 48) + 24 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = v13[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized _NativeSet._unsafeInsertNew(_:)(v14, v15, v16, v3);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v8)
  {
LABEL_22:
    swift_release();
    uint64_t v1 = v20;
    goto LABEL_23;
  }
  unint64_t v18 = *(void *)(v5 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_22;
    }
    unint64_t v18 = *(void *)(v5 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_21;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
    {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
    {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  __s1[2] = *MEMORY[0x263EF8340];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      char v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      outlined consume of Data._Representation(a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v11, v12, v10, a3, a4);
      swift_release();
      swift_release();
LABEL_6:
      outlined consume of Data._Representation(a3, a4);
      return v5 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_8;
    default:
      __s1[0] = a1;
      LOWORD(__s1[1]) = a2;
      BYTE2(__s1[1]) = BYTE2(a2);
      BYTE3(__s1[1]) = BYTE3(a2);
      BYTE4(__s1[1]) = BYTE4(a2);
      BYTE5(__s1[1]) = BYTE5(a2);
LABEL_8:
      closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, a3, a4, &v14);
      outlined consume of Data._Representation(a3, a4);
      if (!v4) {
        char v5 = v14;
      }
      return v5 & 1;
  }
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t specialized static Prompt.ImageAttachment.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  unint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x25F9CB888);
      }
      uint64_t v6 = (int)v6;
LABEL_7:
      switch(v5 >> 62)
      {
        case 1uLL:
          LODWORD(v10) = HIDWORD(v4) - v4;
          if (__OFSUB__(HIDWORD(v4), v4)) {
            goto LABEL_20;
          }
          uint64_t v10 = (int)v10;
LABEL_12:
          if (v6 != v10) {
            return 0;
          }
          if (v6 >= 1)
          {
            outlined copy of Data._Representation(*((void *)a2 + 1), *((void *)a2 + 2));
            if ((specialized Data._Representation.withUnsafeBytes<A>(_:)(v2, v3, v4, v5) & 1) == 0) {
              return 0;
            }
          }
LABEL_15:
          uint64_t result = 1;
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v4 + 16);
          uint64_t v11 = *(void *)(v4 + 24);
          BOOL v9 = __OFSUB__(v11, v12);
          uint64_t v10 = v11 - v12;
          if (!v9) {
            goto LABEL_12;
          }
          goto LABEL_21;
        case 3uLL:
          if (v6) {
            return 0;
          }
          goto LABEL_15;
        default:
          uint64_t v10 = BYTE6(v5);
          goto LABEL_12;
      }
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(v2 + 16);
      uint64_t v7 = *(void *)(v2 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_7;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v6 = BYTE6(v3);
      goto LABEL_7;
  }
  return result;
}

BOOL specialized static Prompt.Attachment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int8 v4 = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  v12[0] = *(unsigned char *)a1;
  long long v13 = *(_OWORD *)(a1 + 8);
  v10[0] = v4;
  long long v11 = *(_OWORD *)(a2 + 8);
  char v7 = specialized static Prompt.ImageAttachment.== infix(_:_:)(v12, v10);
  BOOL v8 = v3 == v6;
  if (v2 != v5) {
    BOOL v8 = 0;
  }
  return (v7 & 1) != 0 && v8;
}

uint64_t specialized static Prompt.Rendering.Source.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t specialized static Prompt.Rendering.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  uint64_t v6 = a1[7];
  uint64_t v25 = a1[8];
  uint64_t v23 = a1[9];
  uint64_t v22 = a1[10];
  uint64_t v18 = a1[12];
  uint64_t v19 = a1[11];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  BOOL v9 = (void *)a2[4];
  uint64_t v10 = (void *)a2[5];
  uint64_t v11 = a2[7];
  uint64_t v26 = a2[6];
  uint64_t v27 = a1[6];
  uint64_t v24 = a2[8];
  uint64_t v20 = a2[10];
  uint64_t v21 = a2[9];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[11];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v4 == v8 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v14 & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(v3, v9) & 1) != 0
        && specialized static Array<A>.== infix(_:_:)(v5, v10))
      {
        if (v6)
        {
          if (v11)
          {
            if (v27 != v26 || v6 != v11)
            {
              char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t result = 0;
              if ((v15 & 1) == 0) {
                return result;
              }
            }
            goto LABEL_16;
          }
        }
        else if (!v11)
        {
LABEL_16:
          if ((specialized static Dictionary<>.== infix(_:_:)(v25, v24) & 1) != 0
            && (v23 == v21 && v22 == v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (v19 == v17 && v18 == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            return 1;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t specialized static Prompt.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || !specialized static Array<A>.== infix(_:_:)(v2, v5))
  {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v3, v4);
}

BOOL specialized static Prompt.RenderedPromptFragment.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken?, Prompt.SpecialToken?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  char v14 = (uint64_t *)((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v27 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v27 - v18;
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v20 & 1) != 0))
  {
    uint64_t v28 = v7;
    uint64_t v22 = type metadata accessor for Prompt.RenderedPromptFragment(0);
    outlined init with copy of Locale?((uint64_t)a1 + *(int *)(v22 + 20), (uint64_t)v19, &demangling cache variable for type metadata for Prompt.SpecialToken?);
    outlined init with copy of Locale?((uint64_t)a2 + *(int *)(v22 + 20), (uint64_t)v17, &demangling cache variable for type metadata for Prompt.SpecialToken?);
    uint64_t v23 = (uint64_t)&v10[*(int *)(v8 + 48)];
    outlined init with copy of Locale?((uint64_t)v19, (uint64_t)v10, &demangling cache variable for type metadata for Prompt.SpecialToken?);
    outlined init with copy of Locale?((uint64_t)v17, v23, &demangling cache variable for type metadata for Prompt.SpecialToken?);
    uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v24((uint64_t)v10, 1, v4) == 1)
    {
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v17, &demangling cache variable for type metadata for Prompt.SpecialToken?);
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v19, &demangling cache variable for type metadata for Prompt.SpecialToken?);
      if (v24(v23, 1, v4) == 1)
      {
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for Prompt.SpecialToken?);
        return 1;
      }
    }
    else
    {
      outlined init with copy of Locale?((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for Prompt.SpecialToken?);
      if (v24(v23, 1, v4) != 1)
      {
        uint64_t v25 = v28;
        _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(v23, (uint64_t)v28, type metadata accessor for Prompt.SpecialToken);
        char v26 = specialized static Prompt.SpecialToken.== infix(_:_:)(v14, v25);
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v25, type metadata accessor for Prompt.SpecialToken);
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v17, &demangling cache variable for type metadata for Prompt.SpecialToken?);
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v19, &demangling cache variable for type metadata for Prompt.SpecialToken?);
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v14, type metadata accessor for Prompt.SpecialToken);
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for Prompt.SpecialToken?);
        return (v26 & 1) != 0;
      }
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v17, &demangling cache variable for type metadata for Prompt.SpecialToken?);
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v19, &demangling cache variable for type metadata for Prompt.SpecialToken?);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v14, type metadata accessor for Prompt.SpecialToken);
    }
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for (Prompt.SpecialToken?, Prompt.SpecialToken?));
    return 0;
  }
  return result;
}

uint64_t specialized static Prompt.SpecialToken.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  char v14 = &v34[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = &v34[-v16];
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = &v34[-v18];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v20 & 1) != 0))
  {
    uint64_t v36 = v7;
    uint64_t v22 = type metadata accessor for Prompt.SpecialToken(0);
    uint64_t v23 = *(int *)(v22 + 20);
    uint64_t v37 = a1;
    outlined init with copy of Locale?((uint64_t)a1 + v23, (uint64_t)v19, &demangling cache variable for type metadata for Locale?);
    uint64_t v24 = *(int *)(v22 + 20);
    uint64_t v38 = a2;
    outlined init with copy of Locale?((uint64_t)a2 + v24, (uint64_t)v17, &demangling cache variable for type metadata for Locale?);
    uint64_t v25 = (uint64_t)&v10[*(int *)(v8 + 48)];
    outlined init with copy of Locale?((uint64_t)v19, (uint64_t)v10, &demangling cache variable for type metadata for Locale?);
    outlined init with copy of Locale?((uint64_t)v17, v25, &demangling cache variable for type metadata for Locale?);
    char v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v26((uint64_t)v10, 1, v4) == 1)
    {
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
      if (v26(v25, 1, v4) == 1)
      {
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
        goto LABEL_11;
      }
    }
    else
    {
      outlined init with copy of Locale?((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for Locale?);
      if (v26(v25, 1, v4) != 1)
      {
        uint64_t v27 = v36;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 32))(v36, v25, v4);
        lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
        int v35 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v28 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
        v28(v27, v4);
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
        v28(v14, v4);
        outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
        if (v35)
        {
LABEL_11:
          uint64_t v29 = *(int *)(v22 + 24);
          uint64_t v30 = (void *)((char *)v37 + v29);
          uint64_t v31 = *(void *)((char *)v37 + v29 + 8);
          uint64_t v32 = (void *)((char *)v38 + v29);
          uint64_t v33 = v32[1];
          if (v31)
          {
            if (v33 && (*v30 == *v32 && v31 == v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
              return 1;
            }
          }
          else if (!v33)
          {
            return 1;
          }
        }
        return 0;
      }
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
      outlined destroy of SingleValueDecodingContainer?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v14, v4);
    }
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v10, &demangling cache variable for type metadata for (Locale?, Locale?));
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for Prompt.Delimiter(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.Delimiter);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Character, [Int]>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v10 = v4;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v15 = *(v9 - 1);
    uint64_t v16 = *v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v15);
    uint64_t v9 = v14;
    uint64_t v6 = v16;
    uint64_t v5 = v15;
    if (v17) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void specialized static Prompt.+= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Prompt.Delimiter(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  char v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v44 - v9;
  uint64_t v11 = *a2;
  BOOL v12 = (void *)a2[1];
  uint64_t v13 = a2[2];
  uint64_t v48 = a2[3];
  uint64_t v14 = String.count.getter();
  uint64_t v15 = *(void *)(*(void *)(a1 + 16) + 16);
  uint64_t v16 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v50 = v15 + v16;
  uint64_t v51 = v14;
  if (!__OFADD__(v15, v16))
  {
    uint64_t v45 = v12;
    uint64_t v46 = v11;
    uint64_t v47 = a1;
    int64_t v17 = *(void *)(v13 + 16);
    uint64_t v18 = MEMORY[0x263F8EE78];
    v44[3] = a1 + 24;
    if (v17)
    {
      void v44[2] = a1 + 16;
      uint64_t v52 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
      unint64_t v19 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v44[1] = v13;
      uint64_t v20 = v13 + v19;
      uint64_t v21 = *(void *)(v5 + 72);
      unint64_t v49 = v19;
      while (1)
      {
        _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(v20, (uint64_t)v8, type metadata accessor for Prompt.Delimiter);
        _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0((uint64_t)v8, (uint64_t)v10, type metadata accessor for Prompt.SpecialToken);
        uint64_t v22 = *(int *)(v4 + 20);
        uint64_t v23 = *(void *)&v8[v22];
        BOOL v24 = __OFADD__(v23, v51);
        uint64_t v25 = v23 + v51;
        if (v24) {
          break;
        }
        uint64_t v26 = *(void *)&v8[*(int *)(v4 + 24)];
        BOOL v24 = __OFADD__(v26, v50);
        uint64_t v27 = v26 + v50;
        if (v24) {
          goto LABEL_22;
        }
        *(void *)&v10[v22] = v25;
        *(void *)&v10[*(int *)(v4 + 24)] = v27;
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v8, type metadata accessor for Prompt.Delimiter);
        uint64_t v18 = v52;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
          unint64_t v19 = v49;
          uint64_t v18 = v52;
        }
        unint64_t v29 = *(void *)(v18 + 16);
        unint64_t v28 = *(void *)(v18 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          unint64_t v19 = v49;
          uint64_t v18 = v52;
        }
        *(void *)(v18 + 16) = v29 + 1;
        _s15TokenGeneration6PromptV07SpecialA0VWObTm_0((uint64_t)v10, v18 + v19 + v29 * v21, type metadata accessor for Prompt.Delimiter);
        v20 += v21;
        if (!--v17)
        {
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
    }
    else
    {
LABEL_12:
      specialized Array.append<A>(contentsOf:)(v18);
      uint64_t v30 = v48;
      int64_t v31 = *(void *)(v48 + 16);
      uint64_t v32 = MEMORY[0x263F8EE78];
      if (!v31)
      {
LABEL_20:
        specialized Array.append<A>(contentsOf:)(v32);
        v43._unint64_t object = v45;
        v43._uint64_t countAndFlagsBits = v46;
        String.append(_:)(v43);
        return;
      }
      uint64_t v52 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
      uint64_t v32 = v52;
      uint64_t v33 = (void *)(v30 + 64);
      while (1)
      {
        uint64_t v34 = *(v33 - 1);
        uint64_t v35 = v34 + v51;
        if (__OFADD__(v34, v51)) {
          break;
        }
        uint64_t v36 = *v33 + v50;
        if (__OFADD__(*v33, v50)) {
          goto LABEL_24;
        }
        char v37 = *((unsigned char *)v33 - 32);
        uint64_t v38 = *(v33 - 3);
        unint64_t v39 = *(v33 - 2);
        outlined copy of Data._Representation(v38, v39);
        uint64_t v52 = v32;
        unint64_t v41 = *(void *)(v32 + 16);
        unint64_t v40 = *(void *)(v32 + 24);
        if (v41 >= v40 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
          uint64_t v32 = v52;
        }
        *(void *)(v32 + 16) = v41 + 1;
        uint64_t v42 = v32 + 40 * v41;
        *(unsigned char *)(v42 + 32) = v37;
        *(void *)(v42 + 40) = v38;
        *(void *)(v42 + 48) = v39;
        *(void *)(v42 + 56) = v35;
        *(void *)(v42 + 64) = v36;
        v33 += 5;
        if (!--v31)
        {
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
  }
  __break(1u);
}

uint64_t _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s15TokenGeneration6PromptV07SpecialA0VWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized static Prompt.+= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  MEMORY[0x261202900](0);
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  void v11[2] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, MEMORY[0x263F8EE78]);
  void v11[3] = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, v6);
  v8[0] = v3;
  uint64_t v9 = v4;
  uint64_t v10 = v5;
  Prompt.StringInterpolation.appendInterpolation(image:)(v8);
  specialized static Prompt.+= infix(_:_:)(a1, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for Prompt.RenderedPromptFragment(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.RenderedPromptFragment);
}

uint64_t _s15TokenGeneration6PromptV9DelimiterVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Prompt.PromptFragment(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.PromptFragment);
}

uint64_t outlined assign with take of Locale?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t base witness table accessor for Equatable in Prompt.SpecialToken()
{
  return lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, (void (*)(uint64_t))type metadata accessor for Prompt.SpecialToken);
}

uint64_t base witness table accessor for Equatable in Prompt.Delimiter()
{
  return lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Prompt.Delimiter and conformance Prompt.Delimiter, (void (*)(uint64_t))type metadata accessor for Prompt.Delimiter);
}

unint64_t lazy protocol witness table accessor for type Prompt.Attachment and conformance Prompt.Attachment()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.Attachment and conformance Prompt.Attachment;
  if (!lazy protocol witness table cache variable for type Prompt.Attachment and conformance Prompt.Attachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.Attachment and conformance Prompt.Attachment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.AttachmentContent and conformance Prompt.AttachmentContent()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.AttachmentContent and conformance Prompt.AttachmentContent;
  if (!lazy protocol witness table cache variable for type Prompt.AttachmentContent and conformance Prompt.AttachmentContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.AttachmentContent and conformance Prompt.AttachmentContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ImageAttachment.Format and conformance Prompt.ImageAttachment.Format()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.ImageAttachment.Format and conformance Prompt.ImageAttachment.Format;
  if (!lazy protocol witness table cache variable for type Prompt.ImageAttachment.Format and conformance Prompt.ImageAttachment.Format)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ImageAttachment.Format and conformance Prompt.ImageAttachment.Format);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment;
  if (!lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment);
  }
  return result;
}

uint64_t associated type witness table accessor for StringInterpolationProtocol.StringLiteralType : _ExpressibleByBuiltinStringLiteral in Prompt.StringInterpolation()
{
  return MEMORY[0x263F8D388];
}

unint64_t lazy protocol witness table accessor for type Prompt.Rendering.Source and conformance Prompt.Rendering.Source()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.Rendering.Source and conformance Prompt.Rendering.Source;
  if (!lazy protocol witness table cache variable for type Prompt.Rendering.Source and conformance Prompt.Rendering.Source)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.Rendering.Source and conformance Prompt.Rendering.Source);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.Rendering and conformance Prompt.Rendering()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering;
  if (!lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt and conformance Prompt()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt and conformance Prompt;
  if (!lazy protocol witness table cache variable for type Prompt and conformance Prompt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt and conformance Prompt);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Prompt and conformance Prompt;
  if (!lazy protocol witness table cache variable for type Prompt and conformance Prompt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt and conformance Prompt);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Prompt and conformance Prompt;
  if (!lazy protocol witness table cache variable for type Prompt and conformance Prompt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt and conformance Prompt);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Prompt and conformance Prompt;
  if (!lazy protocol witness table cache variable for type Prompt and conformance Prompt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt and conformance Prompt);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.StringInterpolation and conformance Prompt.StringInterpolation()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.StringInterpolation and conformance Prompt.StringInterpolation;
  if (!lazy protocol witness table cache variable for type Prompt.StringInterpolation and conformance Prompt.StringInterpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.StringInterpolation and conformance Prompt.StringInterpolation);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in Prompt()
{
  return MEMORY[0x263F8D398];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in Prompt()
{
  return MEMORY[0x263F8D390];
}

ValueMetadata *type metadata accessor for Prompt()
{
  return &type metadata for Prompt;
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.SpecialToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Locale();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = *(int *)(a3 + 24);
    int64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Prompt.SpecialToken(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Prompt.SpecialToken(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Prompt.SpecialToken(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for Prompt.SpecialToken(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for Prompt.SpecialToken(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  void *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.SpecialToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F9CDF40);
}

uint64_t sub_25F9CDF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &demangling cache variable for type metadata for Locale?);
}

uint64_t storeEnumTagSinglePayload for Prompt.SpecialToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F9CDF60);
}

uint64_t sub_25F9CDF60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &demangling cache variable for type metadata for Locale?);
}

void type metadata completion function for Prompt.SpecialToken()
{
  type metadata accessor for Locale?(319, (unint64_t *)&lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for Prompt.SpecialToken.Chat()
{
  return &type metadata for Prompt.SpecialToken.Chat;
}

ValueMetadata *type metadata accessor for Prompt.SpecialToken.ToolUse()
{
  return &type metadata for Prompt.SpecialToken.ToolUse;
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.Delimiter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = type metadata accessor for Prompt.SpecialToken(0);
    uint64_t v9 = *(int *)(v8 + 20);
    __dst = (char *)v4 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for Locale();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v16 = *(int *)(v8 + 24);
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)v4 + v20) = *(uint64_t *)((char *)a2 + v20);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Prompt.Delimiter(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for Prompt.SpecialToken(0) + 20);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Prompt.Delimiter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = *(int *)(v6 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Prompt.Delimiter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(v5 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *initializeWithTake for Prompt.Delimiter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
  uint64_t v13 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  return a1;
}

void *assignWithTake for Prompt.Delimiter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = *(int *)(v6 + 24);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  void *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.Delimiter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F9CE9A0);
}

uint64_t sub_25F9CE9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Prompt.Delimiter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F9CEA20);
}

uint64_t sub_25F9CEA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Prompt.Delimiter()
{
  uint64_t result = type metadata accessor for Prompt.SpecialToken(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for Prompt.Attachment(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t initializeWithCopy for Prompt.Attachment(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for Prompt.Attachment(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for Prompt.Attachment(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v4, v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.Attachment(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[40]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.Attachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Prompt.Attachment()
{
  return &type metadata for Prompt.Attachment;
}

ValueMetadata *type metadata accessor for Prompt.AttachmentContent()
{
  return &type metadata for Prompt.AttachmentContent;
}

uint64_t initializeBufferWithCopyOfBuffer for Prompt.AttachmentContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for Prompt.AttachmentContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for Prompt.AttachmentContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.AttachmentContent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.AttachmentContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Prompt.ImageAttachment()
{
  return &type metadata for Prompt.ImageAttachment;
}

unsigned char *storeEnumTagSinglePayload for Prompt.ImageAttachment.Format(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F9CEF40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Prompt.ImageAttachment.Format()
{
  return &type metadata for Prompt.ImageAttachment.Format;
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.RenderedPromptFragment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    unint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v14 = v8[1];
      *unint64_t v7 = *v8;
      v7[1] = v14;
      uint64_t v15 = *(int *)(v9 + 20);
      __dst = (char *)v7 + v15;
      uint64_t v27 = (char *)v8 + v15;
      uint64_t v16 = type metadata accessor for Locale();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain();
      if (v18(v27, 1, v16))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(__dst, v27, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v27, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      uint64_t v20 = *(int *)(v9 + 24);
      uint64_t v21 = (void *)((char *)v7 + v20);
      uint64_t v22 = (void *)((char *)v8 + v20);
      uint64_t v23 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v23;
      BOOL v24 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
      swift_bridgeObjectRetain();
      v24(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for Prompt.RenderedPromptFragment(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v4 + *(int *)(v5 + 20);
    uint64_t v8 = type metadata accessor for Locale();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for Prompt.RenderedPromptFragment(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  uint64_t v8 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = v7[1];
    void *v6 = *v7;
    v6[1] = v12;
    uint64_t v13 = *(int *)(v8 + 20);
    BOOL v24 = (char *)v7 + v13;
    __dst = (char *)v6 + v13;
    uint64_t v14 = type metadata accessor for Locale();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    if (v16(v24, 1, v14))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(__dst, v24, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v24, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v18 = *(int *)(v8 + 24);
    uint64_t v19 = (void *)((char *)v6 + v18);
    uint64_t v20 = (void *)((char *)v7 + v18);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = *(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56);
    swift_bridgeObjectRetain();
    v22(v6, 0, 1, v8);
  }
  return a1;
}

void *assignWithCopy for Prompt.RenderedPromptFragment(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v7, type metadata accessor for Prompt.SpecialToken);
      goto LABEL_7;
    }
    *uint64_t v7 = *v8;
    v7[1] = v8[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(int *)(v9 + 20);
    uint64_t v21 = (char *)v7 + v20;
    uint64_t v22 = (char *)v8 + v20;
    uint64_t v23 = type metadata accessor for Locale();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
    uint64_t v38 = v21;
    LODWORD(v21) = v25(v21, 1, v23);
    int v26 = v25(v22, 1, v23);
    if (v21)
    {
      if (!v26)
      {
        (*(void (**)(void *, char *, uint64_t))(v24 + 16))(v38, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v38, 0, 1, v23);
        goto LABEL_18;
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?)
                                  - 8)
                      + 64);
      unint64_t v28 = v38;
    }
    else
    {
      if (!v26)
      {
        (*(void (**)(void *, char *, uint64_t))(v24 + 24))(v38, v22, v23);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v24 + 8))(v38, v23);
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?)
                                  - 8)
                      + 64);
      unint64_t v28 = v38;
    }
    memcpy(v28, v22, v27);
LABEL_18:
    uint64_t v33 = *(int *)(v9 + 24);
    uint64_t v34 = (void *)((char *)v7 + v33);
    uint64_t v35 = (void *)((char *)v8 + v33);
    *uint64_t v34 = *v35;
    v34[1] = v35[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v13)
  {
LABEL_7:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
    memcpy(v7, v8, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  uint64_t v14 = *(int *)(v9 + 20);
  char v37 = (char *)v8 + v14;
  __dst = (char *)v7 + v14;
  uint64_t v15 = type metadata accessor for Locale();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (v17(v37, 1, v15))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(__dst, v37, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v37, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  uint64_t v29 = *(int *)(v9 + 24);
  uint64_t v30 = (void *)((char *)v7 + v29);
  int64_t v31 = (void *)((char *)v8 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  uint64_t v32 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v32(v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for Prompt.RenderedPromptFragment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  uint64_t v6 = (_OWORD *)((char *)a2 + v4);
  uint64_t v7 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    _OWORD *v5 = *v6;
    uint64_t v10 = *(int *)(v7 + 20);
    uint64_t v11 = (char *)v5 + v10;
    int v12 = (char *)v6 + v10;
    uint64_t v13 = type metadata accessor for Locale();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)((char *)v5 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)v6 + *(int *)(v7 + 24));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for Prompt.RenderedPromptFragment(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for Prompt.SpecialToken(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
      goto LABEL_7;
    }
    uint64_t v22 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v22;
    swift_bridgeObjectRelease();
    uint64_t v23 = *(int *)(v10 + 20);
    uint64_t v24 = (char *)v8 + v23;
    uint64_t v25 = (char *)v9 + v23;
    uint64_t v26 = type metadata accessor for Locale();
    uint64_t v27 = *(void *)(v26 - 8);
    unint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
    uint64_t v38 = v24;
    LODWORD(v24) = v28(v24, 1, v26);
    int v29 = v28(v25, 1, v26);
    if (v24)
    {
      if (!v29)
      {
        (*(void (**)(void *, char *, uint64_t))(v27 + 32))(v38, v25, v26);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v38, 0, 1, v26);
        goto LABEL_18;
      }
      size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?)
                                  - 8)
                      + 64);
      int64_t v31 = v38;
    }
    else
    {
      if (!v29)
      {
        (*(void (**)(void *, char *, uint64_t))(v27 + 40))(v38, v25, v26);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v27 + 8))(v38, v26);
      size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?)
                                  - 8)
                      + 64);
      int64_t v31 = v38;
    }
    memcpy(v31, v25, v30);
LABEL_18:
    uint64_t v32 = *(int *)(v10 + 24);
    uint64_t v33 = (void *)((char *)v8 + v32);
    uint64_t v34 = (void *)((char *)v9 + v32);
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    *uint64_t v33 = v36;
    v33[1] = v35;
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v14)
  {
LABEL_7:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
    memcpy(v8, v9, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  uint64_t v15 = *(int *)(v10 + 20);
  uint64_t v16 = (char *)v8 + v15;
  uint64_t v17 = (char *)v9 + v15;
  uint64_t v18 = type metadata accessor for Locale();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_OWORD *)((char *)v8 + *(int *)(v10 + 24)) = *(_OWORD *)((char *)v9 + *(int *)(v10 + 24));
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.RenderedPromptFragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F9CFF60);
}

uint64_t sub_25F9CFF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &demangling cache variable for type metadata for Prompt.SpecialToken?);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a4);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for Prompt.RenderedPromptFragment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F9D0030);
}

uint64_t sub_25F9D0030(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &demangling cache variable for type metadata for Prompt.SpecialToken?);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    uint64_t v10 = v8;
    uint64_t v11 = v6 + *(int *)(a4 + 20);
    return v9(v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for Prompt.RenderedPromptFragment()
{
  type metadata accessor for Locale?(319, &lazy cache variable for type metadata for Prompt.SpecialToken?, (void (*)(uint64_t))type metadata accessor for Prompt.SpecialToken);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Locale?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for Prompt()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Prompt(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Prompt(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Prompt(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Prompt.StringInterpolation()
{
  return &type metadata for Prompt.StringInterpolation;
}

uint64_t destroy for Prompt.Rendering()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Prompt.Rendering(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Prompt.Rendering(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Prompt.Rendering(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.Rendering(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.Rendering(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Prompt.Rendering()
{
  return &type metadata for Prompt.Rendering;
}

ValueMetadata *type metadata accessor for Prompt.Rendering.Source()
{
  return &type metadata for Prompt.Rendering.Source;
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.PromptFragment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v9 = *(int *)(v8 + 20);
      __dst = (char *)a1 + v9;
      uint64_t v10 = (char *)a2 + v9;
      uint64_t v11 = type metadata accessor for Locale();
      uint64_t v12 = *(void *)(v11 - 8);
      int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      swift_bridgeObjectRetain();
      if (v13(v10, 1, v11))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
      }
      uint64_t v16 = *(int *)(v8 + 24);
      uint64_t v17 = (uint64_t *)((char *)a1 + v16);
      uint64_t v18 = (uint64_t *)((char *)a2 + v16);
      uint64_t v19 = v18[1];
      void *v17 = *v18;
      v17[1] = v19;
      uint64_t v20 = type metadata accessor for Prompt.Delimiter(0);
      *(uint64_t *)((char *)a1 + *(int *)(v20 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v20 + 20));
      *(uint64_t *)((char *)a1 + *(int *)(v20 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v20 + 24));
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Prompt.PromptFragment(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = a1 + *(int *)(type metadata accessor for Prompt.SpecialToken(0) + 20);
    uint64_t v5 = type metadata accessor for Locale();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for Prompt.PromptFragment(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
    uint64_t v7 = *(int *)(v6 + 20);
    __dst = (char *)a1 + v7;
    uint64_t v8 = (char *)a2 + v7;
    uint64_t v9 = type metadata accessor for Locale();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
    }
    uint64_t v13 = *(int *)(v6 + 24);
    uint64_t v14 = (void *)((char *)a1 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = type metadata accessor for Prompt.Delimiter(0);
    *(void *)((char *)a1 + *(int *)(v17 + 20)) = *(void *)((char *)a2 + *(int *)(v17 + 20));
    *(void *)((char *)a1 + *(int *)(v17 + 24)) = *(void *)((char *)a2 + *(int *)(v17 + 24));
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for Prompt.PromptFragment(void *a1, void *a2)
{
  if (a1 != a2)
  {
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)a1, type metadata accessor for Prompt.PromptFragment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v6 = *(int *)(v5 + 20);
      __dst = (char *)a1 + v6;
      uint64_t v7 = (char *)a2 + v6;
      uint64_t v8 = type metadata accessor for Locale();
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
      swift_bridgeObjectRetain();
      if (v10(v7, 1, v8))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(__dst, v7, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(__dst, v7, v8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
      }
      uint64_t v12 = *(int *)(v5 + 24);
      uint64_t v13 = (void *)((char *)a1 + v12);
      uint64_t v14 = (void *)((char *)a2 + v12);
      void *v13 = *v14;
      v13[1] = v14[1];
      uint64_t v15 = type metadata accessor for Prompt.Delimiter(0);
      *(void *)((char *)a1 + *(int *)(v15 + 20)) = *(void *)((char *)a2 + *(int *)(v15 + 20));
      *(void *)((char *)a1 + *(int *)(v15 + 24)) = *(void *)((char *)a2 + *(int *)(v15 + 24));
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for Prompt.PromptFragment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Locale();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
    uint64_t v13 = type metadata accessor for Prompt.Delimiter(0);
    *(void *)((char *)a1 + *(int *)(v13 + 20)) = *(void *)((char *)a2 + *(int *)(v13 + 20));
    *(void *)((char *)a1 + *(int *)(v13 + 24)) = *(void *)((char *)a2 + *(int *)(v13 + 24));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for Prompt.PromptFragment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_2((uint64_t)a1, type metadata accessor for Prompt.PromptFragment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = type metadata accessor for Prompt.SpecialToken(0);
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Locale();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
      uint64_t v13 = type metadata accessor for Prompt.Delimiter(0);
      *(void *)((char *)a1 + *(int *)(v13 + 20)) = *(void *)((char *)a2 + *(int *)(v13 + 20));
      *(void *)((char *)a1 + *(int *)(v13 + 24)) = *(void *)((char *)a2 + *(int *)(v13 + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for Prompt.PromptFragment()
{
  uint64_t result = type metadata accessor for Prompt.Delimiter(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined init with take of (key: Prompt.SpecialToken, value: String)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: String));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of Prompt.PromptFragment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt.PromptFragment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Prompt.SpecialToken(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t PromptTemplateInfo.templateID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptTemplateInfo.RichVariableBinding.Component.Content.Text.string.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptTemplateInfo.RichVariableBinding.Component.Content.Text.isSelfAttention.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

TokenGenerationCore::PromptTemplateInfo::RichVariableBinding::Component::Content::Text __swiftcall PromptTemplateInfo.RichVariableBinding.Component.Content.Text.init(string:)(Swift::String string)
{
  *(Swift::String *)uint64_t v1 = string;
  *(unsigned char *)(v1 + 16) = 0;
  result.string = string;
  return result;
}

TokenGenerationCore::PromptTemplateInfo::RichVariableBinding::Component::Content::Text __swiftcall PromptTemplateInfo.RichVariableBinding.Component.Content.Text.init(string:isSelfAttention:)(Swift::String string, Swift::Bool isSelfAttention)
{
  *(Swift::String *)uint64_t v2 = string;
  *(unsigned char *)(v2 + 16) = isSelfAttention;
  result.string = string;
  result.isSelfAttention = isSelfAttention;
  return result;
}

uint64_t static PromptTemplateInfo.RichVariableBinding.Component.Content.Text.selfAttention(string:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t static PromptTemplateInfo.RichVariableBinding.Component.Content.Text.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 ^ v3 ^ 1u;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v5) {
    return v2 ^ v3 ^ 1u;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptTemplateInfo.RichVariableBinding.Component.Content.Text(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 ^ v3 ^ 1u;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v5) {
    return v2 ^ v3 ^ 1u;
  }
  return result;
}

uint64_t static PromptTemplateInfo.RichVariableBinding.Component.Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 == v3) {
      return 1;
    }
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v2 ^ v3) & 1) == 0)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptTemplateInfo.RichVariableBinding.Component.Content(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 == v3) {
      return 1;
    }
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v2 ^ v3) & 1) == 0)
  {
    return 1;
  }
  return 0;
}

uint64_t PromptTemplateInfo.RichVariableBinding.Component.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t PromptTemplateInfo.RichVariableBinding.Component.init(content:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  char v3 = *(unsigned char *)(result + 16);
  *(void *)a2 = *(void *)result;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

uint64_t static PromptTemplateInfo.RichVariableBinding.Component.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 == v3) {
      return 1;
    }
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v2 ^ v3) & 1) == 0)
  {
    return 1;
  }
  return 0;
}

uint64_t PromptTemplateInfo.RichVariableBinding.components.getter()
{
  return swift_bridgeObjectRetain();
}

TokenGenerationCore::PromptTemplateInfo::RichVariableBinding __swiftcall PromptTemplateInfo.RichVariableBinding.init(components:)(TokenGenerationCore::PromptTemplateInfo::RichVariableBinding components)
{
  v1->components._rawValue = components.components._rawValue;
  return components;
}

uint64_t static PromptTemplateInfo.RichVariableBinding.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptTemplateInfo.RichVariableBinding(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t PromptTemplateInfo.richVariableBindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PromptTemplateInfo.variableBindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PromptTemplateInfo.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptTemplateInfo() + 28);
  return outlined init with copy of Locale?(v3, a1);
}

uint64_t type metadata accessor for PromptTemplateInfo()
{
  uint64_t result = type metadata singleton initialization cache for PromptTemplateInfo;
  if (!type metadata singleton initialization cache for PromptTemplateInfo) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PromptTemplateInfo.init(templateID:variableBindings:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v22[0] = a4;
  uint64_t v7 = type metadata accessor for PromptTemplateInfo();
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v22 - v15;
  uint64_t v17 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = specialized _NativeDictionary.mapValues<A>(_:)(a3);
  swift_bridgeObjectRelease();
  outlined init with copy of Locale?((uint64_t)v16, (uint64_t)v14);
  *uint64_t v10 = a1;
  v10[1] = a2;
  id v10[2] = v18;
  outlined init with copy of Locale?((uint64_t)v14, (uint64_t)v10 + *(int *)(v8 + 36));
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = specialized _NativeDictionary.mapValues<A>(_:)(v19);
  swift_release();
  outlined destroy of SingleValueDecodingContainer?((uint64_t)v14, &demangling cache variable for type metadata for Locale?);
  _DWORD v10[3] = v20;
  outlined init with take of PromptTemplateInfo((uint64_t)v10, v22[0], (uint64_t (*)(void))type metadata accessor for PromptTemplateInfo);
  return outlined destroy of SingleValueDecodingContainer?((uint64_t)v16, &demangling cache variable for type metadata for Locale?);
}

uint64_t PromptTemplateInfo.init(templateID:variableBindings:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v20[0] = a5;
  uint64_t v9 = type metadata accessor for PromptTemplateInfo();
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = specialized _NativeDictionary.mapValues<A>(_:)(a3);
  swift_bridgeObjectRelease();
  outlined init with copy of Locale?(a4, (uint64_t)v15);
  *uint64_t v12 = a1;
  v12[1] = a2;
  v12[2] = v16;
  outlined init with copy of Locale?((uint64_t)v15, (uint64_t)v12 + *(int *)(v10 + 36));
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = specialized _NativeDictionary.mapValues<A>(_:)(v17);
  swift_release();
  outlined destroy of SingleValueDecodingContainer?((uint64_t)v15, &demangling cache variable for type metadata for Locale?);
  uint64_t v12[3] = v18;
  outlined init with take of PromptTemplateInfo((uint64_t)v12, v20[0], (uint64_t (*)(void))type metadata accessor for PromptTemplateInfo);
  return outlined destroy of SingleValueDecodingContainer?(a4, &demangling cache variable for type metadata for Locale?);
}

uint64_t PromptTemplateInfo.init(templateID:richVariableBindings:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  uint64_t v7 = type metadata accessor for PromptTemplateInfo();
  outlined init with copy of Locale?(a4, (uint64_t)a5 + *(int *)(v7 + 28));
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = specialized _NativeDictionary.mapValues<A>(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of SingleValueDecodingContainer?(a4, &demangling cache variable for type metadata for Locale?);
  a5[3] = v9;
  return result;
}

uint64_t static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<LLMBundle>);
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:), 0, 0);
}

{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<AssetBackedLLMBundle>);
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:), 0, 0);
}

uint64_t static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:)()
{
  uint64_t v1 = v0[8];
  (*(void (**)(uint64_t, void, void))(v0[7] + 16))(v1, v0[4], v0[6]);
  type metadata accessor for _LoadedModelConfiguration();
  int v2 = static _LoadedModelConfiguration.create(modelBundleIdentifier:)(v1);
  v0[9] = v2;
  uint64_t v3 = v2;
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  v0[2] = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:);
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  return ModelConfiguration.render(promptTemplate:)(v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    int v2 = static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:);
  }
  else {
    int v2 = static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[8];
  (*(void (**)(uint64_t, void, void))(v0[7] + 16))(v1, v0[4], v0[6]);
  type metadata accessor for _LoadedModelConfiguration();
  int v2 = static _LoadedModelConfiguration.create(modelBundleIdentifier:)(v1);
  v0[9] = v2;
  uint64_t v3 = v2;
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  v0[2] = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:);
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  return ModelConfiguration.render(promptTemplate:)(v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    int v2 = static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:);
  }
  else {
    int v2 = static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ModelConfiguration.render(promptTemplate:)(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v4 = type metadata accessor for Prompt();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *v2;
  v3[6] = v5;
  v3[7] = v6;
  return MEMORY[0x270FA2498](ModelConfiguration.render(promptTemplate:), 0, 0);
}

uint64_t ModelConfiguration.render(promptTemplate:)()
{
  uint64_t v1 = v0[7];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (v2)
    {
      if (*(void *)(v2 + 16))
      {
        uint64_t v3 = (uint64_t *)v0[3];
        uint64_t v5 = *v3;
        uint64_t v4 = v3[1];
        swift_bridgeObjectRetain();
        unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
        if (v7)
        {
          uint64_t v8 = v0[3];
          v0[8] = *(void *)(*(void *)(v2 + 56) + 16 * v6 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v9 = *(void *)(v8 + 16);
          uint64_t v10 = *(int *)(type metadata accessor for PromptTemplateInfo() + 28);
          swift_bridgeObjectRetain();
          Prompt.init(template:)();
          uint64_t v13 = v0[3] + v10;
          uint64_t v14 = specialized _NativeDictionary.mapValues<A>(_:)(v9);
          v0[9] = v14;
          uint64_t v15 = (void *)swift_task_alloc();
          v0[10] = v15;
          void *v15 = v0;
          v15[1] = ModelConfiguration.render(promptTemplate:);
          uint64_t v16 = v0[2];
          uint64_t v17 = MEMORY[0x263F8EE78];
          return Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)(v16, v14, v17, v13);
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  lazy protocol witness table accessor for type ModelConfiguration.PrompteTemplateError and conformance ModelConfiguration.PrompteTemplateError();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = ModelConfiguration.render(promptTemplate:);
  }
  else {
    uint64_t v2 = ModelConfiguration.render(promptTemplate:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t ModelConfiguration.PrompteTemplateError.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ModelConfiguration.PrompteTemplateError.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

unint64_t ModelConfiguration.PrompteTemplateError.rawValue.getter()
{
  return 0xD000000000000016;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelConfiguration.PrompteTemplateError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ModelConfiguration.PrompteTemplateError()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelConfiguration.PrompteTemplateError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ModelConfiguration.PrompteTemplateError@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance ModelConfiguration.PrompteTemplateError, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ModelConfiguration.PrompteTemplateError(void *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000025FA3D250;
}

uint64_t closure #1 in ModelConfigurationPromptTemplate.render(richVariableBindings:locale:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Component.Privacy?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SelfAttention();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  uint64_t v44 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Prompt.Component.Value();
  uint64_t v11 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v45 = (void *)((char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for Prompt.Component();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v46 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  int64_t v17 = *(void *)(*a1 + 16);
  if (v17)
  {
    uint64_t v35 = a2;
    uint64_t v36 = v2;
    uint64_t v47 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    unsigned int v39 = *MEMORY[0x263F62078];
    char v37 = (void (**)(char *, uint64_t))(v44 + 8);
    uint64_t v38 = (void (**)(void *, void, uint64_t))(v11 + 104);
    uint64_t v44 = v14 + 32;
    v34[1] = v16;
    uint64_t v18 = (unsigned char *)(v16 + 48);
    uint64_t v40 = v14;
    do
    {
      uint64_t v19 = *((void *)v18 - 1);
      if (*v18 == 1)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v20 = v13;
        uint64_t v21 = v7;
        uint64_t v22 = v42;
        SelfAttention.init(_:)();
        lazy protocol witness table accessor for type Prompt.RenderError and conformance Prompt.RenderError(&lazy protocol witness table cache variable for type SelfAttention and conformance SelfAttention, MEMORY[0x263F41518]);
        uint64_t v23 = v43;
        PromptComponentValueCustomDataConvertible.toValue()();
        uint64_t v24 = v22;
        char v7 = v21;
        uint64_t v13 = v20;
        uint64_t v14 = v40;
        (*v37)(v24, v23);
        uint64_t v25 = type metadata accessor for Prompt.Component.Privacy();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 1, 1, v25);
        Prompt.Component.init(value:priority:privacy:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v26 = v45;
        void *v45 = *((void *)v18 - 2);
        v26[1] = v19;
        (*v38)(v26, v39, v41);
        uint64_t v27 = type metadata accessor for Prompt.Component.Privacy();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v7, 1, 1, v27);
        swift_bridgeObjectRetain();
        Prompt.Component.init(value:priority:privacy:)();
      }
      uint64_t v28 = v47;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1);
        uint64_t v28 = v47;
      }
      unint64_t v30 = *(void *)(v28 + 16);
      unint64_t v29 = *(void *)(v28 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        uint64_t v28 = v47;
      }
      v18 += 24;
      *(void *)(v28 + 16) = v30 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v28+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v30, v46, v13);
      uint64_t v47 = v28;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    a2 = v35;
  }
  uint64_t v31 = type metadata accessor for Prompt();
  uint64_t v32 = MEMORY[0x263F620B8];
  a2[3] = v31;
  a2[4] = v32;
  __swift_allocate_boxed_opaque_existential_1(a2);
  return Prompt.init(components:)();
}

uint64_t Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[69] = v4;
  v5[68] = a4;
  v5[67] = a3;
  v5[66] = a2;
  v5[65] = a1;
  uint64_t v6 = type metadata accessor for Prompt.ImageFormat();
  v5[70] = v6;
  v5[71] = *(void *)(v6 - 8);
  unsigned char v5[72] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Prompt.ImageData();
  v5[73] = v7;
  v5[74] = *(void *)(v7 - 8);
  v5[75] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Component.Privacy?);
  v5[76] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for BindableVariable();
  v5[77] = v8;
  v5[78] = *(void *)(v8 - 8);
  v5[79] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Prompt.Delimiter(0);
  v5[80] = v9;
  v5[81] = *(void *)(v9 - 8);
  v5[82] = swift_task_alloc();
  v5[83] = swift_task_alloc();
  v5[84] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v5[85] = swift_task_alloc();
  v5[86] = type metadata accessor for Prompt.SpecialToken(0);
  v5[87] = swift_task_alloc();
  v5[88] = swift_task_alloc();
  v5[89] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SpecialToken();
  v5[90] = v10;
  v5[91] = *(void *)(v10 - 8);
  v5[92] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Prompt.Component.Value();
  v5[93] = v11;
  v5[94] = *(void *)(v11 - 8);
  v5[95] = swift_task_alloc();
  v5[96] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Prompt.Component();
  v5[97] = v12;
  v5[98] = *(void *)(v12 - 8);
  v5[99] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Prompt();
  v5[100] = v13;
  v5[101] = *(void *)(v13 - 8);
  v5[102] = swift_task_alloc();
  v5[103] = swift_task_alloc();
  return MEMORY[0x270FA2498](Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:), 0, 0);
}

uint64_t Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)()
{
  uint64_t v1 = v0[67];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptComponentValueCustomDataTransformer>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25FA352B0;
  *(void *)(inited + 56) = &unk_270BCEEB0;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type Prompt.SelfAttentionTransformer and conformance Prompt.SelfAttentionTransformer();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  v0[104] = v1;
  Swift::Int v3 = (void *)swift_task_alloc();
  v0[105] = v3;
  *Swift::Int v3 = v0;
  v3[1] = Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:);
  uint64_t v4 = v0[103];
  return MEMORY[0x270F582D0](v4, 0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 848) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, unint64_t, uint64_t);
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  void *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  long long v99;
  uint64_t (*v100)(void);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  long long *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  *(void *)(v0 + 232) = 0;
  uint64_t v1 = v0 + 232;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 240) = 0xE000000000000000;
  *(void *)(v0 + 248) = v2;
  *(void *)(v0 + 256) = v2;
  Swift::Int v3 = Prompt.components.getter();
  *(void *)(v0 + 856) = v3;
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v0 + 864) = v4;
  if (!v4)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v97 = *(void *)(v0 + 520);
    (*(void (**)(void, void))(*(void *)(v0 + 808) + 8))(*(void *)(v0 + 824), *(void *)(v0 + 800));
    os_log_t v98 = *(void *)(v0 + 256);
    int v99 = *(_OWORD *)(v0 + 240);
    *(void *)uint64_t v97 = *(void *)(v0 + 232);
    *(_OWORD *)(v97 + 8) = v99;
    *(void *)(v97 + 24) = v98;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v100 = *(uint64_t (**)(void))(v0 + 8);
LABEL_21:
    return v100();
  }
  uint64_t v5 = 0;
  uint64_t v134 = (void *)(v0 + 128);
  uint64_t v135 = (long long *)(v0 + 88);
  *(_DWORD *)(v0 + 896) = *(_DWORD *)(*(void *)(v0 + 784) + 80);
  *(_DWORD *)(v0 + 900) = *MEMORY[0x263F62078];
  uint64_t v6 = (_DWORD *)MEMORY[0x263F62040];
  *(_DWORD *)(v0 + 904) = *MEMORY[0x263F62048];
  *(_DWORD *)(v0 + 908) = *v6;
  *(_DWORD *)(v0 + 912) = *MEMORY[0x263F62088];
  uint64_t v7 = (_DWORD *)MEMORY[0x263F61FD8];
  *(_DWORD *)(v0 + 916) = *MEMORY[0x263F61FE0];
  *(_DWORD *)(v0 + 920) = *v7;
  uint64_t v147 = v0 + 232;
  while (1)
  {
    *(void *)(v0 + 872) = v5;
    *(unsigned char *)(v0 + 924) = 1;
    uint64_t v15 = *(void *)(v0 + 856);
    if (v5 >= *(void *)(v15 + 16))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
    uint64_t v16 = *(_DWORD *)(v0 + 900);
    int64_t v17 = *(void *)(v0 + 784);
    uint64_t v18 = *(void *)(v0 + 768);
    uint64_t v19 = *(void *)(v0 + 752);
    uint64_t v20 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
    uint64_t v21 = *(void *)(v0 + 744);
    v20(*(void *)(v0 + 792), v15+ ((*(unsigned __int8 *)(v0 + 896) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 896))+ *(void *)(v17 + 72) * v5, *(void *)(v0 + 776));
    Prompt.Component.value.getter();
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v18, v21);
    if (v22 == v16)
    {
      uint64_t v8 = *(void *)(v0 + 792);
      uint64_t v9 = *(void *)(v0 + 784);
      uint64_t v10 = *(void *)(v0 + 776);
      uint64_t v11 = *(uint64_t **)(v0 + 768);
      (*(void (**)(uint64_t *, void))(*(void *)(v0 + 752) + 96))(v11, *(void *)(v0 + 744));
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      *(void *)(v0 + 488) = v12;
      *(void *)(v0 + 496) = v13;
      uint64_t v14 = MEMORY[0x263F8EE78];
      *(void *)(v0 + 504) = MEMORY[0x263F8EE78];
      *(void *)(v0 + 512) = v14;
      swift_bridgeObjectRetain();
      specialized static Prompt.+= infix(_:_:)(v1, (uint64_t *)(v0 + 488));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      goto LABEL_4;
    }
    if (v22 == *(_DWORD *)(v0 + 904)) {
      break;
    }
    if (v22 == *(_DWORD *)(v0 + 908))
    {
      uint64_t v23 = *(void *)(v0 + 768);
      uint64_t v24 = *(void *)(v0 + 736);
      uint64_t v25 = *(void *)(v0 + 728);
      uint64_t v26 = *(void *)(v0 + 720);
      uint64_t v27 = *(void *)(v0 + 712);
      uint64_t v28 = *(uint64_t **)(v0 + 704);
      unint64_t v29 = *(void *)(v0 + 688);
      unint64_t v30 = *(void *)(v0 + 680);
      uint64_t v143 = *(void *)(v0 + 672);
      uint64_t v31 = *(void *)(v0 + 544);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 752) + 96))(v23, *(void *)(v0 + 744));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v24, v23, v26);
      uint64_t v32 = SpecialToken.identifier.getter();
      uint64_t v34 = v33;
      uint64_t v35 = SpecialToken.instance.getter();
      char v37 = v36;
      outlined init with copy of Locale?(v31, v30);
      uint64_t v38 = (uint64_t)v28 + *(int *)(v29 + 20);
      unsigned int v39 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
      void *v28 = v32;
      v28[1] = v34;
      uint64_t v40 = (uint64_t *)((char *)v28 + *(int *)(v29 + 24));
      *uint64_t v40 = v35;
      v40[1] = v37;
      outlined assign with take of Locale?(v30, v38);
      outlined init with take of PromptTemplateInfo((uint64_t)v28, v27, type metadata accessor for Prompt.SpecialToken);
      *(void *)(v0 + 424) = 0;
      *(void *)(v0 + 432) = 0xE000000000000000;
      MEMORY[0x261202900](0);
      uint64_t v41 = (void *)MEMORY[0x263F8EE78];
      uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, MEMORY[0x263F8EE78]);
      *(void *)(v0 + 440) = v42;
      uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, v41);
      *(void *)(v0 + 448) = v43;
      outlined init with copy of Prompt.Delimiter(v27, v143, type metadata accessor for Prompt.SpecialToken);
      uint64_t v44 = String.count.getter();
      uint64_t v45 = *(void *)(v42 + 16);
      uint64_t v46 = v43[2];
      uint64_t v47 = __OFADD__(v45, v46);
      uint64_t v48 = v45 + v46;
      if (v47) {
        goto LABEL_39;
      }
      unint64_t v49 = *(void *)(v0 + 672);
      uint64_t v50 = *(void *)(v0 + 664);
      uint64_t v51 = *(void *)(v0 + 640);
      *(void *)(v49 + *(int *)(v51 + 20)) = v44;
      *(void *)(v49 + *(int *)(v51 + 24)) = v48;
      outlined init with copy of Prompt.Delimiter(v49, v50, type metadata accessor for Prompt.Delimiter);
      uint64_t v53 = *(void *)(v42 + 16);
      uint64_t v52 = *(void *)(v42 + 24);
      if (v53 >= v52 >> 1) {
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v42);
      }
      uint64_t v54 = *(void *)(v0 + 784);
      uint64_t v140 = *(void *)(v0 + 776);
      uint64_t v144 = *(void *)(v0 + 792);
      uint64_t v55 = *(void *)(v0 + 736);
      uint64_t v56 = *(void *)(v0 + 728);
      uint64_t v57 = *(void *)(v0 + 720);
      uint64_t v58 = *(void *)(v0 + 712);
      uint64_t v59 = *(void *)(v0 + 672);
      unint64_t v60 = *(void *)(v0 + 664);
      uint64_t v61 = *(void *)(v0 + 648);
      *(void *)(v42 + 16) = v53 + 1;
      outlined init with take of PromptTemplateInfo(v60, v42+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v53, type metadata accessor for Prompt.Delimiter);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_3(v59, type metadata accessor for Prompt.Delimiter);
      unint64_t v62 = *(void *)(v0 + 432);
      uint64_t v63 = *(void *)(v0 + 448);
      *(void *)(v0 + 456) = *(void *)(v0 + 424);
      *(void *)(v0 + 464) = v62;
      *(void *)(v0 + 472) = v42;
      *(void *)(v0 + 480) = v63;
      specialized static Prompt.+= infix(_:_:)(v147, (uint64_t *)(v0 + 456));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_3(v58, type metadata accessor for Prompt.SpecialToken);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v144, v140);
      uint64_t v1 = v0 + 232;
    }
    else
    {
      if (v22 != *(_DWORD *)(v0 + 912))
      {
        id v150 = *(void *)(v0 + 824);
        uint64_t v117 = *(void *)(v0 + 808);
        uint64_t v146 = *(void *)(v0 + 800);
        unint64_t v118 = *(void *)(v0 + 792);
        uint64_t v119 = *(void *)(v0 + 784);
        uint64_t v120 = *(void *)(v0 + 776);
        uint64_t v152 = *(void *)(v0 + 768);
        char v142 = *(void *)(v0 + 752);
        uint64_t v148 = *(void *)(v0 + 744);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v121 = type metadata accessor for Prompt.RenderError();
        lazy protocol witness table accessor for type Prompt.RenderError and conformance Prompt.RenderError(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
        swift_allocError();
        uint64_t v123 = v122;
        v20(v122, v118, v120);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v121 - 8) + 104))(v123, *MEMORY[0x263F61FE8], v121);
        swift_willThrow();
        (*(void (**)(unint64_t, uint64_t))(v119 + 8))(v118, v120);
        (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v150, v146);
        (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v152, v148);
LABEL_37:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v100 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_21;
      }
      uint64_t v64 = *(_DWORD *)(v0 + 920);
      uint64_t v65 = *(_DWORD *)(v0 + 916);
      uint64_t v66 = *(void *)(v0 + 768);
      uint64_t v67 = *(void *)(v0 + 600);
      uint64_t v68 = *(void *)(v0 + 592);
      Swift::String v69 = *(void *)(v0 + 584);
      Swift::Int v70 = *(void *)(v0 + 576);
      unint64_t v71 = *(void *)(v0 + 568);
      Swift::String v72 = *(void *)(v0 + 560);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 752) + 96))(v66, *(void *)(v0 + 744));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v67, v66, v69);
      Prompt.ImageData.format.getter();
      unint64_t v73 = v72;
      uint64_t v74 = v65;
      uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 88))(v70, v73);
      uint64_t v76 = v75;
      if (v75 != v65 && v75 != v64)
      {
        char v124 = *(void *)(v0 + 560);
        return MEMORY[0x270F9F7C8](v124, v124);
      }
      uint64_t v77 = Prompt.ImageData.data.getter();
      os_log_type_t v79 = v78;
      *(void *)(v0 + 200) = 0;
      *(void *)(v0 + 208) = 0xE000000000000000;
      MEMORY[0x261202900](0);
      uint64_t v80 = (void *)MEMORY[0x263F8EE78];
      uint64_t v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, MEMORY[0x263F8EE78]);
      uint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, v80);
      Swift::String v83 = *(void *)(v0 + 200);
      uint64_t v84 = *(void *)(v0 + 208);
      outlined copy of Data._Representation(v77, v79);
      uint64_t v85 = String.count.getter();
      char v145 = v81;
      os_log_type_t v86 = *(void *)(v81 + 16);
      int v87 = v82[2];
      uint64_t v88 = v86 + v87;
      if (__OFADD__(v86, v87)) {
        goto LABEL_40;
      }
      uint64_t v141 = v85;
      outlined copy of Data._Representation(v77, v79);
      uint64_t v90 = v82[2];
      uint64_t v89 = v82[3];
      unint64_t v91 = v90 + 1;
      if (v90 >= v89 >> 1)
      {
        uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v89 > 1), v90 + 1, 1, v82);
        unint64_t v91 = v90 + 1;
        uint64_t v82 = v96;
      }
      uint64_t v92 = v76 != v74;
      uint64_t v93 = *(void *)(v0 + 784);
      uint64_t v138 = *(void *)(v0 + 776);
      uint64_t v139 = *(void *)(v0 + 792);
      BOOL v94 = *(void *)(v0 + 592);
      double v136 = *(void *)(v0 + 584);
      uint64_t v137 = *(void *)(v0 + 600);
      v82[2] = v91;
      uint64_t v95 = &v82[5 * v90];
      *((unsigned char *)v95 + 32) = v92;
      v95[5] = v77;
      v95[6] = v79;
      v95[7] = v141;
      v95[8] = v88;
      outlined consume of Data._Representation(v77, v79);
      *(void *)(v0 + 168) = v83;
      *(void *)(v0 + 176) = v84;
      *(void *)(v0 + 184) = v145;
      *(void *)(v0 + 192) = v82;
      specialized static Prompt.+= infix(_:_:)(v147, (uint64_t *)(v0 + 168));
      uint64_t v1 = v0 + 232;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v77, v79);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v137, v136);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v139, v138);
    }
LABEL_4:
    uint64_t v5 = *(void *)(v0 + 872) + 1;
    if (v5 == *(void *)(v0 + 864)) {
      goto LABEL_20;
    }
  }
  uint64_t v102 = *(void *)(v0 + 768);
  uint64_t v103 = *(void *)(v0 + 632);
  uint64_t v104 = *(void *)(v0 + 624);
  uint64_t v105 = *(void *)(v0 + 616);
  uint64_t v106 = *(void *)(v0 + 528);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 752) + 96))(v102, *(void *)(v0 + 744));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 32))(v103, v102, v105);
  uint64_t v107 = BindableVariable.name.getter();
  if (*(void *)(v106 + 16) && (long long v109 = specialized __RawDictionaryStorage.find<A>(_:)(v107, v108), (v110 & 1) != 0))
  {
    outlined init with copy of GuidedGenerationTokenizer(*(void *)(*(void *)(v0 + 528) + 56) + 40 * v109, (uint64_t)v135);
  }
  else
  {
    *(void *)(v0 + 120) = 0;
    *uint64_t v135 = 0u;
    *(_OWORD *)(v0 + 104) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 112))
  {
    uint64_t v153 = *(void *)(v0 + 824);
    unint64_t v125 = *(void *)(v0 + 808);
    unint64_t v149 = *(void *)(v0 + 792);
    unint64_t v151 = *(void *)(v0 + 800);
    uint64_t v126 = *(void *)(v0 + 784);
    uint64_t v127 = *(void *)(v0 + 776);
    uint64_t v128 = *(void *)(v0 + 632);
    uint64_t v129 = *(void *)(v0 + 624);
    uint64_t v130 = *(void *)(v0 + 616);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v135, &demangling cache variable for type metadata for PromptComponentValueConvertible?);
    int v131 = type metadata accessor for Prompt.RenderError();
    lazy protocol witness table accessor for type Prompt.RenderError and conformance Prompt.RenderError(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
    swift_allocError();
    uint64_t v133 = v132;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 16))(v132, v128, v130);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v131 - 8) + 104))(v133, *MEMORY[0x263F61FF8], v131);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v130);
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v149, v127);
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v153, v151);
    goto LABEL_37;
  }
  uint64_t v111 = *(void *)(v0 + 608);
  outlined init with take of _HasContiguousBytes(v135, (uint64_t)v134);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_25FA352B0;
  __swift_project_boxed_opaque_existential_1(v134, *(void *)(v0 + 152));
  dispatch thunk of PromptComponentValueConvertible.toValue()();
  uint64_t v112 = type metadata accessor for Prompt.Component.Privacy();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v111, 1, 1, v112);
  Prompt.Component.init(value:priority:privacy:)();
  Prompt.init(components:)();
  uint64_t v113 = (void *)swift_task_alloc();
  *(void *)(v0 + 880) = v113;
  *uint64_t v113 = v0;
  v113[1] = Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:);
  uint64_t v114 = *(void *)(v0 + 544);
  uint64_t v115 = *(void *)(v0 + 536);
  uint64_t v116 = *(void *)(v0 + 528);
  return Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)(v0 + 264, v116, v115, v114);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 888) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:);
  }
  else
  {
    uint64_t v2 = Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  long long v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  long long v44;
  uint64_t (*v45)(void);
  unsigned char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, unint64_t, uint64_t);
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  void *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  long long *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;

  uint64_t v170 = (void *)(v0 + 128);
  uint64_t v190 = v0 + 232;
  uint64_t v1 = (uint64_t *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 280);
  if (*(unsigned char *)(v0 + 924))
  {
    Swift::Int v3 = *(void *)(v2 + 16);
    if (v3)
    {
      uint64_t v183 = (uint64_t *)(v0 + 280);
      uint64_t v4 = *(void *)(v0 + 648);
      uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v6 = *(void *)(v4 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v7 = *(uint64_t **)(v0 + 656);
        outlined init with copy of Prompt.Delimiter(v5, (uint64_t)v7, type metadata accessor for Prompt.Delimiter);
        uint64_t v8 = *v7;
        uint64_t v9 = v7[1];
        if (one-time initialization token for promptModule != -1) {
          swift_once();
        }
        uint64_t v10 = (uint64_t *)__swift_project_value_buffer(*(void *)(v0 + 688), (uint64_t)static Prompt.SpecialToken.promptModule);
        uint64_t v11 = *(void *)(v0 + 656);
        if (v8 == *v10 && v9 == v10[1]) {
          break;
        }
        uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        _s15TokenGeneration6PromptV9DelimiterVWOhTm_3(v11, type metadata accessor for Prompt.Delimiter);
        if (v13) {
          goto LABEL_14;
        }
        v5 += v6;
        if (!--v3)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = *v183;
          goto LABEL_15;
        }
      }
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_3(*(void *)(v0 + 656), type metadata accessor for Prompt.Delimiter);
LABEL_14:
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(v0 + 704);
      uint64_t v15 = *(void **)(v0 + 696);
      uint64_t v16 = *(void *)(v0 + 688);
      int64_t v17 = *(void *)(v0 + 680);
      uint64_t v18 = *(void *)(v0 + 544);
      *(void *)(v0 + 360) = 0;
      *(void *)(v0 + 368) = 0xE000000000000000;
      MEMORY[0x261202900](0);
      uint64_t v19 = (void *)MEMORY[0x263F8EE78];
      *(void *)(v0 + 376) = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, MEMORY[0x263F8EE78]);
      *(void *)(v0 + 384) = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, v19);
      uint64_t v21 = *v10;
      uint64_t v20 = v10[1];
      outlined init with copy of Locale?(v18, v17);
      uint64_t v22 = (uint64_t)v15 + *(int *)(v16 + 20);
      uint64_t v23 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
      void *v15 = v21;
      v15[1] = v20;
      uint64_t v24 = (void *)((char *)v15 + *(int *)(v16 + 24));
      *uint64_t v24 = 0;
      v24[1] = 0;
      swift_bridgeObjectRetain();
      outlined assign with take of Locale?(v17, v22);
      outlined init with take of PromptTemplateInfo((uint64_t)v15, v14, type metadata accessor for Prompt.SpecialToken);
      Prompt.StringInterpolation.appendInterpolation(token:)(v14);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_3(v14, type metadata accessor for Prompt.SpecialToken);
      uint64_t v25 = *(void *)(v0 + 384);
      uint64_t v26 = *(_OWORD *)(v0 + 368);
      uint64_t v27 = *(void *)(v0 + 264);
      uint64_t v28 = *(void *)(v0 + 272);
      unint64_t v29 = *(void *)(v0 + 280);
      unint64_t v30 = *(void *)(v0 + 288);
      *(void *)(v0 + 328) = *(void *)(v0 + 360);
      *(_OWORD *)(v0 + 336) = v26;
      *(void *)(v0 + 352) = v25;
      *(void *)(v0 + 392) = v27;
      *(void *)(v0 + 400) = v28;
      *(void *)(v0 + 408) = v29;
      *(void *)(v0 + 416) = v30;
      specialized static Prompt.+= infix(_:_:)(v0 + 328, (uint64_t *)(v0 + 392));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(v0 + 336);
      *(void *)(v0 + 264) = *(void *)(v0 + 328);
      *(void *)(v0 + 272) = v31;
      uint64_t v32 = *(_OWORD *)(v0 + 344);
      *(_OWORD *)uint64_t v183 = v32;
      uint64_t v2 = v32;
LABEL_15:
      uint64_t v1 = (uint64_t *)(v0 + 296);
    }
  }
  uint64_t v33 = *(void *)(v0 + 816);
  uint64_t v34 = *(void *)(v0 + 808);
  uint64_t v35 = *(void *)(v0 + 800);
  uint64_t v187 = *(void *)(v0 + 792);
  uint64_t v36 = *(void *)(v0 + 784);
  uint64_t v178 = *(void *)(v0 + 632);
  uint64_t v184 = *(void *)(v0 + 776);
  char v37 = *(void *)(v0 + 624);
  uint64_t v38 = *(void *)(v0 + 616);
  unsigned int v39 = *(void *)(v0 + 272);
  uint64_t v40 = *(void *)(v0 + 288);
  *(void *)(v0 + 296) = *(void *)(v0 + 264);
  *(void *)(v0 + 304) = v39;
  *(void *)(v0 + 312) = v2;
  *(void *)(v0 + 320) = v40;
  specialized static Prompt.+= infix(_:_:)(v190, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v178, v38);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v187, v184);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v170);
  uint64_t v41 = *(void *)(v0 + 872) + 1;
  if (v41 == *(void *)(v0 + 864))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void *)(v0 + 520);
    (*(void (**)(void, void))(*(void *)(v0 + 808) + 8))(*(void *)(v0 + 824), *(void *)(v0 + 800));
    uint64_t v43 = *(void *)(v0 + 256);
    uint64_t v44 = *(_OWORD *)(v0 + 240);
    *(void *)uint64_t v42 = *(void *)(v0 + 232);
    *(_OWORD *)(v42 + 8) = v44;
    *(void *)(v42 + 24) = v43;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
    return v45();
  }
  uint64_t v169 = (long long *)(v0 + 88);
  uint64_t v47 = (unsigned char *)(v0 + 924);
  while (1)
  {
    *(void *)(v0 + 872) = v41;
    *uint64_t v47 = 0;
    uint64_t v55 = *(void *)(v0 + 856);
    if (v41 >= *(void *)(v55 + 16))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
    }
    uint64_t v56 = *(_DWORD *)(v0 + 900);
    uint64_t v57 = *(void *)(v0 + 784);
    uint64_t v58 = *(void *)(v0 + 768);
    uint64_t v59 = *(void *)(v0 + 752);
    unint64_t v60 = *(void (**)(uint64_t, unint64_t, uint64_t))(v57 + 16);
    uint64_t v61 = *(void *)(v0 + 744);
    v60(*(void *)(v0 + 792), v55+ ((*(unsigned __int8 *)(v0 + 896) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 896))+ *(void *)(v57 + 72) * v41, *(void *)(v0 + 776));
    Prompt.Component.value.getter();
    unint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 88))(v58, v61);
    if (v62 == v56)
    {
      uint64_t v48 = *(void *)(v0 + 792);
      unint64_t v49 = *(void *)(v0 + 784);
      uint64_t v50 = *(void *)(v0 + 776);
      uint64_t v51 = *(uint64_t **)(v0 + 768);
      (*(void (**)(uint64_t *, void))(*(void *)(v0 + 752) + 96))(v51, *(void *)(v0 + 744));
      uint64_t v52 = *v51;
      uint64_t v53 = v51[1];
      *(void *)(v0 + 488) = v52;
      *(void *)(v0 + 496) = v53;
      uint64_t v54 = MEMORY[0x263F8EE78];
      *(void *)(v0 + 504) = MEMORY[0x263F8EE78];
      *(void *)(v0 + 512) = v54;
      swift_bridgeObjectRetain();
      specialized static Prompt.+= infix(_:_:)(v190, (uint64_t *)(v0 + 488));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
      goto LABEL_23;
    }
    if (v62 == *(_DWORD *)(v0 + 904)) {
      break;
    }
    if (v62 == *(_DWORD *)(v0 + 908))
    {
      uint64_t v63 = *(void *)(v0 + 768);
      uint64_t v64 = *(void *)(v0 + 736);
      uint64_t v65 = *(void *)(v0 + 728);
      uint64_t v66 = *(void *)(v0 + 720);
      uint64_t v67 = *(void *)(v0 + 712);
      uint64_t v68 = *(uint64_t **)(v0 + 704);
      Swift::String v69 = *(void *)(v0 + 688);
      Swift::Int v70 = *(void *)(v0 + 680);
      uint64_t v179 = *(void *)(v0 + 672);
      unint64_t v71 = *(void *)(v0 + 544);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 752) + 96))(v63, *(void *)(v0 + 744));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v64, v63, v66);
      Swift::String v72 = SpecialToken.identifier.getter();
      uint64_t v74 = v73;
      uint64_t v75 = SpecialToken.instance.getter();
      uint64_t v77 = v76;
      outlined init with copy of Locale?(v71, v70);
      uint64_t v78 = (uint64_t)v68 + *(int *)(v69 + 20);
      os_log_type_t v79 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v78, 1, 1, v79);
      *uint64_t v68 = v72;
      v68[1] = v74;
      uint64_t v80 = (uint64_t *)((char *)v68 + *(int *)(v69 + 24));
      *uint64_t v80 = v75;
      v80[1] = v77;
      outlined assign with take of Locale?(v70, v78);
      outlined init with take of PromptTemplateInfo((uint64_t)v68, v67, type metadata accessor for Prompt.SpecialToken);
      *(void *)(v0 + 424) = 0;
      *(void *)(v0 + 432) = 0xE000000000000000;
      MEMORY[0x261202900](0);
      uint64_t v81 = (void *)MEMORY[0x263F8EE78];
      uint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, MEMORY[0x263F8EE78]);
      *(void *)(v0 + 440) = v82;
      Swift::String v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, v81);
      *(void *)(v0 + 448) = v83;
      outlined init with copy of Prompt.Delimiter(v67, v179, type metadata accessor for Prompt.SpecialToken);
      uint64_t v84 = String.count.getter();
      uint64_t v85 = *(void *)(v82 + 16);
      os_log_type_t v86 = v83[2];
      int v87 = __OFADD__(v85, v86);
      uint64_t v88 = v85 + v86;
      if (v87) {
        goto LABEL_54;
      }
      uint64_t v89 = *(void *)(v0 + 672);
      uint64_t v90 = *(void *)(v0 + 664);
      unint64_t v91 = *(void *)(v0 + 640);
      *(void *)(v89 + *(int *)(v91 + 20)) = v84;
      *(void *)(v89 + *(int *)(v91 + 24)) = v88;
      outlined init with copy of Prompt.Delimiter(v89, v90, type metadata accessor for Prompt.Delimiter);
      uint64_t v93 = *(void *)(v82 + 16);
      uint64_t v92 = *(void *)(v82 + 24);
      if (v93 >= v92 >> 1) {
        uint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1, v82);
      }
      BOOL v94 = *(void *)(v0 + 784);
      uint64_t v175 = *(void *)(v0 + 776);
      unint64_t v180 = *(void *)(v0 + 792);
      uint64_t v95 = *(void *)(v0 + 736);
      uint64_t v96 = *(void *)(v0 + 728);
      uint64_t v97 = *(void *)(v0 + 720);
      os_log_t v98 = *(void *)(v0 + 712);
      int v99 = *(void *)(v0 + 672);
      uint64_t v100 = *(void *)(v0 + 664);
      uint64_t v101 = *(void *)(v0 + 648);
      *(void *)(v82 + 16) = v93 + 1;
      outlined init with take of PromptTemplateInfo(v100, v82+ ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80))+ *(void *)(v101 + 72) * v93, type metadata accessor for Prompt.Delimiter);
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_3(v99, type metadata accessor for Prompt.Delimiter);
      uint64_t v102 = *(void *)(v0 + 432);
      uint64_t v103 = *(void *)(v0 + 448);
      *(void *)(v0 + 456) = *(void *)(v0 + 424);
      *(void *)(v0 + 464) = v102;
      *(void *)(v0 + 472) = v82;
      *(void *)(v0 + 480) = v103;
      specialized static Prompt.+= infix(_:_:)(v190, (uint64_t *)(v0 + 456));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s15TokenGeneration6PromptV9DelimiterVWOhTm_3(v98, type metadata accessor for Prompt.SpecialToken);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v180, v175);
      uint64_t v47 = (unsigned char *)(v0 + 924);
    }
    else
    {
      if (v62 != *(_DWORD *)(v0 + 912))
      {
        uint64_t v188 = *(void *)(v0 + 824);
        uint64_t v152 = *(void *)(v0 + 808);
        uint64_t v182 = *(void *)(v0 + 800);
        uint64_t v153 = *(void *)(v0 + 792);
        uint64_t v154 = *(void *)(v0 + 784);
        uint64_t v155 = *(void *)(v0 + 776);
        uint64_t v191 = *(void *)(v0 + 768);
        uint64_t v177 = *(void *)(v0 + 752);
        uint64_t v185 = *(void *)(v0 + 744);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v156 = type metadata accessor for Prompt.RenderError();
        lazy protocol witness table accessor for type Prompt.RenderError and conformance Prompt.RenderError(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
        swift_allocError();
        uint64_t v158 = v157;
        v60(v157, v153, v155);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v156 - 8) + 104))(v158, *MEMORY[0x263F61FE8], v156);
        swift_willThrow();
        (*(void (**)(unint64_t, uint64_t))(v154 + 8))(v153, v155);
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v188, v182);
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v191, v185);
LABEL_52:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_18;
      }
      uint64_t v104 = *(_DWORD *)(v0 + 920);
      uint64_t v105 = *(_DWORD *)(v0 + 916);
      uint64_t v106 = *(void *)(v0 + 768);
      uint64_t v107 = *(void *)(v0 + 600);
      uint64_t v108 = *(void *)(v0 + 592);
      long long v109 = *(void *)(v0 + 584);
      uint64_t v110 = *(void *)(v0 + 576);
      uint64_t v111 = *(void *)(v0 + 568);
      uint64_t v112 = *(void *)(v0 + 560);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 752) + 96))(v106, *(void *)(v0 + 744));
      uint64_t v113 = v109;
      uint64_t v114 = v105;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 32))(v107, v106, v113);
      Prompt.ImageData.format.getter();
      uint64_t v115 = (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 88))(v110, v112);
      uint64_t v116 = v115;
      if (v115 != v105 && v115 != v104)
      {
        char v159 = *(void *)(v0 + 560);
        return MEMORY[0x270F9F7C8](v159, v159);
      }
      uint64_t v117 = Prompt.ImageData.data.getter();
      uint64_t v119 = v118;
      *(void *)(v0 + 200) = 0;
      *(void *)(v0 + 208) = 0xE000000000000000;
      MEMORY[0x261202900](0);
      uint64_t v120 = (void *)MEMORY[0x263F8EE78];
      uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, MEMORY[0x263F8EE78]);
      uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, v120);
      uint64_t v123 = *(void *)(v0 + 200);
      char v124 = *(void *)(v0 + 208);
      outlined copy of Data._Representation(v117, v119);
      unint64_t v125 = String.count.getter();
      uint64_t v181 = v121;
      uint64_t v126 = *(void *)(v121 + 16);
      uint64_t v127 = v122[2];
      uint64_t v128 = v126 + v127;
      if (__OFADD__(v126, v127)) {
        goto LABEL_55;
      }
      uint64_t v176 = v125;
      outlined copy of Data._Representation(v117, v119);
      uint64_t v130 = v122[2];
      uint64_t v129 = v122[3];
      int v131 = v130 + 1;
      if (v130 >= v129 >> 1)
      {
        double v136 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v129 > 1), v130 + 1, 1, v122);
        int v131 = v130 + 1;
        uint64_t v122 = v136;
      }
      BOOL v132 = v116 != v114;
      uint64_t v133 = *(void *)(v0 + 784);
      uint64_t v173 = *(void *)(v0 + 776);
      uint64_t v174 = *(void *)(v0 + 792);
      uint64_t v134 = *(void *)(v0 + 592);
      uint64_t v171 = *(void *)(v0 + 584);
      uint64_t v172 = *(void *)(v0 + 600);
      v122[2] = v131;
      uint64_t v135 = &v122[5 * v130];
      *((unsigned char *)v135 + 32) = v132;
      v135[5] = v117;
      v135[6] = v119;
      v135[7] = v176;
      v135[8] = v128;
      outlined consume of Data._Representation(v117, v119);
      *(void *)(v0 + 168) = v123;
      *(void *)(v0 + 176) = v124;
      *(void *)(v0 + 184) = v181;
      *(void *)(v0 + 192) = v122;
      specialized static Prompt.+= infix(_:_:)(v190, (uint64_t *)(v0 + 168));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v117, v119);
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v172, v171);
      (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v174, v173);
      uint64_t v47 = (unsigned char *)(v0 + 924);
    }
LABEL_23:
    uint64_t v41 = *(void *)(v0 + 872) + 1;
    if (v41 == *(void *)(v0 + 864)) {
      goto LABEL_17;
    }
  }
  uint64_t v137 = *(void *)(v0 + 768);
  uint64_t v138 = *(void *)(v0 + 632);
  uint64_t v139 = *(void *)(v0 + 624);
  uint64_t v140 = *(void *)(v0 + 616);
  uint64_t v141 = *(void *)(v0 + 528);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 752) + 96))(v137, *(void *)(v0 + 744));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 32))(v138, v137, v140);
  char v142 = BindableVariable.name.getter();
  if (*(void *)(v141 + 16) && (uint64_t v144 = specialized __RawDictionaryStorage.find<A>(_:)(v142, v143), (v145 & 1) != 0))
  {
    outlined init with copy of GuidedGenerationTokenizer(*(void *)(*(void *)(v0 + 528) + 56) + 40 * v144, (uint64_t)v169);
  }
  else
  {
    *(void *)(v0 + 120) = 0;
    *uint64_t v169 = 0u;
    *(_OWORD *)(v0 + 104) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 112))
  {
    uint64_t v160 = *(void *)(v0 + 808);
    uint64_t v189 = *(void *)(v0 + 800);
    uint64_t v192 = *(void *)(v0 + 824);
    uint64_t v186 = *(void *)(v0 + 792);
    uint64_t v161 = *(void *)(v0 + 784);
    char v162 = *(void *)(v0 + 776);
    uint64_t v163 = *(void *)(v0 + 632);
    uint64_t v164 = *(void *)(v0 + 624);
    int v165 = *(void *)(v0 + 616);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of SingleValueDecodingContainer?((uint64_t)v169, &demangling cache variable for type metadata for PromptComponentValueConvertible?);
    BOOL v166 = type metadata accessor for Prompt.RenderError();
    lazy protocol witness table accessor for type Prompt.RenderError and conformance Prompt.RenderError(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, MEMORY[0x263F62000]);
    swift_allocError();
    double v168 = v167;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v164 + 16))(v167, v163, v165);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v166 - 8) + 104))(v168, *MEMORY[0x263F61FF8], v166);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v163, v165);
    (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v186, v162);
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v192, v189);
    goto LABEL_52;
  }
  uint64_t v146 = *(void *)(v0 + 608);
  outlined init with take of _HasContiguousBytes(v169, (uint64_t)v170);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_25FA352B0;
  __swift_project_boxed_opaque_existential_1(v170, *(void *)(v0 + 152));
  dispatch thunk of PromptComponentValueConvertible.toValue()();
  uint64_t v147 = type metadata accessor for Prompt.Component.Privacy();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v147 - 8) + 56))(v146, 1, 1, v147);
  Prompt.Component.init(value:priority:privacy:)();
  Prompt.init(components:)();
  uint64_t v148 = (void *)swift_task_alloc();
  *(void *)(v0 + 880) = v148;
  *uint64_t v148 = v0;
  v148[1] = Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:);
  unint64_t v149 = *(void *)(v0 + 544);
  id v150 = *(void *)(v0 + 536);
  unint64_t v151 = *(void *)(v0 + 528);
  return Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)(v0 + 264, v151, v150, v149);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;

  uint64_t v11 = v0[103];
  uint64_t v1 = v0[100];
  uint64_t v2 = v0[99];
  Swift::Int v3 = v0[98];
  uint64_t v4 = v0[97];
  uint64_t v5 = v0[79];
  uint64_t v6 = v0[78];
  uint64_t v7 = v0[77];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[101] + 8);
  v8(v0[102], v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8(v11, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}