uint64_t sub_1AD8E5A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD8E5A44);
}

uint64_t sub_1AD8E5A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_1AD8E5AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD8E5AC4);
}

uint64_t sub_1AD8E5AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_1AD8E5B34()
{
  uint64_t result = type metadata accessor for ScheduleOccurrenceViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for EditScheduleOccurrenceRow()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EditScheduleOccurrenceRow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EditScheduleOccurrenceRow(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for EditScheduleOccurrenceRow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EditScheduleOccurrenceRow(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditScheduleOccurrenceRow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EditScheduleOccurrenceRow()
{
  return &type metadata for EditScheduleOccurrenceRow;
}

uint64_t destroy for AddSchedulePromptRow()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AddSchedulePromptRow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AddSchedulePromptRow(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AddSchedulePromptRow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AddSchedulePromptRow(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AddSchedulePromptRow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AddSchedulePromptRow()
{
  return &type metadata for AddSchedulePromptRow;
}

unint64_t sub_1AD8E5F84()
{
  unint64_t result = qword_1E9A4B5E0;
  if (!qword_1E9A4B5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B5E0);
  }
  return result;
}

unint64_t sub_1AD8E5FDC()
{
  unint64_t result = qword_1E9A4B5E8;
  if (!qword_1E9A4B5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B5E8);
  }
  return result;
}

uint64_t sub_1AD8E6030()
{
  return sub_1AD8E2400(&qword_1E9A4B5F0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceRow);
}

unint64_t sub_1AD8E6078()
{
  unint64_t result = qword_1E9A4B5F8;
  if (!qword_1E9A4B5F8)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B5F8);
  }
  return result;
}

unint64_t sub_1AD8E60B4()
{
  unint64_t result = qword_1E9A4B600;
  if (!qword_1E9A4B600)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B600);
  }
  return result;
}

uint64_t sub_1AD8E60F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t ScheduleStatus.enabledTitle.getter()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  return v1;
}

uint64_t ScheduleStatus.disabledTitle.getter()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  return v1;
}

uint64_t static ScheduleStatus.== infix(_:_:)()
{
  return 1;
}

uint64_t ScheduleStatus.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t ScheduleStatus.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8E6350()
{
  return 1;
}

uint64_t sub_1AD8E6358()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8E639C()
{
  return sub_1AD9E03B0();
}

uint64_t sub_1AD8E63C4()
{
  return sub_1AD9E03E0();
}

unint64_t sub_1AD8E6408()
{
  unint64_t result = qword_1E9A4B608;
  if (!qword_1E9A4B608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B608);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScheduleStatus(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ScheduleStatus(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1AD8E654CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1AD8E6574()
{
  return 0;
}

ValueMetadata *type metadata accessor for ScheduleStatus()
{
  return &type metadata for ScheduleStatus;
}

void sub_1AD8E658C(double a1)
{
  double v1 = a1 / 3600.0;
  if (a1 / 3600.0 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((*(void *)&v1 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v2 = 3600 * (uint64_t)v1;
  if ((unsigned __int128)((uint64_t)v1 * (__int128)3600) >> 64 == v2 >> 63)
  {
    double v3 = (double)v2;
    double v4 = a1 - (double)v2;
    sub_1AD8E8A74(0, (unint64_t *)&qword_1EB725D48, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBBE00]);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1AD9E3080;
    *(double *)(v5 + 32) = v3;
    *(double *)(v5 + 40) = v4;
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_1AD8E6668@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_1AD8E827C(0, &qword_1E9A4B628, (uint64_t (*)(uint64_t))sub_1AD8E7F50, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  v7 = (char *)&v71 - v6;
  sub_1AD8E8154();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8E80EC();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v14, v16);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8E8024();
  uint64_t v77 = v19;
  uint64_t v76 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19, v20);
  v80 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21, v23);
  v79 = (char *)&v71 - v24;
  v25 = *(void **)(*(void *)(v2 + 8) + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (v25)
  {
    objc_msgSend(v25, sel_windDownTime);
    double v27 = v26;
  }
  else
  {
    double v27 = 0.0;
  }
  v28 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
  v29 = (char *)objc_allocWithZone(v28);
  *(void *)&v29[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
  v87.receiver = v29;
  v87.super_class = v28;
  id v30 = objc_msgSendSuper2(&v87, sel_init);
  id v31 = objc_msgSend(v30, sel_stringFromTimeInterval_, v27);

  if (v31)
  {
    v78 = v7;
    uint64_t v75 = a1;
    uint64_t v32 = sub_1AD9DF710();
    uint64_t v34 = v33;

    v35 = (_OWORD *)swift_allocObject();
    long long v36 = *(_OWORD *)(v2 + 48);
    v35[3] = *(_OWORD *)(v2 + 32);
    v35[4] = v36;
    v35[5] = *(_OWORD *)(v2 + 64);
    long long v37 = *(_OWORD *)(v2 + 16);
    v35[1] = *(_OWORD *)v2;
    v35[2] = v37;
    MEMORY[0x1F4188790](v35, v38);
    uint64_t v74 = v15;
    *(&v71 - 2) = v32;
    *(&v71 - 1) = v34;
    sub_1AD8E86C0((void *)v2);
    sub_1AD8E81E8();
    sub_1AD8E83D4((unint64_t *)&qword_1E9A4B678, (void (*)(uint64_t))sub_1AD8E81E8);
    sub_1AD9DF090();
    swift_bridgeObjectRelease();
    uint64_t v39 = sub_1AD9DEF00();
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v18, v13, v9);
    v41 = (uint64_t *)&v18[*(int *)(v74 + 36)];
    uint64_t *v41 = KeyPath;
    v41[1] = v39;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    long long v88 = *(_OWORD *)(v2 + 32);
    long long v83 = *(_OWORD *)(v2 + 32);
    sub_1AD8E8748(0, &qword_1E9A4B6B0, MEMORY[0x1E4F3ECC8]);
    sub_1AD9DF050();
    v42 = (_OWORD *)swift_allocObject();
    long long v43 = *(_OWORD *)(v2 + 48);
    v42[3] = *(_OWORD *)(v2 + 32);
    v42[4] = v43;
    v42[5] = *(_OWORD *)(v2 + 64);
    long long v44 = *(_OWORD *)(v2 + 16);
    v42[1] = *(_OWORD *)v2;
    v42[2] = v44;
    sub_1AD8E86C0((void *)v2);
    sub_1AD8E8A74(0, &qword_1E9A4B610, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB320]);
    sub_1AD8E8498();
    sub_1AD8E8570();
    v45 = v80;
    sub_1AD9DEDF0();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1AD8E8848((uint64_t)v18);
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v79, v45, v77);
    long long v83 = *(_OWORD *)(v2 + 16);
    sub_1AD8E8A74(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
    sub_1AD9DF050();
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    v49 = 0;
    v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    if (v81 == 1)
    {
      long long v54 = *(_OWORD *)(v2 + 64);
      long long v81 = *(_OWORD *)(v2 + 48);
      long long v82 = v54;
      sub_1AD8E8A74(0, &qword_1E9A4B6B8, (uint64_t)&type metadata for WindDownPickerModel, MEMORY[0x1E4F3ECC8]);
      sub_1AD9DF070();
      uint64_t v47 = *((void *)&v83 + 1);
      uint64_t v46 = v83;
      uint64_t v48 = v84;
      v49 = v85;
      v50 = v86;
      long long v81 = v88;
      sub_1AD9DF070();
      uint64_t v52 = *((void *)&v83 + 1);
      uint64_t v51 = v83;
      uint64_t v53 = v84;
    }
    v72 = v49;
    v73 = v50;
    uint64_t v74 = v46;
    uint64_t v55 = v76;
    v56 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
    v57 = v80;
    uint64_t v58 = v77;
    uint64_t v59 = v53;
    v56(v80, v79, v77);
    v56(v78, v57, v58);
    sub_1AD8E7F84();
    v61 = (uint64_t *)&v78[*(int *)(v60 + 48)];
    uint64_t v62 = v74;
    uint64_t *v61 = v74;
    v61[1] = v47;
    v63 = v72;
    v61[2] = v48;
    v61[3] = (uint64_t)v63;
    v64 = v73;
    v61[4] = (uint64_t)v73;
    v61[5] = v51;
    v61[6] = v52;
    v61[7] = v59;
    uint64_t v71 = v59;
    uint64_t v65 = v62;
    sub_1AD8E88A4(v62, v47, v48, v63, v64);
    v66 = *(void (**)(char *, uint64_t))(v55 + 8);
    v66(v79, v58);
    sub_1AD8E8944(v65, v47, v48, v63, v64);
    v66(v80, v58);
    sub_1AD8E7F50(0);
    uint64_t v68 = (uint64_t)v78;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v78, 0, 1, v67);
    return sub_1AD8E89E0(v68, v75);
  }
  else
  {
    sub_1AD8E7F50(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(a1, 1, 1, v70);
  }
}

uint64_t sub_1AD8E6E58()
{
  return swift_release();
}

uint64_t sub_1AD8E6EC4()
{
  return sub_1AD9DF060();
}

__n128 sub_1AD8E6F68@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1AD9DE2B0();
  sub_1AD8E6FFC((uint64_t)&v11);
  char v3 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  char v7 = v17;
  uint64_t v8 = v18;
  __n128 result = v11;
  long long v10 = v16;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(__n128 *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v8;
  return result;
}

uint64_t sub_1AD8E6FFC@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  sub_1AD85F688();
  uint64_t v3 = sub_1AD9DEAF0();
  uint64_t v22 = v4;
  uint64_t v23 = v3;
  uint64_t v24 = v5;
  char v21 = v6 & 1;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1AD9DEAF0();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  id v12 = objc_msgSend(self, sel_tintColor, 0xE000000000000000);
  MEMORY[0x1B3E6ADC0](v12);
  uint64_t v13 = sub_1AD9DEA70();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v19 = v18;
  swift_release();
  v17 &= 1u;
  sub_1AD861548(v7, v9, v11);
  swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(void *)(a1 + 8) = v22;
  *(unsigned char *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v24;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v15;
  *(unsigned char *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v19;
  sub_1AD861558(v23, v22, v21);
  swift_bridgeObjectRetain();
  sub_1AD861558(v13, v15, v17);
  swift_bridgeObjectRetain();
  sub_1AD861548(v13, v15, v17);
  swift_bridgeObjectRelease();
  sub_1AD861548(v23, v22, v21);
  return swift_bridgeObjectRelease();
}

void sub_1AD8E7250(uint64_t a1, uint64_t a2, long long *a3)
{
  double v4 = sub_1AD8E74C4();
  long long v24 = *a3;
  uint64_t v5 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  char v6 = *(void **)(*((void *)&v24 + 1) + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (v6)
  {
    objc_msgSend(v6, sel_windDownTime);
    if (v7 == v4) {
      return;
    }
    uint64_t v8 = *(void **)(*((void *)&v24 + 1) + v5);
  }
  else
  {
    if (v4 == 0.0) {
      return;
    }
    uint64_t v8 = 0;
  }
  id v9 = *((id *)&v24 + 1);
  objc_msgSend(v8, sel_setWindDownTime_, v4);
  sub_1AD8A65A4();
  sub_1AD8E8AC0((uint64_t)&v24);
  double v10 = *MEMORY[0x1E4FA54A0] * 60.0;
  sub_1AD9AA58C(0.0, v10 + 1.0, 3600.0);
  uint64_t v12 = v11;
  if (v4 >= v10)
  {
    uint64_t v15 = &unk_1F046A370;
  }
  else
  {
    double v13 = *MEMORY[0x1E4FA54B8] * 60.0;
    if (v13 == 0.0)
    {
      __break(1u);
      return;
    }
    sub_1AD9AA58C(0.0, 3600.0, v13);
    uint64_t v15 = v14;
  }
  sub_1AD8E8748(0, &qword_1E9A4B618, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1AD9E3080;
  *(void *)(v16 + 32) = v12;
  *(void *)(v16 + 40) = v15;
  char v17 = (objc_class *)type metadata accessor for ShortHourDateComponentsFormatter();
  uint64_t v18 = (char *)objc_allocWithZone(v17);
  *(void *)&v18[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = 4;
  v23.receiver = v18;
  v23.super_class = v17;
  id v19 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v19, sel_setUnitsStyle_, 2);
  objc_msgSend(v19, sel_setAllowedUnits_, 32);

  uint64_t v20 = (objc_class *)type metadata accessor for ShortMinuteDateComponentsFormatter();
  char v21 = (char *)objc_allocWithZone(v20);
  *(void *)&v21[OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options] = 4;
  v22.receiver = v21;
  v22.super_class = v20;
  objc_msgSendSuper2(&v22, sel_init);
  sub_1AD8E8A74(0, &qword_1E9A4B6B8, (uint64_t)&type metadata for WindDownPickerModel, MEMORY[0x1E4F3ECC8]);
  sub_1AD9DF060();
}

double sub_1AD8E74C4()
{
  sub_1AD8E8748(0, &qword_1E9A4B6B0, MEMORY[0x1E4F3ECC8]);
  sub_1AD9DF050();
  uint64_t v0 = *(void *)(v9 + 16);
  if (!v0)
  {
    double v2 = 0.0;
    goto LABEL_10;
  }
  if (v0 == 1)
  {
    uint64_t v1 = 0;
    double v2 = 0.0;
LABEL_8:
    uint64_t v5 = v0 - v1;
    char v6 = (double *)(v9 + 8 * v1 + 32);
    do
    {
      double v7 = *v6++;
      double v2 = v2 + v7;
      --v5;
    }
    while (v5);
    goto LABEL_10;
  }
  uint64_t v1 = v0 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v3 = (double *)(v9 + 40);
  double v2 = 0.0;
  uint64_t v4 = v0 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v2 = v2 + *(v3 - 1) + *v3;
    v3 += 2;
    v4 -= 2;
  }
  while (v4);
  if (v0 != v1) {
    goto LABEL_8;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1AD8E75A4@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8E6668(a1);
}

unint64_t sub_1AD8E75E8(unint64_t result, unint64_t a2, uint64_t a3, id a4, id a5)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*(void *)(a3 + 16) <= a2)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)(a3 + 8 * a2 + 32);
  if (*(void *)(v5 + 16) <= result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  double v6 = *(double *)(v5 + 8 * result + 32);
  if (a2) {
    id v7 = objc_msgSend(a5, sel_stringFromTimeInterval_, v6);
  }
  else {
    id v7 = objc_msgSend(a4, sel_stringFromTimeInterval_, v6);
  }
  id v8 = v7;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = sub_1AD9DF710();

  return v9;
}

uint64_t sub_1AD8E76B0()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_1AD8E76B8(unint64_t a1, unint64_t a2)
{
  return sub_1AD8E75E8(a1, a2, *(void *)v2, *(id *)(v2 + 8), *(id *)(v2 + 16));
}

uint64_t sub_1AD8E76C8(uint64_t *a1, uint64_t *a2)
{
  return sub_1AD8C0A74(*a1, *a2);
}

void sub_1AD8E76D4(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD9DF040();
  type metadata accessor for SleepScheduleModel();
  sub_1AD8E83D4(&qword_1E9A4AAB8, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
  uint64_t v4 = a1;
  uint64_t v5 = sub_1AD9DDF30();
  uint64_t v7 = v6;
  uint64_t v8 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  uint64_t v9 = *(void **)&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule];
  double v10 = 0.0;
  double v11 = 0.0;
  if (v9) {
    objc_msgSend(v9, sel_windDownTime, 0.0);
  }
  sub_1AD8E658C(v11);
  sub_1AD8E8A74(0, &qword_1E9A4B610, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB320]);
  sub_1AD9DF040();
  uint64_t v12 = *(void **)&v4[v8];
  if (v12)
  {
    objc_msgSend(v12, sel_windDownTime);
    double v10 = v13;
  }
  double v14 = *MEMORY[0x1E4FA54A0] * 60.0;
  sub_1AD9AA58C(0.0, v14 + 1.0, 3600.0);
  uint64_t v16 = v15;
  if (v10 >= v14)
  {
    uint64_t v18 = *((void *)&v28 + 1);
    char v19 = v28;
    char v21 = &unk_1F046A370;
    goto LABEL_9;
  }
  double v17 = *MEMORY[0x1E4FA54B8] * 60.0;
  if (v17 != 0.0)
  {
    uint64_t v18 = *((void *)&v28 + 1);
    char v19 = v28;
    sub_1AD9AA58C(0.0, 3600.0, v17);
    char v21 = v20;
LABEL_9:
    sub_1AD8E8748(0, &qword_1E9A4B618, MEMORY[0x1E4FBBE00]);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1AD9E3080;
    *(void *)(v22 + 32) = v16;
    *(void *)(v22 + 40) = v21;
    objc_super v23 = (objc_class *)type metadata accessor for ShortHourDateComponentsFormatter();
    long long v24 = (char *)objc_allocWithZone(v23);
    *(void *)&v24[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = 4;
    v32.receiver = v24;
    v32.super_class = v23;
    id v25 = objc_msgSendSuper2(&v32, sel_init);
    objc_msgSend(v25, sel_setUnitsStyle_, 2);
    objc_msgSend(v25, sel_setAllowedUnits_, 32);

    double v26 = (objc_class *)type metadata accessor for ShortMinuteDateComponentsFormatter();
    double v27 = (char *)objc_allocWithZone(v26);
    *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options] = 4;
    v31.receiver = v27;
    v31.super_class = v26;
    objc_msgSendSuper2(&v31, sel_init);
    sub_1AD9DF040();
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 16) = v19;
    *(void *)(a2 + 24) = v18;
    *(_OWORD *)(a2 + 32) = v28;
    *(_OWORD *)(a2 + 48) = v28;
    *(void *)(a2 + 64) = v29;
    *(void *)(a2 + 72) = v30;
    return;
  }
  __break(1u);
}

void destroy for WindDownPickerModel(uint64_t a1)
{
  swift_bridgeObjectRelease();

  uint64_t v2 = *(void **)(a1 + 16);
}

void *_s13SleepHealthUI19WindDownPickerModelVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void *assignWithCopy for WindDownPickerModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  uint64_t v7 = (void *)a2[2];
  uint64_t v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for WindDownPickerModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for WindDownPickerModel()
{
  return &type metadata for WindDownPickerModel;
}

uint64_t destroy for WindDownPickerRowView(id *a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for WindDownPickerRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  id v6 = *(void **)(a2 + 56);
  uint64_t v7 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  id v8 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v9 = v6;
  id v10 = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for WindDownPickerRowView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a2 + 56);
  id v8 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 64);
  double v11 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  id v12 = v10;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for WindDownPickerRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();

  id v6 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WindDownPickerRowView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WindDownPickerRowView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WindDownPickerRowView()
{
  return &type metadata for WindDownPickerRowView;
}

uint64_t sub_1AD8E7EAC()
{
  return MEMORY[0x1E4FBB400];
}

unint64_t sub_1AD8E7EB8(uint64_t a1)
{
  unint64_t result = sub_1AD8E7EE0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD8E7EE0()
{
  unint64_t result = qword_1E9A4B620;
  if (!qword_1E9A4B620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B620);
  }
  return result;
}

uint64_t sub_1AD8E7F34()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD8E7F50(uint64_t a1)
{
}

void sub_1AD8E7F84()
{
  if (!qword_1E9A4B638)
  {
    sub_1AD8E8024();
    sub_1AD8E827C(255, &qword_1E9A4B698, (uint64_t (*)(uint64_t))sub_1AD8E85FC, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4B638);
    }
  }
}

void sub_1AD8E8024()
{
  if (!qword_1E9A4B640)
  {
    sub_1AD8E80EC();
    sub_1AD8E8A74(255, &qword_1E9A4B610, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB320]);
    sub_1AD8E8498();
    sub_1AD8E8570();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4B640);
    }
  }
}

void sub_1AD8E80EC()
{
  if (!qword_1E9A4B648)
  {
    sub_1AD8E8154();
    sub_1AD8E841C();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B648);
    }
  }
}

void sub_1AD8E8154()
{
  if (!qword_1E9A4B650)
  {
    sub_1AD8E81E8();
    sub_1AD8E83D4((unint64_t *)&qword_1E9A4B678, (void (*)(uint64_t))sub_1AD8E81E8);
    unint64_t v0 = sub_1AD9DF0C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B650);
    }
  }
}

void sub_1AD8E81E8()
{
  if (!qword_1E9A4B658)
  {
    sub_1AD8E827C(255, (unint64_t *)&qword_1E9A4B660, (uint64_t (*)(uint64_t))sub_1AD8E82E0, MEMORY[0x1E4F3F108]);
    sub_1AD8E834C();
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B658);
    }
  }
}

void sub_1AD8E827C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD8E82E0()
{
  if (!qword_1E9A4B668)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1E9A4B668);
    }
  }
}

unint64_t sub_1AD8E834C()
{
  unint64_t result = qword_1E9A4B670;
  if (!qword_1E9A4B670)
  {
    sub_1AD8E827C(255, (unint64_t *)&qword_1E9A4B660, (uint64_t (*)(uint64_t))sub_1AD8E82E0, MEMORY[0x1E4F3F108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B670);
  }
  return result;
}

uint64_t sub_1AD8E83D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8E841C()
{
  if (!qword_1EB725C80)
  {
    sub_1AD8E8A74(255, &qword_1EB725C88, MEMORY[0x1E4F3EB98], MEMORY[0x1E4FBB718]);
    unint64_t v0 = sub_1AD9DE6D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725C80);
    }
  }
}

unint64_t sub_1AD8E8498()
{
  unint64_t result = qword_1E9A4B680;
  if (!qword_1E9A4B680)
  {
    sub_1AD8E80EC();
    sub_1AD8E83D4(&qword_1E9A4B688, (void (*)(uint64_t))sub_1AD8E8154);
    sub_1AD8E83D4((unint64_t *)&qword_1EB725C78, (void (*)(uint64_t))sub_1AD8E841C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B680);
  }
  return result;
}

unint64_t sub_1AD8E8570()
{
  unint64_t result = qword_1E9A4B690;
  if (!qword_1E9A4B690)
  {
    sub_1AD8E8A74(255, &qword_1E9A4B610, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B690);
  }
  return result;
}

void sub_1AD8E85FC()
{
  if (!qword_1E9A4B6A0)
  {
    sub_1AD8E8658();
    unint64_t v0 = type metadata accessor for MultiPicker();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B6A0);
    }
  }
}

unint64_t sub_1AD8E8658()
{
  unint64_t result = qword_1E9A4B6A8;
  if (!qword_1E9A4B6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B6A8);
  }
  return result;
}

uint64_t sub_1AD8E86B0()
{
  return sub_1AD8E6E58();
}

double sub_1AD8E86B8@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1AD8E6F68(a1).n128_u64[0];
  return result;
}

void *sub_1AD8E86C0(void *a1)
{
  unint64_t v2 = (void *)a1[1];
  long long v3 = (void *)a1[7];
  uint64_t v4 = (void *)a1[8];
  swift_retain();
  id v5 = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v6 = v3;
  id v7 = v4;
  return a1;
}

void sub_1AD8E8748(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1AD8E8A74(255, &qword_1E9A4B610, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB320]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t objectdestroyTm_2()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

void sub_1AD8E8840(uint64_t a1, uint64_t a2)
{
  sub_1AD8E7250(a1, a2, (long long *)(v2 + 16));
}

uint64_t sub_1AD8E8848(uint64_t a1)
{
  sub_1AD8E80EC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1AD8E88A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v6 = a4;
    id v7 = a5;
  }
}

uint64_t sub_1AD8E8944(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD8E89E0(uint64_t a1, uint64_t a2)
{
  sub_1AD8E827C(0, &qword_1E9A4B628, (uint64_t (*)(uint64_t))sub_1AD8E7F50, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1AD8E8A74(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD8E8AC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD8E8AEC()
{
  return sub_1AD8E6EC4();
}

uint64_t sub_1AD8E8B08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    if (v1 == 1)
    {
      uint64_t v2 = 0;
      double v3 = 0.0;
    }
    else
    {
      uint64_t v2 = v1 & 0x7FFFFFFFFFFFFFFELL;
      uint64_t v4 = (double *)(a1 + 40);
      double v3 = 0.0;
      uint64_t v5 = v1 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        double v3 = v3 + *(v4 - 1) + *v4;
        v4 += 2;
        v5 -= 2;
      }
      while (v5);
      if (v1 == v2) {
        goto LABEL_10;
      }
    }
    uint64_t v6 = v1 - v2;
    id v7 = (double *)(a1 + 8 * v2 + 32);
    do
    {
      double v8 = *v7++;
      double v3 = v3 + v8;
      --v6;
    }
    while (v6);
  }
  else
  {
    double v3 = 0.0;
  }
LABEL_10:
  double v9 = *MEMORY[0x1E4FA54A0] * 60.0;
  if (v3 <= v9) {
    return swift_bridgeObjectRetain();
  }
  sub_1AD8E8A74(0, (unint64_t *)&qword_1EB725D48, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBBE00]);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1AD9E3080;
  *(double *)(result + 32) = v9;
  *(void *)(result + 40) = 0;
  return result;
}

unint64_t sub_1AD8E8C0C()
{
  unint64_t result = qword_1E9A4B6C0;
  if (!qword_1E9A4B6C0)
  {
    sub_1AD8E827C(255, &qword_1E9A4B628, (uint64_t (*)(uint64_t))sub_1AD8E7F50, MEMORY[0x1E4FBB718]);
    sub_1AD8E83D4(&qword_1E9A4B6C8, sub_1AD8E7F50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B6C0);
  }
  return result;
}

uint64_t sub_1AD8E8CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v2 = sub_1AD9E0440();
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1AD9E0420();
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  MEMORY[0x1F4188790](v6, v7);
  double v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1AD9E0490();
  uint64_t v10 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v11);
  double v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1AD9E04A0();
  uint64_t v14 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21, v15);
  double v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8E9098();
  sub_1AD9E0470();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1AD9E3080;
  sub_1AD9E0450();
  sub_1AD9E0460();
  sub_1AD9233CC(v18);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1AD9E0480();
  sub_1AD9E0410();
  sub_1AD9E0430();
  sub_1AD9DC6A0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v26);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v22);
  sub_1AD8E90F0();
  uint64_t v19 = v21;
  sub_1AD9E04B0();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v19);
  return v29;
}

void sub_1AD8E9098()
{
  if (!qword_1EB724EE0)
  {
    sub_1AD9E0470();
    unint64_t v0 = sub_1AD9E0290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB724EE0);
    }
  }
}

unint64_t sub_1AD8E90F0()
{
  unint64_t result = qword_1EB724EF8;
  if (!qword_1EB724EF8)
  {
    sub_1AD9E04A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB724EF8);
  }
  return result;
}

Swift::Void __swiftcall UICollectionView.registerGoalTimePickerCell()()
{
  uint64_t v0 = type metadata accessor for GoalTimePickerCollectionViewCell();
  unint64_t v1 = sub_1AD8E91B0();
  MEMORY[0x1F411EEA8](v0, v0, v1);
}

uint64_t type metadata accessor for GoalTimePickerCollectionViewCell()
{
  return self;
}

unint64_t sub_1AD8E91B0()
{
  unint64_t result = qword_1E9A4B6D0;
  if (!qword_1E9A4B6D0)
  {
    type metadata accessor for GoalTimePickerCollectionViewCell();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B6D0);
  }
  return result;
}

id sub_1AD8E9204(double a1, double a2, double a3, double a4)
{
  v18.receiver = v4;
  v18.super_class = (Class)type metadata accessor for GoalTimePickerCollectionViewCell();
  id v9 = objc_msgSendSuper2(&v18, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v10 = (char *)sub_1AD886384();

  uint64_t v11 = sub_1AD9D5428();
  double v13 = (double *)&v10[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  double v14 = *(double *)&v10[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
  *(void *)double v13 = v15;
  v13[1] = v16;
  *((void *)v13 + 2) = v11;
  *((unsigned char *)v13 + 24) = v12 & 1;
  if (v14 != v16)
  {
    objc_msgSend(v10, sel_reloadAllComponents);
    sub_1AD900888((char *)1);
  }

  return v9;
}

id sub_1AD8E92FC(void *a1)
{
  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for GoalTimePickerCollectionViewCell();
  id v3 = objc_msgSendSuper2(&v14, sel_initWithCoder_, a1);
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = (char *)sub_1AD886384();

    uint64_t v7 = sub_1AD9D5428();
    id v9 = (double *)&v6[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
    double v10 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
    *(void *)id v9 = v11;
    v9[1] = v12;
    *((void *)v9 + 2) = v7;
    *((unsigned char *)v9 + 24) = v8 & 1;
    if (v10 != v12)
    {
      objc_msgSend(v6, sel_reloadAllComponents);
      sub_1AD900888((char *)1);
    }
  }
  return v4;
}

id sub_1AD8E93E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GoalTimePickerCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD8E9430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_0);
}

void sub_1AD8E9448(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD8E94AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_0);
}

uint64_t type metadata accessor for LockScreenGreetingView(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4B6E8);
}

uint64_t sub_1AD8E94E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8E9504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v114 = a2;
  uint64_t v101 = type metadata accessor for LockScreenGreetingView(0);
  uint64_t v106 = *(void *)(v101 - 8);
  MEMORY[0x1F4188790](v101, v3);
  uint64_t v107 = v4;
  uint64_t v109 = (uint64_t)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_1AD9DDF50();
  uint64_t v103 = *(void *)(v104 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v104, v5);
  v102 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v100 = (uint64_t)&v91 - v9;
  sub_1AD8EB024();
  uint64_t v113 = v10;
  uint64_t v112 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10, v11);
  v111 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14);
  v110 = (char *)&v91 - v15;
  uint64_t v99 = sub_1AD9DE940();
  uint64_t v98 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99, v16);
  v97 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_1AD9DCD10();
  uint64_t v95 = *(void *)(v96 - 8);
  MEMORY[0x1F4188790](v96, v18);
  uint64_t v20 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_1AD9DCC70();
  uint64_t v93 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94, v21);
  uint64_t v23 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1AD9DCD30();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24, v26);
  uint64_t v28 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_1AD9DCE40();
  uint64_t v91 = *(void *)(v92 - 8);
  MEMORY[0x1F4188790](v92, v29);
  objc_super v31 = (char *)&v91 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8E9448(0, &qword_1E9A4B710, (uint64_t (*)(uint64_t))sub_1AD8EACB4, MEMORY[0x1E4FBB718]);
  uint64_t v34 = MEMORY[0x1F4188790](v32 - 8, v33);
  uint64_t v105 = (uint64_t)&v91 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34, v36);
  uint64_t v38 = (char *)&v91 - v37;
  uint64_t v108 = a1;
  uint64_t v39 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v40 = v39;
  sub_1AD9DDBC0();

  swift_release();
  swift_release();
  v115 = v38;
  if (v146 > 2u)
  {
    (*(void (**)(char *, void, uint64_t))(v25 + 104))(v28, *MEMORY[0x1E4F27B20], v24);
    sub_1AD9DCD40();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    sub_1AD9DCC60();
    sub_1AD9DCCF0();
    BOOL v42 = Calendar.dayPeriod(for:in:)((uint64_t)v23);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v20, v96);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v23, v94);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v31, v92);
    uint64_t v116 = 0;
    sub_1AD9AB9C4(&v116, v42);
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v43 = (id)qword_1EB727930;
    uint64_t v96 = sub_1AD9DCA70();
    uint64_t v95 = v44;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t KeyPath = (void *)swift_getKeyPath();
    uint64_t v46 = swift_getKeyPath();
    uint64_t v93 = v46;
    uint64_t v94 = sub_1AD9DEEC0();
    uint64_t v47 = swift_getKeyPath();
    sub_1AD9DE800();
    uint64_t v48 = v98;
    v49 = v97;
    uint64_t v50 = v99;
    (*(void (**)(char *, void, uint64_t))(v98 + 104))(v97, *MEMORY[0x1E4F3E0F8], v99);
    uint64_t v51 = sub_1AD9DE970();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
    swift_release();
    uint64_t v52 = swift_getKeyPath();
    char v53 = sub_1AD9DE7A0();
    sub_1AD9DDCC0();
    char v145 = 0;
    char v143 = 1;
    char v139 = 0;
    *(_DWORD *)((char *)&v118 + 1) = *(_DWORD *)v144;
    HIDWORD(v118) = *(_DWORD *)&v144[3];
    *(_DWORD *)v123 = *(_DWORD *)v142;
    *(_DWORD *)&v123[3] = *(_DWORD *)&v142[3];
    *(_DWORD *)v126 = *(_DWORD *)v141;
    *(_DWORD *)&v126[3] = *(_DWORD *)&v141[3];
    *(_DWORD *)v132 = *(_DWORD *)v140;
    *(_DWORD *)&v132[3] = *(_DWORD *)&v140[3];
    uint64_t v54 = v96;
    uint64_t v116 = v96;
    uint64_t v55 = v95;
    uint64_t v117 = v95;
    LOBYTE(v118) = 0;
    uint64_t v119 = MEMORY[0x1E4FBC860];
    id v120 = KeyPath;
    uint64_t v121 = 0;
    char v122 = 1;
    uint64_t v124 = v46;
    char v125 = 1;
    uint64_t v127 = v47;
    uint64_t v128 = v94;
    uint64_t v129 = v52;
    uint64_t v130 = v51;
    char v131 = v53;
    uint64_t v133 = v56;
    uint64_t v134 = v57;
    uint64_t v135 = v58;
    uint64_t v136 = v59;
    char v137 = 0;
    __int16 v138 = 256;
    sub_1AD8EAD04(0, &qword_1E9A4B720, sub_1AD8EACDC);
    sub_1AD8EDA90();
    uint64_t v38 = v115;
    sub_1AD9DED30();
    sub_1AD861548(v54, v55, 0);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1AD8EACB4(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v38, 0, 1, v60);
  }
  else
  {
    sub_1AD8EACB4(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v38, 1, 1, v41);
  }
  uint64_t v61 = v108;
  uint64_t v62 = v100;
  sub_1AD966E34(v100);
  uint64_t v63 = v103;
  v64 = v102;
  uint64_t v65 = v104;
  (*(void (**)(char *, void, uint64_t))(v103 + 104))(v102, *MEMORY[0x1E4F3CB38], v104);
  sub_1AD8F003C((unint64_t *)&qword_1EB725A20, MEMORY[0x1E4F3CB98]);
  char v66 = sub_1AD9DF6A0();
  uint64_t v67 = *(void (**)(char *, uint64_t))(v63 + 8);
  v67(v64, v65);
  v67((char *)v62, v65);
  uint64_t v68 = *(void **)(v61 + 8);
  type metadata accessor for LockScreenContentModel();
  sub_1AD8F003C(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
  id v69 = v68;
  uint64_t v70 = sub_1AD9DDF30();
  v72 = v71;
  id v73 = v69;
  uint64_t v74 = sub_1AD9DDF30();
  LOBYTE(v116) = (v66 & 1) == 0;
  uint64_t v117 = v70;
  v118 = v72;
  uint64_t v119 = v74;
  id v120 = v75;
  uint64_t v76 = v109;
  sub_1AD8EE2DC(v61, v109, type metadata accessor for LockScreenGreetingView);
  unint64_t v77 = (*(unsigned __int8 *)(v106 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
  uint64_t v78 = swift_allocObject();
  sub_1AD8EF508(v76, v78 + v77, type metadata accessor for LockScreenGreetingView);
  sub_1AD8EB0D8();
  sub_1AD8F003C(&qword_1E9A4B770, (void (*)(uint64_t))sub_1AD8EB0D8);
  v79 = v110;
  sub_1AD9DEC30();
  swift_release();
  v80 = v118;

  long long v81 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  uint64_t v82 = v105;
  sub_1AD8EFD90((uint64_t)v38, v105, &qword_1E9A4B710, (uint64_t (*)(uint64_t))sub_1AD8EACB4, MEMORY[0x1E4FBB718]);
  uint64_t v83 = v112;
  uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v112 + 16);
  v85 = v111;
  uint64_t v86 = v113;
  v84(v111, v79, v113);
  uint64_t v87 = v114;
  sub_1AD8EFD90(v82, v114, &qword_1E9A4B710, (uint64_t (*)(uint64_t))sub_1AD8EACB4, v81);
  sub_1AD8EAC14();
  v84((char *)(v87 + *(int *)(v88 + 48)), v85, v86);
  v89 = *(void (**)(char *, uint64_t))(v83 + 8);
  v89(v79, v86);
  sub_1AD8EFE00((uint64_t)v115, (uint64_t)&qword_1E9A4B710, (uint64_t)sub_1AD8EACB4, (uint64_t)v81, (uint64_t (*)(void))sub_1AD8E9448);
  v89(v85, v86);
  return sub_1AD8EFE00(v82, (uint64_t)&qword_1E9A4B710, (uint64_t)sub_1AD8EACB4, (uint64_t)v81, (uint64_t (*)(void))sub_1AD8E9448);
}

void sub_1AD8EA320(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LockScreenGreetingView(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2 - 8, v5);
  uint64_t v6 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8E9448(0, &qword_1E9A4CE80, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = sub_1AD9DCB80();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DF710();
  sub_1AD9DCB70();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1AD8EFE00((uint64_t)v10, (uint64_t)&qword_1E9A4CE80, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD8E9448);
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_1AD9DD550();
    __swift_project_value_buffer(v16, (uint64_t)qword_1E9A4D288);
    uint64_t v17 = sub_1AD9DD530();
    os_log_type_t v18 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v37 = v20;
      *(_DWORD *)uint64_t v19 = 136446210;
      uint64_t v36 = sub_1AD838978(0xD000000000000016, 0x80000001AD9E8930, &v37);
      sub_1AD9DFEA0();
      _os_log_impl(&dword_1AD834000, v17, v18, "[%{public}s] Error trying to open Weather app", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
      MEMORY[0x1B3E6D1A0](v19, -1, -1);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_1AD9DD550();
    __swift_project_value_buffer(v21, (uint64_t)qword_1E9A4D288);
    uint64_t v22 = sub_1AD9DD530();
    os_log_type_t v23 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v35 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = a1;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v33 = v3;
      uint64_t v27 = v26;
      uint64_t v37 = v26;
      *(_DWORD *)uint64_t v25 = 136446210;
      uint64_t v36 = sub_1AD838978(0xD000000000000016, 0x80000001AD9E8930, &v37);
      uint64_t v6 = v35;
      sub_1AD9DFEA0();
      _os_log_impl(&dword_1AD834000, v22, v23, "[%{public}s] Opening Weather app", v25, 0xCu);
      swift_arrayDestroy();
      uint64_t v28 = v27;
      uint64_t v3 = v33;
      MEMORY[0x1B3E6D1A0](v28, -1, -1);
      uint64_t v29 = v25;
      a1 = v34;
      MEMORY[0x1B3E6D1A0](v29, -1, -1);
    }

    sub_1AD8EE2DC(a1, (uint64_t)v6, type metadata accessor for LockScreenGreetingView);
    unint64_t v30 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v31 = swift_allocObject();
    sub_1AD8EF508((uint64_t)v6, v31 + v30, type metadata accessor for LockScreenGreetingView);
    DeepLinkOpener.open(url:completion:)((uint64_t)v15, (uint64_t)sub_1AD8EDFF8, v31);
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

void sub_1AD8EA8B8(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = a1;
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1AD9DD550();
    __swift_project_value_buffer(v5, (uint64_t)qword_1E9A4D288);
    id v6 = a1;
    id v7 = a1;
    uint64_t v8 = sub_1AD9DD530();
    os_log_type_t v9 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      aBlock[0] = v11;
      *(_DWORD *)uint64_t v10 = 136446466;
      sub_1AD838978(0xD000000000000016, 0x80000001AD9E8930, aBlock);
      sub_1AD9DFEA0();
      *(_WORD *)(v10 + 12) = 2082;
      id v12 = a1;
      sub_1AD869CF0();
      uint64_t v13 = sub_1AD9DF730();
      sub_1AD838978(v13, v14, aBlock);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v8, v9, "[%{public}s] Error trying to open Weather app: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v11, -1, -1);
      MEMORY[0x1B3E6D1A0](v10, -1, -1);
    }
    else
    {
    }
  }
  uint64_t v15 = *(char **)(a2 + 8);
  uint64_t v16 = *(void **)&v15[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore];
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  aBlock[4] = (uint64_t)sub_1AD8EE0A0;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1AD8A776C;
  aBlock[3] = (uint64_t)&block_descriptor_14;
  os_log_type_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v15;
  swift_release();
  objc_msgSend(v16, sel_dismissGoodMorningWithCompletion_, v18);
  _Block_release(v18);
}

uint64_t sub_1AD8EABAC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_1AD9DE330();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  sub_1AD8EE3CC(0, &qword_1E9A4B6F8, &qword_1E9A4B700, (uint64_t (*)(uint64_t))sub_1AD8EAC14);
  return sub_1AD8E9504(v1, a1 + *(int *)(v3 + 44));
}

void sub_1AD8EAC14()
{
  if (!qword_1E9A4B708)
  {
    sub_1AD8E9448(255, &qword_1E9A4B710, (uint64_t (*)(uint64_t))sub_1AD8EACB4, MEMORY[0x1E4FBB718]);
    sub_1AD8EB024();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4B708);
    }
  }
}

void sub_1AD8EACB4(uint64_t a1)
{
}

void sub_1AD8EACDC(uint64_t a1)
{
}

void sub_1AD8EAD04(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD8EAD68()
{
  if (!qword_1E9A4B730)
  {
    sub_1AD8EADE8();
    sub_1AD8EAF6C(255, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B730);
    }
  }
}

void sub_1AD8EADE8()
{
  if (!qword_1E9A4B738)
  {
    sub_1AD8EAE68();
    sub_1AD8EAF6C(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B738);
    }
  }
}

void sub_1AD8EAE68()
{
  if (!qword_1E9A4B740)
  {
    sub_1AD8EAEF4();
    sub_1AD8EAFD8(255, &qword_1EB725368, MEMORY[0x1E4F3C870], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B740);
    }
  }
}

void sub_1AD8EAEF4()
{
  if (!qword_1E9A4B748)
  {
    sub_1AD8EAF6C(255, (unint64_t *)&qword_1E9A4A120, &qword_1E9A4A128, MEMORY[0x1E4FBB550]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B748);
    }
  }
}

void sub_1AD8EAF6C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_1AD8EAFD8(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = sub_1AD9DE6D0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD8EAFD8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD8EB024()
{
  if (!qword_1E9A4B750)
  {
    sub_1AD8EB0D8();
    sub_1AD8F003C(&qword_1E9A4B770, (void (*)(uint64_t))sub_1AD8EB0D8);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4B750);
    }
  }
}

void sub_1AD8EB0D8()
{
  if (!qword_1E9A4B758)
  {
    sub_1AD8EB154();
    sub_1AD8EB1A8();
    unint64_t v0 = type metadata accessor for OptionalContentGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B758);
    }
  }
}

unint64_t sub_1AD8EB154()
{
  unint64_t result = qword_1E9A4B760;
  if (!qword_1E9A4B760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B760);
  }
  return result;
}

unint64_t sub_1AD8EB1A8()
{
  unint64_t result = qword_1E9A4B768;
  if (!qword_1E9A4B768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B768);
  }
  return result;
}

uint64_t sub_1AD8EB204@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WeatherIconView(0);
  uint64_t v6 = MEMORY[0x1F4188790](v4, v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (uint64_t *)((char *)&v26 - v10);
  sub_1AD8E9448(0, &qword_1E9A4A910, type metadata accessor for CurrentWeatherModel, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v15 = (char *)&v26 - v14;
  swift_getKeyPath();
  swift_getKeyPath();
  id v16 = a1;
  sub_1AD9DDBC0();

  swift_release();
  swift_release();
  uint64_t v17 = type metadata accessor for CurrentWeatherModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v15, 1, v17) == 1)
  {
    sub_1AD8EFE00((uint64_t)v15, (uint64_t)&qword_1E9A4A910, (uint64_t)type metadata accessor for CurrentWeatherModel, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD8E9448);
    uint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
  }
  else
  {
    sub_1AD9DF5D0();
    swift_allocObject();
    sub_1AD9DF5C0();
    uint64_t v18 = sub_1AD9DF5B0();
    unint64_t v21 = v20;
    swift_release();
    if (v21)
    {
      unint64_t v19 = v21;
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
    }
    sub_1AD8EE344((uint64_t)v15, type metadata accessor for CurrentWeatherModel);
  }
  *(uint64_t *)((char *)v11 + *(int *)(v4 + 20)) = swift_getKeyPath();
  sub_1AD8E9448(0, (unint64_t *)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648]);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for LockScreenContentModel();
  sub_1AD8F003C(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
  id v22 = v16;
  *uint64_t v11 = sub_1AD9DDF30();
  v11[1] = v23;
  sub_1AD8EE2DC((uint64_t)v11, (uint64_t)v8, type metadata accessor for WeatherIconView);
  *a2 = v18;
  a2[1] = v19;
  sub_1AD8EE448();
  sub_1AD8EE2DC((uint64_t)v8, (uint64_t)a2 + *(int *)(v24 + 48), type metadata accessor for WeatherIconView);
  swift_bridgeObjectRetain();
  sub_1AD8EE344((uint64_t)v11, type metadata accessor for WeatherIconView);
  sub_1AD8EE344((uint64_t)v8, type metadata accessor for WeatherIconView);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD8EB5CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8EBC24(sub_1AD8EE3A4, (uint64_t (*)(uint64_t, uint64_t))sub_1AD8EB204, a1);
}

uint64_t sub_1AD8EB5F8@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = sub_1AD9DCEB0();
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1AD9DCC70();
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD8E9448(0, &qword_1E9A4A910, type metadata accessor for CurrentWeatherModel, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v15 = (char *)&v46 - v14;
  sub_1AD8E9448(0, &qword_1E9A4B500, MEMORY[0x1E4F45E40], v11);
  MEMORY[0x1F4188790](v16 - 8, v17);
  unint64_t v19 = (char *)&v46 - v18;
  uint64_t v20 = type metadata accessor for WeatherIconView(0);
  uint64_t v21 = v20 - 8;
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v25 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23, v26);
  uint64_t v28 = (uint64_t *)((char *)&v46 - v27);
  *(uint64_t *)((char *)v28 + *(int *)(v21 + 28)) = swift_getKeyPath();
  sub_1AD8E9448(0, (unint64_t *)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648]);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for LockScreenContentModel();
  sub_1AD8F003C(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
  id v29 = a1;
  uint64_t *v28 = sub_1AD9DDF30();
  v28[1] = v30;
  swift_getKeyPath();
  swift_getKeyPath();
  id v31 = v29;
  sub_1AD9DDBC0();

  swift_release();
  swift_release();
  uint64_t v32 = type metadata accessor for CurrentWeatherModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v15, 1, v32) == 1)
  {
    uint64_t v33 = &qword_1E9A4A910;
    uint64_t v34 = type metadata accessor for CurrentWeatherModel;
    uint64_t v35 = MEMORY[0x1E4FBB718];
    uint64_t v36 = (uint64_t)v15;
  }
  else
  {
    sub_1AD9DCFA0();
    sub_1AD9DCEA0();
    sub_1AD9DD0A0();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v6, v50);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v10, v48);
    sub_1AD8EE344((uint64_t)v15, type metadata accessor for CurrentWeatherModel);
    uint64_t v37 = sub_1AD9DCF40();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v19, 1, v37) != 1)
    {
      uint64_t v39 = DayWeather.shortNaturalLanguageDescription.getter();
      unint64_t v40 = v41;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v37);
      goto LABEL_7;
    }
    uint64_t v33 = &qword_1E9A4B500;
    uint64_t v34 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F45E40];
    uint64_t v35 = MEMORY[0x1E4FBB718];
    uint64_t v36 = (uint64_t)v19;
  }
  sub_1AD8EFE00(v36, (uint64_t)v33, (uint64_t)v34, v35, (uint64_t (*)(void))sub_1AD8E9448);
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
LABEL_7:
  sub_1AD8EE2DC((uint64_t)v28, (uint64_t)v25, type metadata accessor for WeatherIconView);
  uint64_t v42 = v51;
  sub_1AD8EE2DC((uint64_t)v25, v51, type metadata accessor for WeatherIconView);
  sub_1AD8EE244();
  uint64_t v44 = (uint64_t *)(v42 + *(int *)(v43 + 48));
  *uint64_t v44 = v39;
  v44[1] = v40;
  swift_bridgeObjectRetain();
  sub_1AD8EE344((uint64_t)v28, type metadata accessor for WeatherIconView);
  swift_bridgeObjectRelease();
  return sub_1AD8EE344((uint64_t)v25, type metadata accessor for WeatherIconView);
}

uint64_t sub_1AD8EBBF8@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8EBC24(sub_1AD8EE21C, (uint64_t (*)(uint64_t, uint64_t))sub_1AD8EB5F8, a1);
}

uint64_t sub_1AD8EBC24@<X0>(void (*a1)(void)@<X2>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  *(void *)a3 = sub_1AD9DE330();
  *(void *)(a3 + 8) = 0x4020000000000000;
  *(unsigned char *)(a3 + 16) = 0;
  a1(0);
  return a2(v8, v7);
}

uint64_t sub_1AD8EBC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v45 = a3;
  uint64_t v4 = sub_1AD9DE940();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8EF570(0);
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v12;
  sub_1AD8EF790();
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8EF810();
  uint64_t v41 = v18 - 8;
  MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8EF890();
  uint64_t v43 = v22 - 8;
  MEMORY[0x1F4188790](v22 - 8, v23);
  uint64_t v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_1AD8EF890;
  sub_1AD8EAD04(0, &qword_1E9A4B8D0, (void (*)(uint64_t))sub_1AD8EF890);
  uint64_t v42 = v26;
  MEMORY[0x1F4188790](v26, v27);
  id v29 = (char *)&v39 - v28;
  swift_bridgeObjectRetain();
  sub_1AD8EC144(v40, a2, 0, MEMORY[0x1E4FBC860], (uint64_t)v12);
  swift_bridgeObjectRelease();
  sub_1AD9DE860();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4F3E0F8], v4);
  uint64_t v30 = sub_1AD9DE970();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = (uint64_t)v39;
  sub_1AD8EE2DC((uint64_t)v39, (uint64_t)v17, (uint64_t (*)(void))sub_1AD8EF570);
  uint64_t v33 = (uint64_t *)&v17[*(int *)(v14 + 44)];
  *uint64_t v33 = KeyPath;
  v33[1] = v30;
  sub_1AD8EE344(v32, (uint64_t (*)(void))sub_1AD8EF570);
  uint64_t v34 = swift_getKeyPath();
  sub_1AD8EE2DC((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(void))sub_1AD8EF790);
  uint64_t v35 = &v21[*(int *)(v41 + 44)];
  *(void *)uint64_t v35 = v34;
  *((void *)v35 + 1) = 0;
  v35[16] = 1;
  sub_1AD8EE344((uint64_t)v17, (uint64_t (*)(void))sub_1AD8EF790);
  uint64_t v36 = swift_getKeyPath();
  sub_1AD8EE2DC((uint64_t)v21, (uint64_t)v25, (uint64_t (*)(void))sub_1AD8EF810);
  uint64_t v37 = &v25[*(int *)(v43 + 44)];
  *(void *)uint64_t v37 = v36;
  v37[8] = 1;
  sub_1AD8EE344((uint64_t)v21, (uint64_t (*)(void))sub_1AD8EF810);
  sub_1AD8EE2DC((uint64_t)v25, (uint64_t)v29, (uint64_t (*)(void))sub_1AD8EF890);
  *(_WORD *)&v29[*(int *)(v42 + 36)] = 256;
  sub_1AD8EE344((uint64_t)v25, (uint64_t (*)(void))sub_1AD8EF890);
  sub_1AD8EF91C();
  sub_1AD9DED30();
  return sub_1AD8EFE00((uint64_t)v29, (uint64_t)&qword_1E9A4B8D0, (uint64_t)v44, MEMORY[0x1E4F3CE30], (uint64_t (*)(void))sub_1AD8EAD04);
}

uint64_t sub_1AD8EC144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v50 = a5;
  uint64_t v9 = sub_1AD9DDD20();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v49 = v9;
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v46 = sub_1AD8EF75C;
  uint64_t v47 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3DF18];
  sub_1AD8E9448(0, &qword_1E9A4B8A0, (uint64_t (*)(uint64_t))sub_1AD8EF75C, MEMORY[0x1E4F3DF18]);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v44 - v15);
  sub_1AD8EF75C(0);
  MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8EF5AC(0);
  uint64_t v22 = v21 - 8;
  MEMORY[0x1F4188790](v21, v23);
  uint64_t v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v45 = sub_1AD9DE500();
  uint64_t KeyPath = swift_getKeyPath();
  a3 &= 1u;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  sub_1AD861558(v27, a2, a3);
  swift_bridgeObjectRetain();
  sub_1AD9DF2F0();
  uint64_t v29 = sub_1AD9DF300();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v20, 0, 1, v29);
  sub_1AD8EE2DC((uint64_t)v20, (uint64_t)v16 + *(int *)(v13 + 36), (uint64_t (*)(void))sub_1AD8EF75C);
  *uint64_t v16 = KeyPath;
  uint64_t v30 = (uint64_t)&v25[*(int *)(v22 + 44)];
  id v31 = (uint64_t (*)(uint64_t))v46;
  uint64_t v32 = v51;
  sub_1AD8EFD90((uint64_t)v16, v30, &qword_1E9A4B8A0, (uint64_t (*)(uint64_t))v46, v51);
  uint64_t v33 = v44;
  *(void *)uint64_t v25 = v44;
  *((void *)v25 + 1) = v28;
  v25[16] = a3;
  *((void *)v25 + 3) = a4;
  *((_DWORD *)v25 + 8) = v45;
  uint64_t v34 = v33;
  sub_1AD861558(v33, v28, a3);
  swift_bridgeObjectRetain();
  sub_1AD8EFE00((uint64_t)v16, (uint64_t)&qword_1E9A4B8A0, (uint64_t)v31, (uint64_t)v32, (uint64_t (*)(void))sub_1AD8E9448);
  sub_1AD8EE344((uint64_t)v20, (uint64_t (*)(void))sub_1AD8EF75C);
  sub_1AD861548(v34, v28, a3);
  swift_bridgeObjectRelease();
  uint64_t v35 = swift_getKeyPath();
  uint64_t v37 = v47;
  uint64_t v36 = v48;
  uint64_t v38 = v49;
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v47, *MEMORY[0x1E4F3C5B8], v49);
  sub_1AD8EF570(0);
  uint64_t v40 = v50;
  uint64_t v41 = (uint64_t *)(v50 + *(int *)(v39 + 36));
  sub_1AD8E9448(0, &qword_1E9A4B8B0, MEMORY[0x1E4F3C5D0], v51);
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))((char *)v41 + *(int *)(v42 + 28), v37, v38);
  uint64_t *v41 = v35;
  sub_1AD8EE2DC((uint64_t)v25, v40, (uint64_t (*)(void))sub_1AD8EF5AC);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
  return sub_1AD8EE344((uint64_t)v25, (uint64_t (*)(void))sub_1AD8EF5AC);
}

uint64_t sub_1AD8EC578@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8EBC94(*v1, v1[1], a1);
}

uint64_t sub_1AD8EC580@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v25 = a1;
  sub_1AD8E9448(0, &qword_1E9A4A910, type metadata accessor for CurrentWeatherModel, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v24 - v4;
  uint64_t v6 = sub_1AD9DCFC0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v24 = v1;
  uint64_t v15 = *(void **)(v1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v16 = v15;
  sub_1AD9DDBC0();

  swift_release();
  swift_release();
  uint64_t v17 = type metadata accessor for CurrentWeatherModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v5, 1, v17) == 1)
  {
    sub_1AD8EFE00((uint64_t)v5, (uint64_t)&qword_1E9A4A910, (uint64_t)type metadata accessor for CurrentWeatherModel, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD8E9448);
    sub_1AD8EF078();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v25, 1, 1, v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v5, v6);
    sub_1AD8EE344((uint64_t)v5, type metadata accessor for CurrentWeatherModel);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v11, v6);
    uint64_t v20 = sub_1AD9DE2B0();
    uint64_t v21 = v25;
    uint64_t *v25 = v20;
    v21[1] = 0x4008000000000000;
    *((unsigned char *)v21 + 16) = 0;
    sub_1AD8EF354();
    sub_1AD8EC8EC((uint64_t)v14, v24, (uint64_t)v21 + *(int *)(v22 + 44));
    sub_1AD8EF078();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v21, 0, 1, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
}

uint64_t sub_1AD8EC8EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v129 = a2;
  uint64_t v146 = a3;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  uint64_t v120 = MEMORY[0x1E4FBB718];
  sub_1AD8E9448(0, (unint64_t *)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  char v143 = (char *)&v118 - v7;
  uint64_t v140 = sub_1AD9DF4E0();
  uint64_t v139 = *(void *)(v140 - 8);
  MEMORY[0x1F4188790](v140, v8);
  char v137 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_1AD9DFC80();
  uint64_t v136 = *(void *)(v138 - 8);
  MEMORY[0x1F4188790](v138, v10);
  uint64_t v134 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8E9448(0, &qword_1E9A4A960, (uint64_t (*)(uint64_t))sub_1AD8DF454, MEMORY[0x1E4F26DB0]);
  uint64_t v133 = v12;
  uint64_t v132 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v13);
  char v131 = (char *)&v118 - v14;
  sub_1AD8EF290();
  uint64_t v17 = MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v145 = (uint64_t)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v17, v19);
  v142 = (char *)&v118 - v21;
  MEMORY[0x1F4188790](v20, v22);
  uint64_t v144 = (uint64_t)&v118 - v23;
  uint64_t v148 = sub_1AD9DDF50();
  uint64_t v147 = *(void *)(v148 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v148, v24);
  uint64_t v130 = (uint64_t)&v118 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v25, v27);
  uint64_t v125 = (uint64_t)&v118 - v29;
  MEMORY[0x1F4188790](v28, v30);
  char v122 = (char *)&v118 - v31;
  uint64_t v121 = (void *)sub_1AD9DEF50();
  uint64_t v32 = *(v121 - 1);
  MEMORY[0x1F4188790](v121, v33);
  uint64_t v35 = (char *)&v118 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = MEMORY[0x1E4F3EC28];
  sub_1AD8E9448(0, &qword_1E9A4A958, MEMORY[0x1E4F3EC28], v4);
  MEMORY[0x1F4188790](v36 - 8, v37);
  uint64_t v39 = (char *)&v118 - v38;
  uint64_t v40 = sub_1AD9DD050();
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40, v42);
  uint64_t v44 = (char *)&v118 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_1AD9DF4D0();
  uint64_t v46 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45, v47);
  uint64_t v49 = (char *)&v118 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8EF19C();
  uint64_t v128 = v50;
  uint64_t v52 = MEMORY[0x1F4188790](v50, v51);
  uint64_t v141 = (uint64_t)&v118 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = MEMORY[0x1F4188790](v52, v54);
  uint64_t v127 = (char *)&v118 - v56;
  uint64_t v58 = MEMORY[0x1F4188790](v55, v57);
  v126 = (char *)&v118 - v59;
  MEMORY[0x1F4188790](v58, v60);
  uint64_t v149 = (uint64_t)&v118 - v61;
  sub_1AD9DCFB0();
  uint64_t v135 = a1;
  sub_1AD9DCF70();
  sub_1AD9DD030();
  uint64_t v62 = *(void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v124 = v40;
  uint64_t v123 = v41 + 8;
  uint64_t v119 = v62;
  v62(v44, v40);
  sub_1AD9DF4C0();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
  sub_1AD9DEF40();
  uint64_t v63 = *MEMORY[0x1E4F3EC08];
  uint64_t v64 = sub_1AD9DEF80();
  uint64_t v65 = *(void *)(v64 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 104))(v39, v63, v64);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v39, 0, 1, v64);
  sub_1AD9DEF60();
  swift_release();
  sub_1AD8EFE00((uint64_t)v39, (uint64_t)&qword_1E9A4A958, v118, v120, (uint64_t (*)(void))sub_1AD8E9448);
  char v66 = v121;
  (*(void (**)(char *, void, void *))(v32 + 104))(v35, *MEMORY[0x1E4F3EBF8], v121);
  uint64_t v67 = sub_1AD9DEFA0();
  swift_release();
  uint64_t v68 = v35;
  uint64_t v69 = (uint64_t)v122;
  (*(void (**)(char *, void *))(v32 + 8))(v68, v66);
  uint64_t v70 = v148;
  uint64_t v71 = v129 + *(int *)(type metadata accessor for WeatherIconView(0) + 20);
  sub_1AD966E34(v69);
  v72 = (char *)(v147 + 88);
  id v73 = *(uint64_t (**)(uint64_t, uint64_t))(v147 + 88);
  int v74 = v73(v69, v70);
  int v75 = *MEMORY[0x1E4F3CB40];
  uint64_t v76 = (_DWORD *)MEMORY[0x1E4F3CB48];
  if (v74 != *MEMORY[0x1E4F3CB40] && v74 != *MEMORY[0x1E4F3CB48]) {
    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v69, v70);
  }
  uint64_t v77 = v125;
  uint64_t v129 = v71;
  sub_1AD966E34(v125);
  char v122 = v72;
  uint64_t v121 = v73;
  int v78 = v73(v77, v70);
  LODWORD(v120) = v75;
  if (v78 != v75 && v78 != *v76) {
    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v77, v70);
  }
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  uint64_t v152 = v67;
  uint64_t v153 = 0;
  __int16 v154 = 1;
  uint64_t v155 = v160;
  char v156 = v161;
  uint64_t v157 = v162;
  char v158 = v163;
  long long v159 = v164;
  sub_1AD9DCFB0();
  uint64_t v79 = sub_1AD9DD040();
  uint64_t v81 = v80;
  v119(v44, v124);
  uint64_t v150 = v79;
  uint64_t v151 = v81;
  sub_1AD8EF204();
  sub_1AD8EF3EC((unint64_t *)&qword_1E9A4B870, (void (*)(uint64_t))sub_1AD8EF204, (void (*)(void))sub_1AD8EF46C);
  sub_1AD85F688();
  uint64_t v82 = (uint64_t)v127;
  sub_1AD9DECD0();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v83 = (uint64_t)v126;
  sub_1AD9DDFB0();
  sub_1AD8EE344(v82, (uint64_t (*)(void))sub_1AD8EF19C);
  sub_1AD8EF508(v83, v149, (uint64_t (*)(void))sub_1AD8EF19C);
  uint64_t v84 = v131;
  sub_1AD9DCF80();
  v85 = v134;
  sub_1AD9DF4B0();
  uint64_t v86 = v139;
  uint64_t v87 = v137;
  uint64_t v88 = v140;
  (*(void (**)(char *, void, uint64_t))(v139 + 104))(v137, *MEMORY[0x1E4FB6018], v140);
  sub_1AD9DD0D0();
  sub_1AD9DD0C0();
  sub_1AD8F003C(&qword_1E9A4A970, MEMORY[0x1E4FB6040]);
  uint64_t v89 = v133;
  uint64_t v90 = v138;
  uint64_t v135 = sub_1AD9DC6C0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v85, v90);
  uint64_t v91 = v89;
  uint64_t v92 = v148;
  (*(void (**)(char *, uint64_t))(v132 + 8))(v84, v91);
  uint64_t v93 = v130;
  sub_1AD966E34(v130);
  int v94 = ((uint64_t (*)(uint64_t, uint64_t))v121)(v93, v92);
  if (v94 != v120 && v94 != *MEMORY[0x1E4F3CB48]) {
    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v93, v92);
  }
  sub_1AD9DE8A0();
  uint64_t v95 = sub_1AD9DE890();
  uint64_t v96 = (uint64_t)v143;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v143, 1, 1, v95);
  sub_1AD9DE8D0();
  sub_1AD8EFE00(v96, (uint64_t)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD8E9448);
  uint64_t v97 = sub_1AD9DEAB0();
  uint64_t v99 = v98;
  char v101 = v100;
  swift_bridgeObjectRelease();
  swift_release();
  char v102 = v101 & 1;
  sub_1AD9DEEC0();
  uint64_t v103 = sub_1AD9DEA70();
  uint64_t v105 = v104;
  char v107 = v106;
  uint64_t v109 = v108;
  swift_release();
  v107 &= 1u;
  sub_1AD861548(v97, v99, v102);
  swift_bridgeObjectRelease();
  uint64_t v152 = v103;
  uint64_t v153 = v105;
  LOBYTE(v154) = v107;
  uint64_t v155 = v109;
  uint64_t v110 = (uint64_t)v142;
  sub_1AD9DED30();
  sub_1AD861548(v103, v105, v107);
  swift_bridgeObjectRelease();
  uint64_t v111 = v144;
  sub_1AD8EF508(v110, v144, (uint64_t (*)(void))sub_1AD8EF290);
  uint64_t v112 = v149;
  uint64_t v113 = v141;
  sub_1AD8EE2DC(v149, v141, (uint64_t (*)(void))sub_1AD8EF19C);
  uint64_t v114 = v145;
  sub_1AD8EE2DC(v111, v145, (uint64_t (*)(void))sub_1AD8EF290);
  uint64_t v115 = v146;
  sub_1AD8EE2DC(v113, v146, (uint64_t (*)(void))sub_1AD8EF19C);
  sub_1AD8EF12C();
  sub_1AD8EE2DC(v114, v115 + *(int *)(v116 + 48), (uint64_t (*)(void))sub_1AD8EF290);
  sub_1AD8EE344(v111, (uint64_t (*)(void))sub_1AD8EF290);
  sub_1AD8EE344(v112, (uint64_t (*)(void))sub_1AD8EF19C);
  sub_1AD8EE344(v114, (uint64_t (*)(void))sub_1AD8EF290);
  return sub_1AD8EE344(v113, (uint64_t (*)(void))sub_1AD8EF19C);
}

uint64_t sub_1AD8ED914(uint64_t a1)
{
  sub_1AD8EF75C(0);
  MEMORY[0x1F4188790](v2 - 8, v3);
  sub_1AD8EE2DC(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_1AD8EF75C);
  return sub_1AD9DE150();
}

uint64_t sub_1AD8ED9B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1AD9DE230();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1AD8ED9E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1AD9DE230();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1AD8EDA18()
{
  return sub_1AD9DE240();
}

uint64_t sub_1AD8EDA48()
{
  return sub_1AD9DE240();
}

unint64_t sub_1AD8EDA90()
{
  unint64_t result = qword_1E9A4B778;
  if (!qword_1E9A4B778)
  {
    sub_1AD8EAD04(255, &qword_1E9A4B720, sub_1AD8EACDC);
    sub_1AD8EF3EC(&qword_1E9A4B780, sub_1AD8EACDC, (void (*)(void))sub_1AD8EDB64);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B778);
  }
  return result;
}

unint64_t sub_1AD8EDB64()
{
  unint64_t result = qword_1E9A4B788;
  if (!qword_1E9A4B788)
  {
    sub_1AD8EAD68();
    sub_1AD8EDBFC();
    sub_1AD8EDDFC((unint64_t *)&qword_1E9A49D48, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B788);
  }
  return result;
}

unint64_t sub_1AD8EDBFC()
{
  unint64_t result = qword_1E9A4B790;
  if (!qword_1E9A4B790)
  {
    sub_1AD8EADE8();
    sub_1AD8EDCD8(&qword_1E9A4B798, (void (*)(uint64_t))sub_1AD8EAE68, (void (*)(void))sub_1AD8EDD64, (void (*)(void))sub_1AD884718);
    sub_1AD8EDDFC((unint64_t *)&qword_1EB725C78, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B790);
  }
  return result;
}

uint64_t sub_1AD8EDCD8(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD8EDD64()
{
  unint64_t result = qword_1E9A4B7A0;
  if (!qword_1E9A4B7A0)
  {
    sub_1AD8EAEF4();
    sub_1AD8EDDFC((unint64_t *)&qword_1E9A4A180, (unint64_t *)&qword_1E9A4A120, &qword_1E9A4A128, MEMORY[0x1E4FBB550]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B7A0);
  }
  return result;
}

uint64_t sub_1AD8EDDFC(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8EAF6C(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8EDE50()
{
  uint64_t v1 = *(void *)(type metadata accessor for LockScreenGreetingView(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  sub_1AD8EA320(v2);
}

uint64_t objectdestroyTm_3()
{
  uint64_t v1 = (int *)(type metadata accessor for LockScreenGreetingView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);

  unint64_t v3 = v0 + v2 + v1[7];
  sub_1AD8E9448(0, (unint64_t *)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1AD9DDF50();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_1AD8EDFF8(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LockScreenGreetingView(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  sub_1AD8EA8B8(a1, v4);
}

uint64_t sub_1AD8EE068()
{
  return swift_deallocObject();
}

void sub_1AD8EE0A0(char a1, void *a2)
{
  sub_1AD8AAF94(a1, a2, *(void **)(v2 + 16));
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for WeatherDetailView()
{
  return &type metadata for WeatherDetailView;
}

ValueMetadata *type metadata accessor for ShortWeatherDetailView()
{
  return &type metadata for ShortWeatherDetailView;
}

uint64_t sub_1AD8EE0E8()
{
  return sub_1AD8F003C(&qword_1E9A4B7A8, (void (*)(uint64_t))sub_1AD8EE130);
}

void sub_1AD8EE130()
{
  if (!qword_1E9A4B7B0)
  {
    sub_1AD8E9448(255, &qword_1E9A4B700, (uint64_t (*)(uint64_t))sub_1AD8EAC14, MEMORY[0x1E4F3F108]);
    sub_1AD8EF2F0(&qword_1E9A4B7B8, &qword_1E9A4B700, (uint64_t (*)(uint64_t))sub_1AD8EAC14);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B7B0);
    }
  }
}

uint64_t sub_1AD8EE1E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8EE200()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD8EE21C(uint64_t a1)
{
}

void sub_1AD8EE244()
{
  if (!qword_1E9A4B7D0)
  {
    type metadata accessor for WeatherIconView(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4B7D0);
    }
  }
}

uint64_t type metadata accessor for WeatherIconView(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4B7F0);
}

uint64_t sub_1AD8EE2DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD8EE344(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1AD8EE3A4(uint64_t a1)
{
}

void sub_1AD8EE3CC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_1AD8E9448(255, a3, a4, MEMORY[0x1E4F3F108]);
    unint64_t v5 = sub_1AD9DDEA0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD8EE448()
{
  if (!qword_1E9A4B7E8)
  {
    type metadata accessor for WeatherIconView(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4B7E8);
    }
  }
}

uint64_t *sub_1AD8EE4B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    unint64_t v5 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = (uint64_t)v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    sub_1AD8E9448(0, (unint64_t *)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648]);
    id v9 = v5;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_1AD9DDF50();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v7, v8, v10);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t sub_1AD8EE604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_1AD8E9448(0, (unint64_t *)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1AD9DDF50();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *sub_1AD8EE6E8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  sub_1AD8E9448(0, (unint64_t *)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648]);
  id v8 = v4;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_1AD9DDF50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v6, v7, v9);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1AD8EE7E4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (void *)a2[1];
  uint64_t v7 = (void *)a1[1];
  a1[1] = v6;
  id v8 = v6;

  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    uint64_t v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3CB98];
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD8EFE00((uint64_t)a1 + v9, (uint64_t)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD8E9448);
    sub_1AD8E9448(0, (unint64_t *)&qword_1E9A4B6D8, v12, v13);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_1AD9DDF50();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v10, v11, v14);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1AD8EE934(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  sub_1AD8E9448(0, (unint64_t *)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648]);
  uint64_t v8 = v7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_1AD9DDF50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v5, v6, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

void *sub_1AD8EEA34(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v6;

  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3CB98];
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD8EFE00((uint64_t)a1 + v8, (uint64_t)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD8E9448);
    sub_1AD8E9448(0, (unint64_t *)&qword_1E9A4B6D8, v11, v12);
    uint64_t v14 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_1AD9DDF50();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v9, v10, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1AD8EEB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD8EEB9C);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1AD8E9448(0, &qword_1E9A4B6E0, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C658]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1AD8EEC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD8EEC94);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1AD8E9448(0, &qword_1E9A4B6E0, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C658]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1AD8EED70()
{
  sub_1AD8E9448(319, (unint64_t *)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for WeatherDescriptionText()
{
  return &type metadata for WeatherDescriptionText;
}

uint64_t sub_1AD8EEE48()
{
  return sub_1AD8F003C(&qword_1E9A4B800, (void (*)(uint64_t))sub_1AD8EEE90);
}

void sub_1AD8EEE90()
{
  if (!qword_1E9A4B808)
  {
    sub_1AD8E9448(255, &qword_1E9A4B7C8, (uint64_t (*)(uint64_t))sub_1AD8EE244, MEMORY[0x1E4F3F108]);
    sub_1AD8EF2F0(&qword_1E9A4B810, &qword_1E9A4B7C8, (uint64_t (*)(uint64_t))sub_1AD8EE244);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B808);
    }
  }
}

uint64_t sub_1AD8EEF44()
{
  return sub_1AD8F003C(&qword_1E9A4B818, (void (*)(uint64_t))sub_1AD8EEF8C);
}

void sub_1AD8EEF8C()
{
  if (!qword_1E9A4B820)
  {
    sub_1AD8E9448(255, &qword_1E9A4B7E0, (uint64_t (*)(uint64_t))sub_1AD8EE448, MEMORY[0x1E4F3F108]);
    sub_1AD8EF2F0(&qword_1E9A4B828, &qword_1E9A4B7E0, (uint64_t (*)(uint64_t))sub_1AD8EE448);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B820);
    }
  }
}

uint64_t sub_1AD8EF040()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8EF05C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD8EF078()
{
  if (!qword_1E9A4B830)
  {
    sub_1AD8E9448(255, &qword_1E9A4B838, (uint64_t (*)(uint64_t))sub_1AD8EF12C, MEMORY[0x1E4F3F108]);
    sub_1AD8EF2F0(&qword_1E9A4B860, &qword_1E9A4B838, (uint64_t (*)(uint64_t))sub_1AD8EF12C);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B830);
    }
  }
}

void sub_1AD8EF12C()
{
  if (!qword_1E9A4B840)
  {
    sub_1AD8EF19C();
    sub_1AD8EF290();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4B840);
    }
  }
}

void sub_1AD8EF19C()
{
  if (!qword_1E9A4B848)
  {
    sub_1AD8EF204();
    sub_1AD9DE6E0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B848);
    }
  }
}

void sub_1AD8EF204()
{
  if (!qword_1E9A4B850)
  {
    sub_1AD8EF70C(255, &qword_1E9A4B858, MEMORY[0x1E4F3EC98], MEMORY[0x1E4F3D4F8], MEMORY[0x1E4F3CC10]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B850);
    }
  }
}

void sub_1AD8EF290()
{
  if (!qword_1E9A49D18)
  {
    sub_1AD9DE6E0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49D18);
    }
  }
}

uint64_t sub_1AD8EF2F0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8E9448(255, a2, a3, MEMORY[0x1E4F3F108]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8EF354()
{
  if (!qword_1E9A4B868)
  {
    sub_1AD8E9448(255, &qword_1E9A4B838, (uint64_t (*)(uint64_t))sub_1AD8EF12C, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B868);
    }
  }
}

uint64_t sub_1AD8EF3EC(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD8EF46C()
{
  unint64_t result = qword_1E9A4B878;
  if (!qword_1E9A4B878)
  {
    sub_1AD8EF70C(255, &qword_1E9A4B858, MEMORY[0x1E4F3EC98], MEMORY[0x1E4F3D4F8], MEMORY[0x1E4F3CC10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B878);
  }
  return result;
}

uint64_t sub_1AD8EF508(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1AD8EF570(uint64_t a1)
{
}

void sub_1AD8EF5AC(uint64_t a1)
{
}

void sub_1AD8EF5E8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_1AD8E9448(255, a4, a5, MEMORY[0x1E4F3DF18]);
    unint64_t v8 = sub_1AD9DDFC0();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD8EF680()
{
  if (!qword_1E9A4B890)
  {
    sub_1AD8EF70C(255, &qword_1E9A4B898, MEMORY[0x1E4F3D9E0], MEMORY[0x1E4F3D9D8], MEMORY[0x1E4F3DC28]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B890);
    }
  }
}

void sub_1AD8EF70C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD8EF75C(uint64_t a1)
{
}

void sub_1AD8EF790()
{
  if (!qword_1E9A4B8B8)
  {
    sub_1AD8EF570(255);
    sub_1AD8EAF6C(255, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B8B8);
    }
  }
}

void sub_1AD8EF810()
{
  if (!qword_1E9A4B8C0)
  {
    sub_1AD8EF790();
    sub_1AD8EAF6C(255, (unint64_t *)&qword_1E9A4A120, &qword_1E9A4A128, MEMORY[0x1E4FBB550]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B8C0);
    }
  }
}

void sub_1AD8EF890()
{
  if (!qword_1E9A4B8C8)
  {
    sub_1AD8EF810();
    sub_1AD8EAFD8(255, &qword_1EB725368, MEMORY[0x1E4F3C870], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B8C8);
    }
  }
}

unint64_t sub_1AD8EF91C()
{
  unint64_t result = qword_1E9A4B8D8;
  if (!qword_1E9A4B8D8)
  {
    sub_1AD8EAD04(255, &qword_1E9A4B8D0, (void (*)(uint64_t))sub_1AD8EF890);
    sub_1AD8EDCD8(&qword_1E9A4B8E0, (void (*)(uint64_t))sub_1AD8EF890, (void (*)(void))sub_1AD8EF9FC, (void (*)(void))sub_1AD884718);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B8D8);
  }
  return result;
}

unint64_t sub_1AD8EF9FC()
{
  unint64_t result = qword_1E9A4B8E8;
  if (!qword_1E9A4B8E8)
  {
    sub_1AD8EF810();
    sub_1AD8EFA94();
    sub_1AD8EDDFC((unint64_t *)&qword_1E9A4A180, (unint64_t *)&qword_1E9A4A120, &qword_1E9A4A128, MEMORY[0x1E4FBB550]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B8E8);
  }
  return result;
}

unint64_t sub_1AD8EFA94()
{
  unint64_t result = qword_1E9A4B8F0;
  if (!qword_1E9A4B8F0)
  {
    sub_1AD8EF790();
    sub_1AD8EDCD8(&qword_1E9A4B8F8, sub_1AD8EF570, (void (*)(void))sub_1AD8EFB70, (void (*)(void))sub_1AD8EFD40);
    sub_1AD8EDDFC((unint64_t *)&qword_1E9A49D48, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B8F0);
  }
  return result;
}

uint64_t sub_1AD8EFB70()
{
  return sub_1AD8EDCD8(&qword_1E9A4B900, sub_1AD8EF5AC, (void (*)(void))sub_1AD8EFBB8, (void (*)(void))sub_1AD8EFCB4);
}

unint64_t sub_1AD8EFBB8()
{
  unint64_t result = qword_1E9A4B908;
  if (!qword_1E9A4B908)
  {
    sub_1AD8EF680();
    sub_1AD8EFC30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B908);
  }
  return result;
}

unint64_t sub_1AD8EFC30()
{
  unint64_t result = qword_1E9A4B910;
  if (!qword_1E9A4B910)
  {
    sub_1AD8EF70C(255, &qword_1E9A4B898, MEMORY[0x1E4F3D9E0], MEMORY[0x1E4F3D9D8], MEMORY[0x1E4F3DC28]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B910);
  }
  return result;
}

uint64_t sub_1AD8EFCB4()
{
  return sub_1AD8EFCDC(&qword_1E9A4B918, &qword_1E9A4B8A0, (uint64_t (*)(uint64_t))sub_1AD8EF75C);
}

uint64_t sub_1AD8EFCDC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8E9448(255, a2, a3, MEMORY[0x1E4F3DF18]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD8EFD40()
{
  return sub_1AD8EFCDC(&qword_1E9A4B920, &qword_1E9A4B8B0, MEMORY[0x1E4F3C5D0]);
}

uint64_t sub_1AD8EFD68()
{
  return sub_1AD9DE140();
}

uint64_t sub_1AD8EFD90(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_1AD8E9448(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1AD8EFE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

unint64_t sub_1AD8EFE6C()
{
  unint64_t result = qword_1E9A4B928;
  if (!qword_1E9A4B928)
  {
    sub_1AD8E9448(255, &qword_1E9A4B930, (uint64_t (*)(uint64_t))sub_1AD8EF078, MEMORY[0x1E4FBB718]);
    sub_1AD8F003C(&qword_1E9A4B938, (void (*)(uint64_t))sub_1AD8EF078);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B928);
  }
  return result;
}

uint64_t sub_1AD8EFF3C()
{
  return sub_1AD8EDCD8(&qword_1E9A4B940, sub_1AD8EFF98, (void (*)(void))sub_1AD8EF91C, (void (*)(void))sub_1AD87BF14);
}

void sub_1AD8EFF98(uint64_t a1)
{
}

void sub_1AD8EFFC0(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_1AD8EAD04(255, a3, a4);
    sub_1AD9DE6E0();
    unint64_t v5 = sub_1AD9DDFC0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD8F003C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id static UIColor.dynamic(light:dark:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v11[4] = sub_1AD8F0494;
  v11[5] = v4;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = sub_1AD8F0900;
  v11[3] = &block_descriptor_15;
  uint64_t v6 = _Block_copy(v11);
  id v7 = a1;
  id v8 = a2;
  id v9 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  return v9;
}

id static UIColor.invertedGroupedCellBackground.getter()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4[4] = sub_1AD8F05CC;
  v4[5] = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  v4[2] = sub_1AD8F0900;
  v4[3] = &block_descriptor_3_0;
  uint64_t v1 = _Block_copy(v4);
  id v2 = objc_msgSend(v0, sel_initWithDynamicProvider_, v1);
  _Block_release(v1);
  swift_release();
  return v2;
}

CGColorRef __swiftcall UIColor.cgColor(with:)(UITraitCollection with)
{
  id v2 = objc_msgSend(v1, sel_resolvedColorWithTraitCollection_, with.super.isa);
  uint64_t v3 = (CGColor *)objc_msgSend(v2, sel_CGColor);

  return v3;
}

id static UIColor.invertedGroupedTableViewBackground.getter()
{
  id v0 = self;
  id v1 = objc_msgSend(v0, sel_systemBackgroundColor);
  id v2 = objc_msgSend(v0, sel_systemGroupedBackgroundColor);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v10[4] = sub_1AD8F0494;
  v10[5] = v3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  v10[2] = sub_1AD8F0900;
  v10[3] = &block_descriptor_10;
  id v5 = _Block_copy(v10);
  id v6 = v1;
  id v7 = v2;
  id v8 = objc_msgSend(v4, sel_initWithDynamicProvider_, v5);
  _Block_release(v5);

  swift_release();
  return v8;
}

id sub_1AD8F03F4(void *a1, void *a2, void *a3)
{
  id v4 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v4)
  {
    BOOL v5 = v4 == (id)2;
    id v6 = a3;
    if (!v5) {
      id v6 = a2;
    }
  }
  else
  {
    id v6 = a3;
  }
  return v6;
}

uint64_t sub_1AD8F0454()
{
  return swift_deallocObject();
}

id static UIColor.dynamic(light:dark:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v13[4] = sub_1AD8F09C0;
  v13[5] = v8;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  v13[2] = sub_1AD8F0900;
  v13[3] = &block_descriptor_16;
  uint64_t v10 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  id v11 = objc_msgSend(v9, sel_initWithDynamicProvider_, v10);
  _Block_release(v10);
  swift_release();
  return v11;
}

id sub_1AD8F05AC(void *a1)
{
  return sub_1AD8F05E4(a1, (SEL *)&selRef_systemGray4Color, (SEL *)&selRef_blackColor, 0.7);
}

id sub_1AD8F05CC(void *a1)
{
  return sub_1AD8F05E4(a1, (SEL *)&selRef_secondarySystemBackgroundColor, (SEL *)&selRef_secondarySystemBackgroundColor, 0.8);
}

id sub_1AD8F05E4(void *a1, SEL *a2, SEL *a3, double a4)
{
  id v8 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v8) {
    BOOL v9 = v8 == (id)2;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    id v10 = [self *a3];
    return v10;
  }
  else
  {
    id v11 = [self *a2];
    id v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, a1);

    id v13 = objc_msgSend(v12, sel_colorWithAlphaComponent_, a4);
    return v13;
  }
}

UIColor __swiftcall UIColor.resolved(with:)(UITraitCollection with)
{
  id v2 = objc_msgSend(v1, sel_resolvedColorWithTraitCollection_, with.super.isa);
  return (UIColor)v2;
}

id static UIColor.ringGoalMetColor.getter()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_whiteColor);
  id v2 = objc_msgSend(v0, sel_secondarySystemBackgroundColor);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v10[4] = sub_1AD8F0494;
  v10[5] = v3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  v10[2] = sub_1AD8F0900;
  v10[3] = &block_descriptor_23;
  BOOL v5 = _Block_copy(v10);
  id v6 = v1;
  id v7 = v2;
  id v8 = objc_msgSend(v4, sel_initWithDynamicProvider_, v5);
  _Block_release(v5);

  swift_release();
  return v8;
}

id static UIColor.ringGoalMissColor.getter()
{
  id v0 = objc_msgSend(self, sel_systemOrangeColor);
  return v0;
}

id sub_1AD8F0900(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  BOOL v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_1AD8F0980()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD8F09C0(void *a1)
{
  uint64_t v3 = *(uint64_t (**)(void *))(v1 + 16);
  id v4 = *(uint64_t (**)(void *))(v1 + 32);
  id v5 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v5) {
    BOOL v6 = v5 == (id)2;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return v4(a1);
  }
  else {
    return v3(a1);
  }
}

id sub_1AD8F0A38(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = *(void **)(v1 + 24);
  id v4 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v4 == (id)2) {
    id v5 = v3;
  }
  else {
    id v5 = v2;
  }
  if (v4) {
    BOOL v6 = v5;
  }
  else {
    BOOL v6 = v3;
  }
  return v6;
}

void SleepOnboardingViewRepresentation.init(healthStore:sleepStore:onboardingContext:)(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a3;
  char v8 = *((unsigned char *)a3 + 8);
  uint64_t v23 = a3[2];
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F67B78]), sel_init);
  type metadata accessor for HealthStatusFeatureProvider();
  id v10 = (void *)swift_allocObject();
  uint64_t v11 = *MEMORY[0x1E4F29DC8];
  id v12 = objc_allocWithZone(MEMORY[0x1E4F2B068]);
  id v13 = v9;
  id v14 = a1;
  id v15 = a2;
  id v16 = objc_msgSend(v12, sel_initWithFeatureIdentifier_healthStore_, v11, v14);
  unint64_t v17 = sub_1AD8F1230();
  uint64_t v18 = MEMORY[0x1E4F66930];
  v10[5] = v17;
  void v10[6] = v18;
  v10[2] = v16;
  sub_1AD9DD1C0();
  v10[7] = sub_1AD9DD1B0();
  uint64_t v19 = type metadata accessor for SleepOnboardingManager();
  uint64_t v20 = (void *)swift_allocObject();
  uint64_t v21 = sub_1AD8D5298(v15, v14, (uint64_t)v10, v20);
  type metadata accessor for SleepOnboardingCoordinator();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 40) = v19;
  *(void *)(v22 + 48) = &protocol witness table for SleepOnboardingManager;
  *(void *)(v22 + 16) = v21;
  *(unsigned char *)(v22 + 96) = 0;
  *(void *)(v22 + 56) = v7;
  *(unsigned char *)(v22 + 64) = v8;
  *(void *)(v22 + 80) = 0;
  *(void *)(v22 + 88) = v13;
  *(void *)(v22 + 72) = v23;

  swift_retain();
  sub_1AD9629A8(0, 0, 0);
  swift_release();

  *a4 = v13;
  a4[1] = v22;
}

id SleepOnboardingViewRepresentation.makeUIViewController(context:)()
{
  return *v0;
}

id SleepOnboardingViewRepresentation.makeCoordinator()()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = (objc_class *)type metadata accessor for SleepOnboardingViewRepresentation.Coordinator();
  id v4 = (char *)objc_allocWithZone(v3);
  id v5 = &v4[OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent];
  *(void *)id v5 = v2;
  *((void *)v5 + 1) = v1;
  v8.receiver = v4;
  v8.super_class = v3;
  id v6 = v2;
  swift_retain();
  return objc_msgSendSuper2(&v8, sel_init);
}

id SleepOnboardingViewRepresentation.Coordinator.__allocating_init(_:)(_OWORD *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(_OWORD *)&v3[OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent] = *a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t sub_1AD8F0D34@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  id v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = v4;
  a2[1] = v5;
  id v6 = v4;
  return swift_retain();
}

void sub_1AD8F0D94(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *a2 + OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  uint64_t v5 = *(void **)v4;
  *(void *)uint64_t v4 = v3;
  *(void *)(v4 + 8) = v2;
  id v6 = v3;
  swift_retain();
  swift_release();
}

uint64_t sub_1AD8F0E10@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  *a1 = v4;
  a1[1] = v5;
  id v6 = v4;
  return swift_retain();
}

void sub_1AD8F0E6C(_OWORD *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *(_OWORD *)uint64_t v3 = *a1;
  swift_release();
}

uint64_t (*sub_1AD8F0ED0())()
{
  return j__swift_endAccess;
}

id SleepOnboardingViewRepresentation.Coordinator.init(_:)(_OWORD *a1)
{
  *(_OWORD *)&v1[OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent] = *a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for SleepOnboardingViewRepresentation.Coordinator();
  return objc_msgSendSuper2(&v3, sel_init);
}

id SleepOnboardingViewRepresentation.Coordinator.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SleepOnboardingViewRepresentation.Coordinator.init()()
{
}

id SleepOnboardingViewRepresentation.Coordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepOnboardingViewRepresentation.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1AD8F108C@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = (objc_class *)type metadata accessor for SleepOnboardingViewRepresentation.Coordinator();
  id v6 = (char *)objc_allocWithZone(v5);
  uint64_t v7 = &v6[OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent];
  *(void *)uint64_t v7 = v4;
  *((void *)v7 + 1) = v3;
  v10.receiver = v6;
  v10.super_class = v5;
  id v8 = v4;
  swift_retain();
  id result = objc_msgSendSuper2(&v10, sel_init);
  *a1 = result;
  return result;
}

uint64_t sub_1AD8F1104()
{
  return sub_1AD9DE670();
}

uint64_t sub_1AD8F1140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD8F1560();
  return MEMORY[0x1F40FAB70](a1, a2, a3, v6);
}

uint64_t sub_1AD8F11A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD8F1560();
  return MEMORY[0x1F40FAB28](a1, a2, a3, v6);
}

void sub_1AD8F1208()
{
}

unint64_t sub_1AD8F1230()
{
  unint64_t result = qword_1E9A4B360;
  if (!qword_1E9A4B360)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B360);
  }
  return result;
}

uint64_t type metadata accessor for SleepOnboardingViewRepresentation.Coordinator()
{
  return self;
}

unint64_t sub_1AD8F1298()
{
  unint64_t result = qword_1E9A4B958;
  if (!qword_1E9A4B958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B958);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SleepOnboardingViewRepresentation(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for SleepOnboardingViewRepresentation(id *a1)
{
  return swift_release();
}

uint64_t assignWithCopy for SleepOnboardingViewRepresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

id *assignWithTake for SleepOnboardingViewRepresentation(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepOnboardingViewRepresentation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepOnboardingViewRepresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepOnboardingViewRepresentation()
{
  return &type metadata for SleepOnboardingViewRepresentation;
}

uint64_t method lookup function for SleepOnboardingViewRepresentation.Coordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepOnboardingViewRepresentation.Coordinator);
}

uint64_t dispatch thunk of SleepOnboardingViewRepresentation.Coordinator.parent.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SleepOnboardingViewRepresentation.Coordinator.parent.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SleepOnboardingViewRepresentation.Coordinator.parent.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SleepOnboardingViewRepresentation.Coordinator.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t sub_1AD8F1560()
{
  unint64_t result = qword_1E9A4B960;
  if (!qword_1E9A4B960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B960);
  }
  return result;
}

id WatchAppInstalledProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t sub_1AD8F15EC@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD8F166C(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_1AD9DDBD0();
}

uint64_t sub_1AD8F16DC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1AD8F1758()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return sub_1AD9DDBD0();
}

void (*sub_1AD8F17C4(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1AD9DDBB0();
  return sub_1AD867F38;
}

uint64_t sub_1AD8F1850()
{
  return swift_endAccess();
}

uint64_t sub_1AD8F18D0(uint64_t a1)
{
  sub_1AD8F1C48(0, &qword_1E9A49E28, MEMORY[0x1E4F1AC60]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v2, v5);
  id v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v14 - v10;
  id v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1AD8F1C48(0, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1AD8F1A74()
{
  return swift_endAccess();
}

uint64_t sub_1AD8F1AF0(uint64_t a1)
{
  sub_1AD8F1C48(0, &qword_1E9A49E28, MEMORY[0x1E4F1AC60]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - v6, a1, v3);
  swift_beginAccess();
  sub_1AD8F1C48(0, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void sub_1AD8F1C48(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB390]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void (*sub_1AD8F1C98(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1AD8F1C48(0, &qword_1E9A49E28, MEMORY[0x1E4F1AC60]);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider__isWatchAppInstalled;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1AD8F1C48(0, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4F1AC70]);
  v3[16] = v9;
  sub_1AD9DDB90();
  swift_endAccess();
  return sub_1AD868574;
}

char *WatchAppInstalledProvider.init()()
{
  sub_1AD8F2280();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v4);
  uint64_t v36 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1AD9DFD30();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v37 = (char *)&v35 - v13;
  sub_1AD8F1C48(0, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4F1AC70]);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v17);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = &v0[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider__isWatchAppInstalled];
  char v39 = 0;
  uint64_t v21 = v0;
  sub_1AD9DDB80();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v19, v15);
  *(void *)&v21[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider_watchAppStateObserver] = 0;

  uint64_t v22 = (objc_class *)type metadata accessor for WatchAppInstalledProvider();
  v38.receiver = v21;
  v38.super_class = v22;
  id v23 = objc_msgSendSuper2(&v38, sel_init);
  uint64_t v24 = self;
  uint64_t v25 = (char *)v23;
  id v26 = objc_msgSend(v24, sel_defaultCenter);
  id v27 = (id)HKSPActivePairedDeviceApplicationsInstalledDistributedNotification();
  if (!v27)
  {
    sub_1AD9DF710();
    id v27 = (id)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  sub_1AD9DFD40();

  id v28 = objc_msgSend(v24, sel_defaultCenter);
  id v29 = (id)HKSPActivePairedDeviceApplicationsUninstalledDistributedNotification();
  if (!v29)
  {
    sub_1AD9DF710();
    id v29 = (id)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  sub_1AD9DFD40();

  sub_1AD8F258C(&qword_1EB725B80, MEMORY[0x1E4F27FC8]);
  uint64_t v30 = v36;
  uint64_t v31 = v37;
  sub_1AD9DDC10();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8F258C(&qword_1E9A4B980, (void (*)(uint64_t))sub_1AD8F2280);
  uint64_t v32 = sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v30, v2);
  *(void *)&v25[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider_watchAppStateObserver] = v32;
  swift_release();
  sub_1AD8F2938();

  uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 8);
  v33(v11, v6);
  v33(v31, v6);
  return v25;
}

void sub_1AD8F2280()
{
  if (!qword_1E9A4B970)
  {
    sub_1AD9DFD30();
    sub_1AD8F258C(&qword_1EB725B80, MEMORY[0x1E4F27FC8]);
    unint64_t v0 = sub_1AD9DDA40();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B970);
    }
  }
}

uint64_t type metadata accessor for WatchAppInstalledProvider()
{
  uint64_t result = qword_1E9A4B988;
  if (!qword_1E9A4B988) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD8F2360()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD8F2398(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1AD9DD550();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
    id v6 = v4;
    uint64_t v7 = sub_1AD9DD530();
    os_log_type_t v8 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_getObjectType();
      sub_1AD8F3150();
      uint64_t v11 = sub_1AD9DF730();
      sub_1AD838978(v11, v12, &v13);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v7, v8, "[%s] Responding to watch application change", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v10, -1, -1);
      MEMORY[0x1B3E6D1A0](v9, -1, -1);
    }
    else
    {
    }
    sub_1AD8F2938();
  }
}

void sub_1AD8F2584(uint64_t a1)
{
  sub_1AD8F2398(a1, v1);
}

uint64_t sub_1AD8F258C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id WatchAppInstalledProvider.__allocating_init(isWatchAppInstalled:)(char a1)
{
  id v3 = objc_allocWithZone(v1);
  return WatchAppInstalledProvider.init(isWatchAppInstalled:)(a1);
}

id WatchAppInstalledProvider.init(isWatchAppInstalled:)(char a1)
{
  sub_1AD8F1C48(0, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4F1AC70]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  os_log_type_t v8 = (char *)&v13 - v7;
  uint64_t v9 = &v1[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider__isWatchAppInstalled];
  char v15 = 0;
  uint64_t v10 = v1;
  sub_1AD9DDB80();
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v8, v4);
  *(void *)&v10[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider_watchAppStateObserver] = 0;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  char v14 = a1;
  sub_1AD9DDB80();
  swift_endAccess();

  uint64_t v11 = (objc_class *)type metadata accessor for WatchAppInstalledProvider();
  v13.receiver = v10;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, sel_init);
}

id WatchAppInstalledProvider.__deallocating_deinit()
{
  if (*(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider_watchAppStateObserver])
  {
    swift_retain();
    sub_1AD9DDA90();
    swift_release();
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WatchAppInstalledProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1AD8F2938()
{
  id v0 = objc_msgSend(self, sel_sharedBehavior);
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v4[4] = sub_1AD8F3130;
    v4[5] = v2;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 1107296256;
    v4[2] = sub_1AD8A776C;
    v4[3] = &block_descriptor_16;
    uint64_t v3 = _Block_copy(v4);
    swift_release();
    objc_msgSend(v1, sel_hksp_activePairedDeviceHasSleepAppInstalledWithCompletion_, v3);
    _Block_release(v3);
  }
  else
  {
    __break(1u);
  }
}

void sub_1AD8F2A40(char a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3E6D270](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (a2)
    {
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v8 = sub_1AD9DD550();
      __swift_project_value_buffer(v8, (uint64_t)qword_1EB725958);
      id v9 = v7;
      id v10 = a2;
      id v11 = v9;
      id v12 = a2;
      objc_super v13 = sub_1AD9DD530();
      os_log_type_t v14 = sub_1AD9DFBC0();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v32 = v16;
        *(_DWORD *)uint64_t v15 = 136315394;
        swift_getObjectType();
        sub_1AD8F3150();
        uint64_t v17 = sub_1AD9DF730();
        sub_1AD838978(v17, v18, &v32);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();

        *(_WORD *)(v15 + 12) = 2080;
        id v19 = a2;
        sub_1AD869CF0();
        uint64_t v20 = sub_1AD9DF730();
        sub_1AD838978(v20, v21, &v32);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1AD834000, v13, v14, "[%s] Error fetching watch sleep app: %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v16, -1, -1);
        MEMORY[0x1B3E6D1A0](v15, -1, -1);
      }
      else
      {
      }
    }
    else
    {
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_1AD9DD550();
      __swift_project_value_buffer(v22, (uint64_t)qword_1EB725958);
      id v23 = v7;
      uint64_t v24 = sub_1AD9DD530();
      os_log_type_t v25 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v32 = v27;
        *(_DWORD *)uint64_t v26 = 136315394;
        swift_getObjectType();
        sub_1AD8F3150();
        uint64_t v28 = sub_1AD9DF730();
        sub_1AD838978(v28, v29, &v32);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();

        *(_WORD *)(v26 + 12) = 2080;
        if (a1) {
          uint64_t v30 = 1702195828;
        }
        else {
          uint64_t v30 = 0x65736C6166;
        }
        if (a1) {
          unint64_t v31 = 0xE400000000000000;
        }
        else {
          unint64_t v31 = 0xE500000000000000;
        }
        sub_1AD838978(v30, v31, &v32);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v24, v25, "[%s] Sleep app is installed: %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v27, -1, -1);
        MEMORY[0x1B3E6D1A0](v26, -1, -1);
      }
      else
      {
      }
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(v32) = a1 & 1;
      sub_1AD9DDBD0();
    }
  }
}

uint64_t sub_1AD8F2EC8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for WatchAppInstalledProvider();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

uint64_t sub_1AD8F2F10()
{
  return type metadata accessor for WatchAppInstalledProvider();
}

void sub_1AD8F2F18()
{
  sub_1AD8F1C48(319, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for WatchAppInstalledProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WatchAppInstalledProvider);
}

uint64_t dispatch thunk of WatchAppInstalledProvider.isWatchAppInstalled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.isWatchAppInstalled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.isWatchAppInstalled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.$isWatchAppInstalled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.$isWatchAppInstalled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.$isWatchAppInstalled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.__allocating_init(isWatchAppInstalled:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

void sub_1AD8F3130(char a1, void *a2)
{
  sub_1AD8F2A40(a1, a2, v2);
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

unint64_t sub_1AD8F3150()
{
  unint64_t result = qword_1E9A4B998;
  if (!qword_1E9A4B998)
  {
    type metadata accessor for WatchAppInstalledProvider();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B998);
  }
  return result;
}

uint64_t destroy for EditScheduleButton(id *a1)
{
  return swift_release();
}

uint64_t _s13SleepHealthUI18EditScheduleButtonVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  id v4 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EditScheduleButton(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EditScheduleButton(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EditScheduleButton()
{
  return &type metadata for EditScheduleButton;
}

uint64_t sub_1AD8F32D8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8F32F4@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v17[1] = a4;
  sub_1AD8F37F0(0, &qword_1E9A4B268, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F3ECD0]);
  v17[0] = v7;
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v8);
  id v10 = (char *)v17 - v9;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(unsigned char *)(v11 + 24) = a2;
  *(void *)(v11 + 32) = a3;
  swift_retain();
  id v12 = a1;
  sub_1AD9DF090();
  char v19 = a2;
  uint64_t v20 = a3;
  sub_1AD8F3744();
  sub_1AD9DF070();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(unsigned char *)(v13 + 24) = a2;
  *(void *)(v13 + 32) = a3;
  sub_1AD8F37F0(0, &qword_1E9A4B9A0, (uint64_t)&type metadata for QuickScheduleManagementViewRepresentation, MEMORY[0x1E4F3DB68], MEMORY[0x1E4F3CC10]);
  sub_1AD8C8B60();
  sub_1AD8F3840();
  id v14 = v12;
  swift_retain();
  uint64_t v15 = v17[0];
  sub_1AD9DED80();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v10, v15);
}

uint64_t sub_1AD8F3580@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  sub_1AD85F688();
  uint64_t result = sub_1AD9DEAF0();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  *(void *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_1AD8F368C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)*MEMORY[0x1E4FA5360];
  sub_1AD8F3744();
  id v5 = a1;
  id v6 = v4;
  sub_1AD9DF070();
  uint64_t result = sub_1AD9DE780();
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v9;
  *(unsigned char *)(a2 + 32) = v10;
  *(unsigned char *)(a2 + 33) = result;
  return result;
}

uint64_t sub_1AD8F3724@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8F32F4(*(void **)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), a1);
}

uint64_t sub_1AD8F3738()
{
  return sub_1AD8F3938(*(unsigned char *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_1AD8F3744()
{
  if (!qword_1E9A4A1C0)
  {
    unint64_t v0 = sub_1AD9DF080();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A1C0);
    }
  }
}

uint64_t objectdestroyTm_4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD8F37E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8F368C(*(void **)(v1 + 16), a1);
}

void sub_1AD8F37F0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_1AD8F3840()
{
  unint64_t result = qword_1E9A4B9A8;
  if (!qword_1E9A4B9A8)
  {
    sub_1AD8F37F0(255, &qword_1E9A4B9A0, (uint64_t)&type metadata for QuickScheduleManagementViewRepresentation, MEMORY[0x1E4F3DB68], MEMORY[0x1E4F3CC10]);
    sub_1AD8F38E4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B9A8);
  }
  return result;
}

unint64_t sub_1AD8F38E4()
{
  unint64_t result = qword_1E9A4B9B0;
  if (!qword_1E9A4B9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B9B0);
  }
  return result;
}

uint64_t sub_1AD8F3938(char a1, uint64_t a2)
{
  if (qword_1E9A48EC8 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1AD9DD550();
  __swift_project_value_buffer(v4, (uint64_t)qword_1E9A5A708);
  id v5 = sub_1AD9DD530();
  os_log_type_t v6 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v10[0] = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    sub_1AD838978(0xD000000000000012, 0x80000001AD9E8F50, v10);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v5, v6, "[%{public}s] Opening schedule editor", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
  }

  LOBYTE(v10[0]) = a1 & 1;
  v10[1] = a2;
  sub_1AD8F3744();
  return sub_1AD9DF060();
}

uint64_t sub_1AD8F3AE8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SleepScheduleClock.roundedBedtimeComponents.getter()
{
  return sub_1AD8F3BE8((uint64_t (*)(uint64_t, double))sub_1AD94B060);
}

uint64_t SleepScheduleClock.roundedWakeUpComponents.getter()
{
  return sub_1AD8F3BE8((uint64_t (*)(uint64_t, double))sub_1AD94B2E4);
}

uint64_t sub_1AD8F3BE8(uint64_t (*a1)(uint64_t, double))
{
  uint64_t v3 = swift_beginAccess();
  return a1(v3, *(double *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
}

void SleepScheduleClock.set(bedtimeComponents:wakeUpComponents:timeInBedGoal:alarmEnabled:isForSingleDayOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v7 = v6;
  int v13 = a4 & 1;
  double v14 = *(double *)(v7 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152);
  double v15 = *(double *)(v7 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160);
  swift_beginAccess();
  sub_1AD94B814(a1, a2, a3, v13, a5, a6, v14, v15);
  swift_endAccess();
  sub_1AD8F3DFC();
}

uint64_t SleepScheduleClock.timeInBedGoalMet.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  swift_beginAccess();
  long long v5 = *(_OWORD *)(v1 + 27);
  if (BYTE13(v5)) {
    return 2;
  }
  double v3 = *(double *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144);
  if (HIBYTE(v5)) {
    sub_1AD8F956C();
  }
  else {
    sub_1AD8944E8();
  }
  return *(double *)((char *)&v5 + 5) <= v3 * round(v4 / v3);
}

void sub_1AD8F3DFC()
{
  uint64_t v1 = v0;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring];
  id v3 = sub_1AD8F6060();
  objc_msgSend(v2, sel_setPath_, v3);

  id v4 = sub_1AD8F6060();
  objc_msgSend(v2, sel_setShadowPath_, v4);

  long long v5 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand];
  uint64_t v6 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  double v7 = sub_1AD8A4A2C(*(void *)v6, *((void *)v6 + 1));
  uint64_t v8 = (double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  double v9 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72] * 0.5
     - (*(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80]
      + *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 88] * 0.5);
  __double2 v10 = __sincos_stret(v7);
  double v11 = v10.__sinval * v9;
  objc_msgSend(v1, sel_bounds);
  CGFloat v12 = CGRectGetMidX(v63) + v10.__cosval * v9;
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v5, sel_setCenter_, v12, v11 + CGRectGetMidY(v64));
  int v13 = *(char **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand];
  double v14 = sub_1AD8A4A2C(*((void *)v6 + 2), *((void *)v6 + 3));
  double v15 = v8[9] * 0.5 - (v8[10] + v8[11] * 0.5);
  __double2 v16 = __sincos_stret(v14);
  double v17 = v16.__sinval * v15;
  objc_msgSend(v1, sel_bounds);
  CGFloat v18 = CGRectGetMidX(v65) + v16.__cosval * v15;
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v13, sel_setCenter_, v18, v17 + CGRectGetMidY(v66));
  __int16 v19 = *(_WORD *)&v13[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_symbol];
  *(_WORD *)&v13[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_symbol] = v6[41] | 0x1000;
  LOWORD(v60[0]) = v19;
  sub_1AD9606A4((__int16 *)v60);
  *(_OWORD *)&v62[11] = *(_OWORD *)(v6 + 27);
  long long v20 = *((_OWORD *)v6 + 1);
  long long v61 = *(_OWORD *)v6;
  *(_OWORD *)uint64_t v62 = v20;
  if (v62[24]) {
    goto LABEL_7;
  }
  double v21 = v8[18];
  double v22 = *(double *)&v62[16];
  if (v62[26]) {
    sub_1AD8F956C();
  }
  else {
    sub_1AD8944E8();
  }
  if (v22 <= v21 * round(v23 / v21)) {
LABEL_7:
  }
    sub_1AD9618C4(&v48);
  else {
    sub_1AD961D74(&v48);
  }
  uint64_t v24 = v51;
  uint64_t v26 = v49;
  os_log_type_t v25 = v50;
  uint64_t v27 = v48;
  uint64_t v28 = *((void *)v8 + 14);
  v60[0] = v48;
  v60[1] = v49;
  v60[2] = v50;
  v60[3] = v51;
  v60[4] = v52;
  v60[5] = v28;
  id v29 = v52;
  id v30 = v27;
  id v31 = v26;
  id v32 = v25;
  id v33 = v24;
  id v34 = v29;
  id v35 = v30;
  id v36 = v31;
  id v37 = v32;
  id v38 = v33;
  sub_1AD9609C4((uint64_t)v60);
  sub_1AD9609C4((uint64_t)v60);
  sub_1AD8F5D90();
  char v39 = self;
  objc_msgSend(v39, sel_begin);
  objc_msgSend(v39, sel_setDisableActions_, 1);
  uint64_t v40 = *(void *)v6;
  uint64_t v41 = *((void *)v6 + 1);
  double v42 = sub_1AD8A4A2C(*(void *)v6, v41);
  uint64_t v43 = *((void *)v6 + 4);
  char v44 = v6[40];
  char v45 = v6[41];
  char v46 = v6[42];
  uint64_t v53 = v40;
  uint64_t v54 = v41;
  long long v55 = *((_OWORD *)v6 + 1);
  uint64_t v56 = v43;
  char v57 = v44;
  char v58 = v45;
  char v59 = v46;
  sub_1AD8944E8();
  sub_1AD8F92B8(v42, v47);
  objc_msgSend(v39, sel_commit);
}

void sub_1AD8F41A0()
{
  uint64_t v1 = v0;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_gestureRecognizer];
  id v3 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  objc_msgSend(v2, sel_setMinimumPressDuration_, *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 136]);
  objc_msgSend(v2, sel_addTarget_action_, v1, sel_gestureReconizerDidChange_);
  objc_msgSend(v2, sel_setDelegate_, v1);
  objc_msgSend(v2, sel_setCancelsTouchesInView_, 0);
  objc_msgSend(v1, sel_addGestureRecognizer_, v2);
  id v4 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track];
  objc_msgSend(v4, sel_setFillColor_, 0);
  objc_msgSend(v4, sel_setLineWidth_, *((double *)v3 + 10) + *((double *)v3 + 10) + *((double *)v3 + 11));
  long long v5 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring];
  objc_msgSend(v5, sel_setShadowOffset_, *((double *)v3 + 6), *((double *)v3 + 7));
  objc_msgSend(v5, sel_setShadowRadius_, *((double *)v3 + 10));
  LODWORD(v6) = *((_DWORD *)v3 + 16);
  objc_msgSend(v5, sel_setShadowOpacity_, v6);
  double v7 = *(char **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
  *(int8x16_t *)&v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration] = vextq_s8(*(int8x16_t *)(v3 + 120), *(int8x16_t *)(v3 + 120), 8uLL);
  objc_msgSend(v7, sel_setNeedsLayout);
  uint64_t v8 = *(char **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand];
  objc_msgSend(v8, sel_frame);
  objc_msgSend(v8, sel_setFrame_);
  double v9 = *(char **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand];
  objc_msgSend(v9, sel_frame);
  objc_msgSend(v9, sel_setFrame_);
  __double2 v10 = (void *)*((void *)v3 + 14);
  double v11 = *(void **)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 8];
  CGFloat v12 = *(void **)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 16];
  int v13 = *(void **)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 24];
  double v14 = *(void **)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 32];
  v31[0] = *(id *)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  v31[1] = v11;
  v31[2] = v12;
  v31[3] = v13;
  v31[4] = v14;
  v31[5] = v10;
  id v15 = v14;
  id v16 = v31[0];
  id v17 = v11;
  id v18 = v12;
  id v19 = v13;
  sub_1AD9609C4((uint64_t)v31);
  long long v20 = (void *)*((void *)v3 + 14);
  double v21 = *(void **)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 8];
  double v22 = *(void **)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 16];
  double v23 = *(void **)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 24];
  uint64_t v24 = *(void **)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 32];
  v30[0] = *(id *)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  v30[1] = v21;
  v30[2] = v22;
  v30[3] = v23;
  v30[4] = v24;
  v30[5] = v20;
  id v25 = v24;
  id v26 = v30[0];
  id v27 = v21;
  id v28 = v22;
  id v29 = v23;
  sub_1AD9609C4((uint64_t)v30);
  sub_1AD8F5D90();
}

uint64_t (*sub_1AD8F4430())()
{
  return j__swift_endAccess;
}

id sub_1AD8F448C(long long *a1, uint64_t a2)
{
  long long v47 = a1[1];
  long long v48 = *a1;
  uint64_t v4 = *((void *)a1 + 4);
  char v5 = *((unsigned char *)a1 + 40);
  char v6 = *((unsigned char *)a1 + 41);
  char v7 = *((unsigned char *)a1 + 42);
  uint64_t v8 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_gestureRecognizer;
  id v9 = objc_allocWithZone(MEMORY[0x1E4FB1968]);
  __double2 v10 = v2;
  *(void *)&v2[v8] = objc_msgSend(v9, sel_init);
  uint64_t v11 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track;
  *(void *)&v10[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F39C88]), sel_init);
  uint64_t v12 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring;
  *(void *)&v10[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F39C88]), sel_init);
  uint64_t v13 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand;
  sub_1AD9618C4(v53);
  LOWORD(v55[0]) = 0;
  double v14 = (objc_class *)type metadata accessor for SleepScheduleClockHand();
  id v15 = objc_allocWithZone(v14);
  *(void *)&v10[v13] = sub_1AD960B54((__int16 *)v55, (uint64_t)v53);
  uint64_t v16 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand;
  sub_1AD9618C4(v54);
  LOWORD(v55[0]) = 4097;
  id v17 = objc_allocWithZone(v14);
  *(void *)&v10[v16] = sub_1AD960B54((__int16 *)v55, (uint64_t)v54);
  id v18 = &v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator];
  *(_OWORD *)id v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *((void *)v18 + 4) = 0;
  id v19 = &v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator];
  *(_OWORD *)id v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((void *)v19 + 4) = 0;
  long long v20 = &v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  *((_OWORD *)v20 + 1) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *(_OWORD *)long long v20 = 0u;
  double v21 = &v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  *(_OWORD *)double v21 = v48;
  *((_OWORD *)v21 + 1) = v47;
  *((void *)v21 + 4) = v4;
  v21[40] = v5;
  v21[41] = v6;
  v21[42] = v7;
  memcpy(&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration], (const void *)a2, 0x188uLL);
  long long v22 = *(_OWORD *)(a2 + 344);
  v55[8] = *(_OWORD *)(a2 + 328);
  v55[9] = v22;
  long long v23 = *(_OWORD *)(a2 + 376);
  v55[10] = *(_OWORD *)(a2 + 360);
  v55[11] = v23;
  long long v24 = *(_OWORD *)(a2 + 280);
  v55[4] = *(_OWORD *)(a2 + 264);
  v55[5] = v24;
  long long v25 = *(_OWORD *)(a2 + 312);
  v55[6] = *(_OWORD *)(a2 + 296);
  v55[7] = v25;
  long long v26 = *(_OWORD *)(a2 + 216);
  v55[0] = *(_OWORD *)(a2 + 200);
  v55[1] = v26;
  long long v27 = *(_OWORD *)(a2 + 248);
  v55[2] = *(_OWORD *)(a2 + 232);
  v55[3] = v27;
  id v28 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleClockDial());
  sub_1AD897340(a2);
  sub_1AD897520((uint64_t)v55);
  *(void *)&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dial] = sub_1AD913F00(v55);
  double v30 = *(double *)(a2 + 120);
  double v29 = *(double *)(a2 + 128);
  id v31 = objc_allocWithZone((Class)type metadata accessor for RingGrabber());
  *(void *)&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber] = sub_1AD8F8C58(v29, v30);

  v52.receiver = v10;
  v52.super_class = (Class)type metadata accessor for SleepScheduleClock();
  id v32 = objc_msgSendSuper2(&v52, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v33 = sub_1AD96DE48();
  id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C18]), sel_initWithConfiguration_view_, v33, v32);

  unint64_t v35 = sub_1AD8FA494();
  unint64_t v50 = v35;
  uint64_t v51 = &off_1F046E520;
  v49[0] = v34;
  uint64_t v36 = (uint64_t)v32 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator;
  swift_beginAccess();
  sub_1AD8FA4D4((uint64_t)v49, v36);
  swift_endAccess();
  id v37 = sub_1AD96DE68();
  id v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C18]), sel_initWithConfiguration_view_, v37, v32);

  unint64_t v50 = v35;
  uint64_t v51 = &off_1F046E520;
  v49[0] = v38;
  uint64_t v39 = (uint64_t)v32 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator;
  swift_beginAccess();
  sub_1AD8FA4D4((uint64_t)v49, v39);
  swift_endAccess();
  sub_1AD8FA564(0, (unint64_t *)&qword_1E9A49250, (uint64_t (*)(uint64_t))sub_1AD841CE0, MEMORY[0x1E4FBBE00]);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1AD9E3080;
  uint64_t v41 = sub_1AD9DD6D0();
  uint64_t v42 = MEMORY[0x1E4FB1138];
  *(void *)(v40 + 32) = v41;
  *(void *)(v40 + 40) = v42;
  uint64_t v43 = sub_1AD9DD590();
  uint64_t v44 = MEMORY[0x1E4FB0F40];
  *(void *)(v40 + 48) = v43;
  *(void *)(v40 + 56) = v44;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD841D34();
  id v45 = v32;
  sub_1AD9DFD90();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  sub_1AD8F495C();
  sub_1AD8F41A0();
  sub_1AD89742C(a2);

  return v45;
}

void sub_1AD8F4908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    char v5 = (void *)v4;
    sub_1AD8F41A0();
  }
}

void sub_1AD8F495C()
{
  id v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v1, sel_addSublayer_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track]);

  objc_msgSend(v0, sel_addSubview_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dial]);
  id v2 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v2, sel_addSublayer_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring]);

  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F39BE8]), sel_init);
  objc_msgSend(v4, sel_addSublayer_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber]);
  id v3 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v3, sel_addSublayer_, v4);

  objc_msgSend(v0, sel_addSubview_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand]);
  objc_msgSend(v0, sel_addSubview_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand]);
}

id sub_1AD8F4AD8()
{
  id v1 = v0;
  swift_getObjectType();
  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for SleepScheduleClock();
  objc_msgSendSuper2(&v17, sel_layoutSubviews);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = v6;
    *(_DWORD *)char v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v16);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Layout subviews", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  id v9 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dial];
  CGFloat v10 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80]
      + *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80]
      + *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 88];
  objc_msgSend(v1, sel_bounds);
  v18.origin.x = sub_1AD8F87DC(v11, v12, v13, v14);
  CGRect v19 = CGRectInset(v18, v10, v10);
  return objc_msgSend(v9, sel_setFrame_, v19.origin.x, v19.origin.y, v19.size.width, v19.size.height);
}

void sub_1AD8F4D20(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  v52.receiver = v2;
  v52.super_class = (Class)type metadata accessor for SleepScheduleClock();
  objc_msgSendSuper2(&v52, sel_layoutSublayersOfLayer_, a1);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1AD9DD550();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EB725958);
  char v5 = sub_1AD9DD530();
  os_log_type_t v6 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(void *)&long long v44 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v9 = sub_1AD9E04F0();
    sub_1AD838978(v9, v10, (uint64_t *)&v44);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v5, v6, "[%{public}s] Layout sublayers", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
  }

  double v11 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track];
  objc_msgSend(v2, sel_bounds);
  objc_msgSend(v11, sel_setFrame_);
  objc_msgSend(v2, sel_bounds);
  CGFloat x = v53.origin.x;
  CGFloat y = v53.origin.y;
  CGFloat width = v53.size.width;
  CGFloat height = v53.size.height;
  double MidX = CGRectGetMidX(v53);
  v54.origin.CGFloat x = x;
  v54.origin.CGFloat y = y;
  v54.size.CGFloat width = width;
  v54.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v54);
  CGRect v18 = (double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  double v20 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72];
  double v19 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80];
  double v21 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 88];
  if (qword_1E9A48EB8 != -1) {
    swift_once();
  }
  double v22 = *(double *)&qword_1E9A5A6F8;
  if (qword_1E9A48EC0 != -1) {
    swift_once();
  }
  id v23 = objc_msgSend(self, sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, MidX, MidY, v20 * 0.5 - (v19 + v21 * 0.5), v22, *(double *)&qword_1E9A5A700);
  id v24 = objc_msgSend(v23, sel_CGPath);

  objc_msgSend(v11, sel_setPath_, v24);
  long long v25 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring];
  objc_msgSend(v2, sel_bounds);
  objc_msgSend(v25, sel_setFrame_);
  long long v26 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
  objc_msgSend(v26, sel_transform);
  long long v42 = v45;
  long long v43 = v44;
  long long v40 = v47;
  long long v41 = v46;
  long long v38 = v49;
  long long v39 = v48;
  long long v37 = v50;
  long long v27 = v51;
  long long v28 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
  long long v44 = *MEMORY[0x1E4F39B10];
  long long v45 = v28;
  long long v29 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
  long long v46 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
  long long v47 = v29;
  long long v30 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
  long long v48 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
  long long v49 = v30;
  long long v31 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
  long long v50 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
  long long v51 = v31;
  objc_msgSend(v26, sel_setTransform_, &v44);
  objc_msgSend(v26, sel_setFrame_, 0.0, 0.0, v18[9] - (v18[10] + v18[10]) - (v18[11] - v18[16]), v18[9] - (v18[10] + v18[10]) - (v18[11] - v18[16]));
  long long v44 = v43;
  long long v45 = v42;
  long long v46 = v41;
  long long v47 = v40;
  long long v48 = v39;
  long long v49 = v38;
  long long v50 = v37;
  long long v51 = v27;
  objc_msgSend(v26, sel_setTransform_, &v44);
  objc_msgSend(v2, sel_bounds);
  CGFloat v32 = v55.origin.x;
  CGFloat v33 = v55.origin.y;
  CGFloat v34 = v55.size.width;
  CGFloat v35 = v55.size.height;
  double v36 = CGRectGetMidX(v55);
  v56.origin.CGFloat x = v32;
  v56.origin.CGFloat y = v33;
  v56.size.CGFloat width = v34;
  v56.size.CGFloat height = v35;
  objc_msgSend(v26, sel_setPosition_, v36, CGRectGetMidY(v56));
  sub_1AD8F3DFC();
}

uint64_t sub_1AD8F52F0()
{
  id v1 = (void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  uint64_t result = swift_beginAccess();
  uint64_t v3 = v1[2];
  uint64_t v4 = v3 - *v1;
  if (__OFSUB__(v3, *v1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[1];
  uint64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v7 < 0)
  {
    uint64_t v8 = -60;
    if (v7 > -60) {
      uint64_t v8 = v5 - v6;
    }
    uint64_t v9 = v6 + v8;
    if (v9 == v5) {
      uint64_t v10 = v1[3];
    }
    else {
      uint64_t v10 = v5 + 1;
    }
    BOOL v11 = v9 == v5;
    unint64_t v12 = v3 ^ 0x8000000000000000;
    unint64_t v13 = (v9 - v10) / 0x3CuLL;
    if (!v11) {
      ++v13;
    }
    unint64_t v14 = v12 - *v1;
    while (v14 > v13)
    {
      --v4;
      BOOL v15 = v7 < -60;
      v7 += 60;
      if (!v15) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

id SleepScheduleClock.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleClock.init(frame:)()
{
}

id SleepScheduleClock.__deallocating_deinit(uint64_t a1)
{
  return sub_1AD8F94F4(a1, type metadata accessor for SleepScheduleClock);
}

uint64_t SleepScheduleClock.crossesDayBoundary.getter()
{
  swift_beginAccess();
  return sub_1AD94B568(*(double *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144)) & 1;
}

void SleepScheduleClock.accessibilitySetModel(_:wakeUpComponents:timeInBedGoal:alarmEnabled:)(double a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (void *)sub_1AD9DC8B0();
  id v8 = (id)sub_1AD9DC8B0();
  objc_msgSend(v4, sel_accessibilitySetModel_wakeUpComponents_timeInBedGoal_alarmEnabled_isForSingleDayOverride_, v7, v8, a4 & 1, 0, a1);
}

void SleepScheduleClock.accessibilitySetModel(_:wakeUpComponents:timeInBedGoal:alarmEnabled:isForSingleDayOverride:)(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v6 = v5;
  double v12 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152];
  double v13 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160];
  swift_beginAccess();
  sub_1AD94B814(a1, a2, *(uint64_t *)&a5, 0, a3, a4, v12, v13);
  swift_endAccess();
  sub_1AD8F3DFC();
  objc_msgSend(v6, sel_sendActionsForControlEvents_, 0x40000);
  sub_1AD8F3DFC();
}

uint64_t SleepScheduleClock.accessibilityRoundedBedtimeComponents()()
{
  return sub_1AD8F3BE8((uint64_t (*)(uint64_t, double))sub_1AD94B060);
}

uint64_t SleepScheduleClock.accessibilityRoundedWakeUpComponents()()
{
  return sub_1AD8F3BE8((uint64_t (*)(uint64_t, double))sub_1AD94B2E4);
}

id sub_1AD8F5C3C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, double))
{
  uint64_t v5 = sub_1AD9DC990();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  id v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  uint64_t v11 = swift_beginAccess();
  uint64_t v12 = *(void *)(v10 + 32);
  char v13 = *(unsigned char *)(v10 + 40);
  char v14 = *(unsigned char *)(v10 + 41);
  char v15 = *(unsigned char *)(v10 + 42);
  long long v16 = *(_OWORD *)(v10 + 16);
  v19[0] = *(_OWORD *)v10;
  v19[1] = v16;
  uint64_t v20 = v12;
  char v21 = v13;
  char v22 = v14;
  char v23 = v15;
  a3(v11, *(double *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
  objc_super v17 = (void *)sub_1AD9DC8B0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v17;
}

void sub_1AD8F5D90()
{
  id v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track];
  uint64_t v3 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  id v4 = *(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 16];
  id v5 = objc_msgSend(v1, sel_traitCollection);
  id v6 = objc_msgSend(v4, sel_resolvedColorWithTraitCollection_, v5);
  id v7 = objc_msgSend(v6, sel_CGColor);

  objc_msgSend(v2, sel_setStrokeColor_, v7);
  uint64_t v8 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  long long v25 = *(_OWORD *)(v8 + 27);
  if (BYTE13(v25)) {
    goto LABEL_7;
  }
  double v9 = *((double *)v3 + 18);
  if (HIBYTE(v25)) {
    sub_1AD8F956C();
  }
  else {
    sub_1AD8944E8();
  }
  if (*(double *)((char *)&v25 + 5) <= v9 * round(v10 / v9))
  {
LABEL_7:
    int v11 = 1;
    uint64_t v12 = (id *)v3;
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = (id *)(v3 + 8);
  }
  char v13 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring];
  id v14 = *v12;
  id v15 = objc_msgSend(v1, sel_traitCollection);
  id v16 = objc_msgSend(v14, sel_resolvedColorWithTraitCollection_, v15);
  id v17 = objc_msgSend(v16, sel_CGColor);

  objc_msgSend(v13, sel_setFillColor_, v17);
  id v18 = objc_msgSend(*((id *)v3 + 5), sel_CGColor);
  objc_msgSend(v13, sel_setShadowColor_, v18);

  uint64_t v19 = 32;
  if (v11) {
    uint64_t v19 = 24;
  }
  uint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
  id v21 = *(id *)&v3[v19];
  id v22 = objc_msgSend(v1, sel_traitCollection);
  id v23 = objc_msgSend(v21, sel_resolvedColorWithTraitCollection_, v22);
  id v24 = objc_msgSend(v23, sel_CGColor);

  objc_msgSend(*(id *)(v20 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture), sel_setStrokeColor_, v24);
}

id sub_1AD8F6060()
{
  objc_msgSend(v0, sel_bounds);
  CGFloat x = v41.origin.x;
  CGFloat y = v41.origin.y;
  CGFloat width = v41.size.width;
  CGFloat height = v41.size.height;
  double MidX = CGRectGetMidX(v41);
  v42.origin.CGFloat x = x;
  v42.origin.CGFloat y = y;
  v42.size.CGFloat width = width;
  v42.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v42);
  id v7 = (double *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  double v8 = *(double *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72] * 0.5
     - *(double *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80];
  double v9 = (uint64_t *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  double v10 = sub_1AD8A4A2C(*v9, v9[1]);
  double v11 = sub_1AD8A4A2C(v9[2], v9[3]);
  id v12 = objc_msgSend(self, sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, MidX, MidY, v8, v10, v11);
  double v40 = sub_1AD8A4A2C(v9[2], v9[3]);
  double v14 = v7[9];
  double v13 = v7[10];
  double v15 = v7[11];
  objc_msgSend(v0, sel_bounds);
  double v16 = CGRectGetMidX(v43);
  objc_msgSend(v0, sel_bounds);
  double v17 = CGRectGetMidY(v44);
  double v18 = v7[11];
  if (qword_1E9A48EB8 != -1) {
    swift_once();
  }
  double v19 = *(double *)&qword_1E9A5A6F8;
  if (qword_1E9A48EC0 != -1) {
    swift_once();
  }
  double v20 = v14 * 0.5 - (v13 + v15 * 0.5);
  __double2 v21 = __sincos_stret(v40);
  double v22 = v21.__sinval * v20 + v17;
  double v23 = v16 + v21.__cosval * v20;
  double v24 = *(double *)&qword_1E9A5A700;
  objc_msgSend(v12, sel_addArcWithCenter_radius_startAngle_endAngle_clockwise_, 1, v23, v22, v18 * 0.5, v19, *(double *)&qword_1E9A5A700);
  objc_msgSend(v0, sel_bounds);
  CGFloat v25 = v45.origin.x;
  CGFloat v26 = v45.origin.y;
  CGFloat v27 = v45.size.width;
  CGFloat v28 = v45.size.height;
  double v29 = CGRectGetMidX(v45);
  v46.origin.CGFloat x = v25;
  v46.origin.CGFloat y = v26;
  v46.size.CGFloat width = v27;
  v46.size.CGFloat height = v28;
  double v30 = CGRectGetMidY(v46);
  double v31 = v7[9] * 0.5 - v7[10] - v7[11];
  double v32 = sub_1AD8A4A2C(v9[2], v9[3]);
  objc_msgSend(v12, sel_addArcWithCenter_radius_startAngle_endAngle_clockwise_, 0, v29, v30, v31, v32, sub_1AD8A4A2C(*v9, v9[1]));
  double v33 = sub_1AD8A4A2C(*v9, v9[1]);
  double v34 = v7[9] * 0.5 - (v7[10] + v7[11] * 0.5);
  __double2 v35 = __sincos_stret(v33);
  double v36 = v35.__sinval * v34;
  objc_msgSend(v0, sel_bounds);
  CGFloat v37 = CGRectGetMidX(v47) + v35.__cosval * v34;
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v12, sel_addArcWithCenter_radius_startAngle_endAngle_clockwise_, 1, v37, v36 + CGRectGetMidY(v48), v7[11] * 0.5, *(double *)&qword_1E9A5A6F8, v24);
  objc_msgSend(v12, sel_closePath);
  id v38 = objc_msgSend(v12, sel_CGPath);

  return v38;
}

void sub_1AD8F63C4(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  switch((unint64_t)objc_msgSend(a1, sel_state))
  {
    case 0uLL:
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v4 = sub_1AD9DD550();
      __swift_project_value_buffer(v4, (uint64_t)qword_1EB725958);
      oslog = sub_1AD9DD530();
      os_log_type_t v5 = sub_1AD9DFBB0();
      if (!os_log_type_enabled(oslog, v5)) {
        goto LABEL_33;
      }
      id v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v36 = v7;
      *(_DWORD *)id v6 = 136446210;
      uint64_t v8 = sub_1AD9E04F0();
      sub_1AD838978(v8, v9, &v36);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      double v10 = "[%{public}s] Gesture is possible";
      goto LABEL_32;
    case 1uLL:
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_1AD9DD550();
      __swift_project_value_buffer(v14, (uint64_t)qword_1EB725958);
      double v15 = sub_1AD9DD530();
      os_log_type_t v16 = sub_1AD9DFBB0();
      if (os_log_type_enabled(v15, v16))
      {
        double v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        uint64_t v36 = v18;
        *(_DWORD *)double v17 = 136446210;
        uint64_t v19 = sub_1AD9E04F0();
        sub_1AD838978(v19, v20, &v36);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v15, v16, "[%{public}s] Gesture began", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v18, -1, -1);
        MEMORY[0x1B3E6D1A0](v17, -1, -1);
      }

      objc_msgSend(v2, sel_gestureRecognizerDidStart_, a1);
      return;
    case 2uLL:
      objc_msgSend(v1, sel_gestureRecognizerDidMove_, a1);
      return;
    case 3uLL:
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v21 = sub_1AD9DD550();
      __swift_project_value_buffer(v21, (uint64_t)qword_1EB725958);
      double v22 = sub_1AD9DD530();
      os_log_type_t v23 = sub_1AD9DFBB0();
      if (!os_log_type_enabled(v22, v23)) {
        goto LABEL_27;
      }
      double v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v36 = v25;
      *(_DWORD *)double v24 = 136446210;
      uint64_t v26 = sub_1AD9E04F0();
      sub_1AD838978(v26, v27, &v36);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      CGFloat v28 = "[%{public}s] Gesture ended";
      goto LABEL_26;
    case 4uLL:
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v29 = sub_1AD9DD550();
      __swift_project_value_buffer(v29, (uint64_t)qword_1EB725958);
      double v22 = sub_1AD9DD530();
      os_log_type_t v23 = sub_1AD9DFBB0();
      if (!os_log_type_enabled(v22, v23)) {
        goto LABEL_27;
      }
      double v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v36 = v25;
      *(_DWORD *)double v24 = 136446210;
      uint64_t v30 = sub_1AD9E04F0();
      sub_1AD838978(v30, v31, &v36);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      CGFloat v28 = "[%{public}s] Gesture cancelled";
LABEL_26:
      _os_log_impl(&dword_1AD834000, v22, v23, v28, v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v25, -1, -1);
      MEMORY[0x1B3E6D1A0](v24, -1, -1);
LABEL_27:

      objc_msgSend(v2, sel_gestureRecognizerDidEnd_, a1);
      return;
    case 5uLL:
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v32 = sub_1AD9DD550();
      __swift_project_value_buffer(v32, (uint64_t)qword_1EB725958);
      oslog = sub_1AD9DD530();
      os_log_type_t v5 = sub_1AD9DFBB0();
      if (!os_log_type_enabled(oslog, v5)) {
        goto LABEL_33;
      }
      id v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v36 = v7;
      *(_DWORD *)id v6 = 136446210;
      uint64_t v33 = sub_1AD9E04F0();
      sub_1AD838978(v33, v34, &v36);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      double v10 = "[%{public}s] Gesture failed";
      goto LABEL_32;
    default:
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v11 = sub_1AD9DD550();
      __swift_project_value_buffer(v11, (uint64_t)qword_1EB725958);
      oslog = sub_1AD9DD530();
      os_log_type_t v5 = sub_1AD9DFBC0();
      if (os_log_type_enabled(oslog, v5))
      {
        id v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v7 = swift_slowAlloc();
        uint64_t v36 = v7;
        *(_DWORD *)id v6 = 136446210;
        uint64_t v12 = sub_1AD9E04F0();
        sub_1AD838978(v12, v13, &v36);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        double v10 = "[%{public}s] Unknown gesture state";
LABEL_32:
        _os_log_impl(&dword_1AD834000, oslog, v5, v10, v6, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v7, -1, -1);
        MEMORY[0x1B3E6D1A0](v6, -1, -1);
      }
      else
      {
LABEL_33:
      }
      return;
  }
}

Swift::Bool __swiftcall SleepScheduleClock.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(UIGestureRecognizer _, UIGestureRecognizer shouldRecognizeSimultaneouslyWith)
{
  uint64_t v3 = v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState;
  swift_beginAccess();
  return *(void *)(v3 + 40) == 0;
}

Swift::Bool __swiftcall SleepScheduleClock.gestureRecognizer(_:shouldReceive:)(UIGestureRecognizer _, UITouch shouldReceive)
{
  [(objc_class *)shouldReceive.super.isa locationInView:v2];
  double v4 = v3;
  double v6 = v5;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand), sel_frame);
  v9.CGFloat x = v4;
  v9.CGFloat y = v6;
  if (CGRectContainsPoint(v11, v9)) {
    return 1;
  }
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand), sel_frame);
  v10.CGFloat x = v4;
  v10.CGFloat y = v6;
  if (CGRectContainsPoint(v12, v10)) {
    return 1;
  }
  return sub_1AD8F6D68(v4, v6);
}

BOOL sub_1AD8F6D68(double a1, double a2)
{
  double v3 = v2;
  swift_getObjectType();
  double v6 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 88] * 0.5;
  double v7 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72] * 0.5
     - (v6
      + *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80]);
  double v8 = v7 - v6;
  double v9 = v6 + v7;
  if (v7 - v6 > v6 + v7)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_9;
  }
  objc_msgSend(v2, sel_bounds);
  double v10 = a1 - CGRectGetMidX(v38);
  objc_msgSend(v2, sel_bounds);
  CGFloat MidY = CGRectGetMidY(v39);
  double v12 = sqrt(v10 * v10 + (a2 - MidY) * (a2 - MidY));
  if (v8 > v12 || v12 > v9) {
    return 0;
  }
  a2 = sub_1AD8F786C(a1, a2);
  if (qword_1EB725658 != -1) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v15 = sub_1AD9DD550();
  __swift_project_value_buffer(v15, (uint64_t)qword_1EB725958);
  os_log_type_t v16 = sub_1AD9DD530();
  os_log_type_t v17 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(void *)&v32[0] = v19;
    *(_DWORD *)uint64_t v18 = 136446466;
    uint64_t v20 = sub_1AD9E04F0();
    uint64_t v37 = sub_1AD838978(v20, v21, (uint64_t *)v32);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    sub_1AD8FA3D8(0, (unint64_t *)&qword_1E9A4A978, (unint64_t *)&qword_1E9A4BAE0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1AD9E3070;
    *(void *)(v22 + 56) = MEMORY[0x1E4FBC958];
    *(void *)(v22 + 64) = sub_1AD8FA440();
    *(double *)(v22 + 32) = a2 / 3.14159265;
    uint64_t v23 = sub_1AD9DF720();
    uint64_t v37 = sub_1AD838978(v23, v24, (uint64_t *)v32);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v16, v17, "[%{public}s] Checking angle: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v19, -1, -1);
    MEMORY[0x1B3E6D1A0](v18, -1, -1);
  }

  uint64_t v25 = &v3[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  uint64_t v26 = *((void *)v25 + 4);
  char v27 = v25[40];
  char v28 = v25[41];
  char v29 = v25[42];
  long long v30 = *((_OWORD *)v25 + 1);
  v32[0] = *(_OWORD *)v25;
  v32[1] = v30;
  uint64_t v33 = v26;
  char v34 = v27;
  char v35 = v28;
  char v36 = v29;
  return sub_1AD94C2B8(a2);
}

uint64_t sub_1AD8F71A8(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = sub_1AD9E02A0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  double v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, sel_locationInView_, v2);
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  double v13 = sub_1AD8F786C(v9, v11);
  uint64_t v14 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand];
  objc_msgSend(v14, sel_frame);
  v55.CGFloat x = v10;
  v55.CGFloat y = v12;
  if (CGRectContainsPoint(v57, v55))
  {
    uint64_t v15 = (uint64_t *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
    swift_beginAccess();
    double v16 = sub_1AD8A4A2C(*v15, v15[1]);
    uint64_t v17 = 1;
    objc_msgSend(v14, sel_setHighlighted_, 1);
    uint64_t v18 = *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
    double v19 = sub_1AD8A4A2C(*v15, v15[1]);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FBBEA8], v4);
    double v20 = sub_1AD8F8C04();
    double v21 = sub_1AD8F8990((uint64_t)v8, v20, v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v22 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset;
    *(long double *)(v18 + v22) = fmod(v21- v19+ *(double *)(v18+ OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset), *(long double *)(v18+ OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle));
    *(unsigned char *)(v18 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted) = 1;
  }
  else
  {
    uint64_t v23 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand];
    objc_msgSend(v23, sel_frame);
    v56.CGFloat x = v10;
    v56.CGFloat y = v12;
    BOOL v24 = CGRectContainsPoint(v58, v56);
    uint64_t v25 = (uint64_t *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
    if (v24)
    {
      swift_beginAccess();
      double v16 = sub_1AD8A4A2C(v25[2], v25[3]);
      objc_msgSend(v23, sel_setHighlighted_, 1);
      uint64_t v17 = 2;
    }
    else
    {
      swift_beginAccess();
      double v16 = sub_1AD8A4A2C(*v25, v25[1]);
      uint64_t v17 = 0;
    }
  }
  CFTimeInterval v26 = CACurrentMediaTime();
  id v27 = objc_msgSend(self, sel_functionWithName_, *MEMORY[0x1E4F3A490]);
  char v28 = &v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  swift_beginAccess();
  char v29 = (void *)*((void *)v28 + 5);
  *(void *)char v28 = v17;
  *((double *)v28 + 1) = v13;
  *((CFTimeInterval *)v28 + 2) = v26;
  *((double *)v28 + 3) = v16;
  *((void *)v28 + 4) = 0;
  *((void *)v28 + 5) = v27;

  uint64_t v30 = sub_1AD94BE0C(v13);
  uint64_t v32 = v31;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_1AD9DD550();
  __swift_project_value_buffer(v33, (uint64_t)qword_1EB725958);
  char v34 = sub_1AD9DD530();
  os_log_type_t v35 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v53[0] = v37;
    *(_DWORD *)uint64_t v36 = 136446978;
    uint64_t v38 = sub_1AD9E04F0();
    v50[0] = sub_1AD838978(v38, v39, v53);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    sub_1AD8FA3D8(0, (unint64_t *)&qword_1E9A4A978, (unint64_t *)&qword_1E9A4BAE0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1AD9E3070;
    *(void *)(v40 + 56) = MEMORY[0x1E4FBC958];
    *(void *)(v40 + 64) = sub_1AD8FA440();
    *(double *)(v40 + 32) = v13 / 3.14159265;
    uint64_t v41 = sub_1AD9DF720();
    v50[0] = sub_1AD838978(v41, v42, v53);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 22) = 2048;
    v50[0] = v30;
    sub_1AD9DFEA0();
    *(_WORD *)(v36 + 32) = 2048;
    v50[0] = v32;
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v34, v35, "[%{public}s] Did start dragging at %s, or %ld:%ld", (uint8_t *)v36, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v37, -1, -1);
    MEMORY[0x1B3E6D1A0](v36, -1, -1);
  }

  objc_msgSend(v2, sel_sendActionsForControlEvents_, 0x10000);
  uint64_t v43 = (uint64_t)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator];
  swift_beginAccess();
  sub_1AD8FA2C0(v43, (uint64_t)v53);
  if (v54)
  {
    sub_1AD841030((uint64_t)v53, (uint64_t)v50);
    sub_1AD8FA350((uint64_t)v53);
    uint64_t v44 = v51;
    uint64_t v45 = v52;
    __swift_project_boxed_opaque_existential_1Tm(v50, v51);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  }
  else
  {
    sub_1AD8FA350((uint64_t)v53);
  }
  uint64_t v46 = (uint64_t)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator];
  swift_beginAccess();
  sub_1AD8FA2C0(v46, (uint64_t)v53);
  if (!v54) {
    return sub_1AD8FA350((uint64_t)v53);
  }
  sub_1AD841030((uint64_t)v53, (uint64_t)v50);
  sub_1AD8FA350((uint64_t)v53);
  uint64_t v47 = v51;
  uint64_t v48 = v52;
  __swift_project_boxed_opaque_existential_1Tm(v50, v51);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v48);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
}

double sub_1AD8F786C(double a1, double a2)
{
  objc_msgSend(v2, sel_bounds);
  long double v5 = a1 - CGRectGetMidX(v11);
  objc_msgSend(v2, sel_bounds);
  CGFloat MidY = CGRectGetMidY(v12);
  double v7 = atan2(a2 - MidY, v5);
  if (qword_1E9A48EB8 != -1) {
    swift_once();
  }
  double v8 = *(double *)&qword_1E9A5A6F8;
  if (qword_1E9A48EC0 != -1) {
    swift_once();
  }
  for (i = *(double *)&qword_1E9A5A700 - v8; v7 < v8; double v7 = i + v7)
    ;
  while (*(double *)&qword_1E9A5A700 <= v7)
    double v7 = v7 - i;
  return v7;
}

void sub_1AD8F79D4(void *a1)
{
  uint64_t v2 = v1;
  objc_msgSend(a1, sel_locationInView_, v1);
  double v4 = v3;
  double v6 = v5;
  double v7 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  uint64_t v9 = *(void *)v7;
  uint64_t v8 = *((void *)v7 + 1);
  uint64_t v10 = *((void *)v7 + 2);
  uint64_t v11 = *((void *)v7 + 3);
  uint64_t v40 = *((void *)v7 + 4);
  char v41 = v7[40];
  char v42 = v7[41];
  char v43 = v7[42];
  CGRect v12 = sub_1AD8F4430();
  if (*(void *)(v14 + 40))
  {
    double v15 = sub_1AD8F786C(v4, v6);
    objc_msgSend(v1, sel_bounds);
    double v16 = v4 - CGRectGetMidX(v57);
    objc_msgSend(v1, sel_bounds);
    CGFloat MidY = CGRectGetMidY(v58);
    v13.n128_f64[0] = sub_1AD8DF738(v15, sqrt(v16 * v16 + (v6 - MidY) * (v6 - MidY))/ (*(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72]* 0.5));
  }
  ((void (*)(long long *, void, __n128))v12)(&v55, 0, v13);
  uint64_t v18 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  swift_beginAccess();
  double v19 = (void *)*((void *)v18 + 5);
  if (v19)
  {
    double v20 = *((double *)v18 + 3);
    if (*v18)
    {
      if (*v18 == 1)
      {
        double v21 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152];
        double v22 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160];
        id v39 = v19;
        sub_1AD94BFE0(v20, v21, v22);
        sub_1AD8F3DFC();
        objc_msgSend(v2, sel_sendActionsForControlEvents_, 0x20000);
        *(void *)&long long v55 = v9;
        *((void *)&v55 + 1) = v8;
        *(void *)CGPoint v56 = v10;
        *(void *)&v56[8] = v11;
        *(void *)&v56[16] = v40;
        v56[24] = v41;
        v56[25] = v42;
        v56[26] = v43;
        if ((sub_1AD8F7FB4((uint64_t)&v55, (void (*)(uint64_t, double))sub_1AD94B060) & 1) == 0)
        {
          *(void *)&long long v55 = v9;
          *((void *)&v55 + 1) = v8;
          *(void *)CGPoint v56 = v10;
          *(void *)&v56[8] = v11;
          *(void *)&v56[16] = v40;
          v56[24] = v41;
          v56[25] = v42;
          v56[26] = v43;
          if ((sub_1AD8F8234((uint64_t)&v55) & 1) == 0) {
            goto LABEL_25;
          }
LABEL_17:
          uint64_t v35 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator;
LABEL_18:
          uint64_t v36 = (uint64_t)&v2[v35];
          swift_beginAccess();
          sub_1AD8FA2C0(v36, (uint64_t)&v55);
          if (*(void *)&v56[8])
          {
            sub_1AD841030((uint64_t)&v55, (uint64_t)&v47);
            sub_1AD8FA350((uint64_t)&v55);
            uint64_t v37 = v50;
            uint64_t v38 = v51;
            __swift_project_boxed_opaque_existential_1Tm(&v47, v50);
            (*(void (**)(uint64_t, uint64_t))(v38 + 16))(v37, v38);

            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v47);
          }
          else
          {

            sub_1AD8FA350((uint64_t)&v55);
          }
          return;
        }
      }
      else
      {
        double v32 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152];
        double v33 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160];
        id v39 = v19;
        *((void *)v7 + 2) = sub_1AD94BE0C(v20);
        *((void *)v7 + 3) = v34;
        sub_1AD94CA30(v32, v33);
        sub_1AD8F3DFC();
        objc_msgSend(v2, sel_sendActionsForControlEvents_, 0x20000);
        *(void *)&long long v55 = v9;
        *((void *)&v55 + 1) = v8;
        *(void *)CGPoint v56 = v10;
        *(void *)&v56[8] = v11;
        *(void *)&v56[16] = v40;
        v56[24] = v41;
        v56[25] = v42;
        v56[26] = v43;
        if ((sub_1AD8F7FB4((uint64_t)&v55, (void (*)(uint64_t, double))sub_1AD94B2E4) & 1) == 0)
        {
          *(void *)&long long v55 = v9;
          *((void *)&v55 + 1) = v8;
          *(void *)CGPoint v56 = v10;
          *(void *)&v56[8] = v11;
          *(void *)&v56[16] = v40;
          v56[24] = v41;
          v56[25] = v42;
          v56[26] = v43;
          if ((sub_1AD8F8408((uint64_t)&v55) & 1) == 0)
          {
LABEL_25:

            return;
          }
          goto LABEL_17;
        }
      }
      uint64_t v35 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator;
      goto LABEL_18;
    }
    long long v23 = *((_OWORD *)v7 + 1);
    long long v55 = *(_OWORD *)v7;
    *(_OWORD *)CGPoint v56 = v23;
    *(_OWORD *)&v56[11] = *(_OWORD *)(v7 + 27);
    unint64_t v24 = sub_1AD94C3E0();
    uint64_t v26 = v25;
    id v39 = v19;
    *(void *)double v7 = sub_1AD94BE0C(v20);
    *((void *)v7 + 1) = v27;
    sub_1AD94CC50(v24, v26);
    sub_1AD8F3DFC();
    objc_msgSend(v2, sel_sendActionsForControlEvents_, 0x20000);
    uint64_t v47 = v9;
    uint64_t v48 = v8;
    uint64_t v49 = v10;
    uint64_t v50 = v11;
    uint64_t v51 = v40;
    char v52 = v41;
    char v53 = v42;
    char v54 = v43;
    if (sub_1AD8F7FB4((uint64_t)&v47, (void (*)(uint64_t, double))sub_1AD94B060)) {
      goto LABEL_11;
    }
    uint64_t v47 = v9;
    uint64_t v48 = v8;
    uint64_t v49 = v10;
    uint64_t v50 = v11;
    uint64_t v51 = v40;
    char v52 = v41;
    char v53 = v42;
    char v54 = v43;
    if (sub_1AD8F7FB4((uint64_t)&v47, (void (*)(uint64_t, double))sub_1AD94B2E4))
    {
LABEL_11:
      uint64_t v28 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator;
    }
    else
    {
      uint64_t v47 = v9;
      uint64_t v48 = v8;
      uint64_t v49 = v10;
      uint64_t v50 = v11;
      uint64_t v51 = v40;
      char v52 = v41;
      char v53 = v42;
      char v54 = v43;
      if ((sub_1AD8F8234((uint64_t)&v47) & 1) == 0)
      {
        uint64_t v47 = v9;
        uint64_t v48 = v8;
        uint64_t v49 = v10;
        uint64_t v50 = v11;
        uint64_t v51 = v40;
        char v52 = v41;
        char v53 = v42;
        char v54 = v43;
        if ((sub_1AD8F8408((uint64_t)&v47) & 1) == 0) {
          goto LABEL_25;
        }
      }
      uint64_t v28 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator;
    }
    uint64_t v29 = (uint64_t)&v2[v28];
    swift_beginAccess();
    sub_1AD8FA2C0(v29, (uint64_t)&v47);
    if (v50)
    {
      sub_1AD841030((uint64_t)&v47, (uint64_t)v44);
      sub_1AD8FA350((uint64_t)&v47);
      uint64_t v30 = v45;
      uint64_t v31 = v46;
      __swift_project_boxed_opaque_existential_1Tm(v44, v45);
      (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v44);
    }
    else
    {

      sub_1AD8FA350((uint64_t)&v47);
    }
  }
}

uint64_t sub_1AD8F7FB4(uint64_t a1, void (*a2)(uint64_t, double))
{
  uint64_t v4 = v2;
  uint64_t v6 = sub_1AD9DC990();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v9, v12);
  double v15 = (char *)&v44 - v14;
  uint64_t v16 = *(void *)(a1 + 32);
  char v17 = *(unsigned char *)(a1 + 40);
  char v18 = *(unsigned char *)(a1 + 41);
  char v19 = *(unsigned char *)(a1 + 42);
  long long v20 = *(_OWORD *)(a1 + 16);
  v46[0] = *(_OWORD *)a1;
  v46[1] = v20;
  *(void *)&v46[2] = v16;
  BYTE8(v46[2]) = v17;
  BYTE9(v46[2]) = v18;
  BYTE10(v46[2]) = v19;
  double v21 = (double *)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration);
  a2(v13, *(double *)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
  uint64_t v22 = v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  uint64_t v23 = swift_beginAccess();
  uint64_t v24 = *(void *)(v22 + 32);
  char v25 = *(unsigned char *)(v22 + 40);
  char v26 = *(unsigned char *)(v22 + 41);
  char v27 = *(unsigned char *)(v22 + 42);
  long long v28 = *(_OWORD *)(v22 + 16);
  v46[0] = *(_OWORD *)v22;
  v46[1] = v28;
  *(void *)&v46[2] = v24;
  BYTE8(v46[2]) = v25;
  BYTE9(v46[2]) = v26;
  BYTE10(v46[2]) = v27;
  a2(v23, v21[18]);
  uint64_t v29 = sub_1AD9DC8F0();
  if ((v30 & 1) != 0
    || (uint64_t v31 = v29, v32 = sub_1AD9DC940(), (v33 & 1) != 0)
    || (uint64_t v34 = v32, v35 = sub_1AD9DC8F0(), (v36 & 1) != 0)
    || (v45 = v35, uint64_t v37 = sub_1AD9DC940(), (v38 & 1) != 0))
  {
    char v41 = 0;
  }
  else
  {
    uint64_t v44 = v37;
    memcpy(v46, v21, 0x188uLL);
    uint64_t v39 = v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState;
    swift_beginAccess();
    if (*(void *)(v39 + 40)) {
      double v40 = *(double *)(v39 + 32);
    }
    else {
      double v40 = 0.0;
    }
    sub_1AD897340((uint64_t)v46);
    char v41 = sub_1AD96D544(v31, v34, v45, v44, v40);
    sub_1AD89742C((uint64_t)v46);
  }
  char v42 = *(void (**)(char *, uint64_t))(v7 + 8);
  v42(v11, v6);
  v42(v15, v6);
  return v41 & 1;
}

uint64_t sub_1AD8F8234(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  double v3 = *(double *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144) / 60.0;
  double v4 = v3 * round((double)*(uint64_t *)(result + 8) / v3);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0) {
    goto LABEL_19;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  double v5 = *(double *)(v2 + 176);
  uint64_t v6 = *(void *)(v2 + 192);
  uint64_t v7 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  uint64_t result = swift_beginAccess();
  double v8 = v3 * round((double)*(uint64_t *)(v7 + 8) / v3);
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v9 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState;
  uint64_t result = swift_beginAccess();
  if (*(void *)(v9 + 40))
  {
    double v10 = *(double *)(v9 + 32);
    if (v6) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v10 = 0.0;
  if (!v6)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v11 = (uint64_t)v8 % 60;
  if (v11 == (uint64_t)v4 % 60) {
    return 0;
  }
  uint64_t v12 = v11 % v6;
  return fabs(v10) < v5 && v12 == 0;
}

uint64_t sub_1AD8F8408(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  double v3 = *(double *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144) / 60.0;
  double v4 = v3 * round((double)*(uint64_t *)(result + 24) / v3);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0) {
    goto LABEL_19;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  double v5 = *(double *)(v2 + 176);
  uint64_t v6 = *(void *)(v2 + 192);
  uint64_t v7 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  uint64_t result = swift_beginAccess();
  double v8 = v3 * round((double)*(uint64_t *)(v7 + 24) / v3);
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v9 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState;
  uint64_t result = swift_beginAccess();
  if (*(void *)(v9 + 40))
  {
    double v10 = *(double *)(v9 + 32);
    if (v6) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v10 = 0.0;
  if (!v6)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v11 = (uint64_t)v8 % 60;
  if (v11 == (uint64_t)v4 % 60) {
    return 0;
  }
  uint64_t v12 = v11 % v6;
  return fabs(v10) < v5 && v12 == 0;
}

double sub_1AD8F87DC(double a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double v7 = a1;
  double Width = CGRectGetWidth(*(CGRect *)&a1);
  v14.origin.CGFloat x = v7;
  v14.origin.CGFloat y = a2;
  v14.size.CGFloat width = a3;
  v14.size.CGFloat height = a4;
  if (CGRectGetHeight(v14) >= Width)
  {
    v20.origin.CGFloat x = v7;
    v20.origin.CGFloat y = a2;
    v20.size.CGFloat width = a3;
    v20.size.CGFloat height = a4;
    double v12 = CGRectGetWidth(v20);
    v21.origin.CGFloat x = v7;
    v21.origin.CGFloat y = a2;
    v21.size.CGFloat width = a3;
    v21.size.CGFloat height = a4;
    if (v12 < CGRectGetHeight(v21))
    {
      v22.origin.CGFloat x = v7;
      v22.origin.CGFloat y = a2;
      v22.size.CGFloat width = a3;
      v22.size.CGFloat height = a4;
      CGRectGetMaxY(v22);
      v23.origin.CGFloat x = v7;
      v23.origin.CGFloat y = a2;
      v23.size.CGFloat width = a3;
      v23.size.CGFloat height = a4;
      CGRectGetMinY(v23);
      v24.origin.CGFloat x = v7;
      v24.origin.CGFloat y = a2;
      v24.size.CGFloat width = a3;
      v24.size.CGFloat height = a4;
      CGRectGetWidth(v24);
      v25.origin.CGFloat x = v7;
      v25.origin.CGFloat y = a2;
      v25.size.CGFloat width = a3;
      v25.size.CGFloat height = a4;
      CGRectGetWidth(v25);
      v26.origin.CGFloat x = v7;
      v26.origin.CGFloat y = a2;
      v26.size.CGFloat width = a3;
      v26.size.CGFloat height = a4;
      CGRectGetWidth(v26);
    }
  }
  else
  {
    v15.origin.CGFloat x = v7;
    v15.origin.CGFloat y = a2;
    v15.size.CGFloat width = a3;
    v15.size.CGFloat height = a4;
    double MaxX = CGRectGetMaxX(v15);
    v16.origin.CGFloat x = v7;
    v16.origin.CGFloat y = a2;
    v16.size.CGFloat width = a3;
    v16.size.CGFloat height = a4;
    double v10 = MaxX - CGRectGetMinX(v16);
    v17.origin.CGFloat x = v7;
    v17.origin.CGFloat y = a2;
    v17.size.CGFloat width = a3;
    v17.size.CGFloat height = a4;
    double v11 = (v10 - CGRectGetHeight(v17)) * 0.5;
    v18.origin.CGFloat x = v7;
    v18.origin.CGFloat y = a2;
    v18.size.CGFloat width = a3;
    v18.size.CGFloat height = a4;
    CGRectGetHeight(v18);
    v19.origin.CGFloat x = v7;
    v19.origin.CGFloat y = a2;
    v19.size.CGFloat width = a3;
    v19.size.CGFloat height = a4;
    CGRectGetHeight(v19);
    return v11;
  }
  return v7;
}

double sub_1AD8F8990(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = sub_1AD9E02A0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  double v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = a3 / a2;
  double v17 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v12 == *MEMORY[0x1E4FBBEA0])
  {
    double v13 = round(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBE98])
  {
    double v13 = rint(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBEA8])
  {
    double v13 = ceil(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBEB0])
  {
    double v13 = floor(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBE88])
  {
    double v13 = trunc(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBE90])
  {
    double v13 = ceil(v11);
    double v14 = floor(v11);
    if (v11 < 0.0) {
      double v13 = v14;
    }
  }
  else
  {
    sub_1AD9DF970();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    double v13 = v17;
  }
  return v13 * a2;
}

uint64_t sub_1AD8F8B78()
{
  uint64_t v1 = (unsigned char *)(v0
               + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances);
  if (*(unsigned char *)(v0
                + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances
                + 8) != 1)
    return *(void *)v1;
  double v2 = 86400.0
     / *(double *)(v0 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_tickInterval);
  if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -9.22337204e18)
    {
      if (v2 < 9.22337204e18)
      {
        uint64_t result = (uint64_t)v2;
        *(void *)uint64_t v1 = (uint64_t)v2;
        v1[8] = 0;
        return result;
      }
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

double sub_1AD8F8C04()
{
  uint64_t v1 = (unsigned char *)(v0
               + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle);
  if ((*(unsigned char *)(v0
                 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle
                 + 8) & 1) == 0)
    return *(double *)v1;
  double result = 6.28318531 / (double)sub_1AD8F8B78();
  *(double *)uint64_t v1 = result;
  v1[8] = 0;
  return result;
}

char *sub_1AD8F8C58(double a1, double a2)
{
  uint64_t v5 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture;
  id v6 = objc_allocWithZone(MEMORY[0x1E4F39C88]);
  uint64_t v7 = v2;
  *(void *)&v2[v5] = objc_msgSend(v6, sel_init);
  v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted] = 0;
  *(void *)&v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset] = 0;
  *(void *)&v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_tickInterval] = 0x4082C00000000000;
  uint64_t v8 = &v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  uint64_t v9 = &v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  double v10 = (double *)&v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration];
  *double v10 = a1;
  v10[1] = a2;

  v18.receiver = v7;
  v18.super_class = (Class)type metadata accessor for RingGrabber();
  double v11 = (char *)objc_msgSendSuper2(&v18, sel_init);
  int v12 = *(void **)&v11[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture];
  double v13 = v11;
  objc_msgSend(v13, sel_addSublayer_, v12);
  objc_msgSend(v12, sel_setLineCap_, *MEMORY[0x1E4F3A458]);
  objc_msgSend(v12, sel_setFillColor_, 0);
  double v14 = sub_1AD8F8C04();
  CGRect v15 = v13;
  CATransform3DMakeRotation(&v17, v14, 0.0, 0.0, 1.0);
  objc_msgSend(v15, sel_setInstanceTransform_, &v17);

  return v15;
}

id sub_1AD8F8E0C(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture;
  id v4 = objc_allocWithZone(MEMORY[0x1E4F39C88]);
  uint64_t v5 = v1;
  *(void *)&v1[v3] = objc_msgSend(v4, sel_init);
  v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted] = 0;
  *(void *)&v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset] = 0;
  *(void *)&v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_tickInterval] = 0x4082C00000000000;
  id v6 = &v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances];
  *(void *)id v6 = 0;
  v6[8] = 1;
  uint64_t v7 = &v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = &v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;

  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  uint64_t v9 = sub_1AD9E02B0();
  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for RingGrabber();
  id v10 = objc_msgSendSuper2(&v12, sel_initWithLayer_, v9);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v10;
}

void sub_1AD8F8FB0()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v16);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Layout sublayers", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture];
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v9, sel_setFrame_);
  id v10 = (double *)&v1[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration];
  objc_msgSend(v9, sel_setLineWidth_, *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration + 8]);
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14C0]), sel_init);
  double v12 = v10[1] * 0.5;
  objc_msgSend(v1, sel_bounds);
  CGFloat v13 = CGRectGetMaxX(v17) - v12;
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v11, sel_moveToPoint_, v13, CGRectGetMidY(v18));
  objc_msgSend(v1, sel_bounds);
  double v14 = v12 + CGRectGetMaxX(v19) - *v10;
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v11, sel_addLineToPoint_, v14, CGRectGetMidY(v20));
  id v15 = objc_msgSend(v11, sel_CGPath);
  objc_msgSend(v9, sel_setPath_, v15);
}

id sub_1AD8F92B8(double a1, double a2)
{
  uint64_t v5 = sub_1AD9E02A0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted] == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4FBBEA8], v5);
    double v10 = sub_1AD8F8C04();
    a1 = sub_1AD8F8990((uint64_t)v9, v10, a1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  CATransform3DMakeRotation(&v13, a1- *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset], 0.0, 0.0, 1.0);
  objc_msgSend(v2, sel_setTransform_, &v13);
  id result = (id)sub_1AD8F8B78();
  double v12 = floor(a2 / 60.0 / 60.0 / 24.0 * (double)(uint64_t)result);
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v12 < 9.22337204e18) {
    return objc_msgSend(v2, sel_setInstanceCount_, (uint64_t)v12);
  }
LABEL_9:
  __break(1u);
  return result;
}

id sub_1AD8F94D8()
{
  return sub_1AD8F94F4(0, type metadata accessor for RingGrabber);
}

id sub_1AD8F94F4(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

id sub_1AD8F953C()
{
  return objc_msgSend(*v0, sel_userInteractionStarted);
}

id sub_1AD8F954C()
{
  return objc_msgSend(*v0, sel_selectionChanged);
}

id sub_1AD8F955C()
{
  return objc_msgSend(*v0, sel_userInteractionEnded);
}

void sub_1AD8F956C()
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD8FA564(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  double v40 = (char *)&v32 - v4;
  sub_1AD8FA564(0, &qword_1EB725690, MEMORY[0x1E4F27CA0], v1);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v39 = sub_1AD9DC990();
  uint64_t v9 = *(void *)(v39 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v39, v10);
  CATransform3D v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14);
  uint64_t v16 = (char *)&v32 - v15;
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5508]), sel_init);
  objc_msgSend(v17, sel_setWeekdays_, *MEMORY[0x1E4FA5488]);
  uint64_t v18 = v0[2];
  uint64_t v19 = v0[3];
  uint64_t v41 = v9;
  uint64_t v37 = v13;
  char v38 = v0;
  if (v19 == 60 && __OFADD__(v18, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = sub_1AD9DCE40();
    uint64_t v21 = *(void *)(v20 - 8);
    CGRect v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    uint64_t v34 = v21 + 56;
    uint64_t v35 = v22;
    v22(v8, 1, 1, v20);
    CGRect v23 = v8;
    uint64_t v24 = sub_1AD9DCEB0();
    char v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    v33(v40, 1, 1, v24);
    char v36 = v23;
    sub_1AD9DC970();
    CGRect v25 = (void *)sub_1AD9DC8B0();
    uint64_t v26 = v41 + 8;
    char v27 = *(void (**)(char *, uint64_t))(v41 + 8);
    v27(v16, v39);
    objc_msgSend(v17, sel_setWakeUpComponents_, v25);

    uint64_t v28 = *v38;
    uint64_t v29 = v38[1];
    uint64_t v41 = v26;
    if (v29 != 60 || !__OFADD__(v28, 1))
    {
      v35(v36, 1, 1, v20);
      v33(v40, 1, 1, v24);
      char v30 = v37;
      sub_1AD9DC970();
      uint64_t v31 = (void *)sub_1AD9DC8B0();
      v27(v30, v39);
      objc_msgSend(v17, sel_setBedtimeComponents_, v31);

      objc_msgSend(v17, sel_actualSleepInterval);
      return;
    }
  }
  __break(1u);
}

uint64_t type metadata accessor for SleepScheduleClock()
{
  return self;
}

uint64_t method lookup function for SleepScheduleClock(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepScheduleClock);
}

uint64_t type metadata accessor for RingGrabber()
{
  return self;
}

ValueMetadata *type metadata accessor for RingGrabber.Configuration()
{
  return &type metadata for RingGrabber.Configuration;
}

void sub_1AD8F9AC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_gestureRecognizer;
  *(void *)&v1[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1968]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track;
  *(void *)&v1[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F39C88]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring;
  *(void *)&v1[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F39C88]), sel_init);
  uint64_t v5 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand;
  sub_1AD9618C4(v14);
  LOWORD(v15[0]) = 0;
  uint64_t v6 = (objc_class *)type metadata accessor for SleepScheduleClockHand();
  id v7 = objc_allocWithZone(v6);
  *(void *)&v1[v5] = sub_1AD960B54((__int16 *)v15, (uint64_t)v14);
  uint64_t v8 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand;
  sub_1AD9618C4(v15);
  __int16 v13 = 4097;
  id v9 = objc_allocWithZone(v6);
  *(void *)&v1[v8] = sub_1AD960B54(&v13, (uint64_t)v15);
  uint64_t v10 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator];
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((void *)v10 + 4) = 0;
  uint64_t v11 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator];
  *((void *)v11 + 4) = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  uint64_t v12 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;

  sub_1AD9E0140();
  __break(1u);
}

uint64_t sub_1AD8F9C38()
{
  swift_getObjectType();
  uint64_t v41 = sub_1AD9E02A0();
  uint64_t v1 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41, v2);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1AD9DD550();
  __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
  uint64_t v6 = v0;
  id v7 = sub_1AD9DD530();
  os_log_type_t v8 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v48[0] = v10;
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v11 = sub_1AD9E04F0();
    *(void *)&long long v42 = sub_1AD838978(v11, v12, v48);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    __int16 v13 = &v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
    swift_beginAccess();
    uint64_t v14 = *((void *)v13 + 4);
    char v15 = v13[40];
    char v16 = v13[41];
    char v17 = v13[42];
    long long v42 = *(_OWORD *)v13;
    long long v43 = *((_OWORD *)v13 + 1);
    uint64_t v44 = v14;
    char v45 = v15;
    char v46 = v16;
    char v47 = v17;
    uint64_t v18 = sub_1AD94C4EC();
    *(void *)&long long v42 = sub_1AD838978(v18, v19, v48);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v7, v8, "[%{public}s] Done editing model: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v10, -1, -1);
    MEMORY[0x1B3E6D1A0](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v20 = &v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  uint64_t result = swift_beginAccess();
  CGRect v22 = (void *)*((void *)v20 + 5);
  if (v22)
  {
    int v23 = *v20;
    double v24 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144];
    CGRect v25 = (uint64_t *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
    swift_beginAccess();
    sub_1AD94C218(v24);
    swift_endAccess();
    id v26 = v22;
    sub_1AD8F3DFC();
    if (v23)
    {
      if (v23 == 1)
      {
        objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand], sel_setHighlighted_, 0);
        uint64_t v27 = *(void *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
        double v28 = sub_1AD8A4A2C(*v25, v25[1]);
        uint64_t v29 = v41;
        (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4FBBEA8], v41);
        double v30 = sub_1AD8F8C04();
        double v31 = sub_1AD8F8990((uint64_t)v4, v30, v28);
        (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v29);
        uint64_t v32 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset;
        *(long double *)(v27 + v32) = fmod(v31- v28+ *(double *)(v27+ OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset), *(long double *)(v27+ OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle));
        *(unsigned char *)(v27 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted) = 0;
      }
      else
      {
        objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand], sel_setHighlighted_, 0);
      }
    }
    objc_msgSend(v6, sel_sendActionsForControlEvents_, 0x20000);
    objc_msgSend(v6, sel_sendActionsForControlEvents_, 0x40000);
    char v33 = (void *)*((void *)v20 + 5);
    *(_OWORD *)uint64_t v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    *((_OWORD *)v20 + 2) = 0u;

    uint64_t v34 = (uint64_t)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator];
    swift_beginAccess();
    sub_1AD8FA2C0(v34, (uint64_t)&v42);
    if (*((void *)&v43 + 1))
    {
      sub_1AD841030((uint64_t)&v42, (uint64_t)v48);
      sub_1AD8FA350((uint64_t)&v42);
      uint64_t v35 = v49;
      uint64_t v36 = v50;
      __swift_project_boxed_opaque_existential_1Tm(v48, v49);
      (*(void (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
    }
    else
    {
      sub_1AD8FA350((uint64_t)&v42);
    }
    uint64_t v37 = (uint64_t)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator];
    swift_beginAccess();
    sub_1AD8FA2C0(v37, (uint64_t)&v42);
    if (*((void *)&v43 + 1))
    {
      sub_1AD841030((uint64_t)&v42, (uint64_t)v48);
      sub_1AD8FA350((uint64_t)&v42);
      uint64_t v38 = v49;
      uint64_t v39 = v50;
      __swift_project_boxed_opaque_existential_1Tm(v48, v49);
      (*(void (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);

      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
    }
    else
    {

      return sub_1AD8FA350((uint64_t)&v42);
    }
  }
  return result;
}

void sub_1AD8FA1E0()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F39C88]), sel_init);
  v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_tickInterval] = 0x4082C00000000000;
  uint64_t v2 = &v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances];
  *(void *)uint64_t v2 = 0;
  v2[8] = 1;
  uint64_t v3 = &v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle];
  *(void *)uint64_t v3 = 0;
  v3[8] = 1;

  sub_1AD9E0140();
  __break(1u);
}

uint64_t sub_1AD8FA2C0(uint64_t a1, uint64_t a2)
{
  sub_1AD8FA3D8(0, &qword_1E9A4BAC8, (unint64_t *)&unk_1E9A4BAD0, (uint64_t)&protocol descriptor for FeedbackGenerator, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8FA350(uint64_t a1)
{
  sub_1AD8FA3D8(0, &qword_1E9A4BAC8, (unint64_t *)&unk_1E9A4BAD0, (uint64_t)&protocol descriptor for FeedbackGenerator, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1AD8FA3D8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_1AD843E70(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t sub_1AD8FA440()
{
  unint64_t result = qword_1E9A4BAE8;
  if (!qword_1E9A4BAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BAE8);
  }
  return result;
}

unint64_t sub_1AD8FA494()
{
  unint64_t result = qword_1E9A4BAF0;
  if (!qword_1E9A4BAF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4BAF0);
  }
  return result;
}

uint64_t sub_1AD8FA4D4(uint64_t a1, uint64_t a2)
{
  sub_1AD8FA3D8(0, &qword_1E9A4BAC8, (unint64_t *)&unk_1E9A4BAD0, (uint64_t)&protocol descriptor for FeedbackGenerator, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1AD8FA564(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD8FA5C8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD8FA600(uint64_t a1, uint64_t a2)
{
  sub_1AD8F4908(a1, a2, v2);
}

id HKHealthStore.isSleepCoachingSupported.getter()
{
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v2 = result;
    unsigned int v3 = objc_msgSend(result, sel_hksp_supportsSleep);

    id result = 0;
    if (v3)
    {
      id v4 = objc_msgSend(v0, sel_profileIdentifier);
      id v5 = objc_msgSend(v4, sel_type);

      if (v5 != (id)3) {
        return (id)1;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL HKHealthStore.isSleepDataEntrySupported.getter()
{
  id v1 = objc_msgSend(v0, sel_profileIdentifier);
  id v2 = objc_msgSend(v1, sel_type);

  return v2 != (id)3;
}

uint64_t dispatch thunk of ProvenanceInfoProviding.provenanceInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for NextScheduleRowView(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v5 = v3;
  return a1;
}

void destroy for SleepOnboardingContext(id *a1)
{
}

uint64_t assignWithCopy for NextScheduleRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NextScheduleRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NextScheduleRowView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NextScheduleRowView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)id result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)id result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NextScheduleRowView()
{
  return &type metadata for NextScheduleRowView;
}

uint64_t sub_1AD8FA8B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8FA8D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = sub_1AD9DE330();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  sub_1AD8FB35C();
  return sub_1AD8FA938(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_1AD8FA938@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD8FB4C4();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8FB464();
  uint64_t v9 = v8 - 8;
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  __int16 v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14);
  char v16 = (char *)v40 - v15;
  *(void *)uint64_t v7 = sub_1AD9DE2B0();
  *((void *)v7 + 1) = 0;
  v7[16] = 1;
  sub_1AD8FB7A8();
  sub_1AD8FAC80((uint64_t)&v7[*(int *)(v17 + 44)]);
  char v18 = sub_1AD9DE790();
  sub_1AD9DDCC0();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  sub_1AD8FB8AC((uint64_t)v7, (uint64_t)v13, (uint64_t (*)(void))sub_1AD8FB4C4);
  uint64_t v27 = &v13[*(int *)(v9 + 44)];
  *uint64_t v27 = v18;
  *((void *)v27 + 1) = v20;
  *((void *)v27 + 2) = v22;
  *((void *)v27 + 3) = v24;
  *((void *)v27 + 4) = v26;
  v27[40] = 0;
  sub_1AD8FB914((uint64_t)v7, (uint64_t (*)(void))sub_1AD8FB4C4);
  sub_1AD8FB840((uint64_t)v13, (uint64_t)v16);
  type metadata accessor for SleepScheduleModel();
  sub_1AD8FE1EC(&qword_1E9A4AAB8, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
  uint64_t v28 = sub_1AD9DE090();
  if (a1)
  {
    double v30 = (void *)v28;
    uint64_t v31 = v29;
    swift_getKeyPath();
    swift_getKeyPath();
    id v32 = a1;
    sub_1AD9DDBC0();

    swift_release();
    swift_release();
    char v33 = (void *)v40[1];
    uint64_t v34 = sub_1AD9DDAA0();
    sub_1AD8FB8AC((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))sub_1AD8FB464);
    sub_1AD8FB8AC((uint64_t)v13, a2, (uint64_t (*)(void))sub_1AD8FB464);
    sub_1AD8FB3F4();
    uint64_t v36 = (void *)(a2 + *(int *)(v35 + 48));
    *uint64_t v36 = v30;
    v36[1] = v31;
    v36[2] = v34;
    v36[3] = v33;
    id v37 = v30;
    swift_retain();
    id v38 = v33;
    sub_1AD8FB914((uint64_t)v16, (uint64_t (*)(void))sub_1AD8FB464);

    swift_release();
    return sub_1AD8FB914((uint64_t)v13, (uint64_t (*)(void))sub_1AD8FB464);
  }
  else
  {
    type metadata accessor for SleepActivityConfigurationModel();
    sub_1AD8FE1EC(&qword_1E9A4B2C8, (void (*)(uint64_t))type metadata accessor for SleepActivityConfigurationModel);
    uint64_t result = sub_1AD9DE080();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD8FAC80@<X0>(uint64_t a1@<X8>)
{
  sub_1AD8741C4();
  uint64_t v4 = MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v36 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v35 = (uint64_t *)((char *)&v35 - v7);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v8 = (id)qword_1EB727930;
  uint64_t v9 = sub_1AD9DCA70();
  uint64_t v11 = v10;

  swift_bridgeObjectRelease();
  uint64_t v37 = v9;
  uint64_t v38 = v11;
  sub_1AD85F688();
  uint64_t v12 = sub_1AD9DEAF0();
  uint64_t v14 = v13;
  char v16 = v15;
  if (qword_1E9A490E8 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_1AD9DEAB0();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  sub_1AD861548(v12, v14, v16 & 1);
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(self, sel_labelColor);
  MEMORY[0x1B3E6ADC0](v22);
  uint64_t v23 = sub_1AD9DEA70();
  uint64_t v25 = v24;
  char v27 = v26;
  uint64_t v29 = v28;
  swift_release();
  char v30 = v27 & 1;
  sub_1AD861548(v17, v19, v21);
  swift_bridgeObjectRelease();
  uint64_t v31 = v35;
  static Image.standardNavigationChevron.getter(v35);
  uint64_t v32 = v36;
  sub_1AD8FB8AC((uint64_t)v31, v36, (uint64_t (*)(void))sub_1AD8741C4);
  *(void *)a1 = v23;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v30;
  *(void *)(a1 + 24) = v29;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  sub_1AD8FB578();
  sub_1AD8FB8AC(v32, a1 + *(int *)(v33 + 64), (uint64_t (*)(void))sub_1AD8741C4);
  sub_1AD861558(v23, v25, v30);
  swift_bridgeObjectRetain();
  sub_1AD8FB914((uint64_t)v31, (uint64_t (*)(void))sub_1AD8741C4);
  sub_1AD8FB914(v32, (uint64_t (*)(void))sub_1AD8741C4);
  sub_1AD861548(v23, v25, v30);
  return swift_bridgeObjectRelease();
}

void sub_1AD8FAFA0(char *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  sub_1AD9DF040();
  type metadata accessor for SleepActivityConfigurationModel();
  sub_1AD8FE1EC(&qword_1E9A4B2C8, (void (*)(uint64_t))type metadata accessor for SleepActivityConfigurationModel);
  id v6 = a2;
  uint64_t v7 = sub_1AD9DDF30();
  uint64_t v9 = v8;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  type metadata accessor for SleepScheduleModel();
  sub_1AD8FE1EC(&qword_1E9A4AAB8, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
  uint64_t v10 = sub_1AD9DDF30();
  uint64_t v12 = v11;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  type metadata accessor for SleepSettingsModel();
  sub_1AD8FE1EC(&qword_1E9A4B480, (void (*)(uint64_t))type metadata accessor for SleepSettingsModel);
  uint64_t v13 = sub_1AD9DDF30();
  uint64_t v15 = v14;

  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v12;
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 40) = v15;
  *(unsigned char *)(a3 + 48) = v16;
  *(void *)(a3 + 56) = v17;
  *(unsigned char *)(a3 + 64) = v5;
}

id sub_1AD8FB1D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 16);
  char v16 = v4;
  if (v3)
  {
    id v15 = v3;
    sub_1AD8FAFA0(&v16, v15, (uint64_t)v17);
    long long v13 = v17[1];
    long long v14 = v17[0];
    uint64_t v6 = v18;
    uint64_t v7 = v19;
    char v8 = v20;
    uint64_t v9 = v21;
    char v10 = v22;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v3;
    *(void *)(v11 + 24) = v2;
    *(unsigned char *)(v11 + 32) = v4;
    *(_OWORD *)a1 = v14;
    *(_OWORD *)(a1 + 16) = v13;
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    *(unsigned char *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    *(unsigned char *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = sub_1AD8FB350;
    *(void *)(a1 + 80) = v11;
    return v15;
  }
  else
  {
    type metadata accessor for SleepActivityConfigurationModel();
    sub_1AD8FE1EC(&qword_1E9A4B2C8, (void (*)(uint64_t))type metadata accessor for SleepActivityConfigurationModel);
    id result = (id)sub_1AD9DE080();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD8FB318()
{
  return swift_deallocObject();
}

uint64_t sub_1AD8FB350@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8FA8D4(*(void **)(v1 + 16), a1);
}

void sub_1AD8FB35C()
{
  if (!qword_1E9A4BAF8)
  {
    sub_1AD8FE0B8(255, &qword_1E9A4BB00, (uint64_t (*)(uint64_t))sub_1AD8FB3F4, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BAF8);
    }
  }
}

void sub_1AD8FB3F4()
{
  if (!qword_1E9A4BB08)
  {
    sub_1AD8FB464();
    sub_1AD8FB6E4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4BB08);
    }
  }
}

void sub_1AD8FB464()
{
  if (!qword_1E9A4BB10)
  {
    sub_1AD8FB4C4();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BB10);
    }
  }
}

void sub_1AD8FB4C4()
{
  if (!qword_1E9A4BB18)
  {
    sub_1AD8FE0B8(255, &qword_1E9A4BB20, (uint64_t (*)(uint64_t))sub_1AD8FB578, MEMORY[0x1E4F3F108]);
    sub_1AD8FB680(&qword_1E9A4BB30, &qword_1E9A4BB20, (uint64_t (*)(uint64_t))sub_1AD8FB578);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BB18);
    }
  }
}

void sub_1AD8FB578()
{
  if (!qword_1E9A4BB28)
  {
    sub_1AD8741C4();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1E9A4BB28);
    }
  }
}

void sub_1AD8FB5E8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_1AD8FE0B8(255, a4, a5, MEMORY[0x1E4F3DF18]);
    unint64_t v8 = sub_1AD9DDFC0();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD8FB680(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8FE0B8(255, a2, a3, MEMORY[0x1E4F3F108]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8FB6E4()
{
  if (!qword_1E9A4BB38)
  {
    sub_1AD8FE0B8(255, &qword_1E9A4BB40, (uint64_t (*)(uint64_t))sub_1AD8FB774, MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BB38);
    }
  }
}

void sub_1AD8FB774(uint64_t a1)
{
}

void sub_1AD8FB7A8()
{
  if (!qword_1E9A4BB50)
  {
    sub_1AD8FE0B8(255, &qword_1E9A4BB20, (uint64_t (*)(uint64_t))sub_1AD8FB578, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BB50);
    }
  }
}

uint64_t sub_1AD8FB840(uint64_t a1, uint64_t a2)
{
  sub_1AD8FB464();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8FB8AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD8FB914(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD8FB974@<X0>(uint64_t a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v39 = sub_1AD9DE290();
  uint64_t v38 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39, v2);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8FD9E8();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  char v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8FE11C();
  uint64_t v40 = v11;
  uint64_t v37 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8FE234();
  uint64_t v43 = v15;
  uint64_t v42 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v41 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v18 = v1[3];
  long long v53 = v1[2];
  long long v54 = v18;
  char v55 = *((unsigned char *)v1 + 64);
  long long v19 = v1[1];
  long long v51 = *v1;
  long long v52 = v19;
  char v45 = &v51;
  sub_1AD8FE0B8(0, &qword_1E9A4BB90, (uint64_t (*)(uint64_t))sub_1AD8FDAB8, MEMORY[0x1E4F3F108]);
  sub_1AD8FB680(&qword_1E9A4BC20, &qword_1E9A4BB90, (uint64_t (*)(uint64_t))sub_1AD8FDAB8);
  sub_1AD9DE9E0();
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v20 = (id)qword_1EB727930;
  uint64_t v21 = sub_1AD9DCA70();
  uint64_t v23 = v22;

  swift_bridgeObjectRelease();
  uint64_t v47 = v21;
  uint64_t v48 = v23;
  uint64_t v24 = sub_1AD8FE1EC(&qword_1E9A4BC30, (void (*)(uint64_t))sub_1AD8FD9E8);
  unint64_t v25 = sub_1AD85F688();
  uint64_t v26 = MEMORY[0x1E4FBB1A0];
  sub_1AD9DECA0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v27 = v38;
  uint64_t v28 = v39;
  (*(void (**)(char *, void, uint64_t))(v38 + 104))(v4, *MEMORY[0x1E4F3D320], v39);
  uint64_t v47 = v6;
  uint64_t v48 = v26;
  uint64_t v49 = v24;
  unint64_t v50 = v25;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  char v30 = v41;
  uint64_t v31 = v40;
  sub_1AD9DED40();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v28);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v31);
  long long v46 = v54;
  sub_1AD8FE33C(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
  sub_1AD9DF070();
  uint64_t v32 = swift_allocObject();
  long long v33 = v54;
  *(_OWORD *)(v32 + 48) = v53;
  *(_OWORD *)(v32 + 64) = v33;
  *(unsigned char *)(v32 + 80) = v55;
  long long v34 = v52;
  *(_OWORD *)(v32 + 16) = v51;
  *(_OWORD *)(v32 + 32) = v34;
  sub_1AD8FE394(&v51);
  sub_1AD8FE3E0(0, &qword_1E9A4B9A0, (uint64_t)&type metadata for QuickScheduleManagementViewRepresentation, MEMORY[0x1E4F3DB68], MEMORY[0x1E4F3CC10]);
  uint64_t v47 = v31;
  uint64_t v48 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  sub_1AD8F3840();
  uint64_t v35 = v43;
  sub_1AD9DED80();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v30, v35);
}

uint64_t sub_1AD8FBFBC@<X0>(long long *a1@<X0>, char *a2@<X8>)
{
  uint64_t v76 = a2;
  sub_1AD8FE0B8(0, &qword_1E9A4BBF8, (uint64_t (*)(uint64_t))sub_1AD8FDEF0, MEMORY[0x1E4FBB718]);
  uint64_t v5 = MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v85 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v83 = (uint64_t)&v72 - v8;
  sub_1AD8FDBDC(0, &qword_1E9A4BBD0, (void (*)(uint64_t))sub_1AD8FDDAC);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v88 = v9;
  uint64_t v89 = v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9, v11);
  uint64_t v87 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)&v72 - v15;
  sub_1AD8FDD48();
  uint64_t v84 = v17;
  uint64_t v75 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17, v18);
  uint64_t v86 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v21);
  uint64_t v23 = (char *)&v72 - v22;
  sub_1AD8FDBDC(0, &qword_1E9A4BBA0, sub_1AD8FDC48);
  uint64_t v81 = v24;
  uint64_t v80 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24, v25);
  uint64_t v79 = (char *)&v72 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v28);
  char v30 = (char *)&v72 - v29;
  long long v31 = a1[3];
  long long v96 = a1[2];
  long long v97 = v31;
  char v98 = *((unsigned char *)a1 + 64);
  long long v32 = a1[1];
  long long v94 = *a1;
  long long v95 = v32;
  *(void *)&long long v94 = sub_1AD8FCA2C();
  *((void *)&v94 + 1) = v33;
  LOBYTE(v95) = v34 & 1;
  *((void *)&v95 + 1) = v35;
  uint64_t v91 = a1;
  sub_1AD8FDC48(0);
  sub_1AD8FE480(&qword_1E9A4BC40, sub_1AD8FDC48, (void (*)(void))sub_1AD8FE438, (void (*)(void))sub_1AD8FDEC8);
  uint64_t v77 = v30;
  sub_1AD9DF2A0();
  uint64_t v90 = a1;
  sub_1AD8FE5F4();
  int v78 = v23;
  sub_1AD9DF290();
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v36 = (id)qword_1EB727930;
  uint64_t v37 = sub_1AD9DCA70();
  uint64_t v39 = v38;

  swift_bridgeObjectRelease();
  *(void *)&long long v94 = v37;
  *((void *)&v94 + 1) = v39;
  sub_1AD85F688();
  *(void *)&long long v94 = sub_1AD9DEAF0();
  *((void *)&v94 + 1) = v40;
  LOBYTE(v95) = v41 & 1;
  *((void *)&v95 + 1) = v42;
  MEMORY[0x1F4188790](v94, v40);
  sub_1AD8FDDAC();
  sub_1AD8FB6E4();
  uint64_t v44 = v43;
  uint64_t v45 = sub_1AD8FE480(&qword_1E9A4BBE0, (void (*)(uint64_t))sub_1AD8FB6E4, (void (*)(void))sub_1AD8FDE74, (void (*)(void))sub_1AD8FDEC8);
  uint64_t v92 = v44;
  uint64_t v93 = v45;
  swift_getOpaqueTypeConformance2();
  uint64_t v82 = v16;
  sub_1AD9DF280();
  if (*((unsigned char *)a1 + 64) == 4)
  {
    id v46 = (id)qword_1EB727930;
    uint64_t v47 = sub_1AD9DCA70();
    uint64_t v49 = v48;

    swift_bridgeObjectRelease();
    *(void *)&long long v94 = v47;
    *((void *)&v94 + 1) = v49;
    *(void *)&long long v94 = sub_1AD9DEAF0();
    *((void *)&v94 + 1) = v50;
    LOBYTE(v95) = v51 & 1;
    *((void *)&v95 + 1) = v52;
    MEMORY[0x1F4188790](v94, v50);
    sub_1AD8FE0B8(0, &qword_1E9A4BC08, (uint64_t (*)(uint64_t))sub_1AD8FDF88, MEMORY[0x1E4F3F108]);
    sub_1AD8FB680(&qword_1E9A4BC68, &qword_1E9A4BC08, (uint64_t (*)(uint64_t))sub_1AD8FDF88);
    uint64_t v53 = v83;
    sub_1AD9DF280();
    sub_1AD8FDEF0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 0, 1, v54);
  }
  else
  {
    sub_1AD8FDEF0();
    uint64_t v53 = v83;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v83, 1, 1, v55);
  }
  CGPoint v56 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
  CGRect v57 = v79;
  uint64_t v58 = v81;
  v56(v79, v77, v81);
  uint64_t v59 = v75;
  int v74 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  v74(v86, v78, v84);
  id v73 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
  v73(v87, v82, v88);
  uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD8FE650(v53, v85, &qword_1E9A4BBF8, (uint64_t (*)(uint64_t))sub_1AD8FDEF0, MEMORY[0x1E4FBB718]);
  long long v61 = v76;
  v56(v76, v57, v58);
  sub_1AD8FDAB8();
  uint64_t v63 = v62;
  uint64_t v64 = v84;
  v74(&v61[*(int *)(v62 + 48)], v86, v84);
  uint64_t v65 = v88;
  v73(&v61[*(int *)(v63 + 64)], v87, v88);
  uint64_t v66 = v85;
  sub_1AD8FE650(v85, (uint64_t)&v61[*(int *)(v63 + 80)], &qword_1E9A4BBF8, (uint64_t (*)(uint64_t))sub_1AD8FDEF0, v60);
  sub_1AD8FE6C0(v83, &qword_1E9A4BBF8, (uint64_t (*)(uint64_t))sub_1AD8FDEF0, v60);
  uint64_t v67 = *(void (**)(char *, uint64_t))(v89 + 8);
  v89 += 8;
  v67(v82, v65);
  uint64_t v68 = *(void (**)(char *, uint64_t))(v59 + 8);
  v68(v78, v64);
  uint64_t v69 = *(void (**)(char *, uint64_t))(v80 + 8);
  uint64_t v70 = v81;
  v69(v77, v81);
  sub_1AD8FE6C0(v66, &qword_1E9A4BBF8, (uint64_t (*)(uint64_t))sub_1AD8FDEF0, v60);
  v67(v87, v88);
  v68(v86, v64);
  return ((uint64_t (*)(char *, uint64_t))v69)(v79, v70);
}

uint64_t sub_1AD8FCA2C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  objc_msgSend(*(id *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_scheduledSleepMode);
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (v2) {
    objc_msgSend(v2, sel_windDownTime);
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v3 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AD85F688();
  return sub_1AD9DEAF0();
}

uint64_t sub_1AD8FCBC0@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for SleepSettingsModel();
  sub_1AD8FE1EC(&qword_1E9A4B480, (void (*)(uint64_t))type metadata accessor for SleepSettingsModel);
  uint64_t v4 = sub_1AD9DE090();
  uint64_t v13 = v5;
  uint64_t v14 = v4;
  type metadata accessor for SleepScheduleModel();
  sub_1AD8FE1EC(&qword_1E9A4AAB8, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
  uint64_t v6 = sub_1AD9DE090();
  uint64_t v8 = v7;
  long long v16 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v9 = *((id *)&v16 + 1);
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  sub_1AD8E8AC0((uint64_t)&v16);
  uint64_t v10 = sub_1AD9DDAA0();
  swift_getKeyPath();
  swift_getKeyPath();
  id v11 = v9;
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  sub_1AD8E8AC0((uint64_t)&v16);
  uint64_t result = sub_1AD9DDAA0();
  *a2 = v14;
  a2[1] = v13;
  a2[2] = v6;
  a2[3] = v8;
  a2[4] = v10;
  a2[5] = v15;
  a2[6] = result;
  a2[7] = v15;
  return result;
}

__n128 sub_1AD8FCDA0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v7 = *(_OWORD *)(a1 + 16);
  id v3 = (void *)*((void *)&v7 + 1);
  sub_1AD8FE780((uint64_t)&v7);
  sub_1AD8E76D4(v3, (uint64_t)v6);
  sub_1AD8E8AC0((uint64_t)&v7);
  long long v4 = v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v6[4];
  __n128 result = (__n128)v6[1];
  *(_OWORD *)a2 = v6[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_1AD8FCE08(long long *a1)
{
  type metadata accessor for SleepScheduleModel();
  sub_1AD8FE1EC(&qword_1E9A4AAB8, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
  uint64_t v2 = (void *)sub_1AD9DE090();
  long long v8 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = *((id *)&v8 + 1);
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  sub_1AD8E8AC0((uint64_t)&v8);
  sub_1AD9DDAA0();
  uint64_t v4 = swift_allocObject();
  long long v5 = a1[3];
  *(_OWORD *)(v4 + 48) = a1[2];
  *(_OWORD *)(v4 + 64) = v5;
  *(unsigned char *)(v4 + 80) = *((unsigned char *)a1 + 64);
  long long v6 = a1[1];
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 32) = v6;
  sub_1AD8FE394(a1);
  sub_1AD8FB6E4();
  sub_1AD8FE480(&qword_1E9A4BBE0, (void (*)(uint64_t))sub_1AD8FB6E4, (void (*)(void))sub_1AD8FDE74, (void (*)(void))sub_1AD8FDEC8);
  sub_1AD9DEC30();
  swift_release();

  swift_release();
}

uint64_t sub_1AD8FCFF8(uint64_t a1)
{
  if (qword_1E9A48EC8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1E9A5A708);
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    long long v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(void *)&long long v8 = v6;
    *(_DWORD *)long long v5 = 136446210;
    sub_1AD838978(0xD000000000000037, 0x80000001AD9F37E0, (uint64_t *)&v8);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Opening schedule editor", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  long long v8 = *(_OWORD *)(a1 + 48);
  sub_1AD8FE33C(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
  return sub_1AD9DF060();
}

void sub_1AD8FD1C4(long long *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for SleepScheduleModel();
  sub_1AD8FE1EC(&qword_1E9A4AAB8, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
  os_log_type_t v4 = (void *)sub_1AD9DE090();
  uint64_t v6 = v5;
  long long v15 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v7 = *((id *)&v15 + 1);
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  sub_1AD8E8AC0((uint64_t)&v15);
  long long v8 = (void *)v14[0];
  uint64_t v9 = sub_1AD9DDAA0();
  uint64_t v16 = 2;
  long long v17 = 0u;
  long long v18 = 0u;
  __int16 v19 = 256;
  sub_1AD8C58E0((long long *)&v16);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3EBC8];
  sub_1AD8FE650((uint64_t)v14, (uint64_t)v13, &qword_1E9A4B120, (uint64_t (*)(uint64_t))sub_1AD8C2B74, MEMORY[0x1E4F3EBC8]);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v9;
  a2[3] = v8;
  sub_1AD8FE650((uint64_t)v13, (uint64_t)(a2 + 4), &qword_1E9A4B120, (uint64_t (*)(uint64_t))sub_1AD8C2B74, v10);
  id v11 = v4;
  swift_retain();
  id v12 = v8;
  sub_1AD8FE6C0((uint64_t)v14, &qword_1E9A4B120, (uint64_t (*)(uint64_t))sub_1AD8C2B74, v10);
  sub_1AD8FE6C0((uint64_t)v13, &qword_1E9A4B120, (uint64_t (*)(uint64_t))sub_1AD8C2B74, v10);

  swift_release();
}

uint64_t sub_1AD8FD3B8@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v13 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = *((id *)&v13 + 1);
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
  uint64_t v5 = *(void *)&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32];
  __swift_project_boxed_opaque_existential_1Tm(&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider], v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);

  sub_1AD8E8AC0((uint64_t)&v13);
  id v7 = (void *)*MEMORY[0x1E4FA5360];
  sub_1AD8FE33C(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
  id v8 = v7;
  sub_1AD9DF070();
  uint64_t result = sub_1AD9DE780();
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v11;
  *(unsigned char *)(a2 + 32) = v12;
  *(unsigned char *)(a2 + 33) = result;
  return result;
}

uint64_t destroy for ScheduleListView(id *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for ScheduleListView(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleListView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  id v7 = *(void **)(a2 + 24);
  id v8 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v7;
  id v9 = v7;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void **)(a2 + 40);
  uint64_t v11 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  id v12 = v10;

  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ScheduleListView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;

  uint64_t v6 = *(void *)(a2 + 24);
  id v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;

  uint64_t v8 = *(void *)(a2 + 40);
  id v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;

  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleListView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleListView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleListView()
{
  return &type metadata for ScheduleListView;
}

uint64_t sub_1AD8FD7C4()
{
  return sub_1AD8FE1EC(&qword_1E9A4BB58, (void (*)(uint64_t))sub_1AD8FD80C);
}

void sub_1AD8FD80C()
{
  if (!qword_1E9A4BB60)
  {
    sub_1AD8FD8C4();
    sub_1AD8FE1EC(&qword_1E9A4BB78, (void (*)(uint64_t))sub_1AD8FD8C4);
    sub_1AD8FD978();
    unint64_t v0 = type metadata accessor for NavigationLinkWithoutChevron();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BB60);
    }
  }
}

void sub_1AD8FD8C4()
{
  if (!qword_1E9A4BB68)
  {
    sub_1AD8FE0B8(255, &qword_1E9A4BB00, (uint64_t (*)(uint64_t))sub_1AD8FB3F4, MEMORY[0x1E4F3F108]);
    sub_1AD8FB680(&qword_1E9A4BB70, &qword_1E9A4BB00, (uint64_t (*)(uint64_t))sub_1AD8FB3F4);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BB68);
    }
  }
}

unint64_t sub_1AD8FD978()
{
  unint64_t result = qword_1E9A4BB80;
  if (!qword_1E9A4BB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BB80);
  }
  return result;
}

uint64_t sub_1AD8FD9CC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD8FD9E8()
{
  if (!qword_1E9A4BB88)
  {
    sub_1AD8FE0B8(255, &qword_1E9A4BB90, (uint64_t (*)(uint64_t))sub_1AD8FDAB8, MEMORY[0x1E4F3F108]);
    sub_1AD8FB680(&qword_1E9A4BC20, &qword_1E9A4BB90, (uint64_t (*)(uint64_t))sub_1AD8FDAB8);
    unint64_t v0 = sub_1AD9DE9F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BB88);
    }
  }
}

void sub_1AD8FDAB8()
{
  if (!qword_1E9A4BB98)
  {
    sub_1AD8FDBDC(255, &qword_1E9A4BBA0, sub_1AD8FDC48);
    sub_1AD8FDD48();
    sub_1AD8FDBDC(255, &qword_1E9A4BBD0, (void (*)(uint64_t))sub_1AD8FDDAC);
    sub_1AD8FE0B8(255, &qword_1E9A4BBF8, (uint64_t (*)(uint64_t))sub_1AD8FDEF0, MEMORY[0x1E4FBB718]);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1E9A4BB98);
    }
  }
}

void sub_1AD8FDBDC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DF2B0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD8FDC48(uint64_t a1)
{
}

void sub_1AD8FDC84()
{
  if (!qword_1E9A4BBB0)
  {
    sub_1AD8FE0B8(255, &qword_1E9A4BBB8, (uint64_t (*)(uint64_t))sub_1AD8FDD14, MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BBB0);
    }
  }
}

void sub_1AD8FDD14(uint64_t a1)
{
}

void sub_1AD8FDD48()
{
  if (!qword_1E9A4BBC8)
  {
    unint64_t v0 = sub_1AD9DF2B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BBC8);
    }
  }
}

void sub_1AD8FDDAC()
{
  if (!qword_1E9A4BBD8)
  {
    sub_1AD8FB6E4();
    sub_1AD8FE480(&qword_1E9A4BBE0, (void (*)(uint64_t))sub_1AD8FB6E4, (void (*)(void))sub_1AD8FDE74, (void (*)(void))sub_1AD8FDEC8);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4BBD8);
    }
  }
}

unint64_t sub_1AD8FDE74()
{
  unint64_t result = qword_1E9A4BBE8;
  if (!qword_1E9A4BBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BBE8);
  }
  return result;
}

uint64_t sub_1AD8FDEC8()
{
  return sub_1AD8FE588(&qword_1E9A4BBF0, &qword_1E9A4BB40, (uint64_t (*)(uint64_t))sub_1AD8FB774);
}

void sub_1AD8FDEF0()
{
  if (!qword_1E9A4BC00)
  {
    sub_1AD8FE0B8(255, &qword_1E9A4BC08, (uint64_t (*)(uint64_t))sub_1AD8FDF88, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1AD9DF2B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BC00);
    }
  }
}

void sub_1AD8FDF88()
{
  if (!qword_1E9A4BC10)
  {
    sub_1AD8FE028();
    sub_1AD8FE0B8(255, &qword_1E9A4B120, (uint64_t (*)(uint64_t))sub_1AD8C2B74, MEMORY[0x1E4F3EBC8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4BC10);
    }
  }
}

void sub_1AD8FE028()
{
  if (!qword_1E9A4BC18)
  {
    sub_1AD8FE0B8(255, &qword_1E9A4BB40, (uint64_t (*)(uint64_t))sub_1AD8FB774, MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BC18);
    }
  }
}

void sub_1AD8FE0B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD8FE11C()
{
  if (!qword_1E9A4BC28)
  {
    sub_1AD8FD9E8();
    sub_1AD8FE1EC(&qword_1E9A4BC30, (void (*)(uint64_t))sub_1AD8FD9E8);
    sub_1AD85F688();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4BC28);
    }
  }
}

uint64_t sub_1AD8FE1EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8FE234()
{
  if (!qword_1E9A4BC38)
  {
    sub_1AD8FE11C();
    sub_1AD8FD9E8();
    sub_1AD8FE1EC(&qword_1E9A4BC30, (void (*)(uint64_t))sub_1AD8FD9E8);
    sub_1AD85F688();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4BC38);
    }
  }
}

uint64_t sub_1AD8FE334@<X0>(char *a1@<X8>)
{
  return sub_1AD8FBFBC(*(long long **)(v1 + 16), a1);
}

void sub_1AD8FE33C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD8FE38C@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8FD3B8((long long *)(v1 + 16), a1);
}

void *sub_1AD8FE394(void *a1)
{
  unint64_t v2 = (void *)a1[1];
  long long v3 = (void *)a1[3];
  unint64_t v4 = (void *)a1[5];
  swift_retain();
  id v5 = v2;
  id v6 = v3;
  id v7 = v4;
  return a1;
}

void sub_1AD8FE3E0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1AD8FE430@<X0>(uint64_t *a1@<X8>)
{
  return sub_1AD8FCBC0(*(long long **)(v1 + 16), a1);
}

uint64_t sub_1AD8FE438()
{
  return sub_1AD8FE480(&qword_1E9A4BC48, (void (*)(uint64_t))sub_1AD8FDC84, (void (*)(void))sub_1AD8FE50C, (void (*)(void))sub_1AD8FE560);
}

uint64_t sub_1AD8FE480(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD8FE50C()
{
  unint64_t result = qword_1E9A4BC50;
  if (!qword_1E9A4BC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BC50);
  }
  return result;
}

uint64_t sub_1AD8FE560()
{
  return sub_1AD8FE588(&qword_1E9A4BC58, &qword_1E9A4BBB8, (uint64_t (*)(uint64_t))sub_1AD8FDD14);
}

uint64_t sub_1AD8FE588(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8FE0B8(255, a2, a3, MEMORY[0x1E4F3DF18]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_1AD8FE5EC@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1AD8FCDA0(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_1AD8FE5F4()
{
  unint64_t result = qword_1E9A4BC60;
  if (!qword_1E9A4BC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BC60);
  }
  return result;
}

void sub_1AD8FE648()
{
  sub_1AD8FCE08(*(long long **)(v0 + 16));
}

uint64_t sub_1AD8FE650(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_1AD8FE0B8(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1AD8FE6C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_1AD8FE0B8(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_1AD8FE71C(void *a1@<X8>)
{
  sub_1AD8FD1C4(*(long long **)(v1 + 16), a1);
}

uint64_t objectdestroy_14Tm()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD8FE778()
{
  return sub_1AD8FCFF8(v0 + 16);
}

uint64_t sub_1AD8FE780(uint64_t a1)
{
  id v2 = *(id *)(a1 + 8);
  return a1;
}

uint64_t sub_1AD8FE7AC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8FE900@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD8FE980()
{
  return sub_1AD9DDBD0();
}

uint64_t sub_1AD8FE9FC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD8FEA7C()
{
  return swift_endAccess();
}

uint64_t sub_1AD8FEB04(uint64_t a1)
{
  sub_1AD90083C(0, &qword_1E9A4BCE8, (uint64_t)&type metadata for SectionsViewModel, MEMORY[0x1E4F1AC60]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v2, v5);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v14 - v10;
  id v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1AD90083C(0, &qword_1E9A4BC78, (uint64_t)&type metadata for SectionsViewModel, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1AD8FECC4()
{
  return swift_endAccess();
}

uint64_t sub_1AD8FED48@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD8FEDC8(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return sub_1AD9DDBD0();
}

uint64_t sub_1AD8FEE40()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD8FEEC0()
{
  return swift_endAccess();
}

uint64_t sub_1AD8FEF40(uint64_t a1)
{
  sub_1AD9007B8(0, &qword_1E9A4BCE0, MEMORY[0x1E4F1AC60]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v2, v5);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v14 - v10;
  id v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1AD9007B8(0, &qword_1E9A4BC88, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1AD8FF0E4()
{
  return swift_endAccess();
}

id SleepActivityConfigurationDataSource.__allocating_init()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B0B8]), sel_init);
  id v3 = objc_allocWithZone(MEMORY[0x1E4FA5570]);
  uint64_t v4 = (void *)sub_1AD9DF6D0();
  id v5 = objc_msgSend(v3, sel_initWithIdentifier_healthStore_, v4, v2);

  type metadata accessor for SleepScheduleProvider();
  id v6 = v5;
  id v7 = SleepScheduleProvider.__allocating_init(sleepStore:)(v6);
  id v8 = v6;
  id v9 = HKSPSleepStore.settings.getter();
  id v10 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  id v11 = SleepSettingsProvider.init(sleepStore:sleepSettings:)(v8, v9);
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54E8]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E4F29DB8], v8);
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v14 = result;
    id v15 = (id)HKSPCurrentDateProvider();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v15;
    id v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for WatchAppInstalledProvider()), sel_init);
    id v18 = objc_msgSend(self, sel_hksp_internalUserDefaults);
    __int16 v19 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepActivityConfigurationModel());
    id v20 = sub_1AD8FFF9C(v7, v11, v12, v17, v14, (uint64_t)sub_1AD838788, v16, v18, v19);

    swift_release();
    uint64_t v21 = (*(uint64_t (**)(id))(v1 + 232))(v20);

    return (id)v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD8FF3C8()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t SleepActivityConfigurationDataSource.__allocating_init(sleepModel:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  SleepActivityConfigurationDataSource.init(sleepModel:)(a1);
  return v2;
}

uint64_t SleepActivityConfigurationDataSource.init(sleepModel:)(void *a1)
{
  uint64_t v2 = v1;
  sub_1AD86E5A4();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD90083C(0, &qword_1E9A4AAD8, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, MEMORY[0x1E4F1AC60]);
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  MEMORY[0x1F4188790](v7, v8);
  id v10 = (char *)&v39 - v9;
  sub_1AD9002EC();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9003F0();
  uint64_t v44 = *(void *)(v15 - 8);
  uint64_t v45 = v15;
  MEMORY[0x1F4188790](v15, v16);
  id v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9007B8(0, &qword_1E9A4BC88, MEMORY[0x1E4F1AC70]);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v22);
  uint64_t v24 = (char *)&v39 - v23;
  uint64_t v25 = v2 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__sleepTreatmentRowViewProvider;
  id v47 = 0;
  sub_1AD90083C(0, &qword_1E9A4BC90, (uint64_t)&type metadata for SleepTreatmentRowViewProvider, MEMORY[0x1E4FBB718]);
  sub_1AD9DDB80();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v25, v24, v20);
  *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource_subscriptions) = MEMORY[0x1E4FBC870];
  *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource_sleepModel) = a1;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v26 = a1;
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  LOBYTE(v46) = (_BYTE)v47;
  sub_1AD87F384(v26, &v48);
  uint64_t v27 = v48;
  swift_beginAccess();
  uint64_t v46 = v27;
  sub_1AD9DDB80();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  unsigned int v28 = v47;
  uint64_t v29 = 0;
  if (objc_msgSend(*(id *)&v26[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior], sel_isDeviceSupported)&& v28 > 1)
  {
    char v30 = v26;
    uint64_t v29 = v26;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v47 = v29;
  swift_retain();
  sub_1AD9DDBD0();
  swift_beginAccess();
  sub_1AD90083C(0, &qword_1E9A4A9E8, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDB90();
  swift_endAccess();
  sub_1AD900374();
  uint64_t v31 = v40;
  sub_1AD9DDC30();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v31);
  sub_1AD8CCDBC();
  id v47 = (id)sub_1AD9DFCA0();
  uint64_t v32 = sub_1AD9DFC90();
  uint64_t v33 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v43, 1, 1, v32);
  sub_1AD9004DC(&qword_1E9A4BCB0, (void (*)(uint64_t))sub_1AD9002EC);
  sub_1AD9004DC((unint64_t *)&qword_1EB724D40, (void (*)(uint64_t))sub_1AD8CCDBC);
  uint64_t v34 = v42;
  sub_1AD9DDC20();
  sub_1AD86ED78(v33);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v34);
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v2;
  *(void *)(v35 + 24) = v26;
  sub_1AD9004DC(&qword_1E9A4BCC8, (void (*)(uint64_t))sub_1AD9003F0);
  id v36 = v26;
  swift_retain();
  uint64_t v37 = v45;
  sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v37);
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  swift_release();

  return v2;
}

uint64_t sub_1AD8FFB70(uint64_t a1, uint64_t a2, char *a3)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  sub_1AD87F384(a3, (uint64_t *)&v8);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1AD9DDBD0();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  unsigned int v4 = v8;
  if (objc_msgSend(*(id *)&a3[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior], sel_isDeviceSupported))BOOL v5 = v4 > 1; {
  else
  }
    BOOL v5 = 0;
  if (v5) {
    uint64_t v6 = a3;
  }
  else {
    a3 = 0;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v8 = a3;
  swift_retain();
  return sub_1AD9DDBD0();
}

uint64_t SleepActivityConfigurationDataSource.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__viewModel;
  sub_1AD90083C(0, &qword_1E9A4BC78, (uint64_t)&type metadata for SectionsViewModel, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__sleepTreatmentRowViewProvider;
  sub_1AD9007B8(0, &qword_1E9A4BC88, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SleepActivityConfigurationDataSource.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__viewModel;
  sub_1AD90083C(0, &qword_1E9A4BC78, (uint64_t)&type metadata for SectionsViewModel, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__sleepTreatmentRowViewProvider;
  sub_1AD9007B8(0, &qword_1E9A4BC88, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1AD8FFF5C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SleepActivityConfigurationDataSource();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

id sub_1AD8FFF9C(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, char *a9)
{
  uint64_t v40 = a5;
  id v41 = a8;
  id v38 = a1;
  uint64_t v39 = a6;
  sub_1AD90083C(0, &qword_1E9A4A9E8, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, MEMORY[0x1E4F1AC70]);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v16);
  id v18 = (char *)&v38 - v17;
  uint64_t v19 = &a9[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__layout];
  char v44 = 0;
  uint64_t v20 = a9;
  sub_1AD9DDB80();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v18, v14);
  uint64_t v21 = (uint64_t *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_configUIVisitedKey];
  *uint64_t v21 = sub_1AD9DF710();
  v21[1] = v22;
  *(void *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_subscriptions] = MEMORY[0x1E4FBC870];
  uint64_t v23 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepSettingsModel());
  id v24 = sub_1AD8DABA0((uint64_t)a2, v23);
  swift_beginAccess();
  id v43 = v24;
  sub_1AD9DDB80();
  swift_endAccess();
  uint64_t v25 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepScheduleModel());
  id v26 = v38;
  swift_retain();
  id v27 = sub_1AD8A6E7C((uint64_t)v26, v39, a7, v25);
  swift_beginAccess();
  id v43 = v27;
  sub_1AD9DDB80();
  swift_endAccess();
  *(void *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_featureAvailability] = a3;
  *(void *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_watchAppInstalledProvider] = a4;
  unsigned int v28 = v40;
  *(void *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior] = v40;
  id v29 = a3;
  id v30 = a4;
  id v31 = v28;

  uint64_t v32 = (objc_class *)type metadata accessor for SleepActivityConfigurationModel();
  v42.receiver = v20;
  v42.super_class = v32;
  id v33 = objc_msgSendSuper2(&v42, sel_init);
  swift_bridgeObjectRetain();
  uint64_t v34 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v41, sel_setBool_forKey_, 1, v34);

  sub_1AD8A0794();
  sub_1AD8A0354();
  sub_1AD8CCDBC();
  id v35 = v33;
  id v36 = (void *)sub_1AD9DFCA0();
  objc_msgSend(v29, sel_registerObserver_queue_, v35, v36);

  return v35;
}

void sub_1AD9002EC()
{
  if (!qword_1E9A4BC98)
  {
    sub_1AD90083C(255, &qword_1E9A4AAD8, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, MEMORY[0x1E4F1AC60]);
    sub_1AD900374();
    unint64_t v0 = sub_1AD9DDA10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BC98);
    }
  }
}

unint64_t sub_1AD900374()
{
  unint64_t result = qword_1E9A4BCA0;
  if (!qword_1E9A4BCA0)
  {
    sub_1AD90083C(255, &qword_1E9A4AAD8, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, MEMORY[0x1E4F1AC60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BCA0);
  }
  return result;
}

void sub_1AD9003F0()
{
  if (!qword_1E9A4BCA8)
  {
    sub_1AD9002EC();
    sub_1AD8CCDBC();
    sub_1AD9004DC(&qword_1E9A4BCB0, (void (*)(uint64_t))sub_1AD9002EC);
    sub_1AD9004DC((unint64_t *)&qword_1EB724D40, (void (*)(uint64_t))sub_1AD8CCDBC);
    unint64_t v0 = sub_1AD9DDA50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BCA8);
    }
  }
}

uint64_t sub_1AD9004DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD90052C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1AD90056C(uint64_t a1)
{
  return sub_1AD8FFB70(a1, *(void *)(v1 + 16), *(char **)(v1 + 24));
}

uint64_t sub_1AD900584()
{
  return type metadata accessor for SleepActivityConfigurationDataSource();
}

uint64_t type metadata accessor for SleepActivityConfigurationDataSource()
{
  uint64_t result = qword_1E9A4BCD0;
  if (!qword_1E9A4BCD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1AD9005D8()
{
  sub_1AD90083C(319, &qword_1E9A4BC78, (uint64_t)&type metadata for SectionsViewModel, MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F)
  {
    sub_1AD9007B8(319, &qword_1E9A4BC88, MEMORY[0x1E4F1AC70]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SleepActivityConfigurationDataSource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepActivityConfigurationDataSource);
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.viewModel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.$viewModel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.sleepTreatmentRowViewProvider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.$sleepTreatmentRowViewProvider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.__allocating_init(sleepModel:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

void sub_1AD9007B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1AD90083C(255, &qword_1E9A4BC90, (uint64_t)&type metadata for SleepTreatmentRowViewProvider, MEMORY[0x1E4FBB718]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1AD90083C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

char *sub_1AD900888(char *result)
{
  uint64_t v2 = v1;
  if (*(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher])
  {
    char v3 = (char)result;
    swift_retain();
    sub_1AD9DDB00();
    uint64_t result = (char *)swift_release();
    if ((v14 & 1) == 0)
    {
      uint64_t result = (char *)Double.hoursAndMinutes.getter(v13);
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = &v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
        if ((v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24] & 1) == 0) {
          return sub_1AD9015F8(result, v4, v3 & 1);
        }
        uint64_t v7 = 60 * (void)result;
        if ((unsigned __int128)((uint64_t)result * (__int128)60) >> 64 == (60 * (uint64_t)result) >> 63)
        {
          BOOL v8 = __OFADD__(v7, v4);
          uint64_t v9 = v7 + v4;
          if (!v8)
          {
            uint64_t v10 = *((void *)v6 + 2);
            if (v10)
            {
              if (v9 != 0x8000000000000000 || v10 != -1)
              {
                uint64_t v11 = v9 / v10;
                uint64_t result = (char *)objc_msgSend(v2, sel_pickerView_numberOfRowsInComponent_, v2, 0);
                if ((uint64_t)result >= v11)
                {
                  objc_msgSend(v2, sel_selectRow_inComponent_animated_, v11, (v6[24] & 1) == 0, 0);
                  return sub_1AD9017B4((char *)v11, (v6[24] & 1) == 0, v3 & 1, v12);
                }
                return result;
              }
LABEL_17:
              __break(1u);
              return result;
            }
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_16;
      }
    }
  }
  return result;
}

char *sub_1AD9009CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalSubscriber;
  if (*(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalSubscriber))
  {
    swift_retain();
    sub_1AD9DDA90();
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher);
  if (v3)
  {
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1AD8387F8();
    sub_1AD9015A0();
    swift_retain();
    uint64_t v3 = sub_1AD9DDC40();
    swift_release();
    swift_release();
  }
  *(void *)(v1 + v2) = v3;
  swift_release();
  return sub_1AD900D28(0);
}

void sub_1AD900AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DF410();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  BOOL v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v9 = *(double *)a1;
  char v10 = *(unsigned char *)(a1 + 8);
  sub_1AD8CCDBC();
  *BOOL v8 = sub_1AD9DFCA0();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FBCBF0], v4);
  LOBYTE(a1) = sub_1AD9DF420();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v8, v4);
  if ((a1 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x1B3E6D270](a2 + 16);
  if (!v11) {
    return;
  }
  __n128 v12 = (void *)v11;
  uint64_t v13 = v11 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  if (*(unsigned char *)(v11 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24))
  {
    uint64_t v14 = 0;
  }
  else
  {
    double v15 = floor(*(double *)v13 / 60.0 / 60.0);
    if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v15 <= -9.22337204e18)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= 9.22337204e18)
    {
LABEL_25:
      __break(1u);
      return;
    }
    uint64_t v14 = (uint64_t)v15;
  }
  uint64_t v16 = *(void *)(v11 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex);
  BOOL v17 = __OFADD__(v14, v16);
  uint64_t v18 = v14 + v16;
  if (v17) {
    goto LABEL_19;
  }
  uint64_t v19 = *(void *)(v13 + 16);
  uint64_t v20 = *(void *)(v11 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex);
  uint64_t v21 = v19 * v20;
  if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v22 = 60 * v18;
  if ((unsigned __int128)(v18 * (__int128)60) >> 64 != (60 * v18) >> 63)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v17 = __OFADD__(v22, v21);
  uint64_t v23 = v22 + v21;
  if (v17)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((v10 & 1) != 0 || v9 != (double)v23 * 60.0) {
    sub_1AD900D28(0);
  }
}

char *sub_1AD900D28(char *result)
{
  char v2 = (char)result;
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24))
  {
    uint64_t v4 = 0;
  }
  else
  {
    double v5 = floor(*(double *)v3 / 60.0 / 60.0);
    if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if (v5 <= -9.22337204e18)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v5 >= 9.22337204e18)
    {
LABEL_22:
      __break(1u);
      return result;
    }
    uint64_t v4 = (uint64_t)v5;
  }
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex);
  BOOL v7 = __OFADD__(v4, v6);
  uint64_t v8 = v4 + v6;
  if (v7)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex);
  uint64_t v11 = v9 * v10;
  if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v12 = 60 * v8;
  if ((unsigned __int128)(v8 * (__int128)60) >> 64 != (60 * v8) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v13 = v12 + v11;
  if (__OFADD__(v12, v11))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher))
  {
    swift_retain();
    sub_1AD9DDB00();
    uint64_t result = (char *)swift_release();
    if ((v15 & 1) == 0 && v14 != (double)v13 * 60.0) {
      return sub_1AD900888((char *)(v2 & 1));
    }
  }
  return result;
}

id sub_1AD900E90()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter;
  char v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter);
  }
  else
  {
    uint64_t v4 = (objc_class *)type metadata accessor for ShortHourDateComponentsFormatter();
    double v5 = (char *)objc_allocWithZone(v4);
    *(void *)&v5[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = 4;
    v9.receiver = v5;
    v9.super_class = v4;
    id v3 = objc_msgSendSuper2(&v9, sel_init);
    objc_msgSend(v3, sel_setUnitsStyle_, 2);
    objc_msgSend(v3, sel_setAllowedUnits_, 32);
    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v3;

    char v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1AD900F54()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter;
  char v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter);
  }
  else
  {
    uint64_t v4 = (objc_class *)type metadata accessor for ShortMinuteDateComponentsFormatter();
    double v5 = (char *)objc_allocWithZone(v4);
    *(void *)&v5[OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options] = 4;
    v10.receiver = v5;
    v10.super_class = v4;
    id v6 = objc_msgSendSuper2(&v10, sel_init);
    id v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    char v2 = 0;
  }
  id v8 = v2;
  return v3;
}

id sub_1AD900FF0(uint64_t a1, char a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalSubscriber] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter] = 0;
  double v5 = (double *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  *double v5 = a3;
  v5[1] = a4;
  *((void *)v5 + 2) = a1;
  *((unsigned char *)v5 + 24) = a2 & 1;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for TimeIntervalPickerView();
  id v6 = objc_msgSendSuper2(&v8, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, sel_setDataSource_, v6);
  objc_msgSend(v6, sel_setDelegate_, v6);

  return v6;
}

id sub_1AD9010D4(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalSubscriber] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter] = 0;
  uint64_t v3 = sub_1AD9D5428();
  uint64_t v4 = &v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  *(void *)uint64_t v4 = v5;
  *((void *)v4 + 1) = v6;
  *((void *)v4 + 2) = v3;
  v4[24] = v7 & 1;
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for TimeIntervalPickerView();
  id v8 = objc_msgSendSuper2(&v13, sel_initWithCoder_, a1);
  id v9 = v8;
  if (v8)
  {
    id v10 = v8;
    objc_msgSend(v10, sel_setDataSource_, v10);
    id v11 = v10;
    objc_msgSend(v11, sel_setDelegate_, v11);
  }
  return v9;
}

id sub_1AD901230()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimeIntervalPickerView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TimeIntervalPickerView()
{
  return self;
}

id sub_1AD90133C(uint64_t a1)
{
  id result = sub_1AD900E90();
  uint64_t v4 = result;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24))
  {
    uint64_t v5 = 0;
  }
  else
  {
    double v6 = floor(*(double *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration) / 60.0 / 60.0);
    if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
    {
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    if (v6 <= -9.22337204e18)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    if (v6 >= 9.22337204e18)
    {
LABEL_15:
      __break(1u);
      return result;
    }
    uint64_t v5 = (uint64_t)v6;
  }
  BOOL v7 = __OFADD__(v5, a1);
  uint64_t v8 = v5 + a1;
  if (v7)
  {
    __break(1u);
    goto LABEL_13;
  }
  id v9 = objc_msgSend(result, sel_stringFromTimeInterval_, (double)v8 * 60.0 * 60.0);

  if (!v9) {
    return 0;
  }
  uint64_t v10 = sub_1AD9DF710();

  return (id)v10;
}

uint64_t sub_1AD901560()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD901598(uint64_t a1)
{
  sub_1AD900AD0(a1, v1);
}

unint64_t sub_1AD9015A0()
{
  unint64_t result = qword_1E9A4B080;
  if (!qword_1E9A4B080)
  {
    sub_1AD8387F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B080);
  }
  return result;
}

char *sub_1AD9015F8(char *result, uint64_t a2, char a3)
{
  double v6 = &v3[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  uint64_t v7 = v3[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24];
  if (v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    double v9 = floor(*(double *)v6 / 60.0 / 60.0);
    if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (v9 <= -9.22337204e18)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v9 >= 9.22337204e18)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    uint64_t v8 = (uint64_t)v9;
  }
  uint64_t v10 = &result[-v8];
  if (__OFSUB__(result, v8))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t result = (char *)objc_msgSend(v3, sel_pickerView_numberOfRowsInComponent_, v3, v7 << 63 >> 63);
  if ((uint64_t)result >= (uint64_t)v10 && (uint64_t)result >= 1)
  {
    objc_msgSend(v3, sel_selectRow_inComponent_animated_, v10, (uint64_t)((unint64_t)v6[24] << 63) >> 63, 0);
    unint64_t result = sub_1AD9017B4(v10, (uint64_t)((unint64_t)v6[24] << 63) >> 63, a3 & 1, v12);
  }
  uint64_t v13 = *((void *)v6 + 2);
  if (!v13) {
    goto LABEL_26;
  }
  if (a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_30;
  }
  uint64_t v14 = a2 / v13;
  unint64_t result = (char *)objc_msgSend(v3, sel_pickerView_numberOfRowsInComponent_, v3, ~v6[24] & 1);
  if ((uint64_t)result >= v14 && (uint64_t)result >= 1)
  {
    objc_msgSend(v3, sel_selectRow_inComponent_animated_, v14, (v6[24] & 1) == 0, 0);
    uint64_t v17 = ~v6[24] & 1;
    return sub_1AD9017B4((char *)v14, v17, a3 & 1, v16);
  }
  return result;
}

char *sub_1AD9017B4(char *result, uint64_t a2, char a3, __n128 a4)
{
  uint64_t v7 = result;
  uint64_t v8 = (double *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  uint64_t v9 = v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24];
  if (v9 << 63 >> 63 == a2)
  {
    *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex] = result;
    if ((v9 & 1) == 0) {
      unint64_t result = (char *)objc_msgSend(v4, sel_reloadComponent_, 1);
    }
  }
  else if (!(v9 & 1) == a2)
  {
    *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex] = result;
  }
  uint64_t v10 = *((unsigned __int8 *)v8 + 24);
  char v11 = v10 & 1;
  if (v10 << 63 >> 63 != a2) {
    goto LABEL_40;
  }
  a4.n128_f64[0] = *v8;
  if (v10)
  {
    double v12 = v8[1];
    if (v7)
    {
      uint64_t v13 = *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex];
      if (!v13) {
        goto LABEL_26;
      }
LABEL_40:
      if ((a3 & 1) == 0
        || !*(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher])
      {
        return result;
      }
      if (v11)
      {
        uint64_t v29 = 0;
      }
      else
      {
        double v30 = floor(*v8 / 60.0 / 60.0);
        if ((~*(void *)&v30 & 0x7FF0000000000000) == 0)
        {
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        if (v30 <= -9.22337204e18)
        {
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }
        if (v30 >= 9.22337204e18)
        {
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        uint64_t v29 = (uint64_t)v30;
      }
      uint64_t v31 = *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex];
      BOOL v19 = __OFADD__(v29, v31);
      uint64_t v32 = v29 + v31;
      if (!v19)
      {
        uint64_t v33 = *((void *)v8 + 2);
        uint64_t v34 = *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex];
        if ((unsigned __int128)(v33 * (__int128)v34) >> 64 == (v33 * v34) >> 63)
        {
          if ((unsigned __int128)(v32 * (__int128)60) >> 64 == (60 * v32) >> 63)
          {
            if (!__OFADD__(60 * v32, v33 * v34))
            {
LABEL_52:
              swift_retain();
              sub_1AD9DDAF0();
              return (char *)swift_release();
            }
            goto LABEL_69;
          }
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
LABEL_25:
    uint64_t v13 = 0;
    goto LABEL_26;
  }
  double v14 = floor(a4.n128_f64[0] / 60.0 / 60.0);
  if ((~*(void *)&v14 & 0x7FF0000000000000) == 0)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  uint64_t v15 = (uint64_t)v14;
  __n128 v16 = &v7[(uint64_t)v14];
  if (__OFADD__(v7, (uint64_t)v14))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  double v12 = v8[1];
  double v17 = floor(v12 / 60.0 / 60.0);
  if ((~*(void *)&v17 & 0x7FF0000000000000) == 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v17 >= 9.22337204e18)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  uint64_t v13 = (uint64_t)v17;
  if (v16 != (char *)(uint64_t)v17)
  {
    uint64_t v18 = *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex];
    BOOL v19 = __OFADD__(v15, v18);
    uint64_t v20 = v15 + v18;
    if (v19)
    {
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v20 != v13) {
      goto LABEL_40;
    }
  }
  if ((~*(void *)&v17 & 0x7FF0000000000000) == 0)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (v17 >= 9.22337204e18)
  {
    __break(1u);
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v21 = *((void *)v8 + 2);
  uint64_t v22 = OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex;
  uint64_t v23 = *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex];
  uint64_t v24 = v21 * v23;
  if ((unsigned __int128)(v21 * (__int128)v23) >> 64 != (v21 * v23) >> 63)
  {
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v25 = 60 * v13;
  if ((unsigned __int128)(v13 * (__int128)60) >> 64 != (60 * v13) >> 63)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (__OFADD__(v25, v24))
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if ((double)(v25 + v24) * 60.0 <= v12) {
    goto LABEL_40;
  }
  uint64_t v26 = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex] = 0;
  if ((v11 & 1) == 0)
  {
    a4.n128_f64[0] = floor(a4.n128_f64[0] / 60.0 / 60.0);
    if ((~a4.n128_u64[0] & 0x7FF0000000000000) == 0)
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (a4.n128_f64[0] <= -9.22337204e18)
    {
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    if (a4.n128_f64[0] >= 9.22337204e18)
    {
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    uint64_t v26 = (uint64_t)a4.n128_f64[0];
  }
  uint64_t v27 = *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex];
  unint64_t result = (char *)(v26 + v27);
  if (__OFADD__(v26, v27)) {
    goto LABEL_79;
  }
  unint64_t result = (char *)sub_1AD9015F8(result, 0, 0, a4);
  if ((a3 & 1) != 0 && *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher])
  {
    if ((_BYTE)v8[3])
    {
      uint64_t v28 = 0;
    }
    else
    {
      double v35 = floor(*v8 / 60.0 / 60.0);
      if ((~*(void *)&v35 & 0x7FF0000000000000) == 0)
      {
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      if (v35 <= -9.22337204e18)
      {
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      if (v35 >= 9.22337204e18)
      {
LABEL_93:
        __break(1u);
        return result;
      }
      uint64_t v28 = (uint64_t)v35;
    }
    BOOL v19 = __OFADD__(v7, v28);
    uint64_t v36 = (uint64_t)&v7[v28];
    if (!v19)
    {
      uint64_t v37 = *((void *)v8 + 2);
      uint64_t v38 = *(void *)&v4[v22];
      if ((unsigned __int128)(v37 * (__int128)v38) >> 64 == (v37 * v38) >> 63)
      {
        if ((unsigned __int128)(v36 * (__int128)60) >> 64 == (60 * v36) >> 63)
        {
          if (!__OFADD__(60 * v36, v37 * v38)) {
            goto LABEL_52;
          }
          goto LABEL_90;
        }
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  return result;
}

uint64_t sub_1AD901CB8(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  uint64_t v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24);
  char v4 = v3 & 1;
  if (v3 << 63 >> 63 != result)
  {
    if (!(v3 & 1) != result) {
      return 0;
    }
    double v8 = *(double *)v2;
    double v7 = *(double *)(v2 + 8);
    uint64_t v9 = *(void *)(v2 + 16);
    unint64_t result = sub_1AD9D5344(*(double *)v2, v7, v9, v4);
    uint64_t v10 = result + 1;
    if (!__OFADD__(result, 1))
    {
      if (v9)
      {
        unint64_t result = 0;
        uint64_t v11 = 0;
        double v12 = v8 / 60.0 / 60.0;
        double v13 = v7 / 60.0 / 60.0;
        double v14 = floor(v12);
        int64_t v15 = vcvtmd_s64_f64(v13);
        double v16 = floor(v13);
        uint64_t v17 = 60 * v15;
        unint64_t v18 = vcvtmd_s64_f64(v12);
LABEL_22:
        uint64_t v23 = v11;
        while (1)
        {
          BOOL v24 = v10 >= v23;
          if (v9 > 0) {
            BOOL v24 = v23 >= v10;
          }
          if (v24) {
            return result;
          }
          uint64_t v11 = v23 + v9;
          if (__OFADD__(v23, v9))
          {
            uint64_t v11 = (v9 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
            if (v4)
            {
              uint64_t v11 = (v9 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
              BOOL v21 = __OFADD__(result++, 1);
              if (!v21) {
                goto LABEL_22;
              }
              goto LABEL_52;
            }
          }
          else if (v4)
          {
            goto LABEL_21;
          }
          if ((*(void *)&v14 & 0x7FF0000000000000) == 0x7FF0000000000000)
          {
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          if (v14 <= -9.22337204e18) {
            goto LABEL_44;
          }
          if (v14 >= 9.22337204e18) {
            goto LABEL_45;
          }
          uint64_t v25 = *(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex);
          BOOL v21 = __OFADD__(v18, v25);
          uint64_t v26 = v18 + v25;
          if (v21) {
            goto LABEL_46;
          }
          if ((*(void *)&v16 & 0x7FF0000000000000) == 0x7FF0000000000000) {
            goto LABEL_47;
          }
          if (v16 <= -9.22337204e18) {
            goto LABEL_48;
          }
          if (v16 >= 9.22337204e18) {
            goto LABEL_49;
          }
          if (v26 != v15) {
            goto LABEL_21;
          }
          if ((unsigned __int128)(v15 * (__int128)60) >> 64 != (60 * v15) >> 63) {
            goto LABEL_50;
          }
          BOOL v21 = __OFADD__(v17, v23);
          uint64_t v27 = v17 + v23;
          if (v21) {
            goto LABEL_51;
          }
          double v28 = (double)v27 * 60.0;
          uint64_t v23 = v11;
          if (v28 <= v7) {
            goto LABEL_21;
          }
        }
      }
      goto LABEL_55;
    }
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    double v19 = floor(*(double *)(v2 + 8) / 60.0 / 60.0);
    if ((~*(void *)&v19 & 0x7FF0000000000000) == 0)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v19 <= -9.22337204e18)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (v19 >= 9.22337204e18)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    double v20 = floor(*(double *)v2 / 60.0 / 60.0);
    if ((~*(void *)&v20 & 0x7FF0000000000000) == 0)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (v20 <= -9.22337204e18)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v20 >= 9.22337204e18)
    {
LABEL_61:
      __break(1u);
      return result;
    }
    uint64_t v5 = (uint64_t)v19;
    uint64_t v6 = (uint64_t)v20;
  }
  BOOL v21 = __OFSUB__(v5, v6);
  uint64_t v22 = v5 - v6;
  if (v21)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  unint64_t result = v22 + 1;
  if (!__OFADD__(v22, 1)) {
    return result;
  }
  __break(1u);
  return 0;
}

id sub_1AD901F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  uint64_t v5 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24);
  if (v5 << 63 >> 63 == a2) {
    return sub_1AD90133C(a1);
  }
  if (!(v5 & 1) != a2) {
    return 0;
  }
  id result = sub_1AD900F54();
  uint64_t v8 = *(void *)(v4 + 16);
  if ((unsigned __int128)(a1 * (__int128)v8) >> 64 == (a1 * v8) >> 63)
  {
    uint64_t v9 = result;
    id v10 = objc_msgSend(result, sel_stringFromTimeInterval_, (double)(a1 * v8) * 60.0);

    if (!v10) {
      return 0;
    }
    uint64_t v6 = sub_1AD9DF710();

    return (id)v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD902074(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000023;
  unint64_t v4 = 0x80000001AD9EF7B0;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xD000000000000026;
      uint64_t v5 = "com.apple.health.Sleep.sleepImportance";
      goto LABEL_6;
    case 2:
      unint64_t v3 = 0xD000000000000022;
      uint64_t v5 = "com.apple.health.Sleep.sleepStages";
      goto LABEL_6;
    case 3:
      unint64_t v4 = 0x80000001AD9EF840;
      unint64_t v3 = 0xD000000000000021;
      break;
    case 4:
      unint64_t v3 = 0xD00000000000002DLL;
      uint64_t v5 = "com.apple.health.Sleep.sleepApneaNotification";
LABEL_6:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000023;
  unint64_t v7 = 0x80000001AD9EF7B0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xD000000000000026;
      uint64_t v8 = "com.apple.health.Sleep.sleepImportance";
      goto LABEL_12;
    case 2:
      unint64_t v6 = 0xD000000000000022;
      uint64_t v8 = "com.apple.health.Sleep.sleepStages";
      goto LABEL_12;
    case 3:
      unint64_t v7 = 0x80000001AD9EF840;
      unint64_t v6 = 0xD000000000000021;
      break;
    case 4:
      unint64_t v6 = 0xD00000000000002DLL;
      uint64_t v8 = "com.apple.health.Sleep.sleepApneaNotification";
LABEL_12:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = sub_1AD9E02D0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1AD902214(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEE0065636E656972;
  uint64_t v3 = 0x657078456E69616DLL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x696472616F626E6FLL;
    }
    else {
      uint64_t v5 = 0x63536567616E616DLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEA0000000000676ELL;
    }
    else {
      unint64_t v6 = 0xEE00656C75646568;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x657078456E69616DLL;
  unint64_t v6 = 0xEE0065636E656972;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x696472616F626E6FLL;
    }
    else {
      uint64_t v3 = 0x63536567616E616DLL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEA0000000000676ELL;
    }
    else {
      unint64_t v2 = 0xEE00656C75646568;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1AD9E02D0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1AD902360(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA0000000000676ELL;
  unint64_t v3 = 0x696472616F626E4FLL;
  uint64_t v4 = a1;
  unint64_t v5 = 0x696472616F626E4FLL;
  unint64_t v6 = 0xEA0000000000676ELL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      unint64_t v5 = 0x736E6F6974704FLL;
      break;
    case 2:
      unint64_t v5 = 0x656C756465686353;
      unint64_t v6 = 0xEE00726F74696445;
      break;
    case 3:
      int v7 = "ScheduleOccurrence";
      goto LABEL_9;
    case 4:
      unint64_t v5 = 0x6F6F527065656C53;
      unint64_t v6 = 0xE90000000000006DLL;
      break;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      unint64_t v5 = 0x746567646957;
      break;
    case 6:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x73676E6974746553;
      break;
    case 7:
      int v7 = "NotificationDetail";
LABEL_9:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 8:
      unint64_t v5 = 0xD000000000000021;
      unint64_t v6 = 0x80000001AD9EF760;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      if (v5 == 0x736E6F6974704FLL) {
        goto LABEL_26;
      }
      goto LABEL_29;
    case 2:
      unint64_t v2 = 0xEE00726F74696445;
      if (v5 != 0x656C756465686353) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 3:
      char v8 = "ScheduleOccurrence";
      goto LABEL_24;
    case 4:
      unint64_t v2 = 0xE90000000000006DLL;
      if (v5 != 0x6F6F527065656C53) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 5:
      unint64_t v2 = 0xE600000000000000;
      if (v5 != 0x746567646957) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 6:
      unint64_t v2 = 0xE800000000000000;
      if (v5 != 0x73676E6974746553) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 7:
      char v8 = "NotificationDetail";
LABEL_24:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000012;
      goto LABEL_25;
    case 8:
      unint64_t v2 = 0x80000001AD9EF760;
      if (v5 != 0xD000000000000021) {
        goto LABEL_29;
      }
      goto LABEL_26;
    default:
LABEL_25:
      if (v5 != v3) {
        goto LABEL_29;
      }
LABEL_26:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_29:
      }
        char v9 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_1AD902644(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x656B617761;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x656B617761;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x7065656C536D6572;
      break;
    case 2:
      unsigned int v6 = 1701998435;
      goto LABEL_5;
    case 3:
      unsigned int v6 = 1885693284;
LABEL_5:
      uint64_t v5 = v6 | 0x65656C5300000000;
      unint64_t v3 = 0xE900000000000070;
      break;
    case 4:
      uint64_t v5 = 0x6669636570736E75;
      unint64_t v3 = 0xEB00000000646569;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE800000000000000;
      if (v5 == 0x7065656C536D6572) {
        goto LABEL_14;
      }
      goto LABEL_17;
    case 2:
      unint64_t v7 = 0xE900000000000070;
      if (v5 != 0x65656C5365726F63) {
        goto LABEL_17;
      }
      goto LABEL_14;
    case 3:
      uint64_t v2 = 0x65656C5370656564;
      unint64_t v7 = 0xE900000000000070;
      goto LABEL_13;
    case 4:
      unint64_t v7 = 0xEB00000000646569;
      if (v5 != 0x6669636570736E75) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v2) {
        goto LABEL_17;
      }
LABEL_14:
      if (v3 == v7) {
        char v8 = 1;
      }
      else {
LABEL_17:
      }
        char v8 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8 & 1;
  }
}

BOOL SleepStagesModel.hasSleepStageData.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  double v2 = sub_1AD903074(2u, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  double v3 = sub_1AD903074(3u, v1);
  swift_bridgeObjectRelease();
  double v4 = v2 + v3;
  swift_bridgeObjectRetain();
  double v5 = sub_1AD903074(1u, v1);
  swift_bridgeObjectRelease();
  return v4 + v5 > 0.0;
}

uint64_t sub_1AD9028B0(char a1)
{
  uint64_t v1 = 0;
  switch(a1)
  {
    case 1:
      if (qword_1EB724E38 != -1) {
        goto LABEL_11;
      }
      goto LABEL_9;
    case 2:
      if (qword_1EB724E38 == -1) {
        goto LABEL_9;
      }
      goto LABEL_11;
    case 3:
      if (qword_1EB724E38 == -1) {
        goto LABEL_9;
      }
      goto LABEL_11;
    case 4:
      return v1;
    default:
      if (qword_1EB724E38 == -1) {
        goto LABEL_9;
      }
LABEL_11:
      swift_once();
LABEL_9:
      id v2 = (id)qword_1EB727930;
      uint64_t v1 = sub_1AD9DCA70();

      swift_bridgeObjectRelease();
      return v1;
  }
}

uint64_t sub_1AD902AEC(char a1)
{
  uint64_t v1 = 0x656B617761;
  switch(a1)
  {
    case 4:
      swift_bridgeObjectRelease();
      return 0;
    default:
      char v3 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      if (v3) {
        return 0;
      }
      switch(a1)
      {
        case 1:
          uint64_t v1 = 0x7065656C536D6572;
          break;
        case 2:
          unsigned int v4 = 1701998435;
          goto LABEL_9;
        case 3:
          unsigned int v4 = 1885693284;
LABEL_9:
          uint64_t v1 = v4 | 0x65656C5300000000;
          break;
        default:
          return v1;
      }
      return v1;
  }
}

uint64_t sub_1AD902C74(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a8;
  id v41 = a1;
  uint64_t v42 = a2;
  uint64_t v30 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1, a2);
  id v43 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  double v13 = (char *)&v29 - v12;
  MEMORY[0x1F4188790](v11, v14);
  double v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v17 - 8);
  uint64_t v34 = v17;
  MEMORY[0x1F4188790](v17, v18);
  double v20 = (char *)&v29 - v19;
  uint64_t v21 = sub_1AD9DFA20();
  if (!v21) {
    return sub_1AD9DF8A0();
  }
  uint64_t v22 = v21;
  uint64_t v46 = sub_1AD9E00F0();
  uint64_t v35 = sub_1AD9E0100();
  sub_1AD9E00A0();
  uint64_t v39 = v8;
  uint64_t result = sub_1AD9DFA10();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v37 = (void (**)(char *))(v36 + 2);
    uint64_t v38 = v16;
    ++v36;
    while (1)
    {
      BOOL v24 = (void (*)(char *, void))sub_1AD9DFAA0();
      uint64_t v25 = v13;
      uint64_t v26 = v13;
      uint64_t v27 = AssociatedTypeWitness;
      (*v37)(v25);
      v24(v45, 0);
      uint64_t v28 = v44;
      v41(v26, v43);
      if (v28) {
        break;
      }
      uint64_t v44 = 0;
      (*v36)(v26, v27);
      sub_1AD9E00E0();
      sub_1AD9DFA70();
      --v22;
      double v13 = v26;
      if (!v22)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
        return v46;
      }
    }
    (*v36)(v26, v27);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v32, v43, v31);
  }
  return result;
}

double sub_1AD903074(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepStageSegment(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v7, v10);
  double v13 = (char *)&v50 - v12;
  MEMORY[0x1F4188790](v11, v14);
  double v16 = (char *)&v50 - v15;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v55 = MEMORY[0x1E4FBC860];
  uint64_t v18 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v18)
  {
    uint64_t v51 = v5;
    uint64_t v52 = v4;
    uint64_t v19 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v20 = *(void *)(v5 + 72);
    uint64_t v50 = a2;
    uint64_t v53 = (v19 + 32) & ~v19;
    uint64_t v21 = a2 + v53;
    uint64_t v22 = MEMORY[0x1E4FBC860];
    uint64_t v54 = a1;
    while (2)
    {
      sub_1AD90C2C8(v21, (uint64_t)v16, type metadata accessor for SleepStageSegment);
      unint64_t v23 = 0xE500000000000000;
      uint64_t v24 = 0x656B617761;
      switch(*v16)
      {
        case 1:
          unint64_t v23 = 0xE800000000000000;
          uint64_t v24 = 0x7065656C536D6572;
          break;
        case 2:
          unsigned int v25 = 1701998435;
          goto LABEL_9;
        case 3:
          unsigned int v25 = 1885693284;
LABEL_9:
          uint64_t v24 = v25 | 0x65656C5300000000;
          unint64_t v23 = 0xE900000000000070;
          break;
        case 4:
          uint64_t v24 = 0x6669636570736E75;
          unint64_t v23 = 0xEB00000000646569;
          break;
        default:
          break;
      }
      unint64_t v26 = 0xE500000000000000;
      uint64_t v27 = 0x656B617761;
      switch(v54)
      {
        case 1:
          unint64_t v26 = 0xE800000000000000;
          if (v24 == 0x7065656C536D6572) {
            goto LABEL_18;
          }
          goto LABEL_21;
        case 2:
          unint64_t v26 = 0xE900000000000070;
          if (v24 != 0x65656C5365726F63) {
            goto LABEL_21;
          }
          goto LABEL_18;
        case 3:
          uint64_t v27 = 0x65656C5370656564;
          unint64_t v26 = 0xE900000000000070;
          goto LABEL_17;
        case 4:
          unint64_t v26 = 0xEB00000000646569;
          if (v24 != 0x6669636570736E75) {
            goto LABEL_21;
          }
          goto LABEL_18;
        default:
LABEL_17:
          if (v24 != v27) {
            goto LABEL_21;
          }
LABEL_18:
          if (v23 == v26)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
LABEL_21:
            char v28 = sub_1AD9E02D0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v28 & 1) == 0)
            {
              sub_1AD9098B4((uint64_t)v16, type metadata accessor for SleepStageSegment);
              goto LABEL_4;
            }
          }
          sub_1AD9095D8((uint64_t)v16, (uint64_t)v13, type metadata accessor for SleepStageSegment);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1AD8A25F8(0, *(void *)(v22 + 16) + 1, 1);
          }
          uint64_t v22 = v55;
          unint64_t v30 = *(void *)(v55 + 16);
          unint64_t v29 = *(void *)(v55 + 24);
          if (v30 >= v29 >> 1)
          {
            sub_1AD8A25F8(v29 > 1, v30 + 1, 1);
            uint64_t v22 = v55;
          }
          *(void *)(v22 + 16) = v30 + 1;
          sub_1AD9095D8((uint64_t)v13, v22 + v53 + v30 * v20, type metadata accessor for SleepStageSegment);
LABEL_4:
          v21 += v20;
          if (--v18) {
            continue;
          }
          uint64_t v31 = v55;
          uint64_t v5 = v51;
          uint64_t v32 = MEMORY[0x1E4FBC860];
          break;
      }
      break;
    }
  }
  else
  {
    uint64_t v31 = v17;
    uint64_t v32 = v17;
  }
  swift_bridgeObjectRelease();
  int64_t v33 = *(void *)(v31 + 16);
  if (!v33)
  {
    swift_release();
    uint64_t v38 = MEMORY[0x1E4FBC860];
    uint64_t v41 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v41) {
      goto LABEL_37;
    }
LABEL_40:
    double v43 = 0.0;
    goto LABEL_46;
  }
  uint64_t v55 = v32;
  sub_1AD8A25D8(0, v33, 0);
  uint64_t v34 = v31 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v35 = *(void *)(v5 + 72);
  do
  {
    sub_1AD90C2C8(v34, (uint64_t)v9, type metadata accessor for SleepStageSegment);
    sub_1AD9DC7A0();
    uint64_t v37 = v36;
    sub_1AD9098B4((uint64_t)v9, type metadata accessor for SleepStageSegment);
    uint64_t v38 = v55;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1AD8A25D8(0, *(void *)(v38 + 16) + 1, 1);
      uint64_t v38 = v55;
    }
    unint64_t v40 = *(void *)(v38 + 16);
    unint64_t v39 = *(void *)(v38 + 24);
    if (v40 >= v39 >> 1)
    {
      sub_1AD8A25D8(v39 > 1, v40 + 1, 1);
      uint64_t v38 = v55;
    }
    *(void *)(v38 + 16) = v40 + 1;
    *(void *)(v38 + 8 * v40 + 32) = v37;
    v34 += v35;
    --v33;
  }
  while (v33);
  swift_release();
  uint64_t v41 = *(void *)(v38 + 16);
  if (!v41) {
    goto LABEL_40;
  }
LABEL_37:
  if (v41 == 1)
  {
    uint64_t v42 = 0;
    double v43 = 0.0;
LABEL_44:
    uint64_t v46 = v41 - v42;
    id v47 = (double *)(v38 + 8 * v42 + 32);
    do
    {
      double v48 = *v47++;
      double v43 = v43 + v48;
      --v46;
    }
    while (v46);
    goto LABEL_46;
  }
  uint64_t v42 = v41 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v44 = (double *)(v38 + 40);
  double v43 = 0.0;
  uint64_t v45 = v41 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v43 = v43 + *(v44 - 1) + *v44;
    v44 += 2;
    v45 -= 2;
  }
  while (v45);
  if (v41 != v42) {
    goto LABEL_44;
  }
LABEL_46:
  swift_bridgeObjectRelease();
  return v43;
}

uint64_t SleepStage.id.getter(char a1)
{
  uint64_t result = 0x656B617761;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7065656C536D6572;
      break;
    case 2:
      unsigned int v3 = 1701998435;
      goto LABEL_5;
    case 3:
      unsigned int v3 = 1885693284;
LABEL_5:
      uint64_t result = v3 | 0x65656C5300000000;
      break;
    case 4:
      uint64_t result = 0x6669636570736E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SleepStage.rawValue.getter(char a1)
{
  uint64_t result = 0x656B617761;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7065656C536D6572;
      break;
    case 2:
      unsigned int v3 = 1701998435;
      goto LABEL_5;
    case 3:
      unsigned int v3 = 1885693284;
LABEL_5:
      uint64_t result = v3 | 0x65656C5300000000;
      break;
    case 4:
      uint64_t result = 0x6669636570736E75;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1AD90378C()
{
  qword_1EB725780 = (uint64_t)&unk_1F0469BC0;
}

uint64_t static SleepStage.visibleSleepStages.getter()
{
  if (qword_1EB725788 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

void *static SleepStage.allCases.getter()
{
  return &unk_1F046A398;
}

uint64_t sub_1AD903808@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s13SleepHealthUI0A5StageO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

void sub_1AD903838(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x656B617761;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x7065656C536D6572;
      goto LABEL_3;
    case 2:
      unsigned int v4 = 1701998435;
      goto LABEL_6;
    case 3:
      unsigned int v4 = 1885693284;
LABEL_6:
      *a1 = v4 | 0x65656C5300000000;
      a1[1] = 0xE900000000000070;
      break;
    case 4:
      *a1 = 0x6669636570736E75;
      a1[1] = 0xEB00000000646569;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1AD9038EC(void *a1@<X8>)
{
  *a1 = &unk_1F046A3C0;
}

uint64_t sub_1AD9038FC()
{
  return sub_1AD9DF830();
}

uint64_t sub_1AD90395C()
{
  return sub_1AD9DF820();
}

uint64_t sub_1AD9039AC(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x656B617761;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x656B617761;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v5 = 0x7065656C536D6572;
      break;
    case 2:
      unsigned int v6 = 1701998435;
      goto LABEL_5;
    case 3:
      unsigned int v6 = 1885693284;
LABEL_5:
      uint64_t v5 = v6 | 0x65656C5300000000;
      unint64_t v4 = 0xE900000000000070;
      break;
    case 4:
      uint64_t v5 = 0x6669636570736E75;
      unint64_t v4 = 0xEB00000000646569;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE500000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v7 = 0xE800000000000000;
      if (v5 == 0x7065656C536D6572) {
        goto LABEL_14;
      }
      goto LABEL_17;
    case 2:
      unint64_t v7 = 0xE900000000000070;
      if (v5 != 0x65656C5365726F63) {
        goto LABEL_17;
      }
      goto LABEL_14;
    case 3:
      uint64_t v2 = 0x65656C5370656564;
      unint64_t v7 = 0xE900000000000070;
      goto LABEL_13;
    case 4:
      unint64_t v7 = 0xEB00000000646569;
      if (v5 != 0x6669636570736E75) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v2) {
        goto LABEL_17;
      }
LABEL_14:
      if (v4 == v7) {
        char v8 = 1;
      }
      else {
LABEL_17:
      }
        char v8 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8 & 1;
  }
}

uint64_t sub_1AD903B84()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD903C78()
{
  sub_1AD9DF760();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD903D54()
{
  return sub_1AD9E03E0();
}

void sub_1AD903E44(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x656B617761;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x7065656C536D6572;
      goto LABEL_3;
    case 2:
      unsigned int v4 = 1701998435;
      goto LABEL_6;
    case 3:
      unsigned int v4 = 1885693284;
LABEL_6:
      *a1 = v4 | 0x65656C5300000000;
      a1[1] = 0xE900000000000070;
      break;
    case 4:
      *a1 = 0x6669636570736E75;
      a1[1] = 0xEB00000000646569;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

id sub_1AD903EF8(char a1)
{
  id v1 = objc_msgSend(self, *off_1E5E878B8[a1]);
  return v1;
}

uint64_t SleepStageSegment.sleepStage.getter()
{
  return *v0;
}

uint64_t SleepStageSegment.duration.getter()
{
  return sub_1AD9DC7A0();
}

uint64_t SleepStageSegment.id.getter()
{
  uint64_t v0 = sub_1AD9DCC70();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  unsigned int v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepStageSegment(0);
  sub_1AD9DC780();
  sub_1AD9093E8((unint64_t *)&qword_1EB725230, MEMORY[0x1E4F27928]);
  uint64_t v5 = sub_1AD9E0280();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5;
}

uint64_t SleepStageSegment.init(sleepStage:interval:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = a1;
  unsigned int v4 = &a3[*(int *)(type metadata accessor for SleepStageSegment(0) + 20)];
  uint64_t v5 = sub_1AD9DC7C0();
  unsigned int v6 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  return v6(v4, a2, v5);
}

uint64_t static SleepStageSegment.== infix(_:_:)(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x656B617761;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x656B617761;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v5 = 0x7065656C536D6572;
      break;
    case 2:
      unsigned int v6 = 1701998435;
      goto LABEL_5;
    case 3:
      unsigned int v6 = 1885693284;
LABEL_5:
      uint64_t v5 = v6 | 0x65656C5300000000;
      unint64_t v4 = 0xE900000000000070;
      break;
    case 4:
      uint64_t v5 = 0x6669636570736E75;
      unint64_t v4 = 0xEB00000000646569;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE500000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v7 = 0xE800000000000000;
      if (v5 == 0x7065656C536D6572) {
        goto LABEL_14;
      }
      goto LABEL_17;
    case 2:
      unint64_t v7 = 0xE900000000000070;
      if (v5 != 0x65656C5365726F63) {
        goto LABEL_17;
      }
      goto LABEL_14;
    case 3:
      uint64_t v2 = 0x65656C5370656564;
      unint64_t v7 = 0xE900000000000070;
      goto LABEL_13;
    case 4:
      unint64_t v7 = 0xEB00000000646569;
      if (v5 != 0x6669636570736E75) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v2) {
        goto LABEL_17;
      }
LABEL_14:
      if (v4 == v7)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
LABEL_17:
        char v8 = sub_1AD9E02D0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0) {
          return 0;
        }
      }
      type metadata accessor for SleepStageSegment(0);
      return sub_1AD9DC730();
  }
}

uint64_t SleepStageSegment.hash(into:)()
{
  return sub_1AD9DF650();
}

uint64_t sub_1AD90449C()
{
  if (*v0) {
    return 0x6C61767265746E69;
  }
  else {
    return 0x6174537065656C73;
  }
}

uint64_t sub_1AD9044DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1AD90BD44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD904504()
{
  return 0;
}

void sub_1AD904510(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1AD90451C(uint64_t a1)
{
  unint64_t v2 = sub_1AD909430();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1AD904558(uint64_t a1)
{
  unint64_t v2 = sub_1AD909430();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SleepStageSegment.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_1AD90C11C(0, &qword_1EB7250D8, (uint64_t (*)(void))sub_1AD909430, (uint64_t)&type metadata for SleepStageSegment.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v12 - v9;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1AD909430();
  sub_1AD9E0400();
  char v15 = *v3;
  char v14 = 0;
  sub_1AD909484();
  sub_1AD9E0270();
  if (!v2)
  {
    type metadata accessor for SleepStageSegment(0);
    char v13 = 1;
    sub_1AD9DC7C0();
    sub_1AD9093E8(&qword_1EB724F48, MEMORY[0x1E4F26E60]);
    sub_1AD9E0270();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t SleepStageSegment.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t SleepStageSegment.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v24 = sub_1AD9DC7C0();
  uint64_t v21 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24, v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD90C11C(0, &qword_1EB725BA8, (uint64_t (*)(void))sub_1AD909430, (uint64_t)&type metadata for SleepStageSegment.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v25 = v6;
  uint64_t v23 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = type metadata accessor for SleepStageSegment(0);
  MEMORY[0x1F4188790](v10, v11);
  char v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1AD909430();
  uint64_t v14 = v26;
  sub_1AD9E03F0();
  if (!v14)
  {
    uint64_t v26 = v10;
    uint64_t v16 = v23;
    uint64_t v15 = v24;
    char v28 = 0;
    sub_1AD9094D8();
    sub_1AD9E0240();
    uint64_t v20 = v13;
    unsigned char *v13 = v29;
    char v27 = 1;
    sub_1AD9093E8(&qword_1EB725670, MEMORY[0x1E4F26E60]);
    sub_1AD9E0240();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v25);
    uint64_t v18 = (uint64_t)v20;
    (*(void (**)(unsigned char *, char *, uint64_t))(v21 + 32))(&v20[*(int *)(v26 + 20)], v5, v15);
    sub_1AD9095D8(v18, v22, type metadata accessor for SleepStageSegment);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_1AD904C28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepStageSegment.init(from:)(a1, a2);
}

uint64_t sub_1AD904C40(void *a1)
{
  return SleepStageSegment.encode(to:)(a1);
}

uint64_t sub_1AD904C58(unsigned __int8 *a1, char *a2)
{
  if ((sub_1AD902644(*a1, *a2) & 1) == 0) {
    return 0;
  }
  return sub_1AD9DC730();
}

uint64_t sub_1AD904CCC()
{
  return sub_1AD9DF650();
}

uint64_t sub_1AD904E08()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD904F58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AD9DCC70();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DC780();
  sub_1AD9093E8((unint64_t *)&qword_1EB725230, MEMORY[0x1E4F27928]);
  uint64_t v7 = sub_1AD9E0280();
  uint64_t v9 = v8;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *a1 = v7;
  a1[1] = v9;
  return result;
}

uint64_t sub_1AD905080@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  sub_1AD838790();
  uint64_t v4 = v3;
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v23 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD90C11C(0, (unint64_t *)&unk_1EB725318, (uint64_t (*)(void))sub_1AD90C0C8, (uint64_t)&type metadata for SleepMetricsWrapper.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v8 = v7;
  uint64_t v21 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = type metadata accessor for SleepMetricsWrapper(0);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1AD90C0C8();
  uint64_t v16 = v24;
  sub_1AD9E03F0();
  if (!v16)
  {
    uint64_t v17 = v21;
    uint64_t v18 = v22;
    sub_1AD9093E8(&qword_1EB7252F8, (void (*)(uint64_t))sub_1AD838790);
    sub_1AD9E0240();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v23, v4);
    sub_1AD9095D8((uint64_t)v15, v20, type metadata accessor for SleepMetricsWrapper);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

unint64_t sub_1AD90535C()
{
  return 0xD000000000000013;
}

uint64_t sub_1AD905378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1AD90BE44(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_1AD9053A4(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1AD9053B0(uint64_t a1)
{
  unint64_t v2 = sub_1AD90C0C8();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1AD9053EC(uint64_t a1)
{
  unint64_t v2 = sub_1AD90C0C8();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1AD905428@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD905080(a1, a2);
}

uint64_t sub_1AD905440(void *a1)
{
  sub_1AD90C11C(0, &qword_1EB725348, (uint64_t (*)(void))sub_1AD90C0C8, (uint64_t)&type metadata for SleepMetricsWrapper.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1AD90C0C8();
  sub_1AD9E0400();
  sub_1AD838790();
  sub_1AD9093E8(&qword_1EB725338, (void (*)(uint64_t))sub_1AD838790);
  sub_1AD9E0270();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1AD9055EC()
{
  sub_1AD837214(0, (unint64_t *)&qword_1EB725C98);
  sub_1AD9096CC(&qword_1EB725310);
  return sub_1AD9DF450();
}

uint64_t sub_1AD905674()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD9056CC()
{
  sub_1AD838790();
  sub_1AD909640();
  return sub_1AD9DF650();
}

uint64_t sub_1AD905720()
{
  return sub_1AD9E03E0();
}

uint64_t SleepStagesModel.sleepStageSegments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SleepStagesModel.sleepMetrics.getter()
{
  sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v9 - v3;
  uint64_t v5 = type metadata accessor for SleepStagesModel(0);
  sub_1AD90C248(v0 + *(int *)(v5 + 20), (uint64_t)v4, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  uint64_t v6 = type metadata accessor for SleepMetricsWrapper(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1AD90C1D8((uint64_t)v4, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
    return 0;
  }
  else
  {
    sub_1AD838790();
    uint64_t v7 = sub_1AD9DF440();
    sub_1AD9098B4((uint64_t)v4, type metadata accessor for SleepMetricsWrapper);
  }
  return v7;
}

uint64_t SleepStagesModel.sleepInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepStagesModel(0);
  return sub_1AD90C248(v1 + *(int *)(v3 + 24), a1, &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
}

double SleepStagesModel.totalDuration.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for SleepStagesModel(0) + 28));
}

void SleepStagesModel.init(sleepStageSegments:sleepMetrics:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v3 = a2;
  *a3 = a1;
  if (a2)
  {
    uint64_t v6 = (int *)type metadata accessor for SleepStagesModel(0);
    uint64_t v7 = (char *)a3 + v6[5];
    sub_1AD837214(0, (unint64_t *)&qword_1EB725C98);
    swift_bridgeObjectRetain();
    id v3 = v3;
    sub_1AD9DF470();
    uint64_t v8 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  }
  else
  {
    uint64_t v6 = (int *)type metadata accessor for SleepStagesModel(0);
    uint64_t v9 = (char *)a3 + v6[5];
    uint64_t v10 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    swift_bridgeObjectRetain();
  }
  type metadata accessor for SleepStagesModel(0);
  sub_1AD853244(a1, (uint64_t)a3 + v6[6]);
  double v11 = sub_1AD853984(a1);
  swift_bridgeObjectRelease();

  *(double *)((char *)a3 + v6[7]) = v11;
}

uint64_t Collection<>.mergedIntervals()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1AD9DCC70();
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v71 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v70 = (char *)v56 - v13;
  sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = (char *)v56 - v16;
  uint64_t v18 = sub_1AD9DC7C0();
  uint64_t v59 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18, v19);
  uint64_t v69 = (char *)v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v68 = (char *)v56 - v24;
  uint64_t v26 = MEMORY[0x1F4188790](v23, v25);
  uint64_t v72 = (char *)v56 - v27;
  MEMORY[0x1F4188790](v26, v28);
  unint64_t v30 = (char *)v56 - v29;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = sub_1AD9DFE90();
  MEMORY[0x1F4188790](v32 - 8, v33);
  uint64_t v35 = (char *)v56 - v34;
  uint64_t v36 = sub_1AD9DFA20();
  if (v36 < 1)
  {
    uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
    return v54(a4, 1, 1, v18);
  }
  else
  {
    uint64_t v58 = a4;
    MEMORY[0x1F4188790](v36, v37);
    v56[-4] = a1;
    v56[-3] = a2;
    uint64_t v74 = a3;
    v56[-2] = a3;
    uint64_t v39 = sub_1AD902C74((void (*)(char *, char *))sub_1AD90952C, (uint64_t)&v56[-6], a1, v18, MEMORY[0x1E4FBC248], a2, MEMORY[0x1E4FBC278], v38);
    sub_1AD9DFA80();
    uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v35, 1, AssociatedTypeWitness);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(uint64_t))(v74 + 8))(AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v35, AssociatedTypeWitness);
      uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
      CGRect v57 = v30;
      uint64_t v66 = v42;
      uint64_t v67 = v59 + 16;
      v42(v72, (unint64_t)v30, v18);
      uint64_t v43 = *(void *)(v39 + 16);
      v56[1] = v39;
      if (v43)
      {
        unint64_t v44 = v39 + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
        unint64_t v45 = v59 + 56;
        uint64_t v62 = *(void *)(v59 + 72);
        uint64_t v63 = (unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
        uint64_t v60 = (void (**)(char *, uint64_t))(v59 + 8);
        long long v61 = (void (**)(char *, char *, uint64_t))(v59 + 32);
        swift_bridgeObjectRetain();
        uint64_t v64 = (void (**)(char *, void, uint64_t, uint64_t))v45;
        v56[0] = v45 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        uint64_t v46 = v61;
        double v48 = v68;
        id v47 = v69;
        while (1)
        {
          v66(v17, v44, v18);
          uint64_t v49 = (void (*)(void, void, void, void))*v64;
          (*v64)(v17, 0, 1, v18);
          if ((*v63)(v17, 1, v18) == 1) {
            break;
          }
          uint64_t v65 = v49;
          id v73 = *v46;
          v73(v48, v17, v18);
          uint64_t v74 = v43;
          uint64_t v50 = v72;
          sub_1AD9DC780();
          sub_1AD9DC750();
          sub_1AD9DC760();
          uint64_t v51 = *v60;
          (*v60)(v48, v18);
          v51(v50, v18);
          uint64_t v52 = v50;
          uint64_t v53 = v74;
          v73(v52, v47, v18);
          v44 += v62;
          uint64_t v43 = v53 - 1;
          if (!v43) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        uint64_t v65 = *(void (**)(void, void, void, void))(v59 + 56);
        v56[0] = (v59 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        swift_bridgeObjectRetain();
LABEL_12:
        uint64_t v49 = v65;
        v65(v17, 1, 1, v18);
      }
      swift_bridgeObjectRelease();
      uint64_t v55 = v58;
      (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v58, v72, v18);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v18);
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v49)(v55, 0, 1, v18);
    }
  }
  return result;
}

double Collection<>.totalDuration()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  uint64_t v8 = sub_1AD902C74((void (*)(char *, char *))sub_1AD9095B4, (uint64_t)v18, a1, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBC248], a2, MEMORY[0x1E4FBC278], a8);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    double v11 = 0.0;
    goto LABEL_10;
  }
  if (v9 == 1)
  {
    uint64_t v10 = 0;
    double v11 = 0.0;
LABEL_8:
    uint64_t v14 = v9 - v10;
    uint64_t v15 = (double *)(v8 + 8 * v10 + 32);
    do
    {
      double v16 = *v15++;
      double v11 = v11 + v16;
      --v14;
    }
    while (v14);
    goto LABEL_10;
  }
  uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v12 = (double *)(v8 + 40);
  double v11 = 0.0;
  uint64_t v13 = v9 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v11 = v11 + *(v12 - 1) + *v12;
    v12 += 2;
    v13 -= 2;
  }
  while (v13);
  if (v9 != v10) {
    goto LABEL_8;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t SleepStagesModel.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DC7C0();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v28 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8, v9);
  double v11 = (char *)&v27 - v10;
  uint64_t v12 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  double v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, v7);
  MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v20 = (char *)&v27 - v19;
  uint64_t v21 = *v2;
  swift_bridgeObjectRetain();
  sub_1AD8C639C(a1, v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = type metadata accessor for SleepStagesModel(0);
  sub_1AD90C248((uint64_t)v2 + *(int *)(v22 + 20), (uint64_t)v20, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v20, 1, v12) == 1)
  {
    sub_1AD9E03C0();
  }
  else
  {
    sub_1AD9095D8((uint64_t)v20, (uint64_t)v16, type metadata accessor for SleepMetricsWrapper);
    sub_1AD9E03C0();
    sub_1AD838790();
    sub_1AD909640();
    sub_1AD9DF650();
    sub_1AD9098B4((uint64_t)v16, type metadata accessor for SleepMetricsWrapper);
  }
  sub_1AD90C248((uint64_t)v2 + *(int *)(v22 + 24), (uint64_t)v11, &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
  uint64_t v24 = v29;
  uint64_t v23 = v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v11, 1, v30) == 1)
  {
    sub_1AD9E03C0();
  }
  else
  {
    uint64_t v25 = v28;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v28, v11, v23);
    sub_1AD9E03C0();
    sub_1AD9093E8(&qword_1EB725660, MEMORY[0x1E4F26E60]);
    sub_1AD9DF650();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v23);
  }
  return sub_1AD9E03D0();
}

unint64_t sub_1AD906618()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x746E497065656C73;
      break;
    case 3:
      unint64_t result = 0x7275446C61746F74;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1AD9066C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1AD90BECC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1AD9066EC(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1AD9066F8(uint64_t a1)
{
  unint64_t v2 = sub_1AD909720();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1AD906734(uint64_t a1)
{
  unint64_t v2 = sub_1AD909720();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SleepStagesModel.encode(to:)(void *a1)
{
  id v3 = v1;
  sub_1AD90C11C(0, &qword_1EB7250D0, (uint64_t (*)(void))sub_1AD909720, (uint64_t)&type metadata for SleepStagesModel.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = &v12[-v9];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1AD909720();
  sub_1AD9E0400();
  uint64_t v13 = *v3;
  v12[15] = 0;
  sub_1AD838420(0, &qword_1EB725D38, type metadata accessor for SleepStageSegment, MEMORY[0x1E4FBB320]);
  sub_1AD909774(&qword_1EB725078, qword_1EB724F50);
  sub_1AD9E0270();
  if (!v2)
  {
    type metadata accessor for SleepStagesModel(0);
    v12[14] = 1;
    type metadata accessor for SleepMetricsWrapper(0);
    sub_1AD9093E8(&qword_1EB725330, (void (*)(uint64_t))type metadata accessor for SleepMetricsWrapper);
    sub_1AD9E0250();
    v12[13] = 2;
    sub_1AD9DC7C0();
    sub_1AD9093E8(&qword_1EB724F48, MEMORY[0x1E4F26E60]);
    sub_1AD9E0250();
    v12[12] = 3;
    sub_1AD9E0260();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t SleepStagesModel.hashValue.getter()
{
  sub_1AD9E03A0();
  SleepStagesModel.hash(into:)((uint64_t)v1);
  return sub_1AD9E03E0();
}

uint64_t SleepStagesModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  id v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v29 = (char *)&v28 - v6;
  sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, v3);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)&v28 - v9;
  sub_1AD90C11C(0, &qword_1EB725BA0, (uint64_t (*)(void))sub_1AD909720, (uint64_t)&type metadata for SleepStagesModel.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v32 = v11;
  uint64_t v30 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = (int *)type metadata accessor for SleepStagesModel(0);
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1AD909720();
  uint64_t v31 = v14;
  uint64_t v19 = (uint64_t)v33;
  sub_1AD9E03F0();
  if (v19) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v33 = a1;
  uint64_t v20 = v30;
  uint64_t v21 = v18;
  sub_1AD838420(0, &qword_1EB725D38, type metadata accessor for SleepStageSegment, MEMORY[0x1E4FBB320]);
  char v37 = 0;
  sub_1AD909774(&qword_1EB725B40, &qword_1EB725760);
  uint64_t v22 = v32;
  uint64_t v23 = v31;
  sub_1AD9E0240();
  *uint64_t v21 = v38;
  type metadata accessor for SleepMetricsWrapper(0);
  char v36 = 1;
  sub_1AD9093E8(&qword_1EB725240, (void (*)(uint64_t))type metadata accessor for SleepMetricsWrapper);
  sub_1AD9E0220();
  sub_1AD909834((uint64_t)v10, (uint64_t)v21 + v15[5], qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  sub_1AD9DC7C0();
  char v35 = 2;
  sub_1AD9093E8(&qword_1EB725670, MEMORY[0x1E4F26E60]);
  uint64_t v24 = (uint64_t)v29;
  sub_1AD9E0220();
  sub_1AD909834(v24, (uint64_t)v21 + v15[6], &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
  char v34 = 3;
  sub_1AD9E0230();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v22);
  *(void *)((char *)v21 + v15[7]) = v26;
  sub_1AD90C2C8((uint64_t)v21, v28, type metadata accessor for SleepStagesModel);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
  return sub_1AD9098B4((uint64_t)v21, type metadata accessor for SleepStagesModel);
}

uint64_t sub_1AD9070C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepStagesModel.init(from:)(a1, a2);
}

uint64_t sub_1AD9070E0(void *a1)
{
  return SleepStagesModel.encode(to:)(a1);
}

uint64_t sub_1AD9070FC()
{
  sub_1AD9E03A0();
  SleepStagesModel.hash(into:)((uint64_t)v1);
  return sub_1AD9E03E0();
}

uint64_t sub_1AD907140()
{
  sub_1AD9E03A0();
  SleepStagesModel.hash(into:)((uint64_t)v1);
  return sub_1AD9E03E0();
}

void sub_1AD90717C(char a1)
{
  switch(a1)
  {
    case 1:
      id v2 = objc_msgSend(v1, sel_averageREMSleepDuration);
      break;
    case 2:
      id v2 = objc_msgSend(v1, sel_averageCoreSleepDuration);
      break;
    case 3:
      id v2 = objc_msgSend(v1, sel_averageDeepSleepDuration);
      break;
    case 4:
      id v2 = objc_msgSend(v1, sel_averageUnspecifiedSleepDuration);
      break;
    default:
      id v2 = objc_msgSend(v1, sel_averageAwakeDuration);
      break;
  }
  id v3 = v2;
  uint64_t v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, sel__value);
  }
}

void HKSleepDaySummary.sleepStagesModel.getter(unint64_t *a1@<X8>)
{
  unint64_t v3 = sub_1AD90749C();
  uint64_t v4 = self;
  sub_1AD909994(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD9E71F0;
  *(void *)(v5 + 32) = v1;
  sub_1AD9DF870();
  sub_1AD837214(0, (unint64_t *)&qword_1EB725340);
  id v6 = v1;
  uint64_t v7 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v4, sel_sleepMetricsForDaySummaries_, v7);

  *a1 = v3;
  uint64_t v9 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v10 = (char *)a1 + v9[5];
  if (v8)
  {
    sub_1AD837214(0, (unint64_t *)&qword_1EB725C98);
    swift_bridgeObjectRetain();
    id v11 = v8;
    sub_1AD9DF470();
    uint64_t v12 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 0, 1, v12);
  }
  else
  {
    uint64_t v13 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
    swift_bridgeObjectRetain();
  }
  sub_1AD853244(v3, (uint64_t)a1 + v9[6]);
  double v14 = sub_1AD853984(v3);
  swift_bridgeObjectRelease();

  *(double *)((char *)a1 + v9[7]) = v14;
}

unint64_t sub_1AD90749C()
{
  uint64_t v1 = v0;
  uint64_t v92 = sub_1AD9DCC70();
  uint64_t v2 = *(void *)(v92 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v92, v3);
  char v98 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v6);
  long long v97 = (char *)&v80 - v7;
  uint64_t v8 = type metadata accessor for SleepStageSegment(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v11, v14);
  long long v96 = (char *)&v80 - v16;
  MEMORY[0x1F4188790](v15, v17);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = sub_1AD9DC7C0();
  unint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v89 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23, v25);
  uint64_t v111 = (char *)&v80 - v26;
  sub_1AD838420(0, &qword_1EB725BD8, type metadata accessor for SleepStageSegment, MEMORY[0x1E4FBB718]);
  uint64_t v29 = MEMORY[0x1F4188790](v27 - 8, v28);
  uint64_t v103 = (uint64_t)&v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29, v31);
  uint64_t v32 = *(void (**)(void))(v9 + 56);
  uint64_t v109 = (uint64_t)&v80 - v33;
  char v101 = v32;
  uint64_t v102 = v9 + 56;
  v32();
  id v34 = objc_msgSend(v1, sel_periods);
  sub_1AD837214(0, &qword_1EB725BE0);
  unint64_t v35 = sub_1AD9DF860();

  unint64_t v83 = v35;
  if (v35 >> 62) {
    goto LABEL_66;
  }
  uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  char v37 = v96;
  if (v36)
  {
LABEL_3:
    char v107 = (unsigned __int8 *)v19;
    unint64_t v38 = 0;
    unint64_t v85 = v83 & 0xC000000000000001;
    uint64_t v82 = v83 & 0xFFFFFFFFFFFFFF8;
    unint64_t v81 = v83 + 32;
    char v100 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v91 = (char **)(v2 + 8);
    char v106 = (void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v88 = (void (**)(char *, char *, uint64_t))(v21 + 32);
    uint64_t v99 = (void (**)(unsigned char *, char *, uint64_t))(v21 + 16);
    unint64_t v39 = MEMORY[0x1E4FBC860];
    uint64_t v19 = v13;
    uint64_t v84 = v36;
    uint64_t v90 = v8;
    uint64_t v93 = v20;
    long long v94 = v13;
    uint64_t v95 = v9;
    while (1)
    {
      unint64_t v112 = v39;
      if (v85)
      {
        id v40 = (id)MEMORY[0x1B3E6BFF0](v38, v83);
      }
      else
      {
        if (v38 >= *(void *)(v82 + 16)) {
          goto LABEL_65;
        }
        id v40 = *(id *)(v81 + 8 * v38);
      }
      uint64_t v41 = v40;
      BOOL v42 = __OFADD__(v38, 1);
      unint64_t v43 = v38 + 1;
      if (v42) {
        goto LABEL_63;
      }
      id v44 = objc_msgSend(v40, sel_segments);
      sub_1AD837214(0, &qword_1EB725BE8);
      unint64_t v21 = sub_1AD9DF860();

      uint64_t v2 = v21;
      unint64_t v105 = v21;
      unint64_t v87 = v43;
      if (v21 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v2 = v105;
        uint64_t v45 = sub_1AD9E0190();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v45 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      id v86 = v41;
      if (v45) {
        break;
      }
LABEL_4:

      swift_bridgeObjectRelease();
      unint64_t v38 = v87;
      unint64_t v39 = v112;
      if (v87 == v84) {
        goto LABEL_68;
      }
    }
    if (v45 < 1) {
      goto LABEL_64;
    }
    uint64_t v13 = 0;
    unint64_t v108 = v2 & 0xC000000000000001;
    uint64_t v104 = v45;
    while (1)
    {
      if (v108) {
        id v46 = (id)MEMORY[0x1B3E6BFF0](v13, v2);
      }
      else {
        id v46 = *(id *)(v2 + 8 * (void)v13 + 32);
      }
      unint64_t v21 = (unint64_t)v46;
      id v47 = objc_msgSend(v46, sel_category);
      int v48 = 0;
      switch((unint64_t)v47)
      {
        case 1uLL:
          int v48 = 4;
          goto LABEL_25;
        case 2uLL:
          goto LABEL_25;
        case 3uLL:
          int v48 = 2;
          goto LABEL_25;
        case 4uLL:
          int v48 = 3;
          goto LABEL_25;
        case 5uLL:
          int v48 = 1;
LABEL_25:
          int v110 = v48;
          id v49 = objc_msgSend((id)v21, sel_dateInterval);
          sub_1AD9DC740();

          uint64_t v50 = v103;
          sub_1AD90C248(v109, v103, &qword_1EB725BD8, type metadata accessor for SleepStageSegment);
          if ((*v100)(v50, 1, v8) == 1)
          {
            sub_1AD90C1D8(v50, &qword_1EB725BD8, type metadata accessor for SleepStageSegment);
            goto LABEL_52;
          }
          uint64_t v51 = v50;
          uint64_t v52 = v107;
          sub_1AD9095D8(v51, (uint64_t)v107, type metadata accessor for SleepStageSegment);
          uint64_t v53 = *v52;
          unint64_t v54 = 0xE500000000000000;
          uint64_t v55 = 0x656B617761;
          switch(v53)
          {
            case 1:
              unint64_t v54 = 0xE800000000000000;
              uint64_t v55 = 0x7065656C536D6572;
              break;
            case 2:
              unsigned int v56 = 1701998435;
              goto LABEL_31;
            case 3:
              unsigned int v56 = 1885693284;
LABEL_31:
              uint64_t v55 = v56 | 0x65656C5300000000;
              unint64_t v54 = 0xE900000000000070;
              break;
            case 4:
              uint64_t v55 = 0x6669636570736E75;
              unint64_t v54 = 0xEB00000000646569;
              break;
            default:
              goto LABEL_33;
          }
          break;
        default:

          goto LABEL_16;
      }
LABEL_33:
      unint64_t v57 = 0xE500000000000000;
      uint64_t v58 = 0x656B617761;
      switch(v110)
      {
        case 1:
          unint64_t v57 = 0xE800000000000000;
          if (v55 == 0x7065656C536D6572) {
            goto LABEL_40;
          }
          goto LABEL_43;
        case 2:
          unint64_t v57 = 0xE900000000000070;
          if (v55 != 0x65656C5365726F63) {
            goto LABEL_43;
          }
          goto LABEL_40;
        case 3:
          uint64_t v58 = 0x65656C5370656564;
          unint64_t v57 = 0xE900000000000070;
          goto LABEL_39;
        case 4:
          unint64_t v57 = 0xEB00000000646569;
          if (v55 != 0x6669636570736E75) {
            goto LABEL_43;
          }
          goto LABEL_40;
        default:
LABEL_39:
          if (v55 != v58) {
            goto LABEL_43;
          }
LABEL_40:
          if (v54 == v57)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
LABEL_43:
            char v59 = sub_1AD9E02D0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v59 & 1) == 0)
            {
              sub_1AD9098B4((uint64_t)v107, type metadata accessor for SleepStageSegment);
              goto LABEL_51;
            }
          }
          uint64_t v20 = (uint64_t)v107;
          uint64_t v8 = (uint64_t)v97;
          sub_1AD9DC750();
          uint64_t v60 = v98;
          sub_1AD9DC780();
          uint64_t v2 = sub_1AD9DCC30();
          uint64_t v19 = *v91;
          long long v61 = v60;
          uint64_t v9 = v92;
          ((void (*)(char *, uint64_t))*v91)(v61, v92);
          ((void (*)(uint64_t, uint64_t))v19)(v8, v9);
          if ((v2 & 1) == 0)
          {
            sub_1AD9098B4(v20, type metadata accessor for SleepStageSegment);
            uint64_t v8 = v90;
LABEL_51:
            uint64_t v19 = v94;
            uint64_t v9 = v95;
            char v37 = v96;
            uint64_t v20 = v93;
            goto LABEL_52;
          }
          uint64_t v62 = v95;
          if (!*(void *)(v112 + 16))
          {
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            swift_bridgeObjectRetain();
            uint64_t v77 = sub_1AD9E0190();
            swift_bridgeObjectRelease();
            uint64_t v36 = v77;
            char v37 = v96;
            if (!v36) {
              goto LABEL_67;
            }
            goto LABEL_3;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v20 = (uint64_t)v94;
            uint64_t v63 = v112;
            uint64_t v64 = *(void *)(v112 + 16);
            if (!v64) {
              goto LABEL_62;
            }
          }
          else
          {
            uint64_t v63 = sub_1AD947F6C(v112);
            uint64_t v20 = (uint64_t)v94;
            uint64_t v64 = *(void *)(v63 + 16);
            if (!v64) {
              goto LABEL_62;
            }
          }
          uint64_t v65 = v64 - 1;
          uint64_t v9 = v62;
          unint64_t v66 = v63;
          sub_1AD9098B4(v63+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * (v64 - 1), type metadata accessor for SleepStageSegment);
          unint64_t v112 = v66;
          *(void *)(v66 + 16) = v65;
          sub_1AD9DC780();
          uint64_t v67 = v111;
          sub_1AD9DC750();
          uint64_t v68 = v89;
          sub_1AD9DC760();
          uint64_t v19 = (char *)v20;
          sub_1AD9098B4((uint64_t)v107, type metadata accessor for SleepStageSegment);
          uint64_t v20 = v93;
          (*v106)(v67, v93);
          (*v88)(v67, v68, v20);
          uint64_t v8 = v90;
          char v37 = v96;
LABEL_52:
          char v69 = v110;
          (*v99)(&v37[*(int *)(v8 + 20)], v111, v20);
          *char v37 = v69;
          sub_1AD90C2C8((uint64_t)v37, (uint64_t)v19, type metadata accessor for SleepStageSegment);
          uint64_t v70 = (uint64_t)v19;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v71 = v112;
          }
          else {
            unint64_t v71 = sub_1AD99AC18(0, *(void *)(v112 + 16) + 1, 1, v112);
          }
          unint64_t v73 = *(void *)(v71 + 16);
          unint64_t v72 = *(void *)(v71 + 24);
          if (v73 >= v72 >> 1) {
            unint64_t v71 = sub_1AD99AC18(v72 > 1, v73 + 1, 1, v71);
          }
          *(void *)(v71 + 16) = v73 + 1;
          unint64_t v74 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
          unint64_t v112 = v71;
          uint64_t v75 = v71 + v74 + *(void *)(v9 + 72) * v73;
          uint64_t v19 = (char *)v70;
          sub_1AD9095D8(v70, v75, type metadata accessor for SleepStageSegment);

          (*v106)(v111, v20);
          uint64_t v76 = v109;
          sub_1AD90C1D8(v109, &qword_1EB725BD8, type metadata accessor for SleepStageSegment);
          sub_1AD9095D8((uint64_t)v37, v76, type metadata accessor for SleepStageSegment);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v101)(v76, 0, 1, v8);
          uint64_t v45 = v104;
          uint64_t v2 = v105;
LABEL_16:
          if ((char *)v45 == ++v13) {
            goto LABEL_4;
          }
          break;
      }
    }
  }
LABEL_67:
  unint64_t v39 = MEMORY[0x1E4FBC860];
LABEL_68:
  unint64_t v78 = v39;
  swift_bridgeObjectRelease();
  sub_1AD90C1D8(v109, &qword_1EB725BD8, type metadata accessor for SleepStageSegment);
  return v78;
}

uint64_t _s13SleepHealthUI0A12StageSegmentV8interval10Foundation12DateIntervalVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepStageSegment(0) + 20);
  uint64_t v4 = sub_1AD9DC7C0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

unint64_t HKSleepDaySummary.sleepPeriodRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DC7C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  uint64_t v57 = v5;
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD838420(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v11 = MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v13 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14);
  unint64_t v16 = (unint64_t)v47 - v15;
  uint64_t v17 = sub_1AD9DCC70();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17, v19);
  uint64_t v53 = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v52 = (char *)v47 - v24;
  uint64_t v26 = MEMORY[0x1F4188790](v23, v25);
  uint64_t v51 = (char *)v47 - v27;
  MEMORY[0x1F4188790](v26, v28);
  uint64_t v55 = (char *)v47 - v29;
  id v30 = objc_msgSend(v2, sel_periods);
  sub_1AD837214(0, &qword_1EB725BE0);
  unint64_t v31 = sub_1AD9DF860();

  if (!(v31 >> 62))
  {
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    uint64_t v13 = (char *)v16;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = sub_1AD9E0190();
  swift_bridgeObjectRelease();
  if (!v46) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t v54 = a1;
  if ((v31 & 0xC000000000000001) != 0)
  {
    id v32 = (id)MEMORY[0x1B3E6BFF0](0, v31);
  }
  else
  {
    if (!*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_21;
    }
    id v32 = *(id *)(v31 + 32);
  }
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  id v34 = objc_msgSend(v33, sel_dateInterval);

  sub_1AD9DC740();
  sub_1AD9DC780();
  uint64_t v35 = v57 + 8;
  id v49 = *(void (**)(char *, uint64_t))(v57 + 8);
  v49(v8, v56);
  uint64_t v50 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v50(v16, 0, 1, v17);
  int v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v48((char *)v16, 1, v17) != 1)
  {
    uint64_t v57 = v35;
    v47[0] = *(void *)(v18 + 32);
    v47[1] = v18 + 32;
    ((void (*)(char *, unint64_t, uint64_t))v47[0])(v55, v16, v17);
    id v36 = objc_msgSend(v2, sel_periods);
    unint64_t v16 = sub_1AD9DF860();

    if (!(v16 >> 62))
    {
      uint64_t v37 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v37) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (v37)
    {
LABEL_10:
      unint64_t result = v37 - 1;
      if (__OFSUB__(v37, 1))
      {
        __break(1u);
      }
      else if ((v16 & 0xC000000000000001) == 0)
      {
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (result < *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v39 = *(id *)(v16 + 8 * result + 32);
          goto LABEL_15;
        }
        __break(1u);
        return result;
      }
      id v39 = (id)MEMORY[0x1B3E6BFF0](result, v16);
LABEL_15:
      id v40 = v39;
      swift_bridgeObjectRelease();
      id v41 = objc_msgSend(v40, sel_dateInterval);

      sub_1AD9DC740();
      sub_1AD9DC750();
      v49(v8, v56);
      v50((unint64_t)v13, 0, 1, v17);
      if (v48(v13, 1, v17) != 1)
      {
        BOOL v42 = v51;
        ((void (*)(char *, char *, uint64_t))v47[0])(v51, v13, v17);
        unint64_t v43 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
        id v44 = v55;
        v43(v52, v55, v17);
        v43(v53, v42, v17);
        sub_1AD9DC760();
        uint64_t v45 = *(void (**)(char *, uint64_t))(v18 + 8);
        v45(v42, v17);
        return ((uint64_t (*)(char *, uint64_t))v45)(v44, v17);
      }
      goto LABEL_23;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    v50((unint64_t)v13, 1, 1, v17);
LABEL_23:
    (*(void (**)(char *, uint64_t))(v18 + 8))(v55, v17);
    goto LABEL_24;
  }
  uint64_t v13 = (char *)v16;
LABEL_24:
  sub_1AD90C1D8((uint64_t)v13, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  return sub_1AD9DC7B0();
}

uint64_t sub_1AD908814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = sub_1AD9DC7C0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1AD908884@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v3 = sub_1AD9DC7C0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(a1 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8(AssociatedTypeWitness, a1);
  sub_1AD9DC7A0();
  uint64_t v11 = v10;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  void *v13 = v11;
  return result;
}

BOOL _s13SleepHealthUI0A11StagesModelV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v89 = a2;
  uint64_t v86 = sub_1AD9DC7C0();
  uint64_t v84 = *(void *)(v86 - 8);
  MEMORY[0x1F4188790](v86, v3);
  uint64_t v80 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26E60];
  sub_1AD90C330(0, (unint64_t *)&unk_1EB724D60, &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
  uint64_t v83 = v6;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v85 = (uint64_t)&v76 - v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD838420(0, &qword_1EB725CA0, v5, MEMORY[0x1E4FBB718]);
  uint64_t v12 = MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v82 = (uint64_t)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  uint64_t v17 = (char *)&v76 - v16;
  MEMORY[0x1F4188790](v15, v18);
  uint64_t v20 = (char *)&v76 - v19;
  uint64_t v21 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v87 = *(void *)(v21 - 8);
  uint64_t v88 = v21;
  MEMORY[0x1F4188790](v21, v22);
  uint64_t v24 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD90C330(0, &qword_1EB725248, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  uint64_t v26 = v25;
  MEMORY[0x1F4188790](v25, v27);
  uint64_t v29 = (char *)&v76 - v28;
  sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, v9);
  uint64_t v32 = MEMORY[0x1F4188790](v30 - 8, v31);
  id v34 = (char *)&v76 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v32, v35);
  unint64_t v38 = (char *)&v76 - v37;
  MEMORY[0x1F4188790](v36, v39);
  id v41 = (char *)&v76 - v40;
  BOOL v42 = v89;
  if ((sub_1AD8C21C4(*a1, *v89) & 1) == 0) {
    return 0;
  }
  uint64_t v76 = v24;
  uint64_t v77 = v34;
  uint64_t v79 = v17;
  unint64_t v81 = v20;
  uint64_t v43 = type metadata accessor for SleepStagesModel(0);
  uint64_t v44 = *(int *)(v43 + 20);
  unint64_t v78 = a1;
  sub_1AD90C248((uint64_t)a1 + v44, (uint64_t)v41, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  sub_1AD90C248((uint64_t)v42 + *(int *)(v43 + 20), (uint64_t)v38, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  uint64_t v45 = (uint64_t)&v29[*(int *)(v26 + 48)];
  sub_1AD90C248((uint64_t)v41, (uint64_t)v29, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  sub_1AD90C248((uint64_t)v38, v45, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  uint64_t v46 = v88;
  id v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
  if (v47((uint64_t)v29, 1, v88) != 1)
  {
    uint64_t v50 = (uint64_t)v77;
    sub_1AD90C248((uint64_t)v29, (uint64_t)v77, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
    int v51 = v47(v45, 1, v46);
    uint64_t v49 = (uint64_t)v81;
    if (v51 != 1)
    {
      uint64_t v56 = (uint64_t)v38;
      uint64_t v57 = (uint64_t)v76;
      sub_1AD9095D8(v45, (uint64_t)v76, type metadata accessor for SleepMetricsWrapper);
      sub_1AD837214(0, (unint64_t *)&qword_1EB725C98);
      sub_1AD9096CC(&qword_1EB725310);
      char v58 = sub_1AD9DF450();
      sub_1AD9098B4(v57, type metadata accessor for SleepMetricsWrapper);
      sub_1AD90C1D8(v56, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
      sub_1AD90C1D8((uint64_t)v41, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
      sub_1AD9098B4(v50, type metadata accessor for SleepMetricsWrapper);
      sub_1AD90C1D8((uint64_t)v29, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
      if ((v58 & 1) == 0) {
        return 0;
      }
      goto LABEL_9;
    }
    sub_1AD90C1D8((uint64_t)v38, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
    sub_1AD90C1D8((uint64_t)v41, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
    sub_1AD9098B4(v50, type metadata accessor for SleepMetricsWrapper);
LABEL_7:
    uint64_t v52 = &qword_1EB725248;
    uint64_t v53 = qword_1EB725C18;
    uint64_t v54 = type metadata accessor for SleepMetricsWrapper;
    uint64_t v55 = (uint64_t)v29;
LABEL_15:
    sub_1AD90C3A8(v55, v52, v53, v54);
    return 0;
  }
  sub_1AD90C1D8((uint64_t)v38, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  sub_1AD90C1D8((uint64_t)v41, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
  int v48 = v47(v45, 1, v46);
  uint64_t v49 = (uint64_t)v81;
  if (v48 != 1) {
    goto LABEL_7;
  }
  sub_1AD90C1D8((uint64_t)v29, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper);
LABEL_9:
  char v59 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26E60];
  sub_1AD90C248((uint64_t)v78 + *(int *)(v43 + 24), v49, &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
  uint64_t v88 = v43;
  uint64_t v60 = v89;
  uint64_t v61 = (uint64_t)v79;
  sub_1AD90C248((uint64_t)v89 + *(int *)(v43 + 24), (uint64_t)v79, &qword_1EB725CA0, v59);
  uint64_t v62 = v85;
  uint64_t v63 = v85 + *(int *)(v83 + 48);
  sub_1AD90C248(v49, v85, &qword_1EB725CA0, v59);
  sub_1AD90C248(v61, v63, &qword_1EB725CA0, v59);
  uint64_t v64 = v84;
  uint64_t v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  uint64_t v66 = v86;
  if (v65(v62, 1, v86) == 1)
  {
    uint64_t v67 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26E60];
    sub_1AD90C1D8(v61, &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
    sub_1AD90C1D8(v49, &qword_1EB725CA0, v67);
    if (v65(v63, 1, v66) == 1)
    {
      sub_1AD90C1D8(v62, &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
      return *(double *)((char *)v78 + *(int *)(v88 + 28)) == *(double *)((char *)v60 + *(int *)(v88 + 28));
    }
    goto LABEL_14;
  }
  uint64_t v68 = v82;
  sub_1AD90C248(v62, v82, &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
  if (v65(v63, 1, v66) == 1)
  {
    char v69 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26E60];
    sub_1AD90C1D8((uint64_t)v79, &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
    sub_1AD90C1D8((uint64_t)v81, &qword_1EB725CA0, v69);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v68, v66);
LABEL_14:
    uint64_t v52 = (unint64_t *)&unk_1EB724D60;
    uint64_t v53 = &qword_1EB725CA0;
    uint64_t v54 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26E60];
    uint64_t v55 = v62;
    goto LABEL_15;
  }
  uint64_t v71 = v68;
  unint64_t v72 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v80, v63, v66);
  sub_1AD9093E8(&qword_1EB725668, MEMORY[0x1E4F26E60]);
  char v73 = sub_1AD9DF6C0();
  unint64_t v74 = *(void (**)(char *, uint64_t))(v64 + 8);
  v74(v72, v66);
  uint64_t v75 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26E60];
  sub_1AD90C1D8((uint64_t)v79, &qword_1EB725CA0, MEMORY[0x1E4F26E60]);
  sub_1AD90C1D8((uint64_t)v81, &qword_1EB725CA0, v75);
  v74((char *)v71, v66);
  sub_1AD90C1D8(v62, &qword_1EB725CA0, v75);
  if (v73) {
    return *(double *)((char *)v78 + *(int *)(v88 + 28)) == *(double *)((char *)v60 + *(int *)(v88 + 28));
  }
  return 0;
}

uint64_t _s13SleepHealthUI0A5StageO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0 = sub_1AD9E0210();
  swift_bridgeObjectRelease();
  if (v0 >= 5) {
    return 5;
  }
  else {
    return v0;
  }
}

uint64_t type metadata accessor for SleepStageSegment(uint64_t a1)
{
  return sub_1AD8372AC(a1, qword_1EB725CA8);
}

uint64_t sub_1AD9093E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD909430()
{
  unint64_t result = qword_1EB725738;
  if (!qword_1EB725738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725738);
  }
  return result;
}

unint64_t sub_1AD909484()
{
  unint64_t result = qword_1EB725010;
  if (!qword_1EB725010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725010);
  }
  return result;
}

unint64_t sub_1AD9094D8()
{
  unint64_t result = qword_1EB725798;
  if (!qword_1EB725798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725798);
  }
  return result;
}

uint64_t sub_1AD90952C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v2(AssociatedTypeWitness, v1);
}

uint64_t sub_1AD9095B4@<X0>(void *a1@<X8>)
{
  return sub_1AD908884(*(void *)(v1 + 32), a1);
}

uint64_t sub_1AD9095D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1AD909640()
{
  unint64_t result = qword_1EB7252F0;
  if (!qword_1EB7252F0)
  {
    sub_1AD838790();
    sub_1AD9096CC(&qword_1EB725308);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB7252F0);
  }
  return result;
}

uint64_t sub_1AD9096CC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD837214(255, (unint64_t *)&qword_1EB725C98);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD909720()
{
  unint64_t result = qword_1EB725698;
  if (!qword_1EB725698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725698);
  }
  return result;
}

uint64_t sub_1AD909774(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD838420(255, &qword_1EB725D38, type metadata accessor for SleepStageSegment, MEMORY[0x1E4FBB320]);
    sub_1AD9093E8(a2, (void (*)(uint64_t))type metadata accessor for SleepStageSegment);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD909834(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1AD838420(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1AD9098B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1AD909918()
{
  unint64_t result = qword_1E9A4BDF0;
  if (!qword_1E9A4BDF0)
  {
    sub_1AD909994(255, &qword_1E9A49BB0, (uint64_t)&type metadata for SleepStage, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BDF0);
  }
  return result;
}

void sub_1AD909994(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1AD9099E4()
{
  unint64_t result = qword_1E9A4BDF8;
  if (!qword_1E9A4BDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BDF8);
  }
  return result;
}

uint64_t sub_1AD909A38()
{
  return sub_1AD9093E8(&qword_1EB725238, (void (*)(uint64_t))type metadata accessor for SleepStageSegment);
}

uint64_t sub_1AD909A80()
{
  return sub_1AD9093E8(&qword_1EB724D78, (void (*)(uint64_t))type metadata accessor for SleepStagesModel);
}

unsigned char *storeEnumTagSinglePayload for SleepStage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD909B94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStage()
{
  return &type metadata for SleepStage;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepStageSegment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    unsigned int v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_1AD9DC7C0();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for SleepStageSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_1AD9DC7C0();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

unsigned char *initializeWithCopy for SleepStageSegment(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = sub_1AD9DC7C0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithCopy for SleepStageSegment(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = sub_1AD9DC7C0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *initializeWithTake for SleepStageSegment(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = sub_1AD9DC7C0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithTake for SleepStageSegment(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = sub_1AD9DC7C0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStageSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD909F04);
}

uint64_t sub_1AD909F04(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 251)
  {
    unsigned int v4 = *a1;
    if (v4 >= 5) {
      return v4 - 4;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_1AD9DC7C0();
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 20)];
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SleepStageSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD909FC0);
}

unsigned char *sub_1AD909FC0(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 251)
  {
    *unint64_t result = a2 + 4;
  }
  else
  {
    uint64_t v7 = sub_1AD9DC7C0();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1AD90A064()
{
  uint64_t result = sub_1AD9DC7C0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepStagesModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SleepMetricsWrapper(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      sub_1AD838790();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v9, v10, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = (char *)v7 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = sub_1AD9DC7C0();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(uint64_t *)((char *)v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return v7;
}

uint64_t destroy for SleepStagesModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    sub_1AD838790();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = sub_1AD9DC7C0();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

void *initializeWithCopy for SleepStagesModel(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    sub_1AD838790();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v7, v8, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_1AD9DC7C0();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *assignWithCopy for SleepStagesModel(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      sub_1AD838790();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1AD9098B4((uint64_t)v7, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD838790();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24))(v7, v8, v26);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *initializeWithTake for SleepStagesModel(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    sub_1AD838790();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v7, v8, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = sub_1AD9DC7C0();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *assignWithTake for SleepStagesModel(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      sub_1AD838790();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v7, v8, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1AD9098B4((uint64_t)v7, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD838790();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 40))(v7, v8, v26);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStagesModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD90B1B0);
}

uint64_t sub_1AD90B1B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for SleepStagesModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD90B350);
}

void *sub_1AD90B350(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    sub_1AD838420(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      sub_1AD838420(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t dispatch thunk of DateIntervalProviding.dateInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t getEnumTagSinglePayload for LockScreenContentState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SleepStagesModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD90B64CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesModel.CodingKeys()
{
  return &type metadata for SleepStagesModel.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SleepStageSegment.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD90B750);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStageSegment.CodingKeys()
{
  return &type metadata for SleepStageSegment.CodingKeys;
}

uint64_t sub_1AD90B788(uint64_t a1, uint64_t a2)
{
  sub_1AD838790();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t sub_1AD90B7F4(uint64_t a1)
{
  sub_1AD838790();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t sub_1AD90B858(uint64_t a1, uint64_t a2)
{
  sub_1AD838790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1AD90B8BC(uint64_t a1, uint64_t a2)
{
  sub_1AD838790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1AD90B920(uint64_t a1, uint64_t a2)
{
  sub_1AD838790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1AD90B984(uint64_t a1, uint64_t a2)
{
  sub_1AD838790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1AD90B9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD90B9FC);
}

uint64_t sub_1AD90B9FC(uint64_t a1, uint64_t a2)
{
  sub_1AD838790();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_1AD90BA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD90BA7C);
}

uint64_t sub_1AD90BA7C(uint64_t a1, uint64_t a2)
{
  sub_1AD838790();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_1AD90BAEC()
{
  return sub_1AD9093E8(&qword_1E9A4BE00, (void (*)(uint64_t))type metadata accessor for SleepMetricsWrapper);
}

unint64_t sub_1AD90BB38()
{
  unint64_t result = qword_1E9A4BE08;
  if (!qword_1E9A4BE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BE08);
  }
  return result;
}

unint64_t sub_1AD90BB90()
{
  unint64_t result = qword_1E9A4BE10;
  if (!qword_1E9A4BE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BE10);
  }
  return result;
}

unint64_t sub_1AD90BBE8()
{
  unint64_t result = qword_1EB7256A8[0];
  if (!qword_1EB7256A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB7256A8);
  }
  return result;
}

unint64_t sub_1AD90BC40()
{
  unint64_t result = qword_1EB7256A0;
  if (!qword_1EB7256A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB7256A0);
  }
  return result;
}

unint64_t sub_1AD90BC98()
{
  unint64_t result = qword_1EB725748;
  if (!qword_1EB725748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725748);
  }
  return result;
}

unint64_t sub_1AD90BCF0()
{
  unint64_t result = qword_1EB725740;
  if (!qword_1EB725740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725740);
  }
  return result;
}

uint64_t sub_1AD90BD44(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6174537065656C73 && a2 == 0xEA00000000006567;
  if (v2 || (sub_1AD9E02D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1AD90BE44(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001AD9F3C00)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1AD90BECC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001AD9F3B20 || (sub_1AD9E02D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001AD9F3B40 || (sub_1AD9E02D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E497065656C73 && a2 == 0xED00006C61767265 || (sub_1AD9E02D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7275446C61746F74 && a2 == 0xED00006E6F697461)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1AD90C0C8()
{
  unint64_t result = qword_1EB725BF0;
  if (!qword_1EB725BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725BF0);
  }
  return result;
}

void sub_1AD90C11C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_1AD90C184()
{
  unint64_t result = qword_1EB725790;
  if (!qword_1EB725790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725790);
  }
  return result;
}

uint64_t sub_1AD90C1D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1AD838420(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1AD90C248(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1AD838420(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1AD90C2C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1AD90C330(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_1AD838420(255, a3, a4, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_1AD90C3A8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1AD90C330(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for SleepMetricsWrapper.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1AD90C4A0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepMetricsWrapper.CodingKeys()
{
  return &type metadata for SleepMetricsWrapper.CodingKeys;
}

unint64_t sub_1AD90C4DC()
{
  unint64_t result = qword_1E9A4BE18;
  if (!qword_1E9A4BE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BE18);
  }
  return result;
}

unint64_t sub_1AD90C534()
{
  unint64_t result = qword_1EB725C00;
  if (!qword_1EB725C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725C00);
  }
  return result;
}

unint64_t sub_1AD90C58C()
{
  unint64_t result = qword_1EB725BF8;
  if (!qword_1EB725BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725BF8);
  }
  return result;
}

uint64_t sub_1AD90C5EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t sub_1AD90C624(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DE460();
  MEMORY[0x1F4188790](v4, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_1AD9DE470();
}

uint64_t sub_1AD90C71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1AD9DE460();
  MEMORY[0x1F4188790](v5, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_1AD9DE470();
}

uint64_t View.animateTransitionIfSupported<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v62 = a7;
  LODWORD(v60) = a1;
  uint64_t v11 = *(char **)(a3 - 8);
  uint64_t v57 = a2;
  char v58 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v53 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)&v53 - v15;
  uint64_t v55 = sub_1AD9DE070();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55, v17);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8608B8(255);
  uint64_t v20 = sub_1AD9DDFC0();
  uint64_t v56 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v21);
  int v23 = (char *)&v53 - v22;
  uint64_t v24 = sub_1AD911CD8(&qword_1EB7252B0, sub_1AD8608B8);
  uint64_t v63 = a5;
  uint64_t v74 = a5;
  uint64_t v75 = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v64 = v20;
  uint64_t v65 = WitnessTable;
  uint64_t v70 = v20;
  uint64_t v71 = a4;
  uint64_t v66 = a6;
  uint64_t v67 = a4;
  uint64_t v72 = WitnessTable;
  uint64_t v73 = a6;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v27 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](OpaqueTypeMetadata2, v28);
  uint64_t v31 = (char *)&v53 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29, v32);
  id v34 = (char *)&v53 - v33;
  uint64_t v59 = sub_1AD9DE480();
  uint64_t v35 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59, v36);
  unint64_t v38 = (char *)&v53 - v37;
  if (v60)
  {
    sub_1AD9DE060();
    char v58 = v34;
    sub_1AD90F75C();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v19, v55);
    sub_1AD9DF330();
    uint64_t v39 = v64;
    uint64_t v57 = a3;
    uint64_t v60 = v35;
    uint64_t v61 = v38;
    uint64_t v40 = v65;
    uint64_t v41 = v27;
    uint64_t v42 = v66;
    sub_1AD9DEB10();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v23, v39);
    uint64_t v70 = v39;
    uint64_t v71 = v67;
    uint64_t v72 = v40;
    uint64_t v73 = v42;
    uint64_t v35 = v60;
    unint64_t v38 = v61;
    swift_getOpaqueTypeConformance2();
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
    uint64_t v44 = v58;
    v43(v58, v31, OpaqueTypeMetadata2);
    uint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
    v45(v31, OpaqueTypeMetadata2);
    v43(v31, v44, OpaqueTypeMetadata2);
    uint64_t v46 = v63;
    sub_1AD90C624((uint64_t)v31, OpaqueTypeMetadata2);
    v45(v31, OpaqueTypeMetadata2);
    v45(v44, OpaqueTypeMetadata2);
  }
  else
  {
    id v47 = v58;
    int v48 = (void (*)(char *, char *, uint64_t))*((void *)v58 + 2);
    v48(v16, v61, a3);
    uint64_t v49 = (uint64_t)v53;
    v48(v53, v16, a3);
    uint64_t v70 = v64;
    uint64_t v71 = v67;
    uint64_t v72 = v65;
    uint64_t v73 = v66;
    swift_getOpaqueTypeConformance2();
    uint64_t v46 = v63;
    sub_1AD90C71C(v49, OpaqueTypeMetadata2, a3);
    uint64_t v50 = (void (*)(uint64_t, uint64_t))*((void *)v47 + 1);
    v50(v49, a3);
    v50((uint64_t)v16, a3);
  }
  uint64_t v70 = v64;
  uint64_t v71 = v67;
  uint64_t v72 = v65;
  uint64_t v73 = v66;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v69 = v46;
  uint64_t v51 = v59;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v62, v38, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, v51);
}

uint64_t View.applyBaselinePaddingOffset(for:in:canOverflow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v39 = a6;
  uint64_t v40 = a5;
  LODWORD(v36) = a3;
  v35[1] = a2;
  v35[2] = a1;
  uint64_t v7 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1, a2);
  unint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)v35 - v12;
  uint64_t v14 = sub_1AD9DDFC0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v19 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v20);
  uint64_t v22 = (char *)v35 - v21;
  uint64_t v23 = sub_1AD9DE480();
  uint64_t v38 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23, v24);
  uint64_t v26 = (char *)v35 - v25;
  if (v36)
  {
    sub_1AD9DE7A0();
    sub_1AD9DE7F0();
    uint64_t v36 = v23;
    uint64_t v27 = v40;
    sub_1AD9DEDD0();
    uint64_t v41 = v27;
    uint64_t v42 = MEMORY[0x1E4F3CAA8];
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v28(v22, v19, v14);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v15 + 8);
    v29(v19, v14);
    v28(v19, v22, v14);
    uint64_t v23 = v36;
    sub_1AD90C624((uint64_t)v19, v14);
    v29(v19, v14);
    v29(v22, v14);
  }
  else
  {
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v30(v13, WitnessTable, a4);
    v30(v10, (uint64_t)v13, a4);
    uint64_t v47 = v40;
    uint64_t v48 = MEMORY[0x1E4F3CAA8];
    swift_getWitnessTable();
    sub_1AD90C71C((uint64_t)v10, v14, a4);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v7 + 8);
    v31(v10, a4);
    v31(v13, a4);
  }
  uint64_t v32 = v40;
  uint64_t v45 = v40;
  uint64_t v46 = MEMORY[0x1E4F3CAA8];
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = v32;
  swift_getWitnessTable();
  uint64_t v33 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v39, v26, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v26, v23);
}

uint64_t View.hidden(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v41 = a3;
  LODWORD(v37) = a1;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = sub_1AD9DDFC0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v18);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v21 = sub_1AD9DE480();
  uint64_t v39 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21, v22);
  uint64_t v24 = (char *)&v36 - v23;
  if (v37)
  {
    uint64_t v37 = v21;
    uint64_t v25 = v41;
    sub_1AD9DED90();
    unint64_t v26 = sub_1AD90F7D0();
    uint64_t v42 = v25;
    unint64_t v43 = v26;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v27(v20, v17, v12);
    uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
    v28(v17, v12);
    v27(v17, v20, v12);
    uint64_t v21 = v37;
    sub_1AD90C624((uint64_t)v17, v12);
    v28(v17, v12);
    v28(v20, v12);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v11, WitnessTable, a2);
    v29(v8, (uint64_t)v11, a2);
    unint64_t v30 = sub_1AD90F7D0();
    uint64_t v48 = v41;
    unint64_t v49 = v30;
    swift_getWitnessTable();
    sub_1AD90C71C((uint64_t)v8, v12, a2);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v8, a2);
    v31(v11, a2);
  }
  unint64_t v32 = sub_1AD90F7D0();
  uint64_t v33 = v41;
  uint64_t v46 = v41;
  unint64_t v47 = v32;
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v45 = v33;
  swift_getWitnessTable();
  uint64_t v34 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v40, v24, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v24, v21);
}

uint64_t View.horizontallyCenter()(uint64_t a1, uint64_t a2)
{
  return sub_1AD90D794(a1, a2, MEMORY[0x1E4F3D380], (uint64_t)sub_1AD911D24, MEMORY[0x1E4F3ED30]);
}

uint64_t View.verticallyCenter()(uint64_t a1, uint64_t a2)
{
  return sub_1AD90D794(a1, a2, MEMORY[0x1E4F3D618], (uint64_t)sub_1AD90F824, MEMORY[0x1E4F3EDC0]);
}

uint64_t sub_1AD90D794(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, void, void, uint64_t, void *, uint64_t, uint64_t))
{
  v11[2] = a1;
  v11[3] = a2;
  uint64_t v7 = a3();
  swift_getTupleTypeMetadata3();
  uint64_t v8 = sub_1AD9DF350();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a5(v7, 0, 0, a4, v11, v8, WitnessTable);
}

uint64_t View.eraseToAnyView()(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  return sub_1AD9DF1B0();
}

uint64_t View.gradientForeground(colors:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1AD90F844();
  uint64_t v4 = sub_1AD9DDFC0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v12 - v7;
  uint64_t v9 = swift_bridgeObjectRetain();
  MEMORY[0x1B3E6B280](v9);
  sub_1AD9DF390();
  sub_1AD9DF3A0();
  sub_1AD9DDF00();
  long long v13 = v16[0];
  long long v14 = v16[1];
  uint64_t v15 = v17;
  sub_1AD9DE780();
  sub_1AD9DEDB0();
  sub_1AD90F8A4((uint64_t)v16);
  uint64_t v10 = sub_1AD911CD8(&qword_1E9A4BE28, (void (*)(uint64_t))sub_1AD90F844);
  v12[0] = a3;
  v12[1] = v10;
  swift_getWitnessTable();
  sub_1AD9DED50();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t View.removed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = a1;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  long long v14 = (char *)v24 - v13;
  uint64_t v15 = sub_1AD9DE480();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15, v17);
  uint64_t v20 = (char *)v24 - v19;
  if (v6)
  {
    sub_1AD90C624(v18, MEMORY[0x1E4F3F058]);
  }
  else
  {
    v24[0] = a4;
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v21(v14, (char *)v24[1], a2);
    v21(v11, v14, a2);
    sub_1AD90C71C((uint64_t)v11, MEMORY[0x1E4F3F058], a2);
    uint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v11, a2);
    v22(v14, a2);
    a4 = v24[0];
  }
  v24[2] = MEMORY[0x1E4F3F050];
  v24[3] = a3;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(a4, v20, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v15);
}

uint64_t View.addBorder<A>(_:width:cornerRadius:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D1>)
{
  uint64_t v36 = a1;
  uint64_t v31 = a2;
  uint64_t v32 = a5;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v38 = a6;
  uint64_t v10 = sub_1AD9DE020();
  uint64_t v11 = (void (*)(uint64_t))MEMORY[0x1E4F3CDB8];
  uint64_t v33 = sub_1AD911CD8(qword_1E9A4BE30, MEMORY[0x1E4F3CDB8]);
  uint64_t v41 = v10;
  uint64_t v42 = a3;
  uint64_t v43 = MEMORY[0x1E4F3F058];
  uint64_t v44 = v33;
  uint64_t v45 = a5;
  uint64_t v46 = MEMORY[0x1E4F3F050];
  uint64_t v12 = sub_1AD9DE4C0();
  uint64_t v37 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (char *)&v31 - v14;
  sub_1AD87DCCC();
  uint64_t v16 = sub_1AD9DDFC0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v16, v18);
  uint64_t v21 = (char *)&v31 - v20;
  MEMORY[0x1F4188790](v19, v22);
  uint64_t v24 = (double *)((char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = (char *)v24 + *(int *)(v10 + 20);
  uint64_t v26 = *MEMORY[0x1E4F3D4A0];
  uint64_t v27 = sub_1AD9DE2D0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v25, v26, v27);
  *uint64_t v24 = a7;
  v24[1] = a7;
  sub_1AD911CD8(&qword_1E9A4A1B8, v11);
  uint64_t v28 = v35;
  sub_1AD9DEE00();
  sub_1AD90E164(v36, 1, v10, v34, v33, v32, (uint64_t)v15);
  sub_1AD9DF320();
  uint64_t v29 = sub_1AD911CD8(&qword_1E9A4A1E8, (void (*)(uint64_t))sub_1AD87DCCC);
  uint64_t v39 = v28;
  uint64_t v40 = v29;
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_1AD9DEDC0();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
  return sub_1AD9119B8((uint64_t)v24, MEMORY[0x1E4F3CDB8]);
}

uint64_t sub_1AD90E164@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_1AD9DDD40();
  sub_1AD911064(a1, (uint64_t)v15, a2, a3, a4, a5, a6, a7);
  return sub_1AD911A18((uint64_t)v15);
}

uint64_t View.pushToLeadingEdge()(uint64_t a1, uint64_t a2)
{
  return sub_1AD90E4C4(a1, a2, MEMORY[0x1E4F3D380], (uint64_t)sub_1AD90F8D0, MEMORY[0x1E4F3ED30]);
}

uint64_t View.pushToTrailingEdge()()
{
  return sub_1AD9DF0D0();
}

uint64_t sub_1AD90E308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1, a1);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v15 - v10;
  uint64_t v12 = *(void (**)(char *))(v5 + 16);
  v12((char *)v15 - v10);
  uint64_t v17 = 0;
  char v18 = 0;
  v19[0] = &v17;
  ((void (*)(char *, char *, uint64_t))v12)(v8, v11, a2);
  v19[1] = v8;
  v16[0] = MEMORY[0x1E4F3EDA0];
  v16[1] = a2;
  v15[0] = MEMORY[0x1E4F3ED90];
  v15[1] = a3;
  sub_1AD9656C4((uint64_t)v19, 2uLL, (uint64_t)v16);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, a2);
}

uint64_t View.pushToTop()(uint64_t a1, uint64_t a2)
{
  return sub_1AD90E4C4(a1, a2, MEMORY[0x1E4F3D618], (uint64_t)sub_1AD911D28, MEMORY[0x1E4F3EDC0]);
}

uint64_t sub_1AD90E4C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, void, void, uint64_t, void *, uint64_t, uint64_t))
{
  v11[2] = a1;
  v11[3] = a2;
  uint64_t v7 = a3();
  swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_1AD9DF350();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a5(v7, 0, 0, a4, v11, v8, WitnessTable);
}

uint64_t sub_1AD90E58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1, a1);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v15 - v10;
  uint64_t v12 = *(void (**)(char *))(v5 + 16);
  v12((char *)v15 - v10);
  ((void (*)(char *, char *, uint64_t))v12)(v8, v11, a2);
  uint64_t v17 = 0;
  char v18 = 0;
  v19[0] = v8;
  v19[1] = &v17;
  v16[0] = a2;
  v16[1] = MEMORY[0x1E4F3EDA0];
  v15[0] = a3;
  v15[1] = MEMORY[0x1E4F3ED90];
  sub_1AD9656C4((uint64_t)v19, 2uLL, (uint64_t)v16);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, a2);
}

uint64_t sub_1AD90E704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1, a1);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v15 - v10;
  uint64_t v12 = *(void (**)(char *))(v5 + 16);
  v12((char *)v15 - v10);
  uint64_t v19 = 0;
  char v20 = 0;
  v21[0] = &v19;
  ((void (*)(char *, char *, uint64_t))v12)(v8, v11, a2);
  uint64_t v17 = 0;
  char v18 = 0;
  v21[1] = v8;
  v21[2] = &v17;
  v16[0] = MEMORY[0x1E4F3EDA0];
  v16[1] = a2;
  void v16[2] = MEMORY[0x1E4F3EDA0];
  v15[1] = MEMORY[0x1E4F3ED90];
  void v15[2] = a3;
  v15[3] = MEMORY[0x1E4F3ED90];
  sub_1AD9656C4((uint64_t)v21, 3uLL, (uint64_t)v16);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, a2);
}

uint64_t View.scrollable(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v17[1] = a3;
  uint64_t v6 = sub_1AD9DE4A0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AD9DDCD0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)v17 - v14;
  v17[4] = a1;
  v17[5] = a2;
  uint64_t v18 = v3;
  sub_1AD9DDCE0();
  sub_1AD9DE490();
  LOBYTE(a1) = sub_1AD9DE760();
  sub_1AD9DE750();
  sub_1AD9DE750();
  if (sub_1AD9DE750() != a1) {
    sub_1AD9DE750();
  }
  swift_getWitnessTable();
  sub_1AD9DED10();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_1AD90EABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void (**)(char *))(v5 + 16);
  v8(v7);
  ((void (*)(uint64_t, char *, uint64_t))v8)(a3, v7, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t LeadingContentGroup.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t LeadingContentGroup.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_getTupleTypeMetadata2();
  sub_1AD9DF350();
  swift_getWitnessTable();
  uint64_t v5 = sub_1AD9DF0E0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v17 - v12;
  View.pushToLeadingEdge()(v4, *(void *)(a1 + 24));
  swift_getWitnessTable();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v14(v13, v10, v5);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v10, v5);
  v14(a2, v13, v5);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v5);
}

uint64_t VerticallyCenteredContentGroup.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_getTupleTypeMetadata3();
  sub_1AD9DF350();
  swift_getWitnessTable();
  uint64_t v5 = sub_1AD9DF180();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v17 - v12;
  View.verticallyCenter()(v4, *(void *)(a1 + 24));
  swift_getWitnessTable();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v14(v13, v10, v5);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v10, v5);
  v14(a2, v13, v5);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v5);
}

uint64_t sub_1AD90EF5C@<X0>(uint64_t a1@<X8>)
{
  sub_1AD85F688();
  swift_bridgeObjectRetain();
  uint64_t result = sub_1AD9DEAF0();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1AD90EFC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1Tm(a1, v7);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v8 + 8);
  sub_1AD8CB060(a3);
  v10(a2, sub_1AD910E04, v9, v7, v8);
  return swift_release();
}

uint64_t (*sub_1AD90F098(uint64_t (*result)(void)))(void)
{
  if (result) {
    return (uint64_t (*)(void))result();
  }
  return result;
}

uint64_t sub_1AD90F0C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD911030(0);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1AD9DEAA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t KeyPath = swift_getKeyPath();
  sub_1AD9117D0();
  uint64_t v11 = (uint64_t *)(a2 + *(int *)(v10 + 36));
  sub_1AD9118BC(0);
  sub_1AD911954((uint64_t)v7, (uint64_t)v11 + *(int *)(v12 + 28));
  *uint64_t v11 = KeyPath;
  sub_1AD91185C(0, &qword_1E9A4BF80, (void (*)(void))sub_1AD8C8D64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a2, a1, v13);
  return sub_1AD9119B8((uint64_t)v7, (uint64_t (*)(void))sub_1AD911030);
}

uint64_t sub_1AD90F23C(void (*a1)(uint64_t))
{
  sub_1AD8F3744();
  uint64_t result = sub_1AD9DF050();
  if ((v3 & 1) == 0)
  {
    a1(result);
    return sub_1AD9DF060();
  }
  return result;
}

uint64_t sub_1AD90F2D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  char v7 = *((unsigned char *)v2 + 16);
  uint64_t v8 = v2[3];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = v5;
  *(unsigned char *)(v9 + 32) = v7;
  *(void *)(v9 + 40) = v8;
  sub_1AD91185C(0, &qword_1E9A4BF48, (void (*)(void))sub_1AD910708);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a2, a1, v10);
  sub_1AD910E84();
  uint64_t v12 = (uint64_t (**)())(a2 + *(int *)(v11 + 36));
  *uint64_t v12 = sub_1AD910E74;
  v12[1] = (uint64_t (*)())v9;
  void v12[2] = 0;
  v12[3] = 0;
  swift_retain();
  return swift_retain();
}

uint64_t View.onFirstAppear(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v15 = 0;
  swift_retain();
  sub_1AD9DF040();
  char v8 = v11;
  uint64_t v9 = v12;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  char v13 = v8;
  uint64_t v14 = v9;
  MEMORY[0x1B3E6AD80](&v11, a3, &type metadata for OnFirstAppear, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_1AD90F498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v21 = a2;
  uint64_t v19 = sub_1AD9DE290();
  uint64_t v2 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD910F08();
  uint64_t v17 = v6;
  uint64_t v20 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD91185C(0, &qword_1E9A4BF60, (void (*)(void))sub_1AD9107EC);
  uint64_t v11 = v10;
  uint64_t v12 = sub_1AD910FE0(&qword_1E9A4BF68, &qword_1E9A4BF60, (void (*)(void))sub_1AD9107EC);
  sub_1AD9DEC90();
  uint64_t v13 = v19;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E4F3D320], v19);
  uint64_t v22 = v11;
  uint64_t v23 = v12;
  swift_getOpaqueTypeConformance2();
  uint64_t v14 = v17;
  sub_1AD9DED40();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v14);
}

uint64_t View.appNavigationTitleBarStyle(title:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = a1;
  v7[1] = a2;
  char v8 = a3;
  uint64_t v9 = a4;
  return MEMORY[0x1B3E6AD80](v7, a5, &type metadata for NavigationTitleBarStyle, a6);
}

uint64_t static CGFloat.textDescenderOffset(for:in:)()
{
  return sub_1AD9DE7F0();
}

uint64_t static CGFloat.textLineHeight(for:in:)(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F416A9D0](a2, a1);
}

uint64_t sub_1AD90F75C()
{
  swift_getKeyPath();
  sub_1AD9DEC20();
  return swift_release();
}

unint64_t sub_1AD90F7D0()
{
  unint64_t result = qword_1EB725290;
  if (!qword_1EB725290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725290);
  }
  return result;
}

uint64_t sub_1AD90F824()
{
  return sub_1AD90E704(v0[4], v0[2], v0[3]);
}

void sub_1AD90F844()
{
  if (!qword_1E9A4BE20)
  {
    unint64_t v0 = sub_1AD9DE4D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BE20);
    }
  }
}

uint64_t sub_1AD90F8A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD90F8D0()
{
  return sub_1AD90E58C(v0[4], v0[2], v0[3]);
}

uint64_t sub_1AD90F8F0()
{
  return sub_1AD90E308(v0[4], v0[2], v0[3]);
}

uint64_t sub_1AD90F8FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD90EABC(*(void *)(v1 + 32), *(void *)(v1 + 16), a1);
}

uint64_t sub_1AD90F908()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD90F94C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD90F990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t type metadata accessor for LeadingContentGroup()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1AD90F9D4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AD90FA64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1AD90FB1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1AD90FB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1AD90FB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1AD90FBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1AD90FC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1AD90FC88(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1AD90FDE4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1AD90FFFCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for VerticallyCenteredContentGroup()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1AD91003C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1AD910140()
{
  return swift_getWitnessTable();
}

uint64_t sub_1AD9101E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1AD91024C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1AD9103E4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0Vyx_AA6SpacerVtGGAaBHPyHCTm(a1, MEMORY[0x1E4F3ED38]);
}

uint64_t sub_1AD910410()
{
  swift_getTupleTypeMetadata2();
  sub_1AD9DF350();
  swift_getWitnessTable();
  sub_1AD9DF0E0();
  return swift_getWitnessTable();
}

uint64_t sub_1AD9104AC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0Vyx_AA6SpacerVtGGAaBHPyHCTm(a1, MEMORY[0x1E4F3EDC8]);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0Vyx_AA6SpacerVtGGAaBHPyHCTm(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  swift_getTupleTypeMetadata2();
  uint64_t v3 = sub_1AD9DF350();
  uint64_t WitnessTable = swift_getWitnessTable();
  a2(255, v3, WitnessTable);
  return swift_getWitnessTable();
}

uint64_t sub_1AD910578(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0VyAA6SpacerV_xAHtGGAaBHPyHCTm(a1, MEMORY[0x1E4F3ED38]);
}

uint64_t sub_1AD9105A4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0VyAA6SpacerV_xAHtGGAaBHPyHCTm(a1, MEMORY[0x1E4F3EDC8]);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0VyAA6SpacerV_xAHtGGAaBHPyHCTm(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  swift_getTupleTypeMetadata3();
  uint64_t v3 = sub_1AD9DF350();
  uint64_t WitnessTable = swift_getWitnessTable();
  a2(255, v3, WitnessTable);
  return swift_getWitnessTable();
}

uint64_t sub_1AD910674()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD9106E8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyx011SleepHealthB013OnFirstAppear06_666E1K25E38EA261127FEC9835619BA55LLVGAaBHPxAaBHD1__AhA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for OnFirstAppear, (void (*)(void))sub_1AD910708);
}

unint64_t sub_1AD910708()
{
  unint64_t result = qword_1E9A4BF38;
  if (!qword_1E9A4BF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BF38);
  }
  return result;
}

uint64_t sub_1AD91075C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyx011SleepHealthB013OnFirstAppear06_666E1K25E38EA261127FEC9835619BA55LLVGAaBHPxAaBHD1__AhA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for NavigationTitleBarStyle, (void (*)(void))sub_1AD9107EC);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyx011SleepHealthB013OnFirstAppear06_666E1K25E38EA261127FEC9835619BA55LLVGAaBHPxAaBHD1__AhA0C8ModifierHPyHCHCTm(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_getWitnessTable();
}

unint64_t sub_1AD9107EC()
{
  unint64_t result = qword_1E9A4BF40;
  if (!qword_1E9A4BF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BF40);
  }
  return result;
}

uint64_t sub_1AD910840()
{
  return swift_getWitnessTable();
}

uint64_t sub_1AD9108EC()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ClearTextCaseFromEnvironment()
{
  return &type metadata for ClearTextCaseFromEnvironment;
}

uint64_t destroy for NavigationTitleBarStyle(uint64_t a1, uint64_t a2)
{
  return sub_1AD910B80(a1, a2, MEMORY[0x1E4FBC898]);
}

uint64_t initializeWithCopy for NavigationTitleBarStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NavigationTitleBarStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NavigationTitleBarStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationTitleBarStyle()
{
  return &type metadata for NavigationTitleBarStyle;
}

uint64_t destroy for OnFirstAppear(uint64_t a1, uint64_t a2)
{
  return sub_1AD910B80(a1, a2, MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1AD910B80(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  a3(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 24);
  return a3(v4);
}

uint64_t initializeWithCopy for OnFirstAppear(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnFirstAppear(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OnFirstAppear(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OnFirstAppear(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnFirstAppear(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnFirstAppear()
{
  return &type metadata for OnFirstAppear;
}

uint64_t sub_1AD910D70()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD910D8C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD910DA8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD910DC4()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1AD910E04()
{
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1AD910E34()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD910E74()
{
  return sub_1AD90F23C(*(void (**)(uint64_t))(v0 + 16));
}

void sub_1AD910E84()
{
  if (!qword_1E9A4BF50)
  {
    sub_1AD91185C(255, &qword_1E9A4BF48, (void (*)(void))sub_1AD910708);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BF50);
    }
  }
}

void sub_1AD910F08()
{
  if (!qword_1E9A4BF58)
  {
    sub_1AD91185C(255, &qword_1E9A4BF60, (void (*)(void))sub_1AD9107EC);
    sub_1AD910FE0(&qword_1E9A4BF68, &qword_1E9A4BF60, (void (*)(void))sub_1AD9107EC);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4BF58);
    }
  }
}

uint64_t sub_1AD910FE0(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD91185C(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD911030(uint64_t a1)
{
}

uint64_t sub_1AD911064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v28 = a3;
  uint64_t v15 = *(void *)(a5 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v18 = &v27[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16, v19);
  uint64_t v21 = &v27[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v22 + 16))(v21, v24, v23);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, a5);
  swift_bridgeObjectRetain();
  return sub_1AD911224((uint64_t)v21, (uint64_t)v18, a2, v28, v25, a4, a5, MEMORY[0x1E4F3F058], a8, a6, a7, MEMORY[0x1E4F3F050]);
}

uint64_t sub_1AD911224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v52 = a5;
  LODWORD(v49) = a4;
  uint64_t v45 = a3;
  uint64_t v46 = a8;
  uint64_t v47 = a2;
  uint64_t v58 = a9;
  uint64_t v56 = a1;
  uint64_t v57 = a11;
  uint64_t v50 = *(void *)(a8 - 8);
  uint64_t v53 = a12;
  MEMORY[0x1F4188790](a1, a8);
  uint64_t v48 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_1AD9DE450();
  uint64_t v16 = MEMORY[0x1F4188790](v54, v15);
  uint64_t v51 = (char *)v39 - v17;
  uint64_t v44 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](v16, v18);
  uint64_t v42 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v21);
  uint64_t v41 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v22 = sub_1AD9DDE90();
  MEMORY[0x1F4188790](v22, v23);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = v22;
  uint64_t v60 = a7;
  uint64_t v61 = WitnessTable;
  uint64_t v62 = v57;
  uint64_t v43 = sub_1AD9DDD00();
  MEMORY[0x1F4188790](v43, v24);
  v39[1] = (char *)v39 - v25;
  uint64_t v26 = *(void *)(a6 - 8);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  v39[0] = a6;
  v27(v58, v56, a6);
  sub_1AD9DDF60();
  sub_1AD9DDE80();
  uint64_t v28 = v44;
  uint64_t v29 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, v47, a7);
  uint64_t v30 = a7;
  uint64_t v31 = v57;
  sub_1AD9DDCF0();
  uint64_t v32 = v50;
  uint64_t v33 = v52;
  uint64_t v34 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v48, v52, v46);
  sub_1AD9DF320();
  uint64_t v49 = v35;
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v30);
  uint64_t v36 = v39[0];
  (*(void (**)(uint64_t, void))(v26 + 8))(v56, v39[0]);
  uint64_t v37 = v53;
  sub_1AD9DE440();
  uint64_t v59 = v36;
  uint64_t v60 = v30;
  uint64_t v61 = v34;
  uint64_t v62 = v55;
  uint64_t v63 = v31;
  uint64_t v64 = v37;
  sub_1AD9DE4C0();
  return sub_1AD9DDF70();
}

uint64_t sub_1AD911720()
{
  return sub_1AD9DE200();
}

uint64_t sub_1AD911744(uint64_t a1)
{
  sub_1AD911030(0);
  MEMORY[0x1F4188790](v2 - 8, v3);
  sub_1AD911954(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_1AD9DE210();
}

void sub_1AD9117D0()
{
  if (!qword_1E9A4BF78)
  {
    sub_1AD91185C(255, &qword_1E9A4BF80, (void (*)(void))sub_1AD8C8D64);
    sub_1AD9118BC(255);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BF78);
    }
  }
}

void sub_1AD91185C(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_1AD9DE4F0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD9118BC(uint64_t a1)
{
}

void sub_1AD9118F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD911954(uint64_t a1, uint64_t a2)
{
  sub_1AD911030(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD9119B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD911A18(uint64_t a1)
{
  return a1;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

unint64_t sub_1AD911A80()
{
  unint64_t result = qword_1E9A4BF90;
  if (!qword_1E9A4BF90)
  {
    sub_1AD910E84();
    sub_1AD910FE0(&qword_1E9A4BF98, &qword_1E9A4BF48, (void (*)(void))sub_1AD910708);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BF90);
  }
  return result;
}

uint64_t sub_1AD911B24()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1AD911C04()
{
  unint64_t result = qword_1E9A4BFA0;
  if (!qword_1E9A4BFA0)
  {
    sub_1AD9117D0();
    sub_1AD910FE0(&qword_1E9A4BFA8, &qword_1E9A4BF80, (void (*)(void))sub_1AD8C8D64);
    sub_1AD911CD8(&qword_1E9A4BFB0, sub_1AD9118BC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4BFA0);
  }
  return result;
}

uint64_t sub_1AD911CD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t TwoWeekResults.morningIndexRange.getter()
{
  return *(void *)v0;
}

uint64_t TwoWeekResults.summaries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TwoWeekResults.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TwoWeekResults() + 24);
  uint64_t v4 = sub_1AD9DCE40();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for TwoWeekResults()
{
  uint64_t result = qword_1E9A4BFB8;
  if (!qword_1E9A4BFB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id TwoWeekResults.averageDurationFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for TwoWeekResults() + 28));
  return v1;
}

id TwoWeekResults.axisFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for TwoWeekResults() + 32));
  return v1;
}

uint64_t TwoWeekResults.week1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TwoWeekResults();
  return sub_1AD9120E4(v1 + *(int *)(v3 + 36), a1, type metadata accessor for WeekResults);
}

uint64_t TwoWeekResults.week2.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TwoWeekResults();
  return sub_1AD9120E4(v1 + *(int *)(v3 + 40), a1, type metadata accessor for WeekResults);
}

BOOL TwoWeekResults.hasData.getter()
{
  uint64_t v1 = type metadata accessor for TwoWeekResults();
  MEMORY[0x1F4188790](v1, v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v0 + *(int *)(v5 + 36));
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7)
  {
    sub_1AD9120E4(v0, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
    goto LABEL_12;
  }
  if (v7 == 1)
  {
    uint64_t v8 = 0;
    double v9 = 0.0;
LABEL_8:
    uint64_t v14 = v7 - v8;
    uint64_t v15 = (double *)(v6 + 32 * v8 + 40);
    do
    {
      double v16 = *v15;
      v15 += 4;
      double v9 = v9 + v16;
      --v14;
    }
    while (v14);
    goto LABEL_10;
  }
  uint64_t v8 = v7 & 0x7FFFFFFFFFFFFFFELL;
  unsigned int v10 = (double *)(v6 + 72);
  double v9 = 0.0;
  uint64_t v11 = v7 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v12 = *(v10 - 4);
    double v13 = *v10;
    v10 += 8;
    double v9 = v9 + v12 + v13;
    v11 -= 2;
  }
  while (v11);
  if (v7 != v8) {
    goto LABEL_8;
  }
LABEL_10:
  sub_1AD9120E4(v0, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
  if (v9 <= 0.0)
  {
LABEL_12:
    uint64_t v18 = *(void *)&v4[*(int *)(v1 + 40)];
    uint64_t v19 = *(void *)(v18 + 16);
    if (!v19)
    {
      BOOL v17 = 0;
      goto LABEL_22;
    }
    if (v19 == 1)
    {
      uint64_t v20 = 0;
      double v21 = 0.0;
    }
    else
    {
      uint64_t v20 = v19 & 0x7FFFFFFFFFFFFFFELL;
      uint64_t v22 = (double *)(v18 + 72);
      double v21 = 0.0;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        double v24 = *(v22 - 4);
        double v25 = *v22;
        v22 += 8;
        double v21 = v21 + v24 + v25;
        v23 -= 2;
      }
      while (v23);
      if (v19 == v20) {
        goto LABEL_21;
      }
    }
    uint64_t v26 = v19 - v20;
    uint64_t v27 = (double *)(v18 + 32 * v20 + 40);
    do
    {
      double v28 = *v27;
      v27 += 4;
      double v21 = v21 + v28;
      --v26;
    }
    while (v26);
LABEL_21:
    BOOL v17 = v21 > 0.0;
    goto LABEL_22;
  }
  BOOL v17 = 1;
LABEL_22:
  sub_1AD912AC8((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
  return v17;
}

uint64_t sub_1AD9120E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t TwoWeekResults.hasComparisonData.getter()
{
  uint64_t v1 = type metadata accessor for WeekResults(0);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TwoWeekResults();
  uint64_t v6 = v0 + *(int *)(v5 + 36);
  uint64_t v7 = v0 + *(int *)(v5 + 40);
  char v8 = *(unsigned char *)(v6 + 16);
  sub_1AD9120E4(v7, (uint64_t)v4, type metadata accessor for WeekResults);
  if (v8) {
    char v9 = 0;
  }
  else {
    char v9 = v4[16] ^ 1;
  }
  sub_1AD912AC8((uint64_t)v4, type metadata accessor for WeekResults);
  return v9 & 1;
}

uint64_t TwoWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)@<X0>(int *a1@<X0>, int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int **a7@<X8>)
{
  unint64_t v107 = a5;
  uint64_t v108 = a6;
  char v106 = a1;
  uint64_t v12 = type metadata accessor for WeekResults(0);
  MEMORY[0x1F4188790](v12 - 8, v13);
  char v101 = (uint64_t *)((char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = (int *)type metadata accessor for WeekResultsBuilder();
  uint64_t v17 = MEMORY[0x1F4188790](v15, v16);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v20);
  uint64_t v22 = (int **)((char *)&v94 - v21);
  *a7 = a1;
  a7[1] = a2;
  unint64_t v110 = a3;
  a7[2] = (int *)a3;
  uint64_t v23 = (int *)type metadata accessor for TwoWeekResults();
  double v24 = (char *)a7 + v23[6];
  uint64_t v25 = sub_1AD9DCE40();
  uint64_t v99 = *(void *)(v25 - 8);
  uint64_t v26 = v99 + 16;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
  double v28 = v24;
  uint64_t v29 = a4;
  v27(v28, a4, v25);
  unint64_t v30 = v107;
  *(int **)((char *)a7 + v23[7]) = (int *)v107;
  char v100 = v23;
  uint64_t v31 = v23[8];
  uint64_t v32 = v25;
  uint64_t v102 = a7;
  uint64_t v103 = v29;
  uint64_t v33 = v108;
  *(int **)((char *)a7 + v31) = (int *)v108;
  v27((char *)v22 + v15[5], v29, v32);
  uint64_t v34 = v15[9];
  unint64_t v35 = sub_1AD8664E8(MEMORY[0x1E4FBC860]);
  uint64_t v109 = v34;
  *(int **)((char *)v22 + v34) = (int *)v35;
  uint64_t v36 = v106;
  *uint64_t v22 = v106;
  v22[1] = (int *)7;
  uint64_t v37 = v15[6];
  *(int **)((char *)v22 + v37) = (int *)0x40CC200000000000;
  *(int **)((char *)v22 + v15[7]) = (int *)v30;
  uint64_t v38 = v33;
  *(int **)((char *)v22 + v15[8]) = (int *)v33;
  uint64_t v39 = (uint64_t)v36 + 7;
  if (__OFADD__(v36, 7))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    id v84 = (id)v26;
    uint64_t v85 = v15;
    swift_bridgeObjectRetain_n();
    id v86 = v84;
    uint64_t v87 = v85;
    uint64_t v45 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_4;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    sub_1AD9A03D4();
    *(void *)(v38 + v95) = v88;
    sub_1AD9A03D4();
    *(int **)((char *)v22 + v97) = v89;
    uint64_t v90 = v100;
    uint64_t v91 = v102;
    sub_1AD99F86C((uint64_t *)((char *)v102 + v100[9]));
    uint64_t v92 = v101;
    sub_1AD99F86C(v101);

    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v103, v98);
    sub_1AD912AC8(v38, (uint64_t (*)(void))type metadata accessor for WeekResultsBuilder);
    sub_1AD912AC8((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for WeekResultsBuilder);
    return sub_1AD866638((uint64_t)v92, (uint64_t)v91 + v90[10]);
  }
  uint64_t v40 = (void *)v30;
  uint64_t v97 = v37;
  v27(&v19[v15[5]], v103, v32);
  uint64_t v41 = v15[9];
  uint64_t v26 = v40;
  uint64_t v42 = (int *)(id)v38;
  unint64_t v43 = sub_1AD8664E8(MEMORY[0x1E4FBC860]);
  uint64_t v108 = v41;
  *(void *)&v19[v41] = v43;
  *(void *)uint64_t v19 = v39;
  *((void *)v19 + 1) = 7;
  uint64_t v95 = v15[6];
  id v96 = (id)v26;
  *(void *)&v19[v95] = 0x40CC200000000000;
  *(void *)&v19[v15[7]] = v26;
  uint64_t v44 = v15[8];
  uint64_t v15 = v42;
  *(void *)&v19[v44] = v42;
  unint64_t v30 = v110;
  uint64_t v38 = (uint64_t)v19;
  uint64_t v98 = v32;
  if (v110 >> 62) {
    goto LABEL_42;
  }
  uint64_t v45 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v46 = (id)v26;
  uint64_t v47 = v42;
  id v48 = v46;
  uint64_t v49 = v47;
  swift_bridgeObjectRetain();
  if (!v45) {
    goto LABEL_43;
  }
LABEL_4:
  char v106 = v15;
  unint64_t v107 = v30 & 0xC000000000000001;
  uint64_t v26 = 4;
  uint64_t v104 = v45;
  uint64_t v105 = v38;
  while (1)
  {
    if (v107) {
      uint64_t v50 = (int *)MEMORY[0x1B3E6BFF0](v26 - 4, v30);
    }
    else {
      uint64_t v50 = (int *)*(id *)(v30 + 8 * v26);
    }
    uint64_t v15 = v50;
    uint64_t v51 = v26 - 3;
    if (__OFADD__(v26 - 4, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    objc_msgSend(v50, sel_morningIndex);
    if (sub_1AD9DFC10())
    {
      uint64_t v38 = (uint64_t)objc_msgSend(v15, sel_morningIndex);
      uint64_t v52 = v15;
      uint64_t v53 = v109;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v111 = *(int **)((char *)v22 + v53);
      uint64_t v55 = v111;
      *(int **)((char *)v22 + v53) = (int *)0x8000000000000000;
      unint64_t v57 = sub_1AD8651E4(v38);
      uint64_t v58 = v55[2];
      BOOL v59 = (v56 & 1) == 0;
      uint64_t v60 = v58 + v59;
      if (__OFADD__(v58, v59)) {
        goto LABEL_37;
      }
      unint64_t v30 = v56;
      if (v55[3] >= v60)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1AD866270();
        }
      }
      else
      {
        sub_1AD865CF0(v60, isUniquelyReferenced_nonNull_native);
        unint64_t v61 = sub_1AD8651E4(v38);
        if ((v30 & 1) != (v62 & 1)) {
          goto LABEL_44;
        }
        unint64_t v57 = v61;
      }
      uint64_t v63 = (int *)v111;
      uint64_t v64 = 8 * v57;
      if (v30)
      {
        uint64_t v65 = v111[7];

        *(void *)(v65 + v64) = v52;
      }
      else
      {
        v111[(v57 >> 6) + 8] |= 1 << v57;
        *(void *)(*((void *)v63 + 6) + 8 * v57) = v38;
        *(void *)(*((void *)v63 + 7) + 8 * v57) = v52;
        uint64_t v66 = *((void *)v63 + 2);
        BOOL v67 = __OFADD__(v66, 1);
        uint64_t v68 = v66 + 1;
        if (v67) {
          goto LABEL_39;
        }
        *((void *)v63 + 2) = v68;
      }
      *(int **)((char *)v22 + v109) = v63;
      swift_bridgeObjectRelease();
      uint64_t v45 = v104;
      uint64_t v38 = v105;
      unint64_t v30 = v110;
    }
    objc_msgSend(v15, sel_morningIndex);
    if (sub_1AD9DFC10()) {
      break;
    }

LABEL_6:
    ++v26;
    uint64_t v15 = v106;
    if (v51 == v45) {
      goto LABEL_43;
    }
  }
  id v69 = objc_msgSend(v15, sel_morningIndex);
  uint64_t v15 = v15;
  uint64_t v70 = v108;
  char v71 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v111 = *(void **)(v38 + v70);
  uint64_t v72 = v111;
  *(void *)(v38 + v70) = 0x8000000000000000;
  unint64_t v30 = sub_1AD8651E4((uint64_t)v69);
  uint64_t v74 = v72[2];
  BOOL v75 = (v73 & 1) == 0;
  uint64_t v76 = v74 + v75;
  if (__OFADD__(v74, v75)) {
    goto LABEL_38;
  }
  uint64_t v38 = v73;
  if (v72[3] >= v76)
  {
    if (v71)
    {
      uint64_t v79 = v111;
      if (v73) {
        goto LABEL_31;
      }
    }
    else
    {
      sub_1AD866270();
      uint64_t v79 = v111;
      if (v38) {
        goto LABEL_31;
      }
    }
LABEL_33:
    v79[(v30 >> 6) + 8] |= 1 << v30;
    uint64_t v81 = 8 * v30;
    *(void *)(v79[6] + v81) = v69;
    *(void *)(v79[7] + v81) = v15;
    uint64_t v82 = v79[2];
    BOOL v67 = __OFADD__(v82, 1);
    uint64_t v83 = v82 + 1;
    if (v67) {
      goto LABEL_40;
    }
    v79[2] = v83;
    goto LABEL_35;
  }
  sub_1AD865CF0(v76, v71);
  unint64_t v77 = sub_1AD8651E4((uint64_t)v69);
  if ((v38 & 1) == (v78 & 1))
  {
    unint64_t v30 = v77;
    uint64_t v79 = v111;
    if ((v38 & 1) == 0) {
      goto LABEL_33;
    }
LABEL_31:
    uint64_t v80 = v79[7];

    *(void *)(v80 + 8 * v30) = v15;
LABEL_35:
    uint64_t v38 = v105;
    *(void *)(v105 + v108) = v79;

    swift_bridgeObjectRelease();
    unint64_t v30 = v110;
    uint64_t v45 = v104;
    goto LABEL_6;
  }
LABEL_44:
  uint64_t result = sub_1AD9E0310();
  __break(1u);
  return result;
}

uint64_t static TwoWeekResults.emptyResults.getter@<X0>(int **a1@<X8>)
{
  uint64_t v2 = sub_1AD9DCD30();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v7 - 8, v8);
  unsigned int v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)*MEMORY[0x1E4F29990];
  uint64_t v12 = *(int **)(MEMORY[0x1E4F29990] + 8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E4F27B20], v2);
  sub_1AD9DCD40();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
  objc_msgSend(v13, sel_setAllowedUnits_, 96);
  objc_msgSend(v13, sel_setUnitsStyle_, 1);
  id v14 = _sSo23NSDateIntervalFormatterC13SleepHealthUIE15weeklyChartAxisABvgZ_0();
  return TwoWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)(v11, v12, MEMORY[0x1E4FBC860], (uint64_t)v10, (unint64_t)v13, (uint64_t)v14, a1);
}

uint64_t sub_1AD912AC8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for TwoWeekResults(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v54 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v54 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v62 = sub_1AD9DCE40();
    unint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16);
    swift_bridgeObjectRetain();
    v61(v8, v9, v62);
    uint64_t v10 = a3[7];
    uint64_t v11 = a3[8];
    uint64_t v12 = *(void **)((char *)a2 + v10);
    *(uint64_t *)((char *)v4 + v10) = (uint64_t)v12;
    uint64_t v58 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)v4 + v11) = (uint64_t)v58;
    uint64_t v13 = a3[9];
    id v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v17 = *(uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *(uint64_t *)((char *)a2 + v13 + 8);
    *(void *)id v14 = v17;
    *((void *)v14 + 1) = v16;
    v14[16] = v15[16];
    uint64_t v18 = (int *)type metadata accessor for WeekResults(0);
    uint64_t v19 = v18[6];
    unint64_t v56 = &v15[v19];
    unint64_t v57 = &v14[v19];
    uint64_t v60 = sub_1AD9DC7C0();
    BOOL v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16);
    id v20 = v12;
    id v21 = v58;
    swift_bridgeObjectRetain();
    v59(v57, v56, v60);
    *(void *)&v14[v18[7]] = *(void *)&v15[v18[7]];
    uint64_t v22 = v18[8];
    uint64_t v23 = &v14[v22];
    double v24 = &v15[v22];
    v23[8] = v24[8];
    *(void *)uint64_t v23 = *(void *)v24;
    *(void *)&v14[v18[9]] = *(void *)&v15[v18[9]];
    v61(&v14[v18[10]], &v15[v18[10]], v62);
    uint64_t v25 = v18[11];
    uint64_t v26 = *(void **)&v15[v25];
    *(void *)&v14[v25] = v26;
    uint64_t v27 = v18[12];
    double v28 = *(void **)&v15[v27];
    *(void *)&v14[v27] = v28;
    uint64_t v29 = v18[13];
    unint64_t v30 = *(void **)&v15[v29];
    *(void *)&v14[v29] = v30;
    uint64_t v31 = a3[10];
    uint64_t v32 = (char *)v4 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v35 = *(uint64_t *)((char *)a2 + v31);
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = v35;
    *((void *)v32 + 1) = v34;
    v32[16] = v33[16];
    uint64_t v36 = v18[6];
    uint64_t v37 = &v32[v36];
    uint64_t v38 = &v33[v36];
    id v39 = v26;
    id v40 = v28;
    id v41 = v30;
    swift_bridgeObjectRetain();
    v59(v37, v38, v60);
    *(void *)&v32[v18[7]] = *(void *)&v33[v18[7]];
    uint64_t v42 = v18[8];
    unint64_t v43 = &v32[v42];
    uint64_t v44 = &v33[v42];
    v43[8] = v44[8];
    *(void *)unint64_t v43 = *(void *)v44;
    *(void *)&v32[v18[9]] = *(void *)&v33[v18[9]];
    v61(&v32[v18[10]], &v33[v18[10]], v62);
    uint64_t v45 = v18[11];
    id v46 = *(void **)&v33[v45];
    *(void *)&v32[v45] = v46;
    uint64_t v47 = v18[12];
    id v48 = *(void **)&v33[v47];
    *(void *)&v32[v47] = v48;
    uint64_t v49 = v18[13];
    uint64_t v50 = *(void **)&v33[v49];
    *(void *)&v32[v49] = v50;
    id v51 = v46;
    id v52 = v48;
    id v53 = v50;
  }
  return v4;
}

void destroy for TwoWeekResults(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_1AD9DCE40();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v13(v4, v5);

  uint64_t v6 = a1 + a2[9];
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v8 = v6 + v7[6];
  uint64_t v9 = sub_1AD9DC7C0();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v13(v6 + v7[10], v5);

  uint64_t v11 = a1 + a2[10];
  swift_bridgeObjectRelease();
  v10(v11 + v7[6], v9);
  v13(v11 + v7[10], v5);

  uint64_t v12 = *(void **)(v11 + v7[13]);
}

uint64_t initializeWithCopy for TwoWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v60 = sub_1AD9DCE40();
  BOOL v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16);
  swift_bridgeObjectRetain();
  v59(v7, v8, v60);
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = *(void **)(a2 + v9);
  *(void *)(a1 + v9) = v11;
  uint64_t v12 = *(void **)(a2 + v10);
  *(void *)(a1 + v10) = v12;
  uint64_t v13 = a3[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v17 = *(void *)(a2 + v13);
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  *(void *)uint64_t v14 = v17;
  *(void *)(v14 + 8) = v16;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  uint64_t v18 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v19 = v18[6];
  uint64_t v55 = v15 + v19;
  uint64_t v56 = v14 + v19;
  uint64_t v58 = sub_1AD9DC7C0();
  unint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16);
  id v20 = v11;
  id v21 = v12;
  swift_bridgeObjectRetain();
  v57(v56, v55, v58);
  *(void *)(v14 + v18[7]) = *(void *)(v15 + v18[7]);
  uint64_t v22 = v18[8];
  uint64_t v23 = v14 + v22;
  uint64_t v24 = v15 + v22;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  *(void *)uint64_t v23 = *(void *)v24;
  *(void *)(v14 + v18[9]) = *(void *)(v15 + v18[9]);
  v59(v14 + v18[10], v15 + v18[10], v60);
  uint64_t v25 = v18[11];
  uint64_t v26 = *(void **)(v15 + v25);
  *(void *)(v14 + v25) = v26;
  uint64_t v27 = v18[12];
  double v28 = *(void **)(v15 + v27);
  *(void *)(v14 + v27) = v28;
  uint64_t v29 = v18[13];
  unint64_t v30 = *(void **)(v15 + v29);
  *(void *)(v14 + v29) = v30;
  uint64_t v31 = a3[10];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  uint64_t v35 = *(void *)(a2 + v31);
  uint64_t v34 = *(void *)(v33 + 8);
  *(void *)uint64_t v32 = v35;
  *(void *)(v32 + 8) = v34;
  *(unsigned char *)(v32 + 16) = *(unsigned char *)(v33 + 16);
  uint64_t v36 = v18[6];
  uint64_t v37 = v32 + v36;
  uint64_t v38 = v33 + v36;
  id v39 = v26;
  id v40 = v28;
  id v41 = v30;
  swift_bridgeObjectRetain();
  v57(v37, v38, v58);
  *(void *)(v32 + v18[7]) = *(void *)(v33 + v18[7]);
  uint64_t v42 = v18[8];
  uint64_t v43 = v32 + v42;
  uint64_t v44 = v33 + v42;
  *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
  *(void *)uint64_t v43 = *(void *)v44;
  *(void *)(v32 + v18[9]) = *(void *)(v33 + v18[9]);
  v59(v32 + v18[10], v33 + v18[10], v60);
  uint64_t v45 = v18[11];
  id v46 = *(void **)(v33 + v45);
  *(void *)(v32 + v45) = v46;
  uint64_t v47 = v18[12];
  id v48 = *(void **)(v33 + v47);
  *(void *)(v32 + v47) = v48;
  uint64_t v49 = v18[13];
  uint64_t v50 = *(void **)(v33 + v49);
  *(void *)(v32 + v49) = v50;
  id v51 = v46;
  id v52 = v48;
  id v53 = v50;
  return a1;
}

void *assignWithCopy for TwoWeekResults(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v64 = sub_1AD9DCE40();
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 24);
  v65(v7, v8, v64);
  uint64_t v9 = a3[7];
  uint64_t v10 = *(void **)((char *)a2 + v9);
  uint64_t v11 = *(void **)((char *)a1 + v9);
  *(void *)((char *)a1 + v9) = v10;
  id v12 = v10;

  uint64_t v13 = a3[8];
  uint64_t v14 = *(void **)((char *)a2 + v13);
  uint64_t v15 = *(void **)((char *)a1 + v13);
  *(void *)((char *)a1 + v13) = v14;
  id v16 = v14;

  uint64_t v17 = a3[9];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = *((void *)v19 + 1);
  v18[16] = v19[16];
  *((void *)v18 + 1) = v20;
  id v21 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v22 = v21[6];
  uint64_t v23 = &v18[v22];
  uint64_t v24 = &v19[v22];
  uint64_t v25 = sub_1AD9DC7C0();
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24);
  v63(v23, v24, v25);
  *(void *)&v18[v21[7]] = *(void *)&v19[v21[7]];
  uint64_t v26 = v21[8];
  uint64_t v27 = &v18[v26];
  double v28 = &v19[v26];
  char v29 = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v29;
  *(void *)&v18[v21[9]] = *(void *)&v19[v21[9]];
  v65(&v18[v21[10]], &v19[v21[10]], v64);
  uint64_t v30 = v21[11];
  uint64_t v31 = *(void **)&v19[v30];
  uint64_t v32 = *(void **)&v18[v30];
  *(void *)&v18[v30] = v31;
  id v33 = v31;

  uint64_t v34 = v21[12];
  uint64_t v35 = *(void **)&v19[v34];
  uint64_t v36 = *(void **)&v18[v34];
  *(void *)&v18[v34] = v35;
  id v37 = v35;

  uint64_t v38 = v21[13];
  id v39 = *(void **)&v19[v38];
  id v40 = *(void **)&v18[v38];
  *(void *)&v18[v38] = v39;
  id v41 = v39;

  uint64_t v42 = a3[10];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  *(void *)((char *)a1 + v42) = *(void *)((char *)a2 + v42);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = *((void *)v44 + 1);
  v43[16] = v44[16];
  *((void *)v43 + 1) = v45;
  v63(&v43[v21[6]], &v44[v21[6]], v25);
  *(void *)&v43[v21[7]] = *(void *)&v44[v21[7]];
  uint64_t v46 = v21[8];
  uint64_t v47 = &v43[v46];
  id v48 = &v44[v46];
  char v49 = v48[8];
  *(void *)uint64_t v47 = *(void *)v48;
  v47[8] = v49;
  *(void *)&v43[v21[9]] = *(void *)&v44[v21[9]];
  v65(&v43[v21[10]], &v44[v21[10]], v64);
  uint64_t v50 = v21[11];
  id v51 = *(void **)&v44[v50];
  id v52 = *(void **)&v43[v50];
  *(void *)&v43[v50] = v51;
  id v53 = v51;

  uint64_t v54 = v21[12];
  uint64_t v55 = *(void **)&v44[v54];
  uint64_t v56 = *(void **)&v43[v54];
  *(void *)&v43[v54] = v55;
  id v57 = v55;

  uint64_t v58 = v21[13];
  BOOL v59 = *(void **)&v44[v58];
  uint64_t v60 = *(void **)&v43[v58];
  *(void *)&v43[v58] = v59;
  id v61 = v59;

  return a1;
}

uint64_t initializeWithTake for TwoWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v32 = sub_1AD9DCE40();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32);
  v31(v7, v8, v32);
  uint64_t v9 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)(a2 + v10 + 8);
  *(void *)uint64_t v11 = *(void *)(a2 + v10);
  *(void *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(a2 + v10 + 16);
  uint64_t v14 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v15 = v14[6];
  uint64_t v16 = v11 + v15;
  uint64_t v17 = v12 + v15;
  uint64_t v29 = sub_1AD9DC7C0();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32);
  v30(v16, v17, v29);
  *(void *)(v11 + v14[7]) = *(void *)(v12 + v14[7]);
  uint64_t v18 = v14[8];
  uint64_t v19 = v11 + v18;
  uint64_t v20 = v12 + v18;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)uint64_t v19 = *(void *)v20;
  *(void *)(v11 + v14[9]) = *(void *)(v12 + v14[9]);
  v31(v11 + v14[10], v12 + v14[10], v32);
  *(void *)(v11 + v14[11]) = *(void *)(v12 + v14[11]);
  *(void *)(v11 + v14[12]) = *(void *)(v12 + v14[12]);
  *(void *)(v11 + v14[13]) = *(void *)(v12 + v14[13]);
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = *(void *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)(v22 + 8) = v24;
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  v30(a1 + v21 + v14[6], v23 + v14[6], v29);
  *(void *)(v22 + v14[7]) = *(void *)(v23 + v14[7]);
  uint64_t v25 = v14[8];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  *(void *)uint64_t v26 = *(void *)v27;
  *(void *)(v22 + v14[9]) = *(void *)(v23 + v14[9]);
  v31(v22 + v14[10], v23 + v14[10], v32);
  *(void *)(v22 + v14[11]) = *(void *)(v23 + v14[11]);
  *(void *)(v22 + v14[12]) = *(void *)(v23 + v14[12]);
  *(void *)(v22 + v14[13]) = *(void *)(v23 + v14[13]);
  return a1;
}

uint64_t assignWithTake for TwoWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v45 = sub_1AD9DCE40();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 40);
  v44(v7, v8, v45);
  uint64_t v9 = a3[7];
  uint64_t v10 = *(void **)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);

  uint64_t v11 = a3[8];
  uint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  uint64_t v13 = a3[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  swift_bridgeObjectRelease();
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  uint64_t v16 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v17 = v16[6];
  uint64_t v18 = v14 + v17;
  uint64_t v19 = v15 + v17;
  uint64_t v20 = sub_1AD9DC7C0();
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40);
  v43(v18, v19, v20);
  *(void *)(v14 + v16[7]) = *(void *)(v15 + v16[7]);
  uint64_t v21 = v16[8];
  uint64_t v22 = v14 + v21;
  uint64_t v23 = v15 + v21;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)(v14 + v16[9]) = *(void *)(v15 + v16[9]);
  v44(v14 + v16[10], v15 + v16[10], v45);
  uint64_t v24 = v16[11];
  uint64_t v25 = *(void **)(v14 + v24);
  *(void *)(v14 + v24) = *(void *)(v15 + v24);

  uint64_t v26 = v16[12];
  uint64_t v27 = *(void **)(v14 + v26);
  *(void *)(v14 + v26) = *(void *)(v15 + v26);

  uint64_t v28 = v16[13];
  uint64_t v29 = *(void **)(v14 + v28);
  *(void *)(v14 + v28) = *(void *)(v15 + v28);

  uint64_t v30 = a3[10];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(void *)(a1 + v30) = *(void *)v32;
  swift_bridgeObjectRelease();
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  *(unsigned char *)(v31 + 16) = *(unsigned char *)(v32 + 16);
  v43(v31 + v16[6], v32 + v16[6], v20);
  *(void *)(v31 + v16[7]) = *(void *)(v32 + v16[7]);
  uint64_t v33 = v16[8];
  uint64_t v34 = v31 + v33;
  uint64_t v35 = v32 + v33;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  *(void *)uint64_t v34 = *(void *)v35;
  *(void *)(v31 + v16[9]) = *(void *)(v32 + v16[9]);
  v44(v31 + v16[10], v32 + v16[10], v45);
  uint64_t v36 = v16[11];
  id v37 = *(void **)(v31 + v36);
  *(void *)(v31 + v36) = *(void *)(v32 + v36);

  uint64_t v38 = v16[12];
  id v39 = *(void **)(v31 + v38);
  *(void *)(v31 + v38) = *(void *)(v32 + v38);

  uint64_t v40 = v16[13];
  id v41 = *(void **)(v31 + v40);
  *(void *)(v31 + v40) = *(void *)(v32 + v40);

  return a1;
}

uint64_t getEnumTagSinglePayload for TwoWeekResults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD913B54);
}

uint64_t sub_1AD913B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1AD9DCE40();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for WeekResults(0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for TwoWeekResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD913C94);
}

uint64_t sub_1AD913C94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_1AD9DCE40();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for WeekResults(0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1AD913DC0()
{
  uint64_t result = sub_1AD9DCE40();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for WeekResults(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of SleepOnboardingUserInfoProvider.userInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfoProvider.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfoProvider.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfoProvider.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

id sub_1AD913F00(_OWORD *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  long long v4 = a1[9];
  *((_OWORD *)v3 + 8) = a1[8];
  *((_OWORD *)v3 + 9) = v4;
  long long v5 = a1[11];
  *((_OWORD *)v3 + 10) = a1[10];
  *((_OWORD *)v3 + 11) = v5;
  long long v6 = a1[5];
  *((_OWORD *)v3 + 4) = a1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = a1[7];
  *((_OWORD *)v3 + 6) = a1[6];
  *((_OWORD *)v3 + 7) = v7;
  long long v8 = a1[1];
  *(_OWORD *)uint64_t v3 = *a1;
  *((_OWORD *)v3 + 1) = v8;
  long long v9 = a1[3];
  *((_OWORD *)v3 + 2) = a1[2];
  *((_OWORD *)v3 + 3) = v9;
  sub_1AD897520((uint64_t)a1);
  v21.receiver = v1;
  v21.super_class = (Class)type metadata accessor for SleepScheduleClockDial();
  id v10 = objc_msgSendSuper2(&v21, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v11 = self;
  id v12 = v10;
  id v13 = objc_msgSend(v11, sel_clearColor);
  objc_msgSend(v12, sel_setBackgroundColor_, v13);

  objc_msgSend(v12, sel_setContentMode_, 3);
  sub_1AD916B68(0, (unint64_t *)&qword_1E9A49250, (uint64_t (*)(uint64_t))sub_1AD841CE0, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1AD9E3080;
  uint64_t v15 = sub_1AD9DD6D0();
  uint64_t v16 = MEMORY[0x1E4FB1138];
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v16;
  uint64_t v17 = sub_1AD9DD590();
  uint64_t v18 = MEMORY[0x1E4FB0F40];
  *(void *)(v14 + 48) = v17;
  *(void *)(v14 + 56) = v18;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD841D34();
  id v19 = v12;
  sub_1AD9DFD90();
  sub_1AD8975C0((uint64_t)a1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v19;
}

void sub_1AD914114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  long long v4 = (void *)MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    long long v5 = v4;
    objc_msgSend(v4, sel_setNeedsDisplay);
  }
}

void sub_1AD9141CC()
{
  swift_getObjectType();
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for SleepScheduleClockDial();
  objc_msgSendSuper2(&v12, sel_layoutSubviews);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_1AD9DD550();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EB725958);
  id v2 = v0;
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = v6;
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v11);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    objc_msgSend(v2, sel_bounds);
    type metadata accessor for CGRect(0);
    uint64_t v9 = sub_1AD9DF730();
    sub_1AD838978(v9, v10, &v11);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Layout subviews in %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }
  else
  {
  }
}

uint64_t type metadata accessor for SleepScheduleClockDial()
{
  return self;
}

void sub_1AD914460(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  swift_getObjectType();
  v39.receiver = v4;
  v39.super_class = (Class)type metadata accessor for SleepScheduleClockDial();
  objc_msgSendSuper2(&v39, sel_drawRect_, a1, a2, a3, a4);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_1AD9DD550();
  __swift_project_value_buffer(v10, (uint64_t)qword_1EB725958);
  uint64_t v11 = sub_1AD9DD530();
  os_log_type_t v12 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v38 = v14;
    *(_DWORD *)id v13 = 136446210;
    uint64_t v15 = sub_1AD9E04F0();
    sub_1AD838978(v15, v16, &v38);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v11, v12, "[%{public}s] Redrawing", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v14, -1, -1);
    MEMORY[0x1B3E6D1A0](v13, -1, -1);
  }

  uint64_t v17 = UIGraphicsGetCurrentContext();
  if (v17)
  {
    uint64_t v18 = v17;
    UIGraphicsPushContext(v17);
    UIGraphicsPushContext(v18);
    id v19 = *(id *)&v5[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    id v20 = objc_msgSend(v5, sel_traitCollection);
    id v21 = objc_msgSend(v19, sel_resolvedColorWithTraitCollection_, v20);
    uint64_t v22 = (CGColor *)objc_msgSend(v21, sel_CGColor);

    CGContextSetFillColorWithColor(v18, v22);
    objc_msgSend(v5, sel_bounds);
    id v27 = objc_msgSend(self, sel_bezierPathWithOvalInRect_, v23, v24, v25, v26);
    objc_msgSend(v27, sel_fill);

    UIGraphicsPopContext();
    objc_msgSend(v5, sel_bounds);
    CGFloat x = v40.origin.x;
    CGFloat y = v40.origin.y;
    CGFloat width = v40.size.width;
    CGFloat height = v40.size.height;
    CGFloat MidX = CGRectGetMidX(v40);
    v41.origin.CGFloat x = x;
    v41.origin.CGFloat y = y;
    v41.size.CGFloat width = width;
    v41.size.CGFloat height = height;
    objc_msgSend(v5, sel_bounds, CGRectGetMidY(v41));
    CGFloat v33 = v42.origin.x;
    CGFloat v34 = v42.origin.y;
    CGFloat v35 = v42.size.width;
    CGFloat v36 = v42.size.height;
    CGRectGetMidX(v42);
    v43.origin.CGFloat x = v33;
    v43.origin.CGFloat y = v34;
    v43.size.CGFloat width = v35;
    v43.size.CGFloat height = v36;
    CGFloat MidY = CGRectGetMidY(v43);
    CGContextTranslateCTM(v18, MidX, MidY);
    sub_1AD9147E0(v18);
    sub_1AD914AEC(v18);
    UIGraphicsPopContext();
  }
}

void sub_1AD9147E0(CGContext *a1)
{
  UIGraphicsPushContext(a1);
  uint64_t v3 = &v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  double v4 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
  double v5 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
  double v6 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 56];
  CGContextSetLineWidth(a1, *(CGFloat *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32]);
  CGContextSetLineCap(a1, *((CGLineCap *)v3 + 6));
  id v20 = v3;
  id v7 = *((id *)v3 + 1);
  id v8 = objc_msgSend(v1, sel_traitCollection);
  id v9 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v8);
  uint64_t v10 = (CGColor *)objc_msgSend(v9, sel_CGColor);

  CGContextSetStrokeColorWithColor(a1, v10);
  uint64_t v21 = 0;
  while (1)
  {
    uint64_t v11 = *((void *)v20 + 5);
    if (!v11) {
      break;
    }
    if (v11 >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = v12 + v11;
        if (__OFADD__(v12, v11)) {
          uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
        }
        double v14 = v5;
        if (v12) {
          double v14 = v6;
        }
        if (qword_1E9A48EC0 != -1) {
          swift_once();
        }
        double v15 = *(double *)&qword_1E9A5A700;
        if (qword_1E9A48EB0 != -1) {
          swift_once();
        }
        double v16 = *(double *)&qword_1E9A5A6F0;
        if (qword_1E9A48EB8 != -1) {
          swift_once();
        }
        double v17 = ((double)v12 / 60.0 + (double)v21) / 24.0 * v15 + v16;
        for (double i = *(double *)&qword_1E9A5A700 - *(double *)&qword_1E9A5A6F8;
              v17 < *(double *)&qword_1E9A5A6F8;
        while (*(double *)&qword_1E9A5A700 <= v17)
          double v17 = v17 - i;
        id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14C0]), sel_init);
        objc_msgSend(v19, sel_moveToPoint_, v4, 0.0);
        objc_msgSend(v19, sel_addLineToPoint_, v4 - v14, 0.0);
        CGAffineTransformMakeRotation(&v22, v17);
        objc_msgSend(v19, sel_applyTransform_, &v22);
        objc_msgSend(v19, sel_stroke);

        uint64_t v12 = v13;
      }
      while (v13 < 60);
    }
    if (++v21 == 24)
    {
      UIGraphicsPopContext();
      return;
    }
  }
  __break(1u);
}

void sub_1AD914AEC(CGContext *a1)
{
  uint64_t v170 = sub_1AD9DC710();
  int64_t v207 = *(void *)(v170 - 8);
  MEMORY[0x1F4188790](v170, v2);
  v169 = (char *)&v167 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD916B68(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  v190 = (char *)&v167 - v7;
  sub_1AD916B68(0, &qword_1EB725690, MEMORY[0x1E4F27CA0], v4);
  MEMORY[0x1F4188790](v8 - 8, v9);
  v189 = (char *)&v167 - v10;
  uint64_t v188 = sub_1AD9DC990();
  uint64_t v204 = *(void *)(v188 - 8);
  MEMORY[0x1F4188790](v188, v11);
  v187 = (char *)&v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = sub_1AD9DCE40();
  v200 = *(char **)(v186 - 8);
  MEMORY[0x1F4188790](v186, v13);
  v185 = (char *)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD916B68(0, &qword_1EB724D70, MEMORY[0x1E4F27928], v4);
  MEMORY[0x1F4188790](v15 - 8, v16);
  v198 = (char *)&v167 - v17;
  uint64_t v199 = sub_1AD9DCC70();
  uint64_t v180 = *(void *)(v199 - 8);
  MEMORY[0x1F4188790](v199, v18);
  v197 = (char *)&v167 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1AD9DCD10();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v22);
  double v24 = (char *)&v167 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = a1;
  UIGraphicsPushContext(a1);
  sub_1AD9DCCF0();
  int v202 = sub_1AD9DCD00();
  double v25 = *(void (**)(char *, uint64_t))(v21 + 8);
  v25(v24, v20);
  double v26 = self;
  id v27 = (void *)sub_1AD9DF6D0();
  sub_1AD9DCCF0();
  uint64_t v28 = (void *)sub_1AD9DCCD0();
  v25(v24, v20);
  id v29 = objc_msgSend(v26, sel_dateFormatFromTemplate_options_locale_, v27, 0, v28);

  if (v29)
  {
    uint64_t v30 = sub_1AD9DF710();
    CGFloat v32 = v31;
  }
  else
  {
    CGFloat v32 = -1.15172193e164;
    uint64_t v30 = 22616;
  }
  *(void *)&v231[0] = 0;
  *((void *)&v231[0] + 1) = 0xE000000000000000;
  uint64_t v33 = HIBYTE(*(void *)&v32) & 0xFLL;
  if ((*(void *)&v32 & 0x2000000000000000) == 0) {
    uint64_t v33 = v30 & 0xFFFFFFFFFFFFLL;
  }
  *(void *)&v237.a = v30;
  v237.b = v32;
  v237.c = 0.0;
  *(void *)&v237.d = v33;
  uint64_t v34 = sub_1AD9DF7D0();
  uint64_t v36 = (uint64_t)v198;
  if (v35)
  {
    uint64_t v37 = v34;
    uint64_t v38 = v35;
    do
    {
      if ((sub_1AD9DF660() & 1) == 0) {
        MEMORY[0x1B3E6B720](v37, v38);
      }
      swift_bridgeObjectRelease();
      uint64_t v37 = sub_1AD9DF7D0();
      uint64_t v38 = v39;
    }
    while (v39);
  }
  swift_bridgeObjectRelease();
  id v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
  CGRect v41 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v175 = v40;
  objc_msgSend(v40, sel_setDateFormat_, v41);

  CGRect v42 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EE0]), sel_init);
  uint64_t v43 = 12;
  if (v202) {
    uint64_t v43 = 24;
  }
  uint64_t v205 = v43;
  if (qword_1EB724E38 != -1) {
    goto LABEL_76;
  }
  while (1)
  {
    id v44 = (id)qword_1EB727930;
    uint64_t v173 = sub_1AD9DCA70();
    CGFloat v179 = v45;

    sub_1AD916B68(0, (unint64_t *)&qword_1E9A4BFD8, (uint64_t (*)(uint64_t))sub_1AD916BCC, MEMORY[0x1E4FBBE00]);
    uint64_t v196 = v46;
    uint64_t v47 = swift_allocObject();
    id v48 = (void **)MEMORY[0x1E4FB06F8];
    long long v195 = xmmword_1AD9E3080;
    *(_OWORD *)(v47 + 16) = xmmword_1AD9E3080;
    char v49 = *v48;
    *(void *)(v47 + 32) = v49;
    id v50 = v206;
    id v51 = &v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    long long v52 = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 144];
    long long v227 = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 128];
    long long v228 = v52;
    long long v53 = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 176];
    long long v229 = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 160];
    long long v230 = v53;
    long long v54 = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 80];
    v223[4] = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 64];
    long long v224 = v54;
    long long v55 = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 112];
    long long v225 = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 96];
    long long v226 = v55;
    long long v56 = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
    v223[0] = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    v223[1] = v56;
    long long v57 = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
    v223[2] = *(_OWORD *)&v206[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32];
    v223[3] = v57;
    id v194 = v49;
    sub_1AD897520((uint64_t)v223);
    id v58 = objc_msgSend(v50, sel_traitCollection);
    BOOL v59 = self;
    uint64_t v60 = *MEMORY[0x1E4FB27B8];
    uint64_t v177 = *MEMORY[0x1E4FB0990];
    id v178 = v59;
    uint64_t v176 = v60;
    id v61 = objc_msgSend(v59, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, (void)v224);
    if (!v61) {
      break;
    }
    id v62 = v61;

    sub_1AD8975C0((uint64_t)v223);
    uint64_t v63 = sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
    *(void *)(v47 + 40) = v62;
    uint64_t v64 = (void *)*MEMORY[0x1E4FB0700];
    uint64_t v193 = v63;
    *(void *)(v47 + 64) = v63;
    *(void *)(v47 + 72) = v64;
    uint64_t v65 = (void *)*((void *)v51 + 15);
    uint64_t v192 = sub_1AD837214(0, (unint64_t *)&qword_1E9A4B050);
    *(void *)(v47 + 104) = v192;
    *(void *)(v47 + 80) = v65;
    id v191 = v64;
    id v66 = v65;
    unint64_t v203 = sub_1AD86421C(v47);
    uint64_t v67 = *((void *)v51 + 8);
    if (!v67)
    {
      __break(1u);
LABEL_78:
      __break(1u);
      break;
    }
    if (v67 < 1)
    {
LABEL_73:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      UIGraphicsPopContext();
      return;
    }
    uint64_t v68 = 0;
    CGFloat v69 = *((double *)v51 + 16);
    v183 = (void (**)(char *, uint64_t))(v204 + 8);
    v184 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v200 + 56);
    v181 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v180 + 48);
    v182 = (void (**)(char *, uint64_t))(v200 + 8);
    v168 = (void (**)(char *, uint64_t))(v207 + 8);
    v171 = (void (**)(char *, uint64_t))(v180 + 8);
    v172 = (void (**)(char *, uint64_t, uint64_t))(v180 + 32);
    uint64_t v174 = MEMORY[0x1E4FBC840] + 8;
    v200 = v42;
    uint64_t v204 = v67;
    while (1)
    {
      int64_t v70 = __OFADD__(v68, v67) ? ((v68 + v67) >> 63) ^ 0x8000000000000000 : v68 + v67;
      uint64_t v71 = *((void *)v51 + 9);
      if (!v71) {
        break;
      }
      if (v68 == 0x8000000000000000 && v71 == -1) {
        goto LABEL_75;
      }
      if (v68 % v71)
      {
        id v72 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v68 % v205);
        id v73 = objc_msgSend(v42, sel_stringFromNumber_, v72);

        if (v73)
        {
          int64_t v207 = v70;
          sub_1AD9DF710();

          id v74 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
          swift_bridgeObjectRetain();
          BOOL v75 = (void *)sub_1AD9DF6D0();
          swift_bridgeObjectRelease();
          type metadata accessor for Key(0);
          sub_1AD916C38();
          uint64_t v76 = (void *)sub_1AD9DF5F0();
          swift_bridgeObjectRelease();
          id v77 = objc_msgSend(v74, sel_initWithString_attributes_, v75, v76);

          goto LABEL_51;
        }
      }
      else if (v202)
      {
        id v78 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v68 % 24);
        id v79 = objc_msgSend(v42, sel_stringFromNumber_, v78);

        if (v79)
        {
          int64_t v207 = v70;
          sub_1AD9DF710();

          long long v80 = *((_OWORD *)v51 + 9);
          long long v214 = *((_OWORD *)v51 + 8);
          v215[0] = v80;
          long long v81 = *((_OWORD *)v51 + 11);
          v215[1] = *((_OWORD *)v51 + 10);
          long long v216 = v81;
          long long v82 = *((_OWORD *)v51 + 5);
          long long v210 = *((_OWORD *)v51 + 4);
          long long v211 = v82;
          long long v83 = *((_OWORD *)v51 + 7);
          long long v212 = *((_OWORD *)v51 + 6);
          long long v213 = v83;
          long long v84 = *((_OWORD *)v51 + 1);
          *(_OWORD *)&v208.a = *(_OWORD *)v51;
          *(_OWORD *)&v208.c = v84;
          long long v85 = *((_OWORD *)v51 + 3);
          *(_OWORD *)&v208.tdouble x = *((_OWORD *)v51 + 2);
          long long v209 = v85;
          sub_1AD897520((uint64_t)&v208);
          id v86 = objc_msgSend(v206, sel_traitCollection);
          uint64_t v87 = swift_allocObject();
          *(_OWORD *)(v87 + 16) = v195;
          uint64_t v88 = v194;
          *(void *)(v87 + 32) = v194;
          uint64_t v89 = *((void *)&v211 + 1);
          id v90 = v88;
          id v91 = objc_msgSend(v178, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, v89, v177, 1024, v176, v86);
          if (!v91) {
            goto LABEL_78;
          }
          *(void *)(v87 + 40) = v91;
          uint64_t v92 = v191;
          *(void *)(v87 + 64) = v193;
          *(void *)(v87 + 72) = v92;
          uint64_t v93 = (void *)v213;
          *(void *)(v87 + 104) = v192;
          *(void *)(v87 + 80) = v93;
          id v94 = v92;
          id v95 = v93;
          sub_1AD86421C(v87);

          sub_1AD8975C0((uint64_t)&v208);
          id v96 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
          uint64_t v97 = (void *)sub_1AD9DF6D0();
          swift_bridgeObjectRelease();
          type metadata accessor for Key(0);
          sub_1AD916C38();
          uint64_t v98 = (void *)sub_1AD9DF5F0();
          swift_bridgeObjectRelease();
          id v77 = objc_msgSend(v96, sel_initWithString_attributes_, v97, v98);

LABEL_50:
          uint64_t v36 = (uint64_t)v198;
          CGRect v42 = v200;
LABEL_51:
          objc_msgSend(v77, sel_size);
          double v151 = v150;
          double v153 = v152;
          if (qword_1E9A48EC0 != -1) {
            swift_once();
          }
          double v154 = *(double *)&qword_1E9A5A700;
          int64_t v70 = v207;
          if (qword_1E9A48EB0 != -1) {
            swift_once();
          }
          double v155 = *(double *)&qword_1E9A5A6F0;
          if (qword_1E9A48EB8 != -1) {
            swift_once();
          }
          double v156 = (double)v68 / 24.0 * v154 + v155;
          for (double i = *(double *)&qword_1E9A5A700 - *(double *)&qword_1E9A5A6F8;
                v156 < *(double *)&qword_1E9A5A6F8;
          while (*(double *)&qword_1E9A5A700 <= v156)
            double v156 = v156 - i;
          CGAffineTransformMakeRotation(&v208, v156);
          v247.double y = 0.0;
          v247.double x = v69;
          CGPoint v158 = CGPointApplyAffineTransform(v247, &v208);
          CGAffineTransformMakeTranslation(&v208, v151 * -0.5, v153 * -0.5);
          CGPoint v161 = CGPointApplyAffineTransform(v158, &v208);
          double y = v161.y;
          double x = v161.x;
          double v162 = *((double *)v51 + 16) + (*((double *)v51 + 2) - *((double *)v51 + 16)) * 0.5;
          if (v161.x < -v162) {
            double x = -v162;
          }
          double v163 = v151 + x;
          if (v163 >= v162) {
            double v163 = *((double *)v51 + 16) + (*((double *)v51 + 2) - *((double *)v51 + 16)) * 0.5;
          }
          double v164 = v163 - v151;
          if (v161.y < -v162) {
            double y = -v162;
          }
          double v165 = v153 + y;
          if (v165 >= v162) {
            double v165 = *((double *)v51 + 16) + (*((double *)v51 + 2) - *((double *)v51 + 16)) * 0.5;
          }
          double v166 = v165 - v153;
          objc_msgSend(v77, sel_drawAtPoint_, v164, v165 - v153);
          if (v68 == 12)
          {
            sub_1AD91637C(v201, v166);
          }
          else if (!v68)
          {
            sub_1AD9161CC(v201, v153 + v166);
          }

          uint64_t v67 = v204;
        }
      }
      else
      {
        int64_t v207 = v70;
        uint64_t v99 = v185;
        sub_1AD9DCE10();
        uint64_t v100 = v186;
        (*v184)(v189, 1, 1, v186);
        uint64_t v101 = sub_1AD9DCEB0();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v190, 1, 1, v101);
        uint64_t v102 = v187;
        sub_1AD9DC970();
        sub_1AD9DCDC0();
        (*v183)(v102, v188);
        (*v182)(v99, v100);
        uint64_t v103 = v199;
        if ((*v181)(v36, 1, v199) != 1)
        {
          (*v172)(v197, v36, v103);
          if (v68 != 12) {
            goto LABEL_41;
          }
          *(void *)&v208.a = v173;
          v208.b = v179;
          uint64_t v104 = v169;
          sub_1AD9DC6E0();
          sub_1AD85F688();
          uint64_t v105 = sub_1AD9DFEF0();
          unint64_t v107 = v106;
          (*v168)(v104, v170);
          swift_bridgeObjectRelease();
          uint64_t v108 = HIBYTE(v107) & 0xF;
          if ((v107 & 0x2000000000000000) == 0) {
            uint64_t v108 = v105 & 0xFFFFFFFFFFFFLL;
          }
          if (v108)
          {
            CGFloat v109 = v179;
            swift_bridgeObjectRetain();
            uint64_t v110 = v173;
          }
          else
          {
LABEL_41:
            uint64_t v111 = (void *)sub_1AD9DCBB0();
            id v112 = objc_msgSend(v175, sel_stringFromDate_, v111);

            uint64_t v110 = sub_1AD9DF710();
            CGFloat v109 = v113;
          }
          uint64_t v221 = 0;
          unint64_t v222 = 0xE000000000000000;
          uint64_t v114 = HIBYTE(*(void *)&v109) & 0xFLL;
          if ((*(void *)&v109 & 0x2000000000000000) == 0) {
            uint64_t v114 = v110 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v180 = v110;
          uint64_t v217 = v110;
          CGFloat v218 = v109;
          uint64_t v219 = 0;
          uint64_t v220 = v114;
          swift_bridgeObjectRetain();
          uint64_t v115 = sub_1AD9DF7D0();
          if (v116)
          {
            uint64_t v117 = v115;
            uint64_t v118 = v116;
            do
            {
              if ((sub_1AD9DF670() & 1) == 0) {
                MEMORY[0x1B3E6B720](v117, v118);
              }
              swift_bridgeObjectRelease();
              uint64_t v117 = sub_1AD9DF7D0();
              uint64_t v118 = v119;
            }
            while (v119);
          }
          swift_bridgeObjectRelease();
          uint64_t v120 = sub_1AD9DF770();
          swift_bridgeObjectRelease();
          uint64_t v122 = *((void *)v51 + 12);
          uint64_t v121 = *((void *)v51 + 13);
          char v123 = v121 < v120;
          CGFloat v124 = *((double *)v51 + 2);
          int v125 = *((_DWORD *)v51 + 6);
          CGFloat v126 = *((double *)v51 + 4);
          CGFloat v127 = *((double *)v51 + 5);
          uint64_t v128 = *((void *)v51 + 18);
          uint64_t v129 = *((void *)v51 + 21);
          *(_OWORD *)&v208.a = *(_OWORD *)v51;
          v208.c = v124;
          LODWORD(v208.d) = v125;
          v208.tdouble x = v126;
          v208.tdouble y = v127;
          long long v130 = *((_OWORD *)v51 + 4);
          long long v209 = *((_OWORD *)v51 + 3);
          long long v210 = v130;
          long long v211 = *((_OWORD *)v51 + 5);
          *(void *)&long long v212 = v122;
          *((void *)&v212 + 1) = v121;
          long long v131 = *((_OWORD *)v51 + 8);
          long long v213 = *((_OWORD *)v51 + 7);
          long long v214 = v131;
          *(void *)&v215[0] = v128;
          *(_OWORD *)((char *)v215 + 8) = *(_OWORD *)(v51 + 152);
          *((void *)&v215[1] + 1) = v129;
          long long v216 = *((_OWORD *)v51 + 11);
          long long v242 = v213;
          long long v241 = v212;
          long long v240 = v211;
          long long v238 = v209;
          long long v239 = v210;
          CGAffineTransform v237 = v208;
          long long v246 = v216;
          long long v245 = v215[1];
          long long v244 = v215[0];
          long long v243 = v131;
          sub_1AD897520((uint64_t)&v208);
          id v132 = v206;
          id v133 = objc_msgSend(v206, sel_traitCollection);
          id v134 = sub_1AD916050(v123, (uint64_t)v133);

          sub_1AD8975C0((uint64_t)&v208);
          long long v135 = *((_OWORD *)v51 + 9);
          long long v233 = *((_OWORD *)v51 + 8);
          long long v234 = v135;
          long long v136 = *((_OWORD *)v51 + 11);
          long long v235 = *((_OWORD *)v51 + 10);
          long long v236 = v136;
          long long v137 = *((_OWORD *)v51 + 5);
          v231[4] = *((_OWORD *)v51 + 4);
          v231[5] = v137;
          long long v138 = *((_OWORD *)v51 + 7);
          v231[6] = *((_OWORD *)v51 + 6);
          long long v232 = v138;
          long long v139 = *((_OWORD *)v51 + 1);
          v231[0] = *(_OWORD *)v51;
          v231[1] = v139;
          long long v140 = *((_OWORD *)v51 + 3);
          v231[2] = *((_OWORD *)v51 + 2);
          v231[3] = v140;
          sub_1AD897520((uint64_t)v231);
          id v141 = objc_msgSend(v132, sel_traitCollection);
          uint64_t v142 = swift_allocObject();
          *(_OWORD *)(v142 + 16) = v195;
          char v143 = v194;
          *(void *)(v142 + 32) = v194;
          id v144 = v143;
          *(void *)(v142 + 40) = sub_1AD916530(v123, (uint64_t)v141);
          uint64_t v145 = v191;
          *(void *)(v142 + 64) = v193;
          *(void *)(v142 + 72) = v145;
          uint64_t v146 = (void *)v232;
          *(void *)(v142 + 104) = v192;
          *(void *)(v142 + 80) = v146;
          id v147 = v145;
          id v148 = v146;
          unint64_t v149 = sub_1AD86421C(v142);

          sub_1AD8975C0((uint64_t)v231);
          sub_1AD837214(0, (unint64_t *)&unk_1E9A4AEC0);
          id v77 = (id)MEMORY[0x1B3E6BC80](v180, *(void *)&v109, v134, v149);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*v171)(v197, v199);
          goto LABEL_50;
        }
        sub_1AD894998(v36);
        CGRect v42 = v200;
        int64_t v70 = v207;
      }
      uint64_t v68 = v70;
      if (v70 >= 24) {
        goto LABEL_73;
      }
    }
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    swift_once();
  }
  __break(1u);
}

id SleepScheduleClockDial.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleClockDial.init(frame:)()
{
}

id SleepScheduleClockDial.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleClockDial();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1AD916050(char a1, uint64_t a2)
{
  sub_1AD916B68(0, (unint64_t *)&qword_1E9A4BFD8, (uint64_t (*)(uint64_t))sub_1AD916BCC, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD9E3080;
  uint64_t v6 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  uint64_t v7 = 88;
  if (a1) {
    uint64_t v7 = 96;
  }
  uint64_t v8 = *(void *)(v2 + v7);
  id v9 = self;
  uint64_t v10 = *MEMORY[0x1E4FB0990];
  uint64_t v11 = *MEMORY[0x1E4FB27B8];
  id v12 = v6;
  id result = objc_msgSend(v9, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, v8, v10, 1024, v11, a2);
  if (result)
  {
    id v14 = result;
    uint64_t v15 = sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
    *(void *)(inited + 40) = v14;
    uint64_t v16 = (void *)*MEMORY[0x1E4FB0700];
    *(void *)(inited + 64) = v15;
    *(void *)(inited + 72) = v16;
    uint64_t v17 = *(void **)(v2 + 112);
    *(void *)(inited + 104) = sub_1AD837214(0, (unint64_t *)&qword_1E9A4B050);
    *(void *)(inited + 80) = v17;
    id v18 = v16;
    id v19 = v17;
    return (id)sub_1AD86421C(inited);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1AD9161CC(CGContext *a1, double a2)
{
  UIGraphicsPushContext(a1);
  double v4 = (double *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  long long v5 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 144];
  v18[8] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 128];
  v18[9] = v5;
  long long v6 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 176];
  *(_OWORD *)id v19 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 160];
  long long v20 = v6;
  long long v7 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 80];
  v18[4] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 64];
  v18[5] = v7;
  long long v8 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 112];
  void v18[6] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 96];
  v18[7] = v8;
  long long v9 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
  v18[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  v18[1] = v9;
  long long v10 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
  v18[2] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32];
  v18[3] = v10;
  sub_1AD897520((uint64_t)v18);
  id v11 = objc_msgSend(v2, sel_traitCollection);
  id v12 = objc_msgSend(v19[0], sel_resolvedColorWithTraitCollection_, v11);
  swift_bridgeObjectRetain();
  id v13 = v11;
  id v14 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(self, sel_systemImageNamed_compatibleWithTraitCollection_, v14, v13);

  if (v15)
  {
    id v16 = objc_msgSend(v15, sel_imageWithTintColor_renderingMode_, v12, 2);

    sub_1AD8975C0((uint64_t)v18);
    if (v16)
    {
      objc_msgSend(v16, sel_size);
      objc_msgSend(v16, sel_drawAtPoint_, v17 * -0.5, v4[17] + a2);
    }
  }
  else
  {

    sub_1AD8975C0((uint64_t)v18);
  }
  UIGraphicsPopContext();
}

void sub_1AD91637C(CGContext *a1, double a2)
{
  UIGraphicsPushContext(a1);
  double v4 = (double *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  long long v5 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 144];
  v19[8] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 128];
  v19[9] = v5;
  long long v6 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 176];
  v19[10] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 160];
  *(_OWORD *)long long v20 = v6;
  long long v7 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 80];
  v19[4] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 64];
  v19[5] = v7;
  long long v8 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 112];
  v19[6] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 96];
  v19[7] = v8;
  long long v9 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
  v19[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  v19[1] = v9;
  long long v10 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
  id v19[2] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32];
  v19[3] = v10;
  sub_1AD897520((uint64_t)v19);
  id v11 = objc_msgSend(v2, sel_traitCollection);
  id v12 = objc_msgSend(v20[1], sel_resolvedColorWithTraitCollection_, v11);
  swift_bridgeObjectRetain();
  id v13 = v11;
  id v14 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(self, sel_systemImageNamed_compatibleWithTraitCollection_, v14, v13);

  if (v15)
  {
    id v16 = objc_msgSend(v15, sel_imageWithTintColor_renderingMode_, v12, 2);

    sub_1AD8975C0((uint64_t)v19);
    if (v16)
    {
      objc_msgSend(v16, sel_size);
      objc_msgSend(v16, sel_drawAtPoint_, v17 * -0.5, a2 - v18 - v4[17]);
    }
  }
  else
  {

    sub_1AD8975C0((uint64_t)v19);
  }
  UIGraphicsPopContext();
}

id sub_1AD916530(char a1, uint64_t a2)
{
  uint64_t v4 = 88;
  if (a1) {
    uint64_t v4 = 96;
  }
  uint64_t v5 = *(void *)(v2 + v4);
  long long v6 = self;
  id result = objc_msgSend(v6, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, v5, *MEMORY[0x1E4FB0990], 1024, *MEMORY[0x1E4FB27B8], a2);
  if (result)
  {
    long long v8 = result;
    id v9 = objc_msgSend(result, sel_fontDescriptor);
    Class isa = UIFontDescriptor.addingLowercaseSmallCapsAttributes()().super.isa;
    Class v11 = UIFontDescriptor.addingUppercaseSmallCapsAttributes()().super.isa;

    id v12 = objc_msgSend(v6, sel_fontWithDescriptor_size_, v11, 0.0);
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t method lookup function for SleepScheduleClockDial(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepScheduleClockDial);
}

void destroy for SleepScheduleClockDial.Configuration(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 184);
}

uint64_t initializeWithCopy for SleepScheduleClockDial.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v6 = *(void **)(a2 + 80);
  long long v7 = *(void **)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  id v9 = *(void **)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v8;
  long long v10 = *(void **)(a2 + 112);
  Class v11 = *(void **)(a2 + 120);
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = v11;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;
  id v14 = *(void **)(a2 + 160);
  uint64_t v13 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = v14;
  *(void *)(a1 + 168) = v13;
  double v25 = *(void **)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v25;
  id v15 = v3;
  id v16 = v4;
  id v17 = v6;
  id v18 = v7;
  id v19 = v9;
  id v20 = v10;
  id v21 = v11;
  swift_bridgeObjectRetain();
  id v22 = v14;
  swift_bridgeObjectRetain();
  id v23 = v25;
  return a1;
}

uint64_t assignWithCopy for SleepScheduleClockDial.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  long long v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  long long v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v10 = *(void **)(a2 + 80);
  Class v11 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v10;
  id v12 = v10;

  uint64_t v13 = *(void **)(a2 + 88);
  id v14 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v13;
  id v15 = v13;

  id v16 = *(void **)(a2 + 96);
  id v17 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v16;
  id v18 = v16;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  id v19 = *(void **)(a2 + 112);
  id v20 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v19;
  id v21 = v19;

  id v22 = *(void **)(a2 + 120);
  id v23 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v22;
  id v24 = v22;

  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  double v25 = *(void **)(a2 + 160);
  double v26 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v25;
  id v27 = v25;

  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void **)(a2 + 184);
  id v29 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = v28;
  id v30 = v28;

  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for SleepScheduleClockDial.Configuration(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;

  long long v6 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);

  long long v7 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v8 = *(void **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);

  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  long long v9 = *(void **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);

  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  long long v10 = *(void **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);

  return a1;
}

uint64_t getEnumTagSinglePayload for SleepScheduleClockDial.Configuration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepScheduleClockDial.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepScheduleClockDial.Configuration()
{
  return &type metadata for SleepScheduleClockDial.Configuration;
}

uint64_t sub_1AD916B28()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD916B60(uint64_t a1, uint64_t a2)
{
  sub_1AD914114(a1, a2, v2);
}

void sub_1AD916B68(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD916BCC()
{
  if (!qword_1E9A4BFE0)
  {
    type metadata accessor for Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4BFE0);
    }
  }
}

unint64_t sub_1AD916C38()
{
  unint64_t result = qword_1E9A496A0;
  if (!qword_1E9A496A0)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A496A0);
  }
  return result;
}

id sub_1AD916C90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_systemBackgroundColor);
  id v4 = objc_msgSend(v2, sel_secondarySystemBackgroundColor);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  id v6 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  id v30 = sub_1AD87B14C;
  uint64_t v31 = v5;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v27 = 1107296256;
  uint64_t v28 = sub_1AD8F0900;
  id v29 = &block_descriptor_17;
  uint64_t v7 = _Block_copy(&aBlock);
  id v8 = v3;
  id v9 = v4;
  id v25 = objc_msgSend(v6, sel_initWithDynamicProvider_, v7);
  _Block_release(v7);

  swift_release();
  id v10 = objc_msgSend(v2, sel_systemGray4Color);
  id v11 = objc_msgSend(v2, sel_systemGray2Color);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  id v13 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  id v30 = sub_1AD917078;
  uint64_t v31 = v12;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v27 = 1107296256;
  uint64_t v28 = sub_1AD8F0900;
  id v29 = &block_descriptor_14;
  id v14 = _Block_copy(&aBlock);
  id v15 = v10;
  id v16 = v11;
  id v17 = objc_msgSend(v13, sel_initWithDynamicProvider_, v14);
  _Block_release(v14);

  swift_release();
  id v18 = (void *)*MEMORY[0x1E4FB28F0];
  id v19 = (id)*MEMORY[0x1E4FB2950];
  id v20 = v18;
  id v21 = objc_msgSend(v2, sel_labelColor);
  id v22 = objc_msgSend(v2, sel_systemGrayColor);
  id v23 = objc_msgSend(v2, sel_hk_sleepKeyColor);
  id result = objc_msgSend(v2, sel_systemYellowColor);
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = 0x4059C00000000000;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0x4000000000000000;
  *(void *)(a1 + 40) = 15;
  *(_OWORD *)(a1 + 48) = xmmword_1AD9E9EB0;
  *(_OWORD *)(a1 + 64) = xmmword_1AD9E9EC0;
  *(void *)(a1 + 80) = v19;
  *(void *)(a1 + 88) = v19;
  *(void *)(a1 + 96) = v20;
  *(void *)(a1 + 104) = 2;
  *(void *)(a1 + 112) = v21;
  *(void *)(a1 + 120) = v22;
  *(_OWORD *)(a1 + 128) = xmmword_1AD9E9ED0;
  *(void *)(a1 + 144) = 0x73656C6B72617073;
  *(void *)(a1 + 152) = 0xE800000000000000;
  *(void *)(a1 + 160) = v23;
  strcpy((char *)(a1 + 168), "sun.max.fill");
  *(unsigned char *)(a1 + 181) = 0;
  *(_WORD *)(a1 + 182) = -5120;
  *(void *)(a1 + 184) = result;
  return result;
}

uint64_t sub_1AD917014()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

double TimeInBedComputable.timeIntervalInBed.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 24))();
  return (double)v3 * 60.0 + (double)v2 * 60.0 * 60.0;
}

void *TimeInBedComputable.timeInBed.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(void *__return_ptr);
  uint64_t v5;
  void *(*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void v23[2];

  id v4 = *(void (**)(void *__return_ptr))(a2 + 16);
  v4(v23);
  uint64_t v5 = v23[0];
  id v6 = *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 8);
  id result = v6(&v21, a1, a2);
  id v8 = v21;
  id v9 = v5 - v21;
  if (__OFSUB__(v5, v21))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v4)(v23, a1, a2);
  id v10 = v23[1];
  id result = v6(&v21, a1, a2);
  id v11 = v10 - v22;
  if (__OFSUB__(v10, v22))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  if (v11 < 0)
  {
    uint64_t v12 = -60;
    if (v11 > -60) {
      uint64_t v12 = v10 - v22;
    }
    id v13 = v22 + v12;
    if (v22 + v12 == v10) {
      id v14 = v10;
    }
    else {
      id v14 = v10 + 1;
    }
    id v15 = v13 == v10;
    id v16 = (v13 - v14) / 0x3CuLL;
    if (!v15) {
      ++v16;
    }
    while ((v5 ^ 0x8000000000000000) - v8 > v16)
    {
      --v9;
      id v17 = v11 < -60;
      v11 += 60;
      if (!v17) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_13:
  if ((v9 & 0x8000000000000000) != 0)
  {
    id v18 = -24;
    if ((uint64_t)v9 > -24) {
      id v18 = v9;
    }
    if (v9 >= 0xFFFFFFFFFFFFFFE8) {
      id v19 = v9;
    }
    else {
      id v19 = v9 + 1;
    }
    id v20 = (v18 - v19) / 0x18;
    if (v9 < 0xFFFFFFFFFFFFFFE8) {
      ++v20;
    }
    v9 += 24 * v20 + 24;
  }
  else if (v9 >= 0x18)
  {
    return (void *)((v9 - 24) % 0x18);
  }
  return (void *)v9;
}

void TimeInBedComputable.actualTimeIntervalInBed.getter(uint64_t a1, uint64_t a2)
{
  sub_1AD917780(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v39 = (char *)v32 - v7;
  sub_1AD917780(0, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v8 - 8, v9);
  id v11 = (char *)v32 - v10;
  uint64_t v38 = sub_1AD9DC990();
  uint64_t v12 = *(void *)(v38 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v38, v13);
  id v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v17);
  id v19 = (char *)v32 - v18;
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5508]), sel_init);
  objc_msgSend(v20, sel_setWeekdays_, *MEMORY[0x1E4FA5488]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v41, a1, a2);
  uint64_t v40 = v12;
  uint64_t v34 = v16;
  uint64_t v35 = a1;
  uint64_t v36 = v2;
  uint64_t v37 = a2;
  if (v42 == 60 && __OFADD__(v41, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = sub_1AD9DCE40();
    uint64_t v22 = *(void *)(v21 - 8);
    id v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    v32[1] = v22 + 56;
    uint64_t v33 = v23;
    v23(v11, 1, 1, v21);
    id v24 = v11;
    uint64_t v25 = sub_1AD9DCEB0();
    v32[0] = *(void *)(*(void *)(v25 - 8) + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v32[0])(v39, 1, 1, v25);
    double v26 = v24;
    sub_1AD9DC970();
    uint64_t v27 = (void *)sub_1AD9DC8B0();
    uint64_t v28 = v40 + 8;
    id v29 = *(void (**)(char *, uint64_t))(v40 + 8);
    v29(v19, v38);
    objc_msgSend(v20, sel_setWakeUpComponents_, v27);

    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v37 + 8))(&v41, v35);
    uint64_t v40 = v28;
    if (v42 != 60 || !__OFADD__(v41, 1))
    {
      v33(v26, 1, 1, v21);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v32[0])(v39, 1, 1, v25);
      id v30 = v34;
      sub_1AD9DC970();
      uint64_t v31 = (void *)sub_1AD9DC8B0();
      v29(v30, v38);
      objc_msgSend(v20, sel_setBedtimeComponents_, v31);

      objc_msgSend(v20, sel_actualSleepInterval);
      return;
    }
  }
  __break(1u);
}

void sub_1AD917780(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t dispatch thunk of TimeInBedComputable.bedtime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TimeInBedComputable.wakeUp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TimeInBedComputable.timeInBed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TimeInBedComputable.actualTimeIntervalInBed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

unint64_t sub_1AD917824()
{
  return sub_1AD94C3E0();
}

void sub_1AD917860()
{
}

uint64_t destroy for HorizontalGridLines(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 80);
  char v3 = *(unsigned char *)(a1 + 88);
  return sub_1AD862078(v2, v3);
}

uint64_t initializeWithCopy for HorizontalGridLines(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  char v7 = *(unsigned char *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1AD861F90(v6, v7);
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 88) = v7;
  return a1;
}

uint64_t assignWithCopy for HorizontalGridLines(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + 64) = *(void *)(v2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(v2 + 80);
  LOBYTE(v2) = *(unsigned char *)(v2 + 88);
  sub_1AD861F90(v5, v2);
  uint64_t v6 = *(void *)(a1 + 80);
  char v7 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 88) = v2;
  sub_1AD862078(v6, v7);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for HorizontalGridLines(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  char v5 = *(unsigned char *)(a2 + 88);
  uint64_t v6 = *(void *)(a1 + 80);
  char v7 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v5;
  sub_1AD862078(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalGridLines(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalGridLines(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HorizontalGridLines()
{
  return &type metadata for HorizontalGridLines;
}

uint64_t sub_1AD917B84()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD917BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1AD9DDDF0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6, v9);
  sub_1AD918110();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = MEMORY[0x1F4188790](v10, v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a2 + 8);
  uint64_t v17 = v16 - *(void *)a2;
  if (__OFSUB__(v16, *(void *)a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v18 = *(void *)(a2 + 16);
  if (!v18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v17 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_12;
  }
  uint64_t v19 = v17 / v18;
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (!v20)
  {
    if ((v21 & 0x8000000000000000) == 0)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v21;
      uint64_t v28 = result;
      swift_getKeyPath();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
      uint64_t v22 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v27 = a3;
      uint64_t v23 = (v22 + 105) & ~v22;
      id v24 = (_OWORD *)swift_allocObject();
      long long v25 = *(_OWORD *)(a2 + 48);
      v24[3] = *(_OWORD *)(a2 + 32);
      void v24[4] = v25;
      v24[5] = *(_OWORD *)(a2 + 64);
      *(_OWORD *)((char *)v24 + 89) = *(_OWORD *)(a2 + 73);
      long long v26 = *(_OWORD *)(a2 + 16);
      v24[1] = *(_OWORD *)a2;
      v24[2] = v26;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v24 + v23, (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      sub_1AD9180C0(a2);
      sub_1AD918254(0, &qword_1EB7253F0, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
      sub_1AD9181D0();
      sub_1AD858748();
      sub_1AD918408();
      sub_1AD9DF250();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v27, v15, v28);
    }
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1AD917E78@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t))(a2 + 64))(*a1);
  if ((result & 1) == 0)
  {
    uint64_t v22 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    double v13 = 0.0;
    double v20 = 0.0;
    double v21 = 0.0;
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v23 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 80);
  char v12 = *(unsigned char *)(a2 + 88);
  swift_bridgeObjectRetain();
  sub_1AD861F90(v11, v12);
  double v13 = sub_1AD966C28(v11, v12);
  sub_1AD862078(v11, v12);
  sub_1AD9DDDE0();
  double v15 = v14;
  uint64_t result = sub_1AD9DDDE0();
  uint64_t v17 = *(void *)(a2 + 8);
  uint64_t v18 = v17 - *(void *)a2;
  if (__OFSUB__(v17, *(void *)a2))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v19 = *(void *)(a2 + 16);
  if (!v19)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v18 != 0x8000000000000000 || v19 != -1)
  {
    double v20 = v15 * 0.5;
    double v21 = v16 * 0.5 - v16 / (double)(v18 / v19) * (double)v5;
    uint64_t v22 = v23;
LABEL_8:
    *(void *)a3 = v22;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v9;
    *(void *)(a3 + 24) = v8;
    *(void *)(a3 + 32) = v10;
    *(double *)(a3 + 40) = v13;
    *(double *)(a3 + 48) = v20;
    *(double *)(a3 + 56) = v21;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1AD917FD4@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  long long v3 = v1[3];
  v9[2] = v1[2];
  v9[3] = v3;
  v10[0] = v1[4];
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v1 + 73);
  long long v4 = v1[1];
  v9[0] = *v1;
  v9[1] = v4;
  uint64_t v5 = (_OWORD *)swift_allocObject();
  long long v6 = v1[3];
  v5[3] = v1[2];
  v5[4] = v6;
  v5[5] = v1[4];
  *(_OWORD *)((char *)v5 + 89) = *(_OWORD *)((char *)v1 + 73);
  long long v7 = v1[1];
  v5[1] = *v1;
  v5[2] = v7;
  *a1 = sub_1AD9180B8;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v5;
  return sub_1AD9180C0((uint64_t)v9);
}

uint64_t sub_1AD91806C()
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_1AD862078(*(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
  return swift_deallocObject();
}

uint64_t sub_1AD9180B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD917BA0(a1, v2 + 16, a2);
}

uint64_t sub_1AD9180C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  char v3 = *(unsigned char *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1AD861F90(v2, v3);
  return a1;
}

void sub_1AD918110()
{
  if (!qword_1E9A4BFE8)
  {
    sub_1AD918254(255, &qword_1EB7253F0, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    sub_1AD9181D0();
    sub_1AD858748();
    unint64_t v0 = sub_1AD9DF270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BFE8);
    }
  }
}

void sub_1AD9181D0()
{
  if (!qword_1E9A4BFF0)
  {
    sub_1AD918254(255, &qword_1E9A4BFF8, (uint64_t)&type metadata for HorizontalLine, MEMORY[0x1E4F3CC98], MEMORY[0x1E4F3CC10]);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BFF0);
    }
  }
}

void sub_1AD918254(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1AD9182A4()
{
  uint64_t v1 = sub_1AD9DDDF0();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 105) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1AD862078(*(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1AD918384@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD9DDDF0();
  return sub_1AD917E78(a1, v2 + 16, a2);
}

uint64_t sub_1AD918408()
{
  return sub_1AD918B94(&qword_1E9A4C000, (void (*)(uint64_t))sub_1AD9181D0, (void (*)(void))sub_1AD918450);
}

unint64_t sub_1AD918450()
{
  unint64_t result = qword_1E9A4C008;
  if (!qword_1E9A4C008)
  {
    sub_1AD918254(255, &qword_1E9A4BFF8, (uint64_t)&type metadata for HorizontalLine, MEMORY[0x1E4F3CC98], MEMORY[0x1E4F3CC10]);
    sub_1AD9184F4();
    sub_1AD8589C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C008);
  }
  return result;
}

unint64_t sub_1AD9184F4()
{
  unint64_t result = qword_1E9A4C010;
  if (!qword_1E9A4C010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C010);
  }
  return result;
}

double sub_1AD918548@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  unint64_t v6 = v5;
  uint64_t v12 = sub_1AD9E02A0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  double v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DEA30();
  v32.origin.double x = a2;
  v32.origin.double y = a3;
  v32.size.CGFloat width = a4;
  v32.size.CGFloat height = a5;
  double MaxY = CGRectGetMaxY(v32);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E4FBBEB0], v12);
  CGFloat.rounded(_:toScale:)((uint64_t)v16, v6[5], MaxY);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v33.origin.double x = a2;
  v33.origin.double y = a3;
  v33.size.CGFloat width = a4;
  v33.size.CGFloat height = a5;
  CGRectGetMinX(v33);
  sub_1AD9DEA10();
  v34.origin.double x = a2;
  v34.origin.double y = a3;
  v34.size.CGFloat width = a4;
  v34.size.CGFloat height = a5;
  CGRectGetMaxX(v34);
  sub_1AD9DEA20();
  v29[0] = v21[0];
  v29[1] = v21[1];
  char v30 = v22;
  long long v18 = *((_OWORD *)v6 + 1);
  long long v26 = *(_OWORD *)v6;
  long long v27 = v18;
  uint64_t v28 = *((void *)v6 + 4);
  sub_1AD918DC0((uint64_t)v29, (uint64_t)v31);
  sub_1AD918E34((uint64_t)v31, (void (*)(void, void, void, void, void))sub_1AD918E1C);
  sub_1AD9DEA00();
  sub_1AD918E34((uint64_t)v29, (void (*)(void, void, void, void, void))sub_1AD918E74);
  sub_1AD918E34((uint64_t)v29, (void (*)(void, void, void, void, void))sub_1AD918E74);
  double result = *(double *)&v23;
  long long v20 = v24;
  *(_OWORD *)a1 = v23;
  *(_OWORD *)(a1 + 16) = v20;
  *(unsigned char *)(a1 + 32) = v25;
  return result;
}

double sub_1AD918798@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  sub_1AD918548((uint64_t)v8, a2, a3, a4, a5);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

uint64_t sub_1AD9187DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD918D6C();
  return MEMORY[0x1F40FC6D8](a1, a2, a3, v6);
}

uint64_t sub_1AD918840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD918D6C();
  return MEMORY[0x1F40FC690](a1, a2, a3, v6);
}

uint64_t sub_1AD9188A4(uint64_t a1)
{
  unint64_t v2 = sub_1AD918D6C();
  return MEMORY[0x1F40FC6B0](a1, v2);
}

uint64_t initializeWithCopy for HorizontalLine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HorizontalLine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for HorizontalLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalLine(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HorizontalLine()
{
  return &type metadata for HorizontalLine;
}

uint64_t sub_1AD918AA4()
{
  return sub_1AD918CA8(&qword_1E9A4C018, (void (*)(uint64_t))sub_1AD918AEC);
}

void sub_1AD918AEC()
{
  if (!qword_1E9A4C020)
  {
    sub_1AD918110();
    sub_1AD918B94(&qword_1E9A4C028, (void (*)(uint64_t))sub_1AD918110, (void (*)(void))sub_1AD918408);
    unint64_t v0 = sub_1AD9DDEE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C020);
    }
  }
}

uint64_t sub_1AD918B94(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD918C08()
{
  unint64_t result = qword_1E9A4C030;
  if (!qword_1E9A4C030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C030);
  }
  return result;
}

uint64_t sub_1AD918C60()
{
  return sub_1AD918CA8(&qword_1E9A4C038, (void (*)(uint64_t))sub_1AD918CF0);
}

uint64_t sub_1AD918CA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD918CF0()
{
  if (!qword_1E9A4C040)
  {
    sub_1AD918D6C();
    unint64_t v0 = sub_1AD9DDD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C040);
    }
  }
}

unint64_t sub_1AD918D6C()
{
  unint64_t result = qword_1E9A4C048;
  if (!qword_1E9A4C048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C048);
  }
  return result;
}

uint64_t sub_1AD918DC0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1AD918E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1AD918E34(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1AD918E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_release();
  }
  return result;
}

Swift::String __swiftcall LocalizedString(_:table:comment:)(Swift::String _, SleepHealthUI::LocalizedStringTable table, Swift::String comment)
{
  uint64_t v3 = sub_1AD9DCA70();
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

id static LocalizedStringTable.featureTable(feature:bundle:)@<X0>(void *a1@<X2>, void *a2@<X8>)
{
  strcpy((char *)v6, "Localizable-");
  BYTE5(v6[1]) = 0;
  HIWORD(v6[1]) = -5120;
  sub_1AD9DF790();
  uint64_t v3 = v6[1];
  *a2 = v6[0];
  a2[1] = v3;
  a2[2] = a1;
  return a1;
}

id static LocalizedStringTable.defaultTable(bundle:)@<X0>(id a1@<X0>, void *a2@<X8>)
{
  *a2 = 0x617A696C61636F4CLL;
  a2[1] = 0xEB00000000656C62;
  a2[2] = a1;
  return a1;
}

void *assignWithCopy for LocalizedStringTable(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

ValueMetadata *type metadata accessor for LocalizedStringTable()
{
  return &type metadata for LocalizedStringTable;
}

uint64_t sub_1AD918FDC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for ObservableNotification();
    sub_1AD9195C8(&qword_1E9A4C050, v1, (void (*)(uint64_t))type metadata accessor for ObservableNotification);
    sub_1AD9DDAB0();
    swift_release();
    sub_1AD9DDB50();
    return swift_release();
  }
  return result;
}

uint64_t ObservableNotification.deinit()
{
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    sub_1AD9DDA90();
    swift_release();
  }
  swift_release();
  return v0;
}

uint64_t ObservableNotification.__deallocating_deinit()
{
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    sub_1AD9DDA90();
    swift_release();
  }
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1AD919144@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ObservableNotification();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

uint64_t static ObservableNotification.contentSizeObserver.getter()
{
  uint64_t v0 = sub_1AD9DFD30();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (void *)*MEMORY[0x1E4FB27A8];
  type metadata accessor for ObservableNotification();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  long long v7 = self;
  id v8 = v5;
  id v9 = objc_msgSend(v7, sel_defaultCenter);
  sub_1AD9DFD40();

  swift_allocObject();
  swift_weakInit();
  sub_1AD9195C8(&qword_1EB725B80, 255, MEMORY[0x1E4F27FC8]);
  uint64_t v10 = sub_1AD9DDC40();

  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  *(void *)(v6 + 16) = v10;
  swift_release();
  return v6;
}

uint64_t type metadata accessor for ObservableNotification()
{
  return self;
}

uint64_t sub_1AD91937C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD9193B4()
{
  return sub_1AD918FDC();
}

uint64_t sub_1AD9193BC(uint64_t result, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    long long v7 = (void *)result;
    type metadata accessor for ObservableDarwinNotification();
    sub_1AD9195C8(&qword_1E9A4C058, v8, (void (*)(uint64_t))type metadata accessor for ObservableDarwinNotification);
    swift_retain();
    id v9 = v7;
    id v10 = a3;
    id v11 = a5;
    sub_1AD9DDAB0();
    sub_1AD9DDB50();

    swift_release();
    return swift_release();
  }
  return result;
}

const void *ObservableDarwinNotification.deinit()
{
  uint64_t v1 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v1, v0);

  return v0;
}

uint64_t ObservableDarwinNotification.__deallocating_deinit()
{
  uint64_t v1 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v1, v0);

  return swift_deallocClassInstance();
}

uint64_t sub_1AD919538@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ObservableDarwinNotification();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

uint64_t method lookup function for ObservableNotification(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ObservableNotification);
}

uint64_t type metadata accessor for ObservableDarwinNotification()
{
  return self;
}

uint64_t method lookup function for ObservableDarwinNotification(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ObservableDarwinNotification);
}

uint64_t sub_1AD9195C8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id static UIAlertController.overlappingOverrideOccurrenceAlert(dismissHandler:)(uint64_t a1, uint64_t a2)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v4 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  uint64_t v5 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, v5, 0, 0, 0xE000000000000000);

  id v7 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  sub_1AD8CB060(a1);
  id v9 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  long long v23 = sub_1AD919FC0;
  uint64_t v24 = v8;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v20 = 1107296256;
  double v21 = sub_1AD9199DC;
  char v22 = &block_descriptor_18;
  id v10 = _Block_copy(&aBlock);
  swift_release();
  id v11 = self;
  id v12 = objc_msgSend(v11, sel_actionWithTitle_style_handler_, v9, 0, v10, 0xE000000000000000);
  _Block_release(v10);

  objc_msgSend(v6, sel_addAction_, v12);
  id v13 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  sub_1AD8CB060(a1);
  uint64_t v15 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  long long v23 = sub_1AD919FE4;
  uint64_t v24 = v14;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v20 = 1107296256;
  double v21 = sub_1AD9199DC;
  char v22 = &block_descriptor_6_2;
  double v16 = _Block_copy(&aBlock);
  swift_release();
  id v17 = objc_msgSend(v11, sel_actionWithTitle_style_handler_, v15, 1, v16, 0xE000000000000000);
  _Block_release(v16);

  objc_msgSend(v6, sel_addAction_, v17);
  return v6;
}

void sub_1AD9199DC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

id static UIAlertController.internalOnlyAlert(for:dismissHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_getErrorValue();
    uint64_t aBlock = sub_1AD9E0340();
    uint64_t v22 = v6;
    sub_1AD9DF730();
  }
  id v7 = (void *)sub_1AD9DF6D0();
  uint64_t v8 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, v7, v8, 1);

  id v10 = (void *)swift_allocObject();
  _OWORD v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  id v11 = a1;
  sub_1AD8CB060(a2);
  id v12 = (void *)sub_1AD9DF6D0();
  char v25 = sub_1AD91A034;
  long long v26 = v10;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v22 = 1107296256;
  long long v23 = sub_1AD9199DC;
  uint64_t v24 = &block_descriptor_12_1;
  id v13 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v14 = self;
  id v15 = objc_msgSend(v14, sel_actionWithTitle_style_handler_, v12, 0, v13);
  _Block_release(v13);

  objc_msgSend(v9, sel_addAction_, v15);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  sub_1AD8CB060(a2);
  id v17 = (void *)sub_1AD9DF6D0();
  char v25 = sub_1AD919FE4;
  long long v26 = (void *)v16;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v22 = 1107296256;
  long long v23 = sub_1AD9199DC;
  uint64_t v24 = &block_descriptor_18;
  long long v18 = _Block_copy(&aBlock);
  swift_release();
  id v19 = objc_msgSend(v14, sel_actionWithTitle_style_handler_, v17, 1, v18);
  _Block_release(v18);

  objc_msgSend(v9, sel_addAction_, v19);
  return v9;
}

uint64_t sub_1AD919D5C(uint64_t a1, void *a2, void (*a3)(uint64_t))
{
  uint64_t v5 = sub_1AD9DCB80();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  id v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = (void *)sub_1AD9DF6D0();
  if (a2)
  {
    v20[1] = a2;
    id v11 = a2;
    sub_1AD869CF0();
    sub_1AD9DF730();
  }
  id v12 = self;
  id v13 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_hk_tapToHealthRadarURLWithTitle_description_classification_reproducibility_keywords_autoDiagnostics_attachments_, v10, v13, 2, 0, 0, 2, 0);

  sub_1AD9DCB60();
  id v15 = objc_msgSend(self, sel_defaultWorkspace);
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = (void *)sub_1AD9DCB50();
    sub_1AD86409C(MEMORY[0x1E4FBC860]);
    long long v18 = (void *)sub_1AD9DF5F0();
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_openSensitiveURL_withOptions_, v17, v18);
  }
  if (a3) {
    a3(1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1AD919FC0(uint64_t a1)
{
  return sub_1AD91A084(a1, 1);
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t sub_1AD919FE4(uint64_t a1)
{
  return sub_1AD91A084(a1, 0);
}

uint64_t sub_1AD919FEC()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1AD91A034(uint64_t a1)
{
  return sub_1AD919D5C(a1, *(void **)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t objectdestroyTm_5()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1AD91A084(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 16);
  if (v3) {
    return v3(a2 & 1);
  }
  return result;
}

uint64_t sub_1AD91A0D0@<X0>(char *a1@<X8>)
{
  uint64_t v29 = a1;
  sub_1AD91A4A4();
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1F4188790](v1, v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v7);
  id v9 = (char *)&v28 - v8;
  uint64_t v10 = sub_1AD9DCC70();
  id v11 = *(void **)(v10 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  id v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v16);
  long long v18 = (char *)&v28 - v17;
  sub_1AD9DC780();
  sub_1AD9DC750();
  sub_1AD91A50C();
  uint64_t result = sub_1AD9DF6B0();
  if (result)
  {
    uint64_t v28 = v2;
    uint64_t v20 = &v9[*(int *)(v2 + 48)];
    double v21 = v6;
    uint64_t v22 = (void (*)(char *, char *, uint64_t))v11[4];
    v22(v9, v18, v10);
    v22(v20, v15, v10);
    long long v23 = &v21[*(int *)(v2 + 48)];
    uint64_t v24 = (void (*)(char *, char *, uint64_t))v11[2];
    v24(v21, v9, v10);
    v24(v23, v20, v10);
    v22(v29, v21, v10);
    char v25 = (void (*)(char *, uint64_t))v11[1];
    v25(v23, v10);
    long long v26 = &v21[*(int *)(v28 + 48)];
    v22(v21, v9, v10);
    v22(v26, v20, v10);
    sub_1AD861C94();
    v22(&v29[*(int *)(v27 + 36)], v26, v10);
    return ((uint64_t (*)(char *, uint64_t))v25)(v21, v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DateInterval.merging(_:)()
{
  uint64_t v0 = sub_1AD9DCC70();
  uint64_t v2 = MEMORY[0x1F4188790](v0 - 8, v1);
  MEMORY[0x1F4188790](v2, v3);
  sub_1AD9DC780();
  sub_1AD9DC750();
  return sub_1AD9DC760();
}

uint64_t DateInterval.hkspDescription.getter()
{
  uint64_t v0 = (void *)sub_1AD9DC720();
  id v1 = objc_msgSend(v0, sel_hkspDescription);

  uint64_t v2 = sub_1AD9DF710();
  return v2;
}

void sub_1AD91A4A4()
{
  if (!qword_1EB725680)
  {
    sub_1AD9DCC70();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB725680);
    }
  }
}

unint64_t sub_1AD91A50C()
{
  unint64_t result = qword_1EB725688;
  if (!qword_1EB725688)
  {
    sub_1AD9DCC70();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725688);
  }
  return result;
}

uint64_t Binding<A>.init<A>(mappedTo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1AD91A80C(a1, a2);
  sub_1AD9DFE90();
  uint64_t v4 = sub_1AD9DF200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return v3;
}

uint64_t sub_1AD91A5FC@<X0>(uint64_t a1@<X3>, unsigned char *a2@<X8>)
{
  uint64_t v4 = sub_1AD9DFE90();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = sub_1AD9DF200();
  MEMORY[0x1B3E6B160](v9);
  LOBYTE(a1) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 48))(v8, 1, a1) != 1;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *a2 = a1;
  return result;
}

uint64_t sub_1AD91A71C(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_1AD9DFE90();
  uint64_t result = MEMORY[0x1F4188790](v7, v8);
  if ((*a1 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))((char *)&v11 - v10, 1, 1, a5);
    sub_1AD9DF200();
    return sub_1AD9DF1D0();
  }
  return result;
}

uint64_t Binding.mappedToBool<A>()(uint64_t a1)
{
  return sub_1AD91A80C(v1, *(void *)(*(void *)(a1 + 16) + 16));
}

uint64_t sub_1AD91A80C(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v17 = a1;
  sub_1AD9DFE90();
  uint64_t v4 = sub_1AD9DF200();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v9((char *)&v15 - v7, a1, v4);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = a2;
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v12(&v11[v10], v8, v4);
  v9(v8, v17, v4);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 4) = v16;
  v12(&v13[v10], v8, v4);
  sub_1AD9DF1F0();
  return v18;
}

uint64_t sub_1AD91A9F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  sub_1AD9DFE90();
  sub_1AD9DF200();
  return sub_1AD91A5FC(v3, a1);
}

uint64_t objectdestroyTm_6()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1AD9DFE90();
  uint64_t v2 = (int *)(sub_1AD9DF200() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v3 + v2[10];
  uint64_t v5 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v4, v1);
  }
  return swift_deallocObject();
}

uint64_t sub_1AD91ABD0(unsigned char *a1)
{
  uint64_t v3 = v1[4];
  sub_1AD9DFE90();
  uint64_t v4 = *(void *)(sub_1AD9DF200() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return sub_1AD91A71C(a1, v5, v6, v7, v3);
}

id PresentationStyle.preferredLinkColor.getter(id result)
{
  if (!result || result == (id)2)
  {
    uint64_t result = (id)HKHealthTintColor();
    if (result) {
      return result;
    }
    __break(1u);
  }
  if (result != (id)1)
  {
LABEL_9:
    uint64_t result = (id)sub_1AD9E02E0();
    __break(1u);
    return result;
  }
  uint64_t result = (id)BPSBridgeTintColor();
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

unint64_t PresentationStyle.init(rawValue:)(unint64_t result)
{
  if (result > 2) {
    return 0;
  }
  return result;
}

uint64_t *sub_1AD91ACF4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

id PresentationStyle.preferredButtonTintColor.getter(uint64_t a1)
{
  id result = 0;
  if (a1 && a1 != 2)
  {
    if (a1 == 1)
    {
      return (id)BPSPillSelectedColor();
    }
    else
    {
      id result = (id)sub_1AD9E02E0();
      __break(1u);
    }
  }
  return result;
}

uint64_t PresentationStyle.preferredColorScheme.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((unint64_t)(a1 - 1) >= 2)
  {
    if (a1)
    {
      uint64_t result = sub_1AD9E02E0();
      __break(1u);
      return result;
    }
    uint64_t v3 = *MEMORY[0x1E4F3C5C0];
  }
  else
  {
    uint64_t v3 = *MEMORY[0x1E4F3C5B8];
  }
  uint64_t v4 = sub_1AD9DDD20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104);
  return v5(a2, v3, v4);
}

unint64_t sub_1AD91AE3C()
{
  unint64_t result = qword_1E9A4C060;
  if (!qword_1E9A4C060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C060);
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationStyle()
{
  return &type metadata for PresentationStyle;
}

void sub_1AD91AEA0()
{
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1AD9DD550();
  __swift_project_value_buffer(v0, (uint64_t)qword_1E9A4D288);
  swift_retain_n();
  uint64_t v1 = sub_1AD9DD530();
  os_log_type_t v2 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v11 = v4;
    *(_DWORD *)uint64_t v3 = 136446466;
    uint64_t v8 = sub_1AD9E04F0();
    unint64_t v10 = v5;
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    char v9 = sub_1AD838978(v8, v10, &v11);
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2082;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1AD9DDBC0();
    swift_release();
    swift_release();
    if (v9) {
      uint64_t v6 = 1702195828;
    }
    else {
      uint64_t v6 = 0x65736C6166;
    }
    if (v9) {
      unint64_t v7 = 0xE400000000000000;
    }
    else {
      unint64_t v7 = 0xE500000000000000;
    }
    sub_1AD838978(v6, v7, &v11);
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v1, v2, "[%{public}s] updated visible: %{public}s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v4, -1, -1);
    MEMORY[0x1B3E6D1A0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1AD91B168()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  return v1;
}

void *sub_1AD91B1DC(uint64_t a1, uint64_t a2)
{
  sub_1AD91C028();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = 0;
  uint64_t v11 = (char *)v2 + OBJC_IVAR____TtC13SleepHealthUI25ContentAppearenceProvider__visible;
  LOBYTE(aBlock[0]) = 0;
  sub_1AD9DDB80();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v10, v6);
  v2[2] = a1;
  v2[3] = a2;
  id v12 = objc_msgSend(self, sel_configurationForDefaultMainDisplayMonitor);
  objc_msgSend(v12, sel_setNeedsUserInteractivePriority_, 1);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_1AD91C3A8;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AD91B780;
  aBlock[3] = &block_descriptor_19;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v12, sel_setTransitionHandler_, v14);
  _Block_release(v14);
  id v15 = objc_msgSend(self, sel_monitorWithConfiguration_, v12);
  uint64_t v16 = (void *)v2[4];
  v2[4] = v15;

  uint64_t v17 = (void *)v2[4];
  if (v17) {
    id v18 = objc_msgSend(v17, sel_currentLayout);
  }
  else {
    id v18 = 0;
  }
  sub_1AD91B9F0(v18);

  return v2;
}

uint64_t sub_1AD91B42C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1AD9DF3D0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1AD9DF400();
  uint64_t v11 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21, v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  id v15 = (void *)sub_1AD9DFCA0();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a2;
  aBlock[4] = sub_1AD91C408;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AD8D34D8;
  aBlock[3] = &block_descriptor_19_0;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a2;
  swift_retain();
  swift_release();
  sub_1AD9DF3F0();
  aBlock[0] = MEMORY[0x1E4FBC860];
  sub_1AD91C410((unint64_t *)&qword_1E9A4AD50, MEMORY[0x1E4FBCB00]);
  sub_1AD8ADA90(0);
  sub_1AD91C410((unint64_t *)&qword_1E9A4AD60, sub_1AD8ADA90);
  sub_1AD9DFF40();
  MEMORY[0x1B3E6BC50](0, v14, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v21);
}

uint64_t sub_1AD91B720(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1AD91B9F0(a2);
    return swift_release();
  }
  return result;
}

void sub_1AD91B780(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

uint64_t sub_1AD91B820()
{
  unsigned __int8 v1 = *(void **)(v0 + 32);
  if (v1)
  {
    objc_msgSend(v1, sel_invalidate);
    os_log_type_t v2 = *(void **)(v0 + 32);
  }
  else
  {
    os_log_type_t v2 = 0;
  }
  *(void *)(v0 + 32) = 0;

  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC13SleepHealthUI25ContentAppearenceProvider__visible;
  sub_1AD91C028();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t sub_1AD91B8F8()
{
  return type metadata accessor for ContentAppearenceProvider();
}

uint64_t type metadata accessor for ContentAppearenceProvider()
{
  uint64_t result = qword_1E9A4C070;
  if (!qword_1E9A4C070) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1AD91B94C()
{
  sub_1AD91C028();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1AD91B9F0(void *a1)
{
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1E9A4D288);
  id v3 = a1;
  swift_retain_n();
  id v4 = v3;
  uint64_t v5 = sub_1AD9DD530();
  os_log_type_t v6 = sub_1AD9DFBB0();
  uint64_t v29 = a1;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v35 = v8;
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v31 = sub_1AD9E04F0();
    unint64_t v33 = v9;
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    sub_1AD838978(v31, v33, &v35);
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    if (a1)
    {
      sub_1AD837214(0, &qword_1E9A4C080);
      id v10 = v4;
      uint64_t v11 = sub_1AD9DF730();
      unint64_t v13 = v12;
    }
    else
    {
      unint64_t v13 = 0xE300000000000000;
      uint64_t v11 = 7104878;
    }
    unsigned __int8 v30 = sub_1AD838978(v11, v13, &v35);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v5, v6, "[%{public}s] updated layout: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
    MEMORY[0x1B3E6D1A0](v7, -1, -1);

    if (!a1) {
      goto LABEL_10;
    }
LABEL_7:
    unsigned __int8 v14 = sub_1AD91C080();
    int v15 = v14 & (objc_msgSend(v4, sel_displayBacklightLevel) == (id)100);
    goto LABEL_11;
  }

  swift_release_n();
  if (a1) {
    goto LABEL_7;
  }
LABEL_10:
  int v15 = 0;
LABEL_11:
  id v16 = v4;
  swift_retain_n();
  id v17 = v16;
  id v18 = sub_1AD9DD530();
  os_log_type_t v19 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v35 = v28;
    *(_DWORD *)uint64_t v20 = 136446722;
    uint64_t v32 = sub_1AD9E04F0();
    unint64_t v34 = v21;
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    sub_1AD838978(v32, v34, &v35);
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    if (v29)
    {
      sub_1AD91C080();
      uint64_t v22 = sub_1AD9DF730();
      unint64_t v24 = v23;
    }
    else
    {
      unint64_t v24 = 0xE300000000000000;
      uint64_t v22 = 7104878;
    }
    sub_1AD838978(v22, v24, &v35);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2082;
    if (v29)
    {
      objc_msgSend(v17, sel_displayBacklightLevel);
      uint64_t v25 = sub_1AD9DF730();
      unint64_t v27 = v26;
    }
    else
    {
      unint64_t v27 = 0xE300000000000000;
      uint64_t v25 = 7104878;
    }
    unsigned __int8 v30 = sub_1AD838978(v25, v27, &v35);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v18, v19, "[%{public}s] updated layout, contains SleepLockScreen: %{public}s, display on: %{public}s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v28, -1, -1);
    MEMORY[0x1B3E6D1A0](v20, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  if (v15 != v30)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_1AD9DDBD0();
    sub_1AD91AEA0();
  }
}

void sub_1AD91C028()
{
  if (!qword_1E9A4AC40)
  {
    unint64_t v0 = sub_1AD9DDBE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4AC40);
    }
  }
}

uint64_t sub_1AD91C080()
{
  id v1 = objc_msgSend(v0, sel_elements);
  sub_1AD837214(0, &qword_1E9A4C088);
  unint64_t v2 = sub_1AD9DF860();

  if (v2 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = sub_1AD9E0190())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1B3E6BFF0](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      uint64_t v7 = v6;
      uint64_t v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v9 = objc_msgSend(v6, sel_bundleIdentifier);
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = sub_1AD9DF710();
        uint64_t v13 = v12;

        if (v11 == 0xD000000000000019 && v13 == 0x80000001AD9F3E80)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v14 = 1;
          goto LABEL_18;
        }
        char v5 = sub_1AD9E02D0();
        swift_bridgeObjectRelease();
        if (v5)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v14 = 1;
          goto LABEL_18;
        }
      }

      ++v4;
      if (v8 == v3) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  uint64_t v14 = 0;
  uint64_t v7 = 0;
LABEL_18:

  return v14;
}

uint64_t sub_1AD91C270@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

void sub_1AD91C2F0()
{
}

uint64_t sub_1AD91C370()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD91C3A8(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1AD91B42C(a1, a2, a3, v3);
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t sub_1AD91C3C8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1AD91C408()
{
  return sub_1AD91B720(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1AD91C410(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NextScheduleOccurrenceView(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for NextScheduleOccurrenceView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for NextScheduleOccurrenceView(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for NextScheduleOccurrenceView()
{
  return &type metadata for NextScheduleOccurrenceView;
}

uint64_t sub_1AD91C534()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD91C550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD91D018();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v4, v7);
  id v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  if (a1)
  {
    unint64_t v33 = (char *)&v30 - v12;
    uint64_t v13 = qword_1E9A490E8;
    uint64_t v32 = *(void **)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
    id v31 = v32;
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v37 = a2;
    uint64_t v14 = qword_1E9A4D528;
    uint64_t v15 = qword_1E9A48F00;
    swift_retain();
    if (v15 != -1) {
      swift_once();
    }
    unint64_t v34 = v10;
    uint64_t v35 = v6;
    uint64_t v36 = v5;
    uint64_t v16 = qword_1E9A4AE50;
    swift_retain();
    uint64_t v17 = sub_1AD9DE990();
    if (qword_1E9A48F08 != -1) {
      swift_once();
    }
    uint64_t v18 = qword_1E9A4AE58;
    uint64_t v19 = qword_1E9A4D528;
    uint64_t v20 = qword_1E9A4AE50;
    uint64_t v21 = qword_1E9A490F0;
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    uint64_t v22 = v18;
    if (v21 != -1)
    {
      swift_once();
      uint64_t v22 = qword_1E9A4AE58;
    }
    *(void *)&long long v40 = v14;
    BYTE8(v40) = 2;
    *(void *)&long long v41 = v16;
    WORD4(v41) = 0;
    *(void *)&long long v42 = v17;
    BYTE8(v42) = 1;
    *(void *)&long long v43 = v18;
    WORD4(v43) = 1;
    *(void *)&long long v44 = v19;
    BYTE8(v44) = 2;
    *(void *)&long long v45 = v20;
    WORD4(v45) = 0;
    *(void *)&long long v46 = v19;
    BYTE8(v46) = 2;
    *(void *)&long long v47 = v18;
    WORD4(v47) = 0;
    *(void *)&long long v48 = v19;
    BYTE8(v48) = 2;
    *(void *)&long long v49 = v18;
    WORD4(v49) = 0;
    *(void *)&long long v50 = qword_1E9A4D530;
    BYTE8(v50) = 2;
    *(void *)&long long v51 = v22;
    WORD4(v51) = 0;
    uint64_t v52 = qword_1F046A408;
    v38[10] = v50;
    v38[11] = v51;
    uint64_t v39 = qword_1F046A408;
    v38[6] = v46;
    v38[7] = v47;
    v38[8] = v48;
    v38[9] = v49;
    v38[2] = v42;
    v38[3] = v43;
    v38[4] = v44;
    v38[5] = v45;
    v38[0] = v40;
    v38[1] = v41;
    swift_retain();
    swift_retain();
    _s13SleepHealthUI27ScheduleOccurrenceViewModelV013makeRepeatingeF6Models05sleepD09viewStyleSayACGSo09HKSPSleepD0CSg_AC0fM0VtFZ_0(v32, (uint64_t)v38);
    uint64_t v24 = v23;

    sub_1AD91D168((uint64_t)&v40);
    *(void *)&v38[0] = v24;
    sub_1AD91D34C(0, &qword_1E9A4C0B0, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel, MEMORY[0x1E4FBB320]);
    type metadata accessor for ScheduleOccurrenceView(0);
    sub_1AD91D0E0();
    sub_1AD91CFB4(&qword_1E9A4C0A0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
    sub_1AD91CFB4(&qword_1E9A4C0C0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel);
    uint64_t v25 = v34;
    sub_1AD9DF260();
    uint64_t v26 = v36;
    unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v28 = v33;
    v27(v33, v25, v36);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v37, v28, v26);
  }
  else
  {
    type metadata accessor for SleepScheduleModel();
    sub_1AD91CFB4(&qword_1E9A4AAB8, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
    uint64_t result = sub_1AD9DE080();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD91CA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD91D244(a1, a2);
}

uint64_t sub_1AD91CA14@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD91C550(*v1, a1);
}

void sub_1AD91CA1C(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1AD9DCC70();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v9 = *(void *)&a1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
    uint64_t v10 = *(void *)&a1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32];
    __swift_project_boxed_opaque_existential_1Tm(&a1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider], v9);
    uint64_t v11 = *(void (**)(void))&a1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_currentDateProvider];
    uint64_t v12 = a1;
    v11();
    id v28 = SleepScheduleProviding.upcomingResolvedOccurrence(forCurrentDate:)((uint64_t)v8, v9, v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

    id v27 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RelativeWeekdayFormatter()), sel_init);
    uint64_t v26 = sub_1AD9DE900();
    if (qword_1E9A48F00 != -1) {
      swift_once();
    }
    uint64_t v13 = qword_1E9A4AE50;
    swift_retain();
    uint64_t v14 = sub_1AD9DE990();
    if (qword_1E9A48F08 != -1) {
      swift_once();
    }
    uint64_t v15 = a2;
    uint64_t v16 = qword_1E9A4AE58;
    uint64_t v17 = qword_1E9A490E8;
    swift_retain();
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v18 = qword_1E9A4D528;
    uint64_t v19 = qword_1E9A48EF8;
    swift_retain();
    uint64_t v20 = v18;
    if (v19 != -1)
    {
      swift_once();
      uint64_t v20 = qword_1E9A4D528;
    }
    uint64_t v21 = qword_1E9A4AE48;
    uint64_t v22 = qword_1E9A490F0;
    swift_retain_n();
    swift_retain_n();
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v23 = unk_1F046A438;
    if ((unk_1F046A438 & ~qword_1F046A430) == 0) {
      uint64_t v23 = 0;
    }
    uint64_t v24 = qword_1F046A440;
    if ((qword_1F046A440 & ~(v23 | qword_1F046A430)) == 0) {
      uint64_t v24 = 0;
    }
    *(void *)&long long v29 = v26;
    BYTE8(v29) = 2;
    uint64_t v30 = v13;
    __int16 v31 = 256;
    uint64_t v32 = v14;
    char v33 = 1;
    uint64_t v34 = v16;
    __int16 v35 = 1;
    uint64_t v36 = v18;
    char v37 = 2;
    uint64_t v38 = v21;
    __int16 v39 = 0;
    uint64_t v40 = v20;
    char v41 = 2;
    uint64_t v42 = v21;
    __int16 v43 = 0;
    uint64_t v44 = v20;
    char v45 = 2;
    uint64_t v46 = v21;
    __int16 v47 = 0;
    uint64_t v48 = qword_1E9A4D530;
    char v49 = 0;
    uint64_t v50 = qword_1E9A4AE50;
    __int16 v51 = 0;
    uint64_t v52 = v24 | v23 | qword_1F046A430;
    swift_retain();
    swift_retain();
    ScheduleOccurrenceViewModel.init(resolvedOccurrence:relativeWeekdayFormatter:viewStyle:)(v28, (uint64_t)v27, &v29, v15);
  }
  else
  {
    type metadata accessor for SleepScheduleModel();
    sub_1AD91CFB4(&qword_1E9A4AAB8, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
    sub_1AD9DE080();
    __break(1u);
  }
}

void sub_1AD91CE1C(uint64_t a1@<X8>)
{
  sub_1AD91CA1C(*v1, a1);
}

uint64_t _s13SleepHealthUI26NextScheduleOccurrenceViewVwet_0(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s13SleepHealthUI26NextScheduleOccurrenceViewVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceListView()
{
  return &type metadata for ScheduleOccurrenceListView;
}

unint64_t sub_1AD91CEE4()
{
  unint64_t result = qword_1E9A4C090;
  if (!qword_1E9A4C090)
  {
    sub_1AD91D34C(255, &qword_1E9A4C098, type metadata accessor for ScheduleOccurrenceView, MEMORY[0x1E4F3EBC8]);
    sub_1AD91CFB4(&qword_1E9A4C0A0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C090);
  }
  return result;
}

uint64_t sub_1AD91CFB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD91CFFC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD91D018()
{
  if (!qword_1E9A4C0A8)
  {
    sub_1AD91D34C(255, &qword_1E9A4C0B0, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel, MEMORY[0x1E4FBB320]);
    type metadata accessor for ScheduleOccurrenceView(255);
    sub_1AD91D0E0();
    unint64_t v0 = sub_1AD9DF270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C0A8);
    }
  }
}

unint64_t sub_1AD91D0E0()
{
  unint64_t result = qword_1E9A4C0B8;
  if (!qword_1E9A4C0B8)
  {
    sub_1AD91D34C(255, &qword_1E9A4C0B0, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C0B8);
  }
  return result;
}

uint64_t sub_1AD91D168(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD91D244(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1AD91D2AC()
{
  unint64_t result = qword_1E9A4C0C8;
  if (!qword_1E9A4C0C8)
  {
    sub_1AD91D34C(255, &qword_1E9A4C0D0, (uint64_t (*)(uint64_t))sub_1AD91D018, MEMORY[0x1E4F3EBC8]);
    sub_1AD91D3B0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C0C8);
  }
  return result;
}

void sub_1AD91D34C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1AD91D3B0()
{
  unint64_t result = qword_1E9A4C0D8;
  if (!qword_1E9A4C0D8)
  {
    sub_1AD91D018();
    sub_1AD91CFB4(&qword_1E9A4C0A0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C0D8);
  }
  return result;
}

void sub_1AD91D460()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  objc_msgSend(v1, sel_setBackgroundView_, v2);

  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  objc_msgSend(v1, sel_setSelectedBackgroundView_, v3);

  id v4 = objc_msgSend(v1, sel_contentView);
  id v5 = sub_1AD886384();
  objc_msgSend(v4, sel_addSubview_, v5);

  id v6 = sub_1AD886384();
  id v7 = objc_msgSend(v1, sel_contentView);
  UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(v7, 0, *MEMORY[0x1E4FB12A8], *(double *)(MEMORY[0x1E4FB12A8] + 8), *(double *)(MEMORY[0x1E4FB12A8] + 16), *(double *)(MEMORY[0x1E4FB12A8] + 24));
  swift_bridgeObjectRelease();

  sub_1AD886B74();
}

void sub_1AD91D584()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  objc_msgSend(v1, sel_setBackgroundView_, v2);

  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  objc_msgSend(v1, sel_setSelectedBackgroundView_, v3);

  id v4 = objc_msgSend(v1, sel_contentView);
  id v5 = sub_1AD91DA40();
  objc_msgSend(v4, sel_addSubview_, v5);

  id v6 = sub_1AD91DA40();
  id v7 = objc_msgSend(v1, sel_contentView);
  UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(v7, 0, *MEMORY[0x1E4FB12A8], *(double *)(MEMORY[0x1E4FB12A8] + 8), *(double *)(MEMORY[0x1E4FB12A8] + 16), *(double *)(MEMORY[0x1E4FB12A8] + 24));
  swift_bridgeObjectRelease();

  id v8 = objc_msgSend(v1, sel_backgroundColor);
  if (!v8) {
    id v8 = objc_msgSend(self, sel_systemGroupedBackgroundColor);
  }
  id v10 = v8;
  objc_msgSend(v1, sel_setBackgroundColor_);
  id v9 = objc_msgSend(v1, sel_selectedBackgroundView);
  objc_msgSend(v9, sel_setBackgroundColor_, v10);
}

uint64_t sub_1AD91D738()
{
  return sub_1AD91D758(&OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell_item, (uint64_t (*)(void))sub_1AD886384);
}

uint64_t sub_1AD91D758(void *a1, uint64_t (*a2)(void))
{
  id v4 = v2;
  uint64_t v5 = (uint64_t)v2 + *a1;
  swift_beginAccess();
  sub_1AD886B10(v5, (uint64_t)v26);
  if (!v27)
  {
    sub_1AD8B1F34((uint64_t)v26, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v25 = 0;
    return sub_1AD8B1F34((uint64_t)&v23, &qword_1E9A4C108, &qword_1E9A4C110);
  }
  sub_1AD843E70(0, (unint64_t *)&qword_1E9A4A3C0);
  sub_1AD843E70(0, &qword_1E9A4C110);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v25 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    return sub_1AD8B1F34((uint64_t)&v23, &qword_1E9A4C108, &qword_1E9A4C110);
  }
  if (!*((void *)&v24 + 1)) {
    return sub_1AD8B1F34((uint64_t)&v23, &qword_1E9A4C108, &qword_1E9A4C110);
  }
  uint64_t v6 = sub_1AD843F30(&v23, (uint64_t)v26);
  id v7 = (char *)((uint64_t (*)(uint64_t))a2)(v6);
  uint64_t v8 = *(void *)&v7[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher];
  swift_retain();

  uint64_t v9 = v27;
  uint64_t v10 = v28;
  __swift_project_boxed_opaque_existential_1Tm(v26, v27);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
  if (v8)
  {
    swift_release();
    uint64_t v12 = swift_release();
    if (v11 == v8) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v12 = swift_release();
  }
  uint64_t v14 = (char *)((uint64_t (*)(uint64_t))a2)(v12);
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  __swift_project_boxed_opaque_existential_1Tm(v26, v27);
  *(void *)&v14[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher] = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  swift_retain();
  swift_release();
  sub_1AD9009CC();

  swift_release();
LABEL_13:
  __swift_project_boxed_opaque_existential_1Tm(v26, v27);
  uint64_t v17 = sub_1AD9DD460();
  if (v18)
  {
    uint64_t v19 = v17;
    uint64_t v20 = v18;
    uint64_t v21 = (void *)a2();
    *(void *)&long long v23 = v19;
    *((void *)&v23 + 1) = v20;
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    uint64_t v22 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v21, sel_setAccessibilityIdentifier_, v22);
  }
  objc_msgSend(v4, sel_layoutIfNeeded);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
}

id sub_1AD91DA40()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell____lazy_storage___timePicker;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell____lazy_storage___timePicker);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell____lazy_storage___timePicker);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = sub_1AD9D5428();
    double v7 = v6;
    double v9 = v8;
    uint64_t v10 = v5;
    char v12 = v11 & 1;
    id v13 = objc_allocWithZone((Class)type metadata accessor for TimeIntervalPickerView());
    id v14 = sub_1AD900FF0(v10, v12, v7, v9);
    uint64_t v15 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v14;
    id v3 = v14;

    id v2 = 0;
  }
  id v16 = v2;
  return v3;
}

uint64_t sub_1AD91DCBC()
{
  return 0;
}

void sub_1AD91DDC8(SEL *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TimePickerTableViewCell();
  objc_msgSendSuper2(&v5, *a1);
  id v3 = objc_msgSend(v1, sel_backgroundColor);
  if (!v3) {
    id v3 = objc_msgSend(self, sel_systemGroupedBackgroundColor);
  }
  objc_msgSend(v1, sel_setBackgroundColor_, v3);
  id v4 = objc_msgSend(v1, sel_selectedBackgroundView);
  objc_msgSend(v4, sel_setBackgroundColor_, v3);
}

id sub_1AD91DEE8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimePickerTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TimePickerTableViewCell()
{
  return self;
}

uint64_t sub_1AD91DFA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell_item;
  swift_beginAccess();
  return sub_1AD886B10(v3, a1);
}

uint64_t sub_1AD91DFF8(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell_item;
  swift_beginAccess();
  sub_1AD8869F8(a1, v3);
  swift_endAccess();
  sub_1AD91D758(&OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell_item, (uint64_t (*)(void))sub_1AD91DA40);
  return sub_1AD8B1F34(a1, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
}

uint64_t (*sub_1AD91E09C(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1AD91E0FC;
}

uint64_t sub_1AD91E0FC(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1AD91D758(&OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell_item, (uint64_t (*)(void))sub_1AD91DA40);
  }
  return result;
}

uint64_t sub_1AD91E14C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1AD91E1B4(&qword_1E9A4C0F8);
  uint64_t result = sub_1AD91E1B4(&qword_1E9A4C100);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD91E1B4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TimePickerTableViewCell();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD91E1F4()
{
  unint64_t result = qword_1E9A4C118;
  if (!qword_1E9A4C118)
  {
    type metadata accessor for TimePickerTableViewCell();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4C118);
  }
  return result;
}

uint64_t AttributedString.applyingLetterSmallCaps(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1AD9DCA50();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  char v41 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD91E694(0, (unint64_t *)&qword_1EB725600, MEMORY[0x1E4F27A78]);
  MEMORY[0x1F4188790](v10 - 8, v11);
  id v13 = (char *)v36 - v12;
  sub_1AD91E694(0, &qword_1EB725620, (void (*)(uint64_t))sub_1AD91E6E8);
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = (char *)v36 - v16;
  sub_1AD91E6E8();
  uint64_t v47 = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18, v20);
  uint64_t v40 = (uint64_t)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v42 = a2;
  uint64_t v48 = v3;
  uint64_t result = v22(a2, v3, v6);
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    uint64_t v46 = v6;
    uint64_t v25 = sub_1AD9DCD10();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v44 = v26 + 56;
    char v45 = v27;
    __int16 v43 = (unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    char v37 = (void (**)(char *, uint64_t))(v7 + 8);
    swift_bridgeObjectRetain();
    v36[1] = a1;
    uint64_t v28 = (uint64_t *)(a1 + 40);
    uint64_t v38 = v13;
    __int16 v39 = v17;
    uint64_t v29 = v46;
    do
    {
      uint64_t v30 = *v28;
      uint64_t v49 = *(v28 - 1);
      uint64_t v50 = v30;
      v45(v13, 1, 1, v25);
      sub_1AD91F378(&qword_1E9A4C120, MEMORY[0x1E4F273A8]);
      sub_1AD85F688();
      swift_bridgeObjectRetain();
      sub_1AD9DCB20();
      sub_1AD91E77C((uint64_t)v13, (unint64_t *)&qword_1EB725600, MEMORY[0x1E4F27A78]);
      if ((*v43)(v17, 1, v47) == 1)
      {
        swift_bridgeObjectRelease();
        sub_1AD91E77C((uint64_t)v17, &qword_1EB725620, (void (*)(uint64_t))sub_1AD91E6E8);
      }
      else
      {
        uint64_t v31 = v40;
        sub_1AD91E7D8((uint64_t)v17, v40);
        uint64_t v32 = v25;
        char v33 = v41;
        sub_1AD9DF7B0();
        swift_bridgeObjectRelease();
        sub_1AD91F378(&qword_1EB725628, (void (*)(uint64_t))sub_1AD91E6E8);
        sub_1AD9DC9D0();
        uint64_t v34 = v33;
        uint64_t v25 = v32;
        (*v37)(v34, v29);
        uint64_t v35 = v31;
        id v13 = v38;
        uint64_t v17 = v39;
        sub_1AD91E83C(v35);
      }
      v28 += 2;
      --v24;
    }
    while (v24);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1AD91E694(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD91E6E8()
{
  if (!qword_1EB725618)
  {
    sub_1AD9DCA20();
    sub_1AD91F378(&qword_1EB7255F8, MEMORY[0x1E4F27388]);
    unint64_t v0 = sub_1AD9DFAC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725618);
    }
  }
}

uint64_t sub_1AD91E77C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1AD91E694(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1AD91E7D8(uint64_t a1, uint64_t a2)
{
  sub_1AD91E6E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD91E83C(uint64_t a1)
{
  sub_1AD91E6E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AttributedString.setNumericAttributes(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v38 = a1;
  sub_1AD91E6E8();
  uint64_t v4 = v3;
  v36[0] = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD91E694(0, &qword_1EB725620, (void (*)(uint64_t))sub_1AD91E6E8);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (char *)v36 - v10;
  uint64_t v39 = sub_1AD9DC710();
  uint64_t v12 = *(void *)(v39 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v39, v13);
  uint64_t v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v17);
  uint64_t v19 = (char *)v36 - v18;
  uint64_t v20 = sub_1AD9DC9B0();
  MEMORY[0x1F4188790](v20, v21);
  sub_1AD9DC9A0();
  sub_1AD91F378(&qword_1EB7255F0, MEMORY[0x1E4F27270]);
  v40[0] = sub_1AD9DF7F0();
  v40[1] = v22;
  sub_1AD9DC6F0();
  sub_1AD9DC700();
  long long v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v24 = v19;
  uint64_t v25 = v39;
  v23(v24, v39);
  sub_1AD85F688();
  uint64_t v26 = sub_1AD9DFED0();
  v23(v16, v25);
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1AD91F1D0(v26);
  swift_bridgeObjectRelease();
  uint64_t v39 = v2;
  uint64_t v28 = sub_1AD91ECE8(v27, v2);
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(v28 + 16);
  v36[1] = v28;
  if (v29)
  {
    uint64_t v30 = v28 + ((*(unsigned __int8 *)(v36[0] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36[0] + 80));
    uint64_t v37 = *(void *)(v36[0] + 72);
    uint64_t v31 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v36[0] + 56);
    uint64_t v32 = (unsigned int (**)(char *, uint64_t, uint64_t))(v36[0] + 48);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1AD91F268(v30, (uint64_t)v11);
      char v33 = *v31;
      (*v31)(v11, 0, 1, v4);
      if ((*v32)(v11, 1, v4) == 1) {
        break;
      }
      sub_1AD91E7D8((uint64_t)v11, (uint64_t)v7);
      sub_1AD91F378(&qword_1EB725628, (void (*)(uint64_t))sub_1AD91E6E8);
      uint64_t v34 = (void (*)(void *, void))sub_1AD9DCA60();
      sub_1AD9DCA80();
      v34(v40, 0);
      sub_1AD91E83C((uint64_t)v7);
      v30 += v37;
      if (!--v29) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    char v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36[0] + 56);
    swift_bridgeObjectRetain();
LABEL_7:
    v33(v11, 1, 1, v4);
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1AD91ECE8(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a2;
  sub_1AD91E694(0, (unint64_t *)&qword_1EB725600, MEMORY[0x1E4F27A78]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v49 - v5;
  uint64_t v54 = sub_1AD9DCA50();
  MEMORY[0x1F4188790](v54, v7);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v50 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  long long v53 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  int64_t v51 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v52 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v58 = a1;
  swift_bridgeObjectRetain();
  int64_t v15 = 0;
  unint64_t v16 = MEMORY[0x1E4FBC860];
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v15 << 6);
    }
    else
    {
      int64_t v19 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        goto LABEL_47;
      }
      if (v19 >= v51)
      {
LABEL_42:
        swift_release();
        return v16;
      }
      unint64_t v20 = *(void *)(v50 + 8 * v19);
      ++v15;
      if (!v20)
      {
        int64_t v15 = v19 + 1;
        if (v19 + 1 >= v51) {
          goto LABEL_42;
        }
        unint64_t v20 = *(void *)(v50 + 8 * v15);
        if (!v20)
        {
          int64_t v15 = v19 + 2;
          if (v19 + 2 >= v51) {
            goto LABEL_42;
          }
          unint64_t v20 = *(void *)(v50 + 8 * v15);
          if (!v20)
          {
            int64_t v15 = v19 + 3;
            if (v19 + 3 >= v51) {
              goto LABEL_42;
            }
            unint64_t v20 = *(void *)(v50 + 8 * v15);
            if (!v20)
            {
              int64_t v21 = v19 + 4;
              if (v21 >= v51) {
                goto LABEL_42;
              }
              unint64_t v20 = *(void *)(v50 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_48;
                  }
                  if (v15 >= v51) {
                    goto LABEL_42;
                  }
                  unint64_t v20 = *(void *)(v50 + 8 * v15);
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
      }
LABEL_23:
      unint64_t v14 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
    }
    uint64_t v22 = (uint64_t *)(*(void *)(v58 + 48) + 16 * v18);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = v54;
    (*v53)(v10, v55, v54);
    uint64_t v56 = v23;
    uint64_t v57 = v24;
    uint64_t v26 = sub_1AD9DCD10();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 1, 1, v26);
    sub_1AD85F688();
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_1AD9DCA30();
    sub_1AD91E77C((uint64_t)v6, (unint64_t *)&qword_1EB725600, MEMORY[0x1E4F27A78]);
    (*v52)(v10, v25);
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v27 + 16);
    int64_t v29 = *(void *)(v16 + 16);
    int64_t v30 = v29 + v28;
    if (__OFADD__(v29, v28)) {
      break;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v30 <= *(void *)(v16 + 24) >> 1)
    {
      if (!*(void *)(v27 + 16)) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v29 <= v30) {
        int64_t v32 = v29 + v28;
      }
      else {
        int64_t v32 = v29;
      }
      unint64_t v16 = sub_1AD99AEFC(isUniquelyReferenced_nonNull_native, v32, 1, v16);
      if (!*(void *)(v27 + 16))
      {
LABEL_4:
        if (v28) {
          goto LABEL_44;
        }
        goto LABEL_5;
      }
    }
    uint64_t v33 = *(void *)(v16 + 16);
    uint64_t v34 = (*(void *)(v16 + 24) >> 1) - v33;
    sub_1AD91E6E8();
    uint64_t v37 = *(void *)(*(void *)(v35 - 8) + 72);
    if (v34 < v28) {
      goto LABEL_45;
    }
    uint64_t v36 = *(unsigned __int8 *)(*(void *)(v35 - 8) + 80);
    uint64_t v38 = (v36 + 32) & ~v36;
    unint64_t v39 = v16 + v38 + v37 * v33;
    unint64_t v40 = v27 + v38;
    uint64_t v41 = v37 * v28;
    unint64_t v42 = v39 + v41;
    unint64_t v43 = v40 + v41;
    if (v40 < v42 && v39 < v43) {
      goto LABEL_49;
    }
    swift_arrayInitWithCopy();
    if (v28)
    {
      uint64_t v45 = *(void *)(v16 + 16);
      BOOL v46 = __OFADD__(v45, v28);
      uint64_t v47 = v45 + v28;
      if (v46) {
        goto LABEL_46;
      }
      *(void *)(v16 + 16) = v47;
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD91F1D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1AD9DF9C0();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1AD9A32A0(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1AD91F268(uint64_t a1, uint64_t a2)
{
  sub_1AD91E6E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD91F2CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for HKCategoryValueSleepAnalysis(0);
  sub_1AD91F378(&qword_1E9A4C128, type metadata accessor for HKCategoryValueSleepAnalysis);
  uint64_t result = sub_1AD9DF9C0();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_1AD9A3450(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1AD91F378(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t static ScheduleOccurrenceComponentsAccessibilityTableViewCell.bedtimeReuseIdentifier.getter()
{
  return 0xD00000000000003ELL;
}

unint64_t static ScheduleOccurrenceComponentsAccessibilityTableViewCell.wakeUpReuseIdentifier.getter()
{
  return 0xD00000000000003DLL;
}

BOOL static ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD91F484()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3E6D270](v1);
}

uint64_t sub_1AD91F4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1AD91F540(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3E6D270](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1AD838D84;
}

void ScheduleOccurrenceComponentsAccessibilityTableViewCell.component.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component);
}

uint64_t sub_1AD91F5DC(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD898CF4(a1, (uint64_t)v7);
  uint64_t v8 = *a2 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  sub_1AD91F748((uint64_t)v7, v8);
  return swift_endAccess();
}

uint64_t sub_1AD91F698@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  return sub_1AD898CF4(v3, a1);
}

uint64_t sub_1AD91F6EC(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  sub_1AD91F748(a1, v3);
  return swift_endAccess();
}

uint64_t sub_1AD91F748(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1AD91F7AC())()
{
  return j__swift_endAccess;
}

uint64_t sub_1AD91F808@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_1AD9DCC70();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1AD9DCE40();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9241B8(0, &qword_1EB725690, MEMORY[0x1E4F27CA0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8, v14);
  unint64_t v16 = (char *)v29 - v15;
  unint64_t v17 = *(void **)(v1
                 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker);
  id v18 = objc_msgSend(v17, sel_calendar);
  if (v18)
  {
    int64_t v19 = v18;
    v29[0] = v17;
    v29[1] = a1;
    uint64_t v30 = v4;
    uint64_t v31 = v3;
    sub_1AD9DCDB0();

    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v12, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v16, 0, 1, v8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1, v8);
    if (result != 1)
    {
      sub_1AD9241B8(0, &qword_1E9A4C140, MEMORY[0x1E4F27C88], MEMORY[0x1E4FBBE00]);
      uint64_t v21 = sub_1AD9DCE20();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = *(void *)(v22 + 72);
      unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_1AD9E3080;
      unint64_t v26 = v25 + v24;
      uint64_t v27 = *(void (**)(unint64_t, void, uint64_t))(v22 + 104);
      v27(v26, *MEMORY[0x1E4F27C10], v21);
      v27(v26 + v23, *MEMORY[0x1E4F27C48], v21);
      sub_1AD922F84(v25);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      id v28 = objc_msgSend(v29[0], sel_date);
      sub_1AD9DCC40();

      sub_1AD9DCD80();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v16, 1, 1, v8);
  }
  __break(1u);
  return result;
}

id sub_1AD91FC28()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView);
  }
  else
  {
    id v4 = sub_1AD923298();
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v4);

    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1AD91FCB8()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB16B0]), sel_init);
  objc_msgSend(v0, sel_setDatePickerMode_, 0);
  id result = objc_msgSend(v0, sel_setPreferredDatePickerStyle_, 2);
  if (qword_1E9A48E70 != -1) {
    id result = (id)swift_once();
  }
  double v2 = *(double *)&qword_1E9A4A800 / 60.0;
  if ((~COERCE__INT64(*(double *)&qword_1E9A4A800 / 60.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 9.22337204e18)
  {
    objc_msgSend(v0, sel_setMinuteInterval_, (uint64_t)v2);
    return v0;
  }
LABEL_9:
  __break(1u);
  return result;
}

id ScheduleOccurrenceComponentsAccessibilityTableViewCell.__allocating_init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  if (a3)
  {
    uint64_t v6 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithStyle_reuseIdentifier_, a1, v6);

  return v7;
}

void *ScheduleOccurrenceComponentsAccessibilityTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD9236E0(a2, a3);
}

void sub_1AD91FE74()
{
  id v1 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v1, sel_addSubview_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel]);

  id v2 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v2, sel_addSubview_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker]);
}

id sub_1AD91FF18()
{
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  void v11[4] = sub_1AD8F05CC;
  v11[5] = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = sub_1AD8F0900;
  v11[3] = &block_descriptor_20;
  id v2 = _Block_copy(v11);
  id v3 = objc_msgSend(v1, sel_initWithDynamicProvider_, v2);
  _Block_release(v2);
  swift_release();
  objc_msgSend(v0, sel_setBackgroundColor_, v3);

  id v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel];
  LODWORD(v5) = 1148829696;
  objc_msgSend(v4, sel_setContentHuggingPriority_forAxis_, 1, v5);
  LODWORD(v6) = 1148846080;
  objc_msgSend(v4, sel_setContentCompressionResistancePriority_forAxis_, 1, v6);
  id v7 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
  LODWORD(v8) = 1144750080;
  objc_msgSend(v7, sel_setContentHuggingPriority_forAxis_, 1, v8);
  LODWORD(v9) = 1148846080;
  objc_msgSend(v7, sel_setContentCompressionResistancePriority_forAxis_, 1, v9);
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v7, sel_setContentHorizontalAlignment_, 4);
  sub_1AD922170();
  objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v0, sel_datePickerDidChange, 4096);
  return objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v0, sel_datePickerDidEndEditing, 0x40000);
}

void sub_1AD920108()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  sub_1AD9241B8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  double v5 = (char *)&v61 - v4;
  uint64_t v6 = sub_1AD9DC990();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)&v61 - v13;
  uint64_t v15 = v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  if (MEMORY[0x1B3E6D270](v15))
  {
    uint64_t v16 = *(void *)(v15 + 8);
    uint64_t ObjectType = swift_getObjectType();
    id v18 = *(uint64_t (**)(uint64_t))(v16 + 8);
    uint64_t v66 = ObjectType;
    if (v18(v1))
    {
      uint64_t v63 = v16;
      uint64_t v64 = v7;
      char v19 = *(unsigned char *)(v1
                     + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component);
      unint64_t v20 = (void (**)(uint64_t, char *, uint64_t))(v7 + 24);
      uint64_t v65 = v6;
      if (v19)
      {
        sub_1AD91F808(v11);
        uint64_t v21 = v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
        swift_beginAccess();
        uint64_t v22 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
        uint64_t v23 = v21 + v22[10];
        (*v20)(v23, v11, v6);
        uint64_t v24 = *(void *)(v21 + v22[7]);
        uint64_t v62 = v23;
        if (v24)
        {
          char v25 = sub_1AD935200();
          char v26 = sub_1AD935434();
          if (v26) {
            uint64_t v27 = v25 & 1 | 2;
          }
          else {
            uint64_t v27 = v25 & 1;
          }
          *(void *)(v21 + v22[15]) = v27;
          char v28 = v27 & 1;
          BOOL v29 = (v27 & 1) == 0;
          if (v27 & 1) != 0 || (v26) {
            goto LABEL_26;
          }
        }
        else
        {
          *(void *)(v21 + v22[15]) = 0;
        }
        char v28 = 0;
        BOOL v29 = 0;
LABEL_26:
        *(unsigned char *)(v21 + v22[13]) = v28;
        *(unsigned char *)(v21 + v22[14]) = v29;
        uint64_t v61 = v21 + v22[5];
        sub_1AD9DCDC0();
        uint64_t v45 = sub_1AD9385E0((uint64_t)v5, v21);
        uint64_t v47 = v46;
        sub_1AD894998((uint64_t)v5);
        uint64_t v48 = (uint64_t *)(v21 + v22[18]);
        swift_bridgeObjectRelease();
        *uint64_t v48 = v45;
        v48[1] = v47;
        sub_1AD9DCDC0();
        uint64_t v49 = sub_1AD9385E0((uint64_t)v5, v21);
        uint64_t v51 = v50;
        sub_1AD894998((uint64_t)v5);
        uint64_t v52 = (uint64_t *)(v21 + v22[19]);
        swift_bridgeObjectRelease();
        *uint64_t v52 = v49;
        v52[1] = v51;
        sub_1AD936990();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v11, v65);
LABEL_30:
        swift_endAccess();
        (*(void (**)(uint64_t, uint64_t))(v63 + 16))(v1, v66);
        swift_unknownObjectRelease();
        return;
      }
      sub_1AD91F808(v14);
      uint64_t v37 = v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
      swift_beginAccess();
      uint64_t v38 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
      uint64_t v39 = v37 + v38[9];
      (*v20)(v39, v14, v6);
      if (*(void *)(v37 + v38[7]))
      {
        uint64_t v62 = v39;
        char v40 = sub_1AD935200();
        char v41 = sub_1AD935434();
        if (v41) {
          uint64_t v42 = v40 & 1 | 2;
        }
        else {
          uint64_t v42 = v40 & 1;
        }
        *(void *)(v37 + v38[15]) = v42;
        char v43 = v42 & 1;
        BOOL v44 = (v42 & 1) == 0;
        if (v42 & 1) != 0 || (v41) {
          goto LABEL_29;
        }
      }
      else
      {
        *(void *)(v37 + v38[15]) = 0;
      }
      char v43 = 0;
      BOOL v44 = 0;
LABEL_29:
      *(unsigned char *)(v37 + v38[13]) = v43;
      *(unsigned char *)(v37 + v38[14]) = v44;
      uint64_t v62 = v37 + v38[5];
      sub_1AD9DCDC0();
      uint64_t v53 = sub_1AD9385E0((uint64_t)v5, v37);
      uint64_t v55 = v54;
      sub_1AD894998((uint64_t)v5);
      uint64_t v56 = (uint64_t *)(v37 + v38[18]);
      swift_bridgeObjectRelease();
      *uint64_t v56 = v53;
      v56[1] = v55;
      sub_1AD9DCDC0();
      uint64_t v57 = sub_1AD9385E0((uint64_t)v5, v37);
      uint64_t v59 = v58;
      sub_1AD894998((uint64_t)v5);
      uint64_t v60 = (uint64_t *)(v37 + v38[19]);
      swift_bridgeObjectRelease();
      *uint64_t v60 = v57;
      v60[1] = v59;
      sub_1AD936990();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v14, v65);
      goto LABEL_30;
    }
    swift_unknownObjectRelease();
  }
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v30 = sub_1AD9DD550();
  __swift_project_value_buffer(v30, (uint64_t)qword_1EB725958);
  uint64_t v31 = sub_1AD9DD530();
  os_log_type_t v32 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    v67[0] = v34;
    *(_DWORD *)uint64_t v33 = 136446210;
    uint64_t v35 = sub_1AD9E04F0();
    v67[3] = sub_1AD838978(v35, v36, v67);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v31, v32, "[%{public}s] time components invalid", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v34, -1, -1);
    MEMORY[0x1B3E6D1A0](v33, -1, -1);
  }
}

uint64_t sub_1AD9207D4()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](v2);
  if (result)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v1, ObjectType, v4) & 1) == 0)
    {
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v6 = sub_1AD9DD550();
      __swift_project_value_buffer(v6, (uint64_t)qword_1EB725958);
      uint64_t v7 = sub_1AD9DD530();
      os_log_type_t v8 = sub_1AD9DFBB0();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        uint64_t v10 = swift_slowAlloc();
        uint64_t v13 = v10;
        *(_DWORD *)uint64_t v9 = 136446210;
        uint64_t v11 = sub_1AD9E04F0();
        sub_1AD838978(v11, v12, &v13);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v7, v8, "[%{public}s] time components were invalid, resetting date picker", v9, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v10, -1, -1);
        MEMORY[0x1B3E6D1A0](v9, -1, -1);
      }

      sub_1AD922790();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1AD920A20()
{
  uint64_t v1 = v0;
  uint64_t v33 = self;
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1AD9EA4F0;
  uint64_t v3 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel];
  id v4 = objc_msgSend(v3, sel_topAnchor);
  id v5 = objc_msgSend(v1, sel_contentView);
  id v6 = objc_msgSend(v5, sel_layoutMarginsGuide);

  id v7 = objc_msgSend(v6, (SEL)&selRef_queryIdentifier + 3);
  id v8 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v7);

  *(void *)(v2 + 32) = v8;
  id v9 = objc_msgSend(v3, sel_leadingAnchor);
  id v10 = objc_msgSend(v1, (SEL)&selRef_averageSleepStartTime);
  id v11 = objc_msgSend(v10, (SEL)&selRef_quantityWithUnit_doubleValue_ + 1);

  id v12 = objc_msgSend(v11, sel_leadingAnchor);
  id v13 = objc_msgSend(v9, (SEL)&selRef_copySafeAreaHeight + 6, v12);

  *(void *)(v2 + 40) = v13;
  id v14 = objc_msgSend(v1, (SEL)&selRef_averageSleepStartTime);
  id v15 = objc_msgSend(v14, (SEL)&selRef_quantityWithUnit_doubleValue_ + 1);

  id v16 = objc_msgSend(v15, sel_trailingAnchor);
  id v17 = objc_msgSend(v3, sel_trailingAnchor);
  id v18 = objc_msgSend(v16, (SEL)&selRef_copySafeAreaHeight + 6, v17);

  *(void *)(v2 + 48) = v18;
  char v19 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
  id v20 = objc_msgSend(v19, sel_topAnchor);
  id v21 = objc_msgSend(v3, sel_bottomAnchor);
  id v22 = objc_msgSend(v20, (SEL)&selRef_copySafeAreaHeight + 6, v21);

  *(void *)(v2 + 56) = v22;
  id v23 = objc_msgSend(v19, sel_leadingAnchor);
  id v24 = objc_msgSend(v1, sel_contentView);
  id v25 = objc_msgSend(v24, sel_layoutMarginsGuide);

  id v26 = objc_msgSend(v25, sel_leadingAnchor);
  id v27 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v26);

  *(void *)(v2 + 64) = v27;
  id v28 = objc_msgSend(v1, sel_contentView);
  id v29 = objc_msgSend(v28, sel_layoutMarginsGuide);

  id v30 = objc_msgSend(v29, sel_trailingAnchor);
  id v31 = objc_msgSend(v19, sel_trailingAnchor);
  id v32 = objc_msgSend(v30, sel_constraintGreaterThanOrEqualToAnchor_, v31);

  *(void *)(v2 + 72) = v32;
  sub_1AD9DF870();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  id v34 = (id)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v33, sel_activateConstraints_, v34);
}

void sub_1AD920E98()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1AD9E71F0;
  id v4 = objc_msgSend(v1, sel_contentView);
  id v5 = objc_msgSend(v4, sel_layoutMarginsGuide);

  id v6 = objc_msgSend(v5, sel_bottomAnchor);
  id v7 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker], sel_bottomAnchor);
  id v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(void *)(v3 + 32) = v8;
  sub_1AD9DF870();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  id v9 = (id)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_activateConstraints_, v9);
}

uint64_t sub_1AD921068(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1AD9241B8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  id v7 = (char *)&v79 - v6;
  uint64_t v90 = sub_1AD9DC990();
  uint64_t v8 = *(void *)(v90 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v90, v9);
  uint64_t v88 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  id v86 = (char *)&v79 - v14;
  MEMORY[0x1F4188790](v13, v15);
  id v17 = (char *)&v79 - v16;
  id v18 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v18, v19);
  id v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = (unsigned __int8 *)v2
      + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  long long v83 = v21;
  sub_1AD898CF4((uint64_t)v22, (uint64_t)v21);
  uint64_t v85 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  id v23 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v23, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v24 = v91;
  unsigned __int8 v25 = objc_msgSend(v91, sel_isEnabled);

  *id v22 = v25;
  uint64_t v87 = a1;
  sub_1AD9DDB00();
  id v26 = v92;
  swift_beginAccess();
  uint64_t v27 = v18[7];
  id v28 = *(void **)&v22[v27];
  *(void *)&v22[v27] = v26;
  id v29 = v26;

  long long v82 = v2;
  long long v81 = v7;
  id v30 = v17;
  if (!v26)
  {
    uint64_t v37 = v18[15];
    long long v80 = v18 + 15;
    *(void *)&v22[v37] = 0;
LABEL_9:
    unsigned __int8 v36 = 0;
    BOOL v35 = 0;
    goto LABEL_10;
  }
  char v31 = sub_1AD935200();
  char v32 = sub_1AD935434();
  uint64_t v33 = v18[15];
  long long v80 = v18 + 15;
  if (v32) {
    uint64_t v34 = v31 & 1 | 2;
  }
  else {
    uint64_t v34 = v31 & 1;
  }
  *(void *)&v22[v33] = v34;
  BOOL v35 = (v34 & 1) == 0;
  unsigned __int8 v36 = v34 & 1;
  if ((v34 & 1) == 0 && (v32 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  v22[v18[13]] = v36;
  v22[v18[14]] = v35;

  swift_endAccess();
  uint64_t v38 = v87;
  uint64_t v39 = v85;
  id v40 = objc_msgSend(*(id *)(v87 + v85), sel_wakeUpComponents);
  sub_1AD9DC8C0();

  swift_beginAccess();
  char v41 = *(void (**)(unsigned __int8 *, char *, uint64_t))(v8 + 24);
  uint64_t v42 = v90;
  v41(&v22[v18[11]], v30, v90);
  sub_1AD936990();
  char v43 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v89 = v8 + 8;
  long long v84 = v43;
  v43(v30, v42);
  swift_endAccess();
  id v44 = objc_msgSend(*(id *)(v38 + v39), sel_bedtimeComponents);
  uint64_t v45 = v86;
  sub_1AD9DC8C0();

  swift_beginAccess();
  v41(&v22[v18[9]], v45, v42);
  if (!*(void *)&v22[v18[7]])
  {
    *(void *)&v22[*v80] = 0;
    uint64_t v51 = (uint64_t)v81;
    goto LABEL_18;
  }
  char v46 = sub_1AD935200();
  char v47 = sub_1AD935434();
  if (v47) {
    uint64_t v48 = v46 & 1 | 2;
  }
  else {
    uint64_t v48 = v46 & 1;
  }
  *(void *)&v22[v18[15]] = v48;
  unsigned __int8 v49 = v48 & 1;
  BOOL v50 = (v48 & 1) == 0;
  if (v48)
  {
    uint64_t v51 = (uint64_t)v81;
    goto LABEL_19;
  }
  uint64_t v51 = (uint64_t)v81;
  if ((v47 & 1) == 0)
  {
LABEL_18:
    unsigned __int8 v49 = 0;
    BOOL v50 = 0;
  }
LABEL_19:
  v22[v18[13]] = v49;
  v22[v18[14]] = v50;
  sub_1AD9DCDC0();
  uint64_t v52 = sub_1AD9385E0(v51, (uint64_t)v22);
  uint64_t v54 = v53;
  sub_1AD894998(v51);
  uint64_t v55 = (uint64_t *)&v22[v18[18]];
  swift_bridgeObjectRelease();
  *uint64_t v55 = v52;
  v55[1] = v54;
  sub_1AD9DCDC0();
  uint64_t v56 = sub_1AD9385E0(v51, (uint64_t)v22);
  uint64_t v58 = v57;
  sub_1AD894998(v51);
  uint64_t v59 = (uint64_t *)&v22[v18[19]];
  swift_bridgeObjectRelease();
  *uint64_t v59 = v56;
  v59[1] = v58;
  sub_1AD936990();
  uint64_t v60 = v90;
  v84(v86, v90);
  swift_endAccess();
  id v61 = objc_msgSend(*(id *)(v87 + v85), sel_wakeUpComponents);
  uint64_t v62 = v88;
  sub_1AD9DC8C0();

  swift_beginAccess();
  v41(&v22[v18[10]], v62, v60);
  if (*(void *)&v22[v18[7]])
  {
    char v63 = sub_1AD935200();
    char v64 = sub_1AD935434();
    if (v64) {
      uint64_t v65 = v63 & 1 | 2;
    }
    else {
      uint64_t v65 = v63 & 1;
    }
    *(void *)&v22[v18[15]] = v65;
    unsigned __int8 v66 = v65 & 1;
    BOOL v67 = (v65 & 1) == 0;
    if (v65)
    {
      uint64_t v68 = v82;
      goto LABEL_28;
    }
    uint64_t v68 = v82;
    if (v64) {
      goto LABEL_28;
    }
  }
  else
  {
    *(void *)&v22[*v80] = 0;
    uint64_t v68 = v82;
  }
  unsigned __int8 v66 = 0;
  BOOL v67 = 0;
LABEL_28:
  v22[v18[13]] = v66;
  v22[v18[14]] = v67;
  sub_1AD9DCDC0();
  uint64_t v69 = sub_1AD9385E0(v51, (uint64_t)v22);
  uint64_t v71 = v70;
  sub_1AD894998(v51);
  id v72 = (uint64_t *)&v22[v18[18]];
  swift_bridgeObjectRelease();
  uint64_t *v72 = v69;
  v72[1] = v71;
  sub_1AD9DCDC0();
  uint64_t v73 = sub_1AD9385E0(v51, (uint64_t)v22);
  uint64_t v75 = v74;
  sub_1AD894998(v51);
  uint64_t v76 = (uint64_t *)&v22[v18[19]];
  swift_bridgeObjectRelease();
  *uint64_t v76 = v73;
  v76[1] = v75;
  sub_1AD936990();
  v84(v88, v90);
  swift_endAccess();
  uint64_t v77 = (uint64_t)v83;
  (*(void (**)(char *))((*MEMORY[0x1E4FBC8C8] & *v68) + 0x110))(v83);
  return sub_1AD898C98(v77);
}

uint64_t sub_1AD921864(uint64_t a1)
{
  sub_1AD9241B8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v70 - v5;
  uint64_t v7 = sub_1AD9DC990();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  uint64_t v76 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v70 - v13;
  uint64_t v15 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v15, v16);
  id v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = v1;
  uint64_t v19 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  uint64_t v75 = v18;
  sub_1AD898CF4(v19, (uint64_t)v18);
  uint64_t v20 = (long long *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  uint64_t v21 = *((void *)v20 + 4);
  char v22 = *((unsigned char *)v20 + 40);
  char v23 = *((unsigned char *)v20 + 41);
  char v24 = *((unsigned char *)v20 + 42);
  long long v25 = v20[1];
  long long v79 = *v20;
  long long v80 = v25;
  uint64_t v81 = v21;
  char v82 = v22;
  char v83 = v23;
  char v84 = v24;
  uint64_t v72 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  sub_1AD94B060(*(double *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
  swift_beginAccess();
  id v26 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 24);
  uint64_t v27 = v19 + v15[9];
  uint64_t v74 = (void (*)(void, void))v14;
  uint64_t v77 = v7;
  uint64_t v73 = v26;
  v26(v27, v14, v7);
  uint64_t v28 = *(void *)(v19 + v15[7]);
  uint64_t v78 = v8;
  if (!v28)
  {
    uint64_t v35 = v15[15];
    uint64_t v70 = v15 + 15;
    *(void *)(v19 + v35) = 0;
LABEL_9:
    char v33 = 0;
    BOOL v34 = 0;
    goto LABEL_10;
  }
  char v29 = sub_1AD935200();
  char v30 = sub_1AD935434();
  if (v30) {
    uint64_t v31 = v29 & 1 | 2;
  }
  else {
    uint64_t v31 = v29 & 1;
  }
  uint64_t v32 = v15[15];
  uint64_t v70 = v15 + 15;
  *(void *)(v19 + v32) = v31;
  char v33 = v31 & 1;
  BOOL v34 = (v31 & 1) == 0;
  if ((v31 & 1) == 0 && (v30 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  *(unsigned char *)(v19 + v15[13]) = v33;
  *(unsigned char *)(v19 + v15[14]) = v34;
  sub_1AD9DCDC0();
  uint64_t v36 = sub_1AD9385E0((uint64_t)v6, v19);
  uint64_t v38 = v37;
  sub_1AD894998((uint64_t)v6);
  uint64_t v39 = (uint64_t *)(v19 + v15[18]);
  swift_bridgeObjectRelease();
  *uint64_t v39 = v36;
  v39[1] = v38;
  sub_1AD9DCDC0();
  uint64_t v40 = sub_1AD9385E0((uint64_t)v6, v19);
  uint64_t v42 = v41;
  sub_1AD894998((uint64_t)v6);
  char v43 = (uint64_t *)(v19 + v15[19]);
  swift_bridgeObjectRelease();
  *char v43 = v40;
  v43[1] = v42;
  sub_1AD936990();
  uint64_t v44 = v77;
  uint64_t v45 = v78 + 8;
  char v46 = v74;
  uint64_t v74 = *(void (**)(void, void))(v78 + 8);
  v74(v46, v77);
  swift_endAccess();
  uint64_t v47 = *((void *)v20 + 4);
  char v48 = *((unsigned char *)v20 + 40);
  char v49 = *((unsigned char *)v20 + 41);
  char v50 = *((unsigned char *)v20 + 42);
  long long v51 = v20[1];
  long long v79 = *v20;
  long long v80 = v51;
  uint64_t v81 = v47;
  char v82 = v48;
  char v83 = v49;
  char v84 = v50;
  uint64_t v52 = v76;
  sub_1AD94B2E4(*(double *)(v72 + 144));
  swift_beginAccess();
  v73(v19 + v15[10], v52, v44);
  uint64_t v53 = *(void *)(v19 + v15[7]);
  uint64_t v78 = v45;
  if (v53)
  {
    char v54 = sub_1AD935200();
    char v55 = sub_1AD935434();
    if (v55) {
      uint64_t v56 = v54 & 1 | 2;
    }
    else {
      uint64_t v56 = v54 & 1;
    }
    *(void *)(v19 + v15[15]) = v56;
    char v57 = v56 & 1;
    BOOL v58 = (v56 & 1) == 0;
    if (v56)
    {
      uint64_t v59 = v71;
      goto LABEL_19;
    }
    uint64_t v59 = v71;
    if (v55) {
      goto LABEL_19;
    }
  }
  else
  {
    *(void *)(v19 + *v70) = 0;
    uint64_t v59 = v71;
  }
  char v57 = 0;
  BOOL v58 = 0;
LABEL_19:
  *(unsigned char *)(v19 + v15[13]) = v57;
  *(unsigned char *)(v19 + v15[14]) = v58;
  sub_1AD9DCDC0();
  uint64_t v60 = sub_1AD9385E0((uint64_t)v6, v19);
  uint64_t v62 = v61;
  sub_1AD894998((uint64_t)v6);
  char v63 = (uint64_t *)(v19 + v15[18]);
  swift_bridgeObjectRelease();
  uint64_t *v63 = v60;
  v63[1] = v62;
  sub_1AD9DCDC0();
  uint64_t v64 = sub_1AD9385E0((uint64_t)v6, v19);
  uint64_t v66 = v65;
  sub_1AD894998((uint64_t)v6);
  BOOL v67 = (uint64_t *)(v19 + v15[19]);
  swift_bridgeObjectRelease();
  *BOOL v67 = v64;
  v67[1] = v66;
  sub_1AD936990();
  v74(v76, v77);
  swift_endAccess();
  uint64_t v68 = (uint64_t)v75;
  (*(void (**)(char *))((*MEMORY[0x1E4FBC8C8] & *v59) + 0x110))(v75);
  return sub_1AD898C98(v68);
}

id sub_1AD921E98(unsigned __int8 *a1)
{
  uint64_t v3 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v10 = (char *)&v35 - v9;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v16 = &a1[*(int *)(v15 + 72)];
  uint64_t v17 = *(void *)v16;
  uint64_t v18 = *((void *)v16 + 1);
  uint64_t v19 = &v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model];
  swift_beginAccess();
  uint64_t v20 = (unsigned __int8 *)&v19[v3[18]];
  uint64_t v21 = *((void *)v20 + 1);
  if (v18)
  {
    if (!v21)
    {
      sub_1AD898CF4((uint64_t)a1, (uint64_t)v14);
      goto LABEL_21;
    }
    if (v17 == *(void *)v20 && v18 == v21)
    {
      sub_1AD898CF4((uint64_t)a1, (uint64_t)v14);
    }
    else
    {
      char v23 = sub_1AD9E02D0();
      sub_1AD898CF4((uint64_t)a1, (uint64_t)v14);
      if ((v23 & 1) == 0) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    sub_1AD898CF4((uint64_t)a1, (uint64_t)v14);
    if (v21) {
      goto LABEL_21;
    }
  }
  uint64_t v24 = v3[19];
  long long v25 = &v14[v24];
  uint64_t v26 = *(void *)&v14[v24 + 8];
  uint64_t v27 = (unsigned __int8 *)&v19[v24];
  uint64_t v28 = *((void *)v27 + 1);
  if (!v26)
  {
    swift_bridgeObjectRetain();
    sub_1AD898C98((uint64_t)v14);
    if (v28)
    {
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    goto LABEL_31;
  }
  if (!v28)
  {
LABEL_21:
    sub_1AD898C98((uint64_t)v14);
LABEL_22:
    sub_1AD898CF4((uint64_t)a1, (uint64_t)v10);
    goto LABEL_23;
  }
  if (*(void *)v25 == *(void *)v27 && v26 == v28)
  {
    sub_1AD898C98((uint64_t)v14);
LABEL_31:
    sub_1AD898CF4((uint64_t)a1, (uint64_t)v10);
    goto LABEL_32;
  }
  char v30 = sub_1AD9E02D0();
  sub_1AD898C98((uint64_t)v14);
  sub_1AD898CF4((uint64_t)a1, (uint64_t)v10);
  if ((v30 & 1) == 0)
  {
LABEL_23:
    sub_1AD898C98((uint64_t)v10);
    sub_1AD898CF4((uint64_t)a1, (uint64_t)v6);
LABEL_24:
    sub_1AD898C98((uint64_t)v6);
    goto LABEL_25;
  }
LABEL_32:
  int v32 = v10[v3[13]];
  sub_1AD898C98((uint64_t)v10);
  int v33 = v19[v3[13]];
  sub_1AD898CF4((uint64_t)a1, (uint64_t)v6);
  if (v32 != v33) {
    goto LABEL_24;
  }
  int v34 = v6[v3[14]];
  id result = (id)sub_1AD898C98((uint64_t)v6);
  if (v34 != v19[v3[14]])
  {
LABEL_25:
    sub_1AD922790();
    if (*a1 == *v19)
    {
LABEL_27:
      objc_msgSend(v1, sel_invalidateIntrinsicContentSize);
      return objc_msgSend(v1, sel_setNeedsLayout);
    }
LABEL_26:
    sub_1AD922170();
    goto LABEL_27;
  }
  if (*a1 != *v19) {
    goto LABEL_26;
  }
  return result;
}

void sub_1AD922170()
{
  uint64_t v1 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (unsigned __int8 *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9241B8(0, &qword_1E9A4C420, MEMORY[0x1E4F67900], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component))
  {
    uint64_t v10 = v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
    swift_beginAccess();
    sub_1AD898CF4(v10, (uint64_t)v4);
    int v11 = *v4;
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v12 = (id)qword_1EB727930;
    uint64_t v13 = sub_1AD9DCA70();
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();

    uint64_t v27 = v9;
    if (v11)
    {
      id v26 = objc_msgSend(self, sel_hk_sleepKeyColor);
    }
    else
    {
      if (qword_1E9A48DB0 != -1) {
        swift_once();
      }
      id v26 = (id)qword_1E9A49F58;
    }
    sub_1AD837214(0, (unint64_t *)&unk_1E9A4AEC0);
    uint64_t v24 = sub_1AD9DFD00();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v8, 1, 1, v24);
    uint64_t v28 = v13;
    uint64_t v29 = v15;
    sub_1AD85F688();
    sub_1AD9DFEE0();
    objc_msgSend(self, sel_secondaryLabelColor);
    sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
    static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E4FB28F0], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E4FB09E0], 0);
    char v23 = (void *)sub_1AD9DFCF0();
    swift_bridgeObjectRelease();
    sub_1AD898C98((uint64_t)v4);
    uint64_t v9 = v27;
  }
  else
  {
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v16 = (id)qword_1EB727930;
    uint64_t v17 = sub_1AD9DCA70();
    uint64_t v19 = v18;

    sub_1AD837214(0, (unint64_t *)&unk_1E9A4AEC0);
    uint64_t v20 = self;
    id v21 = objc_msgSend(v20, sel_hk_sleepKeyColor);
    uint64_t v22 = sub_1AD9DFD00();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
    uint64_t v30 = v17;
    uint64_t v31 = v19;
    sub_1AD85F688();
    sub_1AD9DFEE0();
    objc_msgSend(v20, sel_secondaryLabelColor);
    sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
    static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E4FB28F0], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E4FB09E0], 0);
    char v23 = (void *)sub_1AD9DFCF0();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v9, sel_setAttributedText_, v23);
}

uint64_t sub_1AD922790()
{
  uint64_t v1 = v0;
  sub_1AD9241B8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v4 = MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v10 = type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v12 = MEMORY[0x1F4188790](v10, v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = sub_1AD9DCC70();
  uint64_t v39 = *(void *)(v18 - 8);
  uint64_t v40 = v18;
  uint64_t v20 = MEMORY[0x1F4188790](v18, v19);
  uint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v23);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v26 = (uint64_t)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model];
  if (v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component])
  {
    swift_beginAccess();
    id v27 = 0;
    if (*(unsigned char *)(v26 + *(int *)(v10 + 56)) == 1) {
      id v27 = sub_1AD91FC28();
    }
    objc_msgSend(v1, sel_setAccessoryView_, v27);

    sub_1AD898CF4(v26, (uint64_t)v14);
    sub_1AD9DCDC0();
    sub_1AD898C98((uint64_t)v14);
    uint64_t v29 = v39;
    uint64_t v28 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v6, 1, v40) == 1)
    {
      return sub_1AD894998((uint64_t)v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v22, v6, v28);
      int v34 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
      uint64_t v35 = (void *)sub_1AD9DCBB0();
      objc_msgSend(v34, sel_setDate_, v35);

      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v22, v28);
    }
  }
  else
  {
    swift_beginAccess();
    id v31 = 0;
    if (*(unsigned char *)(v26 + *(int *)(v10 + 52)) == 1) {
      id v31 = sub_1AD91FC28();
    }
    objc_msgSend(v1, sel_setAccessoryView_, v31);

    sub_1AD898CF4(v26, (uint64_t)v17);
    sub_1AD9DCDC0();
    sub_1AD898C98((uint64_t)v17);
    uint64_t v33 = v39;
    uint64_t v32 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v9, 1, v40) == 1)
    {
      return sub_1AD894998((uint64_t)v9);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v25, v9, v32);
      uint64_t v36 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
      uint64_t v37 = (void *)sub_1AD9DCBB0();
      objc_msgSend(v36, sel_setDate_, v37);

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v25, v32);
    }
  }
}

void sub_1AD922B9C()
{
  uint64_t v1 = v0;
  if (v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component]) {
    uint64_t v2 = 0x7055656B6157;
  }
  else {
    uint64_t v2 = 0x656D6974646542;
  }
  if (v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component]) {
    unint64_t v3 = 0xE600000000000000;
  }
  else {
    unint64_t v3 = 0xE700000000000000;
  }
  uint64_t v4 = MEMORY[0x1E4FBB1A0];
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0xD000000000000015;
  *(_OWORD *)(inited + 16) = xmmword_1AD9E3080;
  *(void *)(inited + 40) = 0x80000001AD9F4010;
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v3;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1AD9E53A0;
  *(void *)(v6 + 32) = sub_1AD9DF710();
  *(void *)(v6 + 40) = v7;
  *(void *)(v6 + 48) = 0x7065656C53;
  *(void *)(v6 + 56) = 0xE500000000000000;
  strcpy((char *)(v6 + 64), "ScheduleEditor");
  *(unsigned char *)(v6 + 79) = -18;
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1AD86C2F8(v8);
  sub_1AD898D58(0, &qword_1EB725B60, v4, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  sub_1AD9DF690();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v1, sel_setAccessibilityIdentifier_, v9);

  uint64_t v10 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel];
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  uint64_t v11 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setAccessibilityIdentifier_, v11);

  uint64_t v12 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setAccessibilityIdentifier_, v13);
}

id ScheduleOccurrenceComponentsAccessibilityTableViewCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD922F60(uint64_t a1)
{
  return sub_1AD921068(a1);
}

uint64_t sub_1AD922F84(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DCE20();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v39 = (char *)&v32 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    sub_1AD924514();
    uint64_t v11 = sub_1AD9E0010();
    uint64_t v12 = 0;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    uint64_t v37 = v14;
    uint64_t v38 = v11 + 56;
    uint64_t v15 = *(unsigned __int8 *)(v13 + 64);
    uint64_t v34 = v10;
    uint64_t v35 = a1 + ((v15 + 32) & ~v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v33 = (uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 16);
    while (1)
    {
      uint64_t v36 = v12;
      v37(v39, v35 + v16 * v12, v2);
      sub_1AD924170(&qword_1E9A4C170, MEMORY[0x1E4F27C88]);
      uint64_t v18 = sub_1AD9DF640();
      uint64_t v19 = ~(-1 << *(unsigned char *)(v11 + 32));
      unint64_t v20 = v18 & v19;
      unint64_t v21 = (v18 & (unint64_t)v19) >> 6;
      uint64_t v22 = *(void *)(v38 + 8 * v21);
      uint64_t v23 = 1 << (v18 & v19);
      if ((v23 & v22) != 0)
      {
        while (1)
        {
          uint64_t v24 = v13;
          v37(v7, *(void *)(v11 + 48) + v20 * v16, v2);
          sub_1AD924170(&qword_1E9A4C178, MEMORY[0x1E4F27C88]);
          char v25 = sub_1AD9DF6C0();
          uint64_t v26 = *v17;
          (*v17)(v7, v2);
          if (v25) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v19;
          unint64_t v21 = v20 >> 6;
          uint64_t v22 = *(void *)(v38 + 8 * (v20 >> 6));
          uint64_t v23 = 1 << v20;
          uint64_t v13 = v24;
          if ((v22 & (1 << v20)) == 0) {
            goto LABEL_8;
          }
        }
        v26(v39, v2);
        uint64_t v13 = v24;
      }
      else
      {
LABEL_8:
        id v27 = v39;
        *(void *)(v38 + 8 * v21) = v23 | v22;
        uint64_t result = (*v33)(*(void *)(v11 + 48) + v20 * v16, v27, v2);
        uint64_t v29 = *(void *)(v11 + 16);
        BOOL v30 = __OFADD__(v29, 1);
        uint64_t v31 = v29 + 1;
        if (v30)
        {
          __break(1u);
          return result;
        }
        *(void *)(v11 + 16) = v31;
      }
      uint64_t v12 = v36 + 1;
      if (v36 + 1 == v34) {
        return v11;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

id sub_1AD923298()
{
  id v0 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2990]);
  id v1 = objc_msgSend(self, sel_configurationWithFont_, v0);

  uint64_t v2 = (void *)sub_1AD9DF6D0();
  id v3 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v2, v1);

  if (!v3) {
    return 0;
  }
  id v4 = objc_msgSend(self, sel_systemOrangeColor);
  id v5 = objc_msgSend(v3, sel_imageWithTintColor_renderingMode_, v4, 1);

  return v5;
}

uint64_t sub_1AD9233CC(uint64_t a1)
{
  uint64_t v2 = sub_1AD9E0470();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v39 = (char *)&v32 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    sub_1AD9240DC();
    uint64_t v11 = sub_1AD9E0010();
    uint64_t v12 = 0;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    uint64_t v37 = v14;
    uint64_t v38 = v11 + 56;
    uint64_t v15 = *(unsigned __int8 *)(v13 + 64);
    uint64_t v34 = v10;
    uint64_t v35 = a1 + ((v15 + 32) & ~v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v33 = (uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 16);
    while (1)
    {
      uint64_t v36 = v12;
      v37(v39, v35 + v16 * v12, v2);
      sub_1AD924170(&qword_1EB724EE8, MEMORY[0x1E4F281B0]);
      uint64_t v18 = sub_1AD9DF640();
      uint64_t v19 = ~(-1 << *(unsigned char *)(v11 + 32));
      unint64_t v20 = v18 & v19;
      unint64_t v21 = (v18 & (unint64_t)v19) >> 6;
      uint64_t v22 = *(void *)(v38 + 8 * v21);
      uint64_t v23 = 1 << (v18 & v19);
      if ((v23 & v22) != 0)
      {
        while (1)
        {
          uint64_t v24 = v13;
          v37(v7, *(void *)(v11 + 48) + v20 * v16, v2);
          sub_1AD924170(&qword_1EB724EF0, MEMORY[0x1E4F281B0]);
          char v25 = sub_1AD9DF6C0();
          uint64_t v26 = *v17;
          (*v17)(v7, v2);
          if (v25) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v19;
          unint64_t v21 = v20 >> 6;
          uint64_t v22 = *(void *)(v38 + 8 * (v20 >> 6));
          uint64_t v23 = 1 << v20;
          uint64_t v13 = v24;
          if ((v22 & (1 << v20)) == 0) {
            goto LABEL_8;
          }
        }
        v26(v39, v2);
        uint64_t v13 = v24;
      }
      else
      {
LABEL_8:
        id v27 = v39;
        *(void *)(v38 + 8 * v21) = v23 | v22;
        uint64_t result = (*v33)(*(void *)(v11 + 48) + v20 * v16, v27, v2);
        uint64_t v29 = *(void *)(v11 + 16);
        BOOL v30 = __OFADD__(v29, 1);
        uint64_t v31 = v29 + 1;
        if (v30)
        {
          __break(1u);
          return result;
        }
        *(void *)(v11 + 16) = v31;
      }
      uint64_t v12 = v36 + 1;
      if (v36 + 1 == v34) {
        return v11;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

void *sub_1AD9236E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1AD9DCD30();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v14 = &v2[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model];
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4F27B20], v5);
  uint64_t v15 = v2;
  sub_1AD9DCD40();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v13, v14);
  *(void *)&v15[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView] = 0;
  uint64_t v16 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel;
  id v17 = objc_msgSend(self, sel_secondaryLabelColor);
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  objc_msgSend(v18, sel_setTextColor_, v17);

  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v19 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E4FB28F0], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E4FB09E0], 0);
  objc_msgSend(v18, sel_setFont_, v19);

  objc_msgSend(v18, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v18, sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(v18, sel_setNumberOfLines_, 0);
  *(void *)&v15[v16] = v18;
  uint64_t v20 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker;
  *(void *)&v15[v20] = sub_1AD91FCB8();
  if (a2)
  {
    if (a1 == 0xD00000000000003DLL && a2 == 0x80000001AD9EF580) {
      char v21 = 1;
    }
    else {
      char v21 = sub_1AD9E02D0() & 1;
    }
    v15[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component] = v21;

    uint64_t v22 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component] = 0;

    uint64_t v22 = 0;
  }
  uint64_t v23 = (objc_class *)type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  v31.receiver = v15;
  v31.super_class = v23;
  uint64_t v24 = objc_msgSendSuper2(&v31, sel_initWithStyle_reuseIdentifier_, 0, v22);

  char v25 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v26 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v24) + 0xD0);
  id v27 = v24;
  uint64_t v28 = v26();
  (*(void (**)(uint64_t))((*v25 & *v27) + 0xD8))(v28);
  sub_1AD922B9C();
  uint64_t v29 = (*(uint64_t (**)(void))((*v25 & *v27) + 0xF0))();
  (*(void (**)(uint64_t))((*v25 & *v27) + 0xF8))(v29);

  return v27;
}

uint64_t type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell()
{
  uint64_t result = qword_1E9A4C158;
  if (!qword_1E9A4C158) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1AD923B80()
{
  unint64_t result = qword_1E9A4C148;
  if (!qword_1E9A4C148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C148);
  }
  return result;
}

uint64_t sub_1AD923BD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1AD923C30(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1AD923C94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  return sub_1AD898CF4(v3, a2);
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCellDelegate.scheduleOccurrenceComponentsAccessibilityTableViewCellCanUpdateValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCellDelegate.scheduleOccurrenceComponentsAccessibilityTableViewCellDidUpdateValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1AD923D18()
{
  return type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
}

uint64_t sub_1AD923D20()
{
  uint64_t result = type metadata accessor for SleepScheduleComponentsViewModel();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ScheduleOccurrenceComponentsAccessibilityTableViewCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScheduleOccurrenceComponentsAccessibilityTableViewCell);
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.model.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.model.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.model.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.timeComponents.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.apply(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.clockDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

unsigned char *storeEnumTagSinglePayload for ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD9240A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component()
{
  return &type metadata for ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component;
}

void sub_1AD9240DC()
{
  if (!qword_1EB724ED8)
  {
    sub_1AD9E0470();
    sub_1AD924170(&qword_1EB724EE8, MEMORY[0x1E4F281B0]);
    unint64_t v0 = sub_1AD9E0020();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB724ED8);
    }
  }
}

uint64_t sub_1AD924170(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD9241B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

void sub_1AD924234()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AD9DCD30();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  unsigned int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v11 = &v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model];
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E4F27B20], v2);
  sub_1AD9DCD40();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v10, v11);
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView] = 0;
  uint64_t v12 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel;
  id v13 = objc_msgSend(self, sel_secondaryLabelColor);
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  objc_msgSend(v14, sel_setTextColor_, v13);

  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v15 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E4FB28F0], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E4FB09E0], 0);
  objc_msgSend(v14, sel_setFont_, v15);

  objc_msgSend(v14, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v14, sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(v14, sel_setNumberOfLines_, 0);
  *(void *)&v1[v12] = v14;
  uint64_t v16 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker;
  *(void *)&v1[v16] = sub_1AD91FCB8();

  sub_1AD9E0140();
  __break(1u);
}

void sub_1AD924514()
{
  if (!qword_1E9A4C168)
  {
    sub_1AD9DCE20();
    sub_1AD924170(&qword_1E9A4C170, MEMORY[0x1E4F27C88]);
    unint64_t v0 = sub_1AD9E0020();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C168);
    }
  }
}

double sub_1AD9245A8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
  swift_beginAccess();
  sub_1AD924E00(v3, (uint64_t)v5, &qword_1E9A4C180, (unint64_t *)&qword_1E9A4C188);
  if (!v6)
  {
    sub_1AD8B1F34((uint64_t)v5, &qword_1E9A4C180, (unint64_t *)&qword_1E9A4C188);
    goto LABEL_5;
  }
  sub_1AD843E70(0, (unint64_t *)&qword_1E9A4C188);
  sub_1AD843E70(0, (unint64_t *)&qword_1E9A4A3C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1AD9246A0(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1AD924E00(a1, (uint64_t)v9, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
  if (v10)
  {
    sub_1AD843E70(0, (unint64_t *)&qword_1E9A4A3C0);
    sub_1AD843E70(0, (unint64_t *)&qword_1E9A4C188);
    if (swift_dynamicCast())
    {
      if (*((void *)&v12 + 1))
      {
        sub_1AD843F30(&v11, (uint64_t)&v14);
        sub_1AD841030((uint64_t)&v14, (uint64_t)&v11);
        uint64_t v4 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
        swift_beginAccess();
        sub_1AD924E70((uint64_t)&v11, v4);
        swift_endAccess();
        objc_msgSend(v2, sel_setNeedsUpdateConfiguration);
        sub_1AD8B1F34((uint64_t)&v11, &qword_1E9A4C180, (unint64_t *)&qword_1E9A4C188);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v14);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
    }
  }
  else
  {
    sub_1AD8B1F34((uint64_t)v9, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v13 = 0;
  }
  sub_1AD8B1F34((uint64_t)&v11, &qword_1E9A4C180, (unint64_t *)&qword_1E9A4C188);
  uint64_t v5 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
  swift_beginAccess();
  sub_1AD924E00(v5, (uint64_t)&v11, &qword_1E9A4C180, (unint64_t *)&qword_1E9A4C188);
  if (!*((void *)&v12 + 1))
  {
    sub_1AD8B1F34((uint64_t)&v11, &qword_1E9A4C180, (unint64_t *)&qword_1E9A4C188);
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v16 = 0;
    goto LABEL_13;
  }
  sub_1AD843E70(0, (unint64_t *)&qword_1E9A4C188);
  sub_1AD843E70(0, (unint64_t *)&qword_1E9A4A3C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    goto LABEL_13;
  }
  if (!*((void *)&v15 + 1))
  {
LABEL_13:
    sub_1AD8B1F34((uint64_t)&v14, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    swift_beginAccess();
    sub_1AD924E70((uint64_t)&v14, v5);
    swift_endAccess();
    objc_msgSend(v2, sel_setNeedsUpdateConfiguration);
    uint64_t v6 = &qword_1E9A4C180;
    uint64_t v7 = &qword_1E9A4C188;
    goto LABEL_14;
  }
  uint64_t v6 = (unint64_t *)&qword_1E9A4A3B8;
  uint64_t v7 = &qword_1E9A4A3C0;
LABEL_14:
  sub_1AD8B1F34((uint64_t)&v14, v6, (unint64_t *)v7);
LABEL_15:
  sub_1AD924E00(a1, (uint64_t)v9, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
  if (v10)
  {
    sub_1AD843E70(0, (unint64_t *)&qword_1E9A4A3C0);
    sub_1AD843E70(0, &qword_1E9A4C198);
    if (swift_dynamicCast())
    {
      if (*((void *)&v12 + 1))
      {
        sub_1AD843F30(&v11, (uint64_t)&v14);
        __swift_project_boxed_opaque_existential_1Tm(&v14, *((uint64_t *)&v15 + 1));
        objc_msgSend(v2, sel_setSelectionStyle_, sub_1AD9DD480());
        sub_1AD8B1F34(a1, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v14);
      }
    }
    else
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
    }
  }
  else
  {
    sub_1AD8B1F34((uint64_t)v9, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v13 = 0;
  }
  sub_1AD8B1F34((uint64_t)&v11, &qword_1E9A4C190, &qword_1E9A4C198);
  objc_msgSend(v2, sel_setSelectionStyle_, 3);
  return sub_1AD8B1F34(a1, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
}

void (*sub_1AD924B48(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
  swift_beginAccess();
  sub_1AD924E00(v4, (uint64_t)(v3 + 5), &qword_1E9A4C180, (unint64_t *)&qword_1E9A4C188);
  if (v3[8])
  {
    sub_1AD843E70(0, (unint64_t *)&qword_1E9A4C188);
    sub_1AD843E70(0, (unint64_t *)&qword_1E9A4A3C0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v3[4] = 0;
      *(_OWORD *)uint64_t v3 = 0u;
      *((_OWORD *)v3 + 1) = 0u;
    }
  }
  else
  {
    sub_1AD8B1F34((uint64_t)(v3 + 5), &qword_1E9A4C180, (unint64_t *)&qword_1E9A4C188);
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    v3[4] = 0;
  }
  return sub_1AD924C80;
}

void sub_1AD924C80(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    sub_1AD924E00(*a1, (uint64_t)v2 + 40, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
    sub_1AD9246A0((uint64_t)v2 + 40);
    sub_1AD8B1F34((uint64_t)v2, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
  }
  else
  {
    sub_1AD9246A0(*a1);
  }
  free(v2);
}

void (*sub_1AD924D34(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1AD924B48(v2);
  return sub_1AD8530A4;
}

uint64_t sub_1AD924D8C()
{
  return sub_1AD9DD310();
}

uint64_t sub_1AD924E00(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  sub_1AD8B1F90(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1AD924E70(uint64_t a1, uint64_t a2)
{
  sub_1AD8B1F90(0, &qword_1E9A4C180, (unint64_t *)&qword_1E9A4C188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

id sub_1AD925048()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlusMinusButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PlusMinusButton()
{
  return self;
}

id sub_1AD9250A0()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F44680]);
  uint64_t v1 = (void *)sub_1AD9DF6D0();
  id v2 = objc_msgSend(v0, sel_initWithBundleIdentifier_, v1);

  return v2;
}

id static UNUserNotificationCenter.healthNotificationCenter.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F44680]);
  uint64_t v1 = (void *)sub_1AD9DF6D0();
  id v2 = objc_msgSend(v0, sel_initWithBundleIdentifier_, v1);

  return v2;
}

uint64_t static MultiPickerModel.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  v6(a3, a4);
  v6(a3, v4);
  swift_getAssociatedTypeWitness();
  sub_1AD9DF8D0();
  swift_getAssociatedConformanceWitness();
  swift_getWitnessTable();
  LOBYTE(v4) = sub_1AD9DF8E0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1AD9252AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 32))();
  swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1AD9DF8D0();
  uint64_t v4 = MEMORY[0x1B3E6B860](v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1AD925338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1AD9DF8D0();
  sub_1AD9DF900();
  swift_bridgeObjectRelease();
  uint64_t v4 = MEMORY[0x1B3E6B860](v6, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1AD9253FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  swift_getAssociatedTypeWitness();
  sub_1AD9DF8D0();
  sub_1AD9DF900();
  swift_bridgeObjectRelease();
  swift_getWitnessTable();
  swift_getAssociatedConformanceWitness();
  sub_1AD9DFA90();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1AD925534()
{
  swift_getAssociatedTypeWitness();
  sub_1AD9DF8D0();
  sub_1AD9DF200();
  sub_1AD9DF1E0();
  return v1;
}

uint64_t MultiPicker.body.getter@<X0>(uint64_t a1@<X8>)
{
  v20[1] = a1;
  uint64_t v1 = sub_1AD9DF200();
  MEMORY[0x1F4188790](v1, v2);
  uint64_t v4 = (char *)v20 - v3;
  uint64_t v5 = type metadata accessor for MultiPickerLink();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)v20 - v12;
  sub_1AD9DF1E0();
  uint64_t v14 = sub_1AD925534();
  sub_1AD9257C4((uint64_t)v4, v14, v15, v16, (uint64_t)v10);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1AD90C5E8(v10, v5, WitnessTable);
  id v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v10, v5);
  sub_1AD90C5E8(v13, v5, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v18)(v13, v5);
}

uint64_t type metadata accessor for MultiPickerLink()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1AD9257C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_1AD9DF200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t result = type metadata accessor for MultiPickerLink();
  uint64_t v12 = (void *)(a5 + *(int *)(result + 36));
  *uint64_t v12 = a2;
  v12[1] = a3;
  void v12[2] = a4;
  return result;
}

uint64_t sub_1AD925874()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD9258B8()
{
  swift_getAssociatedTypeWitness();
  sub_1AD9DF8D0();
  uint64_t v0 = sub_1AD9DF200();
  MEMORY[0x1B3E6B160](&v2, v0);
  return v2;
}

uint64_t sub_1AD925938()
{
  return sub_1AD9DF1D0();
}

uint64_t dispatch thunk of MultiPickerModel.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MultiPickerModel.title(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of MultiPickerModel.validate(selection:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t type metadata accessor for MultiPicker()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1AD925A3C()
{
  uint64_t result = type metadata accessor for MultiPickerLink();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_1AD925AD0()
{
  type metadata accessor for MultiPickerLink.Coordinator();
  return sub_1AD9276C4(v0);
}

uint64_t sub_1AD925B08(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1AD9DF3D0();
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1AD9DF400();
  uint64_t v27 = *(void *)(v12 - 8);
  uint64_t v28 = v12;
  uint64_t v14 = MEMORY[0x1F4188790](v12, v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a3 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](v14, v19);
  if (sub_1AD925EF8(a2, a3))
  {
    sub_1AD8CCDBC();
    uint64_t v26 = sub_1AD9DFCA0();
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a3);
    unint64_t v20 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = *(_OWORD *)(a3 + 16);
    *(void *)(v21 + 32) = a1;
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v21 + v20, (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
    aBlock[4] = sub_1AD92782C;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1AD8D34D8;
    aBlock[3] = &block_descriptor_21;
    uint64_t v22 = _Block_copy(aBlock);
    id v23 = a1;
    swift_release();
    sub_1AD9DF3F0();
    aBlock[0] = MEMORY[0x1E4FBC860];
    sub_1AD91C410((unint64_t *)&qword_1E9A4AD50, MEMORY[0x1E4FBCB00]);
    sub_1AD8ADA90(0);
    sub_1AD91C410((unint64_t *)&qword_1E9A4AD60, sub_1AD8ADA90);
    sub_1AD9DFF40();
    uint64_t v24 = (void *)v26;
    MEMORY[0x1B3E6BC50](0, v16, v11, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  }
  else
  {
    return sub_1AD92611C(a1, a3);
  }
}

BOOL sub_1AD925EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v4, v7);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v13);
  uint64_t v15 = (char *)v20 - v14;
  swift_getWitnessTable();
  sub_1AD9DE630();
  sub_1AD9DE620();
  uint64_t v16 = (void *)v20[1];
  sub_1AD926538((uint64_t)v6);

  uint64_t v17 = sub_1AD9DF200();
  MEMORY[0x1B3E6B160]();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a2);
  MEMORY[0x1B3E6B160](v17);
  LOBYTE(v16) = sub_1AD9DF6C0();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  v18(v15, v8);
  return (v16 & 1) == 0;
}

uint64_t sub_1AD92611C(void *a1, uint64_t a2)
{
  id v37 = a1;
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v40 = *(void *)(v5 + 24);
  uint64_t v41 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  uint64_t v11 = (char *)&v36 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v48 = sub_1AD9DFE90();
  uint64_t v45 = *(void (***)(uint64_t *, char *, uint64_t))(v48 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v48, v13);
  uint64_t v47 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (uint64_t *)((char *)&v36 - v17);
  uint64_t v43 = v2;
  v50[1] = sub_1AD9258B8();
  uint64_t v19 = sub_1AD9DF8D0();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1B3E6B7A0](v50, v19, WitnessTable);
  swift_bridgeObjectRelease();
  uint64_t v49 = v50[0];
  sub_1AD9E0180();
  sub_1AD9E0150();
  uint64_t v21 = (uint64_t)v11;
  uint64_t v22 = sub_1AD9E0170();
  v45 += 4;
  uint64_t v46 = v22;
  uint64_t v44 = TupleTypeMetadata2 - 8;
  uint64_t v38 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v39 = (void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  id v23 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v24 = v41;
  while (1)
  {
    char v25 = v47;
    sub_1AD9E0160();
    (*v45)(v18, v25, v48);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v18, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v26 = *v18;
    }
    uint64_t v27 = TupleTypeMetadata2;
    (*v39)(v21, (char *)v18 + *(int *)(TupleTypeMetadata2 + 48), AssociatedTypeWitness);
    uint64_t v28 = AssociatedTypeWitness;
    uint64_t v29 = v42;
    uint64_t v30 = sub_1AD9DF200();
    MEMORY[0x1B3E6B160](v30);
    uint64_t v31 = sub_1AD9253FC(v21, v26, v29, v40);
    uint64_t v32 = v21;
    char v34 = v33;
    (*v38)(v24, v29);
    if ((v34 & 1) == 0) {
      objc_msgSend(v37, sel_selectRow_inComponent_animated_, v31, v26, 0);
    }
    (*v23)(v32, v28);
    uint64_t AssociatedTypeWitness = v28;
    uint64_t v21 = v32;
    TupleTypeMetadata2 = v27;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD926538@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  uint64_t v4 = type metadata accessor for MultiPickerLink();
  uint64_t v5 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t sub_1AD9265FC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  uint64_t v7 = sub_1AD9279C8((uint64_t)v5, v6);

  return v7;
}

uint64_t sub_1AD926648(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  uint64_t v9 = sub_1AD927B88(a4, v8);

  return v9;
}

id sub_1AD92669C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  id v9 = a1;
  sub_1AD927E34(a4, a5);
  uint64_t v11 = v10;

  if (v11)
  {
    uint64_t v12 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  return v12;
}

void sub_1AD926734(void *a1, uint64_t a2, void *a3, uint64_t a4, int64_t a5)
{
  id v8 = a3;
  id v9 = a1;
  sub_1AD9281EC(a4, a5);
}

void sub_1AD9267A8()
{
}

id sub_1AD9267EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MultiPickerLink.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD926860(void *a1)
{
  unint64_t v1 = (char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60);
  uint64_t v2 = type metadata accessor for MultiPickerLink();
  uint64_t v3 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(v1, v2);
}

uint64_t type metadata accessor for MultiPickerLink.Coordinator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1AD92692C()
{
  type metadata accessor for MultiPickerLink();
  return swift_getWitnessTable();
}

uint64_t sub_1AD926974()
{
  uint64_t result = sub_1AD9DF200();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AD926A0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v13 = *v14;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    uint64_t v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v17(v15, v16, v4);
    uint64_t v18 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v18 = *v19;
    v18[1] = v19[1];
    v18[2] = v19[2];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1AD926B90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void *sub_1AD926C50(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_retain();
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = ((v10 + 16) & ~v10) + *(void *)(v9 + 48) + 7;
  uint64_t v14 = (void *)(((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  v14[2] = v15[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1AD926D64(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  void *v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 40) + 7;
  uint64_t v12 = (void *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_retain();
  swift_release();
  v12[1] = v13[1];
  swift_retain();
  swift_release();
  void v12[2] = v13[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1AD926E90(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v9 + 8) & ~v9, ((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(v8 + 32) + 7;
  unint64_t v11 = (unint64_t)a1 + v10;
  unint64_t v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(v12 + 16);
  long long v14 = *(_OWORD *)v12;
  unint64_t v15 = v11 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v15 = v14;
  *(void *)(v15 + 16) = v13;
  return a1;
}

void *sub_1AD926F58(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  void *v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 24) + 7;
  unint64_t v12 = (void *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  swift_release();
  v12[1] = v13[1];
  swift_release();
  void v12[2] = v13[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD92705C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 24;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1AD9271BCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  uint64_t v17 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
  }
  unint64_t v18 = *v17;
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void sub_1AD9271D0(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(((unint64_t)v18 + v9 + 8) & ~v9);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = a2 - 1;
              }
              void *v18 = v19;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1AD9273C8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_1AD9273F0()
{
  return swift_getWitnessTable();
}

id sub_1AD92740C()
{
  return sub_1AD9278D0();
}

id sub_1AD92741C@<X0>(void *a1@<X8>)
{
  id result = sub_1AD925AD0();
  *a1 = result;
  return result;
}

uint64_t sub_1AD927444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, WitnessTable);
}

uint64_t sub_1AD9274C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F40F9E78](a1, a2, a3, WitnessTable);
}

void sub_1AD92753C()
{
}

uint64_t sub_1AD92757C(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

id sub_1AD9275D0(uint64_t a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  uint64_t v4 = type metadata accessor for MultiPickerLink();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v3, a1, v4);
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for MultiPickerLink.Coordinator();
  return objc_msgSendSuper2(&v6, sel_init);
}

id sub_1AD9276C4(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for MultiPickerLink.Coordinator());
  return sub_1AD9275D0(a1);
}

uint64_t sub_1AD927700()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MultiPickerLink() - 8) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;

  swift_release();
  swift_release();
  uint64_t v4 = sub_1AD9DF200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3 + *(int *)(v4 + 32), v1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AD92782C()
{
  uint64_t v1 = type metadata accessor for MultiPickerLink();
  uint64_t v2 = *(void **)(v0 + 32);
  objc_msgSend(v2, sel_reloadAllComponents);
  return sub_1AD92611C(v2, v1);
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

id sub_1AD9278D0()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1A98]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  type metadata accessor for MultiPickerLink();
  swift_getWitnessTable();
  sub_1AD9DE630();
  sub_1AD9DE620();
  objc_msgSend(v0, sel_setDataSource_, v2);

  sub_1AD9DE620();
  objc_msgSend(v0, sel_setDelegate_, v2);

  return v0;
}

uint64_t sub_1AD9279C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x50);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1, a2);
  objc_super v6 = (char *)&v17 - v5;
  uint64_t v8 = *(void *)(v7 + 88);
  uint64_t v9 = type metadata accessor for MultiPickerLink();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  int v13 = (char *)&v17 - v12;
  sub_1AD926538((uint64_t)&v17 - v12);
  uint64_t v14 = sub_1AD9DF200();
  MEMORY[0x1B3E6B160](v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v15 = sub_1AD9252AC(v3, v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v15;
}

uint64_t sub_1AD927B88(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v3 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x50);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1, a2);
  objc_super v6 = (char *)&v20 - v5;
  uint64_t v8 = *(void *)(v7 + 88);
  uint64_t v9 = type metadata accessor for MultiPickerLink();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  int v13 = (char *)&v20 - v12;
  sub_1AD926538((uint64_t)&v20 - v12);
  uint64_t v22 = sub_1AD9DF200();
  MEMORY[0x1B3E6B160]();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v13, v9);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v3, v8);
  unint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
  v20(v6, v3);
  swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1AD9DF8D0();
  uint64_t v16 = MEMORY[0x1B3E6B860](v14, v15);
  swift_bridgeObjectRelease();
  uint64_t v17 = 0;
  if (v16 > v23)
  {
    uint64_t v18 = v23;
    sub_1AD926538((uint64_t)v13);
    MEMORY[0x1B3E6B160](v22);
    v21(v13, v9);
    uint64_t v17 = sub_1AD925338(v18, v3, v8);
    v20(v6, v3);
  }
  return v17;
}

uint64_t sub_1AD927E34(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v29 = a1;
  uint64_t v3 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x50);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1, a2);
  objc_super v6 = (char *)&v25 - v5;
  uint64_t v8 = *(void *)(v7 + 88);
  uint64_t v9 = type metadata accessor for MultiPickerLink();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  int v13 = (char *)&v25 - v12;
  sub_1AD926538((uint64_t)&v25 - v12);
  uint64_t v32 = sub_1AD9DF200();
  MEMORY[0x1B3E6B160]();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v28 = v9;
  uint64_t v34 = v10 + 8;
  uint64_t v31 = v14;
  v14(v13, v9);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 32);
  uint64_t v15 = v27(v3, v8);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v30 = v4 + 8;
  char v33 = v16;
  v16(v6, v3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1AD9DF8D0();
  uint64_t v18 = MEMORY[0x1B3E6B860](v15, v17);
  swift_bridgeObjectRelease();
  uint64_t v19 = 0;
  if (v18 > v35)
  {
    sub_1AD926538((uint64_t)v13);
    MEMORY[0x1B3E6B160](v32);
    uint64_t v20 = v28;
    v31(v13, v28);
    v27(v3, v8);
    v33(v6, v3);
    uint64_t v21 = v35;
    sub_1AD9DF900();
    swift_bridgeObjectRelease();
    uint64_t v22 = MEMORY[0x1B3E6B860](v36, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    if (v22 <= v29)
    {
      return 0;
    }
    else
    {
      uint64_t v23 = v29;
      sub_1AD926538((uint64_t)v13);
      MEMORY[0x1B3E6B160](v32);
      v31(v13, v20);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(v23, v21, v3, v8);
      v33(v6, v3);
    }
  }
  return v19;
}

uint64_t sub_1AD9281EC(uint64_t a1, int64_t a2)
{
  uint64_t v3 = v2;
  int64_t v65 = a2;
  uint64_t v58 = a1;
  uint64_t v4 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x58);
  uint64_t v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x50);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness, v7);
  char v54 = (char *)&v47 - v9;
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v8, v11);
  uint64_t v52 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = type metadata accessor for MultiPickerLink();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17, v19);
  uint64_t v53 = (uint64_t)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v51 = (uint64_t)&v47 - v24;
  MEMORY[0x1F4188790](v23, v25);
  uint64_t v27 = (char *)&v47 - v26;
  sub_1AD926538((uint64_t)&v47 - v26);
  uint64_t v60 = sub_1AD9DF200();
  MEMORY[0x1B3E6B160]();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v62 = v18 + 8;
  char v57 = v28;
  v28(v27, v17);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v4 + 32);
  uint64_t v63 = v4;
  uint64_t v56 = v29;
  uint64_t v30 = ((uint64_t (*)(uint64_t, uint64_t))v29)(v5, v4);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v64 = v10 + 8;
  uint64_t v61 = v31;
  v31(v16, v5);
  uint64_t v59 = AssociatedTypeWitness;
  uint64_t v32 = sub_1AD9DF8D0();
  uint64_t v33 = MEMORY[0x1B3E6B860](v30, v32);
  uint64_t result = swift_bridgeObjectRelease();
  if (v33 > v65)
  {
    sub_1AD926538((uint64_t)v27);
    MEMORY[0x1B3E6B160](v60);
    v57(v27, v17);
    v56(v5, v63);
    v61(v16, v5);
    sub_1AD9DF900();
    swift_bridgeObjectRelease();
    uint64_t v35 = MEMORY[0x1B3E6B860](v66, v59);
    uint64_t result = swift_bridgeObjectRelease();
    if (v35 > v58)
    {
      sub_1AD926538((uint64_t)v27);
      uint64_t v48 = sub_1AD9258B8();
      uint64_t v36 = (void (*)(uint64_t, uint64_t))v57;
      v57(v27, v17);
      uint64_t v49 = v32;
      char v50 = v3;
      id v37 = v36;
      uint64_t v66 = v48;
      uint64_t v38 = v51;
      sub_1AD926538(v51);
      uint64_t v39 = v52;
      MEMORY[0x1B3E6B160](v60);
      v37(v38, v17);
      v56(v5, v63);
      v61(v39, v5);
      unint64_t v40 = v65;
      sub_1AD9DF900();
      swift_bridgeObjectRelease();
      uint64_t v41 = v54;
      uint64_t v42 = v59;
      sub_1AD9DF900();
      swift_bridgeObjectRelease();
      sub_1AD9DF890();
      uint64_t v43 = v66;
      sub_1AD92757C(v40, v66);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v45 = v43 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v45 = v43;
      }
      (*(void (**)(unint64_t, char *, uint64_t))(v55 + 40))(v45+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v40, v41, v42);
      sub_1AD926538((uint64_t)v27);
      uint64_t v46 = v53;
      sub_1AD926538(v53);
      MEMORY[0x1B3E6B160](v60);
      v37(v46, v17);
      (*(void (**)(uint64_t, uint64_t))(v63 + 48))(v66, v5);
      swift_bridgeObjectRelease();
      v61(v16, v5);
      sub_1AD925938();
      return ((uint64_t (*)(char *, uint64_t))v37)(v27, v17);
    }
  }
  return result;
}

void sub_1AD92880C()
{
}

BOOL static HKSPSleepScheduleOccurrence.DateDescription.DayContext.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.DayContext.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.DayContext.hashValue.getter()
{
  return sub_1AD9E03E0();
}

void HKSPSleepScheduleOccurrence.DateDescription.dayContext.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *HKSPSleepScheduleOccurrence.DateDescription.dayContext.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*HKSPSleepScheduleOccurrence.DateDescription.dayContext.modify())()
{
  return nullsub_1;
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.dayPeriod.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.dayPeriod.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*HKSPSleepScheduleOccurrence.DateDescription.dayPeriod.modify())()
{
  return nullsub_1;
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.isSingleDayOverride.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.isSingleDayOverride.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*HKSPSleepScheduleOccurrence.DateDescription.isSingleDayOverride.modify())()
{
  return nullsub_1;
}

unsigned char *HKSPSleepScheduleOccurrence.DateDescription.init(dayContext:dayPeriod:isSingleDayOverride:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = *result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  return result;
}

unint64_t sub_1AD928974()
{
  unint64_t result = qword_1E9A4C338[0];
  if (!qword_1E9A4C338[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9A4C338);
  }
  return result;
}

uint64_t _s15DateDescriptionVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s15DateDescriptionVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKSPSleepScheduleOccurrence.DateDescription()
{
  return &type metadata for HKSPSleepScheduleOccurrence.DateDescription;
}

unsigned char *_s15DateDescriptionV10DayContextOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD928B3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKSPSleepScheduleOccurrence.DateDescription.DayContext()
{
  return &type metadata for HKSPSleepScheduleOccurrence.DateDescription.DayContext;
}

void Date.formattedText.getter()
{
  id v0 = objc_msgSend(self, sel_sharedInstance);
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = (void *)sub_1AD9DCBB0();
    id v3 = objc_msgSend(v1, sel_formatDateAsTimeStyle_, v2);

    if (v3)
    {
      sub_1AD9DF710();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t ForEachWithIndexAsID.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for ForEachWithIndexAsID();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 52));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t type metadata accessor for ForEachWithIndexAsID()
{
  return swift_getGenericMetadata();
}

uint64_t ForEachWithIndexAsID.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = a3;
  uint64_t v40 = *(void *)(a1 - 8);
  uint64_t v41 = *(void *)(v40 + 64);
  uint64_t v5 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v38 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v35 = *(void *)(v5 + 32);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(v35 + 8) + 8) + 8);
  uint64_t v9 = sub_1AD9E0180();
  MEMORY[0x1F4188790](v9, v10);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = MEMORY[0x1E4FBB550];
  swift_getTupleTypeMetadata2();
  uint64_t v12 = sub_1AD9DF8D0();
  uint64_t v37 = v12;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v48 = v12;
  uint64_t v49 = v11;
  uint64_t v50 = v13;
  uint64_t v51 = WitnessTable;
  uint64_t v52 = MEMORY[0x1E4FBB560];
  uint64_t v14 = sub_1AD9DF270();
  uint64_t v39 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14, v15);
  uint64_t v33 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v18);
  uint64_t v34 = (char *)v32 - v19;
  MEMORY[0x1B3E6B7A0](v7, v8);
  swift_getWitnessTable();
  uint64_t v48 = sub_1AD9DF8F0();
  uint64_t v43 = v7;
  uint64_t v44 = v13;
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v21 = v35;
  uint64_t v45 = v35;
  uint64_t v46 = v20;
  v32[1] = swift_getKeyPath();
  uint64_t v22 = v40;
  uint64_t v23 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v38, v3, a1);
  unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = (char *)swift_allocObject();
  *((void *)v25 + 2) = v7;
  *((void *)v25 + 3) = v13;
  *((void *)v25 + 4) = v21;
  *((void *)v25 + 5) = v20;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v25[v24], v23, a1);
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = v7;
  void v26[3] = v13;
  v26[4] = v21;
  v26[5] = v20;
  v26[6] = sub_1AD929374;
  v26[7] = v25;
  uint64_t v27 = v33;
  sub_1AD9DF250();
  uint64_t v47 = v20;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = v34;
  sub_1AD90C5E8(v27, v14, v28);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v39 + 8);
  v30(v27, v14);
  sub_1AD90C5E8(v29, v14, v28);
  return ((uint64_t (*)(char *, uint64_t))v30)(v29, v14);
}

uint64_t sub_1AD929118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = (char *)v25 - v16;
  v25[0] = v18;
  v25[1] = v19;
  v25[2] = v20;
  v25[3] = v21;
  uint64_t v22 = type metadata accessor for ForEachWithIndexAsID();
  (*(void (**)(uint64_t))(a3 + *(int *)(v22 + 52)))(a2);
  sub_1AD90C5E8(v14, a5, a7);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v14, a5);
  sub_1AD90C5E8(v17, a5, a7);
  return ((uint64_t (*)(char *, uint64_t))v23)(v17, a5);
}

uint64_t sub_1AD929278()
{
  long long v3 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = *(void *)(type metadata accessor for ForEachWithIndexAsID() - 8);
  (*(void (**)(unint64_t))(*(void *)(v3 - 8) + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD929374(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for ForEachWithIndexAsID() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return sub_1AD929118(a1, a2, v10, v5, v6, v7, v8);
}

uint64_t sub_1AD929438(char *a1, uint64_t (*a2)(uint64_t, char *))
{
  uint64_t v4 = *(void *)a1;
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

uint64_t sub_1AD9294DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD929514(char *a1)
{
  return sub_1AD929438(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 48));
}

uint64_t sub_1AD929524()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD92956C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t sub_1AD929574()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AD929610(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1AD929708(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t sub_1AD929778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  void *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t sub_1AD9297F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  void *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1AD929884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1AD929900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1AD929984(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1AD929AD0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_1AD929AE4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1AD929CC4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          void *v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_1AD929CEC()
{
  return swift_getWitnessTable();
}

id sub_1AD929DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = &v3[OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding];
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((void *)v6 + 4) = 0;
  unsigned int v7 = &v3[OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell____lazy_storage___occurrenceView];
  uint64_t v8 = type metadata accessor for ScheduleOccurrenceView(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  if (a3)
  {
    uint64_t v9 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = 0;
  }
  v18.receiver = v3;
  v18.super_class = (Class)type metadata accessor for ScheduleOccurrenceTableViewCell();
  id v10 = objc_msgSendSuper2(&v18, sel_initWithStyle_reuseIdentifier_, a1, v9);

  id v11 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  v17[4] = sub_1AD8F05CC;
  v17[5] = 0;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 1107296256;
  _OWORD v17[2] = sub_1AD8F0900;
  v17[3] = &block_descriptor_22;
  int v12 = _Block_copy(v17);
  id v13 = v10;
  id v14 = objc_msgSend(v11, sel_initWithDynamicProvider_, v12);
  _Block_release(v12);
  swift_release();
  objc_msgSend(v13, sel_setBackgroundColor_, v14);

  objc_msgSend(v13, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 1);
  *(void *)(swift_allocObject() + 16) = v13;
  id v15 = v13;
  sub_1AD9DFC30();

  return v15;
}

uint64_t sub_1AD929FF0()
{
  sub_1AD92A564();
  v2[3] = v0;
  v2[4] = sub_1AD92A6BC(&qword_1E9A4C3F8, (void (*)(uint64_t))sub_1AD92A564);
  __swift_allocate_boxed_opaque_existential_1(v2);
  sub_1AD92A784(0, &qword_1E9A4C3E0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
  sub_1AD92A600();
  sub_1AD9DE520();
  return MEMORY[0x1B3E6BBC0](v2);
}

uint64_t sub_1AD92A0D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
  swift_beginAccess();
  sub_1AD92A704(v3, (uint64_t)&v9);
  if (v10)
  {
    sub_1AD843F30(&v9, (uint64_t)v11);
    uint64_t v4 = v12;
    uint64_t v5 = v13;
    __swift_project_boxed_opaque_existential_1Tm(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    uint64_t v6 = type metadata accessor for ScheduleOccurrenceView(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 0, 1, v6);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  }
  else
  {
    sub_1AD92A830((uint64_t)&v9, &qword_1E9A4C180, (void (*)(uint64_t))sub_1AD92A7D8);
    uint64_t v8 = type metadata accessor for ScheduleOccurrenceView(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 1, 1, v8);
  }
}

id sub_1AD92A348()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD92A3F8()
{
  return type metadata accessor for ScheduleOccurrenceTableViewCell();
}

uint64_t type metadata accessor for ScheduleOccurrenceTableViewCell()
{
  uint64_t result = qword_1E9A4C3D0;
  if (!qword_1E9A4C3D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1AD92A44C()
{
  sub_1AD92A784(319, &qword_1E9A4C3E0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t sub_1AD92A51C()
{
  return swift_deallocObject();
}

uint64_t sub_1AD92A554()
{
  return sub_1AD929FF0();
}

uint64_t sub_1AD92A55C@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD92A0D0(*(void *)(v1 + 16), a1);
}

void sub_1AD92A564()
{
  if (!qword_1E9A4C3E8)
  {
    sub_1AD92A784(255, &qword_1E9A4C3E0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
    sub_1AD92A600();
    unint64_t v0 = sub_1AD9DE530();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C3E8);
    }
  }
}

unint64_t sub_1AD92A600()
{
  unint64_t result = qword_1E9A4C3F0;
  if (!qword_1E9A4C3F0)
  {
    sub_1AD92A784(255, &qword_1E9A4C3E0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
    sub_1AD92A6BC(&qword_1E9A4C0A0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C3F0);
  }
  return result;
}

uint64_t sub_1AD92A6BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD92A704(uint64_t a1, uint64_t a2)
{
  sub_1AD92A784(0, &qword_1E9A4C180, (void (*)(uint64_t))sub_1AD92A7D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1AD92A784(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1AD92A7D8()
{
  unint64_t result = qword_1E9A4C188;
  if (!qword_1E9A4C188)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4C188);
  }
  return result;
}

uint64_t sub_1AD92A830(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1AD92A784(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t UICollectionView.ElementKind.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  if (sub_1AD9DF710() == a1 && v6 == a2)
  {
    uint64_t v9 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v8 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  if (sub_1AD9DF710() == v4 && v11 == a2)
  {
    uint64_t v9 = 1;
    goto LABEL_8;
  }
  char v13 = sub_1AD9E02D0();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v9 = a2;
  if ((v13 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v9 = 1;
LABEL_9:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v4 = 0;
LABEL_10:
  *a3 = v4;
  a3[1] = v9;
  return result;
}

uint64_t UICollectionView.ElementKind.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  if (sub_1AD9DF710() == a1 && v6 == a2)
  {
    uint64_t v9 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v8 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  if (sub_1AD9DF710() == v4 && v11 == a2)
  {
    uint64_t v9 = 1;
    goto LABEL_8;
  }
  char v13 = sub_1AD9E02D0();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v9 = a2;
  if ((v13 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v9 = 1;
LABEL_9:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v4 = 0;
LABEL_10:
  *a3 = v4;
  a3[1] = v9;
  return result;
}

uint64_t UICollectionView.ElementKind.rawValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  if (v2 > 1) {
    uint64_t v3 = v1;
  }
  else {
    uint64_t v3 = sub_1AD9DF710();
  }
  sub_1AD92AAE4(v1, v2);
  return v3;
}

uint64_t sub_1AD92AAE4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

double sub_1AD92AAF8@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  UICollectionView.ElementKind.init(rawValue:)(*a1, a1[1], &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_1AD92AB38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if (v4 > 1)
  {
    uint64_t v5 = *v1;
    uint64_t v6 = v1[1];
  }
  else
  {
    uint64_t v5 = sub_1AD9DF710();
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_1AD92AAE4(v3, v4);
}

unint64_t _s11ElementKindOwxx(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s11ElementKindOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *_s11ElementKindOwca(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s11ElementKindOwta(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s11ElementKindOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t _s11ElementKindOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1AD92ADD4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1AD92ADEC(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for UICollectionView.ElementKind()
{
  return &type metadata for UICollectionView.ElementKind;
}

id sub_1AD92AE1C(uint64_t a1)
{
  return sub_1AD8B0C44(a1, (SEL *)&selRef_secondaryLabelColor, &qword_1E9A4C400);
}

id sub_1AD92AE30(uint64_t a1)
{
  return sub_1AD8B0C44(a1, (SEL *)&selRef_systemOrangeColor, &qword_1E9A4C408);
}

id sub_1AD92AE44(uint64_t a1)
{
  return sub_1AD8B0C44(a1, (SEL *)&selRef_labelColor, &qword_1E9A4C410);
}

id sub_1AD92AE58(uint64_t a1)
{
  return sub_1AD8B0C44(a1, (SEL *)&selRef_secondaryLabelColor, &qword_1E9A4C418);
}

id sub_1AD92AE6C()
{
  unint64_t v0 = self;
  id result = objc_msgSend(v0, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, *MEMORY[0x1E4FB2990], *MEMORY[0x1E4FB0990], 1024, *MEMORY[0x1E4FB27C0], 0);
  if (result)
  {
    unint64_t v2 = result;
    id v3 = objc_msgSend(result, sel_fontDescriptor);
    sub_1AD92F0A4(0, &qword_1E9A4C428, (uint64_t (*)(uint64_t))sub_1AD92F038, MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1AD9E3070;
    unsigned int v5 = (void *)*MEMORY[0x1E4FB0910];
    *(void *)(inited + 32) = *MEMORY[0x1E4FB0910];
    id v6 = v5;
    uint64_t v7 = sub_1AD9B5628();
    sub_1AD92F0A4(0, &qword_1E9A4C438, (uint64_t (*)(uint64_t))sub_1AD92F108, MEMORY[0x1E4FBB320]);
    *(void *)(inited + 64) = v8;
    *(void *)(inited + 40) = v7;
    sub_1AD863C98(inited);
    type metadata accessor for AttributeName(0);
    sub_1AD92F1A4((unint64_t *)&unk_1E9A4C450, type metadata accessor for AttributeName);
    uint64_t v9 = (void *)sub_1AD9DF5F0();
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(v3, sel_fontDescriptorByAddingAttributes_, v9);

    id v11 = objc_msgSend(v0, sel_fontWithDescriptor_size_, v10, 0.0);
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1AD92B08C(unsigned __int8 *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DCD10();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v11 = MEMORY[0x1F4188790](v9, v10);
  char v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = &a1[*(int *)(v11 + 72)];
  uint64_t v15 = *(void *)v14;
  uint64_t v16 = *((void *)v14 + 1);
  unint64_t v17 = &v2[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model];
  swift_beginAccess();
  objc_super v18 = &v17[v9[18]];
  uint64_t v19 = *((void *)v18 + 1);
  if (!v16)
  {
    if (!v19) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (!v19 || (v15 == *(void *)v18 ? (BOOL v20 = v16 == v19) : (BOOL v20 = 0), !v20 && (sub_1AD9E02D0() & 1) == 0)) {
LABEL_10:
  }
    sub_1AD92B4F0();
LABEL_11:
  uint64_t v21 = v9[19];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = *(void *)&a1[v21 + 8];
  unint64_t v24 = &v17[v21];
  uint64_t v25 = *((void *)v24 + 1);
  if (!v23)
  {
    if (!v25) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (!v25 || (*(void *)v22 == *(void *)v24 ? (BOOL v26 = v23 == v25) : (BOOL v26 = 0), !v26 && (sub_1AD9E02D0() & 1) == 0)) {
LABEL_20:
  }
    sub_1AD92B640();
LABEL_21:
  if (a1[v9[13]] != v17[v9[13]]) {
    sub_1AD92B4F0();
  }
  if (a1[v9[14]] != v17[v9[14]]) {
    sub_1AD92B640();
  }
  if (*a1 != *v17)
  {
    sub_1AD92B790();
    id v27 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
    if (*v17 == 1)
    {
      if (qword_1E9A48F30 != -1) {
        swift_once();
      }
      uint64_t v28 = &qword_1E9A4C410;
    }
    else
    {
      if (qword_1E9A48F38 != -1) {
        swift_once();
      }
      uint64_t v28 = &qword_1E9A4C418;
    }
    objc_msgSend(v27, sel_setTextColor_, *v28);

    objc_msgSend(v2, sel_invalidateIntrinsicContentSize);
    objc_msgSend(v2, sel_setNeedsLayout);
  }
  uint64_t v29 = v9[17];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = *(void *)&a1[v29 + 8];
  uint64_t v32 = &v17[v29];
  uint64_t v33 = *((void *)v32 + 1);
  if (!v31)
  {
    if (!v33)
    {
LABEL_47:
      sub_1AD898CF4((uint64_t)a1, (uint64_t)v13);
      goto LABEL_48;
    }
LABEL_41:
    sub_1AD898CF4((uint64_t)a1, (uint64_t)v13);
    goto LABEL_42;
  }
  if (!v33) {
    goto LABEL_41;
  }
  if (*(void *)v30 == *(void *)v32 && v31 == v33) {
    goto LABEL_47;
  }
  char v34 = sub_1AD9E02D0();
  sub_1AD898CF4((uint64_t)a1, (uint64_t)v13);
  if ((v34 & 1) == 0) {
    goto LABEL_42;
  }
LABEL_48:
  uint64_t v38 = v9[16];
  uint64_t v39 = &v13[v38];
  uint64_t v40 = *(void *)&v13[v38 + 8];
  uint64_t v41 = &v17[v38];
  uint64_t v42 = *((void *)v41 + 1);
  if (!v40)
  {
    swift_bridgeObjectRetain();
    sub_1AD898C98((uint64_t)v13);
    if (!v42) {
      goto LABEL_44;
    }
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  if (!v42)
  {
LABEL_42:
    sub_1AD898C98((uint64_t)v13);
    goto LABEL_43;
  }
  if (*(void *)v39 == *(void *)v41 && v40 == v42)
  {
    sub_1AD898C98((uint64_t)v13);
    goto LABEL_44;
  }
  char v44 = sub_1AD9E02D0();
  sub_1AD898C98((uint64_t)v13);
  if ((v44 & 1) == 0) {
LABEL_43:
  }
    sub_1AD92BD3C();
LABEL_44:
  sub_1AD9DCCF0();
  char v35 = sub_1AD9DCD00();
  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  int v37 = v2[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime];
  v2[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime] = v35 & 1;
  if ((v35 & 1) != v37)
  {
    sub_1AD92C830();
    objc_msgSend(v2, sel_invalidateIntrinsicContentSize);
    return objc_msgSend(v2, sel_setNeedsLayout);
  }
  return result;
}

void sub_1AD92B4F0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model;
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v3 = v2;
  if (*(unsigned char *)(v1 + *(int *)(v2 + 52)) == 1 && *(void *)(v1 + *(int *)(v2 + 72) + 8))
  {
    swift_bridgeObjectRetain();
    id v4 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1AD92C638);
    uint64_t v5 = (void *)sub_1AD92E800();
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setAttributedText_, v5);
  }
  else
  {
    id v4 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1AD92C638);
    if (*(void *)(v1 + *(int *)(v3 + 72) + 8))
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = (void *)sub_1AD9DF6D0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = 0;
    }
    objc_msgSend(v4, sel_setText_, v5);
  }
}

void sub_1AD92B640()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model;
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v3 = v2;
  if (*(unsigned char *)(v1 + *(int *)(v2 + 56)) == 1 && *(void *)(v1 + *(int *)(v2 + 76) + 8))
  {
    swift_bridgeObjectRetain();
    id v4 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
    uint64_t v5 = (void *)sub_1AD92E800();
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setAttributedText_, v5);
  }
  else
  {
    id v4 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
    if (*(void *)(v1 + *(int *)(v3 + 76) + 8))
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = (void *)sub_1AD9DF6D0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = 0;
    }
    objc_msgSend(v4, sel_setText_, v5);
  }
}

void sub_1AD92B790()
{
  sub_1AD92F0A4(0, &qword_1E9A4C420, MEMORY[0x1E4F67900], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  id v4 = (char *)&v32 - v3;
  uint64_t v37 = v0;
  id v33 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1AD92C458);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v5 = (id)qword_1EB727930;
  uint64_t v6 = sub_1AD9DCA70();
  uint64_t v8 = v7;

  uint64_t v36 = sub_1AD837214(0, (unint64_t *)&unk_1E9A4AEC0);
  id v32 = self;
  id v9 = objc_msgSend(v32, sel_hk_sleepKeyColor);
  uint64_t v10 = sub_1AD9DFD00();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v34 = v10;
  uint64_t v41 = v11 + 56;
  uint64_t v42 = v12;
  ((void (*)(char *, uint64_t, uint64_t))v12)(v4, 1, 1);
  uint64_t v45 = v6;
  uint64_t v46 = v8;
  unint64_t v40 = sub_1AD85F688();
  sub_1AD9DFEE0();
  if (qword_1E9A48F20 != -1) {
    swift_once();
  }
  char v13 = (void *)qword_1E9A4C400;
  uint64_t v14 = sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  uint64_t v15 = *MEMORY[0x1E4FB28F0];
  uint64_t v16 = *MEMORY[0x1E4FB09E0];
  id v17 = v13;
  uint64_t v35 = v15;
  uint64_t v38 = v16;
  uint64_t v39 = v14;
  static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(v15, 0, 0, 0, 0, 0, 0, v16, 0);
  objc_super v18 = (void *)sub_1AD9DFCF0();
  swift_bridgeObjectRelease();
  id v19 = v33;
  objc_msgSend(v33, sel_setAttributedText_, v18);

  uint64_t v20 = v37;
  id v33 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1AD92C53C);
  uint64_t v21 = (unsigned __int8 *)(v20 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model);
  swift_beginAccess();
  int v22 = *v21;
  id v23 = (id)qword_1EB727930;
  uint64_t v24 = sub_1AD9DCA70();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();

  if (v22)
  {
    id v27 = objc_msgSend(v32, sel_hk_sleepKeyColor);
  }
  else
  {
    if (qword_1E9A48DB0 != -1) {
      swift_once();
    }
    id v28 = (id)qword_1E9A49F58;
  }
  v42(v4, 1, 1, v34);
  uint64_t v43 = v24;
  uint64_t v44 = v26;
  sub_1AD9DFEE0();
  id v29 = (id)qword_1E9A4C400;
  static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(v35, 0, 0, 0, 0, 0, 0, v38, 0);
  uint64_t v30 = (void *)sub_1AD9DFCF0();
  swift_bridgeObjectRelease();
  id v31 = v33;
  objc_msgSend(v33, sel_setAttributedText_, v30);
}

uint64_t sub_1AD92BD3C()
{
  id v1 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  uint64_t v2 = v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model;
  swift_beginAccess();
  uint64_t v3 = type metadata accessor for SleepScheduleComponentsViewModel();
  if (*(void *)(v2 + *(int *)(v3 + 64) + 8))
  {
    swift_bridgeObjectRetain();
    id v4 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v4 = 0;
  }
  objc_msgSend(v1, sel_setText_, v4);

  id v5 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  if (*(void *)(v2 + *(int *)(v3 + 68) + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  objc_msgSend(v5, sel_setText_, v6);

  if (*(void *)(v2 + *(int *)(v3 + 64) + 8)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(void *)(v2 + *(int *)(v3 + 68) + 8) == 0;
  }
  id v8 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  objc_msgSend(v8, sel_setHidden_, v7);

  id v9 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  objc_msgSend(v9, sel_setHidden_, v7);

  return sub_1AD92DFE4();
}

id sub_1AD92BEE4()
{
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1AD9E6BB0;
  *(void *)(v0 + 32) = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1AD92C458);
  *(void *)(v0 + 40) = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1AD92C638);
  *(void *)(v0 + 48) = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  sub_1AD9DF870();
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1C60]);
  sub_1AD837214(0, &qword_1E9A4C460);
  uint64_t v2 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithArrangedSubviews_, v2);

  objc_msgSend(v3, sel_setAxis_, 1);
  objc_msgSend(v3, sel_setAlignment_, 3);
  objc_msgSend(v3, sel_setDistribution_, 0);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentHuggingPriority_forAxis_, 0, v4);
  LODWORD(v5) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v5);
  return v3;
}

id sub_1AD92C0B8(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  double v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2(v2);
    BOOL v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    double v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id sub_1AD92C11C()
{
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1AD9E6BB0;
  *(void *)(v0 + 32) = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1AD92C53C);
  *(void *)(v0 + 40) = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
  *(void *)(v0 + 48) = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  sub_1AD9DF870();
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1C60]);
  sub_1AD837214(0, &qword_1E9A4C460);
  uint64_t v2 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithArrangedSubviews_, v2);

  objc_msgSend(v3, sel_setAxis_, 1);
  objc_msgSend(v3, sel_setAlignment_, 3);
  objc_msgSend(v3, sel_setDistribution_, 0);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentHuggingPriority_forAxis_, 0, v4);
  LODWORD(v5) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v5);
  return v3;
}

id sub_1AD92C2F0(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  double v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2();
    BOOL v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    double v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id sub_1AD92C350(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }
  else
  {
    if (qword_1E9A48F20 != -1) {
      swift_once();
    }
    id v5 = (void *)qword_1E9A4C400;
    id v6 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
    id v7 = v5;
    id v8 = objc_msgSend(v6, sel_init);
    objc_msgSend(v8, sel_setTextColor_, v7);
    objc_msgSend(v8, sel_setTextAlignment_, 1);

    LODWORD(v9) = 1148846080;
    objc_msgSend(v8, sel_setContentCompressionResistancePriority_forAxis_, 1, v9);
    uint64_t v10 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v8;
    id v4 = v8;

    uint64_t v3 = 0;
  }
  id v11 = v3;
  return v4;
}

id sub_1AD92C458()
{
  if (qword_1E9A48F20 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1E9A4C400;
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v2 = v0;
  id v3 = objc_msgSend(v1, sel_init);
  objc_msgSend(v3, sel_setTextColor_, v2);
  objc_msgSend(v3, sel_setTextAlignment_, 1);

  objc_msgSend(v3, sel_setNumberOfLines_, 0);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v4);
  return v3;
}

id sub_1AD92C53C()
{
  if (qword_1E9A48F20 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1E9A4C400;
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v2 = v0;
  id v3 = objc_msgSend(v1, sel_init);
  objc_msgSend(v3, sel_setTextColor_, v2);
  objc_msgSend(v3, sel_setTextAlignment_, 1);

  objc_msgSend(v3, sel_setNumberOfLines_, 0);
  objc_msgSend(v3, sel_setTextAlignment_, 1);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v4);
  return v3;
}

id sub_1AD92C638()
{
  if (qword_1E9A48F30 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1E9A4C410;
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v2 = v0;
  id v3 = objc_msgSend(v1, sel_init);
  objc_msgSend(v3, sel_setTextColor_, v2);
  objc_msgSend(v3, sel_setTextAlignment_, 1);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v4 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
  LODWORD(v5) = 1148846080;
  objc_msgSend(v4, sel_setContentCompressionResistancePriority_forAxis_, 1, v5);

  return v3;
}

id sub_1AD92C74C()
{
  if (qword_1E9A48F30 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1E9A4C410;
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v2 = v0;
  id v3 = objc_msgSend(v1, sel_init);
  objc_msgSend(v3, sel_setTextColor_, v2);
  objc_msgSend(v3, sel_setTextAlignment_, 1);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v4);
  return v3;
}

uint64_t sub_1AD92C830()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel);
  sub_1AD9E0030();
  swift_bridgeObjectRelease();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1EB727930;
  sub_1AD9DCA70();
  swift_bridgeObjectRelease();

  id v3 = (void *)sub_1AD92E800();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setAttributedText_, v3, 0xE000000000000000);

  return sub_1AD92DFE4();
}

char *sub_1AD92C9BC(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = sub_1AD9DCD10();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  id v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel] = 0;
  uint64_t v9 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel;
  uint64_t v10 = qword_1E9A48F30;
  id v11 = v1;
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_1E9A4C410;
  id v13 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v14 = v12;
  id v15 = objc_msgSend(v13, sel_init);
  objc_msgSend(v15, sel_setTextColor_, v14);
  objc_msgSend(v15, sel_setTextAlignment_, 1);

  *(void *)&v1[v9] = v15;
  uint64_t v16 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime;
  sub_1AD9DCCF0();
  char v17 = sub_1AD9DCD00();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v11[v16] = v17 & 1;
  *(void *)&v11[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewCenterConstraints] = 0;
  *(void *)&v11[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewEdgeConstraints] = 0;
  *(void *)&v11[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___timeLabelConstraints] = 0;
  uint64_t v44 = a1;
  sub_1AD898CF4(a1, (uint64_t)&v11[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model]);

  v45.receiver = v11;
  v45.super_class = ObjectType;
  objc_super v18 = (char *)objc_msgSendSuper2(&v45, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v18, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v19) = 1148846080;
  objc_msgSend(v18, sel_setContentCompressionResistancePriority_forAxis_, 1, v19);
  id v20 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView, (uint64_t (*)(uint64_t))sub_1AD92BEE4);
  objc_msgSend(v18, sel_addSubview_, v20);

  id v21 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1AD92C11C);
  objc_msgSend(v18, sel_addSubview_, v21);

  sub_1AD92D088();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v22 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E4FB28F0], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E4FB09E0], 0);
  id v23 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1AD92C458);
  objc_msgSend(v23, sel_setFont_, v22);

  id v24 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1AD92C53C);
  objc_msgSend(v24, sel_setFont_, v22);

  id v25 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  objc_msgSend(v25, sel_setFont_, v22);

  id v26 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  objc_msgSend(v26, sel_setFont_, v22);

  id v27 = sub_1AD92AE6C();
  id v28 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1AD92C638);
  objc_msgSend(v28, sel_setFont_, v27);

  id v29 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
  objc_msgSend(v29, sel_setFont_, v27);

  objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel], sel_setFont_, v27);
  sub_1AD92B790();
  sub_1AD92DFE4();

  sub_1AD92C830();
  sub_1AD92BD3C();
  sub_1AD92B4F0();
  sub_1AD92B640();
  id v30 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
  id v31 = &v18[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model];
  swift_beginAccess();
  id v32 = &qword_1E9A4C410;
  if ((*v31 & 1) == 0)
  {
    if (qword_1E9A48F38 != -1) {
      swift_once();
    }
    id v32 = &qword_1E9A4C418;
  }
  objc_msgSend(v30, sel_setTextColor_, *v32);

  sub_1AD92D4DC();
  sub_1AD92F0A4(0, (unint64_t *)&qword_1E9A49250, (uint64_t (*)(uint64_t))sub_1AD841CE0, MEMORY[0x1E4FBBE00]);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1AD9EAAE0;
  uint64_t v34 = sub_1AD9DD6D0();
  uint64_t v35 = MEMORY[0x1E4FB1138];
  *(void *)(v33 + 32) = v34;
  *(void *)(v33 + 40) = v35;
  uint64_t v36 = sub_1AD9DD560();
  uint64_t v37 = MEMORY[0x1E4FB0EE0];
  *(void *)(v33 + 48) = v36;
  *(void *)(v33 + 56) = v37;
  uint64_t v38 = sub_1AD9DD590();
  uint64_t v39 = MEMORY[0x1E4FB0F40];
  *(void *)(v33 + 64) = v38;
  *(void *)(v33 + 72) = v39;
  uint64_t v40 = sub_1AD9DD570();
  uint64_t v41 = MEMORY[0x1E4FB0EF0];
  *(void *)(v33 + 80) = v40;
  *(void *)(v33 + 88) = v41;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD841D34();
  uint64_t v42 = v18;
  sub_1AD9DFD90();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  sub_1AD898C98(v44);
  return v42;
}

void sub_1AD92D088()
{
  id v1 = v0;
  unint64_t v2 = MEMORY[0x1E4FBC860];
  uint64_t v24 = MEMORY[0x1E4FBC860];
  id v3 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1AD92C11C);
  id v4 = objc_msgSend(v3, sel_topAnchor);

  id v5 = objc_msgSend(v1, sel_topAnchor);
  id v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v5);

  id v7 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1AD92C11C);
  id v8 = objc_msgSend(v7, sel_bottomAnchor);

  id v9 = objc_msgSend(v1, sel_bottomAnchor);
  id v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v9);

  id v11 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1AD92C638);
  id v12 = objc_msgSend(v11, sel_centerYAnchor);

  id v13 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
  id v14 = objc_msgSend(v13, sel_centerYAnchor);

  id v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v14);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (!__OFADD__(v22, 3))
    {
LABEL_3:
      sub_1AD9AF02C();
      sub_1AD9DF870();
      unint64_t v2 = (unint64_t)v6;
      MEMORY[0x1B3E6B7E0]();
      if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if (!__OFADD__(*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10), 3))
  {
    goto LABEL_3;
  }
  __break(1u);
LABEL_14:
  sub_1AD9DF880();
LABEL_4:
  sub_1AD9DF8B0();
  sub_1AD9DF870();
  id v16 = v10;
  MEMORY[0x1B3E6B7E0]();
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1AD9DF880();
  }
  sub_1AD9DF8B0();
  sub_1AD9DF870();
  id v17 = v15;
  MEMORY[0x1B3E6B7E0]();
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1AD9DF880();
  }
  sub_1AD9DF8B0();
  sub_1AD9DF870();

  unint64_t v18 = sub_1AD92DDCC(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewCenterConstraints, (uint64_t (*)(uint64_t))sub_1AD92DA24);
  sub_1AD86C12C(v18);
  unint64_t v19 = sub_1AD92DDCC(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewEdgeConstraints, (uint64_t (*)(uint64_t))sub_1AD92DBFC);
  sub_1AD86C12C(v19);
  unint64_t v20 = sub_1AD92DDCC(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___timeLabelConstraints, sub_1AD92DE34);
  sub_1AD86C12C(v20);
  id v21 = self;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  id v23 = (id)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_activateConstraints_, v23);
}

void sub_1AD92D4DC()
{
  uint64_t v0 = MEMORY[0x1E4FBB1A0];
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1AD9E53A0;
  *(void *)(v1 + 32) = sub_1AD9DF710();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = 0x7065656C53;
  *(void *)(v1 + 56) = 0xE500000000000000;
  strcpy((char *)(v1 + 64), "ScheduleEditor");
  *(unsigned char *)(v1 + 79) = -18;
  sub_1AD86C2F8((uint64_t)&unk_1F0469D48);
  sub_1AD898D58(0, &qword_1EB725B60, v0, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v3 = sub_1AD9DF690();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  uint64_t v7 = v3;
  uint64_t v6 = v5;
  uint64_t v23 = v5;
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  uint64_t v9 = v3;
  uint64_t v8 = v23;
  id v10 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1AD92C458);
  uint64_t v22 = v3;
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  id v11 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setAccessibilityIdentifier_, v11, v22, v6);

  id v12 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  id v13 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setAccessibilityIdentifier_, v13, v7, v6);

  id v14 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1AD92C638);
  uint64_t v24 = v6;
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  id v15 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v15, v7, v24);

  id v16 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1AD92C53C);
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  id v17 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_setAccessibilityIdentifier_, v17, v9, v8);

  id v18 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  unint64_t v19 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setAccessibilityIdentifier_, v19, v9, v8);

  id v20 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
  uint64_t v25 = v8;
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  id v21 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setAccessibilityIdentifier_, v21, v9, v25);
}

void sub_1AD92D9A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1B3E6D270](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    sub_1AD92E9DC(a2);
  }
}

uint64_t sub_1AD92DA24(void *a1)
{
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1AD9E5930;
  id v3 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView, (uint64_t (*)(uint64_t))sub_1AD92BEE4);
  id v4 = objc_msgSend(v3, sel_trailingAnchor);

  id v5 = objc_msgSend(a1, sel_centerXAnchor);
  uint64_t v6 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime;
  if (*((unsigned char *)a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime)) {
    double v7 = 12.0;
  }
  else {
    double v7 = 3.0;
  }
  id v8 = objc_msgSend(v4, sel_constraintEqualToAnchor_constant_, v5, -v7);

  *(void *)(v2 + 32) = v8;
  id v9 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1AD92C11C);
  id v10 = objc_msgSend(v9, sel_leadingAnchor);

  id v11 = objc_msgSend(a1, sel_centerXAnchor);
  if (*((unsigned char *)a1 + v6)) {
    double v12 = 12.0;
  }
  else {
    double v12 = 3.0;
  }
  id v13 = objc_msgSend(v10, sel_constraintEqualToAnchor_constant_, v11, v12);

  *(void *)(v2 + 40) = v13;
  sub_1AD9DF870();
  return v2;
}

uint64_t sub_1AD92DBFC(void *a1)
{
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1AD9E5930;
  id v3 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView, (uint64_t (*)(uint64_t))sub_1AD92BEE4);
  id v4 = objc_msgSend(v3, sel_leadingAnchor);

  id v5 = objc_msgSend(a1, sel_leadingAnchor);
  uint64_t v6 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime;
  if (*((unsigned char *)a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime)) {
    double v7 = 12.0;
  }
  else {
    double v7 = 3.0;
  }
  id v8 = objc_msgSend(v4, sel_constraintGreaterThanOrEqualToAnchor_constant_, v5, v7);

  *(void *)(v2 + 32) = v8;
  id v9 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1AD92C11C);
  id v10 = objc_msgSend(v9, sel_trailingAnchor);

  id v11 = objc_msgSend(a1, sel_trailingAnchor);
  if (*((unsigned char *)a1 + v6)) {
    double v12 = 12.0;
  }
  else {
    double v12 = 3.0;
  }
  id v13 = objc_msgSend(v10, sel_constraintLessThanOrEqualToAnchor_constant_, v11, -v12);

  *(void *)(v2 + 40) = v13;
  sub_1AD9DF870();
  return v2;
}

uint64_t sub_1AD92DDCC(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(v2 + *a1);
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a2(v2);
    *(void *)(v2 + v3) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1AD92DE34(uint64_t a1)
{
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1AD9E5930;
  id v3 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1AD92C638);
  id v4 = objc_msgSend(v3, sel_widthAnchor);

  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel);
  objc_msgSend(v5, sel_sizeToFit);
  objc_msgSend(v5, sel_bounds);
  id v7 = objc_msgSend(v4, sel_constraintEqualToConstant_, v6);

  *(void *)(v2 + 32) = v7;
  id v8 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
  id v9 = objc_msgSend(v8, sel_widthAnchor);

  objc_msgSend(v5, sel_sizeToFit);
  objc_msgSend(v5, sel_bounds);
  id v11 = objc_msgSend(v9, sel_constraintEqualToConstant_, v10);

  *(void *)(v2 + 40) = v11;
  sub_1AD9DF870();
  return v2;
}

uint64_t sub_1AD92DFE4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel);
  objc_msgSend(v1, sel_sizeToFit);
  objc_msgSend(v1, sel_bounds);
  double v3 = v2;
  unint64_t v4 = sub_1AD92DDCC(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___timeLabelConstraints, sub_1AD92DE34);
  unint64_t v5 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1AD9E0190();
    uint64_t v6 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_10;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  for (uint64_t i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x1B3E6BFF0](i, v5);
    }
    else {
      id v9 = *(id *)(v5 + 8 * i + 32);
    }
    double v10 = v9;
    objc_msgSend(v9, sel_setConstant_, v3);
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime)) {
    double v11 = 12.0;
  }
  else {
    double v11 = 3.0;
  }
  unint64_t v12 = sub_1AD92DDCC(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewEdgeConstraints, (uint64_t (*)(uint64_t))sub_1AD92DBFC);
  unint64_t v13 = sub_1AD92DDCC(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewCenterConstraints, (uint64_t (*)(uint64_t))sub_1AD92DA24);
  sub_1AD86C12C(v13);
  if (!(v12 >> 62))
  {
    uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_15;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1AD9E0190();
  uint64_t v14 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_15:
  if (v14 >= 1)
  {
    for (uint64_t j = 0; j != v14; ++j)
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v16 = (id)MEMORY[0x1B3E6BFF0](j, v12);
      }
      else {
        id v16 = *(id *)(v12 + 8 * j + 32);
      }
      id v17 = v16;
      if (objc_msgSend(v16, sel_firstAttribute) == (id)5) {
        double v18 = v11;
      }
      else {
        double v18 = -v11;
      }
      objc_msgSend(v17, sel_setConstant_, v18);
    }
    return swift_bridgeObjectRelease_n();
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Void __swiftcall SleepScheduleComponentsHeader.tintColorDidChange()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_tintColorDidChange);
  sub_1AD92B790();
}

id SleepScheduleComponentsHeader.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleComponentsHeader.init(frame:)()
{
}

id SleepScheduleComponentsHeader.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD92E5A0()
{
  return type metadata accessor for SleepScheduleComponentsHeader();
}

uint64_t type metadata accessor for SleepScheduleComponentsHeader()
{
  uint64_t result = qword_1EB725F50;
  if (!qword_1EB725F50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD92E5F4()
{
  uint64_t result = type metadata accessor for SleepScheduleComponentsViewModel();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SleepScheduleComponentsHeader(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepScheduleComponentsHeader);
}

void (*sub_1AD92E6D0(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1AD92E780(v6, a2, a3);
  return sub_1AD92E738;
}

void sub_1AD92E738(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1AD92E780(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  double v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1B3E6BFF0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)double v3 = v4;
    return destroy for SleepOnboardingContext;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD92E800()
{
  sub_1AD92F0A4(0, &qword_1E9A4C420, MEMORY[0x1E4F67900], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v0 - 8, v1);
  double v3 = (char *)&v10 - v2;
  sub_1AD837214(0, (unint64_t *)&unk_1E9A4AEC0);
  if (qword_1E9A48F28 != -1) {
    swift_once();
  }
  id v4 = (void *)qword_1E9A4C408;
  uint64_t v5 = sub_1AD9DFD00();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  uint64_t v6 = qword_1E9A48F30;
  id v7 = v4;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  id v8 = (id)qword_1E9A4C410;
  sub_1AD92AE6C();
  return sub_1AD9DFCF0();
}

void sub_1AD92E9DC(void *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(v1, sel_traitCollection);
  id v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

  if (!a1)
  {

    goto LABEL_12;
  }
  id v6 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  uint64_t v7 = sub_1AD9DF710();
  uint64_t v9 = v8;
  if (v7 == sub_1AD9DF710() && v9 == v10)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      goto LABEL_12;
    }
  }
  id v13 = objc_msgSend(v2, sel_traitCollection);
  id v14 = objc_msgSend(v13, sel_legibilityWeight);

  if (v14 != objc_msgSend(a1, sel_legibilityWeight))
  {
LABEL_12:
    sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
    id v16 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E4FB28F0], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E4FB09E0], 0);
    id v17 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1AD92C458);
    objc_msgSend(v17, sel_setFont_, v16);

    id v18 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1AD92C53C);
    objc_msgSend(v18, sel_setFont_, v16);

    id v19 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
    objc_msgSend(v19, sel_setFont_, v16);

    id v20 = sub_1AD92C350(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
    objc_msgSend(v20, sel_setFont_, v16);

    id v21 = sub_1AD92AE6C();
    id v22 = sub_1AD92C0B8(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1AD92C638);
    objc_msgSend(v22, sel_setFont_, v21);

    id v23 = sub_1AD92C2F0(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1AD92C74C);
    objc_msgSend(v23, sel_setFont_, v21);

    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel], sel_setFont_, v21);
    sub_1AD92B790();
    sub_1AD92DFE4();

    char v15 = 1;
    goto LABEL_13;
  }
  char v15 = 0;
LABEL_13:
  id v24 = objc_msgSend(v2, sel_traitCollection);
  unsigned int v25 = objc_msgSend(v24, sel_hasDifferentColorAppearanceComparedToTraitCollection_, a1);

  if ((v15 & 1) == 0 && v25) {
    sub_1AD92B790();
  }
  id v26 = objc_msgSend(v2, sel_traitCollection);
  id v27 = objc_msgSend(v26, sel_layoutDirection);

  if (!a1 || v27 != objc_msgSend(a1, sel_layoutDirection))
  {
    sub_1AD92B4F0();
    sub_1AD92B640();
  }
}

void sub_1AD92EDB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AD9DCD10();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel] = 0;
  uint64_t v7 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel;
  if (qword_1E9A48F30 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_1E9A4C410;
  id v9 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v10 = v8;
  id v11 = objc_msgSend(v9, sel_init);
  objc_msgSend(v11, sel_setTextColor_, v10);
  objc_msgSend(v11, sel_setTextAlignment_, 1);

  *(void *)&v1[v7] = v11;
  uint64_t v12 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime;
  sub_1AD9DCCF0();
  LOBYTE(v11) = sub_1AD9DCD00();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v1[v12] = v11 & 1;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewCenterConstraints] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewEdgeConstraints] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___timeLabelConstraints] = 0;

  sub_1AD9E0140();
  __break(1u);
}

uint64_t sub_1AD92EFF8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD92F030(uint64_t a1, void *a2)
{
  sub_1AD92D9A0(a1, a2, v2);
}

void sub_1AD92F038()
{
  if (!qword_1E9A4C430)
  {
    type metadata accessor for AttributeName(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4C430);
    }
  }
}

void sub_1AD92F0A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD92F108()
{
  if (!qword_1E9A4C440)
  {
    type metadata accessor for FeatureKey(255);
    sub_1AD92F1A4(&qword_1E9A496D8, type metadata accessor for FeatureKey);
    unint64_t v0 = sub_1AD9DF610();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C440);
    }
  }
}

uint64_t sub_1AD92F1A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of ScheduleActionHandling.presentAddOccurrenceViewController()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScheduleActionHandling.presentEditOccurrenceViewController(scheduleOccurrence:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

void sub_1AD92F214()
{
  qword_1E9A4C468 = 0x4046800000000000;
}

double static ScheduleOccurrenceSectionTableViewHeaderView.estimatedHeight.getter()
{
  if (qword_1E9A48F40 != -1) {
    swift_once();
  }
  return *(double *)&qword_1E9A4C468;
}

unint64_t static ScheduleOccurrenceSectionTableViewHeaderView.defaultReuseIdentifier.getter()
{
  return 0xD00000000000002CLL;
}

void sub_1AD92F298(uint64_t *a1@<X8>)
{
  id v2 = sub_1AD993D30();
  id v3 = objc_msgSend(v2, sel_text);

  if (v3)
  {
    uint64_t v4 = sub_1AD9DF710();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  *a1 = v4;
  a1[1] = v6;
}

void sub_1AD92F31C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  swift_bridgeObjectRetain();
  id v2 = sub_1AD993D30();
  if (v1)
  {
    id v3 = (id)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = 0;
  }
  objc_msgSend(v2, sel_setText_, v3);
}

uint64_t sub_1AD92F3BC()
{
  id v0 = sub_1AD993D30();
  id v1 = objc_msgSend(v0, sel_text);

  if (!v1) {
    return 0;
  }
  uint64_t v2 = sub_1AD9DF710();

  return v2;
}

void sub_1AD92F43C(uint64_t a1, uint64_t a2)
{
  id v3 = sub_1AD993D30();
  if (a2)
  {
    id v4 = (id)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v4 = 0;
  }
  objc_msgSend(v3, sel_setText_, v4);
}

void (*sub_1AD92F4D4(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = *(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI44ScheduleOccurrenceSectionTableViewHeaderView_headerView);
  id v3 = sub_1AD993D30();
  id v4 = objc_msgSend(v3, sel_text);

  if (v4)
  {
    uint64_t v5 = sub_1AD9DF710();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_1AD92F574;
}

void sub_1AD92F574(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (a2)
  {
    swift_bridgeObjectRetain();
    id v3 = sub_1AD993D30();
    id v6 = v3;
    if (v2)
    {
      id v4 = (void *)sub_1AD9DF6D0();
      swift_bridgeObjectRelease();
      id v3 = v6;
    }
    else
    {
      id v4 = 0;
    }
    objc_msgSend(v3, sel_setText_, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = sub_1AD993D30();
    id v6 = v5;
    if (v2)
    {
      id v4 = (void *)sub_1AD9DF6D0();
      swift_bridgeObjectRelease();
      id v5 = v6;
    }
    else
    {
      id v4 = 0;
    }
    objc_msgSend(v5, sel_setText_, v4);
  }
}

id ScheduleOccurrenceSectionTableViewHeaderView.__allocating_init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = 0;
  }
  id v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithReuseIdentifier_, v3);

  return v4;
}

char *ScheduleOccurrenceSectionTableViewHeaderView.init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)type metadata accessor for ScheduleOccurrenceHeaderView());
  id v5 = v2;
  id v6 = objc_msgSend(v4, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v5[OBJC_IVAR____TtC13SleepHealthUI44ScheduleOccurrenceSectionTableViewHeaderView_headerView] = v6;

  if (a2)
  {
    uint64_t v7 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  v35.receiver = v5;
  v35.super_class = (Class)type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  id v8 = objc_msgSendSuper2(&v35, sel_initWithReuseIdentifier_, v7);

  uint64_t v9 = (char *)v8;
  id v10 = objc_msgSend(v9, sel_contentView);
  uint64_t v11 = OBJC_IVAR____TtC13SleepHealthUI44ScheduleOccurrenceSectionTableViewHeaderView_headerView;
  objc_msgSend(v10, sel_addSubview_, *(void *)&v9[OBJC_IVAR____TtC13SleepHealthUI44ScheduleOccurrenceSectionTableViewHeaderView_headerView]);

  id v12 = objc_msgSend(*(id *)&v9[v11], sel_topAnchor);
  id v13 = objc_msgSend(v9, sel_contentView);
  id v14 = objc_msgSend(v13, sel_topAnchor);

  id v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v14);
  LODWORD(v16) = 1148829696;
  objc_msgSend(v15, sel_setPriority_, v16);
  id v17 = self;
  sub_1AD870B1C();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1AD9E5440;
  id v19 = objc_msgSend(*(id *)&v9[v11], sel_leadingAnchor);
  id v20 = objc_msgSend(v9, sel_contentView);
  id v21 = objc_msgSend(v20, sel_leadingAnchor);

  id v22 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v21);
  *(void *)(v18 + 32) = v22;
  *(void *)(v18 + 40) = v15;
  id v23 = v15;
  id v24 = objc_msgSend(v9, sel_contentView);
  id v25 = objc_msgSend(v24, sel_trailingAnchor);

  id v26 = objc_msgSend(*(id *)&v9[v11], sel_trailingAnchor);
  id v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

  *(void *)(v18 + 48) = v27;
  id v28 = objc_msgSend(v9, sel_contentView);
  id v29 = objc_msgSend(v28, sel_bottomAnchor);

  id v30 = objc_msgSend(*(id *)&v9[v11], sel_bottomAnchor);
  id v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

  *(void *)(v18 + 56) = v31;
  sub_1AD9DF870();
  sub_1AD92FB70();
  id v32 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_activateConstraints_, v32);

  id v33 = *(id *)&v9[v11];
  objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  return v9;
}

id ScheduleOccurrenceSectionTableViewHeaderView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView()
{
  return self;
}

unint64_t sub_1AD92FB70()
{
  unint64_t result = qword_1E9A4A090;
  if (!qword_1E9A4A090)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A090);
  }
  return result;
}

uint64_t method lookup function for ScheduleOccurrenceSectionTableViewHeaderView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScheduleOccurrenceSectionTableViewHeaderView);
}

uint64_t dispatch thunk of ScheduleOccurrenceSectionTableViewHeaderView.title.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ScheduleOccurrenceSectionTableViewHeaderView.title.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ScheduleOccurrenceSectionTableViewHeaderView.title.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

void destroy for ScheduledSleepFocusToggleView(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 16);
}

void *initializeWithCopy for ScheduledSleepFocusToggleView(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = v6;
  a1[3] = v5;
  id v7 = v3;
  id v8 = v6;
  return a1;
}

uint64_t assignWithCopy for ScheduledSleepFocusToggleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  id v7 = *(void **)(a1 + 16);
  id v8 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v8;
  id v9 = v8;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ScheduledSleepFocusToggleView(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = *(void **)(a1 + 16);
  uint64_t v6 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v6;

  *(void *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduledSleepFocusToggleView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduledSleepFocusToggleView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduledSleepFocusToggleView()
{
  return &type metadata for ScheduledSleepFocusToggleView;
}

uint64_t sub_1AD92FE5C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD92FE78(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v8 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  sub_1AD9DF930();
  id v9 = a3;
  id v10 = a1;
  uint64_t v11 = sub_1AD9DF920();
  id v12 = (void *)swift_allocObject();
  uint64_t v13 = MEMORY[0x1E4FBCFD8];
  void v12[2] = v11;
  v12[3] = v13;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  id v14 = v10;
  id v15 = v9;
  uint64_t v16 = sub_1AD9DF920();
  id v17 = (void *)swift_allocObject();
  _OWORD v17[2] = v16;
  v17[3] = v13;
  v17[4] = a1;
  v17[5] = a2;
  void v17[6] = a3;
  v17[7] = a4;
  sub_1AD9DF1F0();
  sub_1AD85F688();
  return sub_1AD9DF150();
}

id sub_1AD93006C@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  if (a1)
  {
    id result = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_scheduledSleepMode);
    *a2 = (_BYTE)result;
  }
  else
  {
    type metadata accessor for SleepSettingsModel();
    sub_1AD930298(&qword_1E9A4B480, (void (*)(uint64_t))type metadata accessor for SleepSettingsModel);
    id result = (id)sub_1AD9DE080();
    __break(1u);
  }
  return result;
}

void sub_1AD930108(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (a4)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *(void **)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings];
    uint64_t v6 = a4;
    objc_msgSend(v5, sel_setScheduledSleepMode_, v4);
    sub_1AD8DA2DC();
  }
  else
  {
    type metadata accessor for SleepSettingsModel();
    sub_1AD930298(&qword_1E9A4B480, (void (*)(uint64_t))type metadata accessor for SleepSettingsModel);
    sub_1AD9DE080();
    __break(1u);
  }
}

uint64_t sub_1AD9301D4()
{
  return sub_1AD92FE78(*(void **)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), *(void *)(v0 + 24));
}

id sub_1AD9301E4@<X0>(unsigned char *a1@<X8>)
{
  return sub_1AD93006C(*(void *)(v1 + 32), a1);
}

uint64_t objectdestroyTm_7()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void sub_1AD930240(unsigned __int8 *a1)
{
  sub_1AD930108(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32));
}

uint64_t sub_1AD930250()
{
  return sub_1AD930298(&qword_1E9A4C478, (void (*)(uint64_t))sub_1AD9302E0);
}

uint64_t sub_1AD930298(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD9302E0()
{
  if (!qword_1E9A4C480)
  {
    unint64_t v0 = sub_1AD9DF160();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C480);
    }
  }
}

BOOL static MarqueeView.LoopBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 2) {
    return v3 == 2;
  }
  char v5 = ((v2 & 1) == 0) ^ v3;
  if (v3 != 2 && *(void *)a1 == *(void *)a2) {
    char v7 = v5;
  }
  else {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t MarqueeView.init(loopBehavior:speed:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a2;
  sub_1AD931C5C(0, &qword_1E9A4C488, MEMORY[0x1E4F28088], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8, v8);
  id v10 = (char *)&v22 - v9;
  uint64_t v25 = *a1;
  int v24 = *((unsigned __int8 *)a1 + 8);
  uint64_t v27 = 0;
  sub_1AD9DF040();
  uint64_t v22 = v29;
  uint64_t v23 = v28;
  uint64_t v27 = 0;
  sub_1AD9DF040();
  uint64_t v11 = v28;
  uint64_t v12 = v29;
  uint64_t v27 = 0;
  sub_1AD9DF040();
  uint64_t v13 = v28;
  uint64_t v14 = v29;
  sub_1AD930614();
  id v15 = self;
  swift_retain();
  id v16 = objc_msgSend(v15, sel_currentRunLoop);
  uint64_t v17 = sub_1AD9DFE80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 1, 1, v17);
  uint64_t v18 = sub_1AD9DFDC0();

  sub_1AD930654((uint64_t)v10);
  uint64_t v28 = v18;
  sub_1AD9DFDB0();
  sub_1AD931EF4(&qword_1E9A4C498, MEMORY[0x1E4F28000]);
  uint64_t v19 = sub_1AD9DDB40();
  swift_release();
  uint64_t result = swift_release();
  uint64_t v21 = v22;
  *(void *)a4 = v23;
  *(void *)(a4 + 8) = v21;
  *(void *)(a4 + 16) = v11;
  *(void *)(a4 + 24) = v12;
  *(void *)(a4 + 32) = v13;
  *(void *)(a4 + 40) = v14;
  *(void *)(a4 + 48) = v19;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = v25;
  *(unsigned char *)(a4 + 72) = v24;
  *(void *)(a4 + 80) = v26;
  *(void *)(a4 + 88) = a3;
  return result;
}

unint64_t sub_1AD930614()
{
  unint64_t result = qword_1E9A4C490;
  if (!qword_1E9A4C490)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4C490);
  }
  return result;
}

uint64_t sub_1AD930654(uint64_t a1)
{
  sub_1AD931C5C(0, &qword_1E9A4C488, MEMORY[0x1E4F28088], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MarqueeView.body.getter(uint64_t a1)
{
  long long v3 = v1[3];
  long long v45 = v1[2];
  long long v46 = v3;
  long long v4 = v1[5];
  long long v47 = v1[4];
  long long v48 = v4;
  long long v5 = v1[1];
  long long v43 = *v1;
  long long v44 = v5;
  uint64_t v6 = v4;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(v7 + 16) = v8;
  *(void *)(v7 + 24) = v9;
  long long v10 = v1[3];
  *(_OWORD *)(v7 + 64) = v1[2];
  *(_OWORD *)(v7 + 80) = v10;
  long long v11 = v1[5];
  *(_OWORD *)(v7 + 96) = v1[4];
  *(_OWORD *)(v7 + 112) = v11;
  long long v12 = v1[1];
  *(_OWORD *)(v7 + 32) = *v1;
  *(_OWORD *)(v7 + 48) = v12;
  sub_1AD930E3C();
  uint64_t v14 = v13;
  unint64_t v15 = sub_1AD930F1C();
  nullsub_1(v6);
  sub_1AD930FC4((uint64_t)&v43);
  swift_retain();
  sub_1AD931C5C(0, &qword_1E9A4C5D8, (uint64_t (*)(uint64_t))sub_1AD9315C4, MEMORY[0x1E4F3ECC8]);
  sub_1AD9DF050();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v8;
  *(void *)(v16 + 24) = v9;
  long long v17 = v46;
  *(_OWORD *)(v16 + 64) = v45;
  *(_OWORD *)(v16 + 80) = v17;
  long long v18 = v48;
  *(_OWORD *)(v16 + 96) = v47;
  *(_OWORD *)(v16 + 112) = v18;
  long long v19 = v44;
  *(_OWORD *)(v16 + 32) = v43;
  *(_OWORD *)(v16 + 48) = v19;
  sub_1AD930FC4((uint64_t)&v43);
  uint64_t v33 = v8;
  *(void *)&long long v34 = v14;
  *((void *)&v34 + 1) = v9;
  unint64_t v35 = v15;
  uint64_t Subviews = type metadata accessor for GetSubviews();
  sub_1AD9315C4();
  uint64_t v22 = v21;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = sub_1AD931EF4(qword_1E9A4C4C8, (void (*)(uint64_t))sub_1AD9315C4);
  sub_1AD9DEE10();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v28 = v33;
  long long v29 = v34;
  unint64_t v30 = v35;
  long long v31 = v36;
  uint64_t v32 = v37;
  uint64_t v38 = v22;
  *(void *)&long long v39 = Subviews;
  *((void *)&v39 + 1) = v24;
  uint64_t v40 = WitnessTable;
  uint64_t v25 = sub_1AD9DE030();
  uint64_t v26 = swift_getWitnessTable();
  sub_1AD90C5E8(&v28, v25, v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v33 = v38;
  long long v34 = v39;
  unint64_t v35 = v40;
  long long v36 = v41;
  uint64_t v37 = v42;
  sub_1AD90C5E8(&v33, v25, v26);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD930A50@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v34 = sub_1AD9DE550();
  uint64_t v7 = *(void *)(v34 - 8);
  v33[1] = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v34, v8);
  v33[0] = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1AD9DE540();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD930E9C();
  uint64_t v16 = v15 - 8;
  MEMORY[0x1F4188790](v15, v17);
  long long v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v38 = *a2;
  sub_1AD931C04();
  sub_1AD9DF050();
  sub_1AD9DE560();
  long long v38 = *a2;
  sub_1AD9DF050();
  uint64_t v20 = v39;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v19, v14, v10);
  *(void *)&v19[*(int *)(v16 + 60)] = v20;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v21 = v33[0];
  uint64_t v22 = v34;
  (*(void (**)(void, uint64_t, uint64_t))(v7 + 16))(v33[0], a1, v34);
  unint64_t v23 = (*(unsigned __int8 *)(v7 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v36;
  *(void *)(v24 + 16) = v35;
  *(void *)(v24 + 24) = v25;
  long long v26 = a2[3];
  *(_OWORD *)(v24 + 64) = a2[2];
  *(_OWORD *)(v24 + 80) = v26;
  long long v27 = a2[5];
  *(_OWORD *)(v24 + 96) = a2[4];
  *(_OWORD *)(v24 + 112) = v27;
  long long v28 = a2[1];
  *(_OWORD *)(v24 + 32) = *a2;
  *(_OWORD *)(v24 + 48) = v28;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v24 + v23, v21, v22);
  uint64_t v29 = v37;
  sub_1AD931E34((uint64_t)v19, v37);
  sub_1AD930E3C();
  long long v31 = (uint64_t (**)())(v29 + *(int *)(v30 + 36));
  *long long v31 = sub_1AD931DB4;
  v31[1] = (uint64_t (*)())v24;
  v31[2] = 0;
  v31[3] = 0;
  sub_1AD930FC4((uint64_t)a2);
  return sub_1AD931E98((uint64_t)v19);
}

uint64_t sub_1AD930D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD930A50(a1, (long long *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1AD930D58(uint64_t a1)
{
  return sub_1AD931F3C(a1);
}

void sub_1AD930E3C()
{
  if (!qword_1E9A4C4A0)
  {
    sub_1AD930E9C();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C4A0);
    }
  }
}

void sub_1AD930E9C()
{
  if (!qword_1E9A4C4A8)
  {
    sub_1AD9DE540();
    unint64_t v0 = sub_1AD9DF0F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C4A8);
    }
  }
}

unint64_t sub_1AD930F1C()
{
  unint64_t result = qword_1E9A4C4B0;
  if (!qword_1E9A4C4B0)
  {
    sub_1AD930E3C();
    sub_1AD931EF4(&qword_1E9A4C4B8, (void (*)(uint64_t))sub_1AD930E9C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C4B0);
  }
  return result;
}

uint64_t sub_1AD930FC4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD931038()
{
  return swift_release();
}

uint64_t objectdestroyTm_8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD93110C()
{
  return sub_1AD931038();
}

uint64_t sub_1AD931118()
{
  if (sub_1AD931294()) {
    return sub_1AD9313F8();
  }
  else {
    return sub_1AD9311CC();
  }
}

uint64_t sub_1AD9311CC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  v3[0] = *(void *)(v0 + 48);
  v3[1] = v1;
  sub_1AD931C5C(0, &qword_1E9A4C5D8, (uint64_t (*)(uint64_t))sub_1AD9315C4, MEMORY[0x1E4F3ECC8]);
  sub_1AD9DF050();
  sub_1AD9DD9E0();
  swift_release();
  sub_1AD9DFDA0();
  swift_release();
  __swift_project_boxed_opaque_existential_1Tm(v3, v3[3]);
  sub_1AD9DDA60();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
}

uint64_t sub_1AD931294()
{
  uint64_t v1 = *(void *)(v0 + 64);
  int v2 = *(unsigned __int8 *)(v0 + 72);
  sub_1AD931C04();
  sub_1AD9DF050();
  if (v4 >= 2)
  {
    if (v2 == 2) {
      return 1;
    }
    sub_1AD9DF050();
    if (v4 < v1) {
      return 1;
    }
    sub_1AD9DF050();
    if (v4 == v1)
    {
      sub_1AD9DF050();
      uint64_t result = sub_1AD9DF050();
      if (__OFSUB__(v4, 1))
      {
LABEL_13:
        __break(1u);
        return result;
      }
      if (v4 < v4 - 1) {
        return 1;
      }
    }
    sub_1AD9DF050();
    uint64_t result = sub_1AD9DF050();
    if (!__OFSUB__(v4, 1)) {
      return 0;
    }
    __break(1u);
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1AD9313F8()
{
  sub_1AD931C04();
  sub_1AD9DF050();
  uint64_t result = sub_1AD9DF050();
  if (__OFSUB__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    if (v1 >= v1 - 1)
    {
      sub_1AD9DF060();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1AD9DF050();
LABEL_6:
      sub_1AD9DF060();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t result = sub_1AD9DF050();
    if (!__OFADD__(v1, 1)) {
      goto LABEL_6;
    }
  }
  __break(1u);
  __break(1u);
  return result;
}

void sub_1AD9315C4()
{
  if (!qword_1E9A4C4C0)
  {
    sub_1AD9DFDB0();
    sub_1AD931EF4(&qword_1E9A4C498, MEMORY[0x1E4F28000]);
    unint64_t v0 = sub_1AD9DD9F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C4C0);
    }
  }
}

uint64_t sub_1AD931658()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD9316A0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD9316FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1AD931794(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_1AD931898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t sub_1AD931930(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1AD931978(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MarqueeView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1AD9319E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_1AD931A04(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  unsigned int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_1AD931A58(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)__n128 result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_1AD931AA0(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1AD931ABC(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for MarqueeView.LoopBehavior()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1AD931AFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1AD931BE4()
{
  return sub_1AD931118();
}

void sub_1AD931C04()
{
  if (!qword_1E9A4C5D0)
  {
    unint64_t v0 = sub_1AD9DF080();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C5D0);
    }
  }
}

void sub_1AD931C5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD931CC0()
{
  uint64_t v1 = sub_1AD9DE550();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1AD931DB4()
{
  sub_1AD9DE550();
  return sub_1AD930D58(v0 + 32);
}

uint64_t sub_1AD931E34(uint64_t a1, uint64_t a2)
{
  sub_1AD930E9C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD931E98(uint64_t a1)
{
  sub_1AD930E9C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD931EF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD931F3C(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for GoalPickerItem()
{
  return &type metadata for GoalPickerItem;
}

uint64_t sub_1AD931FC0()
{
  return sub_1AD9DD280();
}

uint64_t sub_1AD931FF8()
{
  return sub_1AD9DF730();
}

unint64_t sub_1AD93202C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1AD93205C();
  unint64_t result = sub_1AD9320B0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AD93205C()
{
  unint64_t result = qword_1E9A4C5E8;
  if (!qword_1E9A4C5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C5E8);
  }
  return result;
}

unint64_t sub_1AD9320B0()
{
  unint64_t result = qword_1E9A4C5F0;
  if (!qword_1E9A4C5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C5F0);
  }
  return result;
}

unint64_t sub_1AD932104()
{
  unint64_t result = qword_1E9A4C5F8;
  if (!qword_1E9A4C5F8)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4C5F8);
  }
  return result;
}

void sub_1AD932140(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (void **)(*a2 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *unint64_t v3 = v2;
  id v5 = v2;
}

id sub_1AD9321A4()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

unint64_t static ScheduleOccurrenceComponentsEditTableViewCell.defaultReuseIdentifier.getter()
{
  return 0xD00000000000002DLL;
}

unint64_t static ScheduleOccurrenceComponentsEditTableViewCell.accessibilityReuseIdentifier.getter()
{
  return 0xD000000000000030;
}

BOOL sub_1AD932234()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  return *(void *)(*v1 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0;
}

void sub_1AD932294(int a1)
{
  uint64_t v3 = sub_1AD9DCD30();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  if ((((*(void *)((char *)*v16 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) == 0) ^ a1) & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E4F27B20], v3);
    sub_1AD9DCD40();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v11, v15);
    id v17 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
    sub_1AD897988(22, 0, 7, 0, (uint64_t)v15, a1 & 1);
    uint64_t v18 = *v16;
    *uint64_t v16 = v19;
  }
}

void (*sub_1AD9324A8(void *a1))(uint64_t *a1)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_1AD9DCD30();
  void v3[4] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[5] = v5;
  v3[6] = malloc(*(void *)(v5 + 64));
  uint64_t v6 = sub_1AD9DCE40();
  v3[7] = malloc(*(void *)(*(void *)(v6 - 8) + 64));
  uint64_t v7 = type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v8 = malloc(*(void *)(*(void *)(v7 - 8) + 64));
  uint64_t v9 = OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView;
  v3[8] = v8;
  v3[9] = v9;
  uint64_t v10 = (void *)(v1 + v9);
  swift_beginAccess();
  *((unsigned char *)v3 + 80) = *(void *)(*v10
                                  + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0;
  return sub_1AD9325DC;
}

void sub_1AD9325DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 72);
  uint64_t v3 = *(void *)(*a1 + 24);
  int v4 = *(unsigned __int8 *)(*a1 + 80);
  if (((v4 ^ (*(void *)(*(void *)(v3 + v2)
                         + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) == 0)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v1 + 56);
    uint64_t v5 = *(unsigned char **)(v1 + 64);
    uint64_t v8 = *(void *)(v1 + 40);
    uint64_t v7 = *(void *)(v1 + 48);
    uint64_t v9 = *(void *)(v1 + 32);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, *MEMORY[0x1E4F27B20], v9);
    sub_1AD9DCD40();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    SleepScheduleComponentsViewModel.init(gregorianCalendar:)(v6, v5);
    id v10 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
    sub_1AD897988(22, 0, 7, 0, (uint64_t)v5, v4);
    uint64_t v11 = *(void **)(v3 + v2);
    *(void *)(v3 + v2) = v12;
  }
  uint64_t v13 = *(void **)(v1 + 56);
  uint64_t v14 = *(void **)(v1 + 48);
  free(*(void **)(v1 + 64));
  free(v13);
  free(v14);
  free((void *)v1);
}

uint64_t sub_1AD93271C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  uint64_t v4 = *v3 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](v4);
  *a2 = result;
  return result;
}

uint64_t sub_1AD93279C()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1AD93281C()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  uint64_t v2 = *v1 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3E6D270](v2);
}

uint64_t sub_1AD932890()
{
  return swift_unknownObjectRelease();
}

void (*sub_1AD932914(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x78uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView;
  v3[13] = v1;
  v3[14] = v4;
  uint64_t v5 = (void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *v5 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_delegate;
  swift_beginAccess();
  v3[12] = MEMORY[0x1B3E6D270](v6);
  return sub_1AD9329C4;
}

void sub_1AD9329C4(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  free(v1);
}

id ScheduleOccurrenceComponentsEditTableViewCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ScheduleOccurrenceComponentsEditTableViewCell.apply(_:)(uint64_t a1)
{
  uint64_t v28 = sub_1AD9DC990();
  uint64_t v3 = *(void *)(v28 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v28, v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  id v10 = (char *)&v27 - v9;
  uint64_t v11 = (void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  uint64_t v12 = *v11;
  uint64_t v13 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  id v15 = v12;
  id v16 = objc_msgSend(v14, sel_bedtimeComponents);
  sub_1AD9DC8C0();

  id v17 = objc_msgSend(*(id *)(a1 + v13), sel_wakeUpComponents);
  sub_1AD9DC8C0();

  sub_1AD9DDB00();
  uint64_t v18 = v30;
  char v19 = v31;
  sub_1AD9DDB00();
  uint64_t v20 = v30;
  id v21 = objc_msgSend(*(id *)(a1 + v13), sel_alarmConfiguration);
  objc_msgSend(v21, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD8AEE54();
  swift_dynamicCast();
  id v22 = v29;
  LODWORD(v13) = objc_msgSend(v29, sel_isEnabled);

  sub_1AD895E70((uint64_t)v10, (uint64_t)v7, v18, v19, v20, v13, *(unsigned __int8 *)(a1 + 49));
  unint64_t v23 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v24 = v7;
  uint64_t v25 = v28;
  v23(v24, v28);
  return ((uint64_t (*)(char *, uint64_t))v23)(v10, v25);
}

uint64_t sub_1AD932E0C(uint64_t a1)
{
  return ScheduleOccurrenceComponentsEditTableViewCell.apply(_:)(a1);
}

uint64_t type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell()
{
  return self;
}

id sub_1AD932E54@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = (void **)(*a1 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1AD932EBC@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(*v3 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0;
  return result;
}

void sub_1AD932F28(unsigned __int8 *a1)
{
}

uint64_t method lookup function for ScheduleOccurrenceComponentsEditTableViewCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScheduleOccurrenceComponentsEditTableViewCell);
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.editView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.showsComponentsHeader.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.showsComponentsHeader.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.showsComponentsHeader.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

char *sub_1AD9330DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1AD9DCD30();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v14 - 8, v15);
  id v17 = (char *)&aBlock[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (a1 == 0xD000000000000030 && a2 == 0x80000001AD9EF5C0) {
      char v18 = 0;
    }
    else {
      char v18 = sub_1AD9E02D0() ^ 1;
    }
  }
  else
  {
    char v18 = 1;
  }
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4F27B20], v5);
  char v19 = v2;
  sub_1AD9DCD40();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v13, v17);
  id v20 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
  sub_1AD897988(22, 0, 7, 0, (uint64_t)v17, v18 & 1);
  *(void *)&v19[OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView] = v21;

  if (a2)
  {
    id v22 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v22 = 0;
  }
  unint64_t v23 = (objc_class *)type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  v36.receiver = v19;
  v36.super_class = v23;
  id v24 = objc_msgSendSuper2(&v36, sel_initWithStyle_reuseIdentifier_, 0, v22);

  uint64_t v25 = (char *)v24;
  id v26 = objc_msgSend(v25, sel_contentView);
  uint64_t v27 = (id *)&v25[OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView];
  swift_beginAccess();
  objc_msgSend(v26, sel_addSubview_, *v27);

  id v28 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  aBlock[4] = sub_1AD8F05CC;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AD8F0900;
  aBlock[3] = &block_descriptor_23;
  id v29 = _Block_copy(aBlock);
  id v30 = objc_msgSend(v28, sel_initWithDynamicProvider_, v29);
  _Block_release(v29);
  swift_release();
  objc_msgSend(v25, sel_setBackgroundColor_, v30);

  id v31 = *v27;
  id v32 = objc_msgSend(v25, sel_contentView);
  UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(v32, 0, *MEMORY[0x1E4FB12A8], *(double *)(MEMORY[0x1E4FB12A8] + 8), *(double *)(MEMORY[0x1E4FB12A8] + 16), *(double *)(MEMORY[0x1E4FB12A8] + 24));

  swift_bridgeObjectRelease();
  return v25;
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

id sub_1AD93359C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepTimeDurationPickerView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SleepTimeDurationPickerView()
{
  return self;
}

uint64_t sub_1AD933644()
{
  return swift_deallocClassInstance();
}

id sub_1AD933654()
{
  _s8SentinelCMa();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  qword_1EB727930 = (uint64_t)result;
  return result;
}

id static NSBundle.sleepHealthUI.getter()
{
  return sub_1AD8B0CAC(&qword_1EB724E38, (void **)&qword_1EB727930);
}

void sub_1AD9336D0()
{
  sub_1AD9DF710();
  uint64_t v0 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(self, sel_bundleWithIdentifier_, v0);

  if (v1) {
    qword_1E9A4C618 = (uint64_t)v1;
  }
  else {
    __break(1u);
  }
}

id static NSBundle.sleepFramework.getter()
{
  return sub_1AD8B0CAC(&qword_1E9A48F50, (void **)&qword_1E9A4C618);
}

uint64_t _s8SentinelCMa()
{
  return self;
}

uint64_t sub_1AD933794(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo);
  swift_beginAccess();
  *uint64_t v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1AD933800()
{
  return swift_retain();
}

uint64_t sub_1AD93384C(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*sub_1AD9338A0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1AD9338FC(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
  swift_beginAccess();
  *uint64_t v4 = v2;
  v4[1] = v3;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_1AD933968()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1AD9339B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1AD933A18())()
{
  return j__swift_endAccess;
}

uint64_t SleepOnboardingFlowTableViewController.presentationStyle.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_presentationStyle);
}

uint64_t sub_1AD933A84()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSourceAdaptor);
  if (v1) {
    return *(unsigned __int8 *)(v1 + 50);
  }
  else {
    return 0;
  }
}

void SleepOnboardingFlowTableViewController.__allocating_init(userInfo:)()
{
}

void sub_1AD933B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSourceAdaptor);
    swift_retain();

    if (v6)
    {
      sub_1AD8CF8FC();
      swift_release();
    }
  }
}

uint64_t sub_1AD933B74(char a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  v22.receiver = v2;
  v22.super_class = (Class)type metadata accessor for SleepOnboardingFlowTableViewController();
  objc_msgSendSuper2(&v22, sel_viewWillAppear_, a1 & 1);
  uint64_t v4 = &v2[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo];
  swift_beginAccess();
  uint64_t v5 = *(void **)(*(void *)v4 + 16);
  swift_retain();
  id v6 = objc_msgSend(v5, sel_source);
  uint64_t v7 = sub_1AD9DF710();
  uint64_t v9 = v8;
  if (v7 == sub_1AD9DF710() && v9 == v10)
  {
    swift_release();

    return swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = sub_1AD9E02D0();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_1AD9DD550();
      __swift_project_value_buffer(v14, (uint64_t)qword_1EB725958);
      uint64_t v15 = sub_1AD9DD530();
      os_log_type_t v16 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v15, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        uint64_t v21 = v18;
        *(_DWORD *)id v17 = 136446210;
        uint64_t v19 = sub_1AD9E04F0();
        sub_1AD838978(v19, v20, &v21);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v15, v16, "[%{public}s] Observing sleep settings or schedule changes for dismissal", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v18, -1, -1);
        MEMORY[0x1B3E6D1A0](v17, -1, -1);
      }

      *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_sleepChangeObserver] = sub_1AD86D108();
      return swift_release();
    }
  }
  return result;
}

uint64_t type metadata accessor for SleepOnboardingFlowTableViewController()
{
  return self;
}

id sub_1AD933E8C(char a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = &v1[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo];
  swift_beginAccess();
  uint64_t v5 = *(void **)(*(void *)v4 + 16);
  swift_retain();
  id v6 = objc_msgSend(v5, sel_source);
  uint64_t v7 = sub_1AD9DF710();
  uint64_t v9 = v8;
  if (v7 == sub_1AD9DF710() && v9 == v10)
  {
    swift_release();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = sub_1AD9E02D0();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_sleepChangeObserver] = 0;
      swift_release();
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v13 = sub_1AD9DD550();
      __swift_project_value_buffer(v13, (uint64_t)qword_1EB725958);
      uint64_t v14 = sub_1AD9DD530();
      os_log_type_t v15 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v14, v15))
      {
        os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        uint64_t v22 = v17;
        *(_DWORD *)os_log_type_t v16 = 136446210;
        uint64_t v18 = sub_1AD9E04F0();
        sub_1AD838978(v18, v19, &v22);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v14, v15, "[%{public}s] Done observing sleep settings or schedule changes", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v17, -1, -1);
        MEMORY[0x1B3E6D1A0](v16, -1, -1);
      }
    }
  }
  unint64_t v20 = (objc_class *)type metadata accessor for SleepOnboardingFlowTableViewController();
  v23.receiver = v2;
  v23.super_class = v20;
  return objc_msgSendSuper2(&v23, sel_viewWillDisappear_, a1 & 1);
}

id sub_1AD93418C()
{
  uint64_t v1 = v0;
  id result = objc_msgSend(v0, sel_view);
  if (result)
  {
    uint64_t v3 = result;
    id v4 = objc_msgSend(result, sel_window);

    if (v4)
    {
      uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSourceAdaptor];
      if (v5)
      {
        if ((*(unsigned char *)(v5 + 49) & 1) == 0)
        {
          swift_retain();
          sub_1AD8CF8FC();
          swift_release();
        }
      }
    }
    v6.receiver = v1;
    v6.super_class = (Class)type metadata accessor for SleepOnboardingFlowTableViewController();
    return objc_msgSendSuper2(&v6, sel_viewDidLayoutSubviews);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SleepOnboardingFlowTableViewController.__allocating_init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
}

void SleepOnboardingFlowTableViewController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
}

uint64_t sub_1AD9342F0()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return swift_release();
}

id SleepOnboardingFlowTableViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepOnboardingFlowTableViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD934410()
{
  return swift_retain();
}

uint64_t sub_1AD934460()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1AD9344B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(*v2 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1AD934518())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1AD934578()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSourceAdaptor);
  if (v1) {
    return *(unsigned __int8 *)(v1 + 50);
  }
  else {
    return 0;
  }
}

void __swiftcall SleepOnboardingFlowTableViewController.tableView(_:viewForFooterInSection:)(UIView_optional *__return_ptr retstr, UITableView *_, Swift::Int viewForFooterInSection)
{
}

double SleepOnboardingFlowTableViewController.tableView(_:heightForHeaderInSection:)(void *a1, uint64_t a2)
{
  return sub_1AD93462C(a1, a2, MEMORY[0x1E4F66750]);
}

double SleepOnboardingFlowTableViewController.tableView(_:heightForFooterInSection:)(void *a1, uint64_t a2)
{
  return sub_1AD93462C(a1, a2, MEMORY[0x1E4F66748]);
}

double sub_1AD93462C(void *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = v3;
  id v35 = a1;
  sub_1AD934DD8();
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AD9DFB00();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v33 = v11;
  uint64_t v34 = v12;
  MEMORY[0x1F4188790](v11, v13);
  os_log_type_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1AD9DFB30();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v18);
  unint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_1AD9DCF10();
  uint64_t v21 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36, v22);
  id v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1B3E68E90](0, a2);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v20, *a3, v16);
  sub_1AD9DFB20();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  long long v37 = *(_OWORD *)(v5 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSource);
  long long v40 = v37;
  sub_1AD8BFA98(0, &qword_1E9A4D950);
  sub_1AD8BFA98(0, &qword_1E9A4C660);
  swift_unknownObjectRetain();
  if (swift_dynamicCast())
  {
    sub_1AD843F30(v38, (uint64_t)v41);
    __swift_project_boxed_opaque_existential_1Tm(v41, v41[3]);
    sub_1AD9DD450();
    swift_bridgeObjectRelease();
    sub_1AD8BFA98(0, (unint64_t *)&qword_1E9A4A3C0);
    uint64_t v25 = v33;
    char v26 = swift_dynamicCast();
    uint64_t v27 = v34;
    id v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
    uint64_t v29 = v36;
    if (v26)
    {
      v28(v10, 0, 1, v25);
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v15, v10, v25);
      sub_1AD9DFAE0();
      double v31 = v30;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v25);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v29);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
      return v31;
    }
    v28(v10, 1, 1, v25);
    sub_1AD934E8C((uint64_t)v10);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
  }
  else
  {
    uint64_t v39 = 0;
    memset(v38, 0, sizeof(v38));
    swift_bridgeObjectRelease();
    sub_1AD934EE8((uint64_t)v38, (unint64_t *)&qword_1E9A4B110, &qword_1E9A4C660);
    uint64_t v29 = v36;
  }
  if (objc_msgSend(v35, sel_style)) {
    double v31 = *MEMORY[0x1E4FB2F28];
  }
  else {
    double v31 = 0.0;
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v29);
  return v31;
}

void SleepOnboardingFlowTableViewController.tableView(_:didSelectRowAt:)(void *a1)
{
  objc_super v2 = (void *)sub_1AD9DCED0();
  id v3 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, v2);

  if (!v3
    || (v9[0]  = v3,
        sub_1AD837214(0, (unint64_t *)&unk_1E9A49700),
        sub_1AD8BFA98(0, (unint64_t *)&unk_1E9A4C670),
        (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v8 = 0;
    long long v6 = 0u;
    long long v7 = 0u;
    goto LABEL_6;
  }
  if (!*((void *)&v7 + 1))
  {
LABEL_6:
    sub_1AD934EE8((uint64_t)&v6, &qword_1E9A4C668, (unint64_t *)&unk_1E9A4C670);
    goto LABEL_7;
  }
  sub_1AD843F30(&v6, (uint64_t)v9);
  __swift_project_boxed_opaque_existential_1Tm(v9, v9[3]);
  sub_1AD841030((uint64_t)v9, (uint64_t)&v6);
  sub_1AD837214(0, &qword_1E9A4C460);
  swift_dynamicCast();
  sub_1AD9DD300();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
LABEL_7:
  id v4 = (void *)sub_1AD9DCED0();
  objc_msgSend(a1, sel_deselectRowAtIndexPath_animated_, v4, 1);
}

void sub_1AD934DD8()
{
  if (!qword_1E9A4C648)
  {
    sub_1AD9DFB00();
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C648);
    }
  }
}

void sub_1AD934E30(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1AD8BFA98(255, a3);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD934E8C(uint64_t a1)
{
  sub_1AD934DD8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD934EE8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_1AD934E30(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1AD934F44@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = (void *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo);
  swift_beginAccess();
  *a2  = *v3;
  return swift_retain();
}

uint64_t sub_1AD934FA0@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
  swift_beginAccess();
  *a2  = *v3;
  return swift_unknownObjectRetain();
}

uint64_t method lookup function for SleepOnboardingFlowTableViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepOnboardingFlowTableViewController);
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.userInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.userInfo.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.userInfo.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.isAnimating.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.__allocating_init(userInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t HKSPSleepScheduleRange.conflict(bedtimeComponents:wakeUpComponents:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AD935200() & 1;
  uint64_t result = sub_1AD935434();
  uint64_t v4 = v2 | 2;
  if ((result & 1) == 0) {
    uint64_t v4 = v2;
  }
  *a1  = v4;
  return result;
}

uint64_t sub_1AD935200()
{
  uint64_t v1 = sub_1AD9DC990();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = sub_1AD935628();
  unsigned __int8 v7 = objc_msgSend(v0, sel_earliestBedtimeIsOnPreviousDay);
  if (v6)
  {
    if ((v7 & 1) == 0) {
      return 1;
    }
  }
  else if (v7)
  {
    return 0;
  }
  id v9 = objc_msgSend(v0, sel_earliestBedtimeComponents);
  sub_1AD9DC8C0();

  uint64_t v10 = sub_1AD9DC8F0();
  char v12 = v11 & 1;
  uint64_t v13 = sub_1AD9DC8F0();
  uint64_t v15 = sub_1AD9A2564(v13, v14 & 1, v10, v12);
  char v17 = v16;
  uint64_t v18 = sub_1AD9DC940();
  char v20 = v19 & 1;
  uint64_t v21 = sub_1AD9DC940();
  uint64_t v23 = sub_1AD9A2564(v21, v22 & 1, v18, v20);
  char v25 = v24;
  sub_1AD935714();
  if (v17) {
    goto LABEL_8;
  }
  if (v15 == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    return 1;
  }
  if (v15)
  {
    if (v15 != -1)
    {
LABEL_20:
      uint64_t result = sub_1AD9E02C0();
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  else
  {
LABEL_8:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    if ((v25 & 1) == 0 || (v17 & 1) == 0)
    {
      if (v25) {
        uint64_t v26 = v15;
      }
      else {
        uint64_t v26 = v23;
      }
      unint64_t v27 = v26 + 1;
      if (v27 < 3) {
        return (6u >> (v27 & 7)) & 1;
      }
      goto LABEL_20;
    }
  }
  return 0;
}

uint64_t sub_1AD935434()
{
  uint64_t v1 = sub_1AD9DC990();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(v0, sel_latestWakeUpComponents);
  sub_1AD9DC8C0();

  uint64_t v7 = sub_1AD9DC8F0();
  char v9 = v8 & 1;
  uint64_t v10 = sub_1AD9DC8F0();
  uint64_t v12 = sub_1AD9A2564(v10, v11 & 1, v7, v9);
  char v14 = v13;
  uint64_t v15 = sub_1AD9DC940();
  char v17 = v16 & 1;
  uint64_t v18 = sub_1AD9DC940();
  uint64_t v20 = sub_1AD9A2564(v18, v19 & 1, v15, v17);
  char v22 = v21;
  sub_1AD935714();
  if (v14) {
    goto LABEL_4;
  }
  if (v12 == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    return 1;
  }
  if (v12)
  {
    if (v12 != -1)
    {
LABEL_16:
      uint64_t result = sub_1AD9E02C0();
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  else
  {
LABEL_4:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    if ((v22 & 1) == 0 || (v14 & 1) == 0)
    {
      if (v22) {
        uint64_t v23 = v12;
      }
      else {
        uint64_t v23 = v20;
      }
      unint64_t v24 = v23 + 1;
      if (v24 < 3) {
        return (6u >> (v24 & 7)) & 1;
      }
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t sub_1AD935628()
{
  uint64_t v0 = sub_1AD9DC8F0();
  char v2 = v1 & 1;
  uint64_t v3 = sub_1AD9DC8F0();
  uint64_t v5 = sub_1AD9A2564(v3, v4 & 1, v0, v2);
  char v7 = v6;
  uint64_t v8 = sub_1AD9DC940();
  char v10 = v9 & 1;
  uint64_t v11 = sub_1AD9DC940();
  uint64_t v13 = sub_1AD9A2564(v11, v12 & 1, v8, v10);
  char v15 = v14;
  sub_1AD935714();
  if (v7) {
    goto LABEL_6;
  }
  if (v5 == -1 || v5 == 1)
  {
    uint64_t v13 = v5;
LABEL_7:
    if ((unint64_t)(v13 + 1) < 3) {
      return (((_BYTE)v13 + 1) & 7) == 2;
    }
    goto LABEL_10;
  }
  if (!v5)
  {
LABEL_6:
    if (v15) {
      return 0;
    }
    goto LABEL_7;
  }
LABEL_10:
  uint64_t result = sub_1AD9E02C0();
  __break(1u);
  return result;
}

void sub_1AD935714()
{
  if (!qword_1E9A4C6E0)
  {
    type metadata accessor for ComparisonResult(255);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C6E0);
    }
  }
}

uint64_t SleepScheduleComponentsViewModel.includeDayLabelsInHeader.setter(char a1)
{
  *(unsigned char *)(v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32))  = a1;
  return sub_1AD936990();
}

uint64_t type metadata accessor for SleepScheduleComponentsViewModel()
{
  uint64_t result = qword_1EB725F60;
  if (!qword_1EB725F60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void SleepScheduleComponentsViewModel.validScheduleRange.setter(void *a1)
{
  sub_1AD9387F4(a1);
}

uint64_t SleepScheduleComponentsViewModel.wakeUpComponents.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 44);
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v3, a1, v4);
  sub_1AD936990();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, v4);
}

uint64_t SleepScheduleComponentsViewModel.roundedBedtimeComponents.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v28 - v6;
  uint64_t v8 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v9 = v1 + v8[9];
  uint64_t v10 = sub_1AD9DC990();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v9, a1, v10);
  uint64_t v12 = *(void *)(v1 + v8[7]);
  uint64_t v29 = v10;
  uint64_t v30 = a1;
  if (!v12)
  {
    *(void *)(v2 + v8[15])  = 0;
LABEL_9:
    char v16 = 0;
    BOOL v17 = 0;
    goto LABEL_10;
  }
  char v13 = sub_1AD935200();
  char v14 = sub_1AD935434();
  if (v14) {
    uint64_t v15 = v13 & 1 | 2;
  }
  else {
    uint64_t v15 = v13 & 1;
  }
  *(void *)(v2 + v8[15])  = v15;
  char v16 = v15 & 1;
  BOOL v17 = (v15 & 1) == 0;
  if ((v15 & 1) == 0 && (v14 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  *(unsigned char *)(v2 + v8[13])  = v16;
  *(unsigned char *)(v2 + v8[14])  = v17;
  sub_1AD9DCDC0();
  uint64_t v18 = sub_1AD9385F8((uint64_t)v7, v2);
  uint64_t v20 = v19;
  char v21 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD939D94((uint64_t)v7, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  char v22 = (uint64_t *)(v2 + v8[18]);
  swift_bridgeObjectRelease();
  *char v22 = v18;
  v22[1]  = v20;
  sub_1AD9DCDC0();
  uint64_t v23 = sub_1AD9385F8((uint64_t)v7, v2);
  uint64_t v25 = v24;
  sub_1AD939D94((uint64_t)v7, &qword_1EB724D70, v21);
  uint64_t v26 = (uint64_t *)(v2 + v8[19]);
  swift_bridgeObjectRelease();
  *uint64_t v26 = v23;
  v26[1]  = v25;
  sub_1AD936990();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v30, v29);
}

uint64_t SleepScheduleComponentsViewModel.roundedWakeUpComponents.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v28 - v6;
  uint64_t v8 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v9 = v1 + v8[10];
  uint64_t v10 = sub_1AD9DC990();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v9, a1, v10);
  uint64_t v12 = *(void *)(v1 + v8[7]);
  uint64_t v29 = v10;
  uint64_t v30 = a1;
  uint64_t v28 = v9;
  if (!v12)
  {
    *(void *)(v2 + v8[15])  = 0;
LABEL_9:
    char v16 = 0;
    BOOL v17 = 0;
    goto LABEL_10;
  }
  char v13 = sub_1AD935200();
  char v14 = sub_1AD935434();
  if (v14) {
    uint64_t v15 = v13 & 1 | 2;
  }
  else {
    uint64_t v15 = v13 & 1;
  }
  *(void *)(v2 + v8[15])  = v15;
  char v16 = v15 & 1;
  BOOL v17 = (v15 & 1) == 0;
  if ((v15 & 1) == 0 && (v14 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  *(unsigned char *)(v2 + v8[13])  = v16;
  *(unsigned char *)(v2 + v8[14])  = v17;
  sub_1AD9DCDC0();
  uint64_t v18 = sub_1AD9385F8((uint64_t)v7, v2);
  uint64_t v20 = v19;
  char v21 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD939D94((uint64_t)v7, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  char v22 = (uint64_t *)(v2 + v8[18]);
  swift_bridgeObjectRelease();
  *char v22 = v18;
  v22[1]  = v20;
  sub_1AD9DCDC0();
  uint64_t v23 = sub_1AD9385F8((uint64_t)v7, v2);
  uint64_t v25 = v24;
  sub_1AD939D94((uint64_t)v7, &qword_1EB724D70, v21);
  uint64_t v26 = (uint64_t *)(v2 + v8[19]);
  swift_bridgeObjectRelease();
  *uint64_t v26 = v23;
  v26[1]  = v25;
  sub_1AD936990();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v30, v29);
}

uint64_t SleepScheduleComponentsViewModel.init(gregorianCalendar:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v87 = a1;
  uint64_t v79 = sub_1AD9DCC70();
  uint64_t v88 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79, v3);
  char v83 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v7 = MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v81 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  char v82 = (char *)&v72 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  uint64_t v78 = (char *)&v72 - v14;
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v85 = (uint64_t)&v72 - v16;
  sub_1AD939D40(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68]);
  MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v20 = (char *)&v72 - v19;
  sub_1AD939D40(0, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v21 - 8, v22);
  uint64_t v24 = (char *)&v72 - v23;
  *a2  = 1;
  uint64_t v25 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v26 = v25[6];
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
  objc_msgSend(v27, sel_setDateStyle_, 0);
  objc_msgSend(v27, sel_setTimeStyle_, 1);
  uint64_t v80 = v26;
  *(void *)&a2[v26]  = v27;
  *(void *)&a2[v25[7]]  = 0;
  a2[v25[8]]  = 0;
  uint64_t v76 = &a2[v25[9]];
  uint64_t v89 = sub_1AD9DCE40();
  uint64_t v86 = *(void *)(v89 - 8);
  char v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
  v84(v24, 1, 1, v89);
  uint64_t v28 = sub_1AD9DCEB0();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  uint64_t v30 = v29 + 56;
  v75(v20, 1, 1, v28);
  uint64_t v74 = v30;
  uint64_t v73 = v24;
  sub_1AD9DC970();
  double v31 = &a2[v25[10]];
  id v32 = v24;
  uint64_t v33 = v89;
  v84(v32, 1, 1, v89);
  uint64_t v34 = v20;
  id v35 = v20;
  uint64_t v36 = v75;
  v75(v34, 1, 1, v28);
  uint64_t v77 = v31;
  long long v37 = v73;
  sub_1AD9DC970();
  v84(v37, 1, 1, v33);
  v36(v35, 1, 1, v28);
  sub_1AD9DC970();
  uint64_t v38 = v25[12];
  *(void *)&a2[v38]  = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RelativeWeekdayFormatter()), sel_init);
  uint64_t v39 = v25[13];
  a2[v39]  = 0;
  uint64_t v40 = v25[14];
  a2[v40]  = 0;
  uint64_t v41 = v25[15];
  *(void *)&a2[v41]  = 0;
  uint64_t v42 = &a2[v25[16]];
  void *v42 = 0;
  v42[1]  = 0;
  long long v43 = &a2[v25[17]];
  *long long v43 = 0;
  v43[1]  = 0;
  long long v44 = (uint64_t *)&a2[v25[18]];
  *long long v44 = 0;
  v44[1]  = 0;
  long long v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t))&a2[v25[19]];
  *(void *)long long v45 = 0;
  *((void *)v45 + 1)  = 0;
  char v84 = v45;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v86 + 16))(&a2[v25[5]], v87, v89);
  *(void *)&a2[v41]  = 0;
  a2[v39]  = 0;
  uint64_t v46 = (uint64_t)v78;
  uint64_t v47 = v79;
  a2[v40]  = 0;
  sub_1AD936990();
  uint64_t v48 = v85;
  sub_1AD9DCDC0();
  sub_1AD9388C0(v48, v46);
  uint64_t v49 = *(unsigned char **)(v88 + 48);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v49)(v46, 1, v47) != 1)
  {
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 32);
    uint64_t v76 = v49;
    uint64_t v53 = v83;
    v52(v83, v46, v47);
    id v54 = *(id *)&a2[v80];
    uint64_t v55 = (void *)sub_1AD9DCBB0();
    uint64_t v56 = v47;
    id v57 = objc_msgSend(v54, sel_stringFromDate_, v55);

    uint64_t v50 = sub_1AD9DF710();
    uint64_t v51 = v58;

    uint64_t v47 = v56;
    uint64_t v59 = v53;
    uint64_t v49 = v76;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v59, v56);
  }
  sub_1AD939D94(v85, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  swift_bridgeObjectRelease();
  *long long v44 = v50;
  v44[1]  = v51;
  uint64_t v60 = (uint64_t)v82;
  sub_1AD9DCDC0();
  uint64_t v61 = v81;
  sub_1AD9388C0(v60, v81);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v49)(v61, 1, v47) == 1)
  {
    uint64_t v62 = 0;
    uint64_t v63 = 0;
  }
  else
  {
    uint64_t v64 = v88;
    int64_t v65 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v83, v61, v47);
    id v66 = *(id *)&a2[v80];
    BOOL v67 = (void *)sub_1AD9DCBB0();
    id v68 = objc_msgSend(v66, sel_stringFromDate_, v67);

    uint64_t v62 = sub_1AD9DF710();
    uint64_t v63 = v69;

    (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v47);
  }
  sub_1AD939D94(v60, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v70 = (uint64_t *)v84;
  swift_bridgeObjectRelease();
  *uint64_t v70 = v62;
  v70[1]  = v63;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8))(v87, v89);
}

uint64_t SleepScheduleComponentsViewModel.roundedBedtimeDate.getter()
{
  return sub_1AD9DCDC0();
}

uint64_t SleepScheduleComponentsViewModel.roundedWakeUpDate.getter()
{
  return sub_1AD9DCDC0();
}

uint64_t SleepScheduleComponentsViewModel.alarmEnabled.getter()
{
  return *v0;
}

uint64_t SleepScheduleComponentsViewModel.alarmEnabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*SleepScheduleComponentsViewModel.alarmEnabled.modify())()
{
  return nullsub_1;
}

uint64_t SleepScheduleComponentsViewModel.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 20);
  uint64_t v4 = sub_1AD9DCE40();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t sub_1AD9367B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DCE40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v9 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(a2 + *(int *)(v9 + 20), v8, v4);
  sub_1AD936990();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t SleepScheduleComponentsViewModel.gregorianCalendar.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 20);
  uint64_t v4 = sub_1AD9DCE40();
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v3, a1, v4);
  sub_1AD936990();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, v4);
}

uint64_t sub_1AD936990()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AD9DC990();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v9 = MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)&v50 - v13;
  *(void *)&long long v54 = sub_1AD9DCC70();
  uint64_t v15 = *(void *)(v54 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v54, v16);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v20);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v23 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v24 = v23;
  if (*(unsigned char *)(v1 + v23[8]) != 1)
  {
    uint64_t v28 = (void *)(v1 + v23[17]);
    swift_bridgeObjectRelease();
    void *v28 = 0;
    v28[1]  = 0;
    uint64_t v29 = (void *)(v1 + v24[16]);
    uint64_t result = swift_bridgeObjectRelease();
    void *v29 = 0;
    v29[1]  = 0;
    return result;
  }
  uint64_t v51 = v19;
  uint64_t v52 = v22;
  uint64_t v53 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + v23[11], v2);
  sub_1AD9DC8F0();
  sub_1AD9DC900();
  sub_1AD9DC940();
  sub_1AD9DC950();
  uint64_t v25 = v53;
  sub_1AD9DCDC0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v27 = v54;
  if (v26(v14, 1, v54) == 1)
  {
    uint64_t v11 = v14;
LABEL_7:
    sub_1AD939D94((uint64_t)v11, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    id v32 = (_OWORD *)(v1 + v24[17]);
    swift_bridgeObjectRelease();
    long long v54 = xmmword_1AD9EAEC0;
    *id v32 = xmmword_1AD9EAEC0;
    uint64_t v33 = (long long *)(v1 + v24[16]);
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v33 = v54;
    return result;
  }
  double v31 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v31(v52, v14, v27);
  sub_1AD937EAC((uint64_t)v11);
  if (v26(v11, 1, v27) == 1)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v27);
    goto LABEL_7;
  }
  uint64_t v34 = v51;
  v31(v51, v11, v27);
  id v35 = *(void **)(v1 + v24[12]);
  uint64_t v36 = v52;
  long long v37 = (void *)sub_1AD9DCBB0();
  id v38 = objc_msgSend(v35, sel_stringFromDate_, v37);

  uint64_t v39 = sub_1AD9DF710();
  uint64_t v41 = v40;

  uint64_t v42 = (uint64_t *)(v1 + v24[17]);
  swift_bridgeObjectRelease();
  uint64_t *v42 = v39;
  v42[1]  = v41;
  long long v43 = (void *)sub_1AD9DCBB0();
  id v44 = objc_msgSend(v35, sel_stringFromDate_, v43);

  uint64_t v45 = sub_1AD9DF710();
  uint64_t v47 = v46;

  uint64_t v48 = *(void (**)(char *, uint64_t))(v53 + 8);
  v48(v34, v27);
  v48(v36, v27);
  uint64_t v49 = (uint64_t *)(v1 + v24[16]);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t *v49 = v45;
  v49[1]  = v47;
  return result;
}

uint64_t (*SleepScheduleComponentsViewModel.gregorianCalendar.modify(void *a1))()
{
  *a1  = v1;
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1AD939DF0;
}

id SleepScheduleComponentsViewModel.timeFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 24));
  return v1;
}

void SleepScheduleComponentsViewModel.timeFormatter.setter(void *a1)
{
  sub_1AD938940(a1);
}

void (*SleepScheduleComponentsViewModel.timeFormatter.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1  = v3;
  v3[2]  = v1;
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  v3[3]  = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  void v3[4] = type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1AD936F98;
}

void sub_1AD936F98(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = v2[4];
    uint64_t v5 = v2[2];
    sub_1AD9DCDC0();
    uint64_t v6 = sub_1AD9385F8((uint64_t)v3, v5);
    uint64_t v8 = v7;
    uint64_t v9 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
    sub_1AD939D94((uint64_t)v3, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    uint64_t v10 = (uint64_t *)(v5 + *(int *)(v4 + 72));
    swift_bridgeObjectRelease();
    *uint64_t v10 = v6;
    v10[1]  = v8;
    sub_1AD9DCDC0();
    uint64_t v11 = sub_1AD9385F8((uint64_t)v3, v5);
    uint64_t v13 = v12;
    sub_1AD939D94((uint64_t)v3, &qword_1EB724D70, v9);
    uint64_t v14 = (uint64_t *)(v5 + *(int *)(v4 + 76));
    swift_bridgeObjectRelease();
    *uint64_t v14 = v11;
    v14[1]  = v13;
  }
  free(v3);
  free(v2);
}

void *SleepScheduleComponentsViewModel.validScheduleRange.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 28));
  id v2 = v1;
  return v1;
}

uint64_t (*SleepScheduleComponentsViewModel.validScheduleRange.modify(uint64_t a1))(uint64_t result, char a2)
{
  *(void *)a1  = v1;
  uint64_t v3 = type metadata accessor for SleepScheduleComponentsViewModel();
  *(void *)(a1 + 8)  = v3;
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(v3 + 28);
  return sub_1AD937160;
}

uint64_t sub_1AD937160(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(int **)(result + 8);
    if (*(void *)(*(void *)result + *(int *)(result + 16)))
    {
      uint64_t v4 = sub_1AD935200() & 1;
      uint64_t result = sub_1AD935434();
      uint64_t v5 = v4 | 2;
      if ((result & 1) == 0) {
        uint64_t v5 = v4;
      }
      *(void *)(v2 + v3[15])  = v5;
      uint64_t v6 = v5 & 1;
      BOOL v7 = v6 == 0;
      if ((result & 1) != 0 || v6 != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)(v2 + v3[15])  = 0;
    }
    LOBYTE(v6)  = 0;
    BOOL v7 = 0;
LABEL_12:
    *(unsigned char *)(v2 + v3[13])  = v6;
    *(unsigned char *)(v2 + v3[14])  = v7;
  }
  return result;
}

uint64_t SleepScheduleComponentsViewModel.includeDayLabelsInHeader.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32));
}

uint64_t (*SleepScheduleComponentsViewModel.includeDayLabelsInHeader.modify(void *a1))()
{
  *a1  = v1;
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1AD939DF0;
}

uint64_t SleepScheduleComponentsViewModel.roundedBedtimeComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 36);
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t sub_1AD937300(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v9 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(a2 + *(int *)(v9 + 36), v8, v4);
  sub_1AD937828();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void (*SleepScheduleComponentsViewModel.roundedBedtimeComponents.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  v3[3]  = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for SleepScheduleComponentsViewModel();
  void v3[4] = v5;
  *((_DWORD *)v3 + 10)  = *(_DWORD *)(v5 + 36);
  return sub_1AD9374C4;
}

void sub_1AD9374C4(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = (void *)v2[3];
    goto LABEL_14;
  }
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[2];
  if (*(void *)(v5 + *(int *)(v4 + 28)))
  {
    uint64_t v6 = sub_1AD935200() & 1;
    char v7 = sub_1AD935434();
    uint64_t v8 = v6 | 2;
    if ((v7 & 1) == 0) {
      uint64_t v8 = v6;
    }
    *(void *)(v5 + *(int *)(v4 + 60))  = v8;
    uint64_t v9 = v8 & 1;
    BOOL v10 = v9 == 0;
    if ((v7 & 1) != 0 || v9 != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    *(void *)(v5 + *(int *)(v4 + 60))  = 0;
  }
  LOBYTE(v9)  = 0;
  BOOL v10 = 0;
LABEL_13:
  uint64_t v3 = (void *)v2[3];
  uint64_t v12 = (int *)v2[4];
  uint64_t v13 = v2[2];
  *(unsigned char *)(v13 + v12[13])  = v9;
  *(unsigned char *)(v13 + v12[14])  = v10;
  sub_1AD9DCDC0();
  uint64_t v14 = sub_1AD9385F8((uint64_t)v3, v13);
  uint64_t v16 = v15;
  uint64_t v17 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD939D94((uint64_t)v3, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v18 = (uint64_t *)(v13 + v12[18]);
  swift_bridgeObjectRelease();
  uint64_t *v18 = v14;
  v18[1]  = v16;
  sub_1AD9DCDC0();
  uint64_t v19 = sub_1AD9385F8((uint64_t)v3, v13);
  uint64_t v21 = v20;
  sub_1AD939D94((uint64_t)v3, &qword_1EB724D70, v17);
  uint64_t v22 = (uint64_t *)(v13 + v12[19]);
  swift_bridgeObjectRelease();
  *uint64_t v22 = v19;
  v22[1]  = v21;
  sub_1AD936990();
LABEL_14:
  free(v3);
  free(v2);
}

uint64_t SleepScheduleComponentsViewModel.roundedWakeUpComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 40);
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t sub_1AD937710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v9 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(a2 + *(int *)(v9 + 40), v8, v4);
  sub_1AD937828();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1AD937828()
{
  uint64_t v1 = v0;
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v23 - v4;
  uint64_t v6 = type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v7 = (int *)v6;
  if (!*(void *)(v0 + *(int *)(v6 + 28)))
  {
    *(void *)(v0 + *(int *)(v6 + 60))  = 0;
LABEL_9:
    char v11 = 0;
    BOOL v12 = 0;
    goto LABEL_10;
  }
  char v8 = sub_1AD935200();
  char v9 = sub_1AD935434();
  if (v9) {
    uint64_t v10 = v8 & 1 | 2;
  }
  else {
    uint64_t v10 = v8 & 1;
  }
  *(void *)(v0 + v7[15])  = v10;
  char v11 = v10 & 1;
  BOOL v12 = (v10 & 1) == 0;
  if ((v10 & 1) == 0 && (v9 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  *(unsigned char *)(v0 + v7[13])  = v11;
  *(unsigned char *)(v0 + v7[14])  = v12;
  sub_1AD9DCDC0();
  uint64_t v13 = sub_1AD9385F8((uint64_t)v5, v0);
  uint64_t v15 = v14;
  uint64_t v16 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD939D94((uint64_t)v5, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v17 = (uint64_t *)(v0 + v7[18]);
  swift_bridgeObjectRelease();
  *uint64_t v17 = v13;
  v17[1]  = v15;
  sub_1AD9DCDC0();
  uint64_t v18 = sub_1AD9385F8((uint64_t)v5, v0);
  uint64_t v20 = v19;
  sub_1AD939D94((uint64_t)v5, &qword_1EB724D70, v16);
  uint64_t v21 = (uint64_t *)(v1 + v7[19]);
  swift_bridgeObjectRelease();
  *uint64_t v21 = v18;
  v21[1]  = v20;
  return sub_1AD936990();
}

void (*SleepScheduleComponentsViewModel.roundedWakeUpComponents.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  v3[3]  = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for SleepScheduleComponentsViewModel();
  void v3[4] = v5;
  *((_DWORD *)v3 + 10)  = *(_DWORD *)(v5 + 40);
  return sub_1AD937AC8;
}

void sub_1AD937AC8(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = (void *)v2[3];
    goto LABEL_14;
  }
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[2];
  if (*(void *)(v5 + *(int *)(v4 + 28)))
  {
    uint64_t v6 = sub_1AD935200() & 1;
    char v7 = sub_1AD935434();
    uint64_t v8 = v6 | 2;
    if ((v7 & 1) == 0) {
      uint64_t v8 = v6;
    }
    *(void *)(v5 + *(int *)(v4 + 60))  = v8;
    uint64_t v9 = v8 & 1;
    BOOL v10 = v9 == 0;
    if ((v7 & 1) != 0 || v9 != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    *(void *)(v5 + *(int *)(v4 + 60))  = 0;
  }
  LOBYTE(v9)  = 0;
  BOOL v10 = 0;
LABEL_13:
  uint64_t v3 = (void *)v2[3];
  BOOL v12 = (int *)v2[4];
  uint64_t v13 = v2[2];
  *(unsigned char *)(v13 + v12[13])  = v9;
  *(unsigned char *)(v13 + v12[14])  = v10;
  sub_1AD9DCDC0();
  uint64_t v14 = sub_1AD9385F8((uint64_t)v3, v13);
  uint64_t v16 = v15;
  uint64_t v17 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD939D94((uint64_t)v3, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v18 = (uint64_t *)(v13 + v12[18]);
  swift_bridgeObjectRelease();
  uint64_t *v18 = v14;
  v18[1]  = v16;
  sub_1AD9DCDC0();
  uint64_t v19 = sub_1AD9385F8((uint64_t)v3, v13);
  uint64_t v21 = v20;
  sub_1AD939D94((uint64_t)v3, &qword_1EB724D70, v17);
  uint64_t v22 = (uint64_t *)(v13 + v12[19]);
  swift_bridgeObjectRelease();
  *uint64_t v22 = v19;
  v22[1]  = v21;
  sub_1AD936990();
LABEL_14:
  free(v3);
  free(v2);
}

uint64_t SleepScheduleComponentsViewModel.wakeUpComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 44);
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t sub_1AD937D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v9 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(a2 + *(int *)(v9 + 44), v8, v4);
  sub_1AD936990();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t (*SleepScheduleComponentsViewModel.wakeUpComponents.modify(void *a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1AD937E80;
}

uint64_t sub_1AD937E80(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_1AD936990();
  }
  return result;
}

uint64_t sub_1AD937EAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v42 = a1;
  sub_1AD939D40(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v39 = (uint64_t)&v33 - v4;
  uint64_t v5 = sub_1AD9DC990();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  id v35 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v10);
  BOOL v12 = (char *)&v33 - v11;
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = sub_1AD9DCC70();
  uint64_t v41 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v36 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v21 = v1 + v20[5];
  uint64_t v22 = v1 + v20[11];
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v34(v12, v22, v5);
  uint64_t v37 = v1;
  sub_1AD9DC8F0();
  sub_1AD9DC900();
  sub_1AD9DC940();
  sub_1AD9DC950();
  uint64_t v40 = v21;
  uint64_t v23 = v41;
  sub_1AD9DCDC0();
  uint64_t v24 = v17;
  uint64_t v38 = v6;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v12, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v16, 1, v17) == 1)
  {
    sub_1AD939D94((uint64_t)v16, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v42, 1, 1, v24);
  }
  uint64_t v33 = (void (*)(uint64_t, uint64_t))v25;
  uint64_t v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v36, v16, v17);
  uint64_t v27 = v39;
  Calendar.timeComponents(from:to:)(v37 + v20[9], v39);
  uint64_t v28 = v38;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v27, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v17);
    sub_1AD939D94(v27, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    uint64_t v24 = v17;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v42, 1, 1, v24);
  }
  uint64_t v30 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v35, v27, v5);
  v34(v12, v30, v5);
  uint64_t v31 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
  sub_1AD9A295C(v31, v30, (uint64_t)v12);
  swift_bridgeObjectRelease();
  sub_1AD9DCDD0();
  id v32 = v33;
  v33((uint64_t)v12, v5);
  v32(v30, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v17);
}

id SleepScheduleComponentsViewModel.dayLabelFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 48));
  return v1;
}

void sub_1AD93838C(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (id *)(a2 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 48));
  id v4 = v2;
  objc_storeStrong(v3, v2);
  sub_1AD936990();
}

void SleepScheduleComponentsViewModel.dayLabelFormatter.setter(void *a1)
{
  uint64_t v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  objc_storeStrong((id *)(v1 + *(int *)(v2 + 48)), a1);
  sub_1AD936990();
}

uint64_t (*SleepScheduleComponentsViewModel.dayLabelFormatter.modify(void *a1))()
{
  *a1  = v1;
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1AD939DF0;
}

uint64_t SleepScheduleComponentsViewModel.bedtimeShowsAlert.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 52));
}

uint64_t SleepScheduleComponentsViewModel.wakeUpShowsAlert.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 56));
}

uint64_t SleepScheduleComponentsViewModel.bedtimeDay.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepScheduleComponentsViewModel.wakeUpDay.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepScheduleComponentsViewModel.roundedFormattedBedtimeTime.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepScheduleComponentsViewModel.roundedFormattedWakeUpTime.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 76));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD9385E0(uint64_t a1, uint64_t a2)
{
  return sub_1AD9385F8(a1, a2);
}

uint64_t sub_1AD9385F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DCC70();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v9 - 8, v10);
  BOOL v12 = (char *)v18 - v11;
  sub_1AD9388C0(a1, (uint64_t)v18 - v11);
  uint64_t v13 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v12, v4);
    id v14 = *(id *)(a2 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 24));
    uint64_t v15 = (void *)sub_1AD9DCBB0();
    id v16 = objc_msgSend(v14, sel_stringFromDate_, v15);

    uint64_t v13 = sub_1AD9DF710();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return v13;
}

void sub_1AD9387F4(void *a1)
{
  uint64_t v3 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v4 = v3[7];
  uint64_t v5 = *(void **)(v1 + v4);
  *(void *)(v1 + v4)  = a1;
  id v6 = a1;

  if (!a1)
  {
    *(void *)(v1 + v3[15])  = 0;
LABEL_9:
    char v10 = 0;
    BOOL v11 = 0;
    goto LABEL_10;
  }
  char v7 = sub_1AD935200();
  char v8 = sub_1AD935434();
  if (v8) {
    uint64_t v9 = v7 & 1 | 2;
  }
  else {
    uint64_t v9 = v7 & 1;
  }
  *(void *)(v1 + v3[15])  = v9;
  char v10 = v9 & 1;
  BOOL v11 = (v9 & 1) == 0;
  if ((v9 & 1) == 0 && (v8 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  *(unsigned char *)(v1 + v3[13])  = v10;
  *(unsigned char *)(v1 + v3[14])  = v11;
}

uint64_t sub_1AD9388C0(uint64_t a1, uint64_t a2)
{
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD938940(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD939D40(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  char v8 = (char *)&v19 - v7;
  uint64_t v9 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  objc_storeStrong((id *)(v2 + v9[6]), a1);
  sub_1AD9DCDC0();
  uint64_t v10 = sub_1AD9385F8((uint64_t)v8, v2);
  uint64_t v12 = v11;
  sub_1AD939D94((uint64_t)v8, &qword_1EB724D70, v4);
  uint64_t v13 = (uint64_t *)(v2 + v9[18]);
  swift_bridgeObjectRelease();
  uint64_t *v13 = v10;
  v13[1]  = v12;
  sub_1AD9DCDC0();
  uint64_t v14 = sub_1AD9385F8((uint64_t)v8, v2);
  uint64_t v16 = v15;
  sub_1AD939D94((uint64_t)v8, &qword_1EB724D70, v4);
  uint64_t v17 = (uint64_t *)(v2 + v9[19]);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v17 = v14;
  v17[1]  = v16;
  return result;
}

uint64_t sub_1AD938AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 20);
  uint64_t v4 = sub_1AD9DCE40();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v3, v4);
}

id sub_1AD938B30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 24));
  *a2  = v3;
  return v3;
}

void sub_1AD938B78(id *a1)
{
  id v1 = *a1;
  sub_1AD938940(v1);
}

id sub_1AD938BC4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 28));
  *a2  = v3;
  return v3;
}

void sub_1AD938C0C(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  sub_1AD9387F4(v1);
}

uint64_t sub_1AD938C5C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = type metadata accessor for SleepScheduleComponentsViewModel();
  *a2  = *(unsigned char *)(a1 + *(int *)(result + 32));
  return result;
}

uint64_t sub_1AD938C94(char *a1, uint64_t a2)
{
  char v2 = *a1;
  *(unsigned char *)(a2 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32))  = v2;
  return sub_1AD936990();
}

uint64_t sub_1AD938CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 36);
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v3, v4);
}

uint64_t sub_1AD938D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 40);
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v3, v4);
}

uint64_t sub_1AD938DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 44);
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v3, v4);
}

id sub_1AD938E4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 48));
  *a2  = v3;
  return v3;
}

void *initializeBufferWithCopyOfBuffer for SleepScheduleComponentsViewModel(unsigned char *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v43 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v43 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1  = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    char v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1AD9DCE40();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    uint64_t v12 = a3[7];
    uint64_t v13 = *(void **)((char *)a2 + v11);
    *(void *)((char *)v4 + v11)  = v13;
    uint64_t v14 = *(void **)((char *)a2 + v12);
    *(void *)((char *)v4 + v12)  = v14;
    uint64_t v15 = a3[9];
    *((unsigned char *)v4 + a3[8])  = *((unsigned char *)a2 + a3[8]);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = sub_1AD9DC990();
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
    id v20 = v13;
    id v21 = v14;
    v19(v16, v17, v18);
    v19((char *)v4 + a3[10], (char *)a2 + a3[10], v18);
    v19((char *)v4 + a3[11], (char *)a2 + a3[11], v18);
    uint64_t v22 = a3[12];
    uint64_t v23 = a3[13];
    uint64_t v24 = *(void **)((char *)a2 + v22);
    *(void *)((char *)v4 + v22)  = v24;
    *((unsigned char *)v4 + v23)  = *((unsigned char *)a2 + v23);
    uint64_t v25 = a3[15];
    *((unsigned char *)v4 + a3[14])  = *((unsigned char *)a2 + a3[14]);
    *(void *)((char *)v4 + v25)  = *(void *)((char *)a2 + v25);
    uint64_t v26 = a3[16];
    uint64_t v27 = a3[17];
    uint64_t v28 = (void *)((char *)v4 + v26);
    uint64_t v29 = (void *)((char *)a2 + v26);
    uint64_t v30 = v29[1];
    void *v28 = *v29;
    v28[1]  = v30;
    uint64_t v31 = (void *)((char *)v4 + v27);
    id v32 = (void *)((char *)a2 + v27);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1]  = v33;
    uint64_t v34 = a3[18];
    uint64_t v35 = a3[19];
    uint64_t v36 = (void *)((char *)v4 + v34);
    uint64_t v37 = (void *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1]  = v38;
    uint64_t v39 = (void *)((char *)v4 + v35);
    uint64_t v40 = (void *)((char *)a2 + v35);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1]  = v41;
    id v42 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SleepScheduleComponentsViewModel(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = sub_1AD9DC990();
  char v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[10], v7);
  v8(a1 + a2[11], v7);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for SleepScheduleComponentsViewModel(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1  = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  char v8 = &a2[v6];
  uint64_t v9 = sub_1AD9DCE40();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)&a2[v10];
  *(void *)&a1[v10]  = v12;
  uint64_t v13 = *(void **)&a2[v11];
  *(void *)&a1[v11]  = v13;
  uint64_t v14 = a3[9];
  a1[a3[8]]  = a2[a3[8]];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_1AD9DC990();
  uint64_t v18 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 16);
  id v19 = v12;
  id v20 = v13;
  v18(v15, v16, v17);
  v18(&a1[a3[10]], &a2[a3[10]], v17);
  v18(&a1[a3[11]], &a2[a3[11]], v17);
  uint64_t v21 = a3[12];
  uint64_t v22 = a3[13];
  uint64_t v23 = *(void **)&a2[v21];
  *(void *)&a1[v21]  = v23;
  a1[v22]  = a2[v22];
  uint64_t v24 = a3[15];
  a1[a3[14]]  = a2[a3[14]];
  *(void *)&a1[v24]  = *(void *)&a2[v24];
  uint64_t v25 = a3[16];
  uint64_t v26 = a3[17];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1]  = v29;
  uint64_t v30 = &a1[v26];
  uint64_t v31 = &a2[v26];
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1]  = v32;
  uint64_t v33 = a3[18];
  uint64_t v34 = a3[19];
  uint64_t v35 = &a1[v33];
  uint64_t v36 = &a2[v33];
  uint64_t v37 = v36[1];
  void *v35 = *v36;
  v35[1]  = v37;
  uint64_t v38 = &a1[v34];
  uint64_t v39 = &a2[v34];
  uint64_t v40 = v39[1];
  *uint64_t v38 = *v39;
  v38[1]  = v40;
  id v41 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for SleepScheduleComponentsViewModel(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1  = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  char v8 = &a2[v6];
  uint64_t v9 = sub_1AD9DCE40();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)&a2[v10];
  uint64_t v12 = *(void **)&a1[v10];
  *(void *)&a1[v10]  = v11;
  id v13 = v11;

  uint64_t v14 = a3[7];
  uint64_t v15 = *(void **)&a1[v14];
  uint64_t v16 = *(void **)&a2[v14];
  *(void *)&a1[v14]  = v16;
  id v17 = v16;

  a1[a3[8]]  = a2[a3[8]];
  uint64_t v18 = a3[9];
  id v19 = &a1[v18];
  id v20 = &a2[v18];
  uint64_t v21 = sub_1AD9DC990();
  uint64_t v22 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 24);
  v22(v19, v20, v21);
  v22(&a1[a3[10]], &a2[a3[10]], v21);
  v22(&a1[a3[11]], &a2[a3[11]], v21);
  uint64_t v23 = a3[12];
  uint64_t v24 = *(void **)&a2[v23];
  uint64_t v25 = *(void **)&a1[v23];
  *(void *)&a1[v23]  = v24;
  id v26 = v24;

  a1[a3[13]]  = a2[a3[13]];
  a1[a3[14]]  = a2[a3[14]];
  *(void *)&a1[a3[15]]  = *(void *)&a2[a3[15]];
  uint64_t v27 = a3[16];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  void *v28 = *v29;
  v28[1]  = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[17];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *uint64_t v31 = *v32;
  v31[1]  = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[18];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  *uint64_t v34 = *v35;
  v34[1]  = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[19];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *uint64_t v37 = *v38;
  v37[1]  = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for SleepScheduleComponentsViewModel(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1  = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  char v8 = &a2[v6];
  uint64_t v9 = sub_1AD9DCE40();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)&a1[a3[6]]  = *(void *)&a2[a3[6]];
  *(void *)&a1[v10]  = *(void *)&a2[v10];
  uint64_t v11 = a3[9];
  a1[a3[8]]  = a2[a3[8]];
  uint64_t v12 = &a1[v11];
  id v13 = &a2[v11];
  uint64_t v14 = sub_1AD9DC990();
  uint64_t v15 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v15(&a1[a3[10]], &a2[a3[10]], v14);
  v15(&a1[a3[11]], &a2[a3[11]], v14);
  uint64_t v16 = a3[13];
  *(void *)&a1[a3[12]]  = *(void *)&a2[a3[12]];
  a1[v16]  = a2[v16];
  uint64_t v17 = a3[15];
  a1[a3[14]]  = a2[a3[14]];
  *(void *)&a1[v17]  = *(void *)&a2[v17];
  uint64_t v18 = a3[17];
  *(_OWORD *)&a1[a3[16]]  = *(_OWORD *)&a2[a3[16]];
  *(_OWORD *)&a1[v18]  = *(_OWORD *)&a2[v18];
  uint64_t v19 = a3[19];
  *(_OWORD *)&a1[a3[18]]  = *(_OWORD *)&a2[a3[18]];
  *(_OWORD *)&a1[v19]  = *(_OWORD *)&a2[v19];
  return a1;
}

unsigned char *assignWithTake for SleepScheduleComponentsViewModel(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1  = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  char v8 = &a2[v6];
  uint64_t v9 = sub_1AD9DCE40();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)&a1[v10];
  *(void *)&a1[v10]  = *(void *)&a2[v10];

  uint64_t v12 = a3[7];
  id v13 = *(void **)&a1[v12];
  *(void *)&a1[v12]  = *(void *)&a2[v12];

  uint64_t v14 = a3[9];
  a1[a3[8]]  = a2[a3[8]];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_1AD9DC990();
  uint64_t v18 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 40);
  v18(v15, v16, v17);
  v18(&a1[a3[10]], &a2[a3[10]], v17);
  v18(&a1[a3[11]], &a2[a3[11]], v17);
  uint64_t v19 = a3[12];
  id v20 = *(void **)&a1[v19];
  *(void *)&a1[v19]  = *(void *)&a2[v19];

  uint64_t v21 = a3[14];
  a1[a3[13]]  = a2[a3[13]];
  a1[v21]  = a2[v21];
  uint64_t v22 = a3[16];
  *(void *)&a1[a3[15]]  = *(void *)&a2[a3[15]];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = (uint64_t *)&a2[v22];
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1]  = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[17];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (uint64_t *)&a2[v27];
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  void *v28 = v31;
  v28[1]  = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[18];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = (uint64_t *)&a2[v32];
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1]  = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[19];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = (uint64_t *)&a2[v37];
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *uint64_t v38 = v41;
  v38[1]  = v40;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepScheduleComponentsViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD9399B0);
}

uint64_t sub_1AD9399B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1AD9DCE40();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v12 = *(void *)(a1 + a3[6]);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12)  = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v13 = sub_1AD9DC990();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a3[9];
    return v14(v16, a2, v15);
  }
}

uint64_t storeEnumTagSinglePayload for SleepScheduleComponentsViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD939AF4);
}

uint64_t sub_1AD939AF4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_1AD9DCE40();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6])  = (a2 - 1);
  }
  else
  {
    uint64_t v13 = sub_1AD9DC990();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[9];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

uint64_t sub_1AD939C24()
{
  uint64_t result = sub_1AD9DCE40();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1AD9DC990();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_1AD939D40(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD939D94(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1AD939D40(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

id WeatherPrefetchScheduler.__allocating_init(sleepStore:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return WeatherPrefetchScheduler.init(sleepStore:)(a1);
}

uint64_t WeatherPrefetchScheduler.onShouldPrefetch.getter()
{
  return swift_retain();
}

uint64_t WeatherPrefetchScheduler.onShouldCancel.getter()
{
  return swift_retain();
}

id WeatherPrefetchScheduler.init(sleepStore:)(void *a1)
{
  swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_onShouldPrefetch;
  sub_1AD8DF318();
  swift_allocObject();
  uint64_t v4 = v1;
  *(void *)&v1[v3]  = sub_1AD9DDAD0();
  uint64_t v5 = OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_onShouldCancel;
  swift_allocObject();
  *(void *)&v4[v5]  = sub_1AD9DDAD0();
  uint64_t v6 = &v4[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_lastWakeUp];
  uint64_t v7 = sub_1AD9DCC70();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer]  = 0;
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1E9A4D288);
  uint64_t v9 = sub_1AD9DD530();
  os_log_type_t v10 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v13 = sub_1AD9E04F0();
    sub_1AD838978(v13, v14, &v19);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] initializing...", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
    MEMORY[0x1B3E6D1A0](v11, -1, -1);
  }

  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore]  = a1;
  id v15 = a1;

  uint64_t v16 = (objc_class *)type metadata accessor for WeatherPrefetchScheduler();
  v20.receiver  = v4;
  v20.super_class  = v16;
  id v17 = objc_msgSendSuper2(&v20, sel_init);
  objc_msgSend(v15, sel_addObserver_, v17);

  return v17;
}

uint64_t sub_1AD93A0EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1AD9DF3D0();
  uint64_t v23 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1AD9DF400();
  uint64_t v13 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v14);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8CCDBC();
  id v17 = (void *)sub_1AD9DFCA0();
  uint64_t v18 = (void *)swift_allocObject();
  v18[2]  = a1;
  v18[3]  = a3;
  v18[4]  = a4;
  v18[5]  = a5;
  aBlock[4]  = sub_1AD93D810;
  aBlock[5]  = v18;
  aBlock[0]  = MEMORY[0x1E4F143A8];
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_1AD8D34D8;
  aBlock[3]  = &block_descriptor_29;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = a1;
  swift_retain();
  swift_release();
  sub_1AD9DF3F0();
  aBlock[0]  = MEMORY[0x1E4FBC860];
  sub_1AD93D704((unint64_t *)&qword_1E9A4AD50, MEMORY[0x1E4FBCB00]);
  sub_1AD93D81C(0, &qword_1E9A4C330, MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
  sub_1AD8CCECC();
  sub_1AD9DFF40();
  MEMORY[0x1B3E6BC50](0, v16, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v22);
}

void sub_1AD93A3E0(void *a1, void (*a2)(uint64_t))
{
  if (a1)
  {
    uint64_t v4 = self;
    id v5 = a1;
    id v6 = objc_msgSend(v4, sel_sharedBehavior);
    if (v6)
    {
      uint64_t v7 = v6;
      unsigned __int8 v8 = objc_msgSend(v6, sel_isAppleWatch);

      if (v8) {
        unsigned __int8 v9 = objc_msgSend(v5, sel_goodMorningAlertNotificationEnabled);
      }
      else {
        unsigned __int8 v9 = objc_msgSend(v5, sel_goodMorningScreenEnabled);
      }
      if (v9)
      {
        uint64_t v17 = 1;
      }
      else
      {
        if (qword_1E9A49060 != -1) {
          swift_once();
        }
        uint64_t v18 = sub_1AD9DD550();
        __swift_project_value_buffer(v18, (uint64_t)qword_1E9A4D288);
        uint64_t v19 = sub_1AD9DD530();
        os_log_type_t v20 = sub_1AD9DFBE0();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = (uint8_t *)swift_slowAlloc();
          uint64_t v22 = swift_slowAlloc();
          uint64_t v25 = v22;
          *(_DWORD *)uint64_t v21 = 136446210;
          uint64_t v23 = sub_1AD9E04F0();
          sub_1AD838978(v23, v24, &v25);
          sub_1AD9DFEA0();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1AD834000, v19, v20, "[%{public}s] good morning disabled, not prefetching", v21, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3E6D1A0](v22, -1, -1);
          MEMORY[0x1B3E6D1A0](v21, -1, -1);
        }

        uint64_t v17 = 0;
      }
      a2(v17);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_1AD9DD550();
    __swift_project_value_buffer(v10, (uint64_t)qword_1E9A4D288);
    uint64_t v11 = sub_1AD9DD530();
    os_log_type_t v12 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v25 = v14;
      *(_DWORD *)uint64_t v13 = 136446210;
      uint64_t v15 = sub_1AD9E04F0();
      sub_1AD838978(v15, v16, &v25);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v11, v12, "[%{public}s] failed to fetch model, not prefetching", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
      MEMORY[0x1B3E6D1A0](v13, -1, -1);
    }

    a2(0);
  }
}

uint64_t sub_1AD93A75C()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16)  = v0;
  *(void *)(v2 + 24)  = ObjectType;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
  uint64_t v4 = (void *)swift_allocObject();
  v4[2]  = sub_1AD93D784;
  v4[3]  = v2;
  v4[4]  = ObjectType;
  v8[4]  = sub_1AD93D7C4;
  v8[5]  = v4;
  v8[0]  = MEMORY[0x1E4F143A8];
  v8[1]  = 1107296256;
  _OWORD v8[2] = sub_1AD86F738;
  v8[3]  = &block_descriptor_23_0;
  id v5 = _Block_copy(v8);
  id v6 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_sleepScheduleModelWithCompletion_, v5);
  _Block_release(v5);
  return swift_release();
}

void sub_1AD93A890(char a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCC70();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_1AD9DD550();
    __swift_project_value_buffer(v11, (uint64_t)qword_1E9A4D288);
    os_log_type_t v12 = sub_1AD9DD530();
    os_log_type_t v13 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v25 = a3;
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      aBlock[0]  = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      v24[1]  = v14 + 4;
      uint64_t v16 = sub_1AD9E04F0();
      uint64_t v26 = sub_1AD838978(v16, v17, aBlock);
      sub_1AD9DFEA0();
      a3  = v25;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v12, v13, "[%{public}s] scheduling next prefetch date", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v15, -1, -1);
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
    }

    uint64_t v18 = *(void **)&a2[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
    uint64_t v19 = *MEMORY[0x1E4FA53C0];
    sub_1AD9DCC50();
    os_log_type_t v20 = (void *)sub_1AD9DCBB0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16)  = a2;
    *(void *)(v21 + 24)  = a3;
    aBlock[4]  = (uint64_t)sub_1AD93D880;
    aBlock[5]  = v21;
    aBlock[0]  = MEMORY[0x1E4F143A8];
    aBlock[1]  = 1107296256;
    aBlock[2]  = (uint64_t)sub_1AD93B504;
    aBlock[3]  = (uint64_t)&block_descriptor_35;
    uint64_t v22 = _Block_copy(aBlock);
    uint64_t v23 = a2;
    swift_release();
    objc_msgSend(v18, sel_nextEventWithIdentifier_dueAfterDate_completion_, v19, v20, v22);
    _Block_release(v22);
  }
  else
  {
    sub_1AD93C620();
    sub_1AD8DF318();
    sub_1AD93D704(&qword_1E9A4C728, (void (*)(uint64_t))sub_1AD8DF318);
    sub_1AD9DDB70();
  }
}

uint64_t sub_1AD93AC04(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v5 = sub_1AD9DF3D0();
  uint64_t v31 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_1AD9DF400();
  uint64_t v9 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30, v10);
  os_log_type_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD93D81C(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v13 - 8, v16);
  uint64_t v18 = (char *)&v28 - v17;
  sub_1AD8CCDBC();
  uint64_t v19 = (void *)sub_1AD9DFCA0();
  sub_1AD9388C0(a1, (uint64_t)v18);
  unint64_t v20 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v21 = (v15 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  sub_1AD93D9F8((uint64_t)v18, v22 + v20);
  unint64_t v24 = v28;
  uint64_t v23 = v29;
  *(void *)(v22 + v21)  = v28;
  *(void *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8))  = v23;
  aBlock[4]  = sub_1AD93DA8C;
  aBlock[5]  = v22;
  aBlock[0]  = MEMORY[0x1E4F143A8];
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_1AD8D34D8;
  aBlock[3]  = &block_descriptor_41;
  uint64_t v25 = _Block_copy(aBlock);
  id v26 = v24;
  swift_release();
  sub_1AD9DF3F0();
  aBlock[0]  = MEMORY[0x1E4FBC860];
  sub_1AD93D704((unint64_t *)&qword_1E9A4AD50, MEMORY[0x1E4FBCB00]);
  sub_1AD93D81C(0, &qword_1E9A4C330, MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
  sub_1AD8CCECC();
  sub_1AD9DFF40();
  MEMORY[0x1B3E6BC50](0, v12, v8, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v30);
}

void sub_1AD93AFC8(uint64_t a1, uint64_t a2)
{
  sub_1AD93D81C(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v39 - v6;
  uint64_t v8 = sub_1AD9DCC70();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14);
  uint64_t v16 = (char *)&v39 - v15;
  sub_1AD9388C0(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1AD894998((uint64_t)v7);
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_1AD9DD550();
    __swift_project_value_buffer(v17, (uint64_t)qword_1E9A4D288);
    uint64_t v18 = sub_1AD9DD530();
    os_log_type_t v19 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v44 = v21;
      *(_DWORD *)unint64_t v20 = 136446210;
      uint64_t v22 = sub_1AD9E04F0();
      uint64_t v43 = sub_1AD838978(v22, v23, &v44);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v18, v19, "[%{public}s] no next wake up date, not prefetching", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v21, -1, -1);
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v7, v8);
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_1AD9DD550();
    __swift_project_value_buffer(v24, (uint64_t)qword_1E9A4D288);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v16, v8);
    uint64_t v25 = sub_1AD9DD530();
    os_log_type_t v26 = sub_1AD9DFBE0();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v42 = a2;
      uint64_t v29 = v28;
      uint64_t v41 = swift_slowAlloc();
      uint64_t v44 = v41;
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = sub_1AD9E04F0();
      int v40 = v27;
      uint64_t v43 = sub_1AD838978(v30, v31, &v44);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12)  = 2080;
      uint64_t v39 = v29 + 14;
      uint64_t v32 = (void *)sub_1AD9DCBB0();
      id v33 = objc_msgSend(v32, sel_hkspDescription);

      uint64_t v34 = sub_1AD9DF710();
      unint64_t v36 = v35;

      uint64_t v43 = sub_1AD838978(v34, v36, &v44);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(char *, uint64_t))(v9 + 8);
      v37(v13, v8);
      _os_log_impl(&dword_1AD834000, v25, (os_log_type_t)v40, "[%{public}s] next wake up is %s", (uint8_t *)v29, 0x16u);
      uint64_t v38 = v41;
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v38, -1, -1);
      MEMORY[0x1B3E6D1A0](v29, -1, -1);
    }
    else
    {
      uint64_t v37 = *(void (**)(char *, uint64_t))(v9 + 8);
      v37(v13, v8);
    }

    sub_1AD93B66C((uint64_t)v16);
    v37(v16, v8);
  }
}

uint64_t sub_1AD93B504(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1AD93D81C(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_1AD9DCC40();
    uint64_t v11 = sub_1AD9DCC70();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 0, 1, v11);
  }
  else
  {
    uint64_t v12 = sub_1AD9DCC70();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  }
  swift_retain();
  id v13 = a3;
  v10(v9, a3);
  swift_release();

  return sub_1AD894998((uint64_t)v9);
}

void sub_1AD93B66C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_1AD9DCC70();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v71 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  uint64_t v73 = (char *)&v64 - v11;
  MEMORY[0x1F4188790](v10, v12);
  int64_t v65 = (char *)&v64 - v13;
  sub_1AD93D614();
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD93D81C(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v21 = MEMORY[0x1F4188790](v19 - 8, v20);
  id v68 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v21, v23);
  os_log_type_t v26 = (char *)&v64 - v25;
  MEMORY[0x1F4188790](v24, v27);
  uint64_t v29 = (char *)&v64 - v28;
  uint64_t v30 = v5 + 2;
  uint64_t v69 = (void (*)(char *, uint64_t, uint64_t))v5[2];
  uint64_t v70 = a1;
  v69((char *)&v64 - v28, a1, v4);
  BOOL v67 = (void (*)(char *, void, uint64_t, uint64_t))v5[7];
  v67(v29, 0, 1, v4);
  uint64_t v72 = v2;
  uint64_t v31 = v2 + OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_lastWakeUp;
  swift_beginAccess();
  uint64_t v32 = (uint64_t)&v18[*(int *)(v15 + 56)];
  sub_1AD9388C0((uint64_t)v29, (uint64_t)v18);
  sub_1AD9388C0(v31, v32);
  uint64_t v74 = v5;
  id v33 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v5[6];
  if (v33((uint64_t)v18, 1, v4) == 1)
  {
    sub_1AD894998((uint64_t)v29);
    if (v33(v32, 1, v4) == 1)
    {
      sub_1AD894998((uint64_t)v18);
LABEL_8:
      if (qword_1E9A49060 != -1) {
        swift_once();
      }
      uint64_t v39 = sub_1AD9DD550();
      __swift_project_value_buffer(v39, (uint64_t)qword_1E9A4D288);
      int v40 = sub_1AD9DD530();
      os_log_type_t v41 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        v76[0]  = v43;
        *(_DWORD *)uint64_t v42 = 136446210;
        uint64_t v44 = sub_1AD9E04F0();
        uint64_t v75 = sub_1AD838978(v44, v45, v76);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v40, v41, "[%{public}s] reschedule not needed, next wake up unchanged", v42, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v43, -1, -1);
        MEMORY[0x1B3E6D1A0](v42, -1, -1);
      }

      return;
    }
    goto LABEL_6;
  }
  sub_1AD9388C0((uint64_t)v18, (uint64_t)v26);
  if (v33(v32, 1, v4) == 1)
  {
    sub_1AD894998((uint64_t)v29);
    ((void (*)(char *, uint64_t))v74[1])(v26, v4);
LABEL_6:
    sub_1AD93D6A8((uint64_t)v18);
    goto LABEL_13;
  }
  uint64_t v34 = v74;
  unint64_t v35 = (void (*)(char *, uint64_t, uint64_t))v74[4];
  uint64_t v64 = v30;
  unint64_t v36 = v65;
  v35(v65, v32, v4);
  sub_1AD93D704(&qword_1E9A4C738, MEMORY[0x1E4F27928]);
  char v37 = sub_1AD9DF6C0();
  uint64_t v38 = (void (*)(char *, uint64_t))v34[1];
  v38(v36, v4);
  sub_1AD894998((uint64_t)v29);
  v38(v26, v4);
  sub_1AD894998((uint64_t)v18);
  if (v37) {
    goto LABEL_8;
  }
LABEL_13:
  uint64_t v47 = (uint64_t)v68;
  uint64_t v46 = v69;
  v69(v68, v70, v4);
  v67((char *)v47, 0, 1, v4);
  swift_beginAccess();
  sub_1AD8DF3BC(v47, v31);
  swift_endAccess();
  sub_1AD93CB38(0x20000000000001uLL);
  uint64_t v48 = (uint64_t)v73;
  sub_1AD9DCBA0();
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v49 = sub_1AD9DD550();
  __swift_project_value_buffer(v49, (uint64_t)qword_1E9A4D288);
  uint64_t v50 = v71;
  v46(v71, v48, v4);
  uint64_t v51 = sub_1AD9DD530();
  os_log_type_t v52 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    v76[0]  = v70;
    *(_DWORD *)uint64_t v53 = 136446466;
    uint64_t v54 = sub_1AD9E04F0();
    uint64_t v75 = sub_1AD838978(v54, v55, v76);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v53 + 12)  = 2080;
    uint64_t v56 = (void *)sub_1AD9DCBB0();
    id v57 = v50;
    id v58 = objc_msgSend(v56, sel_hkspDescription);

    uint64_t v59 = sub_1AD9DF710();
    unint64_t v61 = v60;

    uint64_t v75 = sub_1AD838978(v59, v61, v76);
    uint64_t v48 = (uint64_t)v73;
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    uint64_t v62 = (void (*)(char *, uint64_t))v74[1];
    v62(v57, v4);
    _os_log_impl(&dword_1AD834000, v51, v52, "[%{public}s] scheduling prefetch for %s", (uint8_t *)v53, 0x16u);
    uint64_t v63 = v70;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v63, -1, -1);
    MEMORY[0x1B3E6D1A0](v53, -1, -1);
  }
  else
  {
    uint64_t v62 = (void (*)(char *, uint64_t))v74[1];
    v62(v50, v4);
  }

  sub_1AD93BF5C(v48);
  v62((char *)v48, v4);
}

uint64_t sub_1AD93BEE0(uint64_t result)
{
  if (result)
  {
    sub_1AD8DF318();
    sub_1AD93D704(&qword_1E9A4C728, (void (*)(uint64_t))sub_1AD8DF318);
    return sub_1AD9DDB70();
  }
  return result;
}

void sub_1AD93BF5C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = sub_1AD9DCC70();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD93C620();
  id v10 = objc_allocWithZone(MEMORY[0x1E4FA99B0]);
  uint64_t v11 = (void *)sub_1AD9DF6D0();
  id v12 = objc_msgSend(v10, sel_initWithIdentifier_, v11);

  uint64_t v13 = OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer;
  uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer);
  *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer)  = v12;

  uint64_t v15 = *(void **)(v2 + v13);
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = v9;
    uint64_t v18 = (void *)sub_1AD9DCBB0();
    sub_1AD8CCDBC();
    uint64_t v19 = (void *)sub_1AD9DFCA0();
    uint64_t v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16)  = v20;
    *(void *)(v21 + 24)  = ObjectType;
    aBlock[4]  = (uint64_t)sub_1AD93D5F4;
    aBlock[5]  = v21;
    aBlock[0]  = MEMORY[0x1E4F143A8];
    aBlock[1]  = 1107296256;
    aBlock[2]  = (uint64_t)sub_1AD9199DC;
    aBlock[3]  = (uint64_t)&block_descriptor_24;
    uint64_t v22 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v16, sel_scheduleForDate_leewayInterval_queue_handler_, v18, v19, v22, 20.0);
    _Block_release(v22);

    uint64_t v9 = v17;
  }
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_1AD9DD550();
  __swift_project_value_buffer(v23, (uint64_t)qword_1E9A4D288);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  uint64_t v24 = sub_1AD9DD530();
  os_log_type_t v25 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    aBlock[0]  = v37;
    *(_DWORD *)uint64_t v26 = 136446466;
    uint64_t v27 = sub_1AD9E04F0();
    uint64_t v38 = sub_1AD838978(v27, v28, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12)  = 2080;
    v36[1]  = v26 + 14;
    uint64_t v29 = (void *)sub_1AD9DCBB0();
    uint64_t v30 = v5;
    id v31 = objc_msgSend(v29, sel_hkspDescription);

    uint64_t v32 = sub_1AD9DF710();
    unint64_t v34 = v33;

    uint64_t v38 = sub_1AD838978(v32, v34, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v30);
    _os_log_impl(&dword_1AD834000, v24, v25, "[%{public}s] prefetch scheduled for %s", (uint8_t *)v26, 0x16u);
    uint64_t v35 = v37;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v35, -1, -1);
    MEMORY[0x1B3E6D1A0](v26, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_1AD93C3B8(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1AD9DD550();
  __swift_project_value_buffer(v4, (uint64_t)qword_1E9A4D288);
  uint64_t v5 = sub_1AD9DD530();
  os_log_type_t v6 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v15[0]  = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v9 = sub_1AD9E04F0();
    sub_1AD838978(v9, v10, v15);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v5, v6, "[%{public}s] prefetch timer fired", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
  }

  objc_msgSend(a1, sel_invalidate);
  swift_beginAccess();
  uint64_t v11 = (char *)MEMORY[0x1B3E6D270](v3);
  if (v11)
  {
    id v12 = *(void **)&v11[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer];
    *(void *)&v11[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer]  = 0;
  }
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](v3);
  if (result)
  {
    uint64_t v14 = (void *)result;
    swift_retain();

    sub_1AD8DF318();
    sub_1AD93D704(&qword_1E9A4C728, (void (*)(uint64_t))sub_1AD8DF318);
    sub_1AD9DDB70();
    return swift_release();
  }
  return result;
}

void sub_1AD93C620()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer);
  if (v3)
  {
    uint64_t v4 = qword_1E9A49060;
    id v5 = v3;
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_1AD9DD550();
    __swift_project_value_buffer(v6, (uint64_t)qword_1E9A4D288);
    uint64_t v7 = sub_1AD9DD530();
    os_log_type_t v8 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v14 = v10;
      *(_DWORD *)uint64_t v9 = 136446210;
      uint64_t v11 = sub_1AD9E04F0();
      sub_1AD838978(v11, v12, &v14);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v7, v8, "[%{public}s] cancelling existing prefetch timer", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v10, -1, -1);
      MEMORY[0x1B3E6D1A0](v9, -1, -1);
    }

    objc_msgSend(v5, sel_invalidate);
    uint64_t v13 = *(void **)(v1 + v2);
    *(void *)(v1 + v2)  = 0;
  }
}

id WeatherPrefetchScheduler.__deallocating_deinit()
{
  sub_1AD93C620();
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for WeatherPrefetchScheduler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id WeatherPrefetchScheduler.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void WeatherPrefetchScheduler.init()()
{
}

uint64_t WeatherPrefetchScheduler.sleepStore(_:sleepScheduleStateDidChange:)(uint64_t a1, uint64_t a2)
{
  return sub_1AD93CE4C(a2);
}

uint64_t WeatherPrefetchScheduler.sleepStore(_:sleepEventDidOccur:)(uint64_t a1, void *a2)
{
  return sub_1AD93D148(a2);
}

uint64_t type metadata accessor for WeatherPrefetchScheduler()
{
  uint64_t result = qword_1E9A4C718;
  if (!qword_1E9A4C718) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1AD93CB38(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0;
    MEMORY[0x1B3E6D1B0](&v3, 8);
    uint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0;
          MEMORY[0x1B3E6D1B0](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s13SleepHealthUI24WeatherPrefetchSchedulerC10sleepStore_0G22ScheduleModelDidChangeySo09HKSPSleepH0C_So0miJ0CtF_0()
{
  unint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_1AD9DD550();
  __swift_project_value_buffer(v3, (uint64_t)qword_1E9A4D288);
  uint64_t v4 = sub_1AD9DD530();
  os_log_type_t v5 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    aBlock[0]  = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    uint64_t v8 = sub_1AD9E04F0();
    sub_1AD838978(v8, v9, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v4, v5, "[%{public}s] schedule model changed, rescheduling prefetch", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
  }

  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16)  = v1;
  *(void *)(v10 + 24)  = ObjectType;
  uint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
  unint64_t v12 = (void *)swift_allocObject();
  void v12[2] = sub_1AD93DBE8;
  v12[3]  = v10;
  v12[4]  = ObjectType;
  aBlock[4]  = (uint64_t)sub_1AD93DBE4;
  aBlock[5]  = (uint64_t)v12;
  aBlock[0]  = MEMORY[0x1E4F143A8];
  aBlock[1]  = 1107296256;
  aBlock[2]  = (uint64_t)sub_1AD86F738;
  aBlock[3]  = (uint64_t)&block_descriptor_73;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v11, sel_sleepScheduleModelWithCompletion_, v13);
  _Block_release(v13);
  return swift_release();
}

uint64_t sub_1AD93CE4C(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t result = swift_getObjectType();
  uint64_t v5 = result;
  if (a1 == 6 || a1 == 1)
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_1AD9DD550();
    __swift_project_value_buffer(v6, (uint64_t)qword_1E9A4D288);
    uint64_t v7 = sub_1AD9DD530();
    os_log_type_t v8 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      aBlock[0]  = v21;
      *(_DWORD *)uint64_t v9 = 136446466;
      uint64_t v10 = sub_1AD9E04F0();
      sub_1AD838978(v10, v11, aBlock);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12)  = 2080;
      id v12 = (id)NSStringFromHKSPSleepScheduleState();
      uint64_t v13 = sub_1AD9DF710();
      unint64_t v15 = v14;

      sub_1AD838978(v13, v15, aBlock);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v7, v8, "[%{public}s] schedule state changed to %s, scheduling next prefetch", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v21, -1, -1);
      MEMORY[0x1B3E6D1A0](v9, -1, -1);
    }

    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16)  = v2;
    *(void *)(v16 + 24)  = v5;
    uint64_t v17 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
    uint64_t v18 = (void *)swift_allocObject();
    v18[2]  = sub_1AD93DBE8;
    v18[3]  = v16;
    v18[4]  = v5;
    aBlock[4]  = (uint64_t)sub_1AD93DBE4;
    aBlock[5]  = (uint64_t)v18;
    aBlock[0]  = MEMORY[0x1E4F143A8];
    aBlock[1]  = 1107296256;
    aBlock[2]  = (uint64_t)sub_1AD86F738;
    aBlock[3]  = (uint64_t)&block_descriptor_62;
    uint64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = v2;
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_sleepScheduleModelWithCompletion_, v19);
    _Block_release(v19);
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD93D148(void *a1)
{
  unint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  id v5 = objc_msgSend(a1, sel_identifier);
  uint64_t v6 = sub_1AD9DF710();
  uint64_t v8 = v7;
  if (v6 == sub_1AD9DF710() && v8 == v9)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v11 & 1) == 0) {
      return result;
    }
  }
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_1AD9DD550();
  __swift_project_value_buffer(v13, (uint64_t)qword_1E9A4D288);
  unint64_t v14 = sub_1AD9DD530();
  os_log_type_t v15 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    aBlock[0]  = v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v18 = sub_1AD9E04F0();
    sub_1AD838978(v18, v19, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v14, v15, "[%{public}s] wake detection notification posted, prefetching immediately", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v17, -1, -1);
    MEMORY[0x1B3E6D1A0](v16, -1, -1);
  }

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16)  = v2;
  uint64_t v21 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
  uint64_t v22 = (void *)swift_allocObject();
  v22[2]  = sub_1AD93DB8C;
  v22[3]  = v20;
  v22[4]  = ObjectType;
  aBlock[4]  = (uint64_t)sub_1AD93DBE4;
  aBlock[5]  = (uint64_t)v22;
  aBlock[0]  = MEMORY[0x1E4F143A8];
  aBlock[1]  = 1107296256;
  aBlock[2]  = (uint64_t)sub_1AD86F738;
  aBlock[3]  = (uint64_t)&block_descriptor_51;
  uint64_t v23 = _Block_copy(aBlock);
  uint64_t v24 = v2;
  swift_retain();
  swift_release();
  objc_msgSend(v21, sel_sleepScheduleModelWithCompletion_, v23);
  _Block_release(v23);
  return swift_release();
}

uint64_t sub_1AD93D468()
{
  return type metadata accessor for WeatherPrefetchScheduler();
}

void sub_1AD93D470()
{
  sub_1AD93D81C(319, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for WeatherPrefetchScheduler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WeatherPrefetchScheduler);
}

uint64_t dispatch thunk of WeatherPrefetchScheduler.__allocating_init(sleepStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t sub_1AD93D584()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD93D5BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD93D5F4(void *a1)
{
  return sub_1AD93C3B8(a1, *(void *)(v1 + 16));
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

void sub_1AD93D614()
{
  if (!qword_1E9A4C730)
  {
    sub_1AD93D81C(255, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4C730);
    }
  }
}

uint64_t sub_1AD93D6A8(uint64_t a1)
{
  sub_1AD93D614();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD93D704(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD93D74C()
{
  return swift_deallocObject();
}

void sub_1AD93D784(char a1)
{
  sub_1AD93A890(a1, *(char **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1AD93D78C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD93D7C4(void *a1, uint64_t a2)
{
  return sub_1AD93A0EC(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1AD93D7D0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1AD93D810()
{
  sub_1AD93A3E0(*(void **)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

void sub_1AD93D81C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD93D880(uint64_t a1, uint64_t a2)
{
  return sub_1AD93AC04(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1AD93D888()
{
  sub_1AD93D81C(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = sub_1AD9DCC70();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v0 + v2, 1, v4)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v2, v4);
  }

  return swift_deallocObject();
}

uint64_t sub_1AD93D9F8(uint64_t a1, uint64_t a2)
{
  sub_1AD93D81C(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1AD93DA8C()
{
  sub_1AD93D81C(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_1AD93AFC8(v0 + v3, v4);
}

uint64_t sub_1AD93DB54()
{
  return swift_deallocObject();
}

uint64_t sub_1AD93DB8C(uint64_t result)
{
  return sub_1AD93BEE0(result);
}

uint64_t destroy for ScheduleComponentView()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ScheduleComponentView(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v4;
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v5;
  *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = v7;
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = v8;
  *(_WORD *)(a1 + 128)  = *(_WORD *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 144);
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  *(void *)(a1 + 144)  = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a1 + 152)  = *(void *)(a2 + 152);
  *(void *)(a1 + 160)  = v10;
  *(unsigned char *)(a1 + 168)  = *(unsigned char *)(a2 + 168);
  uint64_t v11 = *(void *)(a2 + 184);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(void *)(a1 + 184)  = v11;
  uint64_t v12 = *(void *)(a2 + 200);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(void *)(a1 + 200)  = v12;
  *(unsigned char *)(a1 + 224)  = *(unsigned char *)(a2 + 224);
  uint64_t v13 = *(void *)(a2 + 216);
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  *(void *)(a1 + 216)  = v13;
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleComponentView(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 128)  = *(_WORD *)(a2 + 128);
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152)  = *(void *)(a2 + 152);
  swift_retain();
  swift_release();
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 168)  = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(void *)(a1 + 184)  = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(void *)(a1 + 200)  = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  uint64_t v4 = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224)  = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216)  = v4;
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16)  = a2[1];
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)a1  = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80)  = a2[5];
  *(_OWORD *)(a1 + 96)  = v6;
  *(_OWORD *)(a1 + 48)  = v4;
  *(_OWORD *)(a1 + 64)  = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144)  = a2[9];
  *(_OWORD *)(a1 + 160)  = v9;
  *(_OWORD *)(a1 + 112)  = v7;
  *(_OWORD *)(a1 + 128)  = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[14];
  *(_OWORD *)(a1 + 208)  = a2[13];
  *(_OWORD *)(a1 + 224)  = v12;
  *(__n128 *)(a1 + 176)  = result;
  *(_OWORD *)(a1 + 192)  = v11;
  return result;
}

uint64_t assignWithTake for ScheduleComponentView(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  swift_release();
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 120);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 128)  = *(_WORD *)(a2 + 128);
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144)  = *(_OWORD *)(a2 + 144);
  swift_release();
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  swift_release();
  *(unsigned char *)(a1 + 168)  = *(unsigned char *)(a2 + 168);
  uint64_t v6 = *(void *)(a2 + 184);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(void *)(a1 + 184)  = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 200);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(void *)(a1 + 200)  = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 216);
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  *(void *)(a1 + 216)  = v8;
  *(unsigned char *)(a1 + 224)  = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleComponentView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 240)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 200);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleComponentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 232)  = 0;
    *(_OWORD *)(result + 216)  = 0u;
    *(_OWORD *)(result + 200)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 240)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 200)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 240)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleComponentView()
{
  return &type metadata for ScheduleComponentView;
}

uint64_t sub_1AD93E248()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD93E264()
{
  return sub_1AD9E03B0();
}

uint64_t sub_1AD93E3B0()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD93E548()
{
  return sub_1AD9E03E0();
}

void *sub_1AD93E6D8@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[13];
  v13[12]  = v1[12];
  v13[13]  = v3;
  v13[14]  = v1[14];
  long long v4 = v1[9];
  v13[8]  = v1[8];
  v13[9]  = v4;
  long long v5 = v1[11];
  v13[10]  = v1[10];
  v13[11]  = v5;
  long long v6 = v1[5];
  v13[4]  = v1[4];
  v13[5]  = v6;
  long long v7 = v1[7];
  void v13[6] = v1[6];
  v13[7]  = v7;
  long long v8 = v1[1];
  v13[0]  = *v1;
  v13[1]  = v8;
  long long v9 = v1[3];
  v13[2]  = v1[2];
  v13[3]  = v9;
  uint64_t v10 = sub_1AD9DE2A0();
  sub_1AD93E83C((uint64_t)v13, (uint64_t)__src);
  v15[328]  = 0;
  memcpy(&v15[7], __src, 0x140uLL);
  uint64_t v11 = sub_1AD9DE2B0();
  v16[0]  = v10;
  v16[1]  = 0x4028000000000000;
  LOBYTE(v16[2])  = 0;
  memcpy((char *)&v16[2] + 1, v15, 0x147uLL);
  memcpy(__dst, v16, sizeof(__dst));
  char v17 = 0;
  v19[0]  = v10;
  v19[1]  = 0x4028000000000000;
  char v20 = 0;
  memcpy(v21, v15, sizeof(v21));
  sub_1AD93F690((uint64_t)v16);
  sub_1AD93F790((uint64_t)__src);
  sub_1AD93F890((uint64_t)v19);
  sub_1AD93F990((uint64_t)__src);
  memcpy(&v22[7], __dst, 0x158uLL);
  *(void *)a1  = v11;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = 0;
  __n128 result = memcpy((void *)(a1 + 17), v22, 0x15FuLL);
  *(void *)(a1 + 368)  = 0;
  *(unsigned char *)(a1 + 376)  = 0;
  return result;
}

uint64_t sub_1AD93E83C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v43[0]  = *(_OWORD *)(a1 + 216);
  *(void *)&v43[1]  = *(void *)(a1 + 232);
  sub_1AD94141C(0, &qword_1E9A4C740, &qword_1E9A4C748, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3ECC8]);
  sub_1AD9DF050();
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  long long v4 = *(_OWORD *)(a1 + 176);
  long long v80 = *(_OWORD *)(a1 + 160);
  long long v81 = v4;
  long long v82 = *(_OWORD *)(a1 + 192);
  uint64_t v83 = *(void *)(a1 + 208);
  long long v5 = *(_OWORD *)(a1 + 112);
  long long v76 = *(_OWORD *)(a1 + 96);
  long long v77 = v5;
  long long v6 = *(_OWORD *)(a1 + 144);
  long long v78 = *(_OWORD *)(a1 + 128);
  long long v79 = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v72 = *(_OWORD *)(a1 + 32);
  long long v73 = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v74 = *(_OWORD *)(a1 + 64);
  long long v75 = v8;
  long long v9 = *(_OWORD *)(a1 + 16);
  long long v70 = *(_OWORD *)a1;
  long long v71 = v9;
  if ((v83 & 4) != 0)
  {
    *(void *)&long long v45 = v65;
    *((void *)&v45 + 1)  = v66;
    *(void *)&long long v46 = v67;
    *((void *)&v46 + 1)  = v68;
    long long v47 = v69;
    LOBYTE(v48)  = 1;
    sub_1AD9413CC(0, &qword_1E9A4C750, (uint64_t)&type metadata for ScheduleComponentView.VerticalBar, MEMORY[0x1E4F3C7D8], MEMORY[0x1E4F3CC10]);
    sub_1AD93FA90();
  }
  else
  {
    sub_1AD9413CC(0, &qword_1E9A4C750, (uint64_t)&type metadata for ScheduleComponentView.VerticalBar, MEMORY[0x1E4F3C7D8], MEMORY[0x1E4F3CC10]);
    sub_1AD93FA90();
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    LOBYTE(v48)  = 0;
  }
  sub_1AD9DE470();
  uint64_t v26 = *((void *)&v43[0] + 1);
  uint64_t v27 = *(void *)&v43[0];
  long long v10 = v43[1];
  long long v11 = v43[2];
  char v12 = v43[3];
  long long v38 = v80;
  long long v39 = v81;
  long long v40 = v82;
  uint64_t v41 = v83;
  long long v34 = v76;
  long long v35 = v77;
  long long v36 = v78;
  long long v37 = v79;
  long long v30 = v72;
  long long v31 = v73;
  long long v32 = v74;
  long long v33 = v75;
  long long v28 = v70;
  long long v29 = v71;
  uint64_t v13 = (_OWORD *)swift_allocObject();
  long long v14 = *(_OWORD *)(a1 + 208);
  v13[13]  = *(_OWORD *)(a1 + 192);
  v13[14]  = v14;
  v13[15]  = *(_OWORD *)(a1 + 224);
  long long v15 = *(_OWORD *)(a1 + 144);
  v13[9]  = *(_OWORD *)(a1 + 128);
  v13[10]  = v15;
  long long v16 = *(_OWORD *)(a1 + 176);
  v13[11]  = *(_OWORD *)(a1 + 160);
  v13[12]  = v16;
  long long v17 = *(_OWORD *)(a1 + 80);
  v13[5]  = *(_OWORD *)(a1 + 64);
  void v13[6] = v17;
  long long v18 = *(_OWORD *)(a1 + 112);
  v13[7]  = *(_OWORD *)(a1 + 96);
  v13[8]  = v18;
  long long v19 = *(_OWORD *)(a1 + 16);
  v13[1]  = *(_OWORD *)a1;
  v13[2]  = v19;
  long long v20 = *(_OWORD *)(a1 + 48);
  v13[3]  = *(_OWORD *)(a1 + 32);
  v13[4]  = v20;
  sub_1AD941484((uint64_t)&v70);
  sub_1AD93FCA8(a1);
  uint64_t v21 = sub_1AD9DF320();
  uint64_t v23 = v22;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16)  = sub_1AD93FC28;
  *(void *)(v24 + 24)  = v13;
  __src[10]  = v38;
  __src[11]  = v39;
  __src[12]  = v40;
  *(void *)&__src[13]  = v41;
  __src[6]  = v34;
  __src[7]  = v35;
  __src[8]  = v36;
  __src[9]  = v37;
  __src[2]  = v30;
  __src[3]  = v31;
  __src[4]  = v32;
  __src[5]  = v33;
  __src[0]  = v28;
  __src[1]  = v29;
  *((void *)&__src[13] + 1)  = sub_1AD9886D0;
  *(void *)&__src[14]  = 0;
  *((void *)&__src[14] + 1)  = v21;
  *(void *)&__src[15]  = v23;
  *((void *)&__src[15] + 1)  = sub_1AD93FDCC;
  *(void *)&__src[16]  = v24;
  char v44 = v12;
  memcpy((char *)v43 + 7, __src, 0x108uLL);
  *(void *)a2  = v27;
  *(void *)(a2 + 8)  = v26;
  *(_OWORD *)(a2 + 16)  = v10;
  *(_OWORD *)(a2 + 32)  = v11;
  *(unsigned char *)(a2 + 48)  = v12;
  memcpy((void *)(a2 + 49), v43, 0x10FuLL);
  long long v55 = v38;
  long long v56 = v39;
  long long v57 = v40;
  long long v51 = v34;
  long long v52 = v35;
  long long v53 = v36;
  long long v54 = v37;
  long long v47 = v30;
  long long v48 = v31;
  long long v49 = v32;
  long long v50 = v33;
  long long v45 = v28;
  long long v46 = v29;
  uint64_t v58 = v41;
  uint64_t v59 = sub_1AD9886D0;
  uint64_t v60 = 0;
  uint64_t v61 = v21;
  uint64_t v62 = v23;
  uint64_t v63 = sub_1AD93FDCC;
  uint64_t v64 = v24;
  sub_1AD93FDD4((uint64_t)__src);
  return sub_1AD93FED4((uint64_t)&v45);
}

uint64_t sub_1AD93EC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  sub_1AD941130(0);
  MEMORY[0x1F4188790](v3, v4);
  long long v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD941064(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v7, v10);
  uint64_t v64 = (uint64_t)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v67 = (uint64_t)&v57 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v68 = (uint64_t)&v57 - v18;
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)&v57 - v20;
  sub_1AD941164(0, &qword_1E9A4C850, (uint64_t (*)(uint64_t))sub_1AD941064, MEMORY[0x1E4FBB718]);
  uint64_t v24 = MEMORY[0x1F4188790](v22 - 8, v23);
  uint64_t v62 = (uint64_t)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24, v26);
  uint64_t v63 = (uint64_t)&v57 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27, v29);
  MEMORY[0x1F4188790](v30, v31);
  long long v33 = (char *)&v57 - v32;
  long long v34 = *(_OWORD *)(a1 + 176);
  long long v83 = *(_OWORD *)(a1 + 160);
  long long v84 = v34;
  long long v85 = *(_OWORD *)(a1 + 192);
  long long v35 = *(_OWORD *)(a1 + 112);
  long long v79 = *(_OWORD *)(a1 + 96);
  long long v80 = v35;
  long long v36 = *(_OWORD *)(a1 + 144);
  long long v81 = *(_OWORD *)(a1 + 128);
  long long v82 = v36;
  long long v37 = *(_OWORD *)(a1 + 48);
  long long v75 = *(_OWORD *)(a1 + 32);
  long long v76 = v37;
  long long v38 = *(_OWORD *)(a1 + 80);
  long long v77 = *(_OWORD *)(a1 + 64);
  long long v78 = v38;
  long long v39 = *(_OWORD *)(a1 + 16);
  long long v73 = *(_OWORD *)a1;
  long long v74 = v39;
  uint64_t v58 = *(void *)(a1 + 208);
  uint64_t v59 = v8;
  uint64_t v60 = v40;
  uint64_t v61 = v9;
  uint64_t v66 = (uint64_t)&v57 - v32;
  if (v58)
  {
    long long v69 = v81;
    long long v70 = v82;
    long long v71 = v83;
    long long v72 = v84;
    sub_1AD941484(a1);
    static Text.create(_:)(&v69, (uint64_t)v6);
    long long v87 = v85;
    long long v69 = v85;
    sub_1AD941484(a1);
    sub_1AD87887C((uint64_t)&v87);
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    sub_1AD941568(a1);
    sub_1AD941868(&qword_1E9A4C898, sub_1AD941130, (void (*)(void))sub_1AD941648);
    sub_1AD9DED30();
    swift_bridgeObjectRelease();
    sub_1AD941B54((uint64_t)v6, (uint64_t (*)(void))sub_1AD941130);
    sub_1AD941568(a1);
    sub_1AD941968((uint64_t)v21, (uint64_t)v33);
    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v42 = v33;
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v42 = (char *)&v57 - v32;
    uint64_t v43 = 1;
  }
  long long v57 = v41;
  v41((uint64_t)v42, v43, 1, v8);
  long long v69 = v73;
  long long v70 = v74;
  long long v71 = v75;
  long long v72 = v76;
  sub_1AD941484(a1);
  static Text.create(_:)(&v69, (uint64_t)v6);
  long long v86 = v85;
  long long v69 = v85;
  sub_1AD941484(a1);
  sub_1AD87887C((uint64_t)&v86);
  sub_1AD9DF790();
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD941568(a1);
  sub_1AD941868(&qword_1E9A4C898, sub_1AD941130, (void (*)(void))sub_1AD941648);
  sub_1AD9DED30();
  swift_bridgeObjectRelease();
  sub_1AD941B54((uint64_t)v6, (uint64_t (*)(void))sub_1AD941130);
  sub_1AD941568(a1);
  sub_1AD941968((uint64_t)v21, v68);
  long long v69 = v77;
  long long v70 = v78;
  long long v71 = v79;
  long long v72 = v80;
  sub_1AD941484(a1);
  static Text.create(_:)(&v69, (uint64_t)v6);
  long long v69 = v86;
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD9DED30();
  swift_bridgeObjectRelease();
  sub_1AD941B54((uint64_t)v6, (uint64_t (*)(void))sub_1AD941130);
  sub_1AD941568(a1);
  sub_1AD941968((uint64_t)v21, v67);
  uint64_t v44 = (uint64_t)v21;
  if (v58)
  {
    uint64_t v47 = 1;
    uint64_t v46 = v60;
  }
  else
  {
    long long v69 = v81;
    long long v70 = v82;
    long long v71 = v83;
    long long v72 = v84;
    sub_1AD941484(a1);
    static Text.create(_:)(&v69, (uint64_t)v6);
    long long v69 = v86;
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    sub_1AD9DED30();
    swift_bridgeObjectRelease();
    sub_1AD941B54((uint64_t)v6, (uint64_t (*)(void))sub_1AD941130);
    sub_1AD941568(a1);
    uint64_t v45 = (uint64_t)v21;
    uint64_t v46 = v60;
    sub_1AD941968(v45, v60);
    uint64_t v47 = 0;
  }
  v57(v46, v47, 1, v59);
  uint64_t v48 = v63;
  sub_1AD9419CC(v66, v63);
  sub_1AD941A60(v68, v44, (uint64_t (*)(void))sub_1AD941064);
  uint64_t v49 = v67;
  uint64_t v50 = v64;
  sub_1AD941A60(v67, v64, (uint64_t (*)(void))sub_1AD941064);
  uint64_t v51 = v62;
  sub_1AD9419CC(v46, v62);
  uint64_t v52 = v44;
  uint64_t v53 = v65;
  sub_1AD9419CC(v48, v65);
  sub_1AD940FB0();
  uint64_t v55 = v54;
  sub_1AD941A60(v52, v53 + *(int *)(v54 + 48), (uint64_t (*)(void))sub_1AD941064);
  sub_1AD941A60(v50, v53 + *(int *)(v55 + 64), (uint64_t (*)(void))sub_1AD941064);
  sub_1AD9419CC(v51, v53 + *(int *)(v55 + 80));
  sub_1AD941AC8(v46);
  sub_1AD941B54(v49, (uint64_t (*)(void))sub_1AD941064);
  sub_1AD941B54(v68, (uint64_t (*)(void))sub_1AD941064);
  sub_1AD941AC8(v66);
  sub_1AD941AC8(v51);
  sub_1AD941B54(v50, (uint64_t (*)(void))sub_1AD941064);
  sub_1AD941B54(v52, (uint64_t (*)(void))sub_1AD941064);
  return sub_1AD941AC8(v48);
}

uint64_t sub_1AD93F4B4@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 176);
  v11[10]  = *(_OWORD *)(v1 + 160);
  v11[11]  = v3;
  v11[12]  = *(_OWORD *)(v1 + 192);
  uint64_t v12 = *(void *)(v1 + 208);
  long long v4 = *(_OWORD *)(v1 + 112);
  void v11[6] = *(_OWORD *)(v1 + 96);
  v11[7]  = v4;
  long long v5 = *(_OWORD *)(v1 + 144);
  v11[8]  = *(_OWORD *)(v1 + 128);
  v11[9]  = v5;
  long long v6 = *(_OWORD *)(v1 + 48);
  v11[2]  = *(_OWORD *)(v1 + 32);
  void v11[3] = v6;
  long long v7 = *(_OWORD *)(v1 + 80);
  void v11[4] = *(_OWORD *)(v1 + 64);
  v11[5]  = v7;
  long long v8 = *(_OWORD *)(v1 + 16);
  v11[0]  = *(_OWORD *)v1;
  v11[1]  = v8;
  *(void *)a1  = sub_1AD9DE340();
  *(void *)(a1 + 8)  = 0x4000000000000000;
  *(unsigned char *)(a1 + 16)  = 0;
  sub_1AD940F14();
  return sub_1AD93EC88((uint64_t)v11, a1 + *(int *)(v9 + 44));
}

uint64_t sub_1AD93F544@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1AD9DE020();
  uint64_t v4 = MEMORY[0x1F4188790](v2 - 8, v3);
  long long v6 = (_OWORD *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v7 = (char *)v6 + *(int *)(v4 + 28);
  uint64_t v8 = *MEMORY[0x1E4F3D4A0];
  uint64_t v9 = sub_1AD9DE2D0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  __asm { FMOV            V0.2D, #2.0 }
  *long long v6 = _Q0;
  id v15 = objc_msgSend(self, sel_systemGray4Color);
  uint64_t v16 = MEMORY[0x1B3E6ADC0](v15);
  sub_1AD941A60((uint64_t)v6, a1, MEMORY[0x1E4F3CDB8]);
  sub_1AD940E64();
  *(void *)(a1 + *(int *)(v17 + 52))  = v16;
  *(_WORD *)(a1 + *(int *)(v17 + 56))  = 256;
  return sub_1AD941B54((uint64_t)v6, MEMORY[0x1E4F3CDB8]);
}

uint64_t sub_1AD93F690(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD93F790(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD93F890(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD93F990(uint64_t a1)
{
  return a1;
}

unint64_t sub_1AD93FA90()
{
  unint64_t result = qword_1E9A4C758;
  if (!qword_1E9A4C758)
  {
    sub_1AD9413CC(255, &qword_1E9A4C750, (uint64_t)&type metadata for ScheduleComponentView.VerticalBar, MEMORY[0x1E4F3C7D8], MEMORY[0x1E4F3CC10]);
    sub_1AD93FB34();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C758);
  }
  return result;
}

unint64_t sub_1AD93FB34()
{
  unint64_t result = qword_1E9A4C760;
  if (!qword_1E9A4C760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C760);
  }
  return result;
}

uint64_t sub_1AD93FB88()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD93FC28()
{
  return sub_1AD9DF060();
}

uint64_t sub_1AD93FCA8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD93FD94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD93FDCC(uint64_t a1)
{
  return sub_1AD988714(a1, *(uint64_t (**)(double, double))(v1 + 16));
}

uint64_t sub_1AD93FDD4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD93FED4(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v5;
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)(a1 + 48)  = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144)  = v8;
  *(_OWORD *)(a1 + 96)  = v6;
  *(_OWORD *)(a1 + 112)  = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176)  = v10;
  *(_OWORD *)(a1 + 192)  = v11;
  *(__n128 *)(a1 + 160)  = result;
  return result;
}

ValueMetadata *type metadata accessor for ScheduleComponentView.ScheduleComponentStack()
{
  return &type metadata for ScheduleComponentView.ScheduleComponentStack;
}

ValueMetadata *type metadata accessor for ScheduleComponentView.VerticalBar()
{
  return &type metadata for ScheduleComponentView.VerticalBar;
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v4;
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v5;
  *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = v7;
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = v8;
  *(_WORD *)(a1 + 128)  = *(_WORD *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 144);
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  *(void *)(a1 + 144)  = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a1 + 152)  = *(void *)(a2 + 152);
  *(void *)(a1 + 160)  = v10;
  *(unsigned char *)(a1 + 168)  = *(unsigned char *)(a2 + 168);
  uint64_t v11 = *(void *)(a2 + 184);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(void *)(a1 + 184)  = v11;
  uint64_t v12 = *(void *)(a2 + 200);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(void *)(a1 + 200)  = v12;
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 128)  = *(_WORD *)(a2 + 128);
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152)  = *(void *)(a2 + 152);
  swift_retain();
  swift_release();
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 168)  = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(void *)(a1 + 184)  = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(void *)(a1 + 200)  = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  return a1;
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  swift_release();
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 120);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 128)  = *(_WORD *)(a2 + 128);
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144)  = *(_OWORD *)(a2 + 144);
  swift_release();
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  swift_release();
  *(unsigned char *)(a1 + 168)  = *(unsigned char *)(a2 + 168);
  uint64_t v6 = *(void *)(a2 + 184);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(void *)(a1 + 184)  = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 200);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(void *)(a1 + 200)  = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  return a1;
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 216)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 200);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1AD940578(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 216)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 200)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 216)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleComponentViewModel()
{
  return &type metadata for ScheduleComponentViewModel;
}

uint64_t sub_1AD9405FC()
{
  return sub_1AD941F8C(&qword_1E9A4C768, (void (*)(uint64_t))sub_1AD940644);
}

void sub_1AD940644()
{
  if (!qword_1E9A4C770)
  {
    sub_1AD9406D8(255);
    sub_1AD941F8C(&qword_1E9A4C820, sub_1AD9406D8);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C770);
    }
  }
}

void sub_1AD9406D8(uint64_t a1)
{
}

void sub_1AD94070C()
{
  if (!qword_1E9A4C780)
  {
    sub_1AD940774();
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4C780);
    }
  }
}

void sub_1AD940774()
{
  if (!qword_1E9A4C788)
  {
    sub_1AD940808(255);
    sub_1AD941F8C(&qword_1E9A4C818, sub_1AD940808);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C788);
    }
  }
}

void sub_1AD940808(uint64_t a1)
{
}

void sub_1AD94083C()
{
  if (!qword_1E9A4C798)
  {
    sub_1AD9408AC();
    sub_1AD940938();
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4C798);
    }
  }
}

void sub_1AD9408AC()
{
  if (!qword_1E9A4C7A0)
  {
    sub_1AD9413CC(255, &qword_1E9A4C750, (uint64_t)&type metadata for ScheduleComponentView.VerticalBar, MEMORY[0x1E4F3C7D8], MEMORY[0x1E4F3CC10]);
    unint64_t v0 = sub_1AD9DE480();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C7A0);
    }
  }
}

void sub_1AD940938()
{
  if (!qword_1E9A4C7A8)
  {
    sub_1AD9409C4(255, &qword_1E9A4C7B0, (void (*)(uint64_t))sub_1AD940A28);
    sub_1AD940CC0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C7A8);
    }
  }
}

void sub_1AD9409C4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD940A28()
{
  if (!qword_1E9A4C7B8)
  {
    sub_1AD940ABC();
    sub_1AD941F8C(&qword_1E9A4C7F0, (void (*)(uint64_t))sub_1AD940ABC);
    unint64_t v0 = sub_1AD9DE450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C7B8);
    }
  }
}

void sub_1AD940ABC()
{
  if (!qword_1E9A4C7C0)
  {
    sub_1AD9409C4(255, &qword_1E9A4C7C8, (void (*)(uint64_t))sub_1AD940B44);
    sub_1AD940BF4();
    unint64_t v0 = sub_1AD9DDEE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C7C0);
    }
  }
}

void sub_1AD940B44()
{
  if (!qword_1E9A4C7D0)
  {
    sub_1AD940BA0();
    unint64_t v0 = sub_1AD9DE640();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C7D0);
    }
  }
}

unint64_t sub_1AD940BA0()
{
  unint64_t result = qword_1E9A4C7D8;
  if (!qword_1E9A4C7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C7D8);
  }
  return result;
}

unint64_t sub_1AD940BF4()
{
  unint64_t result = qword_1E9A4C7E0;
  if (!qword_1E9A4C7E0)
  {
    sub_1AD9409C4(255, &qword_1E9A4C7C8, (void (*)(uint64_t))sub_1AD940B44);
    sub_1AD941F8C(&qword_1E9A4C7E8, (void (*)(uint64_t))sub_1AD940B44);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C7E0);
  }
  return result;
}

void sub_1AD940CC0()
{
  if (!qword_1E9A4C7F8)
  {
    sub_1AD940BA0();
    sub_1AD941868((unint64_t *)&qword_1E9A4C800, sub_1AD940D6C, (void (*)(void))sub_1AD940DA0);
    unint64_t v0 = sub_1AD9DE5E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C7F8);
    }
  }
}

void sub_1AD940D6C(uint64_t a1)
{
}

uint64_t sub_1AD940DA0()
{
  return sub_1AD941F8C(&qword_1E9A4C810, type metadata accessor for CGSize);
}

unint64_t sub_1AD940DD8()
{
  unint64_t result = qword_1E9A4C828;
  if (!qword_1E9A4C828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C828);
  }
  return result;
}

uint64_t sub_1AD940E2C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD940E48()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD940E64()
{
  if (!qword_1E9A4C830)
  {
    sub_1AD9DE020();
    sub_1AD941F8C(&qword_1E9A4A1B8, MEMORY[0x1E4F3CDB8]);
    unint64_t v0 = sub_1AD9DDD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C830);
    }
  }
}

void sub_1AD940F14()
{
  if (!qword_1E9A4C838)
  {
    sub_1AD940F7C(255);
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C838);
    }
  }
}

void sub_1AD940F7C(uint64_t a1)
{
}

void sub_1AD940FB0()
{
  if (!qword_1E9A4C848)
  {
    sub_1AD941164(255, &qword_1E9A4C850, (uint64_t (*)(uint64_t))sub_1AD941064, MEMORY[0x1E4FBB718]);
    sub_1AD941064(255);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1E9A4C848);
    }
  }
}

void sub_1AD941064(uint64_t a1)
{
}

void sub_1AD9410AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_1AD941130(uint64_t a1)
{
}

void sub_1AD941164(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD9411C8(uint64_t a1)
{
}

void sub_1AD941210()
{
  if (!qword_1E9A4C870)
  {
    sub_1AD941270();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C870);
    }
  }
}

void sub_1AD941270()
{
  if (!qword_1E9A4C878)
  {
    sub_1AD941304(255);
    sub_1AD94141C(255, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C878);
    }
  }
}

void sub_1AD941304(uint64_t a1)
{
}

void sub_1AD94134C()
{
  if (!qword_1E9A4C888)
  {
    sub_1AD9413CC(255, &qword_1E9A4C890, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3D750]);
    unint64_t v0 = sub_1AD9DEF30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C888);
    }
  }
}

void sub_1AD9413CC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD94141C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1AD87437C(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_1AD941484(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD941568(uint64_t a1)
{
  return a1;
}

unint64_t sub_1AD941648()
{
  unint64_t result = qword_1E9A4C8A0;
  if (!qword_1E9A4C8A0)
  {
    sub_1AD9411C8(255);
    sub_1AD94174C(&qword_1E9A4C8A8, (void (*)(uint64_t))sub_1AD941210, (void (*)(void))sub_1AD941704, (void (*)(void))sub_1AD90F7D0);
    sub_1AD941704();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C8A0);
  }
  return result;
}

uint64_t sub_1AD941704()
{
  return sub_1AD94174C(&qword_1E9A4C8B0, (void (*)(uint64_t))sub_1AD941270, (void (*)(void))sub_1AD9417D8, (void (*)(void))sub_1AD87D974);
}

uint64_t sub_1AD94174C(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD9417D8()
{
  return sub_1AD94174C(&qword_1E9A4C8B8, sub_1AD941304, (void (*)(void))sub_1AD941820, (void (*)(void))sub_1AD87D594);
}

uint64_t sub_1AD941820()
{
  return sub_1AD941868(&qword_1E9A4C8C0, (void (*)(uint64_t))sub_1AD94134C, (void (*)(void))sub_1AD9418D8);
}

uint64_t sub_1AD941868(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD9418D8()
{
  unint64_t result = qword_1E9A4C8C8;
  if (!qword_1E9A4C8C8)
  {
    sub_1AD9413CC(255, &qword_1E9A4C890, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3D750]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C8C8);
  }
  return result;
}

uint64_t sub_1AD941968(uint64_t a1, uint64_t a2)
{
  sub_1AD941064(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD9419CC(uint64_t a1, uint64_t a2)
{
  sub_1AD941164(0, &qword_1E9A4C850, (uint64_t (*)(uint64_t))sub_1AD941064, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD941A60(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD941AC8(uint64_t a1)
{
  sub_1AD941164(0, &qword_1E9A4C850, (uint64_t (*)(uint64_t))sub_1AD941064, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD941B54(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_1AD941BB4(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 40);
  unsigned __int16 v50 = *(_WORD *)(a1 + 64);
  uint64_t v48 = *(void *)(a1 + 80);
  uint64_t v49 = *(void *)(a1 + 72);
  uint64_t v47 = *(void *)(a1 + 88);
  uint64_t v46 = *(void *)(a1 + 96);
  char v45 = *(unsigned char *)(a1 + 104);
  uint64_t v43 = *(void *)(a1 + 120);
  uint64_t v44 = *(void *)(a1 + 112);
  unsigned __int16 v30 = *(_WORD *)(a1 + 128);
  uint64_t v28 = *(void *)(a1 + 144);
  uint64_t v29 = *(void *)(a1 + 136);
  uint64_t v27 = *(void *)(a1 + 152);
  uint64_t v42 = *(void *)(a1 + 160);
  char v41 = *(unsigned char *)(a1 + 168);
  uint64_t v33 = *(void *)(a1 + 184);
  uint64_t v34 = *(void *)(a1 + 176);
  uint64_t v24 = *(void *)(a1 + 200);
  uint64_t v25 = *(void *)(a1 + 192);
  uint64_t v23 = *(void *)(a1 + 208);
  unsigned __int16 v3 = *(_WORD *)a2;
  char v4 = *(unsigned char *)(a2 + 40);
  unsigned __int16 v40 = *(_WORD *)(a2 + 64);
  uint64_t v38 = *(void *)(a2 + 80);
  uint64_t v39 = *(void *)(a2 + 72);
  uint64_t v36 = *(void *)(a2 + 96);
  uint64_t v37 = *(void *)(a2 + 88);
  char v35 = *(unsigned char *)(a2 + 104);
  unsigned __int16 v56 = *(_WORD *)a1;
  char v59 = v2;
  uint64_t v31 = *(void *)(a2 + 120);
  uint64_t v32 = *(void *)(a2 + 112);
  long long v5 = *(_OWORD *)(a1 + 24);
  long long v57 = *(_OWORD *)(a1 + 8);
  long long v58 = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  unsigned __int16 v26 = *(_WORD *)(a2 + 128);
  unsigned __int16 v51 = v3;
  char v54 = v4;
  uint64_t v8 = *(void *)(a2 + 136);
  uint64_t v7 = *(void *)(a2 + 144);
  long long v60 = v6;
  long long v9 = *(_OWORD *)(a2 + 24);
  long long v52 = *(_OWORD *)(a2 + 8);
  long long v53 = v9;
  uint64_t v10 = *(void *)(a2 + 152);
  uint64_t v11 = *(void *)(a2 + 160);
  char v12 = *(unsigned char *)(a2 + 168);
  uint64_t v14 = *(void *)(a2 + 176);
  uint64_t v13 = *(void *)(a2 + 184);
  uint64_t v15 = *(void *)(a2 + 192);
  uint64_t v16 = *(void *)(a2 + 200);
  uint64_t v17 = *(void *)(a2 + 208);
  long long v55 = *(_OWORD *)(a2 + 48);
  if (!_s7SwiftUI4TextV011SleepHealthB0E9ViewModelV2eeoiySbAF_AFtFZ_0(&v56, &v51)) {
    return 0;
  }
  *(void *)&long long v20 = v10;
  *((void *)&v20 + 1)  = v11;
  *(void *)&long long v21 = v14;
  *((void *)&v21 + 1)  = v13;
  *(void *)&long long v22 = v8;
  *((void *)&v22 + 1)  = v7;
  unsigned __int16 v56 = v50;
  *(void *)&long long v57 = v49;
  *((void *)&v57 + 1)  = v48;
  *(void *)&long long v58 = v47;
  *((void *)&v58 + 1)  = v46;
  char v59 = v45;
  *(void *)&long long v60 = v44;
  *((void *)&v60 + 1)  = v43;
  unsigned __int16 v51 = v40;
  *(void *)&long long v52 = v39;
  *((void *)&v52 + 1)  = v38;
  *(void *)&long long v53 = v37;
  *((void *)&v53 + 1)  = v36;
  char v54 = v35;
  *(void *)&long long v55 = v32;
  *((void *)&v55 + 1)  = v31;
  if (!_s7SwiftUI4TextV011SleepHealthB0E9ViewModelV2eeoiySbAF_AFtFZ_0(&v56, &v51)) {
    return 0;
  }
  unsigned __int16 v56 = v30;
  *(void *)&long long v57 = v29;
  *((void *)&v57 + 1)  = v28;
  *(void *)&long long v58 = v27;
  *((void *)&v58 + 1)  = v42;
  char v59 = v41;
  *(void *)&long long v60 = v34;
  *((void *)&v60 + 1)  = v33;
  unsigned __int16 v51 = v26;
  long long v52 = v22;
  long long v53 = v20;
  char v54 = v12;
  long long v55 = v21;
  if (!_s7SwiftUI4TextV011SleepHealthB0E9ViewModelV2eeoiySbAF_AFtFZ_0(&v56, &v51)) {
    return 0;
  }
  if (v25 == v15 && v24 == v16) {
    return v23 == v17;
  }
  char v18 = sub_1AD9E02D0();
  BOOL result = 0;
  if (v18) {
    return v23 == v17;
  }
  return result;
}

uint64_t sub_1AD941E68()
{
  return sub_1AD941F8C(&qword_1E9A4C8D0, (void (*)(uint64_t))sub_1AD940E64);
}

uint64_t sub_1AD941EB0()
{
  return sub_1AD941F8C(&qword_1E9A4C8D8, (void (*)(uint64_t))sub_1AD941EF8);
}

void sub_1AD941EF8()
{
  if (!qword_1E9A4C8E0)
  {
    sub_1AD940F7C(255);
    sub_1AD941F8C(&qword_1E9A4C8E8, sub_1AD940F7C);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C8E0);
    }
  }
}

uint64_t sub_1AD941F8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

UIFontDescriptor __swiftcall UIFontDescriptor.addingSmallCapsAttributes()()
{
  Class isa = UIFontDescriptor.addingLowercaseSmallCapsAttributes()().super.isa;
  Class v1 = UIFontDescriptor.addingUppercaseSmallCapsAttributes()().super.isa;

  return (UIFontDescriptor)v1;
}

UIFontDescriptor __swiftcall UIFontDescriptor.addingLowercaseSmallCapsAttributes()()
{
  return (UIFontDescriptor)sub_1AD942018(37);
}

UIFontDescriptor __swiftcall UIFontDescriptor.addingUppercaseSmallCapsAttributes()()
{
  return (UIFontDescriptor)sub_1AD942018(38);
}

id sub_1AD942018(uint64_t a1)
{
  sub_1AD9422A4(0, &qword_1E9A4C428, (unint64_t *)&qword_1E9A4C430, type metadata accessor for AttributeName);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1AD9E3070;
  char v4 = (void *)*MEMORY[0x1E4FB0910];
  *(void *)(inited + 32)  = *MEMORY[0x1E4FB0910];
  sub_1AD942244(0, &qword_1E9A4C8F0, MEMORY[0x1E4FBBE00]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16)  = xmmword_1AD9E3070;
  sub_1AD9422A4(0, &qword_1E9A4C8F8, &qword_1E9A4C900, type metadata accessor for FeatureKey);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16)  = xmmword_1AD9E3080;
  uint64_t v7 = (void *)*MEMORY[0x1E4FB28A0];
  *(void *)(v6 + 32)  = *MEMORY[0x1E4FB28A0];
  *(void *)(v6 + 40)  = a1;
  uint64_t v8 = (void *)*MEMORY[0x1E4FB2890];
  *(void *)(v6 + 48)  = *MEMORY[0x1E4FB2890];
  *(void *)(v6 + 56)  = 1;
  id v9 = v4;
  id v10 = v7;
  id v11 = v8;
  *(void *)(v5 + 32)  = sub_1AD863B9C(v6);
  sub_1AD942244(0, &qword_1E9A4C438, MEMORY[0x1E4FBB320]);
  *(void *)(inited + 64)  = v12;
  *(void *)(inited + 40)  = v5;
  sub_1AD863C98(inited);
  type metadata accessor for AttributeName(0);
  sub_1AD94236C((unint64_t *)&unk_1E9A4C450, type metadata accessor for AttributeName);
  uint64_t v13 = (void *)sub_1AD9DF5F0();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v1, sel_fontDescriptorByAddingAttributes_, v13);

  return v14;
}

void sub_1AD942244(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1AD92F108();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1AD9422A4(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_1AD942300(255, a3, a4);
    unint64_t v5 = sub_1AD9E0290();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD942300(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_1AD94236C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id RelativeWeekdayFormatter.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id sub_1AD9423E8()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RelativeWeekdayFormatter()), sel_init);
  qword_1E9A4C908  = (uint64_t)result;
  return result;
}

id static RelativeWeekdayFormatter.shared.getter()
{
  if (qword_1E9A48F58 != -1) {
    swift_once();
  }
  unint64_t v0 = (void *)qword_1E9A4C908;
  return v0;
}

uint64_t sub_1AD942474(uint64_t a1)
{
  char v2 = v1;
  uint64_t v4 = sub_1AD9DCD10();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  MEMORY[0x1F4188790](v4, v5);
  char v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1AD9DCE40();
  uint64_t v58 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v8);
  char v59 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8D8D24(0, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  uint64_t v12 = MEMORY[0x1F4188790](v10 - 8, v11);
  long long v57 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)&v49 - v15;
  id v17 = sub_1AD942B84();
  char v18 = (void *)sub_1AD9DCBB0();
  id v19 = objc_msgSend(v17, sel_stringFromDate_, v18);

  uint64_t v20 = sub_1AD9DF710();
  uint64_t v22 = v21;

  id v23 = sub_1AD942C20();
  uint64_t v24 = (void *)sub_1AD9DCBB0();
  id v25 = objc_msgSend(v23, sel_stringFromDate_, v24);

  uint64_t v26 = sub_1AD9DF710();
  uint64_t v28 = v27;

  if (v20 == v26 && v22 == v28)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    id v30 = sub_1AD942CF4();
    uint64_t v31 = (void *)sub_1AD9DCBB0();
    id v32 = objc_msgSend(v30, sel_stringFromDate_, v31);

    uint64_t v33 = sub_1AD9DF710();
    return v33;
  }
  char v29 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  if (v29) {
    goto LABEL_5;
  }
  uint64_t v53 = v20;
  id v35 = objc_msgSend(v2, sel_calendar);
  if (!v35)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v16, 1, 1, v7);
    goto LABEL_18;
  }
  uint64_t v36 = v35;
  uint64_t v37 = v59;
  sub_1AD9DCDB0();

  uint64_t v38 = (void *)v58;
  unsigned __int16 v50 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  v50(v16, v37, v7);
  unsigned __int16 v51 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v38[7];
  long long v52 = v38 + 7;
  v51(v16, 0, 1, v7);
  uint64_t v39 = (unsigned int (*)(char *, uint64_t, uint64_t))v38[6];
  if (v39(v16, 1, v7) == 1)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    uint64_t result = v51(v57, 1, 1, v7);
    goto LABEL_20;
  }
  char v40 = sub_1AD9DCD60();
  uint64_t v58 = v38[1];
  ((void (*)(char *, uint64_t))v58)(v16, v7);
  if ((v40 & 1) == 0) {
    return v53;
  }
  id v41 = objc_msgSend(v2, sel_calendar);
  if (!v41) {
    goto LABEL_19;
  }
  uint64_t v42 = v41;
  uint64_t v43 = v59;
  sub_1AD9DCDB0();

  uint64_t v44 = v57;
  v50(v57, v43, v7);
  v51(v44, 0, 1, v7);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v39)(v44, 1, v7);
  if (result != 1)
  {
    char v45 = v54;
    sub_1AD9DCCF0();
    BOOL v46 = Calendar.dayPeriod(for:in:)(a1);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v56);
    ((void (*)(char *, uint64_t))v58)(v44, v7);
    BSDayPeriod.simplified.getter(v46, &v60);
    uint64_t v47 = v53;
    if (v60 == 2)
    {
      swift_bridgeObjectRelease();
      if (qword_1EB724E38 != -1) {
        swift_once();
      }
      id v48 = (id)qword_1EB727930;
      uint64_t v47 = sub_1AD9DCA70();

      swift_bridgeObjectRelease();
    }
    return v47;
  }
LABEL_20:
  __break(1u);
  return result;
}

id sub_1AD942B84()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter;
  char v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter);
  }
  else
  {
    uint64_t v4 = (void *)sub_1AD942D84();
    objc_msgSend(v4, sel_setDateStyle_, 1);
    objc_msgSend(v4, sel_setFormattingContext_, 2);
    objc_msgSend(v4, sel_setDoesRelativeDateFormatting_, 1);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1)  = v4;
    id v3 = v4;

    char v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1AD942C20()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter;
  char v2 = *(void **)(v0
                + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter);
  }
  else
  {
    id v4 = sub_1AD942B84();
    objc_msgSend(v4, sel_copy);

    sub_1AD9DFF20();
    swift_unknownObjectRelease();
    sub_1AD943460();
    swift_dynamicCast();
    objc_msgSend(v8, sel_setDoesRelativeDateFormatting_, 0);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1)  = v8;
    id v3 = v8;

    char v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1AD942CF4()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter;
  char v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter);
  }
  else
  {
    id v4 = (void *)sub_1AD942D84();
    uint64_t v5 = (void *)sub_1AD9DF6D0();
    objc_msgSend(v4, sel_setLocalizedDateFormatFromTemplate_, v5);

    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1)  = v4;
    id v3 = v4;

    char v2 = 0;
  }
  id v7 = v2;
  return v3;
}

uint64_t sub_1AD942D84()
{
  uint64_t v1 = v0;
  sub_1AD8D8D24(0, (unint64_t *)&qword_1EB725600, MEMORY[0x1E4F27A78]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v35 - v4;
  uint64_t v6 = sub_1AD9DCE40();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8D8D24(0, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  uint64_t v13 = MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v13, v16);
  id v19 = (char *)&v35 - v18;
  MEMORY[0x1F4188790](v17, v20);
  uint64_t v22 = (char *)&v35 - v21;
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
  id v24 = objc_msgSend(v1, sel_calendar);
  if (v24)
  {
    id v25 = v24;
    sub_1AD9DCDB0();

    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v22, v10, v6);
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v26(v22, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v22, 1, v6) == 1)
    {
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = (void *)sub_1AD9DCDA0();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
    }
  }
  else
  {
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v26(v22, 1, 1, v6);
    uint64_t v27 = 0;
  }
  objc_msgSend(v23, sel_setCalendar_, v27);

  id v28 = objc_msgSend(v1, sel_calendar);
  if (v28)
  {
    char v29 = v28;
    sub_1AD9DCDB0();

    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 1;
  }
  v26(v15, v30, 1, v6);
  sub_1AD8D8D78((uint64_t)v15, (uint64_t)v19);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v19, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1AD9DCDF0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
    uint64_t v32 = sub_1AD9DCD10();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v5, 1, v32) != 1)
    {
      uint64_t v34 = (void *)sub_1AD9DCCD0();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v32);
    }
    objc_msgSend(v23, sel_setLocale_, v34);

    return (uint64_t)v23;
  }
  return result;
}

id RelativeWeekdayFormatter.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter]  = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter]  = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter]  = 0;
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for RelativeWeekdayFormatter();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for RelativeWeekdayFormatter()
{
  return self;
}

id RelativeWeekdayFormatter.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id RelativeWeekdayFormatter.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter]  = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter]  = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter]  = 0;
  v5.receiver  = v1;
  v5.super_class  = (Class)type metadata accessor for RelativeWeekdayFormatter();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id RelativeWeekdayFormatter.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for RelativeWeekdayFormatter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for RelativeWeekdayFormatter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RelativeWeekdayFormatter);
}

unint64_t sub_1AD943460()
{
  unint64_t result = qword_1E9A4C928;
  if (!qword_1E9A4C928)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4C928);
  }
  return result;
}

uint64_t SleepDayModel.__allocating_init(segmentModels:sleepMetrics:)(uint64_t a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  SleepDayModel.init(segmentModels:sleepMetrics:)(a1, a2);
  return v4;
}

uint64_t SleepDayModel.SegmentModel.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1AD9DCCB0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

double SleepDayModel.SegmentModel.relativeInterval.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 24));
}

uint64_t SleepDayModel.SegmentModel.init(relativeInterval:absoluteInterval:preceedingGapDuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  sub_1AD9DCCA0();
  uint64_t v10 = (int *)type metadata accessor for SleepDayModel.SegmentModel(0);
  uint64_t v11 = (double *)(a2 + v10[6]);
  *uint64_t v11 = a3;
  v11[1]  = a4;
  uint64_t v12 = a2 + v10[5];
  uint64_t v13 = sub_1AD9DC7C0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a1, v13);
  *(double *)(a2 + v10[7])  = a5;
  return result;
}

double SleepDayModel.SegmentModel.preceedingGapDuration.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 28));
}

double SleepDayModel.SegmentModel.start.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 24));
}

double SleepDayModel.SegmentModel.end.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 24) + 8);
}

uint64_t SleepDayModel.SegmentModel.startDate.getter()
{
  return sub_1AD9436D4(MEMORY[0x1E4F26E58]);
}

uint64_t SleepDayModel.SegmentModel.endDate.getter()
{
  return sub_1AD9436D4(MEMORY[0x1E4F26E50]);
}

uint64_t sub_1AD9436D4(uint64_t (*a1)(void))
{
  return a1();
}

double SleepDayModel.SegmentModel.duration.getter()
{
  uint64_t v1 = type metadata accessor for SleepDayModel.SegmentModel(0);
  return *(double *)(v0 + *(int *)(v1 + 24) + 8) - *(double *)(v0 + *(int *)(v1 + 24));
}

uint64_t sub_1AD943748@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1AD9DCCB0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

BOOL sub_1AD9437B0()
{
  return *(void *)(*(void *)(v0 + 32) + 16) != 0;
}

uint64_t SleepDayModel.segmentModels.getter()
{
  return swift_bridgeObjectRetain();
}

void *SleepDayModel.sleepMetrics.getter()
{
  uint64_t v1 = *(void **)(v0 + 40);
  id v2 = v1;
  return v1;
}

uint64_t sub_1AD9437F4(uint64_t a1, uint64_t *a2)
{
  sub_1AD9444E0(0);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD944500(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD948774(a1, (uint64_t)v13, (uint64_t (*)(void))sub_1AD944500);
  uint64_t v14 = *a2;
  sub_1AD94883C((uint64_t)v13, (uint64_t)v7, (uint64_t (*)(void))sub_1AD944500);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  uint64_t v15 = v14 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
  swift_beginAccess();
  sub_1AD944520((uint64_t)v7, v15);
  return swift_endAccess();
}

uint64_t sub_1AD943984@<X0>(uint64_t a1@<X8>)
{
  sub_1AD9444E0(0);
  uint64_t v5 = MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = &v17[-v9];
  uint64_t v11 = v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
  swift_beginAccess();
  sub_1AD948774(v11, (uint64_t)v10, (uint64_t (*)(void))sub_1AD9444E0);
  sub_1AD944500(0);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v12) != 1) {
    return sub_1AD94883C((uint64_t)v10, a1, (uint64_t (*)(void))sub_1AD944500);
  }
  sub_1AD9487DC((uint64_t)v10, (uint64_t (*)(void))sub_1AD9444E0);
  uint64_t v15 = swift_bridgeObjectRetain();
  sub_1AD853204(v15, a1);
  swift_bridgeObjectRelease();
  sub_1AD948774(a1, (uint64_t)v7, (uint64_t (*)(void))sub_1AD944500);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v7, 0, 1, v13);
  swift_beginAccess();
  sub_1AD944520((uint64_t)v7, v11);
  return swift_endAccess();
}

uint64_t sub_1AD943B8C(uint64_t a1)
{
  sub_1AD9444E0(0);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD94883C(a1, (uint64_t)v6, (uint64_t (*)(void))sub_1AD944500);
  sub_1AD944500(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  uint64_t v8 = v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
  swift_beginAccess();
  sub_1AD944520((uint64_t)v6, v8);
  return swift_endAccess();
}

void (*sub_1AD943C94(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1  = v3;
  v3[6]  = v1;
  sub_1AD9444E0(0);
  v3[7]  = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  sub_1AD944500(0);
  v3[8]  = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9]  = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10]  = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11]  = v8;
  sub_1AD943984((uint64_t)v8);
  return sub_1AD943D80;
}

void sub_1AD943D80(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 80);
  uint64_t v3 = *(void **)(*(void *)a1 + 88);
  if (a2)
  {
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    uint64_t v8 = v2[6];
    size_t v7 = (void *)v2[7];
    sub_1AD948774(v2[11], v2[10], (uint64_t (*)(void))sub_1AD944500);
    sub_1AD94883C((uint64_t)v4, (uint64_t)v7, (uint64_t (*)(void))sub_1AD944500);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
    uint64_t v9 = v8 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
    swift_beginAccess();
    sub_1AD944520((uint64_t)v7, v9);
    swift_endAccess();
    sub_1AD9487DC((uint64_t)v3, (uint64_t (*)(void))sub_1AD944500);
  }
  else
  {
    uint64_t v10 = v2[8];
    uint64_t v11 = v2[9];
    uint64_t v12 = v2[6];
    size_t v7 = (void *)v2[7];
    sub_1AD94883C(v2[11], (uint64_t)v7, (uint64_t (*)(void))sub_1AD944500);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    uint64_t v13 = v12 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
    swift_beginAccess();
    sub_1AD944520((uint64_t)v7, v13);
    swift_endAccess();
  }
  free(v3);
  free(v4);
  free(v7);
  free(v2);
}

double sub_1AD943F2C()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration);
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration + 8) & 1) == 0) {
    return *(double *)v1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  double v3 = sub_1AD8539C4(v2);
  swift_bridgeObjectRelease();
  *(double *)uint64_t v1 = v3;
  v1[8]  = 0;
  return v3;
}

void sub_1AD943F9C(double a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration;
  *(double *)uint64_t v2 = a1;
  *(unsigned char *)(v2 + 8)  = 0;
}

void *(*sub_1AD943FB4(uint64_t a1))(void *result)
{
  *(void *)(a1 + 8)  = v1;
  *(double *)a1  = sub_1AD943F2C();
  return sub_1AD943FFC;
}

void *sub_1AD943FFC(void *result)
{
  uint64_t v1 = result[1] + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration;
  *(void *)uint64_t v1 = *result;
  *(unsigned char *)(v1 + 8)  = 0;
  return result;
}

void *SleepDayModel.init(segmentModels:sleepMetrics:)(uint64_t a1, void *a2)
{
  double v3 = v2;
  sub_1AD86E5A4();
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1AD9DFD30();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD841744();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v32 = v15;
  uint64_t v33 = v16;
  MEMORY[0x1F4188790](v15, v17);
  id v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = (id)HKSPCurrentDateProvider();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16)  = v20;
  v3[2]  = sub_1AD838788;
  v3[3]  = v21;
  uint64_t v22 = (char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
  sub_1AD944500(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  id v24 = (char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration;
  *(void *)id v24 = 0;
  v24[8]  = 1;
  *(void *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel_significantTimeChangeObserver)  = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___timeFormatter)  = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithYearFormatter)  = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithoutYearFormatter)  = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___durationFormatter)  = 0;
  void v3[4] = a1;
  v3[5]  = a2;
  id v25 = self;
  id v31 = a2;
  id v26 = objc_msgSend(v25, sel_defaultCenter);
  sub_1AD9DFD40();

  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  id v34 = (id)sub_1AD9DFCA0();
  uint64_t v27 = sub_1AD9DFC90();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v9, 1, 1, v27);
  sub_1AD944698(&qword_1EB725B80, MEMORY[0x1E4F27FC8]);
  sub_1AD944584((unint64_t *)&qword_1EB724D40, (unint64_t *)&qword_1EB724D50);
  sub_1AD9DDC20();
  sub_1AD9487DC((uint64_t)v9, (uint64_t (*)(void))sub_1AD86E5A4);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  swift_allocObject();
  swift_weakInit();
  sub_1AD944698((unint64_t *)&unk_1EB724CF0, (void (*)(uint64_t))sub_1AD841744);
  uint64_t v28 = v32;
  uint64_t v29 = sub_1AD9DDC40();

  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v28);
  *(void *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel_significantTimeChangeObserver)  = v29;
  swift_release();
  return v3;
}

uint64_t type metadata accessor for SleepDayModel.SegmentModel(uint64_t a1)
{
  return sub_1AD8372AC(a1, qword_1EB7257A0);
}

void sub_1AD9444E0(uint64_t a1)
{
}

void sub_1AD944500(uint64_t a1)
{
}

uint64_t sub_1AD944520(uint64_t a1, uint64_t a2)
{
  sub_1AD9444E0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD944584(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD837214(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD9445C8()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1AD944600()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD944638()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1AD9446E0();
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD944690()
{
  return sub_1AD944638();
}

uint64_t sub_1AD944698(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD9446E0()
{
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1AD9DD550();
  __swift_project_value_buffer(v0, (uint64_t)qword_1EB725958);
  uint64_t v1 = sub_1AD9DD530();
  os_log_type_t v2 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v1, v2))
  {
    double v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v8 = v4;
    *(_DWORD *)double v3 = 136446210;
    uint64_t v5 = sub_1AD9E04F0();
    sub_1AD838978(v5, v6, &v8);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v1, v2, "[%{public}s] significant time changed", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v4, -1, -1);
    MEMORY[0x1B3E6D1A0](v3, -1, -1);
  }

  ResetLocaleDependentFormatters();
  type metadata accessor for SleepDayModel(0);
  sub_1AD944698(&qword_1EB725860, (void (*)(uint64_t))type metadata accessor for SleepDayModel);
  sub_1AD9DDAB0();
  sub_1AD9DDB50();
  return swift_release();
}

id sub_1AD9448EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AD9DCD10();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  unint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___timeFormatter;
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___timeFormatter);
  if (v8)
  {
    id v9 = *(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___timeFormatter);
  }
  else
  {
    sub_1AD9DCCF0();
    char v10 = HKSPIsRemoveSpacesForTimeFormatEnabled();
    uint64_t v11 = self;
    uint64_t v12 = (void *)sub_1AD9DF6D0();
    uint64_t v13 = (void *)sub_1AD9DCCD0();
    id v14 = objc_msgSend(v11, sel_dateFormatFromTemplate_options_locale_, v12, 0, v13);

    if (v14)
    {
      uint64_t v15 = sub_1AD9DF710();
      uint64_t v17 = v16;
    }
    else
    {
      uint64_t v17 = 0xE500000000000000;
      uint64_t v15 = 0x616D6D3A68;
    }
    id v18 = sub_1AD99B1D4(v15, v17, (uint64_t)v6, v10);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    id v19 = *(void **)(v1 + v7);
    *(void *)(v1 + v7)  = v18;
    id v9 = v18;

    uint64_t v8 = 0;
  }
  id v20 = v8;
  return v9;
}

id sub_1AD944AAC()
{
  return sub_1AD944AD4(&OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithYearFormatter, (SEL *)&selRef_hk_dayIntervalFormatter);
}

id sub_1AD944AC0()
{
  return sub_1AD944AD4(&OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithoutYearFormatter, (SEL *)&selRef_hk_mediumMonthDayDateIntervalFormatter);
}

id sub_1AD944AD4(uint64_t *a1, SEL *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
LABEL_5:
    id v8 = v4;
    return v5;
  }
  id result = [self *a2];
  if (result)
  {
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3)  = result;
    id v5 = result;

    uint64_t v4 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_1AD944B54()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___durationFormatter;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___durationFormatter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___durationFormatter);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
    objc_msgSend(v4, sel_setAllowedUnits_, 96);
    objc_msgSend(v4, sel_setUnitsStyle_, 5);
    objc_msgSend(v4, sel_setFormattingContext_, 2);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1)  = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_1AD944C04()
{
  return sub_1AD944C4C(MEMORY[0x1E4F26E58]);
}

void sub_1AD944C1C()
{
}

uint64_t sub_1AD944C34()
{
  return sub_1AD944C4C(MEMORY[0x1E4F26E50]);
}

uint64_t sub_1AD944C4C(void (*a1)(void))
{
  uint64_t v2 = sub_1AD9DCC70();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  id v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD944500(0);
  MEMORY[0x1F4188790](v7 - 8, v8);
  char v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AD9DC7C0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD943984((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1AD9487DC((uint64_t)v10, (uint64_t (*)(void))sub_1AD944500);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
    id v17 = sub_1AD9448EC();
    a1();
    id v18 = (void *)sub_1AD9DCBB0();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    id v19 = objc_msgSend(v17, sel_stringFromDate_, v18);

    uint64_t v16 = sub_1AD9DF710();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  return v16;
}

void sub_1AD944ED4()
{
}

void sub_1AD944EEC(void (*a1)(void))
{
  a1();
  id v1 = sub_1AD9448EC();
  sub_1AD9DF7C0();
  swift_bridgeObjectRelease();
}

id sub_1AD944F60()
{
  sub_1AD944500(0);
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1AD9DC7C0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD943984((uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    uint64_t v9 = 2957357;
    sub_1AD9487DC((uint64_t)v3, (uint64_t (*)(void))sub_1AD944500);
    return (id)v9;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
  id result = objc_msgSend(self, sel_hk_hourMinuteOnlyDateIntervalFormatter);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = (void *)sub_1AD9DC720();
    id v13 = objc_msgSend(v11, sel_stringFromDateInterval_, v12);

    if (v13)
    {
      uint64_t v9 = sub_1AD9DF710();
    }
    else
    {
      uint64_t v9 = 2957357;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return (id)v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD945184()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AD9DCE20();
  uint64_t v54 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v3);
  unsigned __int16 v51 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AD9DCC70();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  uint64_t v7 = MEMORY[0x1F4188790](v5, v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v13 = sub_1AD9DCE40();
  uint64_t v49 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD944500(0);
  MEMORY[0x1F4188790](v17 - 8, v18);
  id v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1AD9DC7C0();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21, v23);
  id v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD943984((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
  {
    uint64_t v47 = v21;
    uint64_t v48 = v2;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v25, v20, v21);
    id v27 = sub_1AD944AC0();
    uint64_t v28 = (void *)sub_1AD9DC720();
    id v29 = objc_msgSend(v27, sel_stringFromDateInterval_, v28);

    uint64_t v46 = v22;
    if (v29)
    {
      uint64_t v45 = sub_1AD9DF710();
      uint64_t v31 = v30;
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v31 = 0;
    }
    sub_1AD9DCE10();
    sub_1AD9DC780();
    uint64_t v32 = *(void (**)(uint64_t))(v1 + 16);
    uint64_t v33 = swift_retain();
    v32(v33);
    swift_release();
    uint64_t v34 = v54;
    uint64_t v35 = v51;
    uint64_t v36 = v48;
    (*(void (**)(char *, void, uint64_t))(v54 + 104))(v51, *MEMORY[0x1E4F27C20], v48);
    uint64_t v37 = sub_1AD9DCE00();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
    uint64_t v38 = v53;
    uint64_t v39 = *(void (**)(char *, uint64_t))(v52 + 8);
    v39(v9, v53);
    v39(v12, v38);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v50);
    if (v37)
    {
      swift_bridgeObjectRelease();
      id v40 = sub_1AD944AAC();
      id v41 = (void *)sub_1AD9DC720();
      id v42 = objc_msgSend(v40, sel_stringFromDateInterval_, v41);

      uint64_t v43 = v46;
      if (v42)
      {
        uint64_t v26 = sub_1AD9DF710();

LABEL_10:
        (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v47);
        return v26;
      }
    }
    else
    {
      uint64_t v26 = v45;
      uint64_t v43 = v46;
      if (v31) {
        goto LABEL_10;
      }
    }
    uint64_t v26 = 2957357;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v47);
    swift_bridgeObjectRelease();
    return v26;
  }
  uint64_t v26 = 2957357;
  sub_1AD9487DC((uint64_t)v20, (uint64_t (*)(void))sub_1AD944500);
  return v26;
}

void sub_1AD945698()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = objc_msgSend(v1, sel_averageSleepDuration);
    if (v2)
    {
      uint64_t v3 = v2;
      objc_msgSend(v2, sel__value);
      double v5 = v4;

      if (v5 > 0.0)
      {
        id v6 = sub_1AD944B54();
        id v7 = objc_msgSend(v6, sel_stringFromTimeInterval_, v5);

        if (v7)
        {
          sub_1AD9DF710();
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

void sub_1AD945760()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = objc_msgSend(v1, sel_averageSleepDuration);
    if (v2)
    {
      uint64_t v3 = v2;
      objc_msgSend(v2, sel__value);
      double v5 = v4;

      if (v5 > 0.0)
      {
        id v6 = sub_1AD944B54();
        id v7 = objc_msgSend(v6, sel_stringFromTimeInterval_, v5);

        if (!v7)
        {
          __break(1u);
          return;
        }
        sub_1AD9DF710();
      }
    }
  }
  sub_1AD9DF7B0();
  swift_bridgeObjectRelease();
}

uint64_t SleepDayModel.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  sub_1AD9487DC(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval, (uint64_t (*)(void))sub_1AD9444E0);
  swift_release();

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithoutYearFormatter));

  return v0;
}

uint64_t SleepDayModel.__deallocating_deinit()
{
  SleepDayModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1AD945944@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SleepDayModel(0);
  uint64_t result = sub_1AD9DDAB0();
  *a1  = result;
  return result;
}

uint64_t HKSleepDaySummary.sleepDayModel.getter()
{
  unint64_t v1 = sub_1AD945A90();
  id v2 = self;
  sub_1AD870B1C();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16)  = xmmword_1AD9E71F0;
  *(void *)(v3 + 32)  = v0;
  sub_1AD9DF870();
  sub_1AD837214(0, (unint64_t *)&qword_1EB725340);
  id v4 = v0;
  double v5 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v2, sel_sleepMetricsForDaySummaries_, v5);

  type metadata accessor for SleepDayModel(0);
  uint64_t v7 = swift_allocObject();
  SleepDayModel.init(segmentModels:sleepMetrics:)(v1, v6);
  return v7;
}

unint64_t sub_1AD945A90()
{
  uint64_t v137 = type metadata accessor for SleepDayModel.SegmentModel(0);
  uint64_t v130 = *(void *)(v137 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v137, v1);
  uint64_t v129 = (uint64_t)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v128 = (char *)&v106 - v6;
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  uint64_t v120 = (uint64_t)&v106 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v119 = (uint64_t)&v106 - v12;
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v106 - v14;
  uint64_t v125 = sub_1AD9DCC70();
  unint64_t v16 = *(void *)(v125 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v125, v17);
  id v134 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18, v20);
  id v133 = (char *)&v106 - v21;
  sub_1AD944500(0);
  MEMORY[0x1F4188790](v22 - 8, v23);
  id v25 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1AD9DC7C0();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v26, v28);
  uint64_t v115 = (char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v29, v31);
  id v132 = (char *)&v106 - v33;
  MEMORY[0x1F4188790](v32, v34);
  uint64_t v36 = (char *)&v106 - v35;
  sub_1AD9467F0((uint64_t)v25);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  uint64_t v139 = v26;
  if (v37(v25, 1, v26) == 1)
  {
    sub_1AD9487DC((uint64_t)v25, (uint64_t (*)(void))sub_1AD944500);
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v106 = v27;
  uint64_t v39 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
  CGFloat v124 = v36;
  uint64_t v114 = v27 + 32;
  double v113 = v39;
  v39((uint64_t)v36, v25, v139);
  uint64_t v40 = sub_1AD948378();
  id v41 = objc_msgSend(v0, sel_periods);
  sub_1AD837214(0, &qword_1EB725BE0);
  unint64_t v42 = sub_1AD9DF860();

  unint64_t v43 = v42;
  unint64_t v111 = v42;
  CGFloat v126 = v15;
  if (v42 >> 62) {
    goto LABEL_59;
  }
  uint64_t v44 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  if (v44)
  {
    unint64_t v110 = v43 & 0xC000000000000001;
    uint64_t v108 = v43 & 0xFFFFFFFFFFFFFF8;
    unint64_t v107 = v43 + 32;
    uint64_t v45 = v40 + 56;
    long long v131 = (void (**)(char *, uint64_t))(v106 + 8);
    char v123 = (void (**)(char *, uint64_t))(v16 + 8);
    unint64_t v16 = 0;
    unint64_t v38 = MEMORY[0x1E4FBC860];
    uint64_t v46 = &selRef_animateWithDuration_animations_;
    uint64_t v109 = v44;
    uint64_t v122 = v40;
    uint64_t v121 = v40 + 56;
    while (1)
    {
      if (v110)
      {
        id v47 = (id)MEMORY[0x1B3E6BFF0](v16, v43);
      }
      else
      {
        if (v16 >= *(void *)(v108 + 16)) {
          goto LABEL_58;
        }
        id v47 = *(id *)(v107 + 8 * v16);
      }
      id v116 = v47;
      BOOL v48 = __OFADD__(v16++, 1);
      if (v48) {
        goto LABEL_57;
      }
      unint64_t v112 = v16;
      id v49 = objc_msgSend(v116, sel_segments);
      sub_1AD837214(0, &qword_1EB725BE8);
      unint64_t v50 = sub_1AD9DF860();

      if (v50 >> 62) {
        break;
      }
      uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v51) {
        goto LABEL_15;
      }
LABEL_7:

      swift_bridgeObjectRelease();
      unint64_t v16 = v112;
      unint64_t v43 = v111;
      if (v112 == v109) {
        goto LABEL_52;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (!v51) {
      goto LABEL_7;
    }
LABEL_15:
    unint64_t v16 = 0;
    unint64_t v142 = v50 & 0xC000000000000001;
    uint64_t v136 = v50 & 0xFFFFFFFFFFFFFF8;
    unint64_t v135 = v50 + 32;
    unint64_t v127 = v50;
    uint64_t v140 = v51;
    while (1)
    {
      if (v142)
      {
        id v52 = (id)MEMORY[0x1B3E6BFF0](v16, v50);
        BOOL v48 = __OFADD__(v16++, 1);
        if (v48) {
          goto LABEL_54;
        }
      }
      else
      {
        if (v16 >= *(void *)(v136 + 16)) {
          goto LABEL_55;
        }
        id v52 = *(id *)(v135 + 8 * v16);
        BOOL v48 = __OFADD__(v16++, 1);
        if (v48)
        {
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          swift_bridgeObjectRetain();
          uint64_t v44 = sub_1AD9E0190();
          swift_bridgeObjectRelease();
          unint64_t v43 = v111;
          goto LABEL_5;
        }
      }
      uint64_t v53 = v52;
      id v54 = [v52 v46[282]];
      if (*(void *)(v40 + 16))
      {
        id v55 = v54;
        id v143 = v53;
        sub_1AD9E03A0();
        sub_1AD9E03B0();
        uint64_t v56 = sub_1AD9E03E0();
        uint64_t v57 = -1 << *(unsigned char *)(v40 + 32);
        unint64_t v58 = v56 & ~v57;
        if ((*(void *)(v45 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v58))
        {
          unint64_t v141 = v38;
          uint64_t v59 = *(void *)(v40 + 48);
          uint64_t v51 = v140;
          if (*(id *)(v59 + 8 * v58) != v55)
          {
            uint64_t v60 = ~v57;
            while (1)
            {
              unint64_t v58 = (v58 + 1) & v60;
              if (((*(void *)(v45 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v58) & 1) == 0) {
                break;
              }
              if (*(id *)(v59 + 8 * v58) == v55) {
                goto LABEL_30;
              }
            }

            unint64_t v38 = v141;
            goto LABEL_17;
          }
LABEL_30:
          id v61 = objc_msgSend(v143, sel_dateInterval);
          uint64_t v62 = v132;
          sub_1AD9DC740();

          uint64_t v63 = v133;
          sub_1AD9DC780();
          long long v138 = *v131;
          v138(v62, v139);
          uint64_t v64 = v134;
          sub_1AD9DC780();
          sub_1AD9DCB90();
          double v66 = v65;
          uint64_t v67 = *v123;
          uint64_t v68 = v125;
          (*v123)(v64, v125);
          v67(v63, v68);
          sub_1AD9DC7A0();
          double v70 = v66 / v69;
          id v71 = objc_msgSend(v143, sel_dateInterval);
          sub_1AD9DC740();

          sub_1AD9DC750();
          long long v72 = v138;
          v138(v62, v139);
          long long v73 = v72;
          sub_1AD9DC780();
          sub_1AD9DCB90();
          double v75 = v74;
          v67(v64, v68);
          v67(v63, v68);
          sub_1AD9DC7A0();
          unint64_t v38 = v141;
          uint64_t v76 = *(void *)(v141 + 16);
          double v78 = v75 / v77;
          if (v76)
          {
            unint64_t v79 = (*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80);
            uint64_t v80 = *(void *)(v130 + 72);
            uint64_t v40 = (uint64_t)v126;
            sub_1AD948774(v141 + v79 + v80 * (v76 - 1), (uint64_t)v126, type metadata accessor for SleepDayModel.SegmentModel);
            uint64_t v81 = v40 + *(int *)(v137 + 24);
            double v82 = *(double *)(v81 + 8);
            if (v82 == v70)
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v83 = *(void *)(v38 + 16);
                if (!v83) {
                  goto LABEL_56;
                }
              }
              else
              {
                unint64_t v38 = sub_1AD947F80(v38);
                uint64_t v83 = *(void *)(v38 + 16);
                if (!v83) {
                  goto LABEL_56;
                }
              }
              uint64_t v84 = v83 - 1;
              unint64_t v118 = v79;
              uint64_t v117 = v80;
              sub_1AD9487DC(v38 + v79 + (v83 - 1) * v80, type metadata accessor for SleepDayModel.SegmentModel);
              *(void *)(v38 + 16)  = v84;
              uint64_t v85 = *(void *)v81;
              long long v86 = (int *)v137;
              id v87 = objc_msgSend(v143, sel_dateInterval);
              uint64_t v88 = v115;
              sub_1AD9DC740();

              unint64_t v141 = v38;
              sub_1AD9DC780();
              sub_1AD9DC750();
              uint64_t v89 = v132;
              uint64_t v90 = v139;
              sub_1AD9DC760();
              v73(v88, v90);
              uint64_t v91 = *(void *)(v40 + v86[7]);
              uint64_t v92 = v119;
              sub_1AD9DCCA0();
              uint64_t v93 = v92 + v86[6];
              *(void *)uint64_t v93 = v85;
              *(double *)(v93 + 8)  = v78;
              uint64_t v94 = v90;
              unint64_t v38 = v141;
              v113(v92 + v86[5], v89, v94);
              *(void *)(v92 + v86[7])  = v91;
              sub_1AD948774(v92, v120, type metadata accessor for SleepDayModel.SegmentModel);
              unint64_t v96 = *(void *)(v38 + 16);
              unint64_t v95 = *(void *)(v38 + 24);
              if (v96 >= v95 >> 1) {
                unint64_t v38 = sub_1AD99AF44(v95 > 1, v96 + 1, 1, v38);
              }
              uint64_t v40 = v122;
              uint64_t v45 = v121;
              uint64_t v46 = &selRef_animateWithDuration_animations_;
              unint64_t v50 = v127;
              *(void *)(v38 + 16)  = v96 + 1;
              sub_1AD94883C(v120, v38 + v118 + v96 * v117, type metadata accessor for SleepDayModel.SegmentModel);

              sub_1AD9487DC(v119, type metadata accessor for SleepDayModel.SegmentModel);
              uint64_t v97 = (uint64_t)v126;
              goto LABEL_46;
            }
            sub_1AD9487DC(v40, type metadata accessor for SleepDayModel.SegmentModel);
            double v98 = v70 - v82;
          }
          else
          {
            double v98 = 0.0;
          }
          uint64_t v40 = v122;
          uint64_t v45 = v121;
          uint64_t v46 = &selRef_animateWithDuration_animations_;
          unint64_t v50 = v127;
          id v99 = objc_msgSend(v143, sel_dateInterval);
          uint64_t v100 = v137;
          uint64_t v101 = (uint64_t)v128;
          sub_1AD9DC740();

          sub_1AD9DCCA0();
          uint64_t v102 = (double *)(v101 + *(int *)(v100 + 24));
          double *v102 = v70;
          v102[1]  = v78;
          *(double *)(v101 + *(int *)(v100 + 28))  = v98;
          sub_1AD948774(v101, v129, type metadata accessor for SleepDayModel.SegmentModel);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v38 = sub_1AD99AF44(0, *(void *)(v38 + 16) + 1, 1, v38);
          }
          unint64_t v104 = *(void *)(v38 + 16);
          unint64_t v103 = *(void *)(v38 + 24);
          if (v104 >= v103 >> 1) {
            unint64_t v38 = sub_1AD99AF44(v103 > 1, v104 + 1, 1, v38);
          }
          *(void *)(v38 + 16)  = v104 + 1;
          sub_1AD94883C(v129, v38+ ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80))+ *(void *)(v130 + 72) * v104, type metadata accessor for SleepDayModel.SegmentModel);

          uint64_t v97 = (uint64_t)v128;
LABEL_46:
          sub_1AD9487DC(v97, type metadata accessor for SleepDayModel.SegmentModel);
          uint64_t v51 = v140;
          goto LABEL_17;
        }

        uint64_t v51 = v140;
      }
      else
      {
      }
LABEL_17:
      if (v16 == v51) {
        goto LABEL_7;
      }
    }
  }
  unint64_t v38 = MEMORY[0x1E4FBC860];
LABEL_52:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v124, v139);
  return v38;
}

uint64_t sub_1AD9467F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v96 = a1;
  uint64_t v2 = sub_1AD9DCC70();
  uint64_t v110 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v93 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  uint64_t v92 = (char *)&v90 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v91 = (char *)&v90 - v12;
  MEMORY[0x1F4188790](v11, v13);
  unint64_t v95 = (char *)&v90 - v14;
  uint64_t v119 = sub_1AD9DC7C0();
  uint64_t v99 = *(void *)(v119 - 8);
  MEMORY[0x1F4188790](v119, v15);
  unint64_t v118 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8DEDF0(0);
  uint64_t v19 = MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v94 = (uint64_t)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v97 = (uint64_t)&v90 - v23;
  uint64_t v25 = MEMORY[0x1F4188790](v22, v24);
  uint64_t v117 = (char *)&v90 - v26;
  uint64_t v28 = MEMORY[0x1F4188790](v25, v27);
  uint64_t v109 = (uint64_t)&v90 - v29;
  uint64_t v31 = MEMORY[0x1F4188790](v28, v30);
  uint64_t v33 = (char *)&v90 - v32;
  MEMORY[0x1F4188790](v31, v34);
  uint64_t v98 = v3;
  uint64_t v35 = *(void (**)(void))(v3 + 56);
  uint64_t v120 = (uint64_t)&v90 - v36;
  v35();
  unint64_t v111 = v33;
  uint64_t v115 = v35;
  uint64_t v116 = v3 + 56;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v35)(v33, 1, 1, v2);
  uint64_t v37 = sub_1AD948378();
  id v38 = objc_msgSend(v1, sel_periods);
  sub_1AD837214(0, &qword_1EB725BE0);
  unint64_t v39 = sub_1AD9DF860();

  unint64_t v102 = v39;
  if (v39 >> 62) {
    goto LABEL_35;
  }
  uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v40)
  {
LABEL_3:
    unint64_t v41 = 0;
    unint64_t v104 = v102 & 0xC000000000000001;
    uint64_t v101 = v102 & 0xFFFFFFFFFFFFFF8;
    unint64_t v100 = v102 + 32;
    uint64_t v42 = v37 + 56;
    uint64_t v108 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
    uint64_t v114 = (void (**)(char *, uint64_t))(v99 + 8);
    unint64_t v43 = &selRef_animateWithDuration_animations_;
    uint64_t v103 = v40;
    uint64_t v107 = v37 + 56;
    while (1)
    {
      if (v104)
      {
        id v44 = (id)MEMORY[0x1B3E6BFF0](v41, v102);
      }
      else
      {
        if (v41 >= *(void *)(v101 + 16)) {
          goto LABEL_34;
        }
        id v44 = *(id *)(v100 + 8 * v41);
      }
      uint64_t v45 = v44;
      BOOL v46 = __OFADD__(v41, 1);
      unint64_t v47 = v41 + 1;
      if (v46) {
        goto LABEL_33;
      }
      id v48 = objc_msgSend(v44, sel_segments);
      sub_1AD837214(0, &qword_1EB725BE8);
      unint64_t v49 = sub_1AD9DF860();

      unint64_t v106 = v47;
      id v105 = v45;
      if (v49 >> 62) {
        break;
      }
      uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v50) {
        goto LABEL_12;
      }
LABEL_4:

      swift_bridgeObjectRelease();
      unint64_t v41 = v106;
      if (v106 == v103) {
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (!v50) {
      goto LABEL_4;
    }
LABEL_12:
    unint64_t v51 = 0;
    unint64_t v121 = v49 & 0xC000000000000001;
    unint64_t v112 = v49 + 32;
    uint64_t v113 = v49 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      while (1)
      {
        if (v121)
        {
          id v52 = (id)MEMORY[0x1B3E6BFF0](v51, v49);
        }
        else
        {
          if (v51 >= *(void *)(v113 + 16)) {
            goto LABEL_32;
          }
          id v52 = *(id *)(v112 + 8 * v51);
        }
        uint64_t v53 = v52;
        BOOL v46 = __OFADD__(v51++, 1);
        if (v46)
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          swift_bridgeObjectRetain();
          uint64_t v40 = sub_1AD9E0190();
          swift_bridgeObjectRelease();
          if (!v40) {
            goto LABEL_36;
          }
          goto LABEL_3;
        }
        id v54 = [v52 v43[282]];
        if (*(void *)(v37 + 16))
        {
          id v55 = v54;
          sub_1AD9E03A0();
          sub_1AD9E03B0();
          uint64_t v56 = sub_1AD9E03E0();
          uint64_t v57 = -1 << *(unsigned char *)(v37 + 32);
          unint64_t v58 = v56 & ~v57;
          if ((*(void *)(v42 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v58)) {
            break;
          }
        }
LABEL_13:

        if (v51 == v50) {
          goto LABEL_4;
        }
      }
      uint64_t v59 = *(void *)(v37 + 48);
      if (*(id *)(v59 + 8 * v58) != v55)
      {
        uint64_t v60 = ~v57;
        do
        {
          unint64_t v58 = (v58 + 1) & v60;
          if (((*(void *)(v42 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v58) & 1) == 0) {
            goto LABEL_13;
          }
        }
        while (*(id *)(v59 + 8 * v58) != v55);
      }
      uint64_t v61 = v50;
      unint64_t v62 = v49;
      uint64_t v63 = v43;
      uint64_t v64 = v109;
      sub_1AD948774(v120, v109, (uint64_t (*)(void))sub_1AD8DEDF0);
      uint64_t v65 = v110;
      int v66 = (*v108)(v64, 1, v110);
      sub_1AD9487DC(v64, (uint64_t (*)(void))sub_1AD8DEDF0);
      if (v66 == 1)
      {
        id v67 = objc_msgSend(v53, sel_dateInterval);
        uint64_t v68 = v118;
        sub_1AD9DC740();

        uint64_t v69 = (uint64_t)v117;
        sub_1AD9DC780();
        (*v114)(v68, v119);
        uint64_t v70 = v120;
        sub_1AD9487DC(v120, (uint64_t (*)(void))sub_1AD8DEDF0);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v115)(v69, 0, 1, v65);
        sub_1AD94883C(v69, v70, (uint64_t (*)(void))sub_1AD8DEDF0);
      }
      id v71 = objc_msgSend(v53, sel_dateInterval);
      long long v72 = v118;
      sub_1AD9DC740();

      uint64_t v73 = (uint64_t)v117;
      sub_1AD9DC750();

      (*v114)(v72, v119);
      uint64_t v74 = (uint64_t)v111;
      sub_1AD9487DC((uint64_t)v111, (uint64_t (*)(void))sub_1AD8DEDF0);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v115)(v73, 0, 1, v65);
      sub_1AD94883C(v73, v74, (uint64_t (*)(void))sub_1AD8DEDF0);
      unint64_t v43 = v63;
      unint64_t v49 = v62;
      uint64_t v50 = v61;
      uint64_t v42 = v107;
      if (v51 == v50) {
        goto LABEL_4;
      }
    }
  }
LABEL_36:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v75 = v120;
  uint64_t v76 = v97;
  sub_1AD948774(v120, v97, (uint64_t (*)(void))sub_1AD8DEDF0);
  double v77 = (void *)v98;
  double v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  uint64_t v79 = v110;
  if (v78(v76, 1, v110) == 1)
  {
    uint64_t v80 = v96;
  }
  else
  {
    uint64_t v81 = (void (*)(char *, uint64_t, uint64_t))v77[4];
    double v82 = v95;
    v81(v95, v76, v79);
    uint64_t v76 = v94;
    sub_1AD948774((uint64_t)v111, v94, (uint64_t (*)(void))sub_1AD8DEDF0);
    int v83 = v78(v76, 1, v79);
    uint64_t v80 = v96;
    if (v83 != 1)
    {
      long long v86 = v91;
      v81(v91, v76, v79);
      id v87 = (void (*)(char *, char *, uint64_t))v77[2];
      v87(v92, v82, v79);
      v87(v93, v86, v79);
      sub_1AD9DC760();
      uint64_t v88 = (void (*)(char *, uint64_t))v77[1];
      v88(v86, v79);
      v88(v82, v79);
      uint64_t v84 = 0;
      uint64_t v76 = v120;
      uint64_t v85 = (uint64_t)v111;
      goto LABEL_42;
    }
    ((void (*)(char *, uint64_t))v77[1])(v82, v79);
    uint64_t v75 = v120;
  }
  sub_1AD9487DC((uint64_t)v111, (uint64_t (*)(void))sub_1AD8DEDF0);
  uint64_t v84 = 1;
  uint64_t v85 = v75;
LABEL_42:
  sub_1AD9487DC(v85, (uint64_t (*)(void))sub_1AD8DEDF0);
  sub_1AD9487DC(v76, (uint64_t (*)(void))sub_1AD8DEDF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56))(v80, v84, 1, v119);
}

uint64_t _s13SleepHealthUI0A8DayModelC07SegmentE0V16absoluteInterval10Foundation04DateH0Vvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 20);
  uint64_t v4 = sub_1AD9DC7C0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for SleepDayModel(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1EB725868);
}

uint64_t sub_1AD947320()
{
  return sub_1AD944698(&qword_1E9A4C930, MEMORY[0x1E4F27990]);
}

uint64_t sub_1AD947368@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD943984(a1);
}

void sub_1AD947390(double *a1@<X8>)
{
  *a1  = sub_1AD943F2C();
}

void *sub_1AD9473BC(void *result, void *a2)
{
  uint64_t v2 = *a2 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration;
  *(void *)uint64_t v2 = *result;
  *(unsigned char *)(v2 + 8)  = 0;
  return result;
}

uint64_t sub_1AD9473DC()
{
  return type metadata accessor for SleepDayModel(0);
}

void sub_1AD9473E4()
{
  sub_1AD9444E0(319);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SleepDayModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepDayModel);
}

uint64_t dispatch thunk of SleepDayModel.hasData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SleepDayModel.sleepInterval.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SleepDayModel.sleepInterval.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SleepDayModel.sleepInterval.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDuration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDuration.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDuration.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SleepDayModel.__allocating_init(segmentModels:sleepMetrics:)()
{
  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of SleepDayModel.sleepStartTimeText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of SleepDayModel.sleepStartTimeAttributedString.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of SleepDayModel.sleepEndTimeText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of SleepDayModel.sleepEndTimeAttributedString.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of SleepDayModel.sleepStartAndEndTimeText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDateRangeText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDurationText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDurationAttributedString.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepDayModel.SegmentModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AD9DCCB0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1AD9DC7C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *(_OWORD *)((char *)a1 + a3[6])  = *(_OWORD *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v12)  = *(uint64_t *)((char *)a2 + v12);
  }
  return a1;
}

uint64_t destroy for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DCCB0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_1AD9DC7C0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

uint64_t initializeWithCopy for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1AD9DCCB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_OWORD *)(a1 + a3[6])  = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + v11)  = *(void *)(a2 + v11);
  return a1;
}

uint64_t assignWithCopy for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1AD9DCCB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1]  = v13[1];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1AD9DCCB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_OWORD *)(a1 + a3[6])  = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + v11)  = *(void *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1AD9DCCB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_OWORD *)(a1 + a3[6])  = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + v11)  = *(void *)(a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD947C7C);
}

uint64_t sub_1AD947C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCCB0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_1AD9DC7C0();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD947D88);
}

uint64_t sub_1AD947D88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1AD9DCCB0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_1AD9DC7C0();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_1AD947E8C()
{
  uint64_t result = sub_1AD9DCCB0();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1AD9DC7C0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1AD947F6C(unint64_t a1)
{
  return sub_1AD99AC18(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1AD947F80(unint64_t a1)
{
  return sub_1AD99AF44(0, *(void *)(a1 + 16), 0, a1);
}

int64_t sub_1AD947F94(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_1AD948078(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x1B3E6BF40](a1, a2, v7);
      sub_1AD837214(0, &qword_1E9A49E48);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (sub_1AD9DFF70() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_1AD9DFF80();
  sub_1AD837214(0, &qword_1E9A49E48);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v17;
  swift_unknownObjectRelease();
  uint64_t v8 = sub_1AD9DFDF0();
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = sub_1AD9DFE00();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_26;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v14 = sub_1AD9DFE00();
    }
    while ((v14 & 1) == 0);
  }

LABEL_20:
  uint64_t v15 = *(void **)(*(void *)(a4 + 48) + 8 * v6);
  id v16 = v15;
}

uint64_t sub_1AD9482F0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1AD948378()
{
  uint64_t v0 = HKCategoryValueSleepAnalysisAsleepValues();
  sub_1AD837214(0, &qword_1E9A49E48);
  sub_1AD944584(&qword_1E9A4C938, &qword_1E9A49E48);
  uint64_t v1 = sub_1AD9DF9B0();

  unint64_t v2 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = sub_1AD9DFF90();
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_21:
    uint64_t v24 = sub_1AD91F2CC(v7);
    swift_bridgeObjectRelease();
    return v24;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v29 = MEMORY[0x1E4FBC860];
  sub_1AD8A2798(0, v3 & ~(v3 >> 63), 0);
  if (v2)
  {
    uint64_t result = sub_1AD9DFF50();
    char v6 = 1;
  }
  else
  {
    uint64_t result = sub_1AD9482F0(v1);
    char v6 = v8 & 1;
  }
  uint64_t v26 = result;
  uint64_t v27 = v5;
  char v28 = v6;
  if ((v3 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        int64_t v15 = v26;
        uint64_t v14 = v27;
        char v16 = v28;
        sub_1AD948078(v26, v27, v28, v1);
        uint64_t v18 = v17;
        id v19 = objc_msgSend(v17, sel_integerValue);

        uint64_t v20 = v29;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1AD8A2798(0, *(void *)(v20 + 16) + 1, 1);
          uint64_t v20 = v29;
        }
        unint64_t v22 = *(void *)(v20 + 16);
        unint64_t v21 = *(void *)(v20 + 24);
        if (v22 >= v21 >> 1)
        {
          uint64_t result = sub_1AD8A2798(v21 > 1, v22 + 1, 1);
          uint64_t v20 = v29;
        }
        *(void *)(v20 + 16)  = v22 + 1;
        *(void *)(v20 + 8 * v22 + 32)  = v19;
        if (v2) {
          break;
        }
        int64_t v9 = sub_1AD947F94(v15, v14, v16, v1);
        uint64_t v11 = v10;
        char v13 = v12;
        sub_1AD948714(v15, v14, v16);
        uint64_t v26 = v9;
        uint64_t v27 = v11;
        char v28 = v13 & 1;
        if (!--v3) {
          goto LABEL_20;
        }
      }
      if ((v16 & 1) == 0) {
        goto LABEL_23;
      }
      if (sub_1AD9DFF60()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_1AD94866C();
      uint64_t v23 = (void (*)(char *, void))sub_1AD9DF9D0();
      sub_1AD9DFFB0();
      v23(v25, 0);
      --v3;
    }
    while (v3);
LABEL_20:
    sub_1AD948714(v26, v27, v28);
    swift_bridgeObjectRelease();
    uint64_t v7 = v29;
    goto LABEL_21;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void sub_1AD94866C()
{
  if (!qword_1E9A4C940)
  {
    sub_1AD837214(255, &qword_1E9A49E48);
    sub_1AD944584(&qword_1E9A4C938, &qword_1E9A49E48);
    unint64_t v0 = sub_1AD9DF9E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C940);
    }
  }
}

uint64_t sub_1AD948714(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1AD948720(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD948774(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD9487DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD94883C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id TonePickerStyleProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id TonePickerStyleProvider.init()()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for TonePickerStyleProvider();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for TonePickerStyleProvider()
{
  return self;
}

id TonePickerStyleProvider.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for TonePickerStyleProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t TonePickerStyleProvider.tonePickerUsesOpaqueBackground.getter()
{
  return 1;
}

uint64_t TonePickerStyleProvider.tonePickerTableViewSeparatorStyle.getter()
{
  return 1;
}

uint64_t TonePickerStyleProvider.tonePickerCellTextFont.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerCellTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerCellHighlightedTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerCellBackgroundColor.getter()
{
  return 0;
}

void __swiftcall TonePickerStyleProvider.newBackgroundView(forSelectedTonePickerCell:)(UIView_optional *__return_ptr retstr, Swift::Bool forSelectedTonePickerCell)
{
}

void __swiftcall TonePickerStyleProvider.newAccessoryDisclosureIndicatorViewForTonePickerCell()(UIView_optional *__return_ptr retstr)
{
}

uint64_t TonePickerStyleProvider.wantsCustomTonePickerHeaderView.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerHeaderTextFont.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerHeaderTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerHeaderTextShadowColor.getter()
{
  return 0;
}

double TonePickerStyleProvider.tonePickerHeaderTextShadowOffset.getter()
{
  return *MEMORY[0x1E4FB2E10];
}

double TonePickerStyleProvider.tonePickerHeaderTextPaddingInsets.getter()
{
  return *MEMORY[0x1E4FB2848];
}

uint64_t TonePickerStyleProvider.vibrationPickerUsesOpaqueBackground.getter()
{
  return 1;
}

uint64_t TonePickerStyleProvider.vibrationPickerTableViewSeparatorStyle.getter()
{
  return 1;
}

id TonePickerStyleProvider.vibrationPickerCellTextFont.getter()
{
  id v0 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28C8]);
  return v0;
}

uint64_t TonePickerStyleProvider.vibrationPickerCellTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerCellHighlightedTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerCellBackgroundColor.getter()
{
  return 0;
}

void __swiftcall TonePickerStyleProvider.newAccessoryDisclosureIndicatorViewForVibrationPickerCell()(UIView_optional *__return_ptr retstr)
{
}

uint64_t TonePickerStyleProvider.wantsCustomVibrationPickerHeaderView.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerHeaderTextFont.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerHeaderTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerHeaderTextShadowColor.getter()
{
  return 0;
}

void *static UILabel.makeDynamicLabel(textStyle:textColor:traits:rounded:monospaced:numberOfLines:weight:textAlignment:)(void *a1, void *a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  char v15 = a8 & 1;
  id v16 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v17 = a2;
  id v18 = a1;
  id v19 = objc_msgSend(v16, sel_init);
  uint64_t v20 = v19;
  if (a2) {
    objc_msgSend(v19, sel_setTextColor_, v17);
  }
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v21 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v18, a3, a4 & 1, 0, 0, 0, a5 & 1, a7, v15);
  objc_msgSend(v20, sel_setFont_, v21);

  objc_msgSend(v20, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v20, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v20, sel_setLineBreakMode_, 0);
  objc_msgSend(v20, sel_setNumberOfLines_, a6);
  if ((a10 & 1) == 0) {
    objc_msgSend(v20, sel_setTextAlignment_, a9);
  }
  return v20;
}

void __swiftcall UILabel.init(textColor:textAlignment:)(UILabel *__return_ptr retstr, UIColor textColor, NSTextAlignment_optional textAlignment)
{
  is_nil  = textAlignment.is_nil;
  value  = textAlignment.value;
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v6, sel_setTextColor_, textColor.super.isa);
  if (!is_nil) {
    objc_msgSend(v6, sel_setTextAlignment_, value);
  }
}

void __swiftcall UILabel.init(textStyle:textColor:traits:rounded:monospaced:weight:)(UILabel *__return_ptr retstr, UIFontTextStyle textStyle, UIColor_optional textColor, UIFontDescriptorSymbolicTraits traits, Swift::Bool rounded, Swift::Bool monospaced, UIFontWeight_optional weight)
{
  is_nil  = weight.is_nil;
  BOOL v8 = monospaced;
  char v10 = traits;
  uint64_t v11 = *(void *)&textColor.is_nil;
  Class isa = textColor.value.super.isa;
  id v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  char v15 = v14;
  if (isa) {
    objc_msgSend(v14, sel_setTextColor_, isa);
  }
  else {
    id v16 = v14;
  }
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v17 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)textStyle, v11, v10 & 1, 0, 0, 0, rounded, v8, is_nil);
  objc_msgSend(v15, sel_setFont_, v17);
}

NSMutableAttributedString_optional __swiftcall UILabel.mutableAttributedString()()
{
  id v1 = objc_msgSend(v0, sel_attributedText);
  if (v1)
  {
    objc_super v2 = v1;
    uint64_t v3 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E48]), sel_initWithAttributedString_, v1);
  }
  else
  {
    id v7 = objc_msgSend(v0, sel_text);
    if (!v7)
    {
      unint64_t v4 = 0;
      goto LABEL_4;
    }
    BOOL v8 = v7;
    sub_1AD9DF710();

    id v9 = objc_msgSend(v0, sel_font);
    if (v9)
    {
      char v10 = v9;
      sub_1AD94914C();
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16)  = xmmword_1AD9E3070;
      char v12 = (void *)*MEMORY[0x1E4FB06F8];
      *(void *)(inited + 32)  = *MEMORY[0x1E4FB06F8];
      *(void *)(inited + 64)  = sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
      *(void *)(inited + 40)  = v10;
      id v13 = v12;
      id v14 = v10;
      sub_1AD86421C(inited);
      id v15 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
      id v16 = (void *)sub_1AD9DF6D0();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_1AD916C38();
      id v17 = (void *)sub_1AD9DF5F0();
      swift_bridgeObjectRelease();
      unint64_t v4 = (objc_class *)objc_msgSend(v15, sel_initWithString_attributes_, v16, v17);

      goto LABEL_4;
    }
    id v18 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
    objc_super v2 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    uint64_t v3 = (objc_class *)objc_msgSend(v18, sel_initWithString_, v2);
  }
  unint64_t v4 = v3;

LABEL_4:
  id v6 = v4;
  result.value.super.super.Class isa = v6;
  result.is_nil  = v5;
  return result;
}

void sub_1AD94914C()
{
  if (!qword_1E9A4BFD8)
  {
    sub_1AD916BCC();
    unint64_t v0 = sub_1AD9E0290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4BFD8);
    }
  }
}

uint64_t UILabel.ViewModel.text.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *UILabel.ViewModel.font.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void *UILabel.ViewModel.textColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t UILabel.ViewModel.hidden.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t UILabel.ViewModel.accessibilityLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UILabel.ViewModel.init(text:font:textColor:hidden:accessibilityLabel:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8  = result;
  *(void *)(a8 + 8)  = a2;
  *(void *)(a8 + 16)  = a3;
  *(void *)(a8 + 24)  = a4;
  *(unsigned char *)(a8 + 32)  = a5;
  *(void *)(a8 + 40)  = a6;
  *(void *)(a8 + 48)  = a7;
  return result;
}

uint64_t UILabel.ViewModel.hash(into:)()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = (void *)v0[3];
  uint64_t v3 = v0[6];
  if (v0[1])
  {
    sub_1AD9E03C0();
    swift_bridgeObjectRetain();
    sub_1AD9DF760();
    swift_bridgeObjectRelease();
    if (v1) {
      goto LABEL_3;
    }
LABEL_6:
    sub_1AD9E03C0();
    if (v2) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  sub_1AD9E03C0();
  if (!v1) {
    goto LABEL_6;
  }
LABEL_3:
  sub_1AD9E03C0();
  id v4 = v1;
  sub_1AD9DFE10();

  if (v2)
  {
LABEL_4:
    sub_1AD9E03C0();
    id v5 = v2;
    sub_1AD9DFE10();

    goto LABEL_8;
  }
LABEL_7:
  sub_1AD9E03C0();
LABEL_8:
  sub_1AD9E03C0();
  if (!v3) {
    return sub_1AD9E03C0();
  }
  sub_1AD9E03C0();
  swift_bridgeObjectRetain();
  sub_1AD9DF760();
  return swift_bridgeObjectRelease();
}

uint64_t UILabel.ViewModel.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD94943C()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD94949C()
{
  return sub_1AD9E03E0();
}

void UILabel.update(viewModel:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 8)) {
    id v6 = (void *)sub_1AD9DF6D0();
  }
  else {
    id v6 = 0;
  }
  objc_msgSend(v1, sel_setText_, v6);

  objc_msgSend(v1, sel_setFont_, v2);
  objc_msgSend(v1, sel_setTextColor_, v3);
  objc_msgSend(v1, sel_setHidden_, v4);
  if (v5) {
    uint64_t v7 = sub_1AD9DF6D0();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  objc_msgSend(v1, sel_setAccessibilityLabel_);
}

BOOL _sSo7UILabelC13SleepHealthUIE9ViewModelV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = *(void **)(a1 + 24);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a2 + 8);
  char v10 = *(void **)(a2 + 16);
  uint64_t v11 = *(void **)(a2 + 24);
  int v12 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  if (!v3)
  {
    if (v9) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v9) {
    return 0;
  }
  if (*(void *)a1 == *(void *)a2 && v3 == v9 || (v15 = sub_1AD9E02D0(), BOOL result = 0, (v15 & 1) != 0))
  {
LABEL_8:
    if (v4)
    {
      if (!v10) {
        return 0;
      }
      uint64_t v23 = v7;
      sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
      id v17 = v10;
      id v18 = v4;
      char v19 = sub_1AD9DFE00();

      if ((v19 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v23 = v7;
      if (v10) {
        return 0;
      }
    }
    if (v5)
    {
      if (!v11) {
        return 0;
      }
      sub_1AD837214(0, (unint64_t *)&qword_1E9A4B050);
      id v20 = v11;
      id v21 = v5;
      char v22 = sub_1AD9DFE00();

      BOOL result = 0;
      if ((v22 & 1) == 0) {
        return result;
      }
    }
    else
    {
      BOOL result = 0;
      if (v11) {
        return result;
      }
    }
    if ((v6 ^ v12)) {
      return result;
    }
    if (v8) {
      return v13 && (v23 == v14 && v8 == v13 || (sub_1AD9E02D0() & 1) != 0);
    }
    return !v13;
  }
  return result;
}

unint64_t sub_1AD9497A4()
{
  unint64_t result = qword_1E9A4C948;
  if (!qword_1E9A4C948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C948);
  }
  return result;
}

uint64_t _s9ViewModelVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s9ViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v3;
  uint64_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v6;
  swift_bridgeObjectRetain();
  id v7 = v4;
  id v8 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s9ViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16)  = v5;
  id v6 = v5;

  id v7 = *(void **)(a1 + 24);
  id v8 = *(void **)(a2 + 24);
  *(void *)(a1 + 24)  = v8;
  id v9 = v8;

  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9ViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);

  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);

  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9ViewModelVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s9ViewModelVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56)  = 0;
    }
    if (a2) {
      *(void *)(result + 8)  = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UILabel.ViewModel()
{
  return &type metadata for UILabel.ViewModel;
}

unint64_t static ScheduleOccurrenceAlarmVolumeTableViewCell.defaultReuseIdentifier.getter()
{
  return 0xD00000000000002ALL;
}

double sub_1AD949A9C()
{
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider), sel_value);
  return v1;
}

id sub_1AD949B30()
{
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  aBlock[4]  = sub_1AD8F05CC;
  aBlock[5]  = 0;
  aBlock[0]  = MEMORY[0x1E4F143A8];
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_1AD8F0900;
  aBlock[3]  = &block_descriptor_25;
  uint64_t v2 = _Block_copy(aBlock);
  id v3 = objc_msgSend(v1, sel_initWithDynamicProvider_, v2);
  _Block_release(v2);
  swift_release();
  objc_msgSend(v0, sel_setBackgroundColor_, v3);

  int v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider];
  uint64_t v5 = (void *)sub_1AD9DF6D0();
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_systemImageNamed_, v5);

  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_imageWithTintColor_renderingMode_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration+ 8], 1);
  }
  else
  {
    id v8 = 0;
  }
  objc_msgSend(v4, sel_setMinimumValueImage_, v8);

  id v9 = (void *)sub_1AD9DF6D0();
  id v10 = objc_msgSend(v6, sel_systemImageNamed_, v9);

  if (v10)
  {
    id v11 = objc_msgSend(v10, sel_imageWithTintColor_renderingMode_, *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration+ 8], 1);
  }
  else
  {
    id v11 = 0;
  }
  objc_msgSend(v4, sel_setMaximumValueImage_, v11);

  id v12 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v12, sel_addSubview_, v4);

  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v35 = self;
  sub_1AD870B1C();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16)  = xmmword_1AD9E5440;
  id v14 = objc_msgSend(v4, sel_topAnchor);
  id v15 = objc_msgSend(v0, sel_contentView);
  id v16 = objc_msgSend(v15, sel_topAnchor);

  double v17 = *(double *)&v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration + 16];
  id v18 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v16, v17);

  *(void *)(v13 + 32)  = v18;
  id v19 = objc_msgSend(v4, sel_leadingAnchor);
  id v20 = objc_msgSend(v0, sel_contentView);
  id v21 = objc_msgSend(v20, sel_layoutMarginsGuide);

  id v22 = objc_msgSend(v21, sel_leadingAnchor);
  id v23 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v22);

  *(void *)(v13 + 40)  = v23;
  id v24 = objc_msgSend(v0, sel_contentView);
  id v25 = objc_msgSend(v24, sel_layoutMarginsGuide);

  id v26 = objc_msgSend(v25, sel_trailingAnchor);
  id v27 = objc_msgSend(v4, sel_trailingAnchor);
  id v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(void *)(v13 + 48)  = v28;
  id v29 = objc_msgSend(v0, sel_contentView);
  id v30 = objc_msgSend(v29, sel_bottomAnchor);

  id v31 = objc_msgSend(v4, sel_bottomAnchor);
  id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_constant_, v31, v17);

  *(void *)(v13 + 56)  = v32;
  aBlock[0]  = v13;
  sub_1AD9DF870();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  uint64_t v33 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v35, sel_activateConstraints_, v33);

  return objc_msgSend(v4, sel_addTarget_action_forControlEvents_, 0, sel_scheduleOccurrenceAlarmVolumeEditingDidEnd_, 4096);
}

id ScheduleOccurrenceAlarmVolumeTableViewCell.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell()
{
  return self;
}

id ScheduleOccurrenceAlarmVolumeTableViewCell.apply(_:)(uint64_t a1)
{
  objc_super v2 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider);
  id v3 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v3, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v4 = objc_msgSend(v9, sel_soundVolume);

  if (v4)
  {
    objc_msgSend(v4, sel_floatValue);
    int v7 = v6;
  }
  else
  {
    int v7 = *MEMORY[0x1E4FA5300];
  }
  LODWORD(v5)  = v7;
  return objc_msgSend(v2, sel_setValue_animated_, 0, v5);
}

id sub_1AD94A274(uint64_t a1)
{
  return ScheduleOccurrenceAlarmVolumeTableViewCell.apply(_:)(a1);
}

uint64_t method lookup function for ScheduleOccurrenceAlarmVolumeTableViewCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScheduleOccurrenceAlarmVolumeTableViewCell);
}

uint64_t dispatch thunk of ScheduleOccurrenceAlarmVolumeTableViewCell.alarmVolume.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

void *initializeBufferWithCopyOfBuffer for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *a1  = *(void *)a2;
  a1[1]  = v4;
  a1[2]  = *(void *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v6 = v4;

  int v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8)  = v7;
  id v9 = v7;

  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;

  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration()
{
  return &type metadata for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration;
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

id sub_1AD94A42C(uint64_t a1, uint64_t a2)
{
  id v4 = &v2[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration];
  id v5 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  aBlock[4]  = sub_1AD8F05CC;
  aBlock[5]  = 0;
  aBlock[0]  = MEMORY[0x1E4F143A8];
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_1AD8F0900;
  aBlock[3]  = &block_descriptor_7;
  id v6 = _Block_copy(aBlock);
  int v7 = v2;
  id v8 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  id v9 = objc_msgSend(self, sel_secondaryLabelColor);
  *(void *)id v4 = v8;
  *((void *)v4 + 1)  = v9;
  *((void *)v4 + 2)  = 0x4010000000000000;
  uint64_t v10 = OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider;
  *(void *)&v7[v10]  = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C38]), sel_init);

  if (a2)
  {
    id v11 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v11 = 0;
  }
  v15.receiver  = v7;
  v15.super_class  = (Class)type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell();
  id v12 = objc_msgSendSuper2(&v15, sel_initWithStyle_reuseIdentifier_, 0, v11);

  id v13 = v12;
  sub_1AD949B30();

  return v13;
}

void sub_1AD94A5D0()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration];
  id v2 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  aBlock[4]  = sub_1AD8F05CC;
  aBlock[5]  = 0;
  aBlock[0]  = MEMORY[0x1E4F143A8];
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_1AD8F0900;
  aBlock[3]  = &block_descriptor_4;
  id v3 = _Block_copy(aBlock);
  id v4 = objc_msgSend(v2, sel_initWithDynamicProvider_, v3);
  _Block_release(v3);
  swift_release();
  id v5 = objc_msgSend(self, sel_secondaryLabelColor);
  *(void *)uint64_t v1 = v4;
  *((void *)v1 + 1)  = v5;
  *((void *)v1 + 2)  = 0x4010000000000000;
  uint64_t v6 = OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider;
  *(void *)&v0[v6]  = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C38]), sel_init);

  sub_1AD9E0140();
  __break(1u);
}

Swift::Void __swiftcall UIViewController.addAndLinkChild(_:usesAutoLayout:)(UIViewController *_, Swift::Bool usesAutoLayout)
{
  objc_msgSend(v2, sel_addChildViewController_, _);
  id v5 = [(UIViewController *)_ view];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v2, sel_view);
    if (v7)
    {
      id v8 = v7;
      objc_msgSend(v7, sel_addSubview_, v6);

      if (usesAutoLayout)
      {
LABEL_6:

        goto LABEL_7;
      }
      id v9 = objc_msgSend(v2, sel_view);
      if (v9)
      {
        uint64_t v10 = v9;
        objc_msgSend(v9, sel_bounds);
        double v12 = v11;
        double v14 = v13;
        double v16 = v15;
        double v18 = v17;

        -[UIView setFrame:](v6, sel_setFrame_, v12, v14, v16, v18);
        goto LABEL_6;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_7:
  [(UIViewController *)_ didMoveToParentViewController:v2];
}

uint64_t HKSPSleepScheduleOccurrence.scheduleIssues.getter@<X0>(uint64_t *a1@<X8>)
{
  id v2 = v1;
  unint64_t v47 = a1;
  uint64_t v3 = sub_1AD9DC990();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v3, v5);
  id v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v6, v9);
  double v12 = (char *)&v44 - v11;
  uint64_t v14 = MEMORY[0x1F4188790](v10, v13);
  double v16 = (char *)&v44 - v15;
  MEMORY[0x1F4188790](v14, v17);
  id v19 = (char *)&v44 - v18;
  id v20 = objc_msgSend(v2, sel_bedtimeComponents);
  sub_1AD9DC8C0();

  id v21 = objc_msgSend(v2, sel_wakeUpComponents);
  sub_1AD9DC8C0();

  id v22 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v45 = v19;
  v22(v12, v19, v3);
  uint64_t v23 = sub_1AD9DC8F0();
  if (v24) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v23;
  }
  uint64_t v44 = v25;
  uint64_t v26 = sub_1AD9DC940();
  char v28 = v27;
  id v29 = *(void (**)(char *, uint64_t))(v4 + 8);
  v29(v12, v3);
  if (v28) {
    uint64_t v26 = 0;
  }
  BOOL v46 = v16;
  uint64_t v30 = v3;
  v22(v8, v16, v3);
  uint64_t v31 = sub_1AD9DC8F0();
  if (v32) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v31;
  }
  uint64_t v34 = sub_1AD9DC940();
  char v36 = v35;
  v29(v8, v30);
  if (v36) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v34;
  }
  sub_1AD8943E4(v44, v26, v33, v37);
  double v39 = v38;
  if (qword_1E9A49118 != -1) {
    swift_once();
  }
  double v40 = *(double *)&qword_1E9A4D900;
  if (qword_1E9A49110 != -1) {
    swift_once();
  }
  if (v39 < *(double *)&qword_1E9A4D8F8) {
    uint64_t v41 = (8 * (v40 < v39)) | 4;
  }
  else {
    uint64_t v41 = 8 * (v40 < v39);
  }
  uint64_t v42 = v46;
  *unint64_t v47 = v41;
  v29(v42, v30);
  return ((uint64_t (*)(char *, uint64_t))v29)(v45, v30);
}

uint64_t HKSPSleepScheduleOccurrence.id.getter()
{
  objc_msgSend(v0, sel_weekdays);
  id v1 = (id)NSStringFromHKSPWeekdays();
  uint64_t v2 = sub_1AD9DF710();

  return v2;
}

void sub_1AD94ABD8(uint64_t *a1@<X8>)
{
  objc_msgSend(*v1, sel_weekdays);
  id v3 = (id)NSStringFromHKSPWeekdays();
  uint64_t v4 = sub_1AD9DF710();
  uint64_t v6 = v5;

  *a1  = v4;
  a1[1]  = v6;
}

uint64_t WatchOnboardingCapabilitiesProvider.watchOnboardingCapabilities.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 8))();
  char v7 = result;
  if (result)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2)) {
      uint64_t v8 = 16;
    }
    else {
      uint64_t v8 = 0;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2)) {
      v8 |= 2uLL;
    }
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL | (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2) & 1;
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2)) {
      v9 |= 4uLL;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
    uint64_t v10 = v9 | 8;
    if ((result & 1) == 0) {
      uint64_t v10 = v9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)a3  = v10;
  *(unsigned char *)(a3 + 8)  = (v7 & 1) == 0;
  return result;
}

uint64_t WatchOnboardingCapabilities.rawValue.getter()
{
  return *(void *)v0;
}

SleepHealthUI::WatchOnboardingCapabilities __swiftcall WatchOnboardingCapabilities.init(rawValue:)(SleepHealthUI::WatchOnboardingCapabilities rawValue)
{
  v1->rawValue  = rawValue.rawValue;
  return rawValue;
}

void static WatchOnboardingCapabilities.respiratoryRate.getter(void *a1@<X8>)
{
  *a1  = 1;
}

void static WatchOnboardingCapabilities.sleepStages.getter(void *a1@<X8>)
{
  *a1  = 2;
}

void static WatchOnboardingCapabilities.wristTemperature.getter(void *a1@<X8>)
{
  *a1  = 4;
}

void static WatchOnboardingCapabilities.healthStatus.getter(void *a1@<X8>)
{
  *a1  = 8;
}

void static WatchOnboardingCapabilities.sleepTracking.getter(void *a1@<X8>)
{
  *a1  = 16;
}

unint64_t sub_1AD94ADB0()
{
  unint64_t result = qword_1E9A4C960;
  if (!qword_1E9A4C960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C960);
  }
  return result;
}

unint64_t sub_1AD94AE08()
{
  unint64_t result = qword_1E9A4C968;
  if (!qword_1E9A4C968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C968);
  }
  return result;
}

unint64_t sub_1AD94AE60()
{
  unint64_t result = qword_1E9A4C970;
  if (!qword_1E9A4C970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C970);
  }
  return result;
}

unint64_t sub_1AD94AEB8()
{
  unint64_t result = qword_1E9A4C978;
  if (!qword_1E9A4C978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C978);
  }
  return result;
}

ValueMetadata *type metadata accessor for WatchOnboardingCapabilities()
{
  return &type metadata for WatchOnboardingCapabilities;
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.hasWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsSleepTracking.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsSleepStages.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsRespiratoryRate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsWristTemperature.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsHealthStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

__n128 __swift_memcpy43_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 27)  = *(_OWORD *)(a2 + 27);
  *(__n128 *)a1  = result;
  *(_OWORD *)(a1 + 16)  = v3;
  return result;
}

uint64_t _s5ModelVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 43)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s5ModelVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 42)  = 0;
    *(_WORD *)(result + 40)  = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 43)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 43)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *_s5ModelVMa()
{
  return &_s5ModelVN;
}

void sub_1AD94B060(double a1)
{
  unsigned int v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD94CD50(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  char v7 = (char *)v15 - v6;
  sub_1AD94CD50(0, &qword_1EB725690, MEMORY[0x1E4F27CA0], v3);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (char *)v15 - v10;
  float64x2_t v12 = vmulq_f64(vcvtq_f64_s64(*v1), (float64x2_t)vdupq_n_s64(0x404E000000000000uLL));
  sub_1AD95398C(v15, round((60.0 * v12.f64[0] + v12.f64[1]) / a1) * a1);
  if (v15[1] == 60 && __OFADD__(v15[0], 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = sub_1AD9DCE40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
    uint64_t v14 = sub_1AD9DCEB0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
    sub_1AD9DC970();
  }
}

void sub_1AD94B2E4(double a1)
{
  unsigned int v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD94CD50(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  char v7 = (char *)v15 - v6;
  sub_1AD94CD50(0, &qword_1EB725690, MEMORY[0x1E4F27CA0], v3);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (char *)v15 - v10;
  float64x2_t v12 = vmulq_f64(vcvtq_f64_s64(v1[1]), (float64x2_t)vdupq_n_s64(0x404E000000000000uLL));
  sub_1AD95398C(v15, round((60.0 * v12.f64[0] + v12.f64[1]) / a1) * a1);
  if (v15[1] == 60 && __OFADD__(v15[0], 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = sub_1AD9DCE40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
    uint64_t v14 = sub_1AD9DCEB0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
    sub_1AD9DC970();
  }
}

uint64_t sub_1AD94B568(double a1)
{
  uint64_t v3 = sub_1AD9DC990();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  uint64_t v5 = MEMORY[0x1F4188790](v3, v4);
  uint64_t v41 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v40 - v8;
  uint64_t v11 = v1[1];
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[4];
  char v15 = *((unsigned char *)v1 + 40);
  char v16 = *((unsigned char *)v1 + 41);
  char v17 = *((unsigned char *)v1 + 42);
  uint64_t v44 = *v1;
  uint64_t v10 = v44;
  uint64_t v45 = v11;
  uint64_t v46 = v12;
  uint64_t v47 = v13;
  uint64_t v48 = v14;
  char v49 = v15;
  char v50 = v16;
  char v51 = v17;
  sub_1AD94B060(a1);
  uint64_t v44 = v10;
  uint64_t v45 = v11;
  uint64_t v46 = v12;
  uint64_t v47 = v13;
  uint64_t v48 = v14;
  char v49 = v15;
  char v50 = v16;
  char v51 = v17;
  uint64_t v18 = v41;
  sub_1AD94B2E4(a1);
  uint64_t v19 = sub_1AD9DC8F0();
  LOBYTE(v11)  = v20 & 1;
  uint64_t v21 = sub_1AD9DC8F0();
  uint64_t v23 = sub_1AD9A2564(v21, v22 & 1, v19, v11);
  char v25 = v24;
  uint64_t v26 = sub_1AD9DC940();
  LOBYTE(v13)  = v27 & 1;
  uint64_t v28 = sub_1AD9DC940();
  uint64_t v30 = sub_1AD9A2564(v28, v29 & 1, v26, v13);
  char v32 = v31;
  sub_1AD94CD50(0, (unint64_t *)&qword_1E9A4C6E0, (uint64_t (*)(uint64_t))type metadata accessor for ComparisonResult, MEMORY[0x1E4FBB718]);
  if (v25) {
    goto LABEL_4;
  }
  switch(v23)
  {
    case -1:
      goto LABEL_7;
    case 0:
LABEL_4:
      if ((v32 & 1) == 0)
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v42 + 8);
        uint64_t v34 = v18;
        uint64_t v35 = v43;
        v33(v34, v43);
        v33(v9, v35);
        uint64_t v23 = v30;
LABEL_8:
        if ((unint64_t)(v23 + 1) < 3) {
          return (((_BYTE)v23 + 1) & 7) == 2;
        }
        break;
      }
LABEL_7:
      char v36 = *(void (**)(char *, uint64_t))(v42 + 8);
      uint64_t v37 = v18;
      uint64_t v38 = v43;
      v36(v37, v43);
      v36(v9, v38);
      if (v25) {
        return 0;
      }
      goto LABEL_8;
    case 1:
      goto LABEL_7;
  }
  uint64_t result = sub_1AD9E02C0();
  __break(1u);
  return result;
}

uint64_t sub_1AD94B814(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7, double a8)
{
  uint64_t v9 = v8;
  double v58 = *(double *)&a3;
  uint64_t v68 = a2;
  char v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD94CD50(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v17 - 8, v18);
  id v71 = &v56[-v19];
  sub_1AD94CD50(0, &qword_1EB725690, MEMORY[0x1E4F27CA0], v16);
  MEMORY[0x1F4188790](v20 - 8, v21);
  uint64_t v23 = &v56[-v22];
  uint64_t v24 = sub_1AD9DC990();
  uint64_t v72 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24, v25);
  uint64_t v28 = MEMORY[0x1F4188790](v26, v27);
  uint64_t v69 = &v56[-v29];
  uint64_t result = MEMORY[0x1F4188790](v28, v30);
  uint64_t v33 = &v56[-v32];
  double v34 = *v9;
  uint64_t v35 = *((void *)v9 + 1);
  int v65 = a5;
  int v66 = a6;
  int v64 = a4;
  id v67 = v36;
  uint64_t v70 = a1;
  if (v35 == 60 && __OFADD__(*(void *)&v34, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v37 = sub_1AD9DCE40();
    uint64_t v38 = *(void *)(v37 - 8);
    double v39 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
    uint64_t v62 = v38 + 56;
    uint64_t v63 = v39;
    v39(v23, 1, 1, v37);
    uint64_t v40 = sub_1AD9DCEB0();
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v42 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
    uint64_t v60 = v41 + 56;
    uint64_t v61 = v42;
    v42(v71, 1, 1, v40);
    sub_1AD9DC970();
    unint64_t v43 = sub_1AD94CDB4();
    uint64_t v44 = v70;
    unint64_t v59 = v43;
    int v45 = sub_1AD9DF6C0();
    uint64_t v46 = *(uint64_t (**)(unsigned char *, uint64_t))(v72 + 8);
    uint64_t result = v46(v33, v24);
    int v57 = v45;
    if ((v45 & 1) == 0)
    {
      uint64_t v47 = (uint64_t)v69;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v72 + 16))(v69, v44, v24);
      uint64_t result = sub_1AD94C678(v47);
    }
    if (*((void *)v9 + 3) != 60 || !__OFADD__(*((void *)v9 + 2), 1))
    {
      v63(v23, 1, 1, v37);
      v61(v71, 1, 1, v40);
      uint64_t v48 = v67;
      sub_1AD9DC970();
      uint64_t v49 = v68;
      char v50 = sub_1AD9DF6C0();
      v46(v48, v24);
      if (v50)
      {
        int v51 = v57 ^ 1;
      }
      else
      {
        uint64_t v52 = (uint64_t)v69;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v72 + 16))(v69, v49, v24);
        sub_1AD94C854(v52);
        int v51 = 1;
      }
      char v54 = v65;
      char v53 = v66;
      char v55 = v64;
      if ((_BYTE)v9[5])
      {
        if ((v64 & 1) == 0) {
          goto LABEL_18;
        }
      }
      else if ((v64 & 1) != 0 || v9[4] != v58)
      {
LABEL_18:
        void v9[4] = v58;
        *((unsigned char *)v9 + 40)  = v55 & 1;
        if (*((unsigned char *)v9 + 41) == (v54 & 1)) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      if (*((unsigned char *)v9 + 41) == (v65 & 1))
      {
        if (*((unsigned char *)v9 + 42) == (v66 & 1)) {
          return (sub_1AD94CA30(a7, a8) | v51) & 1;
        }
        goto LABEL_21;
      }
LABEL_19:
      *((unsigned char *)v9 + 41)  = v54 & 1;
LABEL_20:
      if (*((unsigned char *)v9 + 42) == (v53 & 1))
      {
LABEL_22:
        int v51 = 1;
        return (sub_1AD94CA30(a7, a8) | v51) & 1;
      }
LABEL_21:
      *((unsigned char *)v9 + 42)  = v53 & 1;
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD94BE0C(double a1)
{
  if (qword_1E9A48EB8 != -1) {
    uint64_t result = swift_once();
  }
  double v2 = *(double *)&qword_1E9A5A6F8;
  if (qword_1E9A48EC0 != -1) {
    uint64_t result = swift_once();
  }
  double v3 = *(double *)&qword_1E9A5A700;
  for (double i = *(double *)&qword_1E9A5A700 - v2; a1 < v2; a1 = i + a1)
    ;
  while (*(double *)&qword_1E9A5A700 <= a1)
    a1  = a1 - i;
  if (qword_1E9A48EB0 != -1)
  {
    uint64_t result = swift_once();
    double v3 = *(double *)&qword_1E9A5A700;
  }
  double v5 = a1 - *(double *)&qword_1E9A5A6F0;
  for (j = v3 - *(double *)&qword_1E9A5A6F8; v5 < *(double *)&qword_1E9A5A6F8; double v5 = j + v5)
    ;
  while (v3 <= v5)
    double v5 = v5 - j;
  double v7 = v5 / v3 * 24.0;
  double v8 = floor(v7);
  if (v8 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  double v9 = round((v7 - v8) * 60.0);
  if ((*(void *)&v8 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(void *)&v9 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_28;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v9 < 9.22337204e18) {
    return (uint64_t)v8;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1AD94BFE0(double a1, double a2, double a3)
{
  *double v3 = sub_1AD94BE0C(a1);
  v3[1]  = v7;
  sub_1AD8944E8();
  if (v8 >= a2)
  {
    if (v8 <= a3) {
      return;
    }
    double v12 = a3 / 60.0 / 60.0 / 24.0;
    if (qword_1E9A48EC0 != -1) {
      swift_once();
    }
    double v13 = *(double *)&qword_1E9A5A700;
    double v10 = v12 * *(double *)&qword_1E9A5A700 + a1;
    if (qword_1E9A48EB8 != -1)
    {
      swift_once();
      double v13 = *(double *)&qword_1E9A5A700;
    }
    for (i = v13 - *(double *)&qword_1E9A5A6F8; v10 < *(double *)&qword_1E9A5A6F8; double v10 = i + v10)
      ;
    while (v13 <= v10)
      double v10 = v10 - i;
  }
  else
  {
    if (qword_1E9A48EC0 != -1) {
      swift_once();
    }
    double v9 = *(double *)&qword_1E9A5A700;
    double v10 = a2 / 60.0 / 60.0 / 24.0 * *(double *)&qword_1E9A5A700 + a1;
    if (qword_1E9A48EB8 != -1)
    {
      swift_once();
      double v9 = *(double *)&qword_1E9A5A700;
    }
    for (j = v9 - *(double *)&qword_1E9A5A6F8; v10 < *(double *)&qword_1E9A5A6F8; double v10 = j + v10)
      ;
    while (v9 <= v10)
      double v10 = v10 - j;
  }
  v3[2]  = sub_1AD94BE0C(v10);
  v3[3]  = v15;
}

double sub_1AD94C218(double a1)
{
  float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x404E000000000000uLL);
  float64x2_t v3 = vmulq_f64(vcvtq_f64_s64(*v1), v6);
  sub_1AD95398C(v7.i64, round((60.0 * v3.f64[0] + v3.f64[1]) / a1) * a1);
  *id v1 = v7;
  float64x2_t v4 = vmulq_f64(vcvtq_f64_s64(v1[1]), v6);
  sub_1AD95398C(v7.i64, round((60.0 * v4.f64[0] + v4.f64[1]) / a1) * a1);
  double result = *(double *)v7.i64;
  v1[1]  = v7;
  return result;
}

BOOL sub_1AD94C2B8(double a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  double v7 = sub_1AD8A4A2C(v3, v4);
  double v8 = sub_1AD8A4A2C(v5, v6);
  double v9 = sub_1AD8A4A2C(v3, v4);
  if (v7 >= v8)
  {
    if (v9 <= a1)
    {
      if (qword_1E9A48EC0 != -1) {
        swift_once();
      }
      if (*(double *)&qword_1E9A5A700 >= a1) {
        return 1;
      }
    }
    if (qword_1E9A48EB8 != -1) {
      swift_once();
    }
    if (*(double *)&qword_1E9A5A6F8 > a1) {
      return 0;
    }
  }
  else if (v9 > a1)
  {
    return 0;
  }
  return sub_1AD8A4A2C(v5, v6) >= a1;
}

unint64_t sub_1AD94C3E0()
{
  uint64_t v1 = v0[2];
  unint64_t result = v1 - *v0;
  if (__OFSUB__(v1, *v0))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  uint64_t v5 = v4 - v3;
  if (__OFSUB__(v4, v3))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  if (v5 < 0)
  {
    uint64_t v6 = -60;
    if (v5 > -60) {
      uint64_t v6 = v4 - v3;
    }
    uint64_t v7 = v3 + v6;
    if (v7 == v4) {
      uint64_t v8 = v0[3];
    }
    else {
      uint64_t v8 = v4 + 1;
    }
    BOOL v9 = v7 == v4;
    unint64_t v10 = v1 ^ 0x8000000000000000;
    unint64_t v11 = (v7 - v8) / 0x3CuLL;
    if (!v9) {
      ++v11;
    }
    while (v10 - *v0 > v11)
    {
      --result;
      BOOL v12 = v5 < -60;
      v5 += 60;
      if (!v12) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_13:
  if ((result & 0x8000000000000000) != 0)
  {
    uint64_t v13 = -24;
    if ((uint64_t)result > -24) {
      uint64_t v13 = result;
    }
    if (result >= 0xFFFFFFFFFFFFFFE8) {
      unint64_t v14 = result;
    }
    else {
      unint64_t v14 = result + 1;
    }
    unint64_t v15 = (v13 - v14) / 0x18;
    if (result < 0xFFFFFFFFFFFFFFE8) {
      ++v15;
    }
    result += 24 * v15 + 24;
  }
  else if (result >= 0x18)
  {
    return (result - 24) % 0x18;
  }
  return result;
}

__n128 sub_1AD94C4D4@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1  = *v1;
  return result;
}

__n128 sub_1AD94C4E0@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1  = result;
  return result;
}

uint64_t sub_1AD94C4EC()
{
  long long v12 = *v0;
  *(_OWORD *)uint64_t v13 = v0[1];
  *(_OWORD *)&v13[11]  = *(long long *)((char *)v0 + 27);
  unint64_t v1 = sub_1AD94C3E0();
  uint64_t v3 = v2;
  sub_1AD94CD50(0, (unint64_t *)&qword_1E9A4A978, (uint64_t (*)(uint64_t))sub_1AD8C93A0, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_1AD9EB6D0;
  sub_1AD94C63C();
  uint64_t v5 = sub_1AD9DF730();
  uint64_t v7 = v6;
  *(void *)(v4 + 56)  = MEMORY[0x1E4FBB1A0];
  unint64_t v8 = sub_1AD89E5A8();
  *(void *)(v4 + 32)  = v5;
  *(void *)(v4 + 40)  = v7;
  uint64_t v9 = MEMORY[0x1E4FBB550];
  uint64_t v10 = MEMORY[0x1E4FBB5C8];
  *(void *)(v4 + 96)  = MEMORY[0x1E4FBB550];
  *(void *)(v4 + 104)  = v10;
  *(void *)(v4 + 64)  = v8;
  *(void *)(v4 + 72)  = v12;
  *(void *)(v4 + 136)  = v9;
  *(void *)(v4 + 144)  = v10;
  *(void *)(v4 + 112)  = *((void *)&v12 + 1);
  *(void *)(v4 + 176)  = v9;
  *(void *)(v4 + 184)  = v10;
  *(void *)(v4 + 152)  = *(void *)v13;
  *(void *)(v4 + 216)  = v9;
  *(void *)(v4 + 224)  = v10;
  *(void *)(v4 + 192)  = *(void *)&v13[8];
  *(void *)(v4 + 256)  = v9;
  *(void *)(v4 + 264)  = v10;
  *(void *)(v4 + 232)  = v1;
  *(void *)(v4 + 296)  = v9;
  *(void *)(v4 + 304)  = v10;
  *(void *)(v4 + 272)  = v3;
  return sub_1AD9DF720();
}

unint64_t sub_1AD94C63C()
{
  unint64_t result = qword_1E9A4C980;
  if (!qword_1E9A4C980)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4C980);
  }
  return result;
}

uint64_t sub_1AD94C678(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  long long v12 = (char *)&v26 - v11;
  sub_1AD9DC8F0();
  char v14 = v13;
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v12, a1, v4);
  if (v14)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v12, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  }
  sub_1AD9DC940();
  char v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v12, v4);
  if (v17) {
    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  }
  v15(v9, a1, v4);
  uint64_t v19 = sub_1AD9DC8F0();
  if (v20) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v19;
  }
  uint64_t v22 = sub_1AD9DC940();
  char v24 = v23;
  v18(v9, v4);
  if (v24) {
    uint64_t v22 = 0;
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  *uint64_t v2 = v21;
  v2[1]  = v22;
  return result;
}

uint64_t sub_1AD94C854(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  long long v12 = (char *)&v26 - v11;
  sub_1AD9DC8F0();
  char v14 = v13;
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v12, a1, v4);
  if (v14)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v12, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  }
  sub_1AD9DC940();
  char v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v12, v4);
  if (v17) {
    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  }
  v15(v9, a1, v4);
  uint64_t v19 = sub_1AD9DC8F0();
  if (v20) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v19;
  }
  uint64_t v22 = sub_1AD9DC940();
  char v24 = v23;
  v18(v9, v4);
  if (v24) {
    uint64_t v22 = 0;
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  *(void *)(v2 + 16)  = v21;
  *(void *)(v2 + 24)  = v22;
  return result;
}

uint64_t sub_1AD94CA30(double a1, double a2)
{
  *(_OWORD *)char v17 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)((char *)&v17[1] + 3)  = *(_OWORD *)(v2 + 27);
  sub_1AD8944E8();
  if (v5 < a1)
  {
    double v6 = sub_1AD8A4A2C(v17[0], v17[1]);
    double v7 = a1 / 60.0 / 60.0 / 24.0;
    if (qword_1E9A48EC0 != -1) {
      swift_once();
    }
    double v8 = *(double *)&qword_1E9A5A700;
    double v9 = v6 - v7 * *(double *)&qword_1E9A5A700;
    if (qword_1E9A48EB8 != -1)
    {
      swift_once();
      double v8 = *(double *)&qword_1E9A5A700;
    }
    for (i = v8 - *(double *)&qword_1E9A5A6F8; v9 < *(double *)&qword_1E9A5A6F8; double v9 = i + v9)
      ;
    while (v8 <= v9)
      double v9 = v9 - i;
LABEL_22:
    *(void *)uint64_t v2 = sub_1AD94BE0C(v9);
    *(void *)(v2 + 8)  = v15;
    return 1;
  }
  if (v5 > a2)
  {
    double v11 = sub_1AD8A4A2C(v17[0], v17[1]);
    double v12 = a2 / 60.0 / 60.0 / 24.0;
    if (qword_1E9A48EC0 != -1) {
      swift_once();
    }
    double v13 = *(double *)&qword_1E9A5A700;
    double v9 = v11 - v12 * *(double *)&qword_1E9A5A700;
    if (qword_1E9A48EB8 != -1)
    {
      swift_once();
      double v13 = *(double *)&qword_1E9A5A700;
    }
    for (j = v13 - *(double *)&qword_1E9A5A6F8; v9 < *(double *)&qword_1E9A5A6F8; double v9 = j + v9)
      ;
    while (v13 <= v9)
      double v9 = v9 - j;
    goto LABEL_22;
  }
  return 0;
}

uint64_t sub_1AD94CC50(uint64_t result, uint64_t a2)
{
  if ((a2 | result) < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v3 = *v2;
  unint64_t v4 = *v2 + result;
  if (!__OFADD__(*v2, result))
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      uint64_t v5 = -24;
      if ((uint64_t)v4 > -24) {
        uint64_t v5 = *v2 + result;
      }
      if (v4 >= 0xFFFFFFFFFFFFFFE8) {
        unint64_t v6 = *v2 + result;
      }
      else {
        unint64_t v6 = v4 + 1;
      }
      BOOL v7 = __CFADD__(v4, 24);
      uint64_t v8 = v3 + result;
      unint64_t v9 = (v5 - v6) / 0x18;
      if (!v7) {
        ++v9;
      }
      unint64_t v4 = v8 + 24 * v9 + 24;
    }
    else if (v4 >= 0x18)
    {
      unint64_t v4 = (v3 + result - 24) % 0x18uLL;
    }
    uint64_t v10 = v2[1];
    uint64_t v11 = v10 + a2;
    if (__OFADD__(v10, a2)) {
      goto LABEL_27;
    }
    if (v11 < 60)
    {
      v2[2]  = v4;
      v2[3]  = v11;
      return result;
    }
    unint64_t v12 = v4 ^ 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = v10 + a2;
    uint64_t v14 = 119;
    if (v11 < 119) {
      uint64_t v14 = v11;
    }
    unint64_t v15 = (v13 - v14 + 59) / 0x3CuLL;
    while (v12 > v15)
    {
      uint64_t v16 = v11 - 60;
      ++v4;
      BOOL v17 = v11 <= 119;
      v11 -= 60;
      if (v17)
      {
        v2[2]  = v4;
        v2[3]  = v16;
        return result;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_1AD94CD50(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1AD94CDB4()
{
  unint64_t result = qword_1E9A4C988;
  if (!qword_1E9A4C988)
  {
    sub_1AD9DC990();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C988);
  }
  return result;
}

id SleepScheduleProviderWrapper.provider.getter()
{
  return *(id *)(v0 + 16);
}

id sub_1AD94CE14()
{
  return *(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
}

uint64_t sub_1AD94CE2C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  swift_retain();
  return v1;
}

uint64_t sub_1AD94CE70()
{
  return swift_retain();
}

uint64_t sub_1AD94CE88()
{
  return swift_retain();
}

uint64_t sub_1AD94CEDC()
{
  return swift_retain();
}

uint64_t sub_1AD94CEF4()
{
  return swift_retain();
}

uint64_t sub_1AD94CF0C()
{
  return swift_retain();
}

uint64_t SleepScheduleProviderWrapper.__allocating_init(sleepStore:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  type metadata accessor for SleepScheduleProvider();
  *(void *)(v2 + 16)  = SleepScheduleProvider.__allocating_init(sleepStore:)(a1);
  return v2;
}

uint64_t SleepScheduleProviderWrapper.__allocating_init(sleepStore:schedule:currentDateProvider:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  id v9 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleProvider());
  *(void *)(v8 + 16)  = SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(a1, a2, a3, a4);
  return v8;
}

uint64_t SleepScheduleProviderWrapper.init(sleepStore:schedule:currentDateProvider:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v10 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleProvider());
  *(void *)(v5 + 16)  = SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(a1, a2, a3, a4);
  return v5;
}

uint64_t SleepScheduleProviderWrapper.deinit()
{
  return v0;
}

uint64_t SleepScheduleProviderWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id sub_1AD94D0C0()
{
  return objc_retain(*(id *)(*(void *)(*(void *)v0 + 16)
                           + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore));
}

uint64_t sub_1AD94D0DC()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)v0 + 16)
                 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  swift_retain();
  return v1;
}

uint64_t sub_1AD94D124()
{
  return swift_retain();
}

uint64_t sub_1AD94D140()
{
  return swift_retain();
}

uint64_t sub_1AD94D198()
{
  return swift_retain();
}

uint64_t sub_1AD94D1B4()
{
  return swift_retain();
}

uint64_t sub_1AD94D1D0()
{
  return swift_retain();
}

uint64_t method lookup function for SleepScheduleProviderWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepScheduleProviderWrapper);
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.sleepStore.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentDateProvider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentSchedulePublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.nextOccurrencePublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentGoalPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentWindDownDurationPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentScheduleEnabledPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.__allocating_init(sleepStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.__allocating_init(sleepStore:schedule:currentDateProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

id sub_1AD94D328()
{
  v8[1]  = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
  v8[0]  = 0;
  id v2 = objc_msgSend(v1, sel_sleepScheduleModelWithError_, v8);
  if (v2)
  {
    id v3 = v2;
    id v4 = v8[0];
  }
  else
  {
    id v5 = v8[0];
    unint64_t v6 = (void *)sub_1AD9DCB10();

    swift_willThrow();
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5548]), sel_init);
  }
  return v3;
}

id ScheduleOccurrenceViewControllerRepresentation.init(sleepStore:provenanceSource:isEditingSchedule:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  type metadata accessor for SleepScheduleProvider();
  id v12 = a1;
  id result = SleepScheduleProvider.__allocating_init(sleepStore:)(v12);
  *(void *)a6  = v12;
  *(void *)(a6 + 8)  = result;
  *(void *)(a6 + 16)  = a2;
  *(void *)(a6 + 24)  = a3;
  *(void *)(a6 + 32)  = a4;
  *(unsigned char *)(a6 + 40)  = a5;
  return result;
}

id ScheduleOccurrenceViewControllerRepresentation.makeUIViewController(context:)(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v2 = sub_1AD9DCC70();
  uint64_t v51 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v3);
  id v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1AD9DCE40();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  uint64_t v8 = MEMORY[0x1F4188790](v6, v7);
  id v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v8, v11);
  uint64_t v14 = (char *)&v45 - v13;
  MEMORY[0x1F4188790](v12, v15);
  BOOL v17 = (char *)&v45 - v16;
  id v18 = *(id *)(v1 + 8);
  id v19 = sub_1AD94D930();

  id v20 = v18;
  id v21 = sub_1AD94D328();

  id v22 = objc_msgSend(self, sel_hk_gregorianCalendar);
  sub_1AD9DCDB0();

  sub_1AD9DCC60();
  char v50 = v5;
  char v23 = (void *)sub_1AD9DCBB0();
  char v24 = (void *)sub_1AD9DCDA0();
  id v47 = v21;
  id v48 = v19;
  id v25 = objc_msgSend(v21, sel_generateOverrideOccurrenceFromTemplateForCurrentDate_gregorianCalendar_schedule_, v23, v24, v19);

  uint64_t v26 = self;
  id v27 = v20;
  id result = objc_msgSend(v26, sel_sharedBehavior);
  if (result)
  {
    uint64_t v29 = result;
    char v30 = objc_msgSend(result, sel_hksp_activePairedDeviceSupportsSleep);

    char v31 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    v31(v14, v17, v53);
    v55[3]  = type metadata accessor for SleepScheduleProvider();
    v55[4]  = &protocol witness table for SleepScheduleProvider;
    v55[0]  = v27;
    uint64_t v32 = (char *)v27;
    id v33 = v25;
    id result = objc_msgSend(v33, sel_isSingleDayOverride);
    if (result)
    {
      uint64_t v46 = v2;
      uint64_t v34 = *(void *)&v32[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentGoalPublisher];
      uint64_t v35 = *(void *)&v32[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentSchedulePublisher];
      int v45 = v17;
      uint64_t v36 = v53;
      v31(v10, v14, v53);
      type metadata accessor for ScheduleOccurrenceEditModel();
      swift_allocObject();
      id v37 = v33;
      swift_retain();
      swift_retain();
      uint64_t v38 = sub_1AD8945FC(v37, 1, 1, 0, v34, v35, v30, (uint64_t)v10);

      swift_release();
      swift_release();
      sub_1AD841030((uint64_t)v55, (uint64_t)v54);
      id v39 = objc_allocWithZone((Class)type metadata accessor for ScheduleOccurrenceViewController());
      uint64_t v40 = (char *)sub_1AD8410B8(v38, 0, (uint64_t)v54);

      swift_release();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v52 + 8);
      v41(v14, v36);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);

      sub_1AD94E23C();
      sub_1AD9DE710();
      uint64_t v42 = (void *)v54[0];
      unint64_t v43 = &v40[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate];
      swift_beginAccess();
      *((void *)v43 + 1)  = &protocol witness table for ScheduleOccurrenceViewControllerRepresentation.Coordinator;
      swift_unknownObjectWeakAssign();

      id v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F67B78]), sel_initWithRootViewController_, v40);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v46);
      v41(v45, v36);
      return v44;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1AD94D930()
{
  swift_retain();
  sub_1AD9DDB00();
  swift_release();
  if (v1
    && (objc_msgSend(v1, sel_mutableCopy),
        v1,
        sub_1AD9DFF20(),
        swift_unknownObjectRelease(),
        sub_1AD94F0A4(),
        swift_dynamicCast()))
  {
    return v1;
  }
  else
  {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5500]), sel_init);
  }
}

id ScheduleOccurrenceViewControllerRepresentation.makeCoordinator()()
{
  id v1 = *(void **)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v4 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  uint64_t v7 = (objc_class *)type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  swift_unknownObjectWeakInit();
  uint64_t v9 = &v8[OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent];
  *(void *)uint64_t v9 = v1;
  *((void *)v9 + 1)  = v2;
  *((void *)v9 + 2)  = v4;
  *((void *)v9 + 3)  = v3;
  *((void *)v9 + 4)  = v5;
  v9[40]  = v6;
  v14.receiver  = v8;
  v14.super_class  = v7;
  id v10 = v1;
  id v11 = v2;
  id v12 = v4;
  swift_retain();
  swift_retain();
  return objc_msgSendSuper2(&v14, sel_init);
}

id ScheduleOccurrenceViewControllerRepresentation.Coordinator.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  long long v8 = *(_OWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  swift_unknownObjectWeakInit();
  char v6 = &v3[OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent];
  *(_OWORD *)char v6 = *(_OWORD *)a1;
  *((_OWORD *)v6 + 1)  = v8;
  *((void *)v6 + 4)  = v4;
  v6[40]  = v5;
  v9.receiver  = v3;
  v9.super_class  = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id sub_1AD94DB5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  uint64_t v4 = *(void **)v3;
  char v5 = *(void **)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 24);
  id v12 = *(id *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 32);
  char v8 = *(unsigned char *)(v3 + 40);
  *(void *)a2  = *(void *)v3;
  *(void *)(a2 + 8)  = v5;
  *(void *)(a2 + 16)  = v12;
  *(void *)(a2 + 24)  = v6;
  *(void *)(a2 + 32)  = v7;
  *(unsigned char *)(a2 + 40)  = v8;
  swift_retain();
  swift_retain();
  id v9 = v4;
  id v10 = v5;
  return v12;
}

uint64_t sub_1AD94DC04(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  char v5 = *(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  uint64_t v8 = *a2 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  id v9 = *(void **)(v8 + 8);
  id v10 = *(void **)(v8 + 16);
  uint64_t v15 = *(void **)v8;
  *(void *)uint64_t v8 = v2;
  *(void *)(v8 + 8)  = v3;
  *(void *)(v8 + 16)  = v5;
  *(void *)(v8 + 24)  = v4;
  *(void *)(v8 + 32)  = v6;
  *(unsigned char *)(v8 + 40)  = v7;
  swift_retain();
  swift_retain();
  id v11 = v2;
  id v12 = v3;
  id v13 = v5;
  swift_release();

  return swift_release();
}

id sub_1AD94DCD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  uint64_t v4 = *(void **)v3;
  char v5 = *(void **)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 24);
  id v12 = *(id *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 32);
  char v8 = *(unsigned char *)(v3 + 40);
  *(void *)a1  = *(void *)v3;
  *(void *)(a1 + 8)  = v5;
  *(void *)(a1 + 16)  = v12;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(unsigned char *)(a1 + 40)  = v8;
  swift_retain();
  swift_retain();
  id v9 = v4;
  id v10 = v5;
  return v12;
}

uint64_t sub_1AD94DD7C(uint64_t a1)
{
  long long v10 = *(_OWORD *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  uint64_t v5 = v1 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void **)(v5 + 8);
  char v8 = *(void **)(v5 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 16)  = v10;
  *(void *)(v5 + 32)  = v3;
  *(unsigned char *)(v5 + 40)  = v4;
  swift_release();

  return swift_release();
}

uint64_t (*sub_1AD94DE24())()
{
  return j__swift_endAccess;
}

id ScheduleOccurrenceViewControllerRepresentation.Coordinator.init(_:)(uint64_t a1)
{
  long long v7 = *(_OWORD *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  swift_unknownObjectWeakInit();
  uint64_t v5 = &v1[OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent];
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
  *((_OWORD *)v5 + 1)  = v7;
  *((void *)v5 + 4)  = v3;
  v5[40]  = v4;
  v8.receiver  = v1;
  v8.super_class  = (Class)type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator();
  return objc_msgSendSuper2(&v8, sel_init);
}

void sub_1AD94DF0C(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_1AD94DF18(uint64_t a1, uint64_t a2)
{
}

id ScheduleOccurrenceViewControllerRepresentation.Coordinator.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ScheduleOccurrenceViewControllerRepresentation.Coordinator.init()()
{
}

id ScheduleOccurrenceViewControllerRepresentation.Coordinator.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1AD94E074@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  char v4 = *(void **)(v1 + 8);
  uint64_t v6 = *(void **)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  char v8 = *(unsigned char *)(v1 + 40);
  id v9 = (objc_class *)type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator();
  long long v10 = (char *)objc_allocWithZone(v9);
  swift_unknownObjectWeakInit();
  id v11 = &v10[OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent];
  *(void *)id v11 = v3;
  *((void *)v11 + 1)  = v4;
  *((void *)v11 + 2)  = v6;
  *((void *)v11 + 3)  = v5;
  *((void *)v11 + 4)  = v7;
  v11[40]  = v8;
  v16.receiver  = v10;
  v16.super_class  = v9;
  id v12 = v3;
  id v13 = v4;
  id v14 = v6;
  swift_retain();
  swift_retain();
  id result = objc_msgSendSuper2(&v16, sel_init);
  *a1  = result;
  return result;
}

uint64_t sub_1AD94E14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD94E298();
  return MEMORY[0x1F40FAB70](a1, a2, a3, v6);
}

uint64_t sub_1AD94E1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD94E298();
  return MEMORY[0x1F40FAB28](a1, a2, a3, v6);
}

void sub_1AD94E214()
{
}

void sub_1AD94E23C()
{
  if (!qword_1E9A4C990)
  {
    sub_1AD94E298();
    unint64_t v0 = sub_1AD9DE720();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C990);
    }
  }
}

unint64_t sub_1AD94E298()
{
  unint64_t result = qword_1E9A4C998;
  if (!qword_1E9A4C998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C998);
  }
  return result;
}

uint64_t type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator()
{
  return self;
}

void sub_1AD94E310(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  swift_getObjectType();
  if (qword_1E9A48EC8 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_1AD9DD550();
  __swift_project_value_buffer(v6, (uint64_t)qword_1E9A5A708);
  uint64_t v7 = sub_1AD9DD530();
  os_log_type_t v8 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v30 = v6;
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t aBlock = v10;
    *(_DWORD *)id v9 = 136446210;
    uint64_t v11 = sub_1AD9E04F0();
    uint64_t v37 = sub_1AD838978(v11, v12, &aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v7, v8, "[%{public}s] Did modify", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v10, -1, -1);
    MEMORY[0x1B3E6D1A0](v9, -1, -1);
  }

  uint64_t v13 = v3 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  id v14 = *(id *)(v13 + 8);
  id v15 = sub_1AD94D930();

  if (a2)
  {
    id v16 = objc_msgSend(v15, sel_overrideOccurrence);
    if (v16)
    {
      BOOL v17 = v16;
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v6, (uint64_t)qword_1EB725958);
      id v18 = sub_1AD9DD530();
      os_log_type_t v19 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t aBlock = v21;
        uint64_t v30 = a1;
        *(_DWORD *)id v20 = 136446210;
        uint64_t v22 = sub_1AD9E04F0();
        sub_1AD838978(v22, v23, &aBlock);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v18, v19, "[%{public}s] Removing override", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v21, -1, -1);
        MEMORY[0x1B3E6D1A0](v20, -1, -1);
      }

      objc_msgSend(v15, sel_removeOccurrence_, v17);
    }
  }
  objc_msgSend(v15, sel_saveOccurrence_, a1, v30);
  char v24 = *(void **)v13;
  uint64_t v35 = j_nullsub_1;
  uint64_t v36 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v32 = 1107296256;
  id v33 = sub_1AD8A776C;
  uint64_t v34 = &block_descriptor_8;
  id v25 = _Block_copy(&aBlock);
  id v26 = v24;
  id v27 = v15;
  objc_msgSend(v26, sel_saveCurrentSleepSchedule_completion_, v27, v25);
  _Block_release(v25);

  uint64_t v28 = *(void *)(v13 + 32);
  char v29 = *(unsigned char *)(v13 + 40);
  uint64_t aBlock = *(void *)(v13 + 24);
  uint64_t v32 = v28;
  LOBYTE(v33)  = v29;
  sub_1AD94F034();
  sub_1AD9DF1D0();
}

void sub_1AD94E768(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  if (qword_1E9A48EC8 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1AD9DD550();
  __swift_project_value_buffer(v4, (uint64_t)qword_1E9A5A708);
  uint64_t v5 = sub_1AD9DD530();
  os_log_type_t v6 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t aBlock = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v9 = sub_1AD9E04F0();
    uint64_t v26 = sub_1AD838978(v9, v10, &aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v5, v6, "[%{public}s] Did finish by deleting", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
  }

  uint64_t v11 = v2 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  id v12 = *(id *)(v11 + 8);
  id v13 = sub_1AD94D930();

  objc_msgSend(v13, sel_removeOccurrence_, a1);
  id v14 = *(void **)v11;
  char v24 = nullsub_1;
  uint64_t v25 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_1AD8A776C;
  unint64_t v23 = &block_descriptor_26;
  id v15 = _Block_copy(&aBlock);
  id v16 = v14;
  id v17 = v13;
  objc_msgSend(v16, sel_saveCurrentSleepSchedule_completion_, v17, v15);
  _Block_release(v15);

  uint64_t v18 = *(void *)(v11 + 32);
  char v19 = *(unsigned char *)(v11 + 40);
  uint64_t aBlock = *(void *)(v11 + 24);
  uint64_t v21 = v18;
  LOBYTE(v22)  = v19;
  sub_1AD94F034();
  sub_1AD9DF1D0();
}

uint64_t sub_1AD94EA1C()
{
  swift_getObjectType();
  if (qword_1E9A48EC8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1AD9DD550();
  __swift_project_value_buffer(v0, (uint64_t)qword_1E9A5A708);
  uint64_t v1 = sub_1AD9DD530();
  os_log_type_t v2 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v8[0]  = v4;
    *(_DWORD *)uint64_t v3 = 136446210;
    uint64_t v5 = sub_1AD9E04F0();
    sub_1AD838978(v5, v6, v8);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v1, v2, "[%{public}s] Did cancel", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v4, -1, -1);
    MEMORY[0x1B3E6D1A0](v3, -1, -1);
  }

  swift_beginAccess();
  sub_1AD94F034();
  return sub_1AD9DF1D0();
}

unint64_t sub_1AD94EBF8()
{
  unint64_t result = qword_1E9A4C9B0;
  if (!qword_1E9A4C9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C9B0);
  }
  return result;
}

uint64_t destroy for ScheduleOccurrenceViewControllerRepresentation(id *a1)
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScheduleOccurrenceViewControllerRepresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  unint64_t v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = v6;
  *(void *)(a1 + 24)  = v5;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  id v7 = v3;
  id v8 = v4;
  id v9 = v6;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleOccurrenceViewControllerRepresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8)  = v7;
  id v9 = v7;

  unint64_t v10 = *(void **)(a2 + 16);
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16)  = v10;
  id v12 = v10;

  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for ScheduleOccurrenceViewControllerRepresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;

  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleOccurrenceViewControllerRepresentation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceViewControllerRepresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 40)  = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewControllerRepresentation()
{
  return &type metadata for ScheduleOccurrenceViewControllerRepresentation;
}

uint64_t method lookup function for ScheduleOccurrenceViewControllerRepresentation.Coordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScheduleOccurrenceViewControllerRepresentation.Coordinator);
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.parent.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.parent.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.parent.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.scheduleOccurrenceViewController(_:didModify:deleteOverride:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.scheduleOccurrenceViewController(_:didFinishByDeleting:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.scheduleOccurrenceViewControllerDidCancel(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

void sub_1AD94F034()
{
  if (!qword_1E9A4A1F8)
  {
    unint64_t v0 = sub_1AD9DF200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A1F8);
    }
  }
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

unint64_t sub_1AD94F0A4()
{
  unint64_t result = qword_1E9A4ABE8;
  if (!qword_1E9A4ABE8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4ABE8);
  }
  return result;
}

uint64_t InfographicGrid.init(useImplicitHeightForGraphics:metricsTopPadding:graphics:metrics:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  sub_1AD9DF040();
  if (qword_1E9A48F88 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1E9A4C9E0;
  uint64_t v15 = qword_1E9A48F90;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1E9A4C9E8;
  *(unsigned char *)a6  = a1 & 1;
  *(double *)(a6 + 8)  = a7;
  *(void *)(a6 + 16)  = a2;
  *(void *)(a6 + 24)  = a3;
  *(void *)(a6 + 32)  = a4;
  *(void *)(a6 + 40)  = a5;
  *(unsigned char *)(a6 + 48)  = v18;
  *(void *)(a6 + 56)  = v19;
  *(void *)(a6 + 64)  = v14;
  *(void *)(a6 + 72)  = v16;
  return swift_retain();
}

uint64_t sub_1AD94F214(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

double static CGFloat.metricsTopPadding.getter()
{
  return sub_1AD892F68(&qword_1E9A48F70, (uint64_t)&qword_1E9A4C9C8);
}

uint64_t InfographicGrid.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v4 = a1[2];
  sub_1AD9DDFC0();
  sub_1AD9518FC();
  sub_1AD9DDFC0();
  sub_1AD9DDFC0();
  uint64_t v5 = a1[3];
  sub_1AD9DDFC0();
  sub_1AD9DDFC0();
  swift_getTupleTypeMetadata2();
  sub_1AD9DF350();
  swift_getWitnessTable();
  uint64_t v6 = sub_1AD9DF180();
  uint64_t v48 = v6;
  uint64_t v54 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7);
  id v9 = (char *)&v43 - v8;
  uint64_t v10 = sub_1AD9DDB60();
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v65 = v10;
  *((void *)&v65 + 1)  = v6;
  uint64_t v11 = v10;
  uint64_t v45 = v10;
  *(void *)&long long v66 = MEMORY[0x1E4F1ABE8];
  *((void *)&v66 + 1)  = WitnessTable;
  uint64_t v12 = MEMORY[0x1E4F1ABE8];
  uint64_t v13 = sub_1AD9DE030();
  uint64_t v52 = v13;
  uint64_t v57 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v46 = (char *)&v43 - v15;
  uint64_t v56 = MEMORY[0x1E4F3CDD0];
  uint64_t v53 = swift_getWitnessTable();
  *(void *)&long long v65 = v11;
  *((void *)&v65 + 1)  = v13;
  *(void *)&long long v66 = v12;
  *((void *)&v66 + 1)  = v53;
  uint64_t v50 = sub_1AD9DE030();
  uint64_t v55 = *(void *)(v50 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v50, v16);
  uint64_t v49 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v51 = (char *)&v43 - v20;
  long long v21 = v2[3];
  long long v67 = v2[2];
  long long v68 = v21;
  long long v69 = v2[4];
  long long v22 = v2[1];
  long long v65 = *v2;
  long long v66 = v22;
  sub_1AD9DE340();
  uint64_t v44 = v4;
  uint64_t v59 = v4;
  uint64_t v60 = v5;
  uint64_t v43 = v5;
  uint64_t v24 = a1[5];
  uint64_t v61 = a1[4];
  uint64_t v23 = v61;
  uint64_t v62 = v24;
  uint64_t v63 = &v65;
  sub_1AD9DF170();
  type metadata accessor for ObservableDarwinNotification();
  sub_1AD952604(&qword_1E9A4C058, (void (*)(uint64_t))type metadata accessor for ObservableDarwinNotification);
  uint64_t v64 = sub_1AD9DDAB0();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16)  = v4;
  *(void *)(v25 + 24)  = v5;
  *(void *)(v25 + 32)  = v23;
  *(void *)(v25 + 40)  = v24;
  long long v26 = v68;
  *(_OWORD *)(v25 + 80)  = v67;
  *(_OWORD *)(v25 + 96)  = v26;
  *(_OWORD *)(v25 + 112)  = v69;
  long long v27 = v66;
  *(_OWORD *)(v25 + 48)  = v65;
  *(_OWORD *)(v25 + 64)  = v27;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16)  = sub_1AD951A24;
  *(void *)(v28 + 24)  = v25;
  sub_1AD951A64((uint64_t)&v65);
  char v29 = v46;
  uint64_t v30 = v48;
  sub_1AD9DEE10();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v9, v30);
  uint64_t v64 = sub_1AD9DDAB0();
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v43;
  *(void *)(v31 + 16)  = v44;
  *(void *)(v31 + 24)  = v32;
  *(void *)(v31 + 32)  = v23;
  *(void *)(v31 + 40)  = v24;
  long long v33 = v68;
  *(_OWORD *)(v31 + 80)  = v67;
  *(_OWORD *)(v31 + 96)  = v33;
  *(_OWORD *)(v31 + 112)  = v69;
  long long v34 = v66;
  *(_OWORD *)(v31 + 48)  = v65;
  *(_OWORD *)(v31 + 64)  = v34;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16)  = sub_1AD951B28;
  *(void *)(v35 + 24)  = v31;
  sub_1AD951A64((uint64_t)&v65);
  uint64_t v36 = v49;
  uint64_t v37 = v52;
  sub_1AD9DEE10();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v29, v37);
  uint64_t v38 = v50;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v40 = v51;
  sub_1AD90C5E8(v36, v38, v39);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v55 + 8);
  v41(v36, v38);
  sub_1AD90C5E8(v40, v38, v39);
  return ((uint64_t (*)(char *, uint64_t))v41)(v40, v38);
}

uint64_t sub_1AD94F8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v100 = a5;
  uint64_t v95 = a4;
  uint64_t v93 = a6;
  uint64_t v86 = *((void *)a3 - 1);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v98 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9518FC();
  uint64_t v99 = a3;
  uint64_t v10 = sub_1AD9DDFC0();
  uint64_t v87 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v10);
  uint64_t v85 = (char *)&v78 - v11;
  uint64_t v88 = v12;
  uint64_t v92 = sub_1AD9DDFC0();
  uint64_t v90 = *(void *)(v92 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v92, v13);
  uint64_t v91 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v84 = (char *)&v78 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17, v19);
  uint64_t v89 = (char *)&v78 - v21;
  uint64_t v22 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v20, v23);
  uint64_t v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1AD9DDFC0();
  uint64_t v80 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26, v27);
  char v29 = (char *)&v78 - v28;
  uint64_t v30 = sub_1AD9DDFC0();
  uint64_t v82 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30, v31);
  uint64_t v81 = (char *)&v78 - v32;
  uint64_t v97 = sub_1AD9DDFC0();
  uint64_t v94 = *(void *)(v97 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v97, v33);
  int v83 = (char *)&v78 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x1F4188790](v34, v36);
  uint64_t v79 = (char *)&v78 - v38;
  uint64_t v40 = MEMORY[0x1F4188790](v37, v39);
  uint64_t v96 = (char *)&v78 - v41;
  (*(void (**)(uint64_t))(a1 + 16))(v40);
  if ((*(unsigned char *)a1 & 1) == 0 && qword_1E9A48F68 != -1) {
    swift_once();
  }
  sub_1AD9DF320();
  uint64_t v42 = v95;
  sub_1AD9DED70();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, a2);
  char v43 = *(unsigned char *)(a1 + 48);
  uint64_t v44 = *(char **)(a1 + 56);
  uint64_t v104 = a2;
  id v105 = v99;
  uint64_t v106 = v42;
  uint64_t v107 = v100;
  type metadata accessor for InfographicGrid();
  LOBYTE(v104)  = v43 & 1;
  id v105 = v44;
  sub_1AD9529B8(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
  uint64_t v78 = v45;
  sub_1AD9DF050();
  uint64_t v46 = 0;
  if (LOBYTE(v103[0]) == 1)
  {
    sub_1AD9DEEE0();
    uint64_t v46 = sub_1AD9DEEF0();
    swift_release();
  }
  uint64_t v104 = v46;
  sub_1AD9DF320();
  sub_1AD9529B8(0, &qword_1EB725C88, MEMORY[0x1E4F3EB98], MEMORY[0x1E4FBB718]);
  uint64_t v48 = v47;
  v103[10]  = v95;
  v103[11]  = MEMORY[0x1E4F3C7D0];
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1AD951984();
  uint64_t v50 = v81;
  uint64_t v95 = v48;
  sub_1AD9DEBE0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v29, v26);
  sub_1AD9DE790();
  if (qword_1E9A48F60 != -1) {
    swift_once();
  }
  uint64_t v51 = sub_1AD952604(&qword_1E9A4CB08, (void (*)(uint64_t))sub_1AD9518FC);
  v103[8]  = WitnessTable;
  v103[9]  = v51;
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v53 = v79;
  sub_1AD9DEDD0();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v50, v30);
  v103[6]  = v52;
  v103[7]  = MEMORY[0x1E4F3CAA8];
  uint64_t v54 = MEMORY[0x1E4F3CAA8];
  uint64_t v55 = v97;
  uint64_t v80 = swift_getWitnessTable();
  sub_1AD90C5E8(v53, v55, v80);
  uint64_t v56 = *(char **)(v94 + 8);
  uint64_t v82 = v94 + 8;
  uint64_t v81 = v56;
  uint64_t v57 = ((uint64_t (*)(char *, uint64_t))v56)(v53, v55);
  (*(void (**)(uint64_t))(a1 + 32))(v57);
  uint64_t v58 = *(char **)(a1 + 56);
  LOBYTE(v104)  = *(unsigned char *)(a1 + 48) & 1;
  id v105 = v58;
  sub_1AD9DF050();
  if (LOBYTE(v103[0]) == 1)
  {
    sub_1AD9DEEB0();
    uint64_t v59 = sub_1AD9DEEF0();
    swift_release();
  }
  else
  {
    uint64_t v59 = 0;
  }
  uint64_t v104 = v59;
  sub_1AD9DF320();
  uint64_t v60 = v85;
  uint64_t v62 = v99;
  uint64_t v61 = v100;
  uint64_t v63 = v98;
  sub_1AD9DEBE0();
  swift_release();
  (*(void (**)(char *, char *))(v86 + 8))(v63, v62);
  sub_1AD9DE790();
  v103[4]  = v61;
  v103[5]  = v51;
  uint64_t v64 = v88;
  uint64_t v65 = swift_getWitnessTable();
  long long v66 = v84;
  sub_1AD9DEDD0();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v60, v64);
  v103[2]  = v65;
  v103[3]  = v54;
  uint64_t v67 = v92;
  uint64_t v68 = swift_getWitnessTable();
  long long v69 = v89;
  sub_1AD90C5E8(v66, v67, v68);
  uint64_t v70 = v90;
  id v71 = *(void (**)(char *, uint64_t))(v90 + 8);
  v71(v66, v67);
  uint64_t v72 = v83;
  uint64_t v73 = v96;
  uint64_t v74 = v97;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v83, v96, v97);
  uint64_t v104 = (uint64_t)v72;
  uint64_t v75 = v91;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v91, v69, v67);
  id v105 = v75;
  v103[0]  = v74;
  v103[1]  = v67;
  uint64_t v101 = v80;
  uint64_t v102 = v68;
  sub_1AD9656C4((uint64_t)&v104, 2uLL, (uint64_t)v103);
  v71(v69, v67);
  uint64_t v76 = (uint64_t (*)(char *, uint64_t))v81;
  ((void (*)(char *, uint64_t))v81)(v73, v74);
  v71(v75, v67);
  return v76(v72, v74);
}

uint64_t sub_1AD9503F0()
{
  return sub_1AD9DF060();
}

uint64_t sub_1AD950480()
{
  return sub_1AD9DF060();
}

uint64_t sub_1AD950510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  sub_1AD9DF040();
  if (qword_1E9A48F88 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1E9A4C9E0;
  uint64_t v5 = qword_1E9A48F90;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1E9A4C9E8;
  *(void *)a2  = a1;
  *(unsigned char *)(a2 + 8)  = v8;
  *(void *)(a2 + 16)  = v9;
  *(void *)(a2 + 24)  = v4;
  *(void *)(a2 + 32)  = v6;
  return swift_retain();
}

uint64_t sub_1AD9505FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  sub_1AD9521F0();
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD95264C(0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v5 = sub_1AD9DE340();
  *((void *)v5 + 1)  = 0;
  v5[16]  = 0;
  sub_1AD9526B4();
  sub_1AD950960(v1, (uint64_t)&v5[*(int *)(v11 + 44)]);
  uint64_t v25 = *(void *)(v1 + 24);
  type metadata accessor for ObservableDarwinNotification();
  sub_1AD952604(&qword_1E9A4C058, (void (*)(uint64_t))type metadata accessor for ObservableDarwinNotification);
  uint64_t v12 = sub_1AD9DDAB0();
  uint64_t v28 = *(void *)v1;
  long long v27 = *(_OWORD *)(v1 + 8);
  uint64_t v13 = swift_allocObject();
  long long v14 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v13 + 16)  = *(_OWORD *)v1;
  *(_OWORD *)(v13 + 32)  = v14;
  *(void *)(v13 + 48)  = *(void *)(v1 + 32);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16)  = sub_1AD952720;
  *(void *)(v15 + 24)  = v13;
  sub_1AD952880((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(void))sub_1AD9521F0);
  *(void *)&v10[*(int *)(v7 + 60)]  = v12;
  uint64_t v16 = (uint64_t (**)())&v10[*(int *)(v7 + 64)];
  *uint64_t v16 = sub_1AD9534A0;
  v16[1]  = (uint64_t (*)())v15;
  sub_1AD952760((uint64_t)&v28);
  sub_1AD95278C((uint64_t)&v27);
  swift_retain();
  swift_retain();
  sub_1AD952C74((uint64_t)v5, (uint64_t (*)(void))sub_1AD9521F0);
  uint64_t v17 = sub_1AD9DDAB0();
  uint64_t v18 = swift_allocObject();
  long long v19 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v18 + 16)  = *(_OWORD *)v1;
  *(_OWORD *)(v18 + 32)  = v19;
  *(void *)(v18 + 48)  = *(void *)(v1 + 32);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16)  = sub_1AD95280C;
  *(void *)(v20 + 24)  = v18;
  uint64_t v21 = v26;
  sub_1AD952880((uint64_t)v10, v26, (uint64_t (*)(void))sub_1AD95264C);
  sub_1AD9528E8(0, &qword_1E9A4CAF0, sub_1AD95264C, (void (*)(void))sub_1AD952984);
  *(void *)(v21 + *(int *)(v22 + 52))  = v17;
  uint64_t v23 = (uint64_t (**)())(v21 + *(int *)(v22 + 56));
  *uint64_t v23 = sub_1AD9534A0;
  v23[1]  = (uint64_t (*)())v20;
  sub_1AD952760((uint64_t)&v28);
  sub_1AD95278C((uint64_t)&v27);
  swift_retain();
  swift_retain();
  return sub_1AD952C74((uint64_t)v10, (uint64_t (*)(void))sub_1AD95264C);
}

uint64_t sub_1AD950960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD95255C(0);
  uint64_t v6 = MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v8 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v6, v9);
  uint64_t v12 = (char *)&v144 - v11;
  MEMORY[0x1F4188790](v10, v13);
  uint64_t v15 = (char *)&v144 - v14;
  sub_1AD9523F8(0);
  uint64_t v18 = MEMORY[0x1F4188790](v16 - 8, v17);
  uint64_t v20 = (char *)&v144 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v18, v21);
  uint64_t v24 = (char *)&v144 - v23;
  MEMORY[0x1F4188790](v22, v25);
  uint64_t v158 = (uint64_t)&v144 - v26;
  sub_1AD952364(0);
  uint64_t v29 = MEMORY[0x1F4188790](v27 - 8, v28);
  uint64_t v31 = MEMORY[0x1F4188790](v29, v30);
  MEMORY[0x1F4188790](v31, v32);
  uint64_t v161 = (uint64_t)&v144 - v35;
  uint64_t v36 = *(void **)a1;
  long long v159 = *(void **)(*(void *)a1 + 16);
  if (v159)
  {
    uint64_t v156 = v34;
    uint64_t v157 = a1;
    double v151 = v8;
    double v152 = v24;
    uint64_t v146 = v12;
    uint64_t v147 = v33;
    id v148 = v15;
    unint64_t v149 = v20;
    uint64_t v150 = a2;
    uint64_t v38 = v36[7];
    uint64_t v37 = v36[8];
    uint64_t v160 = v36;
    double v155 = v36 + 4;
    __swift_project_boxed_opaque_existential_1Tm(v36 + 4, v38);
    uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)(v37 + 8) + 8))(v38);
    uint64_t v41 = v40;
    char v43 = v42 & 1;
    sub_1AD9DE860();
    uint64_t v44 = sub_1AD9DEAB0();
    uint64_t v46 = v45;
    char v48 = v47;
    swift_release();
    sub_1AD861548(v39, v41, v43);
    swift_bridgeObjectRelease();
    sub_1AD9DE8B0();
    uint64_t v20 = (char *)sub_1AD9DEA60();
    uint64_t v15 = v49;
    LOBYTE(v12)  = v50;
    sub_1AD861548(v44, v46, v48 & 1);
    swift_bridgeObjectRelease();
    if (qword_1EB7255E0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  char v51 = v12 & 1;
  uint64_t v52 = sub_1AD9DEA70();
  uint64_t v54 = v53;
  char v56 = v55;
  uint64_t v58 = v57;
  sub_1AD861548((uint64_t)v20, (uint64_t)v15, v51);
  swift_bridgeObjectRelease();
  v185  = *(_OWORD *)(v157 + 8);
  long long v163 = *(_OWORD *)(v157 + 8);
  sub_1AD9529B8(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
  uint64_t v157 = v59;
  sub_1AD9DF050();
  uint64_t v60 = 0;
  if (v184 == 1)
  {
    sub_1AD9DEE50();
    uint64_t v60 = sub_1AD9DEEF0();
    swift_release();
  }
  uint64_t v61 = sub_1AD9DF320();
  *(void *)&long long v163 = v52;
  *((void *)&v163 + 1)  = v54;
  LODWORD(v153)  = v56 & 1;
  char v164 = v56 & 1;
  double v165 = v58;
  uint64_t v166 = v60;
  uint64_t v167 = v61;
  v168  = v62;
  double v154 = v58;
  uint64_t v63 = v160;
  uint64_t v64 = v160[7];
  uint64_t v65 = v160[8];
  __swift_project_boxed_opaque_existential_1Tm(v155, v64);
  char v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 16))(v64, v65);
  sub_1AD952398();
  sub_1AD952A04();
  uint64_t v67 = v54;
  uint64_t v68 = v52;
  uint64_t v69 = v156;
  sub_1AD9DED30();
  swift_bridgeObjectRelease();
  sub_1AD861548(v68, v67, v153);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1AD952C0C(v69, v161, (uint64_t (*)(void))sub_1AD952364);
  if ((unint64_t)v159 < 2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v71 = v63[12];
    uint64_t v70 = v63[13];
    double v154 = v63 + 9;
    __swift_project_boxed_opaque_existential_1Tm(v63 + 9, v71);
    uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)(v70 + 8) + 8))(v71);
    uint64_t v67 = v72;
    char v66 = v73;
    if (qword_1E9A490B8 == -1) {
      goto LABEL_7;
    }
  }
  swift_once();
LABEL_7:
  uint64_t v74 = sub_1AD9DEAB0();
  double v155 = v75;
  uint64_t v156 = v76;
  char v78 = v77;
  sub_1AD861548(v60, v67, v66 & 1);
  swift_bridgeObjectRelease();
  long long v163 = v185;
  sub_1AD9DF050();
  if (v184 == 1)
  {
    sub_1AD9DEE60();
    uint64_t v79 = sub_1AD9DEEF0();
    swift_release();
  }
  else
  {
    uint64_t v79 = 0;
  }
  uint64_t v80 = sub_1AD9DF320();
  uint64_t v82 = v81;
  char v83 = sub_1AD9DE790();
  if (qword_1E9A48F78 != -1) {
    swift_once();
  }
  sub_1AD9DDCC0();
  uint64_t v85 = v84;
  uint64_t v87 = v86;
  uint64_t v89 = v88;
  uint64_t v91 = v90;
  char v92 = sub_1AD9DE7A0();
  if (qword_1E9A48F80 != -1) {
    swift_once();
  }
  sub_1AD9DDCC0();
  char v93 = v78 & 1;
  v184  = v93;
  v183  = 0;
  v182  = 0;
  uint64_t v94 = v155;
  *(void *)&long long v163 = v74;
  *((void *)&v163 + 1)  = v155;
  char v164 = v93;
  uint64_t v145 = v74;
  double v165 = (void *)v156;
  LOWORD(v166)  = 256;
  uint64_t v153 = v79;
  uint64_t v167 = v79;
  v168  = v80;
  v169  = v82;
  char v170 = v83;
  v171  = v85;
  v172  = v87;
  uint64_t v173 = v89;
  uint64_t v174 = v91;
  char v175 = 0;
  char v176 = v92;
  uint64_t v177 = v95;
  uint64_t v178 = v96;
  uint64_t v179 = v97;
  uint64_t v180 = v98;
  v181  = 0;
  uint64_t v99 = v160;
  uint64_t v100 = v160[12];
  uint64_t v101 = v160[13];
  __swift_project_boxed_opaque_existential_1Tm(v154, v100);
  (*(void (**)(uint64_t, uint64_t))(v101 + 16))(v100, v101);
  sub_1AD95242C(0);
  sub_1AD952AE0(&qword_1E9A4CB10, sub_1AD95242C, (void (*)(void))sub_1AD952AAC);
  uint64_t v102 = (uint64_t)v152;
  sub_1AD9DED30();
  swift_bridgeObjectRelease();
  sub_1AD861548(v145, (uint64_t)v94, v93);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = sub_1AD952C0C(v102, v158, (uint64_t (*)(void))sub_1AD9523F8);
  if ((unint64_t)v159 < 3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v105 = v99[17];
    uint64_t v104 = v99[18];
    long long v159 = v99 + 14;
    __swift_project_boxed_opaque_existential_1Tm(v99 + 14, v105);
    uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)(v104 + 8) + 8))(v105);
    uint64_t v108 = v107;
    char v110 = v109 & 1;
    sub_1AD9DE990();
    uint64_t v111 = sub_1AD9DEAB0();
    uint64_t v113 = v112;
    char v115 = v114;
    swift_release();
    char v116 = v115 & 1;
    sub_1AD861548(v106, v108, v110);
    swift_bridgeObjectRelease();
    sub_1AD9DE8B0();
    uint64_t v117 = sub_1AD9DEA60();
    uint64_t v119 = v118;
    char v121 = v120 & 1;
    sub_1AD861548(v111, v113, v116);
    swift_bridgeObjectRelease();
    sub_1AD9DEF10();
    uint64_t v122 = sub_1AD9DEA70();
    uint64_t v124 = v123;
    char v126 = v125;
    uint64_t v128 = v127;
    swift_release();
    sub_1AD861548(v117, v119, v121);
    swift_bridgeObjectRelease();
    long long v163 = v185;
    sub_1AD9DF050();
    if (v162 == 1)
    {
      sub_1AD9DEED0();
      uint64_t v129 = sub_1AD9DEEF0();
      swift_release();
    }
    else
    {
      uint64_t v129 = 0;
    }
    uint64_t v157 = v129;
    char v130 = v126 & 1;
    uint64_t v131 = sub_1AD9DF320();
    *(void *)&long long v163 = v122;
    *((void *)&v163 + 1)  = v124;
    char v164 = v130;
    double v165 = v128;
    LOWORD(v166)  = 256;
    uint64_t v167 = v129;
    v168  = v131;
    v169  = v132;
    uint64_t v133 = v160[17];
    uint64_t v134 = v160[18];
    __swift_project_boxed_opaque_existential_1Tm(v159, v133);
    (*(void (**)(uint64_t, uint64_t))(v134 + 16))(v133, v134);
    sub_1AD9524C8(0);
    sub_1AD952B64();
    uint64_t v135 = (uint64_t)v146;
    sub_1AD9DED30();
    swift_bridgeObjectRelease();
    sub_1AD861548(v122, v124, v130);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v136 = (uint64_t)v148;
    sub_1AD952C0C(v135, (uint64_t)v148, (uint64_t (*)(void))sub_1AD95255C);
    uint64_t v137 = v147;
    sub_1AD952880(v161, v147, (uint64_t (*)(void))sub_1AD952364);
    uint64_t v138 = v158;
    uint64_t v139 = (uint64_t)v149;
    sub_1AD952880(v158, (uint64_t)v149, (uint64_t (*)(void))sub_1AD9523F8);
    uint64_t v140 = (uint64_t)v151;
    sub_1AD952880(v136, (uint64_t)v151, (uint64_t (*)(void))sub_1AD95255C);
    uint64_t v141 = v150;
    sub_1AD952880(v137, v150, (uint64_t (*)(void))sub_1AD952364);
    sub_1AD9522DC();
    uint64_t v143 = v142;
    sub_1AD952880(v139, v141 + *(int *)(v142 + 48), (uint64_t (*)(void))sub_1AD9523F8);
    sub_1AD952880(v140, v141 + *(int *)(v143 + 64), (uint64_t (*)(void))sub_1AD95255C);
    sub_1AD952C74(v136, (uint64_t (*)(void))sub_1AD95255C);
    sub_1AD952C74(v138, (uint64_t (*)(void))sub_1AD9523F8);
    sub_1AD952C74(v161, (uint64_t (*)(void))sub_1AD952364);
    sub_1AD952C74(v140, (uint64_t (*)(void))sub_1AD95255C);
    sub_1AD952C74(v139, (uint64_t (*)(void))sub_1AD9523F8);
    return sub_1AD952C74(v137, (uint64_t (*)(void))sub_1AD952364);
  }
  return result;
}

uint64_t sub_1AD9514D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD9505FC(a1);
}

uint64_t sub_1AD951514(uint64_t a1)
{
  MEMORY[0x1F4188790](a1, v1);
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_1AD9DEAE0();
}

uint64_t sub_1AD9515CC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD951610(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))(*(void *)(a1 + 16));
}

uint64_t sub_1AD951648(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1AD951680(uint64_t a1)
{
  return sub_1AD951610(a1);
}

id sub_1AD9516A4(uint64_t a1)
{
  return sub_1AD8489A0(a1, (uint64_t)&unk_1F046A4B8, &qword_1E9A4C9B8);
}

double static CGFloat.graphicsTopPadding.getter()
{
  return sub_1AD892F68(&qword_1E9A48F60, (uint64_t)&qword_1E9A4C9B8);
}

id sub_1AD9516E0(uint64_t a1)
{
  return sub_1AD8489A0(a1, (uint64_t)&unk_1F046A098, &qword_1E9A4C9C0);
}

double static CGFloat.graphicsHeight.getter()
{
  return sub_1AD892F68(&qword_1E9A48F68, (uint64_t)&qword_1E9A4C9C0);
}

id sub_1AD951724(uint64_t a1)
{
  return sub_1AD8489A0(a1, (uint64_t)&unk_1F046A448, &qword_1E9A4C9C8);
}

id sub_1AD95173C(uint64_t a1)
{
  return sub_1AD8489A0(a1, (uint64_t)&unk_1F046A518, &qword_1E9A4C9D0);
}

double static CGFloat.middleMetricTopPadding.getter()
{
  return sub_1AD892F68(&qword_1E9A48F78, (uint64_t)&qword_1E9A4C9D0);
}

id sub_1AD951778(uint64_t a1)
{
  return sub_1AD8489A0(a1, (uint64_t)&unk_1F046A578, &qword_1E9A4C9D8);
}

double static CGFloat.middleMetricBottomPadding.getter()
{
  return sub_1AD892F68(&qword_1E9A48F80, (uint64_t)&qword_1E9A4C9D8);
}

void sub_1AD9517B4()
{
  type metadata accessor for ObservableDarwinNotification();
  unint64_t v0 = (const void *)swift_allocObject();
  uint64_t v1 = CFNotificationCenterGetDarwinNotifyCenter();
  uint64_t v2 = (__CFString *)sub_1AD9DF6D0();
  CFNotificationCenterAddObserver(v1, v0, (CFNotificationCallback)sub_1AD9193BC, v2, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  qword_1E9A4C9E0  = (uint64_t)v0;
}

void sub_1AD951858()
{
  type metadata accessor for ObservableDarwinNotification();
  unint64_t v0 = (const void *)swift_allocObject();
  uint64_t v1 = CFNotificationCenterGetDarwinNotifyCenter();
  uint64_t v2 = (__CFString *)sub_1AD9DF6D0();
  CFNotificationCenterAddObserver(v1, v0, (CFNotificationCallback)sub_1AD9193BC, v2, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  qword_1E9A4C9E8  = (uint64_t)v0;
}

void sub_1AD9518FC()
{
  if (!qword_1E9A4C9F0)
  {
    sub_1AD9529B8(255, &qword_1EB725C88, MEMORY[0x1E4F3EB98], MEMORY[0x1E4FBB718]);
    sub_1AD951984();
    unint64_t v0 = sub_1AD9DE450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C9F0);
    }
  }
}

unint64_t sub_1AD951984()
{
  unint64_t result = qword_1E9A4C9F8[0];
  if (!qword_1E9A4C9F8[0])
  {
    sub_1AD9529B8(255, &qword_1EB725C88, MEMORY[0x1E4F3EB98], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9A4C9F8);
  }
  return result;
}

uint64_t sub_1AD951A10@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD94F8FC(*(void *)(v1 + 48), *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_1AD951A24()
{
  return sub_1AD951B40((uint64_t (*)(void *, void, void, void, void))sub_1AD9503F0);
}

uint64_t sub_1AD951A3C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1AD951A64(uint64_t a1)
{
  return a1;
}

uint64_t objectdestroyTm_9()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD951B28()
{
  return sub_1AD951B40((uint64_t (*)(void *, void, void, void, void))sub_1AD950480);
}

uint64_t sub_1AD951B40(uint64_t (*a1)(void *, void, void, void, void))
{
  return a1(v1 + 6, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1AD951B58()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD951B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 64);
}

uint64_t sub_1AD951BA4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD951BF8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40)  = v4;
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(void *)(a1 + 64)  = v5;
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1AD951C8C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v5;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1AD951D4C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t sub_1AD951DD4(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1AD951E1C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72)  = 0;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for InfographicGrid()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1AD951E88()
{
  return swift_getWitnessTable();
}

uint64_t destroy for StandardMetrics()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for StandardMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v3;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StandardMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for StandardMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for StandardMetrics()
{
  return &type metadata for StandardMetrics;
}

uint64_t sub_1AD9521D4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD9521F0()
{
  if (!qword_1E9A4CA80)
  {
    sub_1AD952284();
    sub_1AD952604(&qword_1E9A4CAD0, (void (*)(uint64_t))sub_1AD952284);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CA80);
    }
  }
}

void sub_1AD952284()
{
  if (!qword_1E9A4CA88)
  {
    sub_1AD9522DC();
    unint64_t v0 = sub_1AD9DF350();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CA88);
    }
  }
}

void sub_1AD9522DC()
{
  if (!qword_1E9A4CA90)
  {
    sub_1AD952364(255);
    sub_1AD9523F8(255);
    sub_1AD95255C(255);
    TupleTypeMetadata3  = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1E9A4CA90);
    }
  }
}

void sub_1AD952364(uint64_t a1)
{
}

void sub_1AD952398()
{
  if (!qword_1E9A4CAA0)
  {
    sub_1AD9518FC();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CAA0);
    }
  }
}

void sub_1AD9523F8(uint64_t a1)
{
}

void sub_1AD95242C(uint64_t a1)
{
}

void sub_1AD95244C(uint64_t a1)
{
}

void sub_1AD95246C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD9524C8(uint64_t a1)
{
}

void sub_1AD9524FC()
{
  if (!qword_1E9A49A78)
  {
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49A78);
    }
  }
}

void sub_1AD95255C(uint64_t a1)
{
}

void sub_1AD952590(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_1AD9DDFC0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1AD952604(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD95264C(uint64_t a1)
{
}

uint64_t sub_1AD952680()
{
  return sub_1AD952604(&qword_1E9A4CAE0, (void (*)(uint64_t))sub_1AD9521F0);
}

void sub_1AD9526B4()
{
  if (!qword_1E9A4CAE8)
  {
    sub_1AD952284();
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CAE8);
    }
  }
}

uint64_t sub_1AD952720()
{
  return sub_1AD952814();
}

uint64_t sub_1AD952728()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD952760(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD95278C(uint64_t a1)
{
  return a1;
}

uint64_t objectdestroy_13Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD95280C()
{
  return sub_1AD952814();
}

uint64_t sub_1AD952814()
{
  return sub_1AD9DF060();
}

uint64_t sub_1AD952880(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1AD9528E8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    sub_1AD9DDB60();
    a3(255);
    a4();
    unint64_t v7 = sub_1AD9DE030();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1AD952984()
{
  return sub_1AD952604(&qword_1E9A4CAF8, sub_1AD95264C);
}

void sub_1AD9529B8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1AD952A04()
{
  unint64_t result = qword_1E9A4CB00;
  if (!qword_1E9A4CB00)
  {
    sub_1AD952398();
    sub_1AD952604(&qword_1E9A4CB08, (void (*)(uint64_t))sub_1AD9518FC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CB00);
  }
  return result;
}

uint64_t sub_1AD952AAC()
{
  return sub_1AD952AE0(&qword_1E9A4CB18, sub_1AD95244C, (void (*)(void))sub_1AD952B64);
}

uint64_t sub_1AD952AE0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD952B64()
{
  unint64_t result = qword_1E9A4CB20[0];
  if (!qword_1E9A4CB20[0])
  {
    sub_1AD9524C8(255);
    sub_1AD89073C();
    sub_1AD952604(&qword_1E9A4CB08, (void (*)(uint64_t))sub_1AD9518FC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9A4CB20);
  }
  return result;
}

uint64_t sub_1AD952C0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD952C74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD952CD4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AD952D6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    v10[1]  = v11[1];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1AD952E70(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD952EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1]  = v8[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AD952F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1]  = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD952FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1]  = v8[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD953088(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1AD9531D4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10)  = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17)  = -1;
  }
  return (v17 + 1);
}

void sub_1AD9531E8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1  = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10]  = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10]  = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10]  = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1AD9533C8);
    case 4:
      *(_DWORD *)&a1[v10]  = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            void *v18 = a2 ^ 0x80000000;
            v18[1]  = 0;
          }
          else
          {
            v18[1]  = a2 - 1;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for InfographicAccessibleTextWrapper()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1AD95340C()
{
  unint64_t result = qword_1E9A4CBA8;
  if (!qword_1E9A4CBA8)
  {
    sub_1AD9528E8(255, &qword_1E9A4CAF0, sub_1AD95264C, (void (*)(void))sub_1AD952984);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CBA8);
  }
  return result;
}

uint64_t TimeOfDay.init(dateComponents:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1AD9DC8F0();
  if (v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v7 = sub_1AD9DC940();
  char v9 = v8;
  uint64_t v10 = sub_1AD9DC990();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  if (v9) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v7;
  }
  *a2  = v6;
  a2[1]  = v12;
  return result;
}

SleepHealthUI::TimeOfDay __swiftcall TimeOfDay.rounded(toIncrement:)(Swift::Double toIncrement)
{
  float64x2_t v3 = vmulq_f64(vcvtq_f64_s64(*v2), (float64x2_t)vdupq_n_s64(0x404E000000000000uLL));
  sub_1AD95398C(v1, round((60.0 * v3.f64[0] + v3.f64[1]) / toIncrement) * toIncrement);
  result.minute  = v5;
  result.hour  = v4;
  return result;
}

uint64_t TimeOfDay.dateComponents.getter()
{
  unint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD953B70(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  Swift::Int v5 = (char *)&v13 - v4;
  sub_1AD953B70(0, &qword_1EB725690, MEMORY[0x1E4F27CA0], v1);
  uint64_t result = MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v10 = (char *)&v13 - v9;
  if (v0[1] == 60 && __OFADD__(*v0, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = sub_1AD9DCE40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    uint64_t v12 = sub_1AD9DCEB0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 1, 1, v12);
    return sub_1AD9DC970();
  }
  return result;
}

SleepHealthUI::TimeOfDay __swiftcall TimeOfDay.init(hour:minute:)(Swift::Int hour, Swift::Int minute)
{
  *uint64_t v2 = hour;
  v2[1]  = minute;
  result.minute  = minute;
  result.hour  = hour;
  return result;
}

Swift::Void __swiftcall TimeOfDay.round(toIncrement:)(Swift::Double toIncrement)
{
  float64x2_t v2 = vmulq_f64(vcvtq_f64_s64(*v1), (float64x2_t)vdupq_n_s64(0x404E000000000000uLL));
  sub_1AD95398C(v3.i64, round((60.0 * v2.f64[0] + v2.f64[1]) / toIncrement) * toIncrement);
  *unint64_t v1 = v3;
}

uint64_t TimeOfDay.hour.getter()
{
  return *(void *)v0;
}

uint64_t TimeOfDay.hour.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*TimeOfDay.hour.modify())()
{
  return nullsub_1;
}

uint64_t TimeOfDay.minute.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t TimeOfDay.minute.setter(uint64_t result)
{
  *(void *)(v1 + 8)  = result;
  return result;
}

uint64_t (*TimeOfDay.minute.modify())()
{
  return nullsub_1;
}

uint64_t TimeOfDay.hourAndMinute.getter()
{
  return *(void *)v0;
}

void sub_1AD953874()
{
  uint64_t v0 = *MEMORY[0x1E4FA5310];
  qword_1E9A4CBB0  = *MEMORY[0x1E4FA5308];
  *(void *)algn_1E9A4CBB8  = v0;
}

double static TimeOfDay.defaultBedtime.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_1AD95390C(&qword_1E9A48F98, (__n128 *)&qword_1E9A4CBB0, a1).n128_u64[0];
  return result;
}

void sub_1AD9538C0()
{
  uint64_t v0 = *MEMORY[0x1E4FA5478];
  qword_1E9A4CBC0  = *MEMORY[0x1E4FA5470];
  *(void *)algn_1E9A4CBC8  = v0;
}

double static TimeOfDay.defaultWakeUp.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_1AD95390C(&qword_1E9A48FA0, (__n128 *)&qword_1E9A4CBC0, a1).n128_u64[0];
  return result;
}

__n128 sub_1AD95390C@<Q0>(void *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  __n128 result = *a2;
  *a3  = *a2;
  return result;
}

BOOL static TimeOfDay.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_1AD953968(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_1AD953980()
{
  return *(void *)v0;
}

void sub_1AD95398C(uint64_t *a1@<X8>, double a2@<D0>)
{
  double v2 = floor(a2 / 60.0 / 60.0);
  if (v2 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((*(void *)&v2 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    goto LABEL_10;
  }
  double v3 = floor((a2 - v2 * 60.0 * 60.0) / 60.0);
  if ((*(void *)&v3 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    goto LABEL_10;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v3 < 9.22337204e18)
  {
    *a1  = (uint64_t)v2 % 24;
    a1[1]  = (uint64_t)v3;
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t TimeOfDay.description.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  sub_1AD953B70(0, (unint64_t *)&qword_1E9A4A978, (uint64_t (*)(uint64_t))sub_1AD8C93A0, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16)  = xmmword_1AD9E53A0;
  sub_1AD953BD4();
  uint64_t v4 = sub_1AD9DF730();
  uint64_t v6 = v5;
  *(void *)(v3 + 56)  = MEMORY[0x1E4FBB1A0];
  unint64_t v7 = sub_1AD89E5A8();
  *(void *)(v3 + 32)  = v4;
  *(void *)(v3 + 40)  = v6;
  uint64_t v8 = MEMORY[0x1E4FBB550];
  uint64_t v9 = MEMORY[0x1E4FBB5C8];
  *(void *)(v3 + 96)  = MEMORY[0x1E4FBB550];
  *(void *)(v3 + 104)  = v9;
  *(void *)(v3 + 64)  = v7;
  *(void *)(v3 + 72)  = v2;
  *(void *)(v3 + 136)  = v8;
  *(void *)(v3 + 144)  = v9;
  *(void *)(v3 + 112)  = v1;
  return sub_1AD9DF720();
}

void sub_1AD953B70(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1AD953BD4()
{
  unint64_t result = qword_1E9A4CBD0;
  if (!qword_1E9A4CBD0)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4CBD0);
  }
  return result;
}

uint64_t DateComponents.init(timeOfDay:)()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD953B70(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v12 - v3;
  sub_1AD953B70(0, &qword_1EB725690, MEMORY[0x1E4F27CA0], v0);
  MEMORY[0x1F4188790](v5 - 8, v6);
  unint64_t v8 = (char *)&v12 - v7;
  uint64_t v9 = sub_1AD9DCE40();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = sub_1AD9DCEB0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
  return sub_1AD9DC970();
}

uint64_t DateComponents.applying(timeOfDay:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DC990();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v2, v4);
  sub_1AD9DC900();
  return sub_1AD9DC950();
}

ValueMetadata *type metadata accessor for TimeOfDay()
{
  return &type metadata for TimeOfDay;
}

double sub_1AD953EF0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  sub_1AD861558(a1, a2, a3 & 1);
  sub_1AD955A10(0, &qword_1EB725A38, MEMORY[0x1E4F3CC78], MEMORY[0x1E4F3CC10]);
  sub_1AD955A60();
  swift_bridgeObjectRetain();
  sub_1AD9DE470();
  double result = *(double *)&v6;
  *(_OWORD *)a4  = v6;
  *(_OWORD *)(a4 + 16)  = v7;
  *(unsigned char *)(a4 + 32)  = v8;
  return result;
}

uint64_t sub_1AD953FD0(char a1)
{
  sub_1AD941270();
  MEMORY[0x1F4188790](v3, v4);
  long long v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD954830(0, &qword_1E9A4CBE0, (uint64_t (*)(uint64_t))sub_1AD941210, (uint64_t (*)(uint64_t))sub_1AD941270, MEMORY[0x1E4F3D748]);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v10 = (char *)&v19 - v9;
  sub_1AD941210();
  MEMORY[0x1F4188790](v11, v12);
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v15 = (char *)&v19 - v14;
  if (a1)
  {
    sub_1AD95520C(v1, (uint64_t)&v19 - v14, (uint64_t (*)(void))sub_1AD941270);
    sub_1AD95520C((uint64_t)v15, (uint64_t)v10, (uint64_t (*)(void))sub_1AD941210);
    swift_storeEnumTagMultiPayload();
    sub_1AD94174C(&qword_1E9A4C8A8, (void (*)(uint64_t))sub_1AD941210, (void (*)(void))sub_1AD941704, (void (*)(void))sub_1AD90F7D0);
    sub_1AD941704();
    sub_1AD9DE470();
    uint64_t v16 = (uint64_t)v15;
    unint64_t v17 = sub_1AD941210;
  }
  else
  {
    sub_1AD95520C(v1, (uint64_t)v6, (uint64_t (*)(void))sub_1AD941270);
    sub_1AD95520C((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))sub_1AD941270);
    swift_storeEnumTagMultiPayload();
    sub_1AD94174C(&qword_1E9A4C8A8, (void (*)(uint64_t))sub_1AD941210, (void (*)(void))sub_1AD941704, (void (*)(void))sub_1AD90F7D0);
    sub_1AD941704();
    sub_1AD9DE470();
    uint64_t v16 = (uint64_t)v6;
    unint64_t v17 = sub_1AD941270;
  }
  return sub_1AD955274(v16, (uint64_t (*)(void))v17);
}

_WORD *Text.ViewModel.init(leadingSymbol:text:font:textColor:hidden:accessibilityLabel:)@<X0>(_WORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_WORD *)a9  = *result;
  *(void *)(a9 + 8)  = a2;
  *(void *)(a9 + 16)  = a3;
  *(void *)(a9 + 24)  = a4;
  *(void *)(a9 + 32)  = a5;
  *(unsigned char *)(a9 + 40)  = a6;
  *(void *)(a9 + 48)  = a7;
  *(void *)(a9 + 56)  = a8;
  return result;
}

uint64_t static Text.create(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD95593C(0, &qword_1E9A49C80, MEMORY[0x1E4F3EC78], MEMORY[0x1E4F3DF18]);
  uint64_t v61 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (char *)&v49 - v6;
  uint64_t v8 = sub_1AD9DEF90();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v62 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD941304(0);
  uint64_t v60 = v12;
  MEMORY[0x1F4188790](v12, v13);
  int v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD941270();
  uint64_t v63 = v16;
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9411C8(0);
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v23);
  uint64_t v64 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v25 = a1[1];
  long long v67 = *a1;
  long long v68 = v25;
  long long v26 = a1[3];
  long long v69 = a1[2];
  long long v70 = v26;
  sub_1AD955AFC((uint64_t)&v67 + 8, (uint64_t)v71, &qword_1E9A4A038);
  sub_1AD955AFC((uint64_t)v71, (uint64_t)&v72, &qword_1E9A4A038);
  if (v73)
  {
    uint64_t v56 = sub_1AD954E58(v72, v73, v69, v70, *((uint64_t *)&v70 + 1));
    uint64_t v55 = v27;
    uint64_t v57 = v28;
    int v54 = v29 & 1;
    double v30 = sub_1AD955008((uint64_t)&v67, v56, v27, v29 & 1, (uint64_t)v65);
    uint64_t v51 = v65[0];
    uint64_t v58 = v22;
    uint64_t v31 = (uint64_t *)v7;
    uint64_t v32 = v65[1];
    uint64_t v33 = v65[2];
    uint64_t v50 = v65[3];
    uint64_t v59 = v21;
    char v34 = v66;
    uint64_t v35 = v62;
    (*(void (**)(char *, void, uint64_t, double))(v9 + 104))(v62, *MEMORY[0x1E4F3EC60], v8, v30);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v52 = v19;
    uint64_t v37 = v8;
    uint64_t v53 = a2;
    uint64_t v38 = KeyPath;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v31 + *(int *)(v61 + 28), v35, v8);
    *uint64_t v31 = v38;
    sub_1AD8743C4((uint64_t)v31, (uint64_t)&v15[*(int *)(v60 + 36)]);
    uint64_t v39 = v51;
    *(void *)int v15 = v51;
    *((void *)v15 + 1)  = v32;
    uint64_t v40 = v50;
    *((void *)v15 + 2)  = v33;
    *((void *)v15 + 3)  = v40;
    v15[32]  = v34;
    sub_1AD861A34(v39, v32, v33);
    sub_1AD874428((uint64_t)v31);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v35, v37);
    uint64_t v41 = v32;
    uint64_t v22 = v58;
    uint64_t v21 = v59;
    sub_1AD861570(v39, v41, v33);
    uint64_t v42 = *((void *)&v68 + 1);
    uint64_t v43 = swift_getKeyPath();
    uint64_t v44 = (uint64_t)v52;
    sub_1AD95520C((uint64_t)v15, (uint64_t)v52, (uint64_t (*)(void))sub_1AD941304);
    uint64_t v45 = (uint64_t *)(v44 + *(int *)(v63 + 36));
    uint64_t *v45 = v43;
    v45[1]  = v42;
    swift_retain();
    sub_1AD955274((uint64_t)v15, (uint64_t (*)(void))sub_1AD941304);
    uint64_t v46 = (uint64_t)v64;
    sub_1AD953FD0(SBYTE8(v69));
    sub_1AD861548(v56, v55, v54);
    swift_bridgeObjectRelease();
    sub_1AD955274(v44, (uint64_t (*)(void))sub_1AD941270);
    a2  = v53;
    sub_1AD9552D4(v46, v53);
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v47 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a2, v47, 1, v21);
}

void sub_1AD954830(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t Text.init(_:table:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a5[1];
  if (v5)
  {
    uint64_t v6 = (void *)a5[2];
    uint64_t v7 = *a5;
    swift_bridgeObjectRetain();
    id v8 = v6;
    sub_1AD955338(v7, v5, v6);
  }
  return sub_1AD9DEAD0();
}

void Text.ViewModel.leadingSymbol.getter(_WORD *a1@<X8>)
{
  *a1  = *v1;
}

uint64_t Text.ViewModel.text.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Text.ViewModel.font.getter()
{
  return swift_retain();
}

uint64_t Text.ViewModel.textColor.getter()
{
  return swift_retain();
}

uint64_t Text.ViewModel.hidden.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Text.ViewModel.accessibilityLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Text.ViewModel.hash(into:)()
{
  uint64_t v1 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = v0[7];
  if ((~*(unsigned __int16 *)v0 & 0xFCFC) != 0)
  {
    sub_1AD9E03C0();
    Symbol.hash(into:)();
    if (v1)
    {
LABEL_3:
      sub_1AD9E03C0();
      swift_bridgeObjectRetain();
      sub_1AD9DF760();
      swift_bridgeObjectRelease();
      if (v3) {
        goto LABEL_4;
      }
LABEL_8:
      sub_1AD9E03C0();
      if (v2) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  else
  {
    sub_1AD9E03C0();
    if (v1) {
      goto LABEL_3;
    }
  }
  sub_1AD9E03C0();
  if (!v3) {
    goto LABEL_8;
  }
LABEL_4:
  sub_1AD9E03C0();
  swift_retain();
  sub_1AD9DE880();
  swift_release();
  if (v2)
  {
LABEL_5:
    sub_1AD9E03C0();
    swift_retain();
    sub_1AD9DEE80();
    swift_release();
    goto LABEL_10;
  }
LABEL_9:
  sub_1AD9E03C0();
LABEL_10:
  sub_1AD9E03C0();
  if (!v4) {
    return sub_1AD9E03C0();
  }
  sub_1AD9E03C0();
  swift_bridgeObjectRetain();
  sub_1AD9DF760();
  return swift_bridgeObjectRelease();
}

uint64_t Text.ViewModel.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD954C20()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD954C90()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD954CFC(__int16 *a1)
{
  __int16 v1 = *a1;
  Symbol.systemName.getter();
  sub_1AD9DEF70();
  uint64_t v2 = sub_1AD9DEB00();
  uint64_t v4 = v3;
  char v6 = v5;
  if (v1 & 0xF000) != 0x1000 || (v1)
  {
    id v7 = objc_msgSend(self, sel_hk_sleepKeyColor);
  }
  else
  {
    if (qword_1E9A48DB0 != -1) {
      swift_once();
    }
    id v7 = (id)qword_1E9A49F58;
  }
  MEMORY[0x1B3E6ADC0](v7);
  uint64_t v8 = sub_1AD9DEA70();
  swift_release();
  sub_1AD861548(v2, v4, v6 & 1);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1AD954E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    sub_1AD85F688();
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1AD9DEAF0();
    uint64_t v7 = v6;
    char v9 = v8 & 1;
    uint64_t v10 = sub_1AD9DEA70();
    uint64_t v12 = v11;
    char v14 = v13 & 1;
    sub_1AD861548(v5, v7, v9);
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_1AD9DEA80();
    sub_1AD861548(v10, v12, v14);
  }
  else
  {
    sub_1AD85F688();
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1AD9DEAF0();
    uint64_t v18 = v17;
    char v20 = v19 & 1;
    uint64_t v15 = sub_1AD9DEA70();
    sub_1AD861548(v16, v18, v20);
  }
  swift_bridgeObjectRelease();
  return v15;
}

double sub_1AD955008@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v8 = a4 & 1;
  sub_1AD955AFC(a1, (uint64_t)v26, &qword_1E9A4CBE8);
  sub_1AD955AFC((uint64_t)v26, (uint64_t)&v27, &qword_1E9A4CBE8);
  if ((~v27 & 0xFCFC) != 0)
  {
    sub_1AD955B68((uint64_t)&v27, (uint64_t)v28);
    sub_1AD955B68((uint64_t)v28, (uint64_t)v24);
    uint64_t v9 = sub_1AD954CFC((__int16 *)v24);
    uint64_t v11 = v10;
    char v13 = v12 & 1;
    uint64_t v14 = sub_1AD9DEA90();
    uint64_t v16 = v15;
    uint64_t v23 = a5;
    char v18 = v17 & 1;
    sub_1AD861548(v9, v11, v13);
    swift_bridgeObjectRelease();
    sub_1AD9DEA90();
    char v19 = v18;
    a5  = v23;
    sub_1AD861548(v14, v16, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1AD861558(a2, a3, v8);
    swift_bridgeObjectRetain();
  }
  sub_1AD9DE470();
  double result = *(double *)v24;
  long long v21 = v24[1];
  char v22 = v25;
  *(_OWORD *)a5  = v24[0];
  *(_OWORD *)(a5 + 16)  = v21;
  *(unsigned char *)(a5 + 32)  = v22;
  return result;
}

uint64_t static String.thinSpace.getter()
{
  return 9011426;
}

uint64_t sub_1AD95520C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD955274(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD9552D4(uint64_t a1, uint64_t a2)
{
  sub_1AD9411C8(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1AD955338(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
  }
}

BOOL _s7SwiftUI4TextV011SleepHealthB0E9ViewModelV2eeoiySbAF_AFtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v6 = *((void *)a1 + 4);
  int v7 = *((unsigned __int8 *)a1 + 40);
  uint64_t v8 = *((void *)a1 + 6);
  uint64_t v9 = *((void *)a1 + 7);
  int v10 = *a2;
  uint64_t v11 = *((void *)a2 + 1);
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v13 = *((void *)a2 + 3);
  uint64_t v14 = *((void *)a2 + 4);
  int v15 = *((unsigned __int8 *)a2 + 40);
  uint64_t v17 = *((void *)a2 + 6);
  uint64_t v16 = *((void *)a2 + 7);
  unsigned __int16 v41 = *a2;
  if ((~v2 & 0xFCFC) != 0)
  {
    __int16 v40 = v2;
    if ((~v10 & 0xFCFC) == 0) {
      return 0;
    }
    uint64_t v37 = v14;
    uint64_t v38 = v5;
    uint64_t v36 = v6;
    int v35 = v15;
    int v18 = v7;
    uint64_t v19 = v17;
    uint64_t v20 = v16;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    uint64_t v23 = v13;
    uint64_t v24 = v3;
    uint64_t v25 = v11;
    char v26 = _s13SleepHealthUI6SymbolO2eeoiySbAC_ACtFZ_0(&v40, &v41);
    uint64_t v11 = v25;
    uint64_t v3 = v24;
    uint64_t v13 = v23;
    uint64_t v8 = v22;
    uint64_t v9 = v21;
    uint64_t v16 = v20;
    uint64_t v17 = v19;
    int v7 = v18;
    int v15 = v35;
    uint64_t v6 = v36;
    uint64_t v14 = v37;
    uint64_t v5 = v38;
    if ((v26 & 1) == 0) {
      return 0;
    }
  }
  else if ((~v10 & 0xFCFC) != 0)
  {
    return 0;
  }
  if (!v4)
  {
    if (v12) {
      return 0;
    }
    goto LABEL_13;
  }
  if (!v12) {
    return 0;
  }
  if (v3 == v11 && v4 == v12
    || (v27 = v8, v28 = v13, v29 = sub_1AD9E02D0(), v13 = v28, v8 = v27, v30 = v29, BOOL result = 0, (v30 & 1) != 0))
  {
LABEL_13:
    if (v5)
    {
      if (!v13) {
        return 0;
      }
      uint64_t v39 = v8;
      swift_retain();
      swift_retain();
      char v32 = sub_1AD9DE850();
      swift_release();
      swift_release();
      uint64_t v8 = v39;
      if ((v32 & 1) == 0) {
        return 0;
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (v6)
    {
      if (!v14) {
        return 0;
      }
      uint64_t v33 = v8;
      swift_retain();
      swift_retain();
      char v34 = sub_1AD9DEE40();
      swift_release();
      swift_release();
      BOOL result = 0;
      if ((v34 & 1) == 0) {
        return result;
      }
      uint64_t v8 = v33;
      if ((v7 ^ v15)) {
        return result;
      }
    }
    else
    {
      BOOL result = 0;
      if (v14 || ((v7 ^ v15) & 1) != 0) {
        return result;
      }
    }
    if (v9) {
      return v16 && (v8 == v17 && v9 == v16 || (sub_1AD9E02D0() & 1) != 0);
    }
    return !v16;
  }
  return result;
}

unint64_t sub_1AD9555C4()
{
  unint64_t result = qword_1E9A4CBD8;
  if (!qword_1E9A4CBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CBD8);
  }
  return result;
}

uint64_t _s9ViewModelVwxx()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t _s9ViewModelVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v4;
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s9ViewModelVwca(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v4;
  *(__n128 *)a1  = result;
  *(_OWORD *)(a1 + 16)  = v3;
  return result;
}

uint64_t _s9ViewModelVwta(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9ViewModelVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s9ViewModelVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56)  = 0;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64)  = 0;
    }
    if (a2) {
      *(void *)(result + 16)  = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.ViewModel()
{
  return &type metadata for Text.ViewModel;
}

uint64_t sub_1AD9558E0()
{
  return sub_1AD9559A0(&qword_1E9A4C898, sub_1AD941130, (void (*)(void))sub_1AD941648);
}

void sub_1AD95593C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD9559A0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD955A10(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x1E4F3E2F8]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1AD955A60()
{
  unint64_t result = qword_1EB724E30;
  if (!qword_1EB724E30)
  {
    sub_1AD955A10(255, &qword_1EB725A38, MEMORY[0x1E4F3CC78], MEMORY[0x1E4F3CC10]);
    sub_1AD90F7D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB724E30);
  }
  return result;
}

uint64_t sub_1AD955AFC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  sub_1AD87437C(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD955B68(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1AD955BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1AD9573C8(0, &qword_1E9A4CE80, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  unint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = sub_1AD9DCB80();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCB70();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16)  = a2;
    *(void *)(v15 + 24)  = a3;
    sub_1AD8CB060(a2);
    DeepLinkOpener.open(url:completion:)((uint64_t)v13, (uint64_t)sub_1AD9576AC, v15);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return result;
}

id sub_1AD955DBC(int a1, int a2, int a3, int a4, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = sub_1AD9DF710();
  uint64_t v8 = v7;
  uint64_t v9 = sub_1AD9DF710();
  uint64_t v11 = v10;
  if (v5)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16)  = v5;
    uint64_t v5 = sub_1AD957634;
  }
  else
  {
    uint64_t v12 = 0;
  }
  id v13 = _sSo17UIAlertControllerC13SleepHealthUIE026notificationsWontFireAlertB014localizedTitle0J7Dismiss10completionABSS_SSySbcSgtFZ_0(v6, v8, v9, v11, (uint64_t)v5, v12);
  sub_1AD8BEC64((uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1AD955EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v50 = a2;
  sub_1AD9573C8(0, &qword_1E9A4CE80, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)v41 - v5;
  uint64_t v7 = sub_1AD9DCB80();
  uint64_t v51 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v52 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD957238();
  uint64_t v48 = *(void *)(v10 - 8);
  uint64_t v49 = v10;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v47 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v59 = *v2;
  char v60 = *((unsigned char *)v2 + 16);
  sub_1AD94F034();
  sub_1AD9DF1E0();
  uint64_t v45 = v55[1];
  uint64_t v46 = v55[0];
  int v44 = v56;
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v13 = (id)qword_1EB727930;
  uint64_t v43 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  id v14 = (id)qword_1EB727930;
  unint64_t v39 = 0xE000000000000000;
  uint64_t v15 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  sub_1AD9DCB70();
  uint64_t v16 = v51;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48))(v6, 1, v7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    long long v59 = *(long long *)((char *)v2 + 24);
    uint64_t v18 = (*(uint64_t (**)(void))(v16 + 32))();
    v41[1]  = v41;
    uint64_t v57 = &type metadata for DeepLinkOpener;
    uint64_t v58 = &protocol witness table for DeepLinkOpener;
    long long v54 = v59;
    MEMORY[0x1F4188790](v18, v19);
    v41[0]  = &v41[-12];
    uint64_t v42 = v7;
    v41[-10]  = v53;
    v41[-9]  = v15;
    MEMORY[0x1F4188790](v20, v21);
    sub_1AD95736C();
    uint64_t v23 = v22;
    sub_1AD9573C8(0, &qword_1E9A4B248, (uint64_t (*)(uint64_t))sub_1AD8C8A08, MEMORY[0x1E4F3F108]);
    uint64_t v25 = v24;
    sub_1AD95748C(0, &qword_1E9A4B280, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, MEMORY[0x1E4F3CC10]);
    uint64_t v27 = v26;
    unint64_t v28 = sub_1AD9574DC();
    unint64_t v29 = sub_1AD85F688();
    unint64_t v30 = sub_1AD957534();
    unint64_t v31 = sub_1AD8C8CC0();
    unint64_t v39 = v30;
    unint64_t v40 = v31;
    unint64_t v37 = v28;
    unint64_t v38 = v29;
    uint64_t v35 = v25;
    uint64_t v36 = v27;
    uint64_t v33 = v23;
    uint64_t v34 = MEMORY[0x1E4FBB1A0];
    char v32 = v47;
    sub_1AD9DED60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v52, v42);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v50, v32, v49);
  }
  return result;
}

uint64_t sub_1AD956468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD955EA8(a1, a2);
}

uint64_t View.notificationsWontFireAlert(isPresented:localizedTitle:localizedDismiss:completion:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v13[0]  = a1;
  v13[1]  = a2;
  char v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  uint64_t v20 = a9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AD8CB060(a8);
  MEMORY[0x1B3E6AD80](v13, a10, &type metadata for NotificationsWontFireAlert, a11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return sub_1AD8BEC64(a8);
}

uint64_t static String.sleepOnboardingNotificationsWontFireAlertTitle.getter()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static String.sleepOnboardingNotificationsWontFireAlertDismiss.getter()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static String.sleepRemindersWontFireAlertTitle.getter()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static String.sleepResultsWontFireAlertTitle.getter()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static String.notificationsWontFireAlertDismiss.getter()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v1;
}

id _sSo17UIAlertControllerC13SleepHealthUIE026notificationsWontFireAlertB014localizedTitle0J7Dismiss10completionABSS_SSySbcSgtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v8 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(self, sel_alertControllerWithTitle_message_preferredStyle_, v9, v10, 1, 0xE000000000000000);

  id v12 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16)  = a5;
  *(void *)(v13 + 24)  = a6;
  sub_1AD8CB060(a5);
  char v14 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1AD957650;
  uint64_t v28 = v13;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v24 = 1107296256;
  uint64_t v25 = sub_1AD9199DC;
  uint64_t v26 = &block_descriptor_27;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v16 = self;
  id v17 = objc_msgSend(v16, sel_actionWithTitle_style_handler_, v14, 0, v15, 0xE000000000000000);
  _Block_release(v15);

  objc_msgSend(v11, sel_addAction_, v17);
  objc_msgSend(v11, sel_setPreferredAction_, v17);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16)  = a5;
  *(void *)(v18 + 24)  = a6;
  sub_1AD8CB060(a5);
  swift_bridgeObjectRetain();
  uint64_t v19 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1AD957674;
  uint64_t v28 = v18;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v24 = 1107296256;
  uint64_t v25 = sub_1AD9199DC;
  uint64_t v26 = &block_descriptor_12_2;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_release();
  id v21 = objc_msgSend(v16, sel_actionWithTitle_style_handler_, v19, 1, v20);
  _Block_release(v20);

  objc_msgSend(v11, sel_addAction_, v21);
  return v11;
}

uint64_t sub_1AD956DF4()
{
  return swift_getWitnessTable();
}

unint64_t sub_1AD956E58()
{
  unint64_t result = qword_1E9A4CBF0;
  if (!qword_1E9A4CBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CBF0);
  }
  return result;
}

uint64_t destroy for NotificationsWontFireAlert(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NotificationsWontFireAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v6;
  id v8 = (_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(a1 + 56)  = v7;
    *(void *)(a1 + 64)  = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56)  = *v8;
  }
  return a1;
}

uint64_t assignWithCopy for NotificationsWontFireAlert(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 64);
      *(void *)(a1 + 56)  = v4;
      *(void *)(a1 + 64)  = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56)  = v4;
  *(void *)(a1 + 64)  = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NotificationsWontFireAlert(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1  = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v6)
    {
      uint64_t v8 = *(void *)(a2 + 64);
      *(void *)(a1 + 56)  = v6;
      *(void *)(a1 + 64)  = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56)  = v6;
  *(void *)(a1 + 64)  = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationsWontFireAlert(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationsWontFireAlert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationsWontFireAlert()
{
  return &type metadata for NotificationsWontFireAlert;
}

uint64_t sub_1AD95721C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD957238()
{
  if (!qword_1E9A4CBF8)
  {
    sub_1AD95736C();
    sub_1AD9573C8(255, &qword_1E9A4B248, (uint64_t (*)(uint64_t))sub_1AD8C8A08, MEMORY[0x1E4F3F108]);
    sub_1AD95748C(255, &qword_1E9A4B280, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, MEMORY[0x1E4F3CC10]);
    sub_1AD9574DC();
    sub_1AD85F688();
    sub_1AD957534();
    sub_1AD8C8CC0();
    OpaqueTypeMetadata2  = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4CBF8);
    }
  }
}

void sub_1AD95736C()
{
  if (!qword_1E9A4CC00)
  {
    sub_1AD956E58();
    unint64_t v0 = sub_1AD9DE4F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CC00);
    }
  }
}

void sub_1AD9573C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD95742C()
{
  if (!qword_1E9A4B258)
  {
    sub_1AD8C8AB0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B258);
    }
  }
}

void sub_1AD95748C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x1E4F3E2F8]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1AD9574DC()
{
  unint64_t result = qword_1E9A4CC08;
  if (!qword_1E9A4CC08)
  {
    sub_1AD95736C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CC08);
  }
  return result;
}

unint64_t sub_1AD957534()
{
  unint64_t result = qword_1E9A4B288;
  if (!qword_1E9A4B288)
  {
    sub_1AD9573C8(255, &qword_1E9A4B248, (uint64_t (*)(uint64_t))sub_1AD8C8A08, MEMORY[0x1E4F3F108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B288);
  }
  return result;
}

uint64_t sub_1AD9575BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD982A44(v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], a1, v1[10]);
}

uint64_t sub_1AD9575F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD90EF5C(a1);
}

uint64_t sub_1AD9575FC()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1AD957634(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_1AD957650(uint64_t a1)
{
  return sub_1AD955BC8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t sub_1AD957674()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(0);
  }
  return result;
}

uint64_t sub_1AD9576AC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 16);
  if (v1) {
    return v1(1);
  }
  return result;
}

uint64_t sub_1AD9576E0()
{
  return swift_getOpaqueTypeConformance2();
}

Swift::Void __swiftcall UICollectionView.registerWindDownPickerCell()()
{
  uint64_t v0 = type metadata accessor for WindDownTimePickerCollectionViewCell();
  unint64_t v1 = sub_1AD957850();
  MEMORY[0x1F411EEA8](v0, v0, v1);
}

uint64_t type metadata accessor for WindDownTimePickerCollectionViewCell()
{
  return self;
}

unint64_t sub_1AD957850()
{
  unint64_t result = qword_1E9A4CC10;
  if (!qword_1E9A4CC10)
  {
    type metadata accessor for WindDownTimePickerCollectionViewCell();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CC10);
  }
  return result;
}

void sub_1AD9578A4(double a1, double a2, double a3, double a4)
{
  v16.receiver  = v4;
  v16.super_class  = (Class)type metadata accessor for WindDownTimePickerCollectionViewCell();
  id v9 = objc_msgSendSuper2(&v16, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v10 = (char *)sub_1AD886384();

  double v11 = floor(*MEMORY[0x1E4FA54B8] * 60.0 / 60.0);
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return;
  }
  double v12 = *MEMORY[0x1E4FA54A0] * 60.0;
  uint64_t v13 = (uint64_t)v11;
  char v14 = (double *)&v10[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  double v15 = *(double *)&v10[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
  *char v14 = *MEMORY[0x1E4FA54A8] * 60.0;
  v14[1]  = v12;
  *((void *)v14 + 2)  = v13;
  *((unsigned char *)v14 + 24)  = 0;
  if (v15 != v12)
  {
    objc_msgSend(v10, sel_reloadAllComponents);
    sub_1AD900888((char *)1);
  }
}

void sub_1AD957A18(void *a1)
{
  v11.receiver  = v1;
  v11.super_class  = (Class)type metadata accessor for WindDownTimePickerCollectionViewCell();
  id v3 = objc_msgSendSuper2(&v11, sel_initWithCoder_, a1);
  if (!v3)
  {
LABEL_8:

    return;
  }
  id v4 = v3;
  unint64_t v5 = (char *)sub_1AD886384();

  double v6 = floor(*MEMORY[0x1E4FA54B8] * 60.0 / 60.0);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v6 < 9.22337204e18)
  {
    double v7 = *MEMORY[0x1E4FA54A0] * 60.0;
    uint64_t v8 = (uint64_t)v6;
    id v9 = (double *)&v5[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
    double v10 = *(double *)&v5[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
    *id v9 = *MEMORY[0x1E4FA54A8] * 60.0;
    v9[1]  = v7;
    *((void *)v9 + 2)  = v8;
    *((unsigned char *)v9 + 24)  = 0;
    if (v10 != v7)
    {
      objc_msgSend(v5, sel_reloadAllComponents);
      sub_1AD900888((char *)1);
    }

    goto LABEL_8;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_1AD957B7C()
{
  sub_1AD91D738();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell_item;
  swift_beginAccess();
  sub_1AD886B10(v1, (uint64_t)v9);
  if (!v10) {
    return sub_1AD886AB4((uint64_t)v9);
  }
  sub_1AD86E54C();
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t result = (uint64_t)sub_1AD886384();
  double v3 = floor(*MEMORY[0x1E4FA54B8] * 60.0 / 60.0);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  id v4 = (void *)result;
  uint64_t v5 = (uint64_t)v3;
  uint64_t v6 = result + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  double v7 = *(double *)(result + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8);
  *(double *)uint64_t v6 = *MEMORY[0x1E4FA54A8] * 60.0;
  *(double *)(v6 + 8)  = v8;
  *(void *)(v6 + 16)  = v5;
  *(unsigned char *)(v6 + 24)  = 0;
  if (v7 != v8)
  {
    objc_msgSend((id)result, sel_reloadAllComponents);
    sub_1AD900888((char *)1);
  }
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_1AD957CFC()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for WindDownTimePickerCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1AD957D30@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1EB727930;
  uint64_t v3 = sub_1AD9DCA70();
  uint64_t v5 = v4;

  swift_bridgeObjectRelease();
  id result = objc_msgSend(self, sel_quaternarySystemFillColor, 0xE000000000000000);
  if (result) {
    id result = (id)MEMORY[0x1B3E6ADC0]();
  }
  *(void *)a1  = 0x695F68746C616568;
  *(void *)(a1 + 8)  = 0xEB000000006E6F63;
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v5;
  *(void *)(a1 + 32)  = result;
  *(unsigned char *)(a1 + 40)  = 1;
  return result;
}

uint64_t PromotionViewModel.imageName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromotionViewModel.localizedTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromotionViewModel.backgroundColor.getter()
{
  return swift_retain();
}

void PromotionViewModel.deepLinkDestination.getter(unsigned char *a1@<X8>)
{
  *a1  = *(unsigned char *)(v1 + 40);
}

uint64_t PromotionViewModel.init(imageName:localizedTitle:backgroundColor:deepLinkDestination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  char v12 = *a6;
  if (a5) {
    uint64_t result = MEMORY[0x1B3E6ADC0](a5);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)a7  = a1;
  *(void *)(a7 + 8)  = a2;
  *(void *)(a7 + 16)  = a3;
  *(void *)(a7 + 24)  = a4;
  *(void *)(a7 + 32)  = result;
  *(unsigned char *)(a7 + 40)  = v12;
  return result;
}

uint64_t sub_1AD957F4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  char v6 = *(unsigned char *)(v1 + 40);
  *(void *)a1  = *(void *)v1;
  *(void *)(a1 + 8)  = v2;
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  *(void *)(a1 + 32)  = v5;
  *(unsigned char *)(a1 + 40)  = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_1AD957FB0()
{
  qword_1E9A4CC18  = 0x4040000000000000;
}

void sub_1AD957FC0()
{
  qword_1E9A4CC20  = 0x4024000000000000;
}

void sub_1AD957FD0()
{
  qword_1E9A4CC28  = 0x4024000000000000;
}

void sub_1AD957FE0()
{
  qword_1E9A4CC30  = 0x4028000000000000;
}

double sub_1AD957FF0()
{
  double result = 16.0;
  xmmword_1E9A4CC38  = xmmword_1AD9EBCB0;
  *(_OWORD *)&qword_1E9A4CC48  = xmmword_1AD9EBCC0;
  return result;
}

uint64_t sub_1AD958010@<X0>(uint64_t a1@<X8>)
{
  sub_1AD959A10();
  MEMORY[0x1F4188790](v3 - 8, v4);
  char v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD95A148(0);
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v7, v9);
  objc_super v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = v1[1];
  long long v23 = *v1;
  *(_OWORD *)uint64_t v24 = v12;
  *(_OWORD *)&v24[9]  = *(long long *)((char *)v1 + 25);
  uint64_t v13 = sub_1AD9DE2A0();
  if (qword_1E9A48FB0 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1E9A4CC20;
  *(void *)char v6 = v13;
  *((void *)v6 + 1)  = v14;
  v6[16]  = 0;
  sub_1AD95A170();
  sub_1AD958238(&v23, (uint64_t)&v6[*(int *)(v15 + 44)]);
  uint64_t v16 = *(void *)&v24[16];
  sub_1AD95A208((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(void))sub_1AD959A10);
  *(void *)&v11[*(int *)(v8 + 36)]  = v16;
  swift_retain();
  sub_1AD95A380((uint64_t)v6, (uint64_t (*)(void))sub_1AD959A10);
  if (qword_1E9A48FC8 != -1) {
    swift_once();
  }
  long long v22 = xmmword_1E9A4CC38;
  uint64_t v17 = qword_1E9A4CC48;
  uint64_t v18 = unk_1E9A4CC50;
  sub_1AD95A208((uint64_t)v11, a1, (uint64_t (*)(void))sub_1AD95A148);
  sub_1AD95A270(0);
  uint64_t v20 = a1 + *(int *)(v19 + 36);
  *(_OWORD *)uint64_t v20 = v22;
  *(void *)(v20 + 16)  = v17;
  *(void *)(v20 + 24)  = v18;
  *(unsigned char *)(v20 + 32)  = 0;
  return sub_1AD95A380((uint64_t)v11, (uint64_t (*)(void))sub_1AD95A148);
}

uint64_t sub_1AD958238@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD959B58();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v9);
  objc_super v11 = (char *)v28 - v10;
  sub_1AD959AF8();
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v19 = (char *)v28 - v18;
  sub_1AD95A3E0((uint64_t)a1);
  uint64_t v20 = qword_1EB724E38;
  swift_bridgeObjectRetain();
  if (v20 != -1) {
    swift_once();
  }
  id v21 = (id)qword_1EB727930;
  uint64_t v22 = sub_1AD9DEFB0();
  sub_1AD95A428((uint64_t)a1);
  if (qword_1E9A48FA8 != -1) {
    swift_once();
  }
  v28[0]  = v22;
  v28[1]  = qword_1E9A4CC18;
  sub_1AD95A474();
  sub_1AD9DEC60();
  swift_release();
  uint64_t v23 = sub_1AD9DE340();
  if (qword_1E9A48FB8 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_1E9A4CC28;
  *(void *)objc_super v11 = v23;
  *((void *)v11 + 1)  = v24;
  v11[16]  = 0;
  sub_1AD95A4C8();
  sub_1AD95854C(a1, (uint64_t)&v11[*(int *)(v25 + 44)]);
  sub_1AD95A208((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(void))sub_1AD959AF8);
  sub_1AD95A208((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(void))sub_1AD959B58);
  sub_1AD95A208((uint64_t)v15, a2, (uint64_t (*)(void))sub_1AD959AF8);
  sub_1AD959AC4(0);
  sub_1AD95A208((uint64_t)v7, a2 + *(int *)(v26 + 48), (uint64_t (*)(void))sub_1AD959B58);
  sub_1AD95A380((uint64_t)v11, (uint64_t (*)(void))sub_1AD959B58);
  sub_1AD95A380((uint64_t)v19, (uint64_t (*)(void))sub_1AD959AF8);
  sub_1AD95A380((uint64_t)v7, (uint64_t (*)(void))sub_1AD959B58);
  return sub_1AD95A380((uint64_t)v15, (uint64_t (*)(void))sub_1AD959AF8);
}

uint64_t sub_1AD95854C@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v91 = sub_1AD9DE000();
  uint64_t v4 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91, v5);
  uint64_t v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD95A014();
  uint64_t v94 = v8;
  uint64_t v93 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v9);
  objc_super v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD959F94();
  uint64_t v92 = v12;
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD959F08(0);
  uint64_t v96 = v16;
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v101 = (uint64_t)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v95 = (uint64_t)&v88 - v21;
  MEMORY[0x1F4188790](v22, v23);
  uint64_t v99 = (uint64_t)&v88 - v24;
  uint64_t v98 = sub_1AD9DF230();
  uint64_t v100 = *(void *)(v98 - 8);
  MEMORY[0x1F4188790](v98, v25);
  uint64_t v97 = (char *)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27, v28);
  unint64_t v30 = (char *)&v88 - v29;
  sub_1AD959DF0(0);
  MEMORY[0x1F4188790](v31 - 8, v32);
  uint64_t v34 = (char *)&v88 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35, v36);
  uint64_t v102 = (uint64_t)&v88 - v37;
  long long v38 = *(long long *)((char *)a1 + 25);
  long long v39 = a1[1];
  long long v116 = *a1;
  *(_OWORD *)uint64_t v117 = v39;
  *(_OWORD *)&v117[9]  = v38;
  unsigned long long v111 = __PAIR128__(*(unint64_t *)&v117[8], v39);
  sub_1AD85F688();
  swift_bridgeObjectRetain();
  uint64_t v105 = sub_1AD9DEAF0();
  uint64_t v104 = v40;
  LODWORD(v42)  = v41;
  uint64_t v44 = v43;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v103 = swift_getKeyPath();
  LOBYTE(a1)  = sub_1AD9DE7D0();
  int v107 = sub_1AD9DE7C0();
  sub_1AD9DE7C0();
  if (sub_1AD9DE7C0() != a1) {
    int v107 = sub_1AD9DE7C0();
  }
  if (qword_1E9A48FC0 != -1) {
    swift_once();
  }
  sub_1AD9DDCC0();
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  sub_1AD95A570((uint64_t)&v117[24], (uint64_t)&v118);
  sub_1AD95A570((uint64_t)&v118, (uint64_t)&v119);
  char v53 = v119;
  if (v119 == 3)
  {
    sub_1AD959E24(0);
    uint64_t v55 = v102;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v102, 1, 1, v54);
  }
  else
  {
    int v89 = v42;
    uint64_t v90 = v44;
    sub_1AD9DF220();
    uint64_t v112 = &type metadata for DeepLinkOpener;
    uint64_t v113 = &protocol witness table for DeepLinkOpener;
    char v108 = 0;
    sub_1AD9DF040();
    char v114 = v109;
    uint64_t v115 = v110;
    LOBYTE(v111)  = v53;
    sub_1AD9DDFF0();
    sub_1AD8C30D0();
    sub_1AD95A338(&qword_1E9A4CD00, MEMORY[0x1E4F3CD40]);
    uint64_t v56 = v91;
    sub_1AD9DEC10();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v56);
    sub_1AD8C9670((uint64_t)&v111);
    id v57 = objc_msgSend(self, sel_systemBlueColor);
    uint64_t v58 = MEMORY[0x1B3E6ADC0](v57);
    uint64_t v59 = swift_getKeyPath();
    uint64_t v60 = v93;
    uint64_t v61 = v94;
    (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v15, v11, v94);
    uint64_t v62 = (uint64_t *)&v15[*(int *)(v92 + 36)];
    *uint64_t v62 = v59;
    v62[1]  = v58;
    (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v61);
    LOBYTE(v59)  = sub_1AD9DE7D0();
    char v63 = sub_1AD9DE7C0();
    sub_1AD9DE7C0();
    if (sub_1AD9DE7C0() != v59) {
      char v63 = sub_1AD9DE7C0();
    }
    sub_1AD9DDCC0();
    uint64_t v65 = v64;
    uint64_t v67 = v66;
    uint64_t v69 = v68;
    uint64_t v71 = v70;
    uint64_t v72 = v95;
    sub_1AD95A208((uint64_t)v15, v95, (uint64_t (*)(void))sub_1AD959F94);
    uint64_t v73 = v72 + *(int *)(v96 + 36);
    *(unsigned char *)uint64_t v73 = v63;
    *(void *)(v73 + 8)  = v65;
    *(void *)(v73 + 16)  = v67;
    *(void *)(v73 + 24)  = v69;
    *(void *)(v73 + 32)  = v71;
    *(unsigned char *)(v73 + 40)  = 0;
    sub_1AD95A380((uint64_t)v15, (uint64_t (*)(void))sub_1AD959F94);
    uint64_t v74 = v99;
    sub_1AD95A64C(v72, v99, (uint64_t (*)(void))sub_1AD959F08);
    uint64_t v75 = v100;
    uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
    char v77 = v97;
    uint64_t v88 = v30;
    char v78 = v30;
    uint64_t v79 = v98;
    v76(v97, v78, v98);
    uint64_t v42 = v101;
    sub_1AD95A208(v74, v101, (uint64_t (*)(void))sub_1AD959F08);
    v76(v34, v77, v79);
    sub_1AD959E58(0);
    sub_1AD95A208(v42, (uint64_t)&v34[*(int *)(v80 + 48)], (uint64_t (*)(void))sub_1AD959F08);
    sub_1AD95A380(v74, (uint64_t (*)(void))sub_1AD959F08);
    uint64_t v81 = *(void (**)(char *, uint64_t))(v75 + 8);
    v81(v88, v79);
    sub_1AD95A380(v42, (uint64_t (*)(void))sub_1AD959F08);
    v81(v77, v79);
    sub_1AD959E24(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v34, 0, 1, v82);
    uint64_t v55 = v102;
    sub_1AD95A64C((uint64_t)v34, v102, (uint64_t (*)(void))sub_1AD959DF0);
    uint64_t v44 = v90;
    LOBYTE(v42)  = v89;
  }
  sub_1AD95A208(v55, (uint64_t)v34, (uint64_t (*)(void))sub_1AD959DF0);
  uint64_t v83 = v105;
  uint64_t v84 = v104;
  *(void *)a2  = v105;
  *(void *)(a2 + 8)  = v84;
  *(unsigned char *)(a2 + 16)  = v42 & 1;
  uint64_t v85 = KeyPath;
  *(void *)(a2 + 24)  = v44;
  *(void *)(a2 + 32)  = v85;
  *(unsigned char *)(a2 + 40)  = 0;
  *(void *)(a2 + 48)  = v103;
  *(void *)(a2 + 56)  = 0;
  *(unsigned char *)(a2 + 64)  = 1;
  *(unsigned char *)(a2 + 72)  = v107;
  *(void *)(a2 + 80)  = v46;
  *(void *)(a2 + 88)  = v48;
  *(void *)(a2 + 96)  = v50;
  *(void *)(a2 + 104)  = v52;
  *(unsigned char *)(a2 + 112)  = 0;
  sub_1AD959C70();
  sub_1AD95A208((uint64_t)v34, a2 + *(int *)(v86 + 48), (uint64_t (*)(void))sub_1AD959DF0);
  sub_1AD861558(v83, v84, v42 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1AD95A380(v55, (uint64_t (*)(void))sub_1AD959DF0);
  sub_1AD95A380((uint64_t)v34, (uint64_t (*)(void))sub_1AD959DF0);
  sub_1AD861548(v83, v84, v42 & 1);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1AD958F4C()
{
  qword_1E9A4CC58  = 0x4018000000000000;
}

uint64_t sub_1AD958F5C()
{
  uint64_t result = sub_1AD9DEE90();
  qword_1E9A4CC60  = result;
  return result;
}

void sub_1AD958F7C()
{
  qword_1E9A4CC68  = 0x4018000000000000;
}

void sub_1AD958F8C()
{
  qword_1E9A4CC70  = 0;
}

void sub_1AD958F98()
{
  qword_1E9A4CC78  = 0x4000000000000000;
}

uint64_t sub_1AD958FA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v42 = a1;
  sub_1AD87DCCC();
  uint64_t v41 = v1;
  MEMORY[0x1F4188790](v1, v2);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AD9DE020();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (uint64_t *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_1AD9DEF50();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD95A938(0);
  uint64_t v15 = v14;
  double v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v10 + 104))(v13, *MEMORY[0x1E4F3EBF8], v9, v17);
  uint64_t v20 = sub_1AD9DEFA0();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  uint64_t v21 = v43;
  char v22 = v44;
  uint64_t v23 = v45;
  int v40 = v46;
  uint64_t v38 = v48;
  uint64_t v39 = v47;
  if (qword_1E9A48FD0 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_1E9A4CC58;
  uint64_t v25 = (char *)v8 + *(int *)(v5 + 20);
  uint64_t v26 = *MEMORY[0x1E4F3D4A0];
  uint64_t v27 = sub_1AD9DE2D0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v25, v26, v27);
  *uint64_t v8 = v24;
  v8[1]  = v24;
  sub_1AD95A208((uint64_t)v8, (uint64_t)v4, MEMORY[0x1E4F3CDB8]);
  *(_WORD *)&v4[*(int *)(v41 + 36)]  = 256;
  sub_1AD95A208((uint64_t)v4, (uint64_t)&v19[*(int *)(v15 + 36)], (uint64_t (*)(void))sub_1AD87DCCC);
  *(void *)uint64_t v19 = v20;
  *((void *)v19 + 1)  = 0;
  *((_WORD *)v19 + 8)  = 1;
  *((void *)v19 + 3)  = v21;
  v19[32]  = v22;
  *((void *)v19 + 5)  = v23;
  v19[48]  = v40;
  uint64_t v28 = v38;
  *((void *)v19 + 7)  = v39;
  *((void *)v19 + 8)  = v28;
  swift_retain();
  sub_1AD95A380((uint64_t)v4, (uint64_t (*)(void))sub_1AD87DCCC);
  sub_1AD95A380((uint64_t)v8, MEMORY[0x1E4F3CDB8]);
  swift_release();
  if (qword_1E9A48FD8 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_1AD9DEEF0();
  if (qword_1E9A48FE0 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_1E9A4CC68;
  if (qword_1E9A48FE8 != -1) {
    swift_once();
  }
  uint64_t v31 = qword_1E9A4CC70;
  if (qword_1E9A48FF0 != -1) {
    swift_once();
  }
  uint64_t v32 = qword_1E9A4CC78;
  uint64_t v33 = v42;
  sub_1AD95A208((uint64_t)v19, v42, (uint64_t (*)(void))sub_1AD95A938);
  sub_1AD959F30(0, &qword_1E9A4CD80, sub_1AD95A938);
  uint64_t v35 = (uint64_t *)(v33 + *(int *)(v34 + 36));
  uint64_t *v35 = v29;
  v35[1]  = v30;
  v35[2]  = v31;
  void v35[3] = v32;
  return sub_1AD95A380((uint64_t)v19, (uint64_t (*)(void))sub_1AD95A938);
}

uint64_t sub_1AD9594D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD958FA8(a1);
}

uint64_t _s13SleepHealthUI18PromotionViewModelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = *(unsigned __int8 *)(a2 + 40);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v10 = sub_1AD9E02D0(), uint64_t result = 0, (v10 & 1) != 0))
  {
    if (v2 == v6 && v4 == v7 || (v12 = sub_1AD9E02D0(), uint64_t result = 0, (v12 & 1) != 0))
    {
      if (v3)
      {
        if (!v8) {
          return 0;
        }
        swift_retain();
        swift_retain();
        char v13 = sub_1AD9DEE40();
        swift_release();
        swift_release();
        if ((v13 & 1) == 0) {
          return 0;
        }
      }
      else if (v8)
      {
        return 0;
      }
      if (v5 == 3) {
        return v9 == 3;
      }
      if (v9 == 3) {
        return 0;
      }
      unint64_t v14 = 0xEE0065636E656972;
      uint64_t v15 = 0x657078456E69616DLL;
      if (v5)
      {
        if (v5 == 1)
        {
          uint64_t v16 = 0x696472616F626E6FLL;
          unint64_t v17 = 0xEA0000000000676ELL;
LABEL_22:
          if (v9)
          {
            if (v9 == 1)
            {
              uint64_t v15 = 0x696472616F626E6FLL;
              unint64_t v14 = 0xEA0000000000676ELL;
            }
            else
            {
              uint64_t v15 = 0x63536567616E616DLL;
              unint64_t v14 = 0xEE00656C75646568;
            }
          }
          if (v16 == v15 && v17 == v14)
          {
            swift_bridgeObjectRelease_n();
            return 1;
          }
          char v19 = sub_1AD9E02D0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (v19 & 1) != 0;
        }
        uint64_t v16 = 0x63536567616E616DLL;
        uint64_t v18 = 0x656C75646568;
      }
      else
      {
        uint64_t v16 = 0x657078456E69616DLL;
        uint64_t v18 = 0x65636E656972;
      }
      unint64_t v17 = v18 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      goto LABEL_22;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromotionViewModel()
{
  return &type metadata for PromotionViewModel;
}

ValueMetadata *type metadata accessor for PromotionView()
{
  return &type metadata for PromotionView;
}

uint64_t sub_1AD959748()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v4;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1AD959940(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 40)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionablePromotionView()
{
  return &type metadata for ActionablePromotionView;
}

unint64_t sub_1AD9599A0()
{
  unint64_t result = qword_1E9A4CC80;
  if (!qword_1E9A4CC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CC80);
  }
  return result;
}

uint64_t sub_1AD9599F4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD959A10()
{
  if (!qword_1E9A4CC88)
  {
    sub_1AD959C0C(255, &qword_1E9A4CC90, (uint64_t (*)(uint64_t))sub_1AD959AC4, MEMORY[0x1E4F3F108]);
    sub_1AD95A0E4(&qword_1E9A4CD10, &qword_1E9A4CC90, (uint64_t (*)(uint64_t))sub_1AD959AC4);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CC88);
    }
  }
}

void sub_1AD959AC4(uint64_t a1)
{
}

void sub_1AD959AF8()
{
  if (!qword_1E9A4CCA0)
  {
    sub_1AD9DE6E0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CCA0);
    }
  }
}

void sub_1AD959B58()
{
  if (!qword_1E9A4CCA8)
  {
    sub_1AD959C0C(255, &qword_1E9A4CCB0, (uint64_t (*)(uint64_t))sub_1AD959C70, MEMORY[0x1E4F3F108]);
    sub_1AD95A0E4(&qword_1E9A4CD08, &qword_1E9A4CCB0, (uint64_t (*)(uint64_t))sub_1AD959C70);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CCA8);
    }
  }
}

void sub_1AD959C0C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD959C70()
{
  if (!qword_1E9A4CCB8)
  {
    sub_1AD959F30(255, &qword_1E9A4CCC0, (void (*)(uint64_t))sub_1AD959D04);
    sub_1AD959DF0(255);
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4CCB8);
    }
  }
}

void sub_1AD959D04()
{
  if (!qword_1E9A4CCC8)
  {
    sub_1AD88461C();
    sub_1AD959D84(255, (unint64_t *)&qword_1E9A4A120, &qword_1E9A4A128, MEMORY[0x1E4FBB550]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CCC8);
    }
  }
}

void sub_1AD959D84(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_1AD95A5F8(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = sub_1AD9DE6D0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD959DF0(uint64_t a1)
{
}

void sub_1AD959E24(uint64_t a1)
{
}

void sub_1AD959E58(uint64_t a1)
{
}

void sub_1AD959E8C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_1AD959F08(uint64_t a1)
{
}

void sub_1AD959F30(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD959F94()
{
  if (!qword_1E9A4CCF0)
  {
    sub_1AD95A014();
    sub_1AD959D84(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CCF0);
    }
  }
}

void sub_1AD95A014()
{
  if (!qword_1E9A4CCF8)
  {
    sub_1AD9DE000();
    sub_1AD8C30D0();
    sub_1AD95A338(&qword_1E9A4CD00, MEMORY[0x1E4F3CD40]);
    OpaqueTypeMetadata2  = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4CCF8);
    }
  }
}

uint64_t sub_1AD95A0E4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD959C0C(255, a2, a3, MEMORY[0x1E4F3F108]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD95A148(uint64_t a1)
{
}

void sub_1AD95A170()
{
  if (!qword_1E9A4CD20)
  {
    sub_1AD959C0C(255, &qword_1E9A4CC90, (uint64_t (*)(uint64_t))sub_1AD959AC4, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CD20);
    }
  }
}

uint64_t sub_1AD95A208(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1AD95A270(uint64_t a1)
{
}

void sub_1AD95A2A4()
{
  if (!qword_1E9A4CD30)
  {
    sub_1AD9DE4B0();
    sub_1AD95A338(&qword_1E9A4CD38, MEMORY[0x1E4F3D908]);
    unint64_t v0 = sub_1AD9DE4E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CD30);
    }
  }
}

uint64_t sub_1AD95A338(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD95A380(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD95A3E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD95A428(uint64_t a1)
{
  return a1;
}

unint64_t sub_1AD95A474()
{
  unint64_t result = qword_1E9A4CD40;
  if (!qword_1E9A4CD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CD40);
  }
  return result;
}

void sub_1AD95A4C8()
{
  if (!qword_1E9A4CD48)
  {
    sub_1AD959C0C(255, &qword_1E9A4CCB0, (uint64_t (*)(uint64_t))sub_1AD959C70, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CD48);
    }
  }
}

uint64_t sub_1AD95A570(uint64_t a1, uint64_t a2)
{
  sub_1AD95A5F8(0, &qword_1E9A4CD50, (uint64_t)&type metadata for SleepDeepLinkDestination, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1AD95A5F8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD95A64C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for AppIconView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for AppIconView(void *a1, void *a2)
{
  *a1  = *a2;
  swift_retain();
  swift_release();
  a1[1]  = a2[1];
  return a1;
}

void *assignWithTake for AppIconView(void *a1, void *a2)
{
  *a1  = *a2;
  swift_release();
  a1[1]  = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for AppIconView()
{
  return &type metadata for AppIconView;
}

uint64_t sub_1AD95A784()
{
  return sub_1AD95A828(&qword_1E9A4CD58, sub_1AD95A270, (void (*)(void))sub_1AD95A7E0, (void (*)(void))sub_1AD95A8E8);
}

uint64_t sub_1AD95A7E0()
{
  return sub_1AD95A828(&qword_1E9A4CD60, sub_1AD95A148, (void (*)(void))sub_1AD95A8B4, (void (*)(void))sub_1AD8CB7E0);
}

uint64_t sub_1AD95A828(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD95A8B4()
{
  return sub_1AD95A338(&qword_1E9A4CD68, (void (*)(uint64_t))sub_1AD959A10);
}

uint64_t sub_1AD95A8E8()
{
  return sub_1AD95A338(&qword_1E9A4CD70, (void (*)(uint64_t))sub_1AD95A2A4);
}

uint64_t sub_1AD95A91C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD95A938(uint64_t a1)
{
}

void sub_1AD95A96C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_1AD9DDFC0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_1AD95A9E4()
{
  unint64_t result = qword_1E9A4CD88;
  if (!qword_1E9A4CD88)
  {
    sub_1AD959F30(255, &qword_1E9A4CD80, sub_1AD95A938);
    sub_1AD95A828(&qword_1E9A4CD90, sub_1AD95A938, (void (*)(void))sub_1AD95AAC4, (void (*)(void))sub_1AD87DFB4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CD88);
  }
  return result;
}

unint64_t sub_1AD95AAC4()
{
  unint64_t result = qword_1E9A4B870;
  if (!qword_1E9A4B870)
  {
    sub_1AD8EF204();
    sub_1AD8EF46C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B870);
  }
  return result;
}

void sub_1AD95AB40(uint64_t a1, uint64_t a2)
{
}

void sub_1AD95AB4C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = v3 + *a3;
  swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)v6 + 112);
  uint64_t v8 = *(void *)(*(void *)v6 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(*(void *)v6 + 88), v7);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54D8]), sel_initWithStep_action_entryPoint_, a1, a2, *(unsigned __int8 *)(*(void *)v6 + 24));
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54D0]), sel_initWithOnboardingInfo_provenanceInfo_, v10, *(void *)(*(void *)v6 + 16));

  objc_msgSend(v9, sel_trackEvent_, v11);
}

uint64_t SleepOnboardingSetupViewController.__allocating_init(userInfo:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 240))(a1, 0);
}

id SleepOnboardingSetupViewController.__allocating_init(userInfo:presentationStyle:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return SleepOnboardingSetupViewController.init(userInfo:presentationStyle:)(a1, a2);
}

id SleepOnboardingSetupViewController.init(userInfo:presentationStyle:)(uint64_t a1, uint64_t a2)
{
  swift_getObjectType();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC13SleepHealthUI34SleepOnboardingSetupViewController_viewAlreadyLoaded)  = 0;
  uint64_t v5 = sub_1AD95B054();
  uint64_t v7 = v6;
  sub_1AD95B250();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_retain();
  char v12 = (void *)sub_1AD95B728();
  id v13 = SleepOnboardingFlowController.init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)(v5, v7, v9, v11, a1, a2, v12, 2);
  id v14 = objc_msgSend(v13, sel_headerView);
  objc_msgSend(v14, sel_setAllowFullWidthIcon_, 1);

  if (qword_1E9A49098 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_1AD9DD550();
  __swift_project_value_buffer(v15, (uint64_t)qword_1E9A4D300);
  swift_retain_n();
  uint64_t v16 = sub_1AD9DD530();
  os_log_type_t v17 = sub_1AD9DFBE0();
  if (!os_log_type_enabled(v16, v17))
  {

    swift_release_n();
    if (a2 == 1) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v33 = a2;
  uint64_t v18 = swift_slowAlloc();
  uint64_t v19 = swift_slowAlloc();
  uint64_t v34 = v19;
  *(_DWORD *)uint64_t v18 = 136446466;
  uint64_t v20 = sub_1AD9E04F0();
  sub_1AD838978(v20, v21, &v34);
  sub_1AD9DFEA0();
  swift_bridgeObjectRelease();
  *(_WORD *)(v18 + 12)  = 2080;
  id v22 = objc_msgSend(*(id *)(a1 + 16), sel_source);
  uint64_t v23 = sub_1AD9DF710();
  uint64_t v25 = v24;
  if (v23 == sub_1AD9DF710() && v25 == v26)
  {

    swift_bridgeObjectRelease_n();
    unint64_t v27 = 0xE500000000000000;
    uint64_t v28 = v33;
    uint64_t v29 = 0x7964647562;
  }
  else
  {
    char v30 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = 0x7964647562;
    if (v30)
    {
      unint64_t v27 = 0xE500000000000000;
    }
    else
    {
      uint64_t v29 = 1852399981;
      unint64_t v27 = 0xE400000000000000;
    }
    uint64_t v28 = v33;
  }
  sub_1AD838978(v29, v27, &v34);
  sub_1AD9DFEA0();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1AD834000, v16, v17, "[%{public}s] init for %s flow", (uint8_t *)v18, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1B3E6D1A0](v19, -1, -1);
  MEMORY[0x1B3E6D1A0](v18, -1, -1);

  if (v28 != 1)
  {
LABEL_14:
    id v31 = v13;
    objc_msgSend(v31, sel_setModalInPresentation_, 0);
  }
LABEL_15:

  swift_release();
  return v13;
}

uint64_t sub_1AD95B054()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  uint64_t v2 = sub_1AD9DF710();
  uint64_t v4 = v3;
  if (v2 == sub_1AD9DF710() && v4 == v5)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      if (qword_1EB724E38 == -1) {
        goto LABEL_10;
      }
      goto LABEL_11;
    }
  }
  if (qword_1EB724E38 != -1) {
LABEL_11:
  }
    swift_once();
LABEL_10:
  id v8 = (id)qword_1EB727930;
  uint64_t v9 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v9;
}

void sub_1AD95B250()
{
  id v1 = v0;
  uint64_t v2 = (void *)v0[2];
  id v3 = objc_msgSend(v2, sel_source);
  uint64_t v4 = sub_1AD9DF710();
  uint64_t v6 = v5;
  if (v4 == sub_1AD9DF710() && v6 == v7)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      id v10 = objc_msgSend(v2, sel_source);
      uint64_t v11 = sub_1AD9DF710();
      uint64_t v13 = v12;
      if (v11 == sub_1AD9DF710() && v13 == v14)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v16 = sub_1AD9E02D0();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_17;
        }
        uint64_t v19 = v1[14];
        uint64_t v20 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v19);
        unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 80);
        swift_retain();
        if ((v21(v19, v20) & 1) == 0)
        {
          swift_release();
          id v32 = objc_msgSend(self, sel_sharedBehavior);
          if (v32)
          {
            uint64_t v33 = v32;
            id v34 = objc_msgSend(v32, sel_features);

            if (v34)
            {
              objc_msgSend(v34, sel_timeInBedTracking);

              goto LABEL_17;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          return;
        }
        uint64_t v22 = v1[14];
        uint64_t v23 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v22);
        (*(void (**)(uint64_t, uint64_t))(v23 + 96))(v22, v23);
        uint64_t v24 = v1[14];
        uint64_t v25 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v24);
        (*(void (**)(uint64_t, uint64_t))(v25 + 112))(v24, v25);
        uint64_t v26 = v1[14];
        uint64_t v27 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v26);
        (*(void (**)(uint64_t, uint64_t))(v27 + 120))(v26, v27);
        uint64_t v28 = v1[14];
        uint64_t v29 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v28);
        (*(void (**)(uint64_t, uint64_t))(v29 + 128))(v28, v29);
        uint64_t v30 = v1[14];
        uint64_t v31 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v30);
        (*(void (**)(uint64_t, uint64_t))(v31 + 136))(v30, v31);
        swift_release();
      }
LABEL_17:
      if (qword_1EB724E38 != -1) {
        swift_once();
      }
      id v18 = (id)qword_1EB727930;
      sub_1AD9DCA70();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v17 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
}

uint64_t sub_1AD95B728()
{
  id v1 = (void *)v0[2];
  id v2 = objc_msgSend(v1, sel_source);
  uint64_t v3 = sub_1AD9DF710();
  uint64_t v5 = v4;
  if (v3 == sub_1AD9DF710() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
    return 0;
  }
  char v8 = sub_1AD9E02D0();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8) {
    return 0;
  }
  id v9 = objc_msgSend(v1, sel_source);
  uint64_t v10 = sub_1AD9DF710();
  uint64_t v12 = v11;
  if (v10 == sub_1AD9DF710() && v12 == v13)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v15 = sub_1AD9E02D0();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
LABEL_17:
    uint64_t v31 = v0[14];
    uint64_t v32 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v31);
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 80);
    swift_retain();
    if (v33(v31, v32))
    {
      uint64_t v34 = v0[14];
      uint64_t v35 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v34);
      (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 96))(v34, v35);
      uint64_t v36 = v0[14];
      uint64_t v37 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v36);
      (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 112))(v36, v37);
      uint64_t v38 = v0[14];
      uint64_t v39 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v38);
      (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 120))(v38, v39);
      uint64_t v40 = v0[14];
      uint64_t v41 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v40);
      (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 128))(v40, v41);
      uint64_t v42 = v0[14];
      uint64_t v43 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v42);
      (*(void (**)(uint64_t, uint64_t))(v43 + 136))(v42, v43);
      swift_release();
      sub_1AD95FE18();
      return v44;
    }
    swift_release();
    return 0;
  }
  uint64_t v16 = v0[14];
  uint64_t v17 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v16);
  id v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 80);
  swift_retain();
  if (v18(v16, v17))
  {
    uint64_t v19 = v0[14];
    uint64_t v20 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 96))(v19, v20);
    uint64_t v21 = v0[14];
    uint64_t v22 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v21);
    (*(void (**)(uint64_t, uint64_t))(v22 + 112))(v21, v22);
    uint64_t v23 = v0[14];
    uint64_t v24 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 120))(v23, v24);
    uint64_t v25 = v0[14];
    uint64_t v26 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v25);
    (*(void (**)(uint64_t, uint64_t))(v26 + 128))(v25, v26);
    uint64_t v27 = v0[14];
    uint64_t v28 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 136))(v27, v28);
    swift_release();
    goto LABEL_17;
  }
  swift_release();
  if (qword_1E9A49018 != -1) {
    swift_once();
  }
  uint64_t v29 = qword_1E9A4CDD8;
  id v45 = (id)qword_1E9A4CDD8;
  return v29;
}

void sub_1AD95BB98(void *a1, char *a2)
{
  uint64_t v3 = v2;
  swift_getObjectType();
  if (a1)
  {
    char v6 = *a2;
    uint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
    swift_beginAccess();
    uint64_t v8 = *v7;
    swift_beginAccess();
    if (*(unsigned char *)(v8 + 80) == 3)
    {
      uint64_t v9 = qword_1E9A49098;
      id v10 = a1;
      if (v9 != -1) {
        swift_once();
      }
      uint64_t v11 = sub_1AD9DD550();
      __swift_project_value_buffer(v11, (uint64_t)qword_1E9A4D300);
      id v12 = v10;
      uint64_t v13 = sub_1AD9DD530();
      os_log_type_t v14 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        v36[0]  = v34;
        *(_DWORD *)uint64_t v15 = 136446466;
        log  = v13;
        uint64_t v16 = sub_1AD9E04F0();
        type  = v14;
        sub_1AD838978(v16, v17, v36);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12)  = 2082;
        id v18 = v12;
        id v19 = objc_msgSend(v18, sel_description);
        uint64_t v20 = sub_1AD9DF710();
        unint64_t v22 = v21;

        sub_1AD838978(v20, v22, v36);
        sub_1AD9DFEA0();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, log, type, "[%{public}s] updating with schedule: %{public}s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v34, -1, -1);
        MEMORY[0x1B3E6D1A0](v15, -1, -1);
      }
      else
      {
      }
      uint64_t v23 = *v7;
      swift_retain();
      objc_msgSend(v12, sel_mutableCopy);
      sub_1AD9DFF20();
      swift_unknownObjectRelease();
      sub_1AD94F0A4();
      swift_dynamicCast();
      swift_beginAccess();
      uint64_t v24 = *(void **)(v23 + 40);
      *(void *)(v23 + 40)  = v35;
      swift_release();

      uint64_t v25 = *v7;
      swift_beginAccess();
      *(unsigned char *)(v25 + 80)  = v6;
      if (*(unsigned char *)(v3 + OBJC_IVAR____TtC13SleepHealthUI34SleepOnboardingSetupViewController_viewAlreadyLoaded) == 1)
      {
        sub_1AD95C210();
      }
      else
      {
        uint64_t v26 = sub_1AD9DD530();
        os_log_type_t v27 = sub_1AD9DFBE0();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          uint64_t v35 = v29;
          *(_DWORD *)uint64_t v28 = 136446210;
          uint64_t v30 = sub_1AD9E04F0();
          sub_1AD838978(v30, v31, &v35);
          sub_1AD9DFEA0();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1AD834000, v26, v27, "[%{public}s] skipping reload since view hasn't loaded yet", v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3E6D1A0](v29, -1, -1);
          MEMORY[0x1B3E6D1A0](v28, -1, -1);

          return;
        }
      }
    }
  }
}

void sub_1AD95C00C()
{
  id v1 = v0;
  swift_getObjectType();
  if (qword_1E9A49098 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1E9A4D300);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v10);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] view did load", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  uint64_t v9 = (objc_class *)type metadata accessor for SleepOnboardingSetupViewController();
  v11.receiver  = v1;
  v11.super_class  = v9;
  objc_msgSendSuper2(&v11, sel_viewDidLoad);
  *((unsigned char *)v1 + OBJC_IVAR____TtC13SleepHealthUI34SleepOnboardingSetupViewController_viewAlreadyLoaded)  = 1;
  sub_1AD95C210();
}

void sub_1AD95C210()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  if (qword_1E9A49098 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1E9A4D300);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v11[0]  = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, v11);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] reloading views", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  uint64_t v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  uint64_t v10 = *v9;
  swift_beginAccess();
  if (*(unsigned char *)(v10 + 80) == 3) {
    sub_1AD95DFD0();
  }
  else {
    sub_1AD95C3F4();
  }
}

void sub_1AD95C3F4()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  if (qword_1E9A49098 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1E9A4D300);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v35[0]  = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, v35);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] setting up standard views", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  objc_msgSend(v1, sel_hksp_removeSpinnerView);
  if (qword_1E9A48FF8 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)sub_1AD9DF6D0();
  if (qword_1E9A49000 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)sub_1AD9DF6D0();
  if (qword_1E9A49020 != -1) {
    swift_once();
  }
  objc_msgSend(v1, sel_addBulletedListItemWithTitle_description_image_, v9, v10, qword_1E9A4CDE0);

  if (qword_1E9A49008 != -1) {
    swift_once();
  }
  objc_super v11 = (void *)sub_1AD9DF6D0();
  id v12 = &v1[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  swift_retain();
  sub_1AD95CBD4();
  swift_release();
  uint64_t v13 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (qword_1E9A49028 != -1) {
    swift_once();
  }
  objc_msgSend(v1, sel_addBulletedListItemWithTitle_description_image_, v11, v13, qword_1E9A4CDE8);

  swift_retain();
  sub_1AD95CECC();
  char v15 = v14;
  swift_release();
  if (v15)
  {
    swift_retain();
    sub_1AD95D298();
    swift_release();
    uint64_t v16 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1AD95D5A0();
    swift_release();
    unint64_t v17 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    if (qword_1E9A49030 != -1) {
      swift_once();
    }
    objc_msgSend(v1, sel_addBulletedListItemWithTitle_description_image_, v16, v17, qword_1E9A4CDF0);
  }
  swift_retain();
  char v18 = sub_1AD95DA58();
  swift_release();
  if (v18)
  {
    if (qword_1E9A49010 != -1) {
      swift_once();
    }
    id v19 = (void *)sub_1AD9DF6D0();
    uint64_t v20 = qword_1EB724E38;
    swift_retain();
    if (v20 != -1) {
      swift_once();
    }
    id v21 = (id)qword_1EB727930;
    sub_1AD9DCA70();
    swift_release();

    swift_bridgeObjectRelease();
    unint64_t v22 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    if (qword_1E9A49038 != -1) {
      swift_once();
    }
    objc_msgSend(v1, sel_addBulletedListItemWithTitle_description_image_, v19, v22, qword_1E9A4CDF8, 0xE000000000000000);
  }
  swift_retain();
  sub_1AD95DDB4();
  swift_release();
  uint64_t v23 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();

  uint64_t v24 = *(void **)(*(void *)v12 + 16);
  swift_retain();
  id v25 = objc_msgSend(v24, sel_source);
  uint64_t v26 = sub_1AD9DF710();
  uint64_t v28 = v27;
  if (v26 == sub_1AD9DF710() && v28 == v29)
  {
    swift_release();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v30 = sub_1AD9E02D0();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      objc_msgSend(v1, sel_hksp_addCancelButton);
      return;
    }
  }
  uint64_t v31 = qword_1EB724E38;
  uint64_t v32 = v1;
  if (v31 != -1) {
    swift_once();
  }
  id v33 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  uint64_t v34 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_hksp_addSkipButtonWithTitle_, v34, 0xE000000000000000);
}

uint64_t sub_1AD95CBD4()
{
  uint64_t v1 = (void *)v0;
  id v2 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  uint64_t v3 = sub_1AD9DF710();
  uint64_t v5 = v4;
  if (v3 == sub_1AD9DF710() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = v1[14];
      uint64_t v10 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v9);
      objc_super v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 80);
      swift_retain();
      if (v11(v9, v10))
      {
        uint64_t v12 = v1[14];
        uint64_t v13 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v12);
        (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13);
        uint64_t v14 = v1[14];
        uint64_t v15 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v14);
        (*(void (**)(uint64_t, uint64_t))(v15 + 112))(v14, v15);
        uint64_t v16 = v1[14];
        uint64_t v17 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v16);
        (*(void (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
        uint64_t v18 = v1[14];
        uint64_t v19 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v18);
        (*(void (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
        uint64_t v20 = v1[14];
        uint64_t v21 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v20);
        (*(void (**)(uint64_t, uint64_t))(v21 + 136))(v20, v21);
      }
      swift_release();
    }
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v22 = (id)qword_1EB727930;
  uint64_t v23 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

void sub_1AD95CECC()
{
  uint64_t v1 = (void *)v0;
  id v2 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  uint64_t v3 = sub_1AD9DF710();
  uint64_t v5 = v4;
  if (v3 == sub_1AD9DF710() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_9;
  }
  char v8 = sub_1AD9E02D0();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_9:
    uint64_t v22 = v1[14];
    uint64_t v23 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v22);
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 80);
    swift_retain();
    if (v24(v22, v23))
    {
      uint64_t v25 = v1[14];
      uint64_t v26 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v25);
      (*(void (**)(uint64_t, uint64_t))(v26 + 96))(v25, v26);
      uint64_t v27 = v1[14];
      uint64_t v28 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v27);
      (*(void (**)(uint64_t, uint64_t))(v28 + 112))(v27, v28);
      uint64_t v29 = v1[14];
      uint64_t v30 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v29);
      (*(void (**)(uint64_t, uint64_t))(v30 + 120))(v29, v30);
      uint64_t v31 = v1[14];
      uint64_t v32 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v31);
      (*(void (**)(uint64_t, uint64_t))(v32 + 128))(v31, v32);
      uint64_t v33 = v1[14];
      uint64_t v34 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v33);
      (*(void (**)(uint64_t, uint64_t))(v34 + 136))(v33, v34);
    }
    swift_release();
    return;
  }
  uint64_t v9 = v1[14];
  uint64_t v10 = v1[15];
  __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v9);
  objc_super v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 80);
  swift_retain();
  if (v11(v9, v10))
  {
    uint64_t v12 = v1[14];
    uint64_t v13 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13);
    uint64_t v14 = v1[14];
    uint64_t v15 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v14);
    (*(void (**)(uint64_t, uint64_t))(v15 + 112))(v14, v15);
    uint64_t v16 = v1[14];
    uint64_t v17 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
    uint64_t v18 = v1[14];
    uint64_t v19 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
    uint64_t v20 = v1[14];
    uint64_t v21 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v20);
    (*(void (**)(uint64_t, uint64_t))(v21 + 136))(v20, v21);
    swift_release();
    goto LABEL_9;
  }
  swift_release();
  id v35 = objc_msgSend(self, sel_sharedBehavior);
  if (v35)
  {
    uint64_t v36 = v35;
    id v37 = objc_msgSend(v35, sel_features);

    if (v37)
    {
      objc_msgSend(v37, sel_timeInBedTracking);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1AD95D298()
{
  uint64_t v1 = (void *)v0;
  id v2 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  uint64_t v3 = sub_1AD9DF710();
  uint64_t v5 = v4;
  if (v3 == sub_1AD9DF710() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = v1[14];
      uint64_t v10 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v9);
      objc_super v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 80);
      swift_retain();
      if (v11(v9, v10))
      {
        uint64_t v12 = v1[14];
        uint64_t v13 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v12);
        (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13);
        uint64_t v14 = v1[14];
        uint64_t v15 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v14);
        (*(void (**)(uint64_t, uint64_t))(v15 + 112))(v14, v15);
        uint64_t v16 = v1[14];
        uint64_t v17 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v16);
        (*(void (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
        uint64_t v18 = v1[14];
        uint64_t v19 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v18);
        (*(void (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
        uint64_t v20 = v1[14];
        uint64_t v21 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v20);
        (*(void (**)(uint64_t, uint64_t))(v21 + 136))(v20, v21);
      }
      swift_release();
    }
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v22 = (id)qword_1EB727930;
  uint64_t v23 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1AD95D5A0()
{
  uint64_t v1 = (void *)v0;
  id v2 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  uint64_t v3 = sub_1AD9DF710();
  uint64_t v5 = v4;
  if (v3 == sub_1AD9DF710() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = v1[14];
      uint64_t v10 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v9);
      objc_super v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 80);
      swift_retain();
      if ((v11(v9, v10) & 1) == 0)
      {
        swift_release();
        if (qword_1EB724E38 == -1) {
          goto LABEL_14;
        }
LABEL_15:
        swift_once();
        goto LABEL_14;
      }
      uint64_t v12 = v1[14];
      uint64_t v13 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v12);
      (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13);
      uint64_t v14 = v1[14];
      uint64_t v15 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v14);
      (*(void (**)(uint64_t, uint64_t))(v15 + 112))(v14, v15);
      uint64_t v16 = v1[14];
      uint64_t v17 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v16);
      (*(void (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
      uint64_t v18 = v1[14];
      uint64_t v19 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v18);
      (*(void (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
      uint64_t v20 = v1[14];
      uint64_t v21 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v20);
      (*(void (**)(uint64_t, uint64_t))(v21 + 136))(v20, v21);
      swift_release();
    }
  }
  uint64_t v22 = v1[14];
  uint64_t v23 = v1[15];
  __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v22);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 80);
  swift_retain();
  if (v24(v22, v23))
  {
    uint64_t v25 = v1[14];
    uint64_t v26 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v25);
    (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 96))(v25, v26);
    uint64_t v27 = v1[14];
    uint64_t v28 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v27);
    (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 112))(v27, v28);
    uint64_t v29 = v1[14];
    uint64_t v30 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v29);
    (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 120))(v29, v30);
    uint64_t v31 = v1[14];
    uint64_t v32 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v31);
    (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 128))(v31, v32);
    uint64_t v33 = v1[14];
    uint64_t v34 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v33);
    (*(void (**)(uint64_t, uint64_t))(v34 + 136))(v33, v34);
    swift_release();
    return sub_1AD95FF50();
  }
  swift_release();
  if (qword_1EB724E38 != -1) {
    goto LABEL_15;
  }
LABEL_14:
  id v36 = (id)qword_1EB727930;
  uint64_t v37 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v37;
}

uint64_t sub_1AD95DA58()
{
  uint64_t v1 = v0;
  id v2 = (void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(v0 + 88), v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 80);
  swift_retain();
  if ((v5(v3, v4) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v6);
  LOBYTE(v6)  = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96))(v6, v7);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 112))(v8, v9);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 120))(v10, v11);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 128))(v12, v13);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 136))(v14, v15);
  swift_release();
  if (v6)
  {
    id v16 = objc_msgSend(*(id *)(v0 + 16), sel_source);
    uint64_t v17 = sub_1AD9DF710();
    uint64_t v19 = v18;
    if (v17 == sub_1AD9DF710() && v19 == v20)
    {

      swift_bridgeObjectRelease_n();
      return 0;
    }
    char v21 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21) {
      return 0;
    }
    uint64_t v22 = *(void *)(v1 + 112);
    uint64_t v23 = *(void *)(v1 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v2, v22);
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 80);
    swift_retain();
    if (v24(v22, v23))
    {
      uint64_t v25 = *(void *)(v1 + 112);
      uint64_t v26 = *(void *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v25);
      (*(void (**)(uint64_t, uint64_t))(v26 + 96))(v25, v26);
      uint64_t v27 = *(void *)(v1 + 112);
      uint64_t v28 = *(void *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v27);
      (*(void (**)(uint64_t, uint64_t))(v28 + 112))(v27, v28);
      uint64_t v29 = *(void *)(v1 + 112);
      uint64_t v30 = *(void *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v29);
      (*(void (**)(uint64_t, uint64_t))(v30 + 120))(v29, v30);
      uint64_t v31 = *(void *)(v1 + 112);
      uint64_t v32 = *(void *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v31);
      (*(void (**)(uint64_t, uint64_t))(v32 + 128))(v31, v32);
      uint64_t v33 = *(void *)(v1 + 112);
      uint64_t v34 = *(void *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v33);
      char v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 136))(v33, v34);
      swift_release();
      return v35 & 1;
    }
LABEL_9:
    swift_release();
  }
  return 0;
}

uint64_t sub_1AD95DDB4()
{
  if (*(unsigned char *)(v0 + 24))
  {
    if (qword_1EB724E38 == -1) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  uint64_t v2 = sub_1AD9DF710();
  uint64_t v4 = v3;
  if (v2 == sub_1AD9DF710() && v4 == v5)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      if (qword_1EB724E38 == -1) {
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  if (qword_1EB724E38 != -1) {
LABEL_14:
  }
    swift_once();
LABEL_13:
  id v8 = (id)qword_1EB727930;
  uint64_t v9 = sub_1AD9DCA70();

  return v9;
}

id sub_1AD95DFD0()
{
  id v1 = v0;
  swift_getObjectType();
  if (qword_1E9A49098 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1E9A4D300);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v19[0]  = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, v19);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] setting up waiting views", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  objc_msgSend(v1, sel_hksp_addSpinnerView);
  uint64_t v9 = &v1[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  uint64_t v10 = *(void **)(*(void *)v9 + 16);
  swift_retain();
  id v11 = objc_msgSend(v10, sel_source);
  uint64_t v12 = sub_1AD9DF710();
  uint64_t v14 = v13;
  if (v12 == sub_1AD9DF710() && v14 == v15)
  {
    swift_release();

    return (id)swift_bridgeObjectRelease_n();
  }
  else
  {
    char v17 = sub_1AD9E02D0();
    swift_release();

    swift_bridgeObjectRelease();
    id result = (id)swift_bridgeObjectRelease();
    if ((v17 & 1) == 0) {
      return objc_msgSend(v1, sel_hksp_addCancelButton);
    }
  }
  return result;
}

void sub_1AD95E450(uint64_t a1)
{
  v45[1]  = swift_getObjectType();
  uint64_t v46 = sub_1AD9DD4A0();
  uint64_t v2 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46, v3);
  uint64_t v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1AD9DD4C0();
  uint64_t v47 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD960484(0, &qword_1E9A4CE08, MEMORY[0x1E4F666B0]);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)v45 - v12;
  uint64_t v14 = sub_1AD9DD490();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v22 = (char *)v45 - v21;
  sub_1AD9603AC(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1AD960334((uint64_t)v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v13, v14);
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E4F666B8], v46);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v22, v14);
    sub_1AD9DD4B0();
    sub_1AD96042C();
    sub_1AD9DD220();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
  }
  uint64_t v23 = v48;
  uint64_t v24 = &v48[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  if (*(unsigned char *)(*(void *)v24 + 24) == 1)
  {
    if (qword_1E9A49098 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_1AD9DD550();
    __swift_project_value_buffer(v25, (uint64_t)qword_1E9A4D300);
    uint64_t v26 = sub_1AD9DD530();
    os_log_type_t v27 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      v50[0]  = v29;
      *(_DWORD *)uint64_t v28 = 136446210;
      uint64_t v30 = sub_1AD9E04F0();
      uint64_t v49 = sub_1AD838978(v30, v31, v50);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v26, v27, "[%{public}s] we're done!", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v29, -1, -1);
      MEMORY[0x1B3E6D1A0](v28, -1, -1);
    }

    uint64_t v32 = &v23[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate];
    swift_beginAccess();
    if (*(void *)v32)
    {
      uint64_t v33 = *((void *)v32 + 1);
      uint64_t ObjectType = swift_getObjectType();
      char v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
      swift_unknownObjectRetain();
      uint64_t v36 = swift_retain();
      v35(v36, ObjectType, v33);
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v37 = *(void *)&v23[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_presentationStyle];
    id v38 = objc_allocWithZone((Class)type metadata accessor for SleepOnboardingScheduleViewController());
    uint64_t v39 = swift_retain();
    uint64_t v40 = sub_1AD9B6904(v39, v37);
    uint64_t v41 = &v23[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate];
    swift_beginAccess();
    uint64_t v43 = *(void *)v41;
    uint64_t v42 = *((void *)v41 + 1);
    uint64_t v44 = &v40[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate];
    swift_beginAccess();
    *(void *)uint64_t v44 = v43;
    *((void *)v44 + 1)  = v42;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    objc_msgSend(v23, sel_showViewController_sender_, v40, 0);
  }
}

void sub_1AD95EA50()
{
  sub_1AD95AB4C(1, 2, &OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void *)(*v1 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v3, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  swift_retain();
  if (v6(v4, v5))
  {
    uint64_t v7 = *(void *)(v2 + 112);
    uint64_t v8 = *(void *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v7);
    LOBYTE(v7)  = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 96))(v7, v8);
    uint64_t v9 = *(void *)(v2 + 112);
    uint64_t v10 = *(void *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 112))(v9, v10);
    uint64_t v11 = *(void *)(v2 + 112);
    uint64_t v12 = *(void *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v11);
    (*(void (**)(uint64_t, uint64_t))(v12 + 120))(v11, v12);
    uint64_t v13 = *(void *)(v2 + 112);
    uint64_t v14 = *(void *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 128))(v13, v14);
    uint64_t v15 = *(void *)(v2 + 112);
    uint64_t v16 = *(void *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 136))(v15, v16);
    swift_release();
    if (v7)
    {
      uint64_t v17 = *v1;
      swift_beginAccess();
      uint64_t v18 = *(void **)(v17 + 48);
      swift_retain();
      objc_msgSend(v18, sel_setSleepTracking_, 1);
      objc_msgSend(*(id *)(v17 + 48), sel_setChargingReminders_, 1);
      id v19 = *(id *)(v17 + 48);
      objc_msgSend(v19, sel_setSleepModeOptions_, (unint64_t)objc_msgSend(v19, sel_sleepModeOptions) | 0x4000);
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
  swift_retain();
  char v20 = sub_1AD95DA58();
  swift_release();
  if (v20)
  {
    uint64_t v21 = *v1;
    swift_beginAccess();
    *(unsigned char *)(v21 + 128)  = 1;
  }
  uint64_t v22 = *v1;
  if ((*(unsigned char *)(v22 + 24) & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v23 = *(void **)(v22 + 48);
    swift_retain();
    objc_msgSend(v23, sel_setScheduledSleepMode_, 1);
    id v24 = *(id *)(v22 + 48);
    objc_msgSend(v24, sel_setSleepModeOptions_, (unint64_t)objc_msgSend(v24, sel_sleepModeOptions) | 0x4000);
    swift_release();
  }
}

uint64_t sub_1AD95ED4C()
{
  id v1 = v0;
  swift_getObjectType();
  sub_1AD960484(0, &qword_1E9A4CE08, MEMORY[0x1E4F666B0]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v34 - v4;
  sub_1AD960484(0, &qword_1E9A4A9B0, MEMORY[0x1E4FBCFE8]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v10 = &v0[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  uint64_t v11 = *(void *)v10;
  swift_beginAccess();
  if (*(unsigned char *)(v11 + 64) == 1)
  {
    if (qword_1E9A49098 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_1AD9DD550();
    __swift_project_value_buffer(v12, (uint64_t)qword_1E9A4D300);
    uint64_t v13 = sub_1AD9DD530();
    os_log_type_t v14 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v35 = v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      uint64_t v17 = sub_1AD9E04F0();
      uint64_t v34 = sub_1AD838978(v17, v18, &v35);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v13, v14, "[%{public}s] requesting TCC authorization", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v16, -1, -1);
      MEMORY[0x1B3E6D1A0](v15, -1, -1);
    }

    uint64_t v19 = *(void *)v10;
    char v20 = (void *)(*(void *)v10 + 88);
    uint64_t v21 = *(void *)(*(void *)v10 + 112);
    uint64_t v22 = *(void *)(v19 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v20, v21);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16)  = v1;
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16)  = v1;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16)  = v1;
    uint64_t v27 = sub_1AD9DF950();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v9, 1, 1, v27);
    sub_1AD9DF930();
    id v28 = v1;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v29 = sub_1AD9DF920();
    uint64_t v30 = (void *)swift_allocObject();
    uint64_t v31 = MEMORY[0x1E4FBCFD8];
    v30[2]  = v29;
    v30[3]  = v31;
    v30[4]  = v23;
    v30[5]  = sub_1AD9604D8;
    id v30[6] = v24;
    v30[7]  = sub_1AD9604E0;
    v30[8]  = v25;
    v30[9]  = sub_1AD960504;
    v30[10]  = v26;
    sub_1AD991598((uint64_t)v9, (uint64_t)&unk_1E9A4CE18, (uint64_t)v30);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v33 = sub_1AD9DD490();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v5, 1, 1, v33);
    sub_1AD95E450((uint64_t)v5);
    return sub_1AD960334((uint64_t)v5);
  }
}

uint64_t sub_1AD95F1F0()
{
  sub_1AD960484(0, &qword_1E9A4CE08, MEMORY[0x1E4F666B0]);
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v3 = (char *)&v6 - v2;
  uint64_t v4 = sub_1AD9DD490();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  sub_1AD95E450((uint64_t)v3);
  return sub_1AD960334((uint64_t)v3);
}

void sub_1AD95F2C0()
{
  uint64_t v1 = self;
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v4 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16)  = v0;
  aBlock[4]  = sub_1AD960308;
  aBlock[5]  = v6;
  aBlock[0]  = MEMORY[0x1E4F143A8];
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_1AD95F684;
  aBlock[3]  = &block_descriptor_15;
  uint64_t v7 = _Block_copy(aBlock);
  id v8 = v0;
  swift_release();
  id v9 = objc_msgSend(v1, sel_notificationsWontFireAlertControllerWithLocalizedTitle_localizedDismiss_completion_, v3, v5, v7, 0xE000000000000000);
  _Block_release(v7);

  objc_msgSend(v8, sel_presentViewController_animated_completion_, v9, 1, 0);
}

uint64_t sub_1AD95F548(char a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  sub_1AD960484(0, &qword_1E9A4CE08, MEMORY[0x1E4F666B0]);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = sub_1AD9DD490();
  uint64_t v12 = *(void *)(v11 - 8);
  if (a1) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = a4;
  }
  (*(void (**)(char *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v10, *v13, v11);
  sub_1AD9DD490();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  sub_1AD95E450((uint64_t)v10);
  return sub_1AD960334((uint64_t)v10);
}

uint64_t sub_1AD95F684(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void SleepOnboardingSetupViewController.__allocating_init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)()
{
}

void SleepOnboardingSetupViewController.init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)()
{
}

id SleepOnboardingSetupViewController.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for SleepOnboardingSetupViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD95F76C()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();
  uint64_t v3 = v2;

  uint64_t result = swift_bridgeObjectRelease();
  qword_1E9A4CD98  = v1;
  unk_1E9A4CDA0  = v3;
  return result;
}

uint64_t sub_1AD95F850()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();
  uint64_t v3 = v2;

  uint64_t result = swift_bridgeObjectRelease();
  qword_1E9A4CDA8  = v1;
  unk_1E9A4CDB0  = v3;
  return result;
}

uint64_t sub_1AD95F934()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();
  uint64_t v3 = v2;

  uint64_t result = swift_bridgeObjectRelease();
  qword_1E9A4CDB8  = v1;
  unk_1E9A4CDC0  = v3;
  return result;
}

uint64_t sub_1AD95FA18()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();
  uint64_t v3 = v2;

  uint64_t result = swift_bridgeObjectRelease();
  qword_1E9A4CDC8  = v1;
  unk_1E9A4CDD0  = v3;
  return result;
}

void sub_1AD95FAF8()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = (void *)sub_1AD9DF6D0();
  id v2 = objc_msgSend(self, sel_imageNamed_inBundle_, v1, v0);

  if (v2) {
    qword_1E9A4CDD8  = (uint64_t)v2;
  }
  else {
    __break(1u);
  }
}

Class sub_1AD95FBC0()
{
  Class result = sub_1AD95FC00(30.0);
  qword_1E9A4CDE0  = (uint64_t)result;
  return result;
}

Class sub_1AD95FC00(double a1)
{
  id v1 = objc_msgSend(self, sel_systemFontOfSize_weight_, a1, *MEMORY[0x1E4FB09D0]);
  id v2 = self;
  id v3 = objc_msgSend(v2, sel_configurationWithFont_scale_, v1, 2);
  id v4 = objc_msgSend(self, sel_hk_sleepKeyColor);
  id v5 = objc_msgSend(v2, sel_configurationWithHierarchicalColor_, v4);

  id v6 = v3;
  v10.value.super.Class isa = (Class)v3;
  v7.super.Class isa = Symbol.uiImage(configuration:)(v10).super.isa;

  id v8 = [(objc_class *)v7.super.isa imageByApplyingSymbolConfiguration:v5];
  if (v8)
  {

    return (Class)v8;
  }
  return v7.super.isa;
}

Class sub_1AD95FD4C()
{
  Class result = sub_1AD95FC00(32.0);
  qword_1E9A4CDE8  = (uint64_t)result;
  return result;
}

Class sub_1AD95FD90()
{
  Class result = sub_1AD95FC00(32.0);
  qword_1E9A4CDF0  = (uint64_t)result;
  return result;
}

Class sub_1AD95FDD4()
{
  Class result = sub_1AD95FC00(32.0);
  qword_1E9A4CDF8  = (uint64_t)result;
  return result;
}

void sub_1AD95FE18()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  id v1 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(self, sel_imageNamed_inBundle_, v1, v0);

  if (!v2) {
    __break(1u);
  }
}

uint64_t sub_1AD95FF50()
{
  uint64_t v1 = *v0;
  uint64_t v2 = unk_1F046A630;
  if ((unk_1F046A630 & ~qword_1F046A628) == 0) {
    uint64_t v2 = 0;
  }
  if (((v2 | qword_1F046A628) & ~v1) == 0)
  {
    if (qword_1EB724E38 == -1) {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  if (qword_1F046A658) {
    BOOL v3 = (qword_1F046A658 & v1) == qword_1F046A658;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (qword_1EB724E38 == -1) {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  if (qword_1F046A680 && (qword_1F046A680 & v1) != qword_1F046A680)
  {
    if (!qword_1F046A6A8 || (qword_1F046A6A8 & v1) == qword_1F046A6A8)
    {
      if (qword_1EB724E38 == -1) {
        goto LABEL_20;
      }
    }
    else if (qword_1EB724E38 == -1)
    {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  if (qword_1EB724E38 != -1) {
LABEL_23:
  }
    swift_once();
LABEL_20:
  id v4 = (id)qword_1EB727930;
  uint64_t v5 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v5;
}

uint64_t type metadata accessor for SleepOnboardingSetupViewController()
{
  return self;
}

uint64_t sub_1AD960224()
{
  return swift_deallocObject();
}

void sub_1AD96025C()
{
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t method lookup function for SleepOnboardingSetupViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepOnboardingSetupViewController);
}

uint64_t dispatch thunk of SleepOnboardingSetupViewController.__allocating_init(userInfo:presentationStyle:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of SleepOnboardingSetupViewController.update(with:type:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t sub_1AD960308(char a1)
{
  return sub_1AD95F548(a1, *(void *)(v1 + 16), MEMORY[0x1E4F66690], MEMORY[0x1E4F666A8]);
}

uint64_t sub_1AD960334(uint64_t a1)
{
  sub_1AD960484(0, &qword_1E9A4CE08, MEMORY[0x1E4F666B0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD9603AC(uint64_t a1, uint64_t a2)
{
  sub_1AD960484(0, &qword_1E9A4CE08, MEMORY[0x1E4F666B0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1AD96042C()
{
  unint64_t result = qword_1E9A4CE10;
  if (!qword_1E9A4CE10)
  {
    sub_1AD9DD4C0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CE10);
  }
  return result;
}

void sub_1AD960484(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD9604D8()
{
  return sub_1AD95F1F0();
}

void sub_1AD9604E0()
{
}

uint64_t sub_1AD960504(char a1)
{
  return sub_1AD95F548(a1, *(void *)(v1 + 16), MEMORY[0x1E4F66698], MEMORY[0x1E4F666A0]);
}

uint64_t sub_1AD960530()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD960588(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = (void *)v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  UIImageConfiguration_optional v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16)  = v10;
  *UIImageConfiguration_optional v10 = v2;
  v10[1]  = sub_1AD89F448;
  return sub_1AD9919BC(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1AD9606A4(__int16 *a1)
{
  __int16 v7 = *a1;
  unsigned __int16 v6 = *(_WORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_symbol);
  uint64_t result = _s13SleepHealthUI6SymbolO2eeoiySbAC_ACtFZ_0(&v7, &v6);
  if ((result & 1) == 0)
  {
    BOOL v3 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image);
    v9.value.super.Class isa = (Class)objc_msgSend(self, sel_configurationWithPointSize_, *(double *)(v1+ OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration+ 40));
    Class isa = v9.value.super.isa;
    Class v5 = Symbol.uiImage(configuration:)(v9).super.isa;

    objc_msgSend(v3, sel_setImage_, v5);
    return (uint64_t)objc_msgSend(v3, sel_sizeToFit);
  }
  return result;
}

id sub_1AD9607A4(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1AD960E4C();
  sub_1AD961CB4(a1, (uint64_t)v25, (uint64_t (*)(void))sub_1AD961D1C);
  double v4 = *(double *)&v25[5];
  if (!v25[0]) {
    double v4 = 2.22507386e-308;
  }
  Class v5 = &v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  double v6 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 40];
  if (v4 != v6)
  {
    __int16 v7 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image];
    v26.value.super.Class isa = (Class)objc_msgSend(self, sel_configurationWithPointSize_, v6);
    Class isa = v26.value.super.isa;
    Class v9 = Symbol.uiImage(configuration:)(v26).super.isa;

    objc_msgSend(v7, sel_setImage_, v9);
    objc_msgSend(v7, sel_sizeToFit);
  }
  UIImageConfiguration_optional v10 = self;
  objc_msgSend(v10, sel_begin);
  objc_msgSend(v10, sel_setDisableActions_, 1);
  uint64_t v11 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image];
  uint64_t v12 = *(void **)v5;
  uint64_t v13 = (void *)*((void *)v5 + 1);
  os_log_type_t v14 = (void *)*((void *)v5 + 2);
  uint64_t v15 = (void *)*((void *)v5 + 3);
  id v16 = *((id *)v5 + 4);
  id v17 = v12;
  id v18 = v13;
  id v19 = v14;
  id v20 = v15;
  if (objc_msgSend(v2, sel_isHighlighted)) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = v19;
  }
  id v22 = v21;

  objc_msgSend(v11, sel_setTintColor_, v22);
  id v23 = objc_msgSend(v11, sel_layer);
  objc_msgSend(v23, sel_setCompositingFilter_, *((void *)v5 + 4));

  return objc_msgSend(v10, sel_commit);
}

void sub_1AD9609C4(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration;
  double v4 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration);
  Class v5 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 8);
  id v20 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 16);
  double v6 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 32);
  id v22 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 24);
  uint64_t v28 = *(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 40);
  uint64_t v8 = *(void **)a1;
  __int16 v7 = *(void **)(a1 + 8);
  Class v9 = *(void **)(a1 + 16);
  UIImageConfiguration_optional v10 = *(void **)(a1 + 24);
  sub_1AD961CB4(a1 + 32, (uint64_t)&v29, (uint64_t (*)(void))sub_1AD96181C);
  uint64_t v21 = *(void **)(v3 + 8);
  uint64_t v11 = *(void **)(v3 + 24);
  id v19 = *(void **)(v3 + 16);
  id v23 = *(void **)(v3 + 32);
  uint64_t v24 = *(void **)v3;
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16)  = v12;
  *(_OWORD *)(v3 + 32)  = *(_OWORD *)(a1 + 32);
  id v27 = v6;
  id v26 = v8;
  id v25 = v7;
  id v13 = v9;
  id v14 = v10;
  id v15 = v4;
  id v16 = v5;
  id v17 = v20;
  id v18 = v22;
  sub_1AD878850(&v29);

  v30[0]  = v15;
  v30[1]  = v16;
  v30[2]  = v17;
  v30[3]  = v18;
  v30[4]  = v6;
  v30[5]  = v28;
  sub_1AD9607A4((uint64_t)v30);

  sub_1AD8788A8(&v29);
}

char *sub_1AD960B54(__int16 *a1, uint64_t a2)
{
  __int16 v4 = *a1;
  uint64_t v5 = OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_background;
  id v6 = objc_allocWithZone(MEMORY[0x1E4F39C88]);
  __int16 v7 = v2;
  *(void *)&v2[v5]  = objc_msgSend(v6, sel_init);
  *(_WORD *)&v7[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_symbol]  = v4;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  *(void *)&v7[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image]  = v8;
  Class v9 = *(void **)a2;
  UIImageConfiguration_optional v10 = *(void **)(a2 + 8);
  uint64_t v11 = *(void **)(a2 + 16);
  long long v12 = *(void **)(a2 + 24);
  sub_1AD961CB4(a2 + 32, (uint64_t)&v29, (uint64_t (*)(void))sub_1AD96181C);
  id v13 = &v7[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  long long v15 = *(_OWORD *)(a2 + 16);
  long long v14 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)id v13 = *(_OWORD *)a2;
  *((_OWORD *)v13 + 1)  = v15;
  *((_OWORD *)v13 + 2)  = v14;
  id v16 = v9;
  id v17 = v10;
  id v18 = v11;
  id v19 = v12;
  sub_1AD878850(&v29);

  v28.receiver  = v7;
  v28.super_class  = (Class)type metadata accessor for SleepScheduleClockHand();
  id v20 = objc_msgSendSuper2(&v28, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1AD87B1E0();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16)  = xmmword_1AD9E3070;
  uint64_t v22 = sub_1AD9DD590();
  uint64_t v23 = MEMORY[0x1E4FB0F40];
  *(void *)(v21 + 32)  = v22;
  *(void *)(v21 + 40)  = v23;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD841D34();
  uint64_t v24 = (char *)v20;
  sub_1AD9DFD90();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  id v25 = objc_msgSend(v24, sel_layer);
  objc_msgSend(v25, sel_addSublayer_, *(void *)&v24[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_background]);

  objc_msgSend(v24, sel_addSubview_, *(void *)&v24[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image]);
  id v26 = objc_msgSend(v24, sel_layer);
  objc_msgSend(v26, sel_setAllowsGroupBlending_, 0);

  memset(v30, 0, sizeof(v30));
  sub_1AD9607A4((uint64_t)v30);

  sub_1AD8788A8(&v29);
  return v24;
}

void sub_1AD960DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    sub_1AD960E4C();
  }
}

void sub_1AD960E4C()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_background];
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 8];
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 16];
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 24];
  id v6 = *(id *)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 32];
  id v7 = v2;
  id v8 = v3;
  id v9 = v4;
  id v10 = v5;
  if (objc_msgSend(v0, sel_isHighlighted)) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v7;
  }
  id v12 = v11;

  id v13 = objc_msgSend(v0, sel_traitCollection);
  id v14 = objc_msgSend(v12, sel_resolvedColorWithTraitCollection_, v13);
  id v15 = objc_msgSend(v14, sel_CGColor);

  objc_msgSend(v1, sel_setFillColor_, v15);
}

id sub_1AD961034()
{
  v10.receiver  = v0;
  v10.super_class  = (Class)type metadata accessor for SleepScheduleClockHand();
  objc_msgSendSuper2(&v10, sel_layoutSubviews);
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_background];
  objc_msgSend(v0, sel_bounds);
  CGPathRef v2 = CGPathCreateWithEllipseInRect(v11, 0);
  objc_msgSend(v1, sel_setPath_, v2);

  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image];
  objc_msgSend(v0, sel_bounds);
  CGFloat x = v12.origin.x;
  CGFloat y = v12.origin.y;
  CGFloat width = v12.size.width;
  CGFloat height = v12.size.height;
  double MidX = CGRectGetMidX(v12);
  v13.origin.CGFloat x = x;
  v13.origin.CGFloat y = y;
  v13.size.CGFloat width = width;
  v13.size.CGFloat height = height;
  return objc_msgSend(v3, sel_setCenter_, MidX, CGRectGetMidY(v13));
}

uint64_t type metadata accessor for SleepScheduleClockHand()
{
  return self;
}

id SleepScheduleClockHand.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleClockHand.init(frame:)()
{
}

id SleepScheduleClockHand.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for SleepScheduleClockHand();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for SleepScheduleClockHand(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepScheduleClockHand);
}

void destroy for SleepScheduleClockHand.Configuration(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for SleepScheduleClockHand.Configuration(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1  = *(void *)a2;
  a1[1]  = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  id v6 = *(void **)(a2 + 24);
  a1[2]  = v5;
  a1[3]  = v6;
  id v8 = *(void **)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  a1[4]  = v8;
  a1[5]  = v7;
  id v9 = v3;
  id v10 = v4;
  id v11 = v5;
  id v12 = v6;
  id v13 = v8;
  return a1;
}

uint64_t assignWithCopy for SleepScheduleClockHand.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8)  = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 16);
  id v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16)  = v10;
  id v12 = v10;

  id v13 = *(void **)(a2 + 24);
  id v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24)  = v13;
  id v15 = v13;

  id v16 = *(void **)(a1 + 32);
  id v17 = *(void **)(a2 + 32);
  *(void *)(a1 + 32)  = v17;
  id v18 = v17;

  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for SleepScheduleClockHand.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);

  id v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);

  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepScheduleClockHand.Configuration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepScheduleClockHand.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepScheduleClockHand.Configuration()
{
  return &type metadata for SleepScheduleClockHand.Configuration;
}

BOOL sub_1AD9616D4(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  void v7[2] = a1[2];
  v8[0]  = v3;
  long long v5 = a2[2];
  v8[1]  = v4;
  id v8[2] = v5;
  return sub_1AD96171C((uint64_t)v7, (uint64_t)v8);
}

BOOL sub_1AD96171C(uint64_t a1, uint64_t a2)
{
  sub_1AD837214(0, (unint64_t *)&qword_1EB724F30);
  if ((sub_1AD9DFE00() & 1) != 0
    && (sub_1AD9DFE00() & 1) != 0
    && (sub_1AD9DFE00() & 1) != 0
    && (sub_1AD9DFE00() & 1) != 0)
  {
    long long v4 = *(void **)(a1 + 32);
    long long v5 = *(void **)(a2 + 32);
    if (v4)
    {
      if (v5)
      {
        sub_1AD837214(0, &qword_1E9A4CE40);
        id v6 = v5;
        id v7 = v4;
        char v8 = sub_1AD9DFE00();

        if (v8) {
          return *(double *)(a1 + 40) == *(double *)(a2 + 40);
        }
      }
    }
    else if (!v5)
    {
      return *(double *)(a1 + 40) == *(double *)(a2 + 40);
    }
  }
  return 0;
}

void sub_1AD96181C()
{
  if (!qword_1E9A4CE48)
  {
    sub_1AD837214(255, &qword_1E9A4CE40);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CE48);
    }
  }
}

uint64_t sub_1AD961884()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD9618BC(uint64_t a1, uint64_t a2)
{
  sub_1AD960DF8(a1, a2, v2);
}

uint64_t sub_1AD9618C4@<X0>(void *a1@<X8>)
{
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4B050);
  id v28 = static UIColor.ringGoalMetColor.getter();
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_systemGray5Color);
  id v4 = objc_msgSend(v2, sel_systemGray6Color);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16)  = v3;
  *(void *)(v5 + 24)  = v4;
  id v6 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  uint64_t v33 = sub_1AD87B14C;
  uint64_t v34 = v5;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_1AD8F0900;
  uint64_t v32 = &block_descriptor_28;
  id v7 = _Block_copy(&aBlock);
  id v8 = v3;
  id v9 = v4;
  id v27 = objc_msgSend(v6, sel_initWithDynamicProvider_, v7);
  _Block_release(v7);

  swift_release();
  id v10 = objc_msgSend(v2, sel_systemGray2Color);
  id v11 = objc_msgSend(v2, sel_systemGrayColor);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16)  = v10;
  *(void *)(v12 + 24)  = v11;
  id v13 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  uint64_t v33 = sub_1AD917078;
  uint64_t v34 = v12;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_1AD8F0900;
  uint64_t v32 = &block_descriptor_17;
  id v14 = _Block_copy(&aBlock);
  id v15 = v10;
  id v16 = v11;
  id v17 = objc_msgSend(v13, sel_initWithDynamicProvider_, v14);
  _Block_release(v14);

  swift_release();
  id v18 = objc_msgSend(v2, sel_systemGray2Color);
  id v19 = objc_msgSend(v2, sel_systemGrayColor);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16)  = v18;
  *(void *)(v20 + 24)  = v19;
  id v21 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  uint64_t v33 = sub_1AD917078;
  uint64_t v34 = v20;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_1AD8F0900;
  uint64_t v32 = &block_descriptor_24_0;
  uint64_t v22 = _Block_copy(&aBlock);
  id v23 = v18;
  id v24 = v19;
  id v25 = objc_msgSend(v21, sel_initWithDynamicProvider_, v22);
  _Block_release(v22);

  uint64_t result = swift_release();
  *a1  = v28;
  a1[1]  = v27;
  a1[2]  = v17;
  a1[3]  = v25;
  a1[4]  = 0;
  a1[5]  = 0x402C000000000000;
  return result;
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t sub_1AD961C74()
{
  return swift_deallocObject();
}

uint64_t sub_1AD961CB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1AD961D1C()
{
  if (!qword_1E9A4CE58)
  {
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CE58);
    }
  }
}

void sub_1AD961D74(void *a1@<X8>)
{
  uint64_t v2 = self;
  id v25 = objc_msgSend(v2, sel_systemOrangeColor);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v3 = (id)qword_1EB727930;
  id v4 = (void *)sub_1AD9DF6D0();
  id v5 = objc_msgSend(v2, sel_colorNamed_inBundle_compatibleWithTraitCollection_, v4, v3, 0);

  if (v5)
  {
    id v6 = objc_msgSend(v2, sel_systemGray2Color);
    id v7 = objc_msgSend(v2, sel_systemGrayColor);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16)  = v6;
    *(void *)(v8 + 24)  = v7;
    id v9 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
    uint64_t v30 = sub_1AD917078;
    uint64_t v31 = v8;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v27 = 1107296256;
    id v28 = sub_1AD8F0900;
    id v29 = &block_descriptor_31_0;
    id v10 = _Block_copy(&aBlock);
    id v11 = v6;
    id v12 = v7;
    id v24 = objc_msgSend(v9, sel_initWithDynamicProvider_, v10);
    _Block_release(v10);

    swift_release();
    id v13 = objc_msgSend(v2, sel_systemGray2Color);
    id v14 = objc_msgSend(v2, sel_systemGrayColor);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16)  = v13;
    *(void *)(v15 + 24)  = v14;
    id v16 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
    uint64_t v30 = sub_1AD917078;
    uint64_t v31 = v15;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v27 = 1107296256;
    id v28 = sub_1AD8F0900;
    id v29 = &block_descriptor_38;
    id v17 = _Block_copy(&aBlock);
    id v18 = v13;
    id v19 = v14;
    id v20 = objc_msgSend(v16, sel_initWithDynamicProvider_, v17);
    _Block_release(v17);

    swift_release();
    sub_1AD9DF710();
    id v21 = objc_allocWithZone(MEMORY[0x1E4F39BC0]);
    uint64_t v22 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    id v23 = objc_msgSend(v21, sel_initWithType_, v22);

    *a1  = v25;
    a1[1]  = v5;
    a1[2]  = v24;
    a1[3]  = v20;
    a1[4]  = v23;
    a1[5]  = 0x402C000000000000;
  }
  else
  {
    __break(1u);
  }
}

uint64_t SleepOnboardingCoordinator.__allocating_init(healthStore:sleepStore:navigationController:onboardingContext:options:)(void *a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7 = sub_1AD96461C(a1, a2, a3, a4, a5);

  return v7;
}

uint64_t SleepOnboardingCoordinator.Options.rawValue.getter()
{
  return *(void *)v0;
}

SleepHealthUI::SleepOnboardingCoordinator::Options __swiftcall SleepOnboardingCoordinator.Options.init(rawValue:)(SleepHealthUI::SleepOnboardingCoordinator::Options rawValue)
{
  v1->rawValue  = rawValue.rawValue;
  return rawValue;
}

void static SleepOnboardingCoordinator.Options.navigateToSleepRoomOnOnboardingCompletion.getter(void *a1@<X8>)
{
  *a1  = 1;
}

void static SleepOnboardingCoordinator.Options.navigateToBalanceRoomOnOnboardingCompletion.getter(void *a1@<X8>)
{
  *a1  = 2;
}

uint64_t SleepOnboardingCoordinator.__allocating_init(onboardingManager:onboardingContext:navigationController:options:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  uint64_t v12 = sub_1AD96475C(v11, a2, a3, a4, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v12;
}

uint64_t SleepOnboardingCoordinator.init(onboardingManager:onboardingContext:navigationController:options:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  double v12 = MEMORY[0x1F4188790](v11, v11);
  id v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v15 + 16))(v14, v12);
  uint64_t v16 = sub_1AD964358((uint64_t)v14, a2, a3, a4, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v16;
}

id sub_1AD96231C()
{
  uint64_t v1 = v0;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  swift_retain_n();
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = v6;
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v16);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12)  = 2082;
    LOBYTE(v14)  = *(unsigned char *)(v1 + 64);
    uint64_t v15 = *(void *)(v1 + 72);
    id v9 = *(id *)(v1 + 56);
    uint64_t v10 = sub_1AD9DF730();
    uint64_t v13 = sub_1AD838978(v10, v11, &v16);
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Dismissing sleep onboarding with context: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return objc_msgSend(*(id *)(v1 + 88), sel_dismissViewControllerAnimated_completion_, 1, 0, v13, v14, v15, v16);
}

id sub_1AD962568(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1AD9DD550();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EB725958);
  swift_retain_n();
  uint64_t v5 = sub_1AD9DD530();
  os_log_type_t v6 = sub_1AD9DFBE0();
  uint64_t v7 = &off_1AD9E3000;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v31 = v9;
    *(_DWORD *)uint64_t v8 = 136446466;
    uint64_t v10 = sub_1AD9E04F0();
    sub_1AD838978(v10, v11, &v31);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12)  = 2082;
    LOBYTE(v29)  = *(unsigned char *)(a1 + 24);
    uint64_t v30 = *(void *)(a1 + 32);
    id v12 = *(id *)(a1 + 16);
    uint64_t v13 = sub_1AD9DF730();
    uint64_t v28 = sub_1AD838978(v13, v14, &v31);
    uint64_t v7 = &off_1AD9E3000;
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v5, v6, "[%{public}s] Completing sleep onboarding with context: %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v9, -1, -1);
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v15 = *(void *)(v2 + 40);
  uint64_t v16 = *(void *)(v2 + 48);
  __swift_project_boxed_opaque_existential_1Tm((void *)(v2 + 16), v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 200))(a1, v15, v16);
  uint64_t v17 = *(void *)(v2 + 80);
  if (v17) {
    sub_1AD963888((*(unsigned char *)(a1 + 24) & 1) == 0);
  }
  if ((v17 & 2) != 0) {
    sub_1AD963DBC();
  }
  swift_retain_n();
  uint64_t v18 = sub_1AD9DD530();
  os_log_type_t v19 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = v21;
    *(_DWORD *)uint64_t v20 = *((void *)v7 + 20);
    uint64_t v22 = sub_1AD9E04F0();
    sub_1AD838978(v22, v23, &v31);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12)  = 2082;
    LOBYTE(v29)  = *(unsigned char *)(a1 + 24);
    uint64_t v30 = *(void *)(a1 + 32);
    id v24 = *(id *)(a1 + 16);
    uint64_t v25 = sub_1AD9DF730();
    uint64_t v28 = sub_1AD838978(v25, v26, &v31);
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v18, v19, "[%{public}s] Dismissing sleep onboarding with context: %{public}s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v21, -1, -1);
    MEMORY[0x1B3E6D1A0](v20, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return objc_msgSend(*(id *)(v2 + 88), sel_dismissViewControllerAnimated_completion_, 1, 0, v28, v29, v30, v31);
}

void sub_1AD9629A8(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = v3[5];
  uint64_t v9 = v3[6];
  __swift_project_boxed_opaque_existential_1Tm(v3 + 2, v8);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  id v11 = objc_msgSend(self, sel_sharedBehavior);
  if (!v11)
  {
    __break(1u);
    return;
  }
  id v12 = v11;
  unsigned int v13 = objc_msgSend(v11, sel_hksp_supportsSleep);

  if (!v13)
  {

LABEL_10:
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_1AD9DD550();
    __swift_project_value_buffer(v27, (uint64_t)qword_1EB725958);
    swift_retain_n();
    uint64_t v17 = sub_1AD9DD530();
    os_log_type_t v18 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v43 = v20;
      *(_DWORD *)uint64_t v19 = 136446466;
      uint64_t v28 = sub_1AD9E04F0();
      sub_1AD838978(v28, v29, &v43);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12)  = 2082;
      id v30 = (id)v4[7];
      uint64_t v31 = sub_1AD9DF730();
      sub_1AD838978(v31, v32, &v43);
      sub_1AD9DFEA0();
      swift_release_n();
      swift_bridgeObjectRelease();
      unint64_t v26 = "[%{public}s] Attempted to onboard sleep on unsupported device with context: %{public}s";
LABEL_14:
      _os_log_impl(&dword_1AD834000, v17, v18, v26, (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
      MEMORY[0x1B3E6D1A0](v19, -1, -1);

      if (!a2) {
        return;
      }
LABEL_17:
      a2(0);
      return;
    }
LABEL_16:

    swift_release_n();
    if (!a2) {
      return;
    }
    goto LABEL_17;
  }
  id v14 = objc_msgSend(v10, sel_profileIdentifier);
  id v15 = objc_msgSend(v14, sel_type);

  if (v15 == (id)3) {
    goto LABEL_10;
  }
  if (v4[12])
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_1AD9DD550();
    __swift_project_value_buffer(v16, (uint64_t)qword_1EB725958);
    swift_retain_n();
    uint64_t v17 = sub_1AD9DD530();
    os_log_type_t v18 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v43 = v20;
      *(_DWORD *)uint64_t v19 = 136446466;
      uint64_t v21 = sub_1AD9E04F0();
      sub_1AD838978(v21, v22, &v43);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12)  = 2082;
      id v23 = (id)v4[7];
      uint64_t v24 = sub_1AD9DF730();
      sub_1AD838978(v24, v25, &v43);
      sub_1AD9DFEA0();
      swift_release_n();
      swift_bridgeObjectRelease();
      unint64_t v26 = "[%{public}s] Asked to show sleep onboarding but already setting up with context: %{public}s";
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_1AD9DD550();
  __swift_project_value_buffer(v33, (uint64_t)qword_1EB725958);
  swift_retain_n();
  uint64_t v34 = sub_1AD9DD530();
  os_log_type_t v35 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v43 = v37;
    *(_DWORD *)uint64_t v36 = 136446466;
    uint64_t v38 = sub_1AD9E04F0();
    sub_1AD838978(v38, v39, &v43);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12)  = 2082;
    id v40 = (id)v4[7];
    uint64_t v41 = sub_1AD9DF730();
    sub_1AD838978(v41, v42, &v43);
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v34, v35, "[%{public}s] Presenting onboarding with context: %{public}s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v37, -1, -1);
    MEMORY[0x1B3E6D1A0](v36, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  *((unsigned char *)v4 + 96)  = 1;
  sub_1AD963014(a1, (uint64_t)a2, a3);
}

uint64_t sub_1AD963014(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EB725958);
  swift_retain_n();
  uint64_t v9 = sub_1AD9DD530();
  os_log_type_t v10 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    id v12 = (void *)swift_slowAlloc();
    id v30 = v12;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v13 = sub_1AD9E04F0();
    sub_1AD838978(v13, v14, (uint64_t *)&v30);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12)  = 2082;
    uint64_t v15 = sub_1AD9DF730();
    sub_1AD838978(v15, v16, (uint64_t *)&v30);
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] Setting up navigation controller for consolidated onboarding (entry: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
    MEMORY[0x1B3E6D1A0](v11, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v17 = *(void *)(v4 + 40);
  uint64_t v18 = *(void *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1Tm((void *)(v4 + 16), v17);
  char v19 = *(unsigned char *)(v4 + 64);
  uint64_t v20 = *(void *)(v4 + 72);
  id v30 = *(id *)(v4 + 56);
  char v31 = v19;
  uint64_t v32 = v20;
  id v21 = v30;
  SleepOnboardingAnalyticsTracking<>.trackOnboardingPromotion(context:)((uint64_t *)&v30, v17, v18);

  uint64_t v22 = *(void *)(v4 + 40);
  uint64_t v23 = *(void *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1Tm((void *)(v4 + 16), v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 208))(v22, v23);
  uint64_t v24 = *(void *)(v4 + 40);
  uint64_t v25 = *(void *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1Tm((void *)(v4 + 16), v24);
  unint64_t v26 = (void *)swift_allocObject();
  v26[2]  = v4;
  void v26[3] = a1;
  v26[4]  = a2;
  v26[5]  = a3;
  uint64_t v27 = *(void (**)(uint64_t (*)(void *, uint64_t), void *, uint64_t, uint64_t))(v25 + 184);
  id v28 = a1;
  swift_retain();
  sub_1AD8CB060(a2);
  v27(sub_1AD964AEC, v26, v24, v25);
  return swift_release();
}

uint64_t sub_1AD963368(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = sub_1AD9DF3D0();
  uint64_t v31 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27, v12);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1AD9DF400();
  uint64_t v29 = *(void *)(v15 - 8);
  uint64_t v30 = v15;
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  uint64_t v28 = sub_1AD9DFCA0();
  char v19 = (void *)swift_allocObject();
  void v19[2] = a3;
  v19[3]  = a1;
  v19[4]  = a2;
  v19[5]  = a4;
  v19[6]  = a5;
  v19[7]  = a6;
  aBlock[4]  = sub_1AD964B58;
  aBlock[5]  = v19;
  aBlock[0]  = MEMORY[0x1E4F143A8];
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_1AD8D34D8;
  aBlock[3]  = &block_descriptor_29;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = a4;
  swift_retain();
  id v22 = a1;
  swift_unknownObjectRetain();
  sub_1AD8CB060(a5);
  swift_release();
  sub_1AD9DF3F0();
  aBlock[0]  = MEMORY[0x1E4FBC860];
  sub_1AD8CCE74();
  sub_1AD964C18(0, &qword_1E9A4C330, MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
  sub_1AD8CCECC();
  uint64_t v23 = v27;
  sub_1AD9DFF40();
  uint64_t v24 = (void *)v28;
  MEMORY[0x1B3E6BC50](0, v18, v14, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v18, v30);
}

void sub_1AD963664(uint64_t a1, void *a2, uint64_t a3, void *a4, void (*a5)(void *), uint64_t a6)
{
  BOOL v10 = a3 != 0;
  uint64_t v11 = (void *)(a1 + 16);
  sub_1AD841030(a1 + 16, (uint64_t)v30);
  uint64_t v12 = *(void *)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  id v27 = *(id *)(a1 + 56);
  char v28 = v13;
  uint64_t v29 = v14;
  char v26 = 2 * v10;
  uint64_t v15 = *(void *)(a1 + 40);
  __swift_project_boxed_opaque_existential_1Tm(v11, v15);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 168);
  id v17 = v27;
  uint64_t v18 = (void *)v16(v15, v12);
  type metadata accessor for SleepOnboardingUserInfo();
  swift_allocObject();
  id v19 = a2;
  sub_1AD8CE2F4(v30, (uint64_t *)&v27, a2, &v26, v18);

  id v20 = objc_allocWithZone((Class)type metadata accessor for SleepOnboardingSetupViewController());
  uint64_t v21 = swift_retain();
  id v22 = (char *)SleepOnboardingSetupViewController.init(userInfo:presentationStyle:)(v21, 0);
  uint64_t v23 = (uint64_t *)&v22[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate];
  swift_beginAccess();
  *uint64_t v23 = a1;
  v23[1]  = (uint64_t)&protocol witness table for SleepOnboardingCoordinator;
  swift_retain();
  swift_unknownObjectRelease();
  uint64_t v24 = v22;
  sub_1AD964400(a4, v24, a5, a6, a1);
  swift_release();
}

void HKSPSuggestionProvider.sleepScheduleType.getter(unsigned char *a1@<X8>)
{
  *a1  = 2;
}

uint64_t sub_1AD963814(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(unsigned char *)(result + 96)  = 0;
    uint64_t result = swift_release();
  }
  if (a2) {
    return a2(a4);
  }
  return result;
}

void sub_1AD963888(int a1)
{
  uint64_t v2 = v1;
  LODWORD(v3)  = a1;
  uint64_t v44 = *v1;
  sub_1AD964C18(0, &qword_1E9A4CE80, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = &v38[-v6];
  uint64_t v8 = sub_1AD9DCB80();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v16 = &v38[-v15];
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_1AD9DD550();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)qword_1EB725958);
  id v19 = sub_1AD9DD530();
  os_log_type_t v20 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v42 = v2;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v43 = v8;
    id v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc();
    int v39 = v3;
    uint64_t v3 = v23;
    uint64_t v46 = v23;
    id v40 = v12;
    uint64_t v41 = v18;
    *(_DWORD *)id v22 = 136446210;
    uint64_t v24 = sub_1AD9E04F0();
    uint64_t v45 = sub_1AD838978(v24, v25, &v46);
    uint64_t v12 = v40;
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v19, v20, "[%{public}s] Navigating to sleep room", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v26 = v3;
    LOBYTE(v3)  = v39;
    MEMORY[0x1B3E6D1A0](v26, -1, -1);
    id v27 = v22;
    uint64_t v8 = v43;
    MEMORY[0x1B3E6D1A0](v27, -1, -1);
  }

  if (v3) {
    id v28 = (id)*MEMORY[0x1E4FA53F8];
  }
  else {
    id v28 = 0;
  }
  id v29 = (id)HKSPSleepURLWithProvenanceInfo();
  if (v29)
  {
    uint64_t v30 = v29;
    sub_1AD9DCB60();

    uint64_t v31 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32);
    v31(v7, v12, v8);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      v31(v16, v7, v8);
      DeepLinkOpener.open(url:completion:)((uint64_t)v16, 0, 0);

      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v16, v8);
      return;
    }
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  sub_1AD964C7C((uint64_t)v7, &qword_1E9A4CE80, MEMORY[0x1E4F276F0]);
  uint64_t v32 = sub_1AD9DD530();
  os_log_type_t v33 = sub_1AD9DFBC0();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v46 = v35;
    *(_DWORD *)uint64_t v34 = 136446210;
    uint64_t v36 = sub_1AD9E04F0();
    uint64_t v45 = sub_1AD838978(v36, v37, &v46);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v32, v33, "[%{public}s] Failed to create sleep deep link url", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v35, -1, -1);
    MEMORY[0x1B3E6D1A0](v34, -1, -1);
  }
}

uint64_t sub_1AD963DBC()
{
  uint64_t v0 = sub_1AD9DD160();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD964C18(0, qword_1E9A4CE88, MEMORY[0x1E4F658B0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = sub_1AD9DD180();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v38 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1AD9DCB80();
  uint64_t v39 = *(void *)(v13 - 8);
  uint64_t v40 = v13;
  MEMORY[0x1F4188790](v13, v14);
  unint64_t v37 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_1AD9DD550();
  __swift_project_value_buffer(v16, (uint64_t)qword_1EB725958);
  uint64_t v17 = sub_1AD9DD530();
  os_log_type_t v18 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v35 = v1;
    os_log_type_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v36 = v0;
    uint64_t v22 = v21;
    uint64_t v42 = v21;
    uint64_t v34 = v10;
    *(_DWORD *)os_log_type_t v20 = 136446210;
    uint64_t v23 = sub_1AD9E04F0();
    uint64_t v41 = sub_1AD838978(v23, v24, &v42);
    uint64_t v10 = v34;
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v17, v18, "[%{public}s] Navigating to balance room", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v22;
    uint64_t v0 = v36;
    MEMORY[0x1B3E6D1A0](v25, -1, -1);
    uint64_t v26 = v20;
    uint64_t v1 = v35;
    MEMORY[0x1B3E6D1A0](v26, -1, -1);
  }

  id v27 = v38;
  sub_1AD9DD170();
  uint64_t v28 = *MEMORY[0x1E4F658A8];
  uint64_t v29 = sub_1AD9DD150();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v8, v28, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v8, 0, 1, v29);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4F658B8], v0);
  uint64_t v31 = (uint64_t)v37;
  sub_1AD9DD140();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  sub_1AD964C7C((uint64_t)v8, qword_1E9A4CE88, MEMORY[0x1E4F658B0]);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v27, v9);
  DeepLinkOpener.open(url:completion:)(v31, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v31, v40);
}

uint64_t SleepOnboardingCoordinator.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return v0;
}

uint64_t SleepOnboardingCoordinator.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return swift_deallocClassInstance();
}

void HKSPSuggestionProvider<>.sleepScheduleType.getter(unsigned char *a1@<X8>)
{
  *a1  = 1;
}

uint64_t sub_1AD964358(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a5 + 40)  = a6;
  *(void *)(a5 + 48)  = a7;
  boxed_opaque_existential_1  = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a5 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a1, a6);
  uint64_t v14 = *a2;
  char v15 = *((unsigned char *)a2 + 8);
  uint64_t v16 = a2[2];
  uint64_t v17 = *a4;
  *(unsigned char *)(a5 + 96)  = 0;
  *(void *)(a5 + 56)  = v14;
  *(unsigned char *)(a5 + 64)  = v15;
  *(void *)(a5 + 80)  = v17;
  *(void *)(a5 + 88)  = a3;
  *(void *)(a5 + 72)  = v16;
  return a5;
}

void sub_1AD964400(void *a1, void *a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v10 = *(void **)(a5 + 88);
    sub_1AD870B1C();
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16)  = xmmword_1AD9E71F0;
    *(void *)(v11 + 32)  = a2;
    v19[0]  = v11;
    sub_1AD9DF870();
    sub_1AD837214(0, &qword_1E9A49270);
    id v12 = a1;
    id v13 = a2;
    uint64_t v14 = (void *)sub_1AD9DF850();
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setViewControllers_animated_, v14, 0, v19[0]);

    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    uint64_t v16 = (void *)swift_allocObject();
    void v16[2] = v15;
    void v16[3] = a3;
    v16[4]  = a4;
    v16[5]  = v13;
    v16[6]  = &protocol witness table for SleepOnboardingFlowController;
    v19[4]  = sub_1AD964C08;
    v19[5]  = v16;
    v19[0]  = MEMORY[0x1E4F143A8];
    v19[1]  = 1107296256;
    void v19[2] = sub_1AD8D34D8;
    v19[3]  = &block_descriptor_17_0;
    uint64_t v17 = _Block_copy(v19);
    id v18 = v13;
    sub_1AD8CB060((uint64_t)a3);
    swift_release();
    objc_msgSend(v12, sel_presentViewController_animated_completion_, v10, 1, v17);
    _Block_release(v17);
  }
  else
  {
    objc_msgSend(*(id *)(a5 + 88), sel_pushViewController_animated_, a2, 1);
    *(unsigned char *)(a5 + 96)  = 0;
    if (a3) {
      a3(a2);
    }
  }
}

uint64_t sub_1AD96461C(void *a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8 = *a4;
  char v9 = *((unsigned char *)a4 + 8);
  uint64_t v10 = a4[2];
  uint64_t v11 = *a5;
  type metadata accessor for HealthStatusFeatureProvider();
  id v12 = (void *)swift_allocObject();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B068]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E4F29DC8], a1);
  uint64_t v14 = sub_1AD837214(0, (unint64_t *)&qword_1E9A4B360);
  uint64_t v15 = MEMORY[0x1E4F66930];
  v12[5]  = v14;
  v12[6]  = v15;
  void v12[2] = v13;
  sub_1AD9DD1C0();
  v12[7]  = sub_1AD9DD1B0();
  uint64_t v16 = type metadata accessor for SleepOnboardingManager();
  uint64_t v17 = (void *)swift_allocObject();
  id v18 = sub_1AD8D5298(a2, a1, (uint64_t)v12, v17);
  type metadata accessor for SleepOnboardingCoordinator();
  uint64_t result = swift_allocObject();
  *(void *)(result + 40)  = v16;
  *(void *)(result + 48)  = &protocol witness table for SleepOnboardingManager;
  *(void *)(result + 16)  = v18;
  *(unsigned char *)(result + 96)  = 0;
  *(void *)(result + 56)  = v8;
  *(unsigned char *)(result + 64)  = v9;
  *(void *)(result + 80)  = v11;
  *(void *)(result + 88)  = a3;
  *(void *)(result + 72)  = v10;
  return result;
}

uint64_t sub_1AD96475C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepOnboardingCoordinator();
  uint64_t v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a6);
  return sub_1AD964358((uint64_t)v15, a2, a3, a4, v16, a6, a7);
}

unint64_t sub_1AD964874()
{
  unint64_t result = qword_1E9A4CE60;
  if (!qword_1E9A4CE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CE60);
  }
  return result;
}

unint64_t sub_1AD9648CC()
{
  unint64_t result = qword_1E9A4CE68;
  if (!qword_1E9A4CE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CE68);
  }
  return result;
}

unint64_t sub_1AD964924()
{
  unint64_t result = qword_1E9A4CE70;
  if (!qword_1E9A4CE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CE70);
  }
  return result;
}

unint64_t sub_1AD96497C()
{
  unint64_t result = qword_1E9A4CE78;
  if (!qword_1E9A4CE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CE78);
  }
  return result;
}

uint64_t type metadata accessor for SleepOnboardingCoordinator()
{
  return self;
}

uint64_t method lookup function for SleepOnboardingCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepOnboardingCoordinator);
}

uint64_t dispatch thunk of SleepOnboardingCoordinator.__allocating_init(onboardingManager:onboardingContext:navigationController:options:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SleepOnboardingCoordinator.didDismissOnboarding()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SleepOnboardingCoordinator.didCompleteOnboarding(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SleepOnboardingCoordinator.showSleepOnboarding(with:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

ValueMetadata *type metadata accessor for SleepOnboardingCoordinator.Options()
{
  return &type metadata for SleepOnboardingCoordinator.Options;
}

uint64_t sub_1AD964A9C()
{
  swift_release();

  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1AD964AEC(void *a1, uint64_t a2)
{
  return sub_1AD963368(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1AD964AF8()
{
  swift_release();

  swift_unknownObjectRelease();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_1AD964B58()
{
  sub_1AD963664(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void (**)(void *))(v0 + 48), *(void *)(v0 + 56));
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t sub_1AD964B80()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD964BB8()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1AD964C08()
{
  return sub_1AD963814(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_1AD964C18(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD964C7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1AD964C18(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1AD964CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t sub_1AD964CFC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AD964DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 32) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v11 = *(void *)a2;
    char v12 = *(unsigned char *)(a2 + 8);
    sub_1AD861F90(*(void *)a2, v12);
    *(void *)a1  = v11;
    *(unsigned char *)(a1 + 8)  = v12;
    unint64_t v13 = a1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v13 + 16)  = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    *(void *)(v13 + 24)  = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v14(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 32) & ~v7, ((a2 & 0xFFFFFFFFFFFFFFF8) + v7 + 32) & ~v7, v5);
  }
  return a1;
}

uint64_t sub_1AD964EE4(uint64_t a1, uint64_t a2)
{
  sub_1AD862078(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return v5(v6);
}

uint64_t sub_1AD964F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_1AD861F90(*(void *)a2, v7);
  *(void *)a1  = v6;
  *(unsigned char *)(a1 + 8)  = v7;
  unint64_t v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v8 + 16)  = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(void *)(v8 + 24)  = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  char v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = (v13 + 32 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  uint64_t v15 = (v13 + 32 + v9) & ~v13;
  swift_bridgeObjectRetain();
  v12(v14, v15, v10);
  return a1;
}

uint64_t sub_1AD96502C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_1AD861F90(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1  = v6;
  *(unsigned char *)(a1 + 8)  = v7;
  sub_1AD862078(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v10 + 16)  = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(void *)(v10 + 24)  = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))((*(unsigned __int8 *)(v11 + 80) + 32 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 32 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_1AD9650FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16)  = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 32 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 32 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1AD965184(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1  = v6;
  *(unsigned char *)(a1 + 8)  = v7;
  sub_1AD862078(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (uint64_t *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v10 + 16)  = v4[2];
  *(void *)(v10 + 24)  = v4[3];
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))((*(unsigned __int8 *)(v11 + 80) + 32 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_1AD965238(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 32) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      unint64_t v15 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v15 + v6 + 32) & ~v6);
      }
      unint64_t v16 = *(void *)(v15 + 24);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16)  = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9)  = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9)  = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9)  = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9)  = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9)  = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1AD9653DC(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 32) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1  = v17;
          *(unsigned char *)(a1 + 2)  = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1  = v17;
        }
        else
        {
          *(unsigned char *)a1  = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1  = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v10)  = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v10)  = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)(a1 + v10)  = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v10)  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v10)  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1AD965640);
    case 4:
      *(_DWORD *)(a1 + v10)  = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v18 = a1 & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19((v18 + v9 + 32) & ~v9);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)(v18 + 16)  = a2 ^ 0x80000000;
          *(void *)(v18 + 24)  = 0;
        }
        else
        {
          *(void *)(v18 + 24)  = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for DiagramHeader()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1AD965680()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD9656C4(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  unsigned int v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata, a2);
    unsigned int v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      size_t v10 = (long long *)(v5 + 2);
      BOOL v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1)  = *(v10 - 1);
        *BOOL v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        unsigned int v16 = &v8[8 * v9];
        int v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)unsigned int v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  MEMORY[0x1F4188790](TupleTypeMetadata, a2);
  os_log_type_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return sub_1AD9DF360();
}

uint64_t sub_1AD965888@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  sub_1AD861F90(v3, v4);
  sub_1AD967118(v3, v4, a1);
  return sub_1AD862078(v3, v4);
}

uint64_t sub_1AD9658EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  sub_1AD965F1C();
  swift_getTupleTypeMetadata3();
  sub_1AD9DF350();
  swift_getWitnessTable();
  uint64_t v4 = sub_1AD9DF180();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  unsigned int v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9, v10);
  unint64_t v12 = &v17[-v11];
  sub_1AD9DE340();
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v18 = v3;
  uint64_t v19 = v13;
  uint64_t v20 = v1;
  sub_1AD9DF170();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1AD90C5E8(v8, v4, WitnessTable);
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  sub_1AD90C5E8(v12, v4, WitnessTable);
  return ((uint64_t (*)(unsigned char *, uint64_t))v15)(v12, v4);
}

uint64_t sub_1AD965AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = a4;
  uint64_t v46 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v45 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v48 = (char *)&v36 - v10;
  sub_1AD965888(&v53);
  uint64_t v43 = a1;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  if (v53 == 1)
  {
    uint64_t v53 = v12;
    uint64_t v54 = v11;
    sub_1AD85F688();
    sub_1AD9DFEE0();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v41 = type metadata accessor for DiagramHeader();
  sub_1AD9DE990();
  uint64_t v13 = sub_1AD9DEAB0();
  uint64_t v42 = a3;
  uint64_t v15 = v14;
  char v17 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  sub_1AD9DEE70();
  uint64_t v39 = sub_1AD9DEA70();
  uint64_t v40 = v18;
  char v20 = v19;
  uint64_t v37 = a2;
  uint64_t v47 = v21;
  swift_release();
  int v38 = v20 & 1;
  sub_1AD861548(v13, v15, v17 & 1);
  swift_bridgeObjectRelease();
  unint64_t v22 = v48;
  sub_1AD90C5E8(v43 + *(int *)(v41 + 40), a2, a3);
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  uint64_t v23 = v64[5];
  char v24 = v65;
  uint64_t v25 = v66;
  LODWORD(v43)  = v67;
  uint64_t v26 = v69;
  uint64_t v41 = v68;
  uint64_t v27 = v39;
  uint64_t v28 = v40;
  uint64_t v60 = v39;
  uint64_t v61 = v40;
  LOBYTE(v13)  = v38;
  char v62 = v38;
  uint64_t v63 = v47;
  v64[0]  = &v60;
  uint64_t v29 = v46;
  uint64_t v30 = v45;
  uint64_t v31 = v22;
  uint64_t v32 = v37;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v45, v31, v37);
  uint64_t v53 = v23;
  LOBYTE(v54)  = v24;
  uint64_t v55 = v25;
  char v56 = v43;
  uint64_t v57 = v41;
  uint64_t v58 = v26;
  uint64_t v59 = 0x3FF0000000000000;
  v64[1]  = v30;
  v64[2]  = &v53;
  sub_1AD861558(v27, v28, v13);
  swift_bridgeObjectRetain();
  v52[0]  = MEMORY[0x1E4F3E2F8];
  v52[1]  = v32;
  sub_1AD965F1C();
  v52[2]  = v33;
  uint64_t v49 = MEMORY[0x1E4F3E2E8];
  uint64_t v50 = v42;
  unint64_t v51 = sub_1AD966050();
  sub_1AD9656C4((uint64_t)v64, 3uLL, (uint64_t)v52);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v29 + 8);
  v34(v48, v32);
  sub_1AD861548(v27, v28, v13);
  swift_bridgeObjectRelease();
  v34(v30, v32);
  sub_1AD861548(v60, v61, v62);
  return swift_bridgeObjectRelease();
}

void sub_1AD965F1C()
{
  if (!qword_1E9A4CF10)
  {
    sub_1AD965F84();
    sub_1AD965FE4();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CF10);
    }
  }
}

void sub_1AD965F84()
{
  if (!qword_1E9A4A7D8)
  {
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A7D8);
    }
  }
}

void sub_1AD965FE4()
{
  if (!qword_1E9A4CF18)
  {
    sub_1AD9DE510();
    unint64_t v0 = sub_1AD9DE4E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CF18);
    }
  }
}

uint64_t sub_1AD966044@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD965AE8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1AD966050()
{
  unint64_t result = qword_1E9A4CF20;
  if (!qword_1E9A4CF20)
  {
    sub_1AD965F1C();
    sub_1AD9660C8();
    sub_1AD966140();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CF20);
  }
  return result;
}

unint64_t sub_1AD9660C8()
{
  unint64_t result = qword_1E9A4A7F0;
  if (!qword_1E9A4A7F0)
  {
    sub_1AD965F84();
    sub_1AD890CB0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A7F0);
  }
  return result;
}

unint64_t sub_1AD966140()
{
  unint64_t result = qword_1E9A4CF28;
  if (!qword_1E9A4CF28)
  {
    sub_1AD965FE4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CF28);
  }
  return result;
}

uint64_t sub_1AD966198(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1AD9DE260();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v9 = sub_1AD9DFBD0();
  uint64_t v10 = sub_1AD9DE730();
  os_log_type_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v16 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v15 = sub_1AD838978(1819242306, 0xE400000000000000, &v16);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v13, -1, -1);
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
  }

  sub_1AD9DE250();
  swift_getAtKeyPath();
  sub_1AD862078(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v16;
}

uint64_t sub_1AD96639C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DE260();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v9 = (void (*)(uint64_t))MEMORY[0x1E4F3C5D0];
  sub_1AD9673AC(0, &qword_1EB725A10, MEMORY[0x1E4F3C5D0]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (void *)((char *)v22 - v12);
  sub_1AD967340(v2, (uint64_t)v22 - v12, &qword_1EB725A10, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1AD9DDD20();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, v13, v14);
  }
  else
  {
    uint64_t v16 = *v13;
    os_log_type_t v17 = sub_1AD9DFBD0();
    uint64_t v18 = sub_1AD9DE730();
    os_log_type_t v19 = v17;
    if (os_log_type_enabled(v18, v17))
    {
      char v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v23 = v21;
      v22[1]  = v16;
      *(_DWORD *)char v20 = 136315138;
      v22[2]  = sub_1AD838978(0x686353726F6C6F43, 0xEB00000000656D65, &v23);
      sub_1AD9DFEA0();
      _os_log_impl(&dword_1AD834000, v18, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v21, -1, -1);
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
    }

    sub_1AD9DE250();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1AD96667C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DE260();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v9 = (void (*)(uint64_t))MEMORY[0x1E4F3D548];
  sub_1AD9673AC(0, &qword_1EB724E28, MEMORY[0x1E4F3D548]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)v21 - v12;
  sub_1AD967340(v2, (uint64_t)v21 - v12, &qword_1EB724E28, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1AD9DE320();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, v13, v14);
  }
  else
  {
    os_log_type_t v16 = sub_1AD9DFBD0();
    os_log_type_t v17 = sub_1AD9DE730();
    os_log_type_t v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v22 = v20;
      v21[1]  = a1;
      *(_DWORD *)os_log_type_t v19 = 136315138;
      _OWORD v21[2] = sub_1AD838978(0xD000000000000013, 0x80000001AD9F5C40, &v22);
      sub_1AD9DFEA0();
      _os_log_impl(&dword_1AD834000, v17, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
      MEMORY[0x1B3E6D1A0](v19, -1, -1);
    }

    sub_1AD9DE250();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1AD966950@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DE260();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v9 = (void (*)(uint64_t))MEMORY[0x1E4F3E0D8];
  sub_1AD9673AC(0, &qword_1EB725270, MEMORY[0x1E4F3E0D8]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (void *)((char *)v22 - v12);
  sub_1AD967340(v2, (uint64_t)v22 - v12, &qword_1EB725270, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1AD9DE930();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, v13, v14);
  }
  else
  {
    uint64_t v16 = *v13;
    os_log_type_t v17 = sub_1AD9DFBD0();
    os_log_type_t v18 = sub_1AD9DE730();
    os_log_type_t v19 = v17;
    if (os_log_type_enabled(v18, v17))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v23 = v21;
      v22[1]  = v16;
      *(_DWORD *)uint64_t v20 = 136315138;
      v22[2]  = sub_1AD838978(0x747865746E6F43, 0xE700000000000000, &v23);
      sub_1AD9DFEA0();
      _os_log_impl(&dword_1AD834000, v18, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v21, -1, -1);
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
    }

    sub_1AD9DE250();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

double sub_1AD966C28(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1AD9DE260();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return *(double *)&a1;
  }
  swift_retain();
  os_log_type_t v9 = sub_1AD9DFBD0();
  uint64_t v10 = sub_1AD9DE730();
  os_log_type_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    double v16 = *(double *)&v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v15 = sub_1AD838978(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v16);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v13, -1, -1);
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
  }

  sub_1AD9DE250();
  swift_getAtKeyPath();
  sub_1AD862078(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v16;
}

uint64_t sub_1AD966E34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DE260();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v9 = (void (*)(uint64_t))MEMORY[0x1E4F3CB98];
  sub_1AD9673AC(0, (unint64_t *)&qword_1E9A4B6D8, MEMORY[0x1E4F3CB98]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (void *)((char *)v22 - v12);
  sub_1AD967340(v2, (uint64_t)v22 - v12, (unint64_t *)&qword_1E9A4B6D8, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1AD9DDF50();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, v13, v14);
  }
  else
  {
    uint64_t v16 = *v13;
    os_log_type_t v17 = sub_1AD9DFBD0();
    os_log_type_t v18 = sub_1AD9DE730();
    os_log_type_t v19 = v17;
    if (os_log_type_enabled(v18, v17))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v23 = v21;
      v22[1]  = v16;
      *(_DWORD *)uint64_t v20 = 136315138;
      v22[2]  = sub_1AD838978(0x5463696D616E7944, 0xEF657A6953657079, &v23);
      sub_1AD9DFEA0();
      _os_log_impl(&dword_1AD834000, v18, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v21, -1, -1);
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
    }

    sub_1AD9DE250();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

void sub_1AD967118(uint64_t a1@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_1AD9DE260();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    *a3  = a1 & 1;
  }
  else
  {
    sub_1AD861F90(a1, 0);
    os_log_type_t v11 = sub_1AD9DFBD0();
    uint64_t v12 = sub_1AD9DE730();
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      v17[1]  = a3;
      uint64_t v16 = v15;
      uint64_t v18 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      _OWORD v17[2] = sub_1AD838978(0x566D617267616944, 0xEE00746E61697261, &v18);
      sub_1AD9DFEA0();
      _os_log_impl(&dword_1AD834000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v16, -1, -1);
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
    }

    sub_1AD9DE250();
    swift_getAtKeyPath();
    sub_1AD862078(a1, 0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1AD967340(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_1AD9673AC(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_1AD9673AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDD30();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD967400()
{
  sub_1AD965F1C();
  swift_getTupleTypeMetadata3();
  sub_1AD9DF350();
  swift_getWitnessTable();
  sub_1AD9DF180();
  return swift_getWitnessTable();
}

uint64_t sub_1AD9674AC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1  = -INFINITY;
  }
  if (a4) {
    a3  = a1;
  }
  if (a6) {
    a5  = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7  = -INFINITY;
  }
  if (a11) {
    a10  = a7;
  }
  if (a13) {
    a12  = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_1AD9DFBD0();
    uint64_t v23 = (void *)sub_1AD9DE730();
    sub_1AD9DD500();
  }
  sub_1AD9DE040();
  long long v24 = v13[3];
  a9[2]  = v13[2];
  a9[3]  = v24;
  long long v25 = v13[4];
  long long v26 = v13[1];
  *a9  = *v13;
  a9[1]  = v26;
  a9[8]  = v31;
  a9[9]  = v32;
  a9[10]  = v33;
  a9[11]  = v34;
  a9[4]  = v25;
  a9[5]  = v28;
  a9[6]  = v29;
  a9[7]  = v30;
  return sub_1AD951A64((uint64_t)v13);
}

id sub_1AD967668()
{
  id result = objc_msgSend(self, sel_currentDevice);
  if (result)
  {
    uint64_t v1 = result;
    sub_1AD9D4024(MEMORY[0x1E4FBC860]);
    sub_1AD9DFE70();
    uint64_t v3 = v2;

    id result = (id)swift_bridgeObjectRelease();
    qword_1E9A4CF30  = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TwoWeekDiagram.results.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD96BDC0(v1, a1, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
}

uint64_t TwoWeekDiagram.init(results:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD9691C8(a1, a2, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
}

uint64_t TwoWeekDiagram.body.getter@<X0>(BOOL *a1@<X8>)
{
  *a1  = TwoWeekResults.hasData.getter();
  sub_1AD967D88();
  return sub_1AD967790(v1, (uint64_t)&a1[*(int *)(v3 + 52)]);
}

uint64_t sub_1AD967790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v3 = sub_1AD9DCD30();
  uint64_t v53 = *(void *)(v3 - 8);
  uint64_t v54 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v52 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v55 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TwoWeekResults();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v60 = (int **)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1AD96B8A0(0, &qword_1E9A4CF58, (uint64_t (*)(uint64_t))type metadata accessor for TwoWeekResults, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v20 = (char *)&v51 - v19;
  uint64_t v59 = type metadata accessor for TwoWeekChart(0);
  MEMORY[0x1F4188790](v59, v21);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24, v25);
  uint64_t v58 = (char *)&v51 - v26;
  MEMORY[0x1F4188790](v27, v28);
  uint64_t v57 = (uint64_t)&v51 - v29;
  if (qword_1E9A48F50 != -1) {
    swift_once();
  }
  id v30 = (id)qword_1E9A4C618;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  sub_1AD96BBC4(0, (unint64_t *)&qword_1E9A4A978, (unint64_t *)&qword_1E9A4BAE0);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16)  = xmmword_1AD9E3070;
  uint64_t v32 = MEMORY[0x1E4FBB5C8];
  *(void *)(v31 + 56)  = MEMORY[0x1E4FBB550];
  *(void *)(v31 + 64)  = v32;
  *(void *)(v31 + 32)  = 14;
  uint64_t v33 = sub_1AD9DF6E0();
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)a2  = swift_getKeyPath();
  *(unsigned char *)(a2 + 8)  = 0;
  *(void *)(a2 + 16)  = v33;
  *(void *)(a2 + 24)  = v35;
  sub_1AD96BDC0(v56, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  sub_1AD968244((uint64_t)v20, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    uint64_t v36 = (int *)*MEMORY[0x1E4F29990];
    uint64_t v37 = *(int **)(MEMORY[0x1E4F29990] + 8);
    uint64_t v39 = v52;
    uint64_t v38 = v53;
    uint64_t v40 = v54;
    (*(void (**)(char *, void, uint64_t))(v53 + 104))(v52, *MEMORY[0x1E4F27B20], v54);
    uint64_t v41 = (uint64_t)v55;
    sub_1AD9DCD40();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
    objc_msgSend(v42, sel_setAllowedUnits_, 96);
    objc_msgSend(v42, sel_setUnitsStyle_, 1);
    id v43 = _sSo23NSDateIntervalFormatterC13SleepHealthUIE15weeklyChartAxisABvgZ_0();
    uint64_t v44 = v60;
    TwoWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)(v36, v37, MEMORY[0x1E4FBC860], v41, (unint64_t)v42, (uint64_t)v43, v60);
    sub_1AD968F00((uint64_t)v16);
  }
  else
  {
    uint64_t v44 = v60;
    sub_1AD9691C8((uint64_t)v16, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
  }
  sub_1AD967E38();
  uint64_t v46 = a2 + *(int *)(v45 + 40);
  sub_1AD968F00((uint64_t)v20);
  sub_1AD9691C8((uint64_t)v44, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
  uint64_t v47 = (uint64_t)v58;
  v23[*(int *)(v59 + 20)]  = 0;
  sub_1AD9691C8((uint64_t)v23, v47, type metadata accessor for TwoWeekChart);
  uint64_t v48 = v47;
  uint64_t v49 = v57;
  sub_1AD9691C8(v48, v57, type metadata accessor for TwoWeekChart);
  return sub_1AD9691C8(v49, v46, type metadata accessor for TwoWeekChart);
}

void sub_1AD967D88()
{
  if (!qword_1E9A4CF38)
  {
    sub_1AD967E38();
    sub_1AD96BB24(&qword_1E9A4CF50, (void (*)(uint64_t))sub_1AD967E38);
    unint64_t v0 = type metadata accessor for OptionalContentGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CF38);
    }
  }
}

void sub_1AD967E38()
{
  if (!qword_1E9A4CF40)
  {
    type metadata accessor for TwoWeekChart(255);
    sub_1AD96BB24(&qword_1E9A4CF48, (void (*)(uint64_t))type metadata accessor for TwoWeekChart);
    unint64_t v0 = type metadata accessor for DiagramHeader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CF40);
    }
  }
}

uint64_t type metadata accessor for TwoWeekChart(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4CF70);
}

uint64_t TwoWeekChart.init(results:isLoading:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v29 = a2;
  uint64_t v5 = sub_1AD9DCD30();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1AD96B8A0(0, &qword_1E9A4CF58, (uint64_t (*)(uint64_t))type metadata accessor for TwoWeekResults, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = &v28[-v16];
  uint64_t v18 = type metadata accessor for TwoWeekResults();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18, v20);
  uint64_t v22 = (int **)&v28[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1AD968244(a1, (uint64_t)v17);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    uint64_t v23 = (int *)*MEMORY[0x1E4F29990];
    uint64_t v24 = *(int **)(MEMORY[0x1E4F29990] + 8);
    (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4F27B20], v5);
    sub_1AD9DCD40();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
    id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
    objc_msgSend(v25, sel_setAllowedUnits_, 96);
    objc_msgSend(v25, sel_setUnitsStyle_, 1);
    id v26 = _sSo23NSDateIntervalFormatterC13SleepHealthUIE15weeklyChartAxisABvgZ_0();
    TwoWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)(v23, v24, MEMORY[0x1E4FBC860], (uint64_t)v13, (unint64_t)v25, (uint64_t)v26, v22);
    sub_1AD968F00(a1);
    sub_1AD968F00((uint64_t)v17);
  }
  else
  {
    sub_1AD968F00(a1);
    sub_1AD9691C8((uint64_t)v17, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
  }
  sub_1AD9691C8((uint64_t)v22, a3, (uint64_t (*)(void))type metadata accessor for TwoWeekResults);
  uint64_t result = type metadata accessor for TwoWeekChart(0);
  *(unsigned char *)(a3 + *(int *)(result + 20))  = v29 & 1;
  return result;
}

uint64_t sub_1AD968244(uint64_t a1, uint64_t a2)
{
  sub_1AD96B8A0(0, &qword_1E9A4CF58, (uint64_t (*)(uint64_t))type metadata accessor for TwoWeekResults, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD9682D8@<X0>(BOOL *a1@<X8>)
{
  *a1  = TwoWeekResults.hasData.getter();
  sub_1AD967D88();
  return sub_1AD967790(v1, (uint64_t)&a1[*(int *)(v3 + 52)]);
}

double TwoWeekChart.body.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TwoWeekChart(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8, v6);
  BOOL v7 = TwoWeekResults.hasData.getter();
  sub_1AD96BDC0(v1, (uint64_t)&v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for TwoWeekChart);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  sub_1AD9691C8((uint64_t)&v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v9 + v8, type metadata accessor for TwoWeekChart);
  uint64_t v10 = sub_1AD968A90();
  if (qword_1E9A48F70 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1E9A4C9C8;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16)  = v10;
  v24[0]  = 0;
  sub_1AD9DF040();
  char v13 = v34[0];
  uint64_t v14 = *((void *)&v34[0] + 1);
  if (qword_1E9A48F88 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1E9A4C9E0;
  uint64_t v16 = qword_1E9A48F90;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  v24[0]  = v7;
  uint64_t v25 = v11;
  id v26 = sub_1AD969230;
  uint64_t v27 = v9;
  uint64_t v28 = sub_1AD9692D8;
  uint64_t v29 = v12;
  char v30 = v13;
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  uint64_t v33 = qword_1E9A4C9E8;
  swift_retain();
  sub_1AD9DF320();
  sub_1AD9674AC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v34, 0.0, 1, 0.0, 1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v17 = v42;
  a1[8]  = v41;
  a1[9]  = v17;
  long long v18 = v44;
  a1[10]  = v43;
  a1[11]  = v18;
  long long v19 = v38;
  a1[4]  = v37;
  a1[5]  = v19;
  long long v20 = v40;
  a1[6]  = v39;
  a1[7]  = v20;
  long long v21 = v34[1];
  *a1  = v34[0];
  a1[1]  = v21;
  double result = *(double *)&v35;
  long long v23 = v36;
  a1[2]  = v35;
  a1[3]  = v23;
  return result;
}

uint64_t sub_1AD968630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  sub_1AD96BCBC(0, &qword_1E9A4D000, (uint64_t (*)(uint64_t))sub_1AD96B80C, (uint64_t)&type metadata for SleepDataUnavailable, MEMORY[0x1E4F3D748]);
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v3, v5);
  BOOL v7 = (char *)&v37 - v6;
  uint64_t v8 = type metadata accessor for WeekDiagram(0);
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (char *)&v37 - v14;
  MEMORY[0x1F4188790](v16, v17);
  long long v19 = (char *)&v37 - v18;
  MEMORY[0x1F4188790](v20, v21);
  long long v23 = (char *)&v37 - v22;
  sub_1AD96B80C();
  uint64_t v25 = v24;
  MEMORY[0x1F4188790](v24, v26);
  uint64_t v28 = (char *)&v37 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (TwoWeekResults.hasData.getter())
  {
    long long v38 = v11;
    uint64_t v39 = v25;
    uint64_t v40 = v4;
    long long v41 = v7;
    uint64_t v29 = sub_1AD9DE2A0();
    if (qword_1E9A49040 != -1) {
      swift_once();
    }
    uint64_t v30 = qword_1E9A4CF30;
    *(void *)uint64_t v28 = v29;
    *((void *)v28 + 1)  = v30;
    v28[16]  = 0;
    sub_1AD96BD28();
    uint64_t v32 = (uint64_t)&v28[*(int *)(v31 + 44)];
    uint64_t v33 = type metadata accessor for TwoWeekResults();
    sub_1AD96BDC0(a1 + *(int *)(v33 + 36), (uint64_t)v23, type metadata accessor for WeekResults);
    *(void *)&v23[*(int *)(v8 + 20)]  = 4;
    sub_1AD96BDC0(a1 + *(int *)(v33 + 40), (uint64_t)v19, type metadata accessor for WeekResults);
    *(void *)&v19[*(int *)(v8 + 20)]  = 4;
    sub_1AD96BDC0((uint64_t)v23, (uint64_t)v15, type metadata accessor for WeekDiagram);
    uint64_t v34 = (uint64_t)v38;
    sub_1AD96BDC0((uint64_t)v19, (uint64_t)v38, type metadata accessor for WeekDiagram);
    sub_1AD96BDC0((uint64_t)v15, v32, type metadata accessor for WeekDiagram);
    sub_1AD96B904();
    sub_1AD96BDC0(v34, v32 + *(int *)(v35 + 48), type metadata accessor for WeekDiagram);
    sub_1AD96BE28((uint64_t)v19, type metadata accessor for WeekDiagram);
    sub_1AD96BE28((uint64_t)v23, type metadata accessor for WeekDiagram);
    sub_1AD96BE28(v34, type metadata accessor for WeekDiagram);
    sub_1AD96BE28((uint64_t)v15, type metadata accessor for WeekDiagram);
    sub_1AD96BDC0((uint64_t)v28, (uint64_t)v41, (uint64_t (*)(void))sub_1AD96B80C);
    swift_storeEnumTagMultiPayload();
    sub_1AD96BB24(&qword_1E9A4CFD0, (void (*)(uint64_t))sub_1AD96B80C);
    sub_1AD8583D0();
    sub_1AD9DE470();
    return sub_1AD96BE28((uint64_t)v28, (uint64_t (*)(void))sub_1AD96B80C);
  }
  else
  {
    unsigned char *v7 = *(unsigned char *)(a1 + *(int *)(type metadata accessor for TwoWeekChart(0) + 20));
    swift_storeEnumTagMultiPayload();
    sub_1AD96BB24(&qword_1E9A4CFD0, (void (*)(uint64_t))sub_1AD96B80C);
    sub_1AD8583D0();
    return sub_1AD9DE470();
  }
}

uint64_t sub_1AD968A90()
{
  sub_1AD96BB6C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1AD9E3070;
  if (qword_1E9A48F50 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1E9A4C618;
  uint64_t v3 = sub_1AD9DCA70();
  uint64_t v5 = v4;

  swift_bridgeObjectRelease();
  *(void *)(inited + 32)  = v3;
  *(void *)(inited + 40)  = v5;
  uint64_t v6 = type metadata accessor for TwoWeekResults();
  WeekResults.localizedAverageComparison(against:)(v0 + *(int *)(v6 + 40));
  if (!v8) {
    goto LABEL_8;
  }
  uint64_t v9 = v7;
  uint64_t v10 = v8;
  uint64_t inited = (uint64_t)sub_1AD99A70C((void *)1, 2, 1, (void *)inited);
  *(void *)(inited + 16)  = 2;
  *(void *)(inited + 48)  = v9;
  *(void *)(inited + 56)  = v10;
  id v11 = (id)qword_1E9A4C618;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  sub_1AD96BBC4(0, (unint64_t *)&qword_1E9A4A978, (unint64_t *)&qword_1E9A4BAE0);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x1E4FBB550];
  *(_OWORD *)(v12 + 16)  = xmmword_1AD9E3070;
  uint64_t v14 = MEMORY[0x1E4FBB5C8];
  *(void *)(v12 + 56)  = v13;
  *(void *)(v12 + 64)  = v14;
  *(void *)(v12 + 32)  = 7;
  uint64_t v15 = sub_1AD9DF6E0();
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v19 = *(void *)(inited + 16);
  unint64_t v18 = *(void *)(inited + 24);
  if (v19 >= v18 >> 1) {
    goto LABEL_13;
  }
  while (1)
  {
    *(void *)(inited + 16)  = v19 + 1;
    unint64_t v18 = inited + 16 * v19;
    *(void *)(v18 + 32)  = v15;
    *(void *)(v18 + 40)  = v17;
    if (v19 != 1) {
      break;
    }
    __break(1u);
LABEL_13:
    uint64_t inited = (uint64_t)sub_1AD99A70C((void *)(v18 > 1), v19 + 1, 1, (void *)inited);
  }
  if (!v19)
  {
    __break(1u);
LABEL_8:
    uint64_t inited = (uint64_t)sub_1AD99A70C((void *)1, 2, 1, (void *)inited);
    *(void *)(inited + 16)  = 2;
    *(void *)(inited + 48)  = 2957357;
    *(void *)(inited + 56)  = 0xE300000000000000;
    unint64_t v20 = *(void *)(inited + 24);
    if (v20 <= 5) {
      uint64_t inited = (uint64_t)sub_1AD99A70C((void *)(v20 > 1), 3, 1, (void *)inited);
    }
    *(void *)(inited + 16)  = 3;
    *(void *)(inited + 64)  = 2957357;
    *(void *)(inited + 72)  = 0xE300000000000000;
  }
  uint64_t v22 = *(void *)(inited + 32);
  uint64_t v21 = *(void *)(inited + 40);
  uint64_t v24 = *(void *)(inited + 48);
  uint64_t v23 = *(void *)(inited + 56);
  uint64_t v25 = *(void *)(inited + 72);
  uint64_t v33 = *(void *)(inited + 64);
  sub_1AD96BBC4(0, &qword_1E9A4CFE8, (unint64_t *)&qword_1E9A4CFF0);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16)  = xmmword_1AD9E53A0;
  sub_1AD96BC1C();
  uint64_t v28 = v27;
  *(void *)(v26 + 56)  = v27;
  *(void *)(v26 + 64)  = &off_1F0470828;
  uint64_t v29 = (void *)swift_allocObject();
  *(void *)(v26 + 32)  = v29;
  id v29[2] = v22;
  v29[3]  = v21;
  v29[4]  = 0xD000000000000033;
  v29[5]  = 0x80000001AD9F5CC0;
  *(void *)(v26 + 96)  = v28;
  *(void *)(v26 + 104)  = &off_1F0470828;
  uint64_t v30 = (void *)swift_allocObject();
  *(void *)(v26 + 72)  = v30;
  v30[2]  = v24;
  v30[3]  = v23;
  v30[4]  = 0xD000000000000030;
  v30[5]  = 0x80000001AD9F5D00;
  *(void *)(v26 + 136)  = v28;
  *(void *)(v26 + 144)  = &off_1F0470828;
  uint64_t v31 = (void *)swift_allocObject();
  *(void *)(v26 + 112)  = v31;
  v31[2]  = v33;
  v31[3]  = v25;
  v31[4]  = 0xD000000000000034;
  v31[5]  = 0x80000001AD9F5D40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_1AD968F00(uint64_t a1)
{
  sub_1AD96B8A0(0, &qword_1E9A4CF58, (uint64_t (*)(uint64_t))type metadata accessor for TwoWeekResults, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD968F8C()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TwoWeekChart(0) - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v4 = v2 + v3[6];
  uint64_t v5 = sub_1AD9DCE40();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v13(v4, v5);

  uint64_t v6 = v2 + v3[9];
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v8 = v6 + v7[6];
  uint64_t v9 = sub_1AD9DC7C0();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v13(v6 + v7[10], v5);

  uint64_t v11 = v2 + v3[10];
  swift_bridgeObjectRelease();
  v10(v11 + v7[6], v9);
  v13(v11 + v7[10], v5);

  return swift_deallocObject();
}

uint64_t sub_1AD9691C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD969230@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for TwoWeekChart(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_1AD968630(v4, a1);
}

uint64_t sub_1AD9692A0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AD9692D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD950510(*(void *)(v1 + 16), a1);
}

uint64_t sub_1AD9692E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD9692FC()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for TwoWeekDiagram(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for TwoWeekResults();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v53 = *a2;
    *a1  = *a2;
    a1  = (void *)(v53 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    *(_OWORD *)a1  = *(_OWORD *)a2;
    a1[2]  = a2[2];
    uint64_t v7 = *(int *)(v4 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v62 = sub_1AD9DCE40();
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16);
    swift_bridgeObjectRetain();
    v61(v8, v9, v62);
    uint64_t v10 = v6[7];
    uint64_t v57 = *(void **)((char *)a2 + v10);
    *(void *)((char *)a1 + v10)  = v57;
    uint64_t v11 = v6[8];
    uint64_t v58 = *(void **)((char *)a2 + v11);
    *(void *)((char *)a1 + v11)  = v58;
    uint64_t v12 = v6[9];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v16 = *(void *)((char *)a2 + v12);
    uint64_t v15 = *(void *)((char *)a2 + v12 + 8);
    *(void *)uint64_t v13 = v16;
    *((void *)v13 + 1)  = v15;
    v13[16]  = v14[16];
    uint64_t v17 = (int *)type metadata accessor for WeekResults(0);
    uint64_t v18 = v17[6];
    uint64_t v55 = &v14[v18];
    uint64_t v56 = &v13[v18];
    uint64_t v60 = sub_1AD9DC7C0();
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16);
    id v19 = v57;
    id v20 = v58;
    swift_bridgeObjectRetain();
    v59(v56, v55, v60);
    *(void *)&v13[v17[7]]  = *(void *)&v14[v17[7]];
    uint64_t v21 = v17[8];
    uint64_t v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    v22[8]  = v23[8];
    *(void *)uint64_t v22 = *(void *)v23;
    *(void *)&v13[v17[9]]  = *(void *)&v14[v17[9]];
    v61(&v13[v17[10]], &v14[v17[10]], v62);
    uint64_t v24 = v17[11];
    uint64_t v25 = *(void **)&v14[v24];
    *(void *)&v13[v24]  = v25;
    uint64_t v26 = v17[12];
    uint64_t v27 = *(void **)&v14[v26];
    *(void *)&v13[v26]  = v27;
    uint64_t v28 = v17[13];
    uint64_t v29 = *(void **)&v14[v28];
    *(void *)&v13[v28]  = v29;
    uint64_t v30 = v6[10];
    uint64_t v31 = (char *)a1 + v30;
    uint64_t v32 = (char *)a2 + v30;
    v31[16]  = *((unsigned char *)a2 + v30 + 16);
    uint64_t v34 = *(void *)((char *)a2 + v30);
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = v34;
    *((void *)v31 + 1)  = v33;
    uint64_t v35 = v17[6];
    long long v36 = &v31[v35];
    uint64_t v37 = &v32[v35];
    id v38 = v25;
    id v39 = v27;
    id v40 = v29;
    swift_bridgeObjectRetain();
    v59(v36, v37, v60);
    *(void *)&v31[v17[7]]  = *(void *)&v32[v17[7]];
    uint64_t v41 = v17[8];
    uint64_t v42 = &v31[v41];
    long long v43 = &v32[v41];
    v42[8]  = v43[8];
    *(void *)uint64_t v42 = *(void *)v43;
    *(void *)&v31[v17[9]]  = *(void *)&v32[v17[9]];
    v61(&v31[v17[10]], &v32[v17[10]], v62);
    uint64_t v44 = v17[11];
    uint64_t v45 = *(void **)&v32[v44];
    *(void *)&v31[v44]  = v45;
    uint64_t v46 = v17[12];
    uint64_t v47 = *(void **)&v32[v46];
    *(void *)&v31[v46]  = v47;
    uint64_t v48 = v17[13];
    uint64_t v49 = *(void **)&v32[v48];
    *(void *)&v31[v48]  = v49;
    id v50 = v45;
    id v51 = v47;
    id v52 = v49;
  }
  return a1;
}

uint64_t initializeWithCopy for TwoWeekDiagram(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  uint64_t v4 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v5 = v4[6];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v59 = sub_1AD9DCE40();
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
  swift_bridgeObjectRetain();
  v58(v6, v7, v59);
  uint64_t v8 = v4[7];
  uint64_t v9 = *(void **)(a2 + v8);
  *(void *)(a1 + v8)  = v9;
  uint64_t v10 = v4[8];
  uint64_t v11 = *(void **)(a2 + v10);
  *(void *)(a1 + v10)  = v11;
  uint64_t v12 = v4[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v16 = *(void *)(a2 + v12);
  uint64_t v15 = *(void *)(a2 + v12 + 8);
  *(void *)uint64_t v13 = v16;
  *(void *)(v13 + 8)  = v15;
  *(unsigned char *)(v13 + 16)  = *(unsigned char *)(v14 + 16);
  uint64_t v17 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v18 = v17[6];
  uint64_t v54 = v14 + v18;
  uint64_t v55 = v13 + v18;
  uint64_t v57 = sub_1AD9DC7C0();
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16);
  id v19 = v9;
  id v20 = v11;
  swift_bridgeObjectRetain();
  v56(v55, v54, v57);
  *(void *)(v13 + v17[7])  = *(void *)(v14 + v17[7]);
  uint64_t v21 = v17[8];
  uint64_t v22 = v13 + v21;
  uint64_t v23 = v14 + v21;
  *(unsigned char *)(v22 + 8)  = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)(v13 + v17[9])  = *(void *)(v14 + v17[9]);
  v58(v13 + v17[10], v14 + v17[10], v59);
  uint64_t v24 = v17[11];
  uint64_t v25 = *(void **)(v14 + v24);
  *(void *)(v13 + v24)  = v25;
  uint64_t v26 = v17[12];
  uint64_t v27 = *(void **)(v14 + v26);
  *(void *)(v13 + v26)  = v27;
  uint64_t v28 = v17[13];
  uint64_t v29 = *(void **)(v14 + v28);
  *(void *)(v13 + v28)  = v29;
  uint64_t v30 = v4[10];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(unsigned char *)(v31 + 16)  = *(unsigned char *)(a2 + v30 + 16);
  uint64_t v34 = *(void *)(a2 + v30);
  uint64_t v33 = *(void *)(v32 + 8);
  *(void *)uint64_t v31 = v34;
  *(void *)(v31 + 8)  = v33;
  uint64_t v35 = v17[6];
  uint64_t v36 = v31 + v35;
  uint64_t v37 = v32 + v35;
  id v38 = v25;
  id v39 = v27;
  id v40 = v29;
  swift_bridgeObjectRetain();
  v56(v36, v37, v57);
  *(void *)(v31 + v17[7])  = *(void *)(v32 + v17[7]);
  uint64_t v41 = v17[8];
  uint64_t v42 = v31 + v41;
  uint64_t v43 = v32 + v41;
  *(unsigned char *)(v42 + 8)  = *(unsigned char *)(v43 + 8);
  *(void *)uint64_t v42 = *(void *)v43;
  *(void *)(v31 + v17[9])  = *(void *)(v32 + v17[9]);
  v58(v31 + v17[10], v32 + v17[10], v59);
  uint64_t v44 = v17[11];
  uint64_t v45 = *(void **)(v32 + v44);
  *(void *)(v31 + v44)  = v45;
  uint64_t v46 = v17[12];
  uint64_t v47 = *(void **)(v32 + v46);
  *(void *)(v31 + v46)  = v47;
  uint64_t v48 = v17[13];
  uint64_t v49 = *(void **)(v32 + v48);
  *(void *)(v31 + v48)  = v49;
  id v50 = v45;
  id v51 = v47;
  id v52 = v49;
  return a1;
}

void *assignWithCopy for TwoWeekDiagram(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  a1[2]  = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v5 = v4[6];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v63 = sub_1AD9DCE40();
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 24);
  v64(v6, v7, v63);
  uint64_t v8 = v4[7];
  uint64_t v9 = *(void **)((char *)a2 + v8);
  uint64_t v10 = *(void **)((char *)a1 + v8);
  *(void *)((char *)a1 + v8)  = v9;
  id v11 = v9;

  uint64_t v12 = v4[8];
  uint64_t v13 = *(void **)((char *)a2 + v12);
  uint64_t v14 = *(void **)((char *)a1 + v12);
  *(void *)((char *)a1 + v12)  = v13;
  id v15 = v13;

  uint64_t v16 = v4[9];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)((char *)a1 + v16)  = *(void *)((char *)a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = *((void *)v18 + 1);
  v17[16]  = v18[16];
  *((void *)v17 + 1)  = v19;
  id v20 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v21 = v20[6];
  uint64_t v22 = &v17[v21];
  uint64_t v23 = &v18[v21];
  uint64_t v61 = sub_1AD9DC7C0();
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 24);
  v62(v22, v23, v61);
  *(void *)&v17[v20[7]]  = *(void *)&v18[v20[7]];
  uint64_t v24 = v20[8];
  uint64_t v25 = &v17[v24];
  uint64_t v26 = &v18[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8]  = v27;
  *(void *)&v17[v20[9]]  = *(void *)&v18[v20[9]];
  v64(&v17[v20[10]], &v18[v20[10]], v63);
  uint64_t v28 = v20[11];
  uint64_t v29 = *(void **)&v18[v28];
  uint64_t v30 = *(void **)&v17[v28];
  *(void *)&v17[v28]  = v29;
  id v31 = v29;

  uint64_t v32 = v20[12];
  uint64_t v33 = *(void **)&v18[v32];
  uint64_t v34 = *(void **)&v17[v32];
  *(void *)&v17[v32]  = v33;
  id v35 = v33;

  uint64_t v36 = v20[13];
  uint64_t v37 = *(void **)&v18[v36];
  id v38 = *(void **)&v17[v36];
  *(void *)&v17[v36]  = v37;
  id v39 = v37;

  uint64_t v40 = v4[10];
  uint64_t v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  *(void *)((char *)a1 + v40)  = *(void *)((char *)a2 + v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = *((void *)v42 + 1);
  v41[16]  = v42[16];
  *((void *)v41 + 1)  = v43;
  v62(&v41[v20[6]], &v42[v20[6]], v61);
  *(void *)&v41[v20[7]]  = *(void *)&v42[v20[7]];
  uint64_t v44 = v20[8];
  uint64_t v45 = &v41[v44];
  uint64_t v46 = &v42[v44];
  char v47 = v46[8];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8]  = v47;
  *(void *)&v41[v20[9]]  = *(void *)&v42[v20[9]];
  v64(&v41[v20[10]], &v42[v20[10]], v63);
  uint64_t v48 = v20[11];
  uint64_t v49 = *(void **)&v42[v48];
  id v50 = *(void **)&v41[v48];
  *(void *)&v41[v48]  = v49;
  id v51 = v49;

  uint64_t v52 = v20[12];
  uint64_t v53 = *(void **)&v42[v52];
  uint64_t v54 = *(void **)&v41[v52];
  *(void *)&v41[v52]  = v53;
  id v55 = v53;

  uint64_t v56 = v20[13];
  uint64_t v57 = *(void **)&v42[v56];
  uint64_t v58 = *(void **)&v41[v56];
  *(void *)&v41[v56]  = v57;
  id v59 = v57;

  return a1;
}

uint64_t initializeWithTake for TwoWeekDiagram(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  uint64_t v4 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v5 = v4[6];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v30 = sub_1AD9DCE40();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 32);
  v29(v6, v7, v30);
  *(void *)(a1 + v4[7])  = *(void *)(a2 + v4[7]);
  *(void *)(a1 + v4[8])  = *(void *)(a2 + v4[8]);
  uint64_t v8 = v4[9];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8 + 8);
  *(void *)uint64_t v9 = *(void *)(a2 + v8);
  *(void *)(v9 + 8)  = v11;
  *(unsigned char *)(v9 + 16)  = *(unsigned char *)(a2 + v8 + 16);
  uint64_t v12 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v13 = v12[6];
  uint64_t v14 = v9 + v13;
  uint64_t v15 = v10 + v13;
  uint64_t v27 = sub_1AD9DC7C0();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32);
  v28(v14, v15, v27);
  *(void *)(v9 + v12[7])  = *(void *)(v10 + v12[7]);
  uint64_t v16 = v12[8];
  uint64_t v17 = v9 + v16;
  uint64_t v18 = v10 + v16;
  *(unsigned char *)(v17 + 8)  = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v9 + v12[9])  = *(void *)(v10 + v12[9]);
  v29(v9 + v12[10], v10 + v12[10], v30);
  *(void *)(v9 + v12[11])  = *(void *)(v10 + v12[11]);
  *(void *)(v9 + v12[12])  = *(void *)(v10 + v12[12]);
  *(void *)(v9 + v12[13])  = *(void *)(v10 + v12[13]);
  uint64_t v19 = v4[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(unsigned char *)(v20 + 16)  = *(unsigned char *)(v21 + 16);
  uint64_t v22 = *(void *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(void *)(v20 + 8)  = v22;
  v28(a1 + v19 + v12[6], v21 + v12[6], v27);
  *(void *)(v20 + v12[7])  = *(void *)(v21 + v12[7]);
  uint64_t v23 = v12[8];
  uint64_t v24 = v20 + v23;
  uint64_t v25 = v21 + v23;
  *(unsigned char *)(v24 + 8)  = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  *(void *)(v20 + v12[9])  = *(void *)(v21 + v12[9]);
  v29(v20 + v12[10], v21 + v12[10], v30);
  *(void *)(v20 + v12[11])  = *(void *)(v21 + v12[11]);
  *(void *)(v20 + v12[12])  = *(void *)(v21 + v12[12]);
  *(void *)(v20 + v12[13])  = *(void *)(v21 + v12[13]);
  return a1;
}

uint64_t assignWithTake for TwoWeekDiagram(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v5 = v4[6];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v43 = sub_1AD9DCE40();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 40);
  v44(v6, v7, v43);
  uint64_t v8 = v4[7];
  uint64_t v9 = *(void **)(a1 + v8);
  *(void *)(a1 + v8)  = *(void *)(a2 + v8);

  uint64_t v10 = v4[8];
  uint64_t v11 = *(void **)(a1 + v10);
  *(void *)(a1 + v10)  = *(void *)(a2 + v10);

  uint64_t v12 = v4[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + v12)  = *(void *)(a2 + v12);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 8)  = *(void *)(v14 + 8);
  *(unsigned char *)(v13 + 16)  = *(unsigned char *)(v14 + 16);
  uint64_t v15 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v16 = v15[6];
  uint64_t v17 = v13 + v16;
  uint64_t v18 = v14 + v16;
  uint64_t v41 = sub_1AD9DC7C0();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 40);
  v42(v17, v18, v41);
  *(void *)(v13 + v15[7])  = *(void *)(v14 + v15[7]);
  uint64_t v19 = v15[8];
  uint64_t v20 = v13 + v19;
  uint64_t v21 = v14 + v19;
  *(unsigned char *)(v20 + 8)  = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(void *)(v13 + v15[9])  = *(void *)(v14 + v15[9]);
  v44(v13 + v15[10], v14 + v15[10], v43);
  uint64_t v22 = v15[11];
  uint64_t v23 = *(void **)(v13 + v22);
  *(void *)(v13 + v22)  = *(void *)(v14 + v22);

  uint64_t v24 = v15[12];
  uint64_t v25 = *(void **)(v13 + v24);
  *(void *)(v13 + v24)  = *(void *)(v14 + v24);

  uint64_t v26 = v15[13];
  uint64_t v27 = *(void **)(v13 + v26);
  *(void *)(v13 + v26)  = *(void *)(v14 + v26);

  uint64_t v28 = v4[10];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  *(void *)(a1 + v28)  = *(void *)v30;
  swift_bridgeObjectRelease();
  *(void *)(v29 + 8)  = *(void *)(v30 + 8);
  *(unsigned char *)(v29 + 16)  = *(unsigned char *)(v30 + 16);
  v42(v29 + v15[6], v30 + v15[6], v41);
  *(void *)(v29 + v15[7])  = *(void *)(v30 + v15[7]);
  uint64_t v31 = v15[8];
  uint64_t v32 = v29 + v31;
  uint64_t v33 = v30 + v31;
  *(unsigned char *)(v32 + 8)  = *(unsigned char *)(v33 + 8);
  *(void *)uint64_t v32 = *(void *)v33;
  *(void *)(v29 + v15[9])  = *(void *)(v30 + v15[9]);
  v44(v29 + v15[10], v30 + v15[10], v43);
  uint64_t v34 = v15[11];
  id v35 = *(void **)(v29 + v34);
  *(void *)(v29 + v34)  = *(void *)(v30 + v34);

  uint64_t v36 = v15[12];
  uint64_t v37 = *(void **)(v29 + v36);
  *(void *)(v29 + v36)  = *(void *)(v30 + v36);

  uint64_t v38 = v15[13];
  id v39 = *(void **)(v29 + v38);
  *(void *)(v29 + v38)  = *(void *)(v30 + v38);

  return a1;
}

uint64_t getEnumTagSinglePayload for TwoWeekDiagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD96A19C);
}

uint64_t sub_1AD96A19C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TwoWeekResults();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TwoWeekDiagram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD96A21C);
}

uint64_t sub_1AD96A21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TwoWeekResults();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TwoWeekDiagram(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4CF60);
}

uint64_t sub_1AD96A2AC()
{
  uint64_t result = type metadata accessor for TwoWeekResults();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TwoWeekChart(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v54 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v54 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1  = *(_OWORD *)a2;
    a1[2]  = a2[2];
    uint64_t v6 = (int *)type metadata accessor for TwoWeekResults();
    uint64_t v7 = v6[6];
    uint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v63 = sub_1AD9DCE40();
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16);
    swift_bridgeObjectRetain();
    v62(v8, v9, v63);
    uint64_t v10 = v6[7];
    uint64_t v11 = *(void **)((char *)a2 + v10);
    *(void *)((char *)v4 + v10)  = v11;
    uint64_t v12 = v6[8];
    uint64_t v58 = *(void **)((char *)a2 + v12);
    *(void *)((char *)v4 + v12)  = v58;
    uint64_t v13 = v6[9];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v17 = *(void *)((char *)a2 + v13);
    uint64_t v16 = *(void *)((char *)a2 + v13 + 8);
    *(void *)uint64_t v14 = v17;
    *((void *)v14 + 1)  = v16;
    v14[16]  = v15[16];
    uint64_t v18 = (int *)type metadata accessor for WeekResults(0);
    uint64_t v19 = v18[6];
    uint64_t v56 = &v15[v19];
    uint64_t v57 = &v14[v19];
    uint64_t v60 = sub_1AD9DC7C0();
    id v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16);
    id v20 = v11;
    id v21 = v58;
    swift_bridgeObjectRetain();
    v59(v57, v56, v60);
    *(void *)&v14[v18[7]]  = *(void *)&v15[v18[7]];
    uint64_t v22 = v18[8];
    uint64_t v23 = &v14[v22];
    uint64_t v24 = &v15[v22];
    v23[8]  = v24[8];
    *(void *)uint64_t v23 = *(void *)v24;
    *(void *)&v14[v18[9]]  = *(void *)&v15[v18[9]];
    v62(&v14[v18[10]], &v15[v18[10]], v63);
    uint64_t v25 = v18[11];
    uint64_t v26 = *(void **)&v15[v25];
    *(void *)&v14[v25]  = v26;
    uint64_t v27 = v18[12];
    uint64_t v28 = *(void **)&v15[v27];
    *(void *)&v14[v27]  = v28;
    uint64_t v29 = v18[13];
    uint64_t v30 = *(void **)&v15[v29];
    *(void *)&v14[v29]  = v30;
    uint64_t v31 = v6[10];
    uint64_t v32 = (char *)v4 + v31;
    uint64_t v33 = (char *)a2 + v31;
    v32[16]  = *((unsigned char *)a2 + v31 + 16);
    uint64_t v35 = *(void *)((char *)a2 + v31);
    uint64_t v34 = *(void *)((char *)a2 + v31 + 8);
    *(void *)uint64_t v32 = v35;
    *((void *)v32 + 1)  = v34;
    uint64_t v36 = v18[6];
    uint64_t v37 = &v32[v36];
    uint64_t v38 = &v33[v36];
    id v39 = v26;
    id v40 = v28;
    id v41 = v30;
    swift_bridgeObjectRetain();
    v59(v37, v38, v60);
    *(void *)&v32[v18[7]]  = *(void *)&v33[v18[7]];
    uint64_t v42 = v18[8];
    uint64_t v43 = &v32[v42];
    uint64_t v44 = &v33[v42];
    v43[8]  = v44[8];
    *(void *)uint64_t v43 = *(void *)v44;
    *(void *)&v32[v18[9]]  = *(void *)&v33[v18[9]];
    v62(&v32[v18[10]], &v33[v18[10]], v63);
    uint64_t v45 = v18[11];
    uint64_t v46 = *(void **)&v33[v45];
    *(void *)&v32[v45]  = v46;
    uint64_t v47 = v18[12];
    uint64_t v48 = *(void **)&v33[v47];
    *(void *)&v32[v47]  = v48;
    uint64_t v49 = v18[13];
    id v50 = *(void **)&v33[v49];
    *(void *)&v32[v49]  = v50;
    *((unsigned char *)v4 + *(int *)(a3 + 20))  = *((unsigned char *)a2 + *(int *)(a3 + 20));
    id v51 = v46;
    id v52 = v48;
    id v53 = v50;
  }
  return v4;
}

void _s13SleepHealthUI14TwoWeekDiagramVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v3 = a1 + v2[6];
  uint64_t v4 = sub_1AD9DCE40();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(v3, v4);

  uint64_t v5 = a1 + v2[9];
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v7 = v5 + v6[6];
  uint64_t v8 = sub_1AD9DC7C0();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v12(v5 + v6[10], v4);

  uint64_t v10 = a1 + v2[10];
  swift_bridgeObjectRelease();
  v9(v10 + v6[6], v8);
  v12(v10 + v6[10], v4);

  uint64_t v11 = *(void **)(v10 + v6[13]);
}

uint64_t initializeWithCopy for TwoWeekChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  uint64_t v5 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v6 = v5[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v60 = sub_1AD9DCE40();
  id v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16);
  swift_bridgeObjectRetain();
  v59(v7, v8, v60);
  uint64_t v9 = v5[7];
  uint64_t v10 = *(void **)(a2 + v9);
  *(void *)(a1 + v9)  = v10;
  uint64_t v11 = v5[8];
  uint64_t v12 = *(void **)(a2 + v11);
  *(void *)(a1 + v11)  = v12;
  uint64_t v13 = v5[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v17 = *(void *)(a2 + v13);
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  *(void *)uint64_t v14 = v17;
  *(void *)(v14 + 8)  = v16;
  *(unsigned char *)(v14 + 16)  = *(unsigned char *)(v15 + 16);
  uint64_t v18 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v19 = v18[6];
  uint64_t v54 = v15 + v19;
  uint64_t v55 = v14 + v19;
  uint64_t v57 = sub_1AD9DC7C0();
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16);
  id v20 = v10;
  id v21 = v12;
  swift_bridgeObjectRetain();
  v56(v55, v54, v57);
  *(void *)(v14 + v18[7])  = *(void *)(v15 + v18[7]);
  uint64_t v22 = v18[8];
  uint64_t v23 = v14 + v22;
  uint64_t v24 = v15 + v22;
  *(unsigned char *)(v23 + 8)  = *(unsigned char *)(v24 + 8);
  *(void *)uint64_t v23 = *(void *)v24;
  *(void *)(v14 + v18[9])  = *(void *)(v15 + v18[9]);
  v59(v14 + v18[10], v15 + v18[10], v60);
  uint64_t v25 = v18[11];
  uint64_t v26 = *(void **)(v15 + v25);
  *(void *)(v14 + v25)  = v26;
  uint64_t v27 = v18[12];
  uint64_t v28 = *(void **)(v15 + v27);
  *(void *)(v14 + v27)  = v28;
  uint64_t v29 = v18[13];
  uint64_t v30 = *(void **)(v15 + v29);
  *(void *)(v14 + v29)  = v30;
  uint64_t v31 = v5[10];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = (void *)(a2 + v31);
  *(unsigned char *)(v32 + 16)  = *(unsigned char *)(a2 + v31 + 16);
  uint64_t v34 = *(void *)(a2 + v31 + 8);
  *(void *)uint64_t v32 = *v33;
  *(void *)(v32 + 8)  = v34;
  uint64_t v35 = v18[6];
  uint64_t v36 = v32 + v35;
  uint64_t v37 = (char *)v33 + v35;
  id v38 = v26;
  id v39 = v28;
  id v40 = v30;
  swift_bridgeObjectRetain();
  v56(v36, (uint64_t)v37, v57);
  *(void *)(v32 + v18[7])  = *(void *)((char *)v33 + v18[7]);
  uint64_t v41 = v18[8];
  uint64_t v42 = v32 + v41;
  uint64_t v43 = (char *)v33 + v41;
  *(unsigned char *)(v42 + 8)  = v43[8];
  *(void *)uint64_t v42 = *(void *)v43;
  *(void *)(v32 + v18[9])  = *(void *)((char *)v33 + v18[9]);
  v59(v32 + v18[10], (uint64_t)v33 + v18[10], v60);
  uint64_t v44 = v18[11];
  uint64_t v45 = *(void **)((char *)v33 + v44);
  *(void *)(v32 + v44)  = v45;
  uint64_t v46 = v18[12];
  uint64_t v47 = *(void **)((char *)v33 + v46);
  *(void *)(v32 + v46)  = v47;
  uint64_t v48 = v18[13];
  uint64_t v49 = *(void **)((char *)v33 + v48);
  *(void *)(v32 + v48)  = v49;
  *(unsigned char *)(a1 + *(int *)(a3 + 20))  = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  id v50 = v45;
  id v51 = v47;
  id v52 = v49;
  return a1;
}

void *assignWithCopy for TwoWeekChart(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  a1[2]  = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v6 = v5[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v64 = sub_1AD9DCE40();
  uint64_t v66 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 24);
  v66(v7, v8, v64);
  uint64_t v9 = v5[7];
  uint64_t v10 = *(void **)((char *)a2 + v9);
  uint64_t v11 = *(void **)((char *)a1 + v9);
  *(void *)((char *)a1 + v9)  = v10;
  id v12 = v10;

  uint64_t v13 = v5[8];
  uint64_t v14 = *(void **)((char *)a2 + v13);
  uint64_t v15 = *(void **)((char *)a1 + v13);
  *(void *)((char *)a1 + v13)  = v14;
  id v16 = v14;

  uint64_t v17 = v5[9];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *(void *)((char *)a1 + v17)  = *(void *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = *((void *)v19 + 1);
  v18[16]  = v19[16];
  *((void *)v18 + 1)  = v20;
  id v21 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v22 = v21[6];
  uint64_t v23 = &v18[v22];
  uint64_t v24 = &v19[v22];
  uint64_t v62 = sub_1AD9DC7C0();
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 24);
  v63(v23, v24, v62);
  *(void *)&v18[v21[7]]  = *(void *)&v19[v21[7]];
  uint64_t v25 = v21[8];
  uint64_t v26 = &v18[v25];
  uint64_t v27 = &v19[v25];
  char v28 = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8]  = v28;
  *(void *)&v18[v21[9]]  = *(void *)&v19[v21[9]];
  v66(&v18[v21[10]], &v19[v21[10]], v64);
  uint64_t v29 = v21[11];
  uint64_t v30 = *(void **)&v19[v29];
  uint64_t v31 = *(void **)&v18[v29];
  *(void *)&v18[v29]  = v30;
  id v32 = v30;

  uint64_t v33 = v21[12];
  uint64_t v34 = *(void **)&v19[v33];
  uint64_t v35 = *(void **)&v18[v33];
  *(void *)&v18[v33]  = v34;
  id v36 = v34;

  uint64_t v37 = v21[13];
  id v38 = *(void **)&v19[v37];
  id v39 = *(void **)&v18[v37];
  *(void *)&v18[v37]  = v38;
  id v40 = v38;

  uint64_t v41 = v5[10];
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  *(void *)((char *)a1 + v41)  = *(void *)((char *)a2 + v41);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = *((void *)v43 + 1);
  v42[16]  = v43[16];
  *((void *)v42 + 1)  = v44;
  v63(&v42[v21[6]], &v43[v21[6]], v62);
  *(void *)&v42[v21[7]]  = *(void *)&v43[v21[7]];
  uint64_t v45 = v21[8];
  uint64_t v46 = &v42[v45];
  uint64_t v47 = &v43[v45];
  char v48 = v47[8];
  *(void *)uint64_t v46 = *(void *)v47;
  v46[8]  = v48;
  *(void *)&v42[v21[9]]  = *(void *)&v43[v21[9]];
  v66(&v42[v21[10]], &v43[v21[10]], v64);
  uint64_t v49 = v21[11];
  id v50 = *(void **)&v43[v49];
  id v51 = *(void **)&v42[v49];
  *(void *)&v42[v49]  = v50;
  id v52 = v50;

  uint64_t v53 = v21[12];
  uint64_t v54 = *(void **)&v43[v53];
  uint64_t v55 = *(void **)&v42[v53];
  *(void *)&v42[v53]  = v54;
  id v56 = v54;

  uint64_t v57 = v21[13];
  uint64_t v58 = *(void **)&v43[v57];
  id v59 = *(void **)&v42[v57];
  *(void *)&v42[v57]  = v58;
  id v60 = v58;

  *((unsigned char *)a1 + *(int *)(a3 + 20))  = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for TwoWeekChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  uint64_t v5 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v6 = v5[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v30 = sub_1AD9DCE40();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 32);
  v31(v7, v8, v30);
  *(void *)(a1 + v5[7])  = *(void *)(a2 + v5[7]);
  *(void *)(a1 + v5[8])  = *(void *)(a2 + v5[8]);
  uint64_t v9 = v5[9];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = *(void *)(a2 + v9 + 8);
  *(void *)uint64_t v10 = *(void *)(a2 + v9);
  *(void *)(v10 + 8)  = v12;
  *(unsigned char *)(v10 + 16)  = *(unsigned char *)(a2 + v9 + 16);
  uint64_t v13 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v14 = v13[6];
  uint64_t v15 = v10 + v14;
  uint64_t v16 = v11 + v14;
  uint64_t v28 = sub_1AD9DC7C0();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32);
  v29(v15, v16, v28);
  *(void *)(v10 + v13[7])  = *(void *)(v11 + v13[7]);
  uint64_t v17 = v13[8];
  uint64_t v18 = v10 + v17;
  uint64_t v19 = v11 + v17;
  *(unsigned char *)(v18 + 8)  = *(unsigned char *)(v19 + 8);
  *(void *)uint64_t v18 = *(void *)v19;
  *(void *)(v10 + v13[9])  = *(void *)(v11 + v13[9]);
  v31(v10 + v13[10], v11 + v13[10], v30);
  *(void *)(v10 + v13[11])  = *(void *)(v11 + v13[11]);
  *(void *)(v10 + v13[12])  = *(void *)(v11 + v13[12]);
  *(void *)(v10 + v13[13])  = *(void *)(v11 + v13[13]);
  uint64_t v20 = v5[10];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(unsigned char *)(v21 + 16)  = *(unsigned char *)(a2 + v20 + 16);
  uint64_t v23 = *(void *)(a2 + v20 + 8);
  *(void *)uint64_t v21 = *(void *)(a2 + v20);
  *(void *)(v21 + 8)  = v23;
  v29(a1 + v20 + v13[6], a2 + v20 + v13[6], v28);
  *(void *)(v21 + v13[7])  = *(void *)(v22 + v13[7]);
  uint64_t v24 = v13[8];
  uint64_t v25 = v21 + v24;
  uint64_t v26 = v22 + v24;
  *(unsigned char *)(v25 + 8)  = *(unsigned char *)(v26 + 8);
  *(void *)uint64_t v25 = *(void *)v26;
  *(void *)(v21 + v13[9])  = *(void *)(v22 + v13[9]);
  v31(v21 + v13[10], v22 + v13[10], v30);
  *(void *)(v21 + v13[11])  = *(void *)(v22 + v13[11]);
  *(void *)(v21 + v13[12])  = *(void *)(v22 + v13[12]);
  *(void *)(v21 + v13[13])  = *(void *)(v22 + v13[13]);
  *(unsigned char *)(a1 + *(int *)(a3 + 20))  = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TwoWeekChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for TwoWeekResults();
  uint64_t v6 = v5[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v44 = sub_1AD9DCE40();
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 40);
  v45(v7, v8, v44);
  uint64_t v9 = v5[7];
  uint64_t v10 = *(void **)(a1 + v9);
  *(void *)(a1 + v9)  = *(void *)(a2 + v9);

  uint64_t v11 = v5[8];
  uint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11)  = *(void *)(a2 + v11);

  uint64_t v13 = v5[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)(a1 + v13)  = *(void *)(a2 + v13);
  swift_bridgeObjectRelease();
  *(void *)(v14 + 8)  = *(void *)(v15 + 8);
  *(unsigned char *)(v14 + 16)  = *(unsigned char *)(v15 + 16);
  uint64_t v16 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v17 = v16[6];
  uint64_t v18 = v14 + v17;
  uint64_t v19 = v15 + v17;
  uint64_t v42 = sub_1AD9DC7C0();
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 40);
  v43(v18, v19, v42);
  *(void *)(v14 + v16[7])  = *(void *)(v15 + v16[7]);
  uint64_t v20 = v16[8];
  uint64_t v21 = v14 + v20;
  uint64_t v22 = v15 + v20;
  *(unsigned char *)(v21 + 8)  = *(unsigned char *)(v22 + 8);
  *(void *)uint64_t v21 = *(void *)v22;
  *(void *)(v14 + v16[9])  = *(void *)(v15 + v16[9]);
  v45(v14 + v16[10], v15 + v16[10], v44);
  uint64_t v23 = v16[11];
  uint64_t v24 = *(void **)(v14 + v23);
  *(void *)(v14 + v23)  = *(void *)(v15 + v23);

  uint64_t v25 = v16[12];
  uint64_t v26 = *(void **)(v14 + v25);
  *(void *)(v14 + v25)  = *(void *)(v15 + v25);

  uint64_t v27 = v16[13];
  uint64_t v28 = *(void **)(v14 + v27);
  *(void *)(v14 + v27)  = *(void *)(v15 + v27);

  uint64_t v29 = v5[10];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(void *)(a1 + v29)  = *(void *)(a2 + v29);
  swift_bridgeObjectRelease();
  *(void *)(v30 + 8)  = *(void *)(v31 + 8);
  *(unsigned char *)(v30 + 16)  = *(unsigned char *)(v31 + 16);
  v43(v30 + v16[6], v31 + v16[6], v42);
  *(void *)(v30 + v16[7])  = *(void *)(v31 + v16[7]);
  uint64_t v32 = v16[8];
  uint64_t v33 = v30 + v32;
  uint64_t v34 = v31 + v32;
  *(unsigned char *)(v33 + 8)  = *(unsigned char *)(v34 + 8);
  *(void *)uint64_t v33 = *(void *)v34;
  *(void *)(v30 + v16[9])  = *(void *)(v31 + v16[9]);
  v45(v30 + v16[10], v31 + v16[10], v44);
  uint64_t v35 = v16[11];
  id v36 = *(void **)(v30 + v35);
  *(void *)(v30 + v35)  = *(void *)(v31 + v35);

  uint64_t v37 = v16[12];
  id v38 = *(void **)(v30 + v37);
  *(void *)(v30 + v37)  = *(void *)(v31 + v37);

  uint64_t v39 = v16[13];
  id v40 = *(void **)(v30 + v39);
  *(void *)(v30 + v39)  = *(void *)(v31 + v39);

  *(unsigned char *)(a1 + *(int *)(a3 + 20))  = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for TwoWeekChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD96B3EC);
}

uint64_t sub_1AD96B3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TwoWeekResults();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for TwoWeekChart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD96B4D0);
}

uint64_t sub_1AD96B4D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TwoWeekResults();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20))  = a2 + 1;
  }
  return result;
}

uint64_t sub_1AD96B58C()
{
  uint64_t result = type metadata accessor for TwoWeekResults();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AD96B620()
{
  return sub_1AD96BB24(&qword_1E9A4CF80, (void (*)(uint64_t))sub_1AD967D88);
}

unint64_t sub_1AD96B66C()
{
  unint64_t result = qword_1E9A4CF88;
  if (!qword_1E9A4CF88)
  {
    sub_1AD96BCBC(255, &qword_1E9A4CF90, (uint64_t (*)(uint64_t))sub_1AD96B74C, MEMORY[0x1E4F3CE48], MEMORY[0x1E4F3CC10]);
    sub_1AD96BB24(&qword_1E9A4CFE0, (void (*)(uint64_t))sub_1AD96B74C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CF88);
  }
  return result;
}

void sub_1AD96B74C()
{
  if (!qword_1E9A4CF98)
  {
    sub_1AD96BCBC(255, &qword_1E9A4CFA0, (uint64_t (*)(uint64_t))sub_1AD96B80C, (uint64_t)&type metadata for SleepDataUnavailable, MEMORY[0x1E4F3D750]);
    sub_1AD96B9F0();
    sub_1AD96BAD0();
    unint64_t v0 = type metadata accessor for InfographicGrid();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CF98);
    }
  }
}

void sub_1AD96B80C()
{
  if (!qword_1E9A4CFA8)
  {
    sub_1AD96B8A0(255, &qword_1E9A4CFB0, (uint64_t (*)(uint64_t))sub_1AD96B904, MEMORY[0x1E4F3F108]);
    sub_1AD96B968();
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CFA8);
    }
  }
}

void sub_1AD96B8A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD96B904()
{
  if (!qword_1E9A4CFB8)
  {
    type metadata accessor for WeekDiagram(255);
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4CFB8);
    }
  }
}

unint64_t sub_1AD96B968()
{
  unint64_t result = qword_1E9A4CFC0;
  if (!qword_1E9A4CFC0)
  {
    sub_1AD96B8A0(255, &qword_1E9A4CFB0, (uint64_t (*)(uint64_t))sub_1AD96B904, MEMORY[0x1E4F3F108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CFC0);
  }
  return result;
}

unint64_t sub_1AD96B9F0()
{
  unint64_t result = qword_1E9A4CFC8;
  if (!qword_1E9A4CFC8)
  {
    sub_1AD96BCBC(255, &qword_1E9A4CFA0, (uint64_t (*)(uint64_t))sub_1AD96B80C, (uint64_t)&type metadata for SleepDataUnavailable, MEMORY[0x1E4F3D750]);
    sub_1AD96BB24(&qword_1E9A4CFD0, (void (*)(uint64_t))sub_1AD96B80C);
    sub_1AD8583D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CFC8);
  }
  return result;
}

unint64_t sub_1AD96BAD0()
{
  unint64_t result = qword_1E9A4CFD8;
  if (!qword_1E9A4CFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4CFD8);
  }
  return result;
}

uint64_t sub_1AD96BB24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD96BB6C()
{
  if (!qword_1EB725BD0)
  {
    unint64_t v0 = sub_1AD9E0290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725BD0);
    }
  }
}

void sub_1AD96BBC4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1AD843E70(255, a3);
    unint64_t v4 = sub_1AD9E0290();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD96BC1C()
{
  if (!qword_1E9A4CFF8)
  {
    unint64_t v0 = type metadata accessor for InfographicAccessibleTextWrapper();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4CFF8);
    }
  }
}

uint64_t sub_1AD96BC7C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1AD96BCBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_1AD96BD28()
{
  if (!qword_1E9A4D008)
  {
    sub_1AD96B8A0(255, &qword_1E9A4CFB0, (uint64_t (*)(uint64_t))sub_1AD96B904, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4D008);
    }
  }
}

uint64_t sub_1AD96BDC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD96BE28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL static SleepTimeDurationPickerViewModel.Context.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

BOOL static SleepTimeDurationPickerViewModel.Topic.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t SleepTimeDurationPickerViewModel.Topic.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t SleepTimeDurationPickerViewModel.Topic.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t SleepTimeDurationPickerViewModel.Context.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t SleepTimeDurationPickerViewModel.Context.hashValue.getter()
{
  return sub_1AD9E03E0();
}

unint64_t sub_1AD96BFA8()
{
  unint64_t result = qword_1E9A4D010;
  if (!qword_1E9A4D010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D010);
  }
  return result;
}

unint64_t sub_1AD96C000()
{
  unint64_t result = qword_1E9A4D018;
  if (!qword_1E9A4D018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D018);
  }
  return result;
}

uint64_t initializeWithCopy for SleepTimeDurationPickerViewModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40)  = v3;
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for SleepTimeDurationPickerViewModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8)  = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24)  = v4;
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40)  = v5;
  id v7 = v5;

  return a1;
}

uint64_t assignWithTake for SleepTimeDurationPickerViewModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);

  return a1;
}

ValueMetadata *type metadata accessor for SleepTimeDurationPickerViewModel()
{
  return &type metadata for SleepTimeDurationPickerViewModel;
}

ValueMetadata *type metadata accessor for SleepTimeDurationPickerViewModel.Topic()
{
  return &type metadata for SleepTimeDurationPickerViewModel.Topic;
}

unsigned char *_s13SleepHealthUI32SleepTimeDurationPickerViewModelV5TopicOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD96C274);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepTimeDurationPickerViewModel.Context()
{
  return &type metadata for SleepTimeDurationPickerViewModel.Context;
}

double CGFloat.rounded(_:toScale:)(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = sub_1AD9E02A0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = a2 * a3;
  double v17 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v12 == *MEMORY[0x1E4FBBEA0])
  {
    double v13 = round(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBE98])
  {
    double v13 = rint(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBEA8])
  {
    double v13 = ceil(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBEB0])
  {
    double v13 = floor(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBE88])
  {
    double v13 = trunc(v11);
  }
  else if (v12 == *MEMORY[0x1E4FBBE90])
  {
    double v13 = ceil(v11);
    double v14 = floor(v11);
    if (v11 < 0.0) {
      double v13 = v14;
    }
  }
  else
  {
    sub_1AD9DF970();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    double v13 = v17;
  }
  return v13 / a2;
}

double CGFloat.rounded(_:toScaleOf:)(uint64_t a1, id a2, double a3)
{
  objc_msgSend(a2, sel_displayScale);
  return CGFloat.rounded(_:toScale:)(a1, v5, a3);
}

double CGFloat.rounded(_:toScaleOf:)(uint64_t a1, void *a2, double a3)
{
  swift_getObjectType();
  return sub_1AD96C548(a1, a2, a3);
}

double sub_1AD96C548(uint64_t a1, id a2, double a3)
{
  id v5 = objc_msgSend(a2, sel_traitCollection);
  objc_msgSend(v5, sel_displayScale);
  double v7 = CGFloat.rounded(_:toScale:)(a1, v6, a3);

  return v7;
}

uint64_t Date.hkspDescription.getter()
{
  unint64_t v0 = (void *)sub_1AD9DCBB0();
  id v1 = objc_msgSend(v0, sel_hkspDescription);

  uint64_t v2 = sub_1AD9DF710();
  return v2;
}

uint64_t Date.dayIndex(inGregorian:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v22 = a1;
  uint64_t v3 = sub_1AD9DCE40();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  double v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1AD9DCC70();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  int v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1AD9DF4A0();
  uint64_t v14 = *(void *)(v13 - 8);
  double v16 = MEMORY[0x1F4188790](v13, v15);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v2, v8, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v22, v3);
  sub_1AD9DF480();
  uint64_t v19 = sub_1AD9DF490();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  return v19;
}

void static Date.noon(onDayIndex:gregorian:)(uint64_t a1)
{
  uint64_t v2 = self;
  uint64_t v3 = (void *)sub_1AD9DCDA0();
  id v4 = objc_msgSend(v2, sel_hk_noonWithDayIndex_calendar_, a1, v3);

  sub_1AD9DCC40();
}

uint64_t Date.hourMinuteComponents()()
{
  uint64_t v0 = sub_1AD9DCE40();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  id v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCE10();
  sub_1AD96CD44(0, &qword_1E9A4C140, MEMORY[0x1E4F27C88], MEMORY[0x1E4FBBE00]);
  uint64_t v5 = sub_1AD9DCE20();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16)  = xmmword_1AD9E3080;
  unint64_t v10 = v9 + v8;
  uint64_t v11 = *(void (**)(unint64_t, void, uint64_t))(v6 + 104);
  v11(v10, *MEMORY[0x1E4F27C10], v5);
  v11(v10 + v7, *MEMORY[0x1E4F27C48], v5);
  sub_1AD922F84(v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1AD9DCD80();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t static Date.iso8601(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1AD9DCC70();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD96CD44(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8, v8);
  unint64_t v10 = (char *)&v16 - v9;
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28D48]), sel_init);
  int v12 = (void *)sub_1AD9DF6D0();
  id v13 = objc_msgSend(v11, sel_dateFromString_, v12);

  if (v13)
  {
    sub_1AD9DCC40();

    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v10, v6, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v10, 0, 1, v2);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2);
    if (result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v10, v2);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v10, 1, 1, v2);
  }
  __break(1u);
  return result;
}

void sub_1AD96CD44(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s13ConfigurationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 384);
}

uint64_t _s13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  id v38 = v4;
  uint64_t v39 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 16)  = v39;
  *(void *)(a1 + 24)  = v5;
  id v40 = v5;
  uint64_t v41 = *(void **)(a2 + 32);
  uint64_t v42 = *(void **)(a2 + 40);
  *(void *)(a1 + 32)  = v41;
  *(void *)(a1 + 40)  = v42;
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72)  = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112)  = v6;
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144)  = v7;
  long long v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160)  = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176)  = v8;
  uint64_t v9 = *(void **)(a2 + 200);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(void *)(a1 + 200)  = v9;
  uint64_t v10 = *(void *)(a2 + 216);
  uint64_t v37 = *(void **)(a2 + 208);
  *(void *)(a1 + 208)  = v37;
  *(void *)(a1 + 216)  = v10;
  *(_DWORD *)(a1 + 224)  = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 232)  = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248)  = *(_OWORD *)(a2 + 248);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 264)  = *(void *)(a2 + 264);
  *(void *)(a1 + 272)  = v11;
  int v12 = *(void **)(a2 + 280);
  id v13 = *(void **)(a2 + 288);
  *(void *)(a1 + 280)  = v12;
  *(void *)(a1 + 288)  = v13;
  uint64_t v15 = *(void **)(a2 + 296);
  uint64_t v14 = *(void *)(a2 + 304);
  *(void *)(a1 + 296)  = v15;
  *(void *)(a1 + 304)  = v14;
  uint64_t v17 = *(void **)(a2 + 312);
  uint64_t v16 = *(void **)(a2 + 320);
  *(void *)(a1 + 312)  = v17;
  *(void *)(a1 + 320)  = v16;
  *(void *)(a1 + 328)  = *(void *)(a2 + 328);
  *(_OWORD *)(a1 + 336)  = *(_OWORD *)(a2 + 336);
  uint64_t v18 = *(void **)(a2 + 360);
  *(void *)(a1 + 352)  = *(void *)(a2 + 352);
  *(void *)(a1 + 360)  = v18;
  uint64_t v19 = *(void *)(a2 + 376);
  *(void *)(a1 + 368)  = *(void *)(a2 + 368);
  *(void *)(a1 + 376)  = v19;
  id v36 = *(void **)(a2 + 384);
  *(void *)(a1 + 384)  = v36;
  id v20 = v3;
  id v21 = v38;
  id v22 = v39;
  id v23 = v40;
  id v24 = v41;
  id v25 = v42;
  id v26 = v9;
  id v27 = v37;
  id v28 = v12;
  id v29 = v13;
  id v30 = v15;
  id v31 = v17;
  id v32 = v16;
  swift_bridgeObjectRetain();
  id v33 = v18;
  swift_bridgeObjectRetain();
  id v34 = v36;
  return a1;
}

uint64_t _s13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v6 = v4;

  long long v7 = *(void **)(a2 + 8);
  long long v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8)  = v7;
  id v9 = v7;

  uint64_t v10 = *(void **)(a2 + 16);
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16)  = v10;
  id v12 = v10;

  id v13 = *(void **)(a2 + 24);
  uint64_t v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24)  = v13;
  id v15 = v13;

  uint64_t v16 = *(void **)(a2 + 32);
  uint64_t v17 = *(void **)(a1 + 32);
  *(void *)(a1 + 32)  = v16;
  id v18 = v16;

  uint64_t v19 = *(void **)(a2 + 40);
  id v20 = *(void **)(a1 + 40);
  *(void *)(a1 + 40)  = v19;
  id v21 = v19;

  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = *(void *)(a2 + 120);
  *(void *)(a1 + 128)  = *(void *)(a2 + 128);
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  *(void *)(a1 + 152)  = *(void *)(a2 + 152);
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  *(void *)(a1 + 168)  = *(void *)(a2 + 168);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(void *)(a1 + 184)  = *(void *)(a2 + 184);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  id v22 = *(void **)(a2 + 200);
  id v23 = *(void **)(a1 + 200);
  *(void *)(a1 + 200)  = v22;
  id v24 = v22;

  id v25 = *(void **)(a2 + 208);
  id v26 = *(void **)(a1 + 208);
  *(void *)(a1 + 208)  = v25;
  id v27 = v25;

  *(void *)(a1 + 216)  = *(void *)(a2 + 216);
  *(_DWORD *)(a1 + 224)  = *(_DWORD *)(a2 + 224);
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  *(void *)(a1 + 240)  = *(void *)(a2 + 240);
  *(void *)(a1 + 248)  = *(void *)(a2 + 248);
  *(void *)(a1 + 256)  = *(void *)(a2 + 256);
  *(void *)(a1 + 264)  = *(void *)(a2 + 264);
  *(void *)(a1 + 272)  = *(void *)(a2 + 272);
  id v28 = *(void **)(a2 + 280);
  id v29 = *(void **)(a1 + 280);
  *(void *)(a1 + 280)  = v28;
  id v30 = v28;

  id v31 = *(void **)(a2 + 288);
  id v32 = *(void **)(a1 + 288);
  *(void *)(a1 + 288)  = v31;
  id v33 = v31;

  id v34 = *(void **)(a2 + 296);
  uint64_t v35 = *(void **)(a1 + 296);
  *(void *)(a1 + 296)  = v34;
  id v36 = v34;

  *(void *)(a1 + 304)  = *(void *)(a2 + 304);
  uint64_t v37 = *(void **)(a2 + 312);
  id v38 = *(void **)(a1 + 312);
  *(void *)(a1 + 312)  = v37;
  id v39 = v37;

  id v40 = *(void **)(a2 + 320);
  uint64_t v41 = *(void **)(a1 + 320);
  *(void *)(a1 + 320)  = v40;
  id v42 = v40;

  *(void *)(a1 + 328)  = *(void *)(a2 + 328);
  *(void *)(a1 + 336)  = *(void *)(a2 + 336);
  *(void *)(a1 + 344)  = *(void *)(a2 + 344);
  *(void *)(a1 + 352)  = *(void *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = *(void **)(a2 + 360);
  uint64_t v44 = *(void **)(a1 + 360);
  *(void *)(a1 + 360)  = v43;
  id v45 = v43;

  *(void *)(a1 + 368)  = *(void *)(a2 + 368);
  *(void *)(a1 + 376)  = *(void *)(a2 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void **)(a2 + 384);
  uint64_t v47 = *(void **)(a1 + 384);
  *(void *)(a1 + 384)  = v46;
  id v48 = v46;

  return a1;
}

void *__swift_memcpy392_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

uint64_t _s13ConfigurationVwta(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void **)a1;
  *(void *)a1  = *a2;

  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8)  = v2[1];

  id v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16)  = v2[2];

  long long v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24)  = v2[3];

  long long v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32)  = v2[4];

  id v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 40)  = v2[5];

  *(_OWORD *)(a1 + 48)  = *((_OWORD *)v2 + 3);
  *(_DWORD *)(a1 + 64)  = *((_DWORD *)v2 + 16);
  *(_OWORD *)(a1 + 72)  = *(_OWORD *)(v2 + 9);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(v2 + 11);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(v2 + 13);
  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(v2 + 15);
  *(_OWORD *)(a1 + 136)  = *(_OWORD *)(v2 + 17);
  *(_OWORD *)(a1 + 152)  = *(_OWORD *)(v2 + 19);
  *(_OWORD *)(a1 + 168)  = *(_OWORD *)(v2 + 21);
  *(_OWORD *)(a1 + 184)  = *(_OWORD *)(v2 + 23);
  uint64_t v10 = v2[25];
  v2 += 25;
  uint64_t v11 = *(void **)(a1 + 200);
  *(void *)(a1 + 200)  = v10;

  id v12 = *(void **)(a1 + 208);
  *(void *)(a1 + 208)  = v2[1];

  *(void *)(a1 + 216)  = v2[2];
  *(void *)(a1 + 232)  = v2[4];
  long long v13 = *((_OWORD *)v2 + 4);
  *(_OWORD *)(a1 + 248)  = *((_OWORD *)v2 + 3);
  *(_DWORD *)(a1 + 224)  = *((_DWORD *)v2 + 6);
  *(void *)(a1 + 240)  = v2[5];
  *(_OWORD *)(a1 + 264)  = v13;
  uint64_t v14 = *(void **)(a1 + 280);
  *(void *)(a1 + 280)  = v2[10];

  id v15 = *(void **)(a1 + 288);
  *(void *)(a1 + 288)  = v2[11];

  uint64_t v16 = *(void **)(a1 + 296);
  *(void *)(a1 + 296)  = v2[12];

  uint64_t v17 = v2[14];
  id v18 = *(void **)(a1 + 312);
  *(void *)(a1 + 304)  = v2[13];
  *(void *)(a1 + 312)  = v17;

  uint64_t v19 = *(void **)(a1 + 320);
  *(void *)(a1 + 320)  = v2[15];

  uint64_t v20 = v2[17];
  *(void *)(a1 + 328)  = v2[16];
  *(void *)(a1 + 336)  = v20;
  uint64_t v21 = v2[19];
  *(void *)(a1 + 344)  = v2[18];
  *(void *)(a1 + 352)  = v21;
  swift_bridgeObjectRelease();
  id v22 = *(void **)(a1 + 360);
  *(void *)(a1 + 360)  = v2[20];

  uint64_t v23 = v2[22];
  *(void *)(a1 + 368)  = v2[21];
  *(void *)(a1 + 376)  = v23;
  swift_bridgeObjectRelease();
  id v24 = *(void **)(a1 + 384);
  *(void *)(a1 + 384)  = v2[23];

  return a1;
}

uint64_t _s13ConfigurationVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 392)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t _s13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248)  = 0u;
    *(_OWORD *)(result + 232)  = 0u;
    *(_OWORD *)(result + 216)  = 0u;
    *(_OWORD *)(result + 200)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 360)  = 0u;
    *(_OWORD *)(result + 344)  = 0u;
    *(_OWORD *)(result + 328)  = 0u;
    *(_OWORD *)(result + 312)  = 0u;
    *(_OWORD *)(result + 296)  = 0u;
    *(_OWORD *)(result + 280)  = 0u;
    *(_OWORD *)(result + 264)  = 0u;
    *(_OWORD *)(result + 376)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 392)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 392)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s13ConfigurationVMa()
{
  return &_s13ConfigurationVN;
}

uint64_t sub_1AD96D544(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  BOOL v7 = result == a3 && a2 == a4;
  uint64_t v8 = *(void *)(v5 + 184);
  if (!v8)
  {
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v9 = result;
  if (a3 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_45;
  }
  if (!(a3 % v8))
  {
    if (!v7) {
      goto LABEL_33;
    }
LABEL_17:
    if (result != 0x8000000000000000)
    {
      if (result % v8)
      {
        if (result == a3) {
          return 0;
        }
        goto LABEL_37;
      }
LABEL_35:
      uint64_t result = 0;
      if (v9 == a3 || !a2) {
        return result;
      }
      goto LABEL_37;
    }
    goto LABEL_18;
  }
  if (v7) {
    goto LABEL_17;
  }
  if (result == 0x8000000000000000)
  {
LABEL_18:
    uint64_t result = 0;
LABEL_19:
    if (v8 != -1)
    {
      while (1)
      {
        if (v9 % v8)
        {
          if (v9 == a3) {
            return result;
          }
        }
        else if (v9 == a3 || !a2)
        {
          return result;
        }
        if (a3 > v9) {
          uint64_t v9 = a3;
        }
        if (v9 != 0x8000000000000000 || v8 != -1) {
          goto LABEL_39;
        }
        __break(1u);
LABEL_33:
        uint64_t result = a4 == 0;
        if (v9 == 0x8000000000000000) {
          goto LABEL_19;
        }
      }
    }
LABEL_46:
    __break(1u);
    return result;
  }
  if (!(result % v8)) {
    goto LABEL_35;
  }
  if (result == a3) {
    return 0;
  }
LABEL_37:
  uint64_t result = 0;
  if (a3 > v9) {
    uint64_t v9 = a3;
  }
LABEL_39:
  if (!(v9 % v8))
  {
    if (*(double *)(v5 + 168) < fabs(a5)) {
      return 1;
    }
    else {
      return result;
    }
  }
  return result;
}

void *sub_1AD96D684()
{
  sub_1AD96DAF0((uint64_t)__src);
  return memcpy(&unk_1E9A5A780, __src, 0x188uLL);
}

void *sub_1AD96D6C4()
{
  sub_1AD96D704(__src);
  return memcpy(&unk_1E9A5A908, __src, 0x188uLL);
}

void *sub_1AD96D704@<X0>(void *a1@<X8>)
{
  if (qword_1E9A49048 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_1E9A5A780, sizeof(__dst));
  uint64_t v2 = (void *)__dst[0];
  uint64_t v1 = (void *)__dst[1];
  uint64_t v3 = (void *)__dst[2];
  uint64_t v4 = (void *)__dst[3];
  uint64_t v5 = (void *)__dst[4];
  uint64_t v55 = (void *)__dst[5];
  uint64_t v7 = __dst[6];
  uint64_t v6 = __dst[7];
  int v8 = __dst[8];
  long long v41 = *(_OWORD *)&__dst[19];
  long long v42 = *(_OWORD *)&__dst[17];
  uint64_t v9 = __dst[15];
  uint64_t v10 = __dst[21];
  uint64_t v11 = __dst[22];
  id v12 = (void *)__dst[25];
  uint64_t v39 = __dst[24];
  uint64_t v40 = __dst[23];
  id v29 = (void *)__dst[26];
  int v47 = __dst[28];
  uint64_t v46 = __dst[29];
  uint64_t v13 = __dst[31];
  uint64_t v14 = __dst[32];
  uint64_t v44 = __dst[33];
  uint64_t v45 = __dst[30];
  uint64_t v43 = __dst[34];
  id v15 = (void *)__dst[39];
  uint64_t v16 = (void *)__dst[40];
  uint64_t v50 = __dst[42];
  uint64_t v17 = __dst[44];
  uint64_t v48 = __dst[46];
  uint64_t v49 = __dst[43];
  uint64_t v31 = __dst[47];
  id v32 = (void *)__dst[45];
  uint64_t v37 = (void *)__dst[37];
  uint64_t v38 = __dst[38];
  uint64_t v35 = (void *)__dst[36];
  id v26 = (void *)__dst[48];
  id v28 = (void *)__dst[35];
  id v25 = (void *)*MEMORY[0x1E4FB28F0];
  sub_1AD897340((uint64_t)__dst);
  id v36 = v2;
  id v18 = v1;
  id v52 = v3;
  id v53 = v4;
  id v54 = v5;
  id v56 = v55;
  id v34 = v12;
  id v30 = v29;
  id v19 = v15;
  id v20 = v16;
  swift_bridgeObjectRetain();
  id v33 = v32;
  swift_bridgeObjectRetain();
  id v27 = v26;
  id v21 = v25;

  id v22 = v21;
  id v23 = (id)*MEMORY[0x1E4FB28D8];

  __src[0]  = v36;
  __src[1]  = v18;
  __src[2]  = v52;
  __src[3]  = v53;
  __src[4]  = v54;
  __src[5]  = v56;
  __src[6]  = v7;
  __src[7]  = v6;
  LODWORD(__src[8])  = v8;
  *(_OWORD *)&__src[9]  = xmmword_1AD9EC480;
  *(_OWORD *)&__src[11]  = xmmword_1AD9EC490;
  *(_OWORD *)&__src[13]  = xmmword_1AD9EC4A0;
  __src[15]  = v9;
  __src[16]  = 0x4026000000000000;
  *(_OWORD *)&__src[17]  = v42;
  *(_OWORD *)&__src[19]  = v41;
  __src[21]  = v10;
  __src[22]  = v11;
  __src[23]  = v40;
  __src[24]  = v39;
  __src[25]  = v34;
  __src[26]  = v30;
  __src[27]  = 0x4057C00000000000;
  LODWORD(__src[28])  = v47;
  __src[29]  = v46;
  __src[30]  = v45;
  __src[31]  = v13;
  __src[32]  = v14;
  __src[33]  = v44;
  __src[34]  = v43;
  __src[35]  = v22;
  __src[36]  = v22;
  __src[37]  = v23;
  __src[38]  = v38;
  __src[39]  = v19;
  __src[40]  = v20;
  __src[41]  = 0x4053000000000000;
  __src[42]  = v50;
  __src[43]  = v49;
  __src[44]  = v17;
  __src[45]  = v33;
  __src[46]  = v48;
  __src[47]  = v31;
  __src[48]  = v27;
  sub_1AD897340((uint64_t)__src);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1AD89742C((uint64_t)__src);
  return memcpy(a1, __src, 0x188uLL);
}

void sub_1AD96DAF0(uint64_t a1@<X8>)
{
  sub_1AD8B139C();
  id v2 = static UIColor.ringGoalMetColor.getter();
  uint64_t v3 = self;
  id v4 = objc_msgSend(v3, sel_systemOrangeColor);
  id v5 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  *(void *)&long long v24 = sub_1AD8F05AC;
  *((void *)&v24 + 1)  = 0;
  *(void *)&long long v22 = MEMORY[0x1E4F143A8];
  *((void *)&v22 + 1)  = 1107296256;
  *(void *)&long long v23 = sub_1AD8F0900;
  *((void *)&v23 + 1)  = &block_descriptor_30;
  uint64_t v6 = _Block_copy(&v22);
  id v7 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  id v8 = objc_msgSend(v3, sel_systemGray6Color);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v9 = (id)qword_1EB727930;
  uint64_t v10 = (void *)sub_1AD9DF6D0();
  id v11 = objc_msgSend(v3, sel_colorNamed_inBundle_compatibleWithTraitCollection_, v10, v9, 0);

  if (v11)
  {
    id v12 = objc_msgSend(v3, sel_blackColor);
    if (qword_1E9A48E70 != -1) {
      swift_once();
    }
    uint64_t v13 = qword_1E9A4A800;
    if (qword_1E9A48E78 != -1) {
      swift_once();
    }
    uint64_t v14 = qword_1E9A4A808;
    if (qword_1E9A48E80 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_1E9A4A810;
    sub_1AD916C90((uint64_t)&v22);
    *(void *)a1  = v2;
    *(void *)(a1 + 8)  = v4;
    *(void *)(a1 + 16)  = v7;
    *(void *)(a1 + 24)  = v8;
    *(void *)(a1 + 32)  = v11;
    *(void *)(a1 + 40)  = v12;
    *(void *)(a1 + 48)  = 0;
    *(void *)(a1 + 56)  = 0;
    *(_DWORD *)(a1 + 64)  = 1039516303;
    *(_OWORD *)(a1 + 72)  = xmmword_1AD9EC4B0;
    *(_OWORD *)(a1 + 88)  = xmmword_1AD9EC4C0;
    *(_OWORD *)(a1 + 104)  = xmmword_1AD9EC4D0;
    *(_OWORD *)(a1 + 120)  = xmmword_1AD9EC4E0;
    *(void *)(a1 + 136)  = 0;
    *(void *)(a1 + 144)  = v13;
    *(void *)(a1 + 152)  = v14;
    *(void *)(a1 + 160)  = v15;
    *(_OWORD *)(a1 + 168)  = xmmword_1AD9EC4F0;
    *(_OWORD *)(a1 + 184)  = xmmword_1AD9EC500;
    long long v16 = v24;
    *(_OWORD *)(a1 + 248)  = v25;
    *(_OWORD *)(a1 + 232)  = v16;
    long long v17 = v22;
    *(_OWORD *)(a1 + 216)  = v23;
    *(_OWORD *)(a1 + 200)  = v17;
    long long v18 = v29;
    *(_OWORD *)(a1 + 296)  = v28;
    *(_OWORD *)(a1 + 312)  = v18;
    long long v19 = v27;
    *(_OWORD *)(a1 + 264)  = v26;
    *(_OWORD *)(a1 + 280)  = v19;
    long long v20 = v33;
    *(_OWORD *)(a1 + 360)  = v32;
    *(_OWORD *)(a1 + 376)  = v20;
    long long v21 = v31;
    *(_OWORD *)(a1 + 328)  = v30;
    *(_OWORD *)(a1 + 344)  = v21;
  }
  else
  {
    __break(1u);
  }
}

id sub_1AD96DE48()
{
  return sub_1AD96DE88(0x6C6553726F6A616DLL, 26453, (uint64_t)&unk_1F0469CB0);
}

id sub_1AD96DE68()
{
  return sub_1AD96DE88(0x6C6553726F6E696DLL, 29525, (uint64_t)&unk_1F0469CE8);
}

id sub_1AD96DE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_msgSend(self, sel_defaultConfiguration);
  type metadata accessor for SleepScheduleClock();
  sub_1AD96E0E0();
  uint64_t v6 = sub_1AD9E02F0();
  id v7 = (void *)sub_1AD9DF6D0();
  id v8 = objc_msgSend(v5, sel_tweakedConfigurationForCaller_usage_, v6, v7);

  swift_unknownObjectRelease();
  sub_1AD96E11C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1AD9E53A0;
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  sub_1AD9DFFE0();
  *(void *)(inited + 96)  = v10;
  *(void *)(inited + 72)  = 0x6D6F74737563;
  *(void *)(inited + 80)  = 0xE600000000000000;
  sub_1AD9DFFE0();
  *(void *)(inited + 168)  = MEMORY[0x1E4FBB550];
  *(void *)(inited + 144)  = a2;
  sub_1AD9DFFE0();
  unint64_t v11 = sub_1AD863DE8(a3);
  sub_1AD96E1E0();
  *(void *)(inited + 240)  = v12;
  *(void *)(inited + 216)  = v11;
  sub_1AD863F18(inited);
  uint64_t v13 = (void *)sub_1AD9DF5F0();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(self, sel_feedbackWithDictionaryRepresentation_, v13);

  objc_msgSend(v8, sel_setFeedback_, v14);
  return v8;
}

unint64_t sub_1AD96E0E0()
{
  unint64_t result = qword_1E9A4D020;
  if (!qword_1E9A4D020)
  {
    type metadata accessor for SleepScheduleClock();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4D020);
  }
  return result;
}

void sub_1AD96E11C()
{
  if (!qword_1E9A4D028)
  {
    sub_1AD96E174();
    unint64_t v0 = sub_1AD9E0290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4D028);
    }
  }
}

void sub_1AD96E174()
{
  if (!qword_1E9A49DD0)
  {
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A49DD0);
    }
  }
}

void sub_1AD96E1E0()
{
  if (!qword_1E9A4D030)
  {
    unint64_t v0 = sub_1AD9DF610();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4D030);
    }
  }
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

double CGRect.center.getter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.CGFloat x = a1;
  v10.origin.CGFloat y = a2;
  v10.size.CGFloat width = a3;
  v10.size.CGFloat height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

float64x2_t CGRect.center.setter(float64x2_t a1, float64_t a2)
{
  __asm { FMOV            V3.2D, #-0.5 }
  a1.f64[1]  = a2;
  float64x2_t result = vaddq_f64(a1, vmulq_f64(v2[1], _Q3));
  *uint64_t v2 = result;
  return result;
}

float64x2_t (*CGRect.center.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16)  = v1;
  CGFloat v3 = *v1;
  CGFloat v4 = v1[1];
  CGFloat v5 = v1[2];
  CGFloat v6 = v1[3];
  v10.origin.CGFloat x = *v1;
  v10.origin.CGFloat y = v4;
  v10.size.CGFloat width = v5;
  v10.size.CGFloat height = v6;
  CGFloat MidX = CGRectGetMidX(v10);
  v11.origin.CGFloat x = v3;
  v11.origin.CGFloat y = v4;
  v11.size.CGFloat width = v5;
  v11.size.CGFloat height = v6;
  CGFloat MidY = CGRectGetMidY(v11);
  *(CGFloat *)a1  = MidX;
  *(CGFloat *)(a1 + 8)  = MidY;
  return sub_1AD96E36C;
}

float64x2_t sub_1AD96E36C(uint64_t a1)
{
  uint64_t v1 = *(float64x2_t **)(a1 + 16);
  __asm { FMOV            V2.2D, #-0.5 }
  float64x2_t result = vaddq_f64(*(float64x2_t *)a1, vmulq_f64(v1[1], _Q2));
  *uint64_t v1 = result;
  return result;
}

void sub_1AD96E38C(CGFloat *a1@<X0>, CGFloat *a2@<X8>)
{
  CGFloat v3 = *a1;
  CGFloat v4 = a1[1];
  CGFloat v5 = a1[2];
  CGFloat v6 = a1[3];
  v9.origin.CGFloat x = *a1;
  v9.origin.CGFloat y = v4;
  v9.size.CGFloat width = v5;
  v9.size.CGFloat height = v6;
  CGFloat MidX = CGRectGetMidX(v9);
  v10.origin.CGFloat x = v3;
  v10.origin.CGFloat y = v4;
  v10.size.CGFloat width = v5;
  v10.size.CGFloat height = v6;
  CGFloat MidY = CGRectGetMidY(v10);
  *a2  = MidX;
  a2[1]  = MidY;
}

float64x2_t sub_1AD96E3FC(float64x2_t *a1, float64x2_t *a2)
{
  __asm { FMOV            V2.2D, #-0.5 }
  float64x2_t result = vaddq_f64(*a1, vmulq_f64(a2[1], _Q2));
  *a2  = result;
  return result;
}

BOOL WeekResults.hasData.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (!v2) {
    return 0;
  }
  if (v2 == 1)
  {
    uint64_t v3 = 0;
    double v4 = 0.0;
  }
  else
  {
    uint64_t v3 = v2 & 0x7FFFFFFFFFFFFFFELL;
    CGFloat v6 = (double *)(v1 + 72);
    double v4 = 0.0;
    uint64_t v7 = v2 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      double v8 = *(v6 - 4);
      double v9 = *v6;
      v6 += 8;
      double v4 = v4 + v8 + v9;
      v7 -= 2;
    }
    while (v7);
    if (v2 == v3) {
      return v4 > 0.0;
    }
  }
  uint64_t v10 = v2 - v3;
  CGRect v11 = (double *)(v1 + 32 * v3 + 40);
  do
  {
    double v12 = *v11;
    v11 += 4;
    double v4 = v4 + v12;
    --v10;
  }
  while (v10);
  return v4 > 0.0;
}

uint64_t DayDuration.goalMet.getter()
{
  return (*(double *)(v0 + 16) - *MEMORY[0x1E4FA5578] <= *(double *)(v0 + 8)) & ~*(unsigned __int8 *)(v0 + 24);
}

uint64_t WeekResults.canCompareAverage(against:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for WeekResults(0);
  MEMORY[0x1F4188790](v3 - 8, v4);
  CGFloat v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *(unsigned char *)(v1 + 16);
  sub_1AD864584(a1, (uint64_t)v6);
  if (v7) {
    char v8 = 0;
  }
  else {
    char v8 = v6[16] ^ 1;
  }
  sub_1AD96E580((uint64_t)v6);
  return v8 & 1;
}

uint64_t type metadata accessor for WeekResults(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4D038);
}

uint64_t sub_1AD96E580(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WeekResults(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void WeekResults.localizedAverageComparison(against:)(uint64_t a1)
{
  if ((*(unsigned char *)(v1 + 16) & 1) == 0 && (*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    sub_1AD9DF710();
    uint64_t v2 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    id v3 = objc_msgSend(self, sel_bundleWithIdentifier_, v2);

    if (v3)
    {
      sub_1AD9DCA70();
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t WeekResults.days.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t WeekResults.average.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t WeekResults.dates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WeekResults(0) + 24);
  uint64_t v4 = sub_1AD9DC7C0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

double WeekResults.max.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 28));
}

uint64_t WeekResults.mostRecentSleepDurationGoal.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 32));
}

double WeekResults.axisSpacing.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 36));
}

uint64_t WeekResults.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WeekResults(0) + 40);
  uint64_t v4 = sub_1AD9DCE40();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id WeekResults.xAxisIntervalFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 44));
  return v1;
}

id WeekResults.yAxisFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 48));
  return v1;
}

id WeekResults.averageDurationFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 52));
  return v1;
}

uint64_t sub_1AD96E964@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  char v8 = *((unsigned char *)a1 + 24);
  uint64_t v9 = type metadata accessor for WeekResults(0);
  uint64_t v10 = *(void *)(a2 + *(int *)(v9 + 28));
  uint64_t v11 = a2 + *(int *)(v9 + 40);
  uint64_t v12 = a3 + *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  uint64_t v13 = sub_1AD9DCE40();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, v11, v13);
  *(void *)a3  = v5;
  *(void *)(a3 + 8)  = v6;
  *(void *)(a3 + 16)  = v7;
  *(unsigned char *)(a3 + 24)  = v8;
  *(void *)(a3 + 32)  = v10;
  return result;
}

uint64_t DayDuration.dayIndex.getter()
{
  return *(void *)v0;
}

double DayDuration.duration.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t DayDuration.goal.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t DayDuration.id.getter()
{
  return *(void *)v0;
}

uint64_t initializeBufferWithCopyOfBuffer for WeekResults(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1  = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(void *)(a1 + 8)  = a2[1];
    *(unsigned char *)(a1 + 16)  = *((unsigned char *)a2 + 16);
    uint64_t v8 = a3[6];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = sub_1AD9DC7C0();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[8];
    *(void *)(v7 + a3[7])  = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v14 = v7 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    *(void *)uint64_t v14 = *(void *)v15;
    *(unsigned char *)(v14 + 8)  = *(unsigned char *)(v15 + 8);
    uint64_t v16 = a3[10];
    *(void *)(v7 + a3[9])  = *(uint64_t *)((char *)a2 + a3[9]);
    uint64_t v17 = v7 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    uint64_t v19 = sub_1AD9DCE40();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = a3[11];
    uint64_t v21 = a3[12];
    long long v22 = *(void **)((char *)a2 + v20);
    *(void *)(v7 + v20)  = v22;
    long long v23 = *(void **)((char *)a2 + v21);
    *(void *)(v7 + v21)  = v23;
    uint64_t v24 = a3[13];
    long long v25 = *(void **)((char *)a2 + v24);
    *(void *)(v7 + v24)  = v25;
    id v26 = v22;
    id v27 = v23;
    id v28 = v25;
  }
  return v7;
}

void destroy for WeekResults(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[10];
  uint64_t v7 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  uint64_t v8 = *(void **)(a1 + a2[13]);
}

uint64_t initializeWithCopy for WeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v6;
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DC7C0();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8)  = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[10];
  *(void *)(a1 + a3[9])  = *(void *)(a2 + a3[9]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = a3[11];
  uint64_t v20 = a3[12];
  uint64_t v21 = *(void **)(a2 + v19);
  *(void *)(a1 + v19)  = v21;
  long long v22 = *(void **)(a2 + v20);
  *(void *)(a1 + v20)  = v22;
  uint64_t v23 = a3[13];
  uint64_t v24 = *(void **)(a2 + v23);
  *(void *)(a1 + v23)  = v24;
  id v25 = v21;
  id v26 = v22;
  id v27 = v24;
  return a1;
}

uint64_t assignWithCopy for WeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8)  = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8)  = v14;
  *(void *)(a1 + a3[9])  = *(void *)(a2 + a3[9]);
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = a3[11];
  uint64_t v20 = *(void **)(a2 + v19);
  uint64_t v21 = *(void **)(a1 + v19);
  *(void *)(a1 + v19)  = v20;
  id v22 = v20;

  uint64_t v23 = a3[12];
  uint64_t v24 = *(void **)(a2 + v23);
  id v25 = *(void **)(a1 + v23);
  *(void *)(a1 + v23)  = v24;
  id v26 = v24;

  uint64_t v27 = a3[13];
  id v28 = *(void **)(a2 + v27);
  long long v29 = *(void **)(a1 + v27);
  *(void *)(a1 + v27)  = v28;
  id v30 = v28;

  return a1;
}

uint64_t initializeWithTake for WeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v6;
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8)  = *(unsigned char *)(v13 + 8);
  uint64_t v14 = a3[10];
  *(void *)(a1 + a3[9])  = *(void *)(a2 + a3[9]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  uint64_t v18 = a3[12];
  *(void *)(a1 + a3[11])  = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v18)  = *(void *)(a2 + v18);
  *(void *)(a1 + a3[13])  = *(void *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for WeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8)  = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9])  = *(void *)(a2 + a3[9]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  uint64_t v17 = a3[11];
  uint64_t v18 = *(void **)(a1 + v17);
  *(void *)(a1 + v17)  = *(void *)(a2 + v17);

  uint64_t v19 = a3[12];
  uint64_t v20 = *(void **)(a1 + v19);
  *(void *)(a1 + v19)  = *(void *)(a2 + v19);

  uint64_t v21 = a3[13];
  id v22 = *(void **)(a1 + v21);
  *(void *)(a1 + v21)  = *(void *)(a2 + v21);

  return a1;
}

uint64_t getEnumTagSinglePayload for WeekResults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD96F234);
}

uint64_t sub_1AD96F234(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1AD9DC7C0();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1AD9DCE40();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for WeekResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD96F374);
}

void *sub_1AD96F374(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_1AD9DC7C0();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1AD9DCE40();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 40);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1AD96F4A0()
{
  uint64_t result = sub_1AD9DC7C0();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1AD9DCE40();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DayDuration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DayDuration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(unsigned char *)(result + 24)  = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25)  = v3;
  return result;
}

ValueMetadata *type metadata accessor for DayDuration()
{
  return &type metadata for DayDuration;
}

void *sub_1AD96F600(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9)  = *(_OWORD *)((char *)a2 + 9);
    *(void *)(a1 + 32)  = a2[4];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_1AD9DCE40();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1AD96F6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_1AD9DCE40();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t sub_1AD96F744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9)  = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_1AD96F7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_1AD96F86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9)  = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1AD96F8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1AD96F994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD96F9A8);
}

uint64_t sub_1AD96F9A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = sub_1AD9DCE40();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t sub_1AD96FA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD96FA2C);
}

uint64_t sub_1AD96FA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = sub_1AD9DCE40();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata accessor for DayRelativeDuration(uint64_t a1)
{
  return sub_1AD8372AC(a1, qword_1E9A4D048);
}

uint64_t sub_1AD96FAC0()
{
  uint64_t result = sub_1AD9DCE40();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id SleepScheduleProviding.sleepScheduleModel.getter(uint64_t a1, uint64_t a2)
{
  v8[1]  = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(a2 + 8))();
  v8[0]  = 0;
  id v3 = objc_msgSend(v2, sel_sleepScheduleModelWithError_, v8);

  if (v3)
  {
    id v4 = v8[0];
  }
  else
  {
    id v5 = v8[0];
    uint64_t v6 = (void *)sub_1AD9DCB10();

    swift_willThrow();
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5548]), sel_init);
  }
  return v3;
}

uint64_t sub_1AD96FC50()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t SleepScheduleProviding.sleepSchedule.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  sub_1AD9DDB00();
  swift_release();
  return v3;
}

id SleepScheduleProviding.upcomingResolvedOccurrence(forCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[1]  = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  id v4 = (void *)sub_1AD9DCBB0();
  v21[0]  = 0;
  id v5 = objc_msgSend(v3, sel_upcomingResolvedScheduleOccurrenceAfterDate_error_, v4, v21);

  id v6 = v21[0];
  if (v21[0])
  {
    uint64_t v7 = qword_1EB725030;
    id v8 = v21[0];
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_1AD9DD550();
    __swift_project_value_buffer(v9, (uint64_t)qword_1EB725018);
    id v10 = v8;
    uint64_t v11 = sub_1AD9DD530();
    os_log_type_t v12 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      v21[0]  = v14;
      *(_DWORD *)uint64_t v13 = 136446466;
      uint64_t v15 = sub_1AD9E04F0();
      sub_1AD838978(v15, v16, (uint64_t *)v21);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12)  = 2082;
      sub_1AD837214(0, (unint64_t *)&unk_1E9A4D060);
      id v17 = v10;
      uint64_t v18 = sub_1AD9DF740();
      sub_1AD838978(v18, v19, (uint64_t *)v21);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v11, v12, "[%{public}s] Error loading upcoming resolved occurrence: %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
      MEMORY[0x1B3E6D1A0](v13, -1, -1);
    }
    else
    {
    }
  }

  return v5;
}

id SleepScheduleProvider.__allocating_init(sleepStore:schedule:currentDateProvider:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  return SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(a1, a2, a3, a4);
}

id SleepScheduleProviding.mutableSleepSchedule.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  sub_1AD9DDB00();
  swift_release();
  if (v3
    && (objc_msgSend(v3, sel_mutableCopy),
        v3,
        sub_1AD9DFF20(),
        swift_unknownObjectRelease(),
        sub_1AD837214(0, (unint64_t *)&qword_1E9A4ABE8),
        swift_dynamicCast()))
  {
    return v3;
  }
  else
  {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5500]), sel_init);
  }
}

void SleepScheduleProviding.hasActiveSchedule.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  sub_1AD9DDB00();
  swift_release();
  uint64_t v2 = v10;
  if (v10)
  {
    if (!objc_msgSend(v10, sel_isEnabled))
    {

      return;
    }
    id v3 = objc_msgSend(v10, sel_occurrences);
    sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
    unint64_t v4 = sub_1AD9DF860();

    unint64_t v11 = MEMORY[0x1E4FBC860];
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_1AD9E0190();
      swift_bridgeObjectRelease();
      if (v5)
      {
LABEL_5:
        if (v5 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v7 = (id)MEMORY[0x1B3E6BFF0](i, v4);
          }
          else {
            id v7 = *(id *)(v4 + 8 * i + 32);
          }
          id v8 = v7;
          if (objc_msgSend(v7, sel_isSingleDayOverride))
          {
          }
          else
          {
            sub_1AD9E0080();
            sub_1AD9E00C0();
            sub_1AD9E00D0();
            sub_1AD9E0090();
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v9 = v11;
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_21;
        }
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v5) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v9 = MEMORY[0x1E4FBC860];
    if ((MEMORY[0x1E4FBC860] & 0x8000000000000000) != 0)
    {
LABEL_21:
      swift_bridgeObjectRetain();
      sub_1AD9E0190();

      swift_release_n();
      return;
    }
LABEL_19:
    if ((v9 & 0x4000000000000000) == 0)
    {
      swift_release();

      return;
    }
    goto LABEL_21;
  }
}

id SleepScheduleProviding.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  sub_1AD9DDB00();
  swift_release();
  if (!v4) {
    return 0;
  }
  id v2 = objc_msgSend(v4, sel_isEnabled);

  return v2;
}

BOOL SleepScheduleProviding.hasWindDown.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  sub_1AD9DDB00();
  swift_release();
  if (!v5) {
    return 0;
  }
  objc_msgSend(v5, sel_windDownTime);
  double v3 = v2;

  return v3 > 0.0;
}

id SleepScheduleProviding.occurrence(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  sub_1AD9DDB00();
  swift_release();
  if (v21)
  {
    id v4 = objc_msgSend(v21, sel_occurrencesOnDays_, a1);

    sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
    unint64_t v5 = sub_1AD9DF860();

    if (!(v5 >> 62)) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (v8 == 1) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  unint64_t v5 = MEMORY[0x1E4FBC860];
  if (MEMORY[0x1E4FBC860] >> 62) {
    goto LABEL_9;
  }
LABEL_3:
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
  {
LABEL_4:
    if ((v5 & 0xC000000000000001) != 0)
    {
      id v6 = (id)MEMORY[0x1B3E6BFF0](0, v5);
      goto LABEL_7;
    }
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v6 = *(id *)(v5 + 32);
LABEL_7:
      id v7 = v6;
      swift_bridgeObjectRelease();
      return v7;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if (qword_1EB725030 != -1) {
LABEL_17:
  }
    swift_once();
  uint64_t v9 = sub_1AD9DD550();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EB725018);
  id v10 = sub_1AD9DD530();
  os_log_type_t v11 = sub_1AD9DFBC0();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    id v21 = v13;
    *(_DWORD *)uint64_t v12 = 136446466;
    uint64_t v14 = sub_1AD9E04F0();
    sub_1AD838978(v14, v15, (uint64_t *)&v21);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12)  = 2082;
    id v16 = (id)NSStringFromHKSPWeekdays();
    uint64_t v17 = sub_1AD9DF710();
    unint64_t v19 = v18;

    sub_1AD838978(v17, v19, (uint64_t *)&v21);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v10, v11, "[%{public}s] Did not find occurrence with weekday identifier: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v13, -1, -1);
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
  }

  return 0;
}

id SleepScheduleProviding.editableOverrideOccurrence(forCurrentDate:gregorianCalendar:)(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v91 = a2;
  v104[4]  = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_1AD9DCC70();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v95 = &v88[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v14 = MEMORY[0x1F4188790](v12, v13);
  id v16 = &v88[-v15];
  Class isa = (void (*)(uint64_t, NSObject *, double))a4[3].isa;
  id v101 = v4;
  os_log_t v94 = a4;
  isa(a3, a4, v14);
  sub_1AD9DDB00();
  swift_release();
  id v18 = (id)v104[0];
  if (!v104[0]) {
    id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5540]), sel_init);
  }
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_1AD9DD550();
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)qword_1EB725018);
  uint64_t v92 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16);
  v92(v16, a1, v8);
  id v21 = v18;
  uint64_t v22 = sub_1AD9DD530();
  uint64_t v102 = v8;
  uint64_t v23 = v22;
  os_log_type_t v24 = sub_1AD9DFBE0();
  BOOL v25 = os_log_type_enabled(v23, v24);
  id v99 = v21;
  uint64_t v100 = v20;
  uint64_t v97 = a1;
  uint64_t v98 = a3;
  uint64_t v96 = v9;
  if (v25)
  {
    uint64_t v26 = v9;
    uint64_t v27 = swift_slowAlloc();
    id v28 = (void *)swift_slowAlloc();
    uint64_t v90 = swift_slowAlloc();
    v104[0]  = v90;
    *(_DWORD *)uint64_t v27 = 136446722;
    uint64_t v29 = sub_1AD9E04F0();
    uint64_t v103 = sub_1AD838978(v29, v30, v104);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12)  = 2114;
    uint64_t v31 = sub_1AD9DCBB0();
    uint64_t v103 = v31;
    sub_1AD9DFEA0();
    void *v28 = v31;
    uint64_t v93 = *(void (**)(unsigned char *, uint64_t))(v26 + 8);
    v93(v16, v102);
    *(_WORD *)(v27 + 22)  = 2114;
    id v21 = v99;
    uint64_t v103 = (uint64_t)v99;
    id v32 = v99;
    a1  = v97;
    sub_1AD9DFEA0();
    v28[1]  = v21;

    _os_log_impl(&dword_1AD834000, v23, v24, "[%{public}s] generating editable override occcurence for current date: %{public}@ and schedule: %{public}@", (uint8_t *)v27, 0x20u);
    sub_1AD8A4990(0, (unint64_t *)&qword_1EB724F40, (unint64_t *)&qword_1EB724F30);
    swift_arrayDestroy();
    long long v33 = v28;
    a3  = v98;
    MEMORY[0x1B3E6D1A0](v33, -1, -1);
    uint64_t v34 = v90;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v34, -1, -1);
    MEMORY[0x1B3E6D1A0](v27, -1, -1);
  }
  else
  {
    uint64_t v93 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
    v93(v16, v102);
  }
  id v35 = SleepScheduleProviding.sleepScheduleModel.getter(a3, (uint64_t)v94);
  id v36 = (void *)sub_1AD9DCBB0();
  id v101 = v35;
  id v37 = objc_msgSend(v35, sel_upcomingResolvedOccurrenceAfterDate_, v36);

  uint64_t v38 = v95;
  uint64_t v39 = v102;
  v92(v95, a1, v102);
  id v40 = v37;
  long long v41 = sub_1AD9DD530();
  int v42 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v41, (os_log_type_t)v42))
  {
    int v89 = v42;
    os_log_t v94 = v41;
    uint64_t v43 = v38;
    uint64_t v44 = swift_slowAlloc();
    uint64_t v45 = (void *)swift_slowAlloc();
    uint64_t v92 = (void (*)(unsigned char *, uint64_t, uint64_t))swift_slowAlloc();
    v104[0]  = (uint64_t)v92;
    *(_DWORD *)uint64_t v44 = 136446722;
    uint64_t v46 = sub_1AD9E04F0();
    uint64_t v103 = sub_1AD838978(v46, v47, v104);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12)  = 2114;
    uint64_t v48 = sub_1AD9DCBB0();
    uint64_t v103 = v48;
    sub_1AD9DFEA0();
    uint64_t v90 = (uint64_t)v45;
    void *v45 = v48;
    v93(v43, v39);
    *(_WORD *)(v44 + 22)  = 2114;
    if (v40)
    {
      uint64_t v103 = (uint64_t)v40;
      id v49 = v40;
      sub_1AD9DFEA0();
    }
    else
    {
      uint64_t v103 = 0;
      sub_1AD9DFEA0();
      id v37 = 0;
    }
    os_log_type_t v50 = v89;
    uint64_t v51 = v90;
    *(void *)(v90 + 8)  = v37;

    os_log_type_t v52 = v50;
    os_log_t v53 = v94;
    _os_log_impl(&dword_1AD834000, v94, v52, "[%{public}s] upcoming resolved occurrence after date: %{public}@ is: %{public}@", (uint8_t *)v44, 0x20u);
    sub_1AD8A4990(0, (unint64_t *)&qword_1EB724F40, (unint64_t *)&qword_1EB724F30);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v51, -1, -1);
    id v54 = (void (*)(void, void, void))v92;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v54, -1, -1);
    MEMORY[0x1B3E6D1A0](v44, -1, -1);

    id v21 = v99;
    if (!v40) {
      goto LABEL_21;
    }
  }
  else
  {
    v93(v38, v39);

    if (!v40) {
      goto LABEL_21;
    }
  }
  id v55 = objc_msgSend(v40, sel_occurrence);
  if (v55)
  {
    id v56 = v55;
    if (objc_msgSend(v55, sel_isSingleDayOverride))
    {
      uint64_t v57 = sub_1AD9DD530();
      os_log_type_t v58 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v57, v58))
      {
        id v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = swift_slowAlloc();
        v104[0]  = v60;
        *(_DWORD *)id v59 = 136446210;
        uint64_t v61 = sub_1AD9E04F0();
        uint64_t v103 = sub_1AD838978(v61, v62, v104);
        sub_1AD9DFEA0();
        id v21 = v99;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v57, v58, "[%{public}s] upcoming resolved occurrence is single day override, returning", v59, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v60, -1, -1);
        MEMORY[0x1B3E6D1A0](v59, -1, -1);
      }

      objc_msgSend(v56, sel_mutableCopy);
      sub_1AD9DFF20();

      swift_unknownObjectRelease();
      sub_1AD837214(0, (unint64_t *)&unk_1E9A4D9E0);
      swift_dynamicCast();
      return (id)v103;
    }
  }
LABEL_21:
  uint64_t v64 = sub_1AD9DD530();
  os_log_type_t v65 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    v104[0]  = v67;
    *(_DWORD *)uint64_t v66 = 136446210;
    uint64_t v68 = sub_1AD9E04F0();
    uint64_t v103 = sub_1AD838978(v68, v69, v104);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v64, v65, "[%{public}s] upcoming resolved occurrence is not a single day override, generating a new one", v66, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v67, -1, -1);
    MEMORY[0x1B3E6D1A0](v66, -1, -1);
  }

  uint64_t v70 = (void *)sub_1AD9DCBB0();
  uint64_t v71 = (void *)sub_1AD9DCDA0();
  id v72 = objc_msgSend(v101, sel_overrideOccurrenceGenerationResultForCurrentDate_gregorianCalendar_schedule_, v70, v71, v21);

  id v73 = v72;
  uint64_t v74 = sub_1AD9DD530();
  os_log_type_t v75 = sub_1AD9DFBE0();
  uint64_t v76 = &_OBJC_LABEL_PROTOCOL___HKSPSuggestionProvider;
  char v77 = &_OBJC_LABEL_PROTOCOL___HKSPSuggestionProvider;
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v78 = swift_slowAlloc();
    uint64_t v79 = (void *)swift_slowAlloc();
    uint64_t v80 = swift_slowAlloc();
    v104[0]  = v80;
    *(_DWORD *)uint64_t v78 = 136446722;
    uint64_t v81 = sub_1AD9E04F0();
    uint64_t v103 = sub_1AD838978(v81, v82, v104);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v78 + 12)  = 2114;
    id v83 = objc_msgSend(v73, sel_overrideOccurrence);
    uint64_t v103 = (uint64_t)v83;
    sub_1AD9DFEA0();
    void *v79 = v83;
    id v21 = v99;

    *(_WORD *)(v78 + 22)  = 1024;
    unsigned int v84 = objc_msgSend(v73, sel_wasGeneratedFromTemplate);

    LODWORD(v103)  = v84;
    sub_1AD9DFEA0();

    _os_log_impl(&dword_1AD834000, v74, v75, "[%{public}s] generated override %{public}@ (from template: %{BOOL}d)", (uint8_t *)v78, 0x1Cu);
    sub_1AD8A4990(0, (unint64_t *)&qword_1EB724F40, (unint64_t *)&qword_1EB724F30);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v79, -1, -1);
    swift_arrayDestroy();
    uint64_t v85 = v80;
    uint64_t v76 = &_OBJC_LABEL_PROTOCOL___HKSPSuggestionProvider;
    MEMORY[0x1B3E6D1A0](v85, -1, -1);
    uint64_t v86 = v78;
    char v77 = &_OBJC_LABEL_PROTOCOL___HKSPSuggestionProvider;
    MEMORY[0x1B3E6D1A0](v86, -1, -1);
  }
  else
  {
  }
  id v63 = [v73 (SEL)v76[408]];
  [v73 (SEL)v77[409]];

  return v63;
}

id SleepScheduleProvider.sleepStore.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
}

uint64_t SleepScheduleProvider.currentDateProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  swift_retain();
  return v1;
}

uint64_t SleepScheduleProvider.currentSchedulePublisher.getter()
{
  return swift_retain();
}

uint64_t sub_1AD9713A8(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  double v3 = (void *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_nextOccurrencePublisher);
  swift_beginAccess();
  *double v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1AD971414()
{
  return swift_retain();
}

uint64_t sub_1AD971460(uint64_t a1)
{
  double v3 = (void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_nextOccurrencePublisher);
  swift_beginAccess();
  *double v3 = a1;
  return swift_release();
}

uint64_t (*sub_1AD9714B4())()
{
  return j__swift_endAccess;
}

uint64_t SleepScheduleProvider.currentGoalPublisher.getter()
{
  return swift_retain();
}

uint64_t SleepScheduleProvider.currentWindDownDurationPublisher.getter()
{
  return swift_retain();
}

uint64_t SleepScheduleProvider.currentScheduleEnabledPublisher.getter()
{
  return swift_retain();
}

id SleepScheduleProvider.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore], sel_removeObserver_, v0);
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for SleepScheduleProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id SleepScheduleProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SleepScheduleProvider.init()()
{
}

id sub_1AD971748()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
}

uint64_t sub_1AD97175C()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  swift_retain();
  return v1;
}

uint64_t sub_1AD97179C()
{
  return swift_retain();
}

uint64_t sub_1AD9717B0()
{
  return swift_retain();
}

uint64_t sub_1AD971800()
{
  return swift_retain();
}

uint64_t sub_1AD971814()
{
  return swift_retain();
}

uint64_t sub_1AD971828()
{
  return swift_retain();
}

uint64_t SleepScheduleProvider.sleepStore(_:sleepScheduleDidChange:)(uint64_t a1, void *a2)
{
  return sub_1AD971A04(a2);
}

uint64_t SleepScheduleProvider.sleepStore(_:sleepEventRecordDidChange:)(uint64_t a1, void *a2)
{
  return sub_1AD971E2C(a2, "[%{public}s] Observed sleep event record change to %{public}s");
}

uint64_t SleepScheduleProvider.sleepStore(_:sleepEventDidOccur:)(uint64_t a1, void *a2)
{
  return sub_1AD971E2C(a2, "[%{public}s] Observed sleep event %{public}s");
}

uint64_t sub_1AD971A04(void *a1)
{
  swift_getObjectType();
  uint64_t v3 = sub_1AD9DF410();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  id v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EB725018);
  id v9 = a1;
  id v10 = v1;
  id v11 = v9;
  id v12 = v10;
  uint64_t v13 = sub_1AD9DD530();
  int v14 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v13, (os_log_type_t)v14))
  {
    HIDWORD(v30)  = v14;
    uint64_t v32 = v3;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v35 = v31;
    *(_DWORD *)uint64_t v15 = 136446722;
    uint64_t v16 = sub_1AD9E04F0();
    long long v33 = a1;
    uint64_t v34 = sub_1AD838978(v16, v17, &v35);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12)  = 2082;
    if (v33)
    {
      uint64_t v34 = (uint64_t)v11;
      sub_1AD837214(0, (unint64_t *)&qword_1EB725090);
      id v18 = v11;
      uint64_t v19 = sub_1AD9DF730();
      unint64_t v21 = v20;
    }
    else
    {
      unint64_t v21 = 0xE300000000000000;
      uint64_t v19 = 7104878;
    }
    uint64_t v34 = sub_1AD838978(v19, v21, &v35);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22)  = 2082;
    id v22 = v12;
    swift_retain();
    sub_1AD9DDB00();

    swift_release();
    if (v34)
    {
      sub_1AD837214(0, (unint64_t *)&qword_1EB725090);
      uint64_t v23 = sub_1AD9DF730();
      unint64_t v25 = v24;
    }
    else
    {
      unint64_t v25 = 0xE300000000000000;
      uint64_t v23 = 7104878;
    }
    os_log_type_t v26 = BYTE4(v30);
    uint64_t v34 = sub_1AD838978(v23, v25, &v35);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v13, v26, "[%{public}s] Observed sleep schedule change to %{public}s from %{public}s", (uint8_t *)v15, 0x20u);
    uint64_t v27 = v31;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v27, -1, -1);
    MEMORY[0x1B3E6D1A0](v15, -1, -1);

    uint64_t v3 = v32;
    a1  = v33;
  }
  else
  {
  }
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  uint64_t *v7 = sub_1AD9DFCA0();
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E4FBCBF0], v3);
  char v28 = sub_1AD9DF420();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v7, v3);
  if (v28) {
    return sub_1AD837D88(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD971E2C(void *a1, const char *a2)
{
  uint64_t v4 = v2;
  swift_getObjectType();
  uint64_t v6 = sub_1AD9DCC70();
  uint64_t v51 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7);
  os_log_type_t v50 = &v43[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_1AD9DF410();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (uint64_t *)&v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_1AD9DD550();
  __swift_project_value_buffer(v14, (uint64_t)qword_1EB725018);
  id v15 = a1;
  uint64_t v16 = sub_1AD9DD530();
  os_log_type_t v17 = sub_1AD9DFBE0();
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v49 = v6;
    uint64_t v20 = v19;
    uint64_t v47 = swift_slowAlloc();
    v53[0]  = v47;
    *(_DWORD *)uint64_t v20 = 136446466;
    uint64_t v48 = v9;
    uint64_t v21 = sub_1AD9E04F0();
    uint64_t v46 = a2;
    id v52 = (id)sub_1AD838978(v21, v22, v53);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12)  = 2082;
    uint64_t v45 = v20 + 14;
    id v23 = v15;
    id v24 = objc_msgSend(v23, sel_description);
    uint64_t v25 = sub_1AD9DF710();
    int v44 = v18;
    uint64_t v26 = v25;
    uint64_t v27 = v4;
    unint64_t v29 = v28;

    uint64_t v9 = v48;
    id v52 = (id)sub_1AD838978(v26, v29, v53);
    sub_1AD9DFEA0();

    uint64_t v4 = v27;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v16, (os_log_type_t)v44, v46, (uint8_t *)v20, 0x16u);
    uint64_t v30 = v47;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v30, -1, -1);
    uint64_t v31 = v20;
    uint64_t v6 = v49;
    MEMORY[0x1B3E6D1A0](v31, -1, -1);
  }
  else
  {
  }
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  uint64_t *v13 = sub_1AD9DFCA0();
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4FBCBF0], v9);
  char v32 = sub_1AD9DF420();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v13, v9);
  if (v32)
  {
    swift_beginAccess();
    uint64_t v34 = *(void (**)(uint64_t))(v4
                                         + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
    uint64_t v35 = swift_retain();
    id v36 = v50;
    v34(v35);
    id v37 = sub_1AD837370();
    (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v36, v6);
    sub_1AD9DDB00();
    id v38 = v52;
    if (v52)
    {
      if (v37)
      {
        sub_1AD837214(0, &qword_1EB7250C0);
        id v39 = v38;
        id v40 = v37;
        char v41 = sub_1AD9DFE00();

        if (v41)
        {

          return swift_release();
        }
LABEL_15:
        id v52 = v37;
        id v42 = v40;
        sub_1AD9DDB10();

        return swift_release();
      }
    }
    else if (!v37)
    {
      return swift_release();
    }
    id v40 = v37;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD972304@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_nextOccurrencePublisher);
  swift_beginAccess();
  *a2  = *v3;
  return swift_retain();
}

uint64_t dispatch thunk of SleepScheduleProviding.sleepStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentDateProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentSchedulePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SleepScheduleProviding.nextOccurrencePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentGoalPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentWindDownDurationPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentScheduleEnabledPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t method lookup function for SleepScheduleProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepScheduleProvider);
}

uint64_t dispatch thunk of SleepScheduleProvider.nextOccurrencePublisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SleepScheduleProvider.nextOccurrencePublisher.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SleepScheduleProvider.nextOccurrencePublisher.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepScheduleProvider.__allocating_init(sleepStore:schedule:currentDateProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepOnboardingReceiptStyle.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1AD9DE810();
  uint64_t v16 = sub_1AD9DE870();
  swift_release();
  if (qword_1EB7255E0 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1EB725608;
  swift_retain();
  sub_1AD9DE990();
  sub_1AD9DE8B0();
  uint64_t v14 = sub_1AD9DE920();
  swift_release();
  if (qword_1E9A48F08 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E9A4AE58;
  uint64_t v3 = qword_1E9A490B8;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_1AD9DE870();
  if (qword_1E9A48F00 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1E9A4AE50;
  swift_retain();
  uint64_t v5 = sub_1AD9DE870();
  uint64_t v6 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE910();
  sub_1AD9DE8C0();
  uint64_t v7 = sub_1AD9DE920();
  swift_release();
  uint64_t v8 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE990();
  sub_1AD9DE8C0();
  uint64_t v9 = sub_1AD9DE920();
  swift_release();
  uint64_t v10 = qword_1E9A4AE58;
  uint64_t v11 = qword_1F0469F48;
  *(void *)a1  = v16;
  *(unsigned char *)(a1 + 8)  = 2;
  *(void *)(a1 + 16)  = v15;
  *(_WORD *)(a1 + 24)  = 0;
  *(void *)(a1 + 32)  = v14;
  *(unsigned char *)(a1 + 40)  = 2;
  *(void *)(a1 + 48)  = v2;
  *(_WORD *)(a1 + 56)  = 0;
  *(void *)(a1 + 64)  = v13;
  *(unsigned char *)(a1 + 72)  = 2;
  *(void *)(a1 + 80)  = v4;
  *(_WORD *)(a1 + 88)  = 0;
  *(void *)(a1 + 96)  = v5;
  *(unsigned char *)(a1 + 104)  = 2;
  *(void *)(a1 + 112)  = v6;
  *(_WORD *)(a1 + 120)  = 0;
  *(void *)(a1 + 128)  = v7;
  *(unsigned char *)(a1 + 136)  = 2;
  *(void *)(a1 + 144)  = v8;
  *(_WORD *)(a1 + 152)  = 0;
  *(void *)(a1 + 160)  = v9;
  *(unsigned char *)(a1 + 168)  = 2;
  *(void *)(a1 + 176)  = v10;
  *(_WORD *)(a1 + 184)  = 0;
  *(void *)(a1 + 192)  = v11;
  return swift_retain();
}

void ScheduleOccurrenceViewModel.init(scheduleOccurrence:windDownTimeInterval:viewStyle:)(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  int v68 = a3;
  uint64_t v67 = a2;
  uint64_t v69 = a5;
  uint64_t v7 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v14 = MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v14, v17);
  uint64_t v20 = (char *)&v61 - v19;
  MEMORY[0x1F4188790](v18, v21);
  uint64_t v70 = (uint64_t)&v61 - v22;
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], v11);
  uint64_t v25 = MEMORY[0x1F4188790](v23 - 8, v24);
  uint64_t v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v28);
  uint64_t v30 = (char *)&v61 - v29;
  long long v31 = a4[11];
  long long v81 = a4[10];
  long long v82 = v31;
  uint64_t v83 = *((void *)a4 + 24);
  long long v32 = a4[7];
  long long v77 = a4[6];
  long long v78 = v32;
  long long v33 = a4[9];
  long long v79 = a4[8];
  long long v80 = v33;
  long long v34 = a4[3];
  long long v73 = a4[2];
  long long v74 = v34;
  long long v35 = a4[5];
  long long v75 = a4[4];
  long long v76 = v35;
  long long v36 = *a4;
  long long v72 = a4[1];
  long long v71 = v36;
  uint64_t v64 = v27;
  id v63 = (char *)&v61 - v29;
  if (a1)
  {
    id v37 = objc_msgSend(a1, sel_bedtimeComponents);
    sub_1AD9DC8C0();

    uint64_t v38 = sub_1AD9DC990();
    id v39 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
    v39(v30, 0, 1, v38);
    id v40 = objc_msgSend(a1, sel_wakeUpComponents);
    sub_1AD9DC8C0();

    v39(v27, 0, 1, v38);
    id v62 = objc_msgSend(a1, sel_weekdays);
  }
  else
  {
    uint64_t v41 = sub_1AD9DC990();
    id v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56);
    v42(v30, 1, 1, v41);
    v42(v27, 1, 1, v41);
    id v62 = 0;
  }
  uint64_t v43 = sub_1AD9DCC70();
  int v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56);
  v44(v70, 1, 1, v43);
  os_log_type_t v65 = v20;
  v44((uint64_t)v20, 1, 1, v43);
  uint64_t v66 = v16;
  v44((uint64_t)v16, 1, 1, v43);
  id v61 = a1;
  if (a1)
  {
    id v45 = a1;
    id v46 = objc_msgSend(v45, sel_alarmConfiguration, v61);
    unsigned int v47 = objc_msgSend(v46, sel_isEnabled);

    if (v47) {
      char v48 = 0;
    }
    else {
      char v48 = 2;
    }
  }
  else
  {
    char v48 = 0;
  }
  uint64_t v49 = (uint64_t)v63;
  uint64_t v50 = (uint64_t)&v10[v7[11]];
  v44(v50, 1, 1, v43);
  uint64_t v51 = (uint64_t)&v10[v7[12]];
  v44(v51, 1, 1, v43);
  uint64_t v52 = (uint64_t)&v10[v7[13]];
  v44(v52, 1, 1, v43);
  sub_1AD870740(v49, (uint64_t)v10);
  sub_1AD870740((uint64_t)v64, (uint64_t)&v10[v7[5]]);
  os_log_t v53 = &v10[v7[6]];
  *(void *)os_log_t v53 = v67;
  v53[8]  = v68 & 1;
  *(void *)&v10[v7[7]]  = v62;
  sub_1AD8DF3BC(v70, v52);
  sub_1AD8DF3BC((uint64_t)v65, v51);
  sub_1AD8DF3BC((uint64_t)v66, v50);
  *(void *)&v10[v7[14]]  = 0;
  v10[v7[8]]  = v48;
  v10[v7[9]]  = 0;
  id v54 = &v10[v7[10]];
  long long v55 = v82;
  *((_OWORD *)v54 + 10)  = v81;
  *((_OWORD *)v54 + 11)  = v55;
  *((void *)v54 + 24)  = v83;
  long long v56 = v78;
  *((_OWORD *)v54 + 6)  = v77;
  *((_OWORD *)v54 + 7)  = v56;
  long long v57 = v80;
  *((_OWORD *)v54 + 8)  = v79;
  *((_OWORD *)v54 + 9)  = v57;
  long long v58 = v74;
  *((_OWORD *)v54 + 2)  = v73;
  *((_OWORD *)v54 + 3)  = v58;
  long long v59 = v76;
  *((_OWORD *)v54 + 4)  = v75;
  *((_OWORD *)v54 + 5)  = v59;
  long long v60 = v72;
  *(_OWORD *)id v54 = v71;
  *((_OWORD *)v54 + 1)  = v60;
  sub_1AD979584((uint64_t)v10, v69);
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepOnboardingStyle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD978FEC(MEMORY[0x1E4F3E0B8], a1);
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepFocusFullScheduleStyle.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1E9A490E8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E9A4D528;
  uint64_t v3 = qword_1E9A48F00;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1E9A4AE50;
  swift_retain();
  uint64_t v5 = sub_1AD9DE990();
  if (qword_1E9A48F08 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1E9A4AE58;
  uint64_t v7 = qword_1E9A4D528;
  uint64_t v8 = qword_1E9A4AE50;
  uint64_t v9 = qword_1E9A490F0;
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  uint64_t v10 = v6;
  if (v9 != -1)
  {
    swift_once();
    uint64_t v10 = qword_1E9A4AE58;
  }
  uint64_t v11 = qword_1E9A4D530;
  uint64_t v12 = qword_1F046A408;
  *(void *)a1  = v2;
  *(unsigned char *)(a1 + 8)  = 2;
  *(void *)(a1 + 16)  = v4;
  *(_WORD *)(a1 + 24)  = 0;
  *(void *)(a1 + 32)  = v5;
  *(unsigned char *)(a1 + 40)  = 1;
  *(void *)(a1 + 48)  = v6;
  *(_WORD *)(a1 + 56)  = 1;
  *(void *)(a1 + 64)  = v7;
  *(unsigned char *)(a1 + 72)  = 2;
  *(void *)(a1 + 80)  = v8;
  *(_WORD *)(a1 + 88)  = 0;
  *(void *)(a1 + 96)  = v7;
  *(unsigned char *)(a1 + 104)  = 2;
  *(void *)(a1 + 112)  = v6;
  *(_WORD *)(a1 + 120)  = 0;
  *(void *)(a1 + 128)  = v7;
  *(unsigned char *)(a1 + 136)  = 2;
  *(void *)(a1 + 144)  = v6;
  *(_WORD *)(a1 + 152)  = 0;
  *(void *)(a1 + 160)  = v11;
  *(unsigned char *)(a1 + 168)  = 2;
  *(void *)(a1 + 176)  = v10;
  *(_WORD *)(a1 + 184)  = 0;
  *(void *)(a1 + 192)  = v12;
  swift_retain();
  return swift_retain();
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepFocusNextOccurrenceStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1AD9DE900();
  if (qword_1E9A48F00 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1E9A4AE50;
  swift_retain();
  uint64_t v4 = sub_1AD9DE990();
  if (qword_1E9A48F08 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1E9A4AE58;
  uint64_t v6 = qword_1E9A490E8;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1E9A4D528;
  uint64_t v8 = qword_1E9A48EF8;
  swift_retain();
  uint64_t v9 = v7;
  if (v8 != -1)
  {
    swift_once();
    uint64_t v9 = qword_1E9A4D528;
  }
  uint64_t v10 = qword_1E9A4AE48;
  uint64_t v11 = qword_1E9A490F0;
  swift_retain_n();
  swift_retain_n();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1E9A4D530;
  uint64_t v13 = qword_1E9A4AE50;
  uint64_t v14 = unk_1F046A438;
  if ((unk_1F046A438 & ~qword_1F046A430) == 0) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v14 | qword_1F046A430;
  uint64_t v16 = qword_1F046A440;
  if ((qword_1F046A440 & ~(v14 | qword_1F046A430)) == 0) {
    uint64_t v16 = 0;
  }
  *(void *)a1  = v2;
  *(unsigned char *)(a1 + 8)  = 2;
  *(void *)(a1 + 16)  = v3;
  *(_WORD *)(a1 + 24)  = 256;
  *(void *)(a1 + 32)  = v4;
  *(unsigned char *)(a1 + 40)  = 1;
  *(void *)(a1 + 48)  = v5;
  *(_WORD *)(a1 + 56)  = 1;
  *(void *)(a1 + 64)  = v7;
  *(unsigned char *)(a1 + 72)  = 2;
  *(void *)(a1 + 80)  = v10;
  *(_WORD *)(a1 + 88)  = 0;
  *(void *)(a1 + 96)  = v9;
  *(unsigned char *)(a1 + 104)  = 2;
  *(void *)(a1 + 112)  = v10;
  *(_WORD *)(a1 + 120)  = 0;
  *(void *)(a1 + 128)  = v9;
  *(unsigned char *)(a1 + 136)  = 2;
  *(void *)(a1 + 144)  = v10;
  *(_WORD *)(a1 + 152)  = 0;
  *(void *)(a1 + 160)  = v12;
  *(unsigned char *)(a1 + 168)  = 0;
  *(void *)(a1 + 176)  = v13;
  *(_WORD *)(a1 + 184)  = 0;
  *(void *)(a1 + 192)  = v16 | v15;
  swift_retain();
  return swift_retain();
}

void ScheduleOccurrenceViewModel.init(resolvedOccurrence:relativeWeekdayFormatter:viewStyle:)(void *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v15 = MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v15, v18);
  uint64_t v84 = (uint64_t)&v78 - v20;
  MEMORY[0x1F4188790](v19, v21);
  uint64_t v85 = (uint64_t)&v78 - v22;
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], v12);
  uint64_t v25 = MEMORY[0x1F4188790](v23 - 8, v24);
  uint64_t v27 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v28);
  uint64_t v30 = (char *)&v78 - v29;
  long long v31 = a3[11];
  long long v96 = a3[10];
  long long v97 = v31;
  uint64_t v98 = *((void *)a3 + 24);
  long long v32 = a3[7];
  long long v92 = a3[6];
  long long v93 = v32;
  long long v33 = a3[9];
  long long v94 = a3[8];
  long long v95 = v33;
  long long v34 = a3[3];
  long long v88 = a3[2];
  long long v89 = v34;
  long long v35 = a3[5];
  long long v90 = a3[4];
  long long v91 = v35;
  long long v36 = *a3;
  long long v87 = a3[1];
  long long v86 = v36;
  id v83 = a1;
  uint64_t v82 = a4;
  uint64_t v81 = a2;
  long long v80 = v17;
  long long v79 = v27;
  uint64_t v78 = (uint64_t)&v78 - v29;
  if (!a1)
  {
    uint64_t v48 = sub_1AD9DC990();
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56);
    v49(v30, 1, 1, v48);
    v49(v27, 1, 1, v48);
LABEL_5:
    uint64_t v50 = sub_1AD9DCC70();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v85, 1, 1, v50);
    if (!a1) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  id v37 = objc_msgSend(a1, sel_occurrence, v78, v79, v80);
  id v38 = objc_msgSend(v37, sel_bedtimeComponents);

  sub_1AD9DC8C0();
  uint64_t v39 = sub_1AD9DC990();
  id v40 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56);
  v40(v30, 0, 1, v39);
  id v41 = objc_msgSend(a1, (SEL)&off_1E5E88018);
  id v42 = objc_msgSend(v41, sel_wakeUpComponents);

  sub_1AD9DC8C0();
  v40(v27, 0, 1, v39);
  id v43 = objc_msgSend(a1, sel_windDownEvent);
  if (!v43) {
    goto LABEL_5;
  }
  int v44 = v43;
  id v45 = objc_msgSend(v43, sel_dueDate);

  uint64_t v46 = v85;
  sub_1AD9DCC40();

  uint64_t v47 = sub_1AD9DCC70();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 0, 1, v47);
LABEL_6:
  id v51 = objc_msgSend(a1, sel_bedtimeEvent, v78);
  if (v51)
  {
    uint64_t v52 = v51;
    id v53 = objc_msgSend(v51, sel_dueDate);

    uint64_t v54 = v84;
    sub_1AD9DCC40();

    uint64_t v55 = sub_1AD9DCC70();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 0, 1, v55);
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v55 = sub_1AD9DCC70();
  long long v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56);
  v56(v84, 1, 1, v55);
  if (!a1)
  {
    v56((uint64_t)v17, 1, 1, v55);
    goto LABEL_16;
  }
LABEL_9:
  id v57 = objc_msgSend(a1, sel_wakeUpEvent, v78);
  id v58 = objc_msgSend(v57, sel_dueDate);

  sub_1AD9DCC40();
  sub_1AD9DCC70();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v17, 0, 1, v55);
  id v59 = objc_msgSend(a1, sel_wakeUpEvent);
  id v60 = objc_msgSend(v59, sel_type);

  id v61 = objc_msgSend(a1, sel_occurrence);
  if (!v61)
  {
LABEL_16:
    char v63 = 0;
    goto LABEL_17;
  }
  id v62 = v61;
  if (v60 == (id)1)
  {

    char v63 = 1;
  }
  else
  {
    id v64 = objc_msgSend(v61, sel_alarmConfiguration);
    unsigned int v65 = objc_msgSend(v64, sel_isEnabled);

    if (v65) {
      char v63 = 0;
    }
    else {
      char v63 = 2;
    }
  }
LABEL_17:
  uint64_t v66 = (uint64_t)&v11[v8[11]];
  sub_1AD9DCC70();
  uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56);
  v67(v66, 1, 1, v55);
  uint64_t v68 = (uint64_t)&v11[v8[12]];
  v67(v68, 1, 1, v55);
  uint64_t v69 = (uint64_t)&v11[v8[13]];
  v67(v69, 1, 1, v55);
  sub_1AD870740(v78, (uint64_t)v11);
  sub_1AD870740((uint64_t)v79, (uint64_t)&v11[v8[5]]);
  uint64_t v70 = &v11[v8[6]];
  *(void *)uint64_t v70 = 0;
  v70[8]  = 1;
  *(void *)&v11[v8[7]]  = 0;
  sub_1AD8DF3BC(v85, v69);
  sub_1AD8DF3BC(v84, v68);
  sub_1AD8DF3BC((uint64_t)v80, v66);
  *(void *)&v11[v8[14]]  = v81;
  v11[v8[8]]  = v63;
  v11[v8[9]]  = 1;
  long long v71 = &v11[v8[10]];
  long long v72 = v97;
  *((_OWORD *)v71 + 10)  = v96;
  *((_OWORD *)v71 + 11)  = v72;
  *((void *)v71 + 24)  = v98;
  long long v73 = v93;
  *((_OWORD *)v71 + 6)  = v92;
  *((_OWORD *)v71 + 7)  = v73;
  long long v74 = v95;
  *((_OWORD *)v71 + 8)  = v94;
  *((_OWORD *)v71 + 9)  = v74;
  long long v75 = v89;
  *((_OWORD *)v71 + 2)  = v88;
  *((_OWORD *)v71 + 3)  = v75;
  long long v76 = v91;
  *((_OWORD *)v71 + 4)  = v90;
  *((_OWORD *)v71 + 5)  = v76;
  long long v77 = v87;
  *(_OWORD *)long long v71 = v86;
  *((_OWORD *)v71 + 1)  = v77;
  sub_1AD979584((uint64_t)v11, v82);
}

uint64_t ScheduleOccurrenceViewModel.AlarmState.hash(into:)()
{
  return sub_1AD9E03B0();
}

BOOL static ScheduleOccurrenceViewModel.AlarmState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ScheduleOccurrenceViewModel.AlarmState.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t ScheduleOccurrenceViewModel.bedtimeComponents.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD97B960(v1, a1, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
}

uint64_t ScheduleOccurrenceViewModel.wakeUpComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ScheduleOccurrenceViewModel();
  return sub_1AD97B960(v1 + *(int *)(v3 + 20), a1, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
}

uint64_t ScheduleOccurrenceViewModel.windDownTimeInterval.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 24));
}

uint64_t ScheduleOccurrenceViewModel.weekdays.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 28));
}

uint64_t ScheduleOccurrenceViewModel.alarmState.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for ScheduleOccurrenceViewModel();
  *a1  = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ScheduleOccurrenceViewModel.isNextOccurrence.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 36));
}

uint64_t ScheduleOccurrenceViewModel.viewStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
  long long v4 = *(_OWORD *)(v3 + 144);
  long long v5 = *(_OWORD *)(v3 + 176);
  long long v31 = *(_OWORD *)(v3 + 160);
  long long v32 = v5;
  long long v6 = *(_OWORD *)(v3 + 80);
  long long v7 = *(_OWORD *)(v3 + 112);
  long long v27 = *(_OWORD *)(v3 + 96);
  long long v8 = v27;
  long long v28 = v7;
  long long v9 = *(_OWORD *)(v3 + 112);
  long long v10 = *(_OWORD *)(v3 + 144);
  long long v29 = *(_OWORD *)(v3 + 128);
  long long v11 = v29;
  long long v30 = v10;
  long long v12 = *(_OWORD *)(v3 + 16);
  long long v13 = *(_OWORD *)(v3 + 48);
  long long v23 = *(_OWORD *)(v3 + 32);
  long long v14 = v23;
  long long v24 = v13;
  long long v15 = *(_OWORD *)(v3 + 48);
  long long v16 = *(_OWORD *)(v3 + 80);
  long long v25 = *(_OWORD *)(v3 + 64);
  long long v17 = v25;
  long long v26 = v16;
  long long v18 = *(_OWORD *)(v3 + 16);
  v22[0]  = *(_OWORD *)v3;
  long long v19 = v22[0];
  v22[1]  = v18;
  long long v20 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(a1 + 160)  = v31;
  *(_OWORD *)(a1 + 176)  = v20;
  *(_OWORD *)(a1 + 96)  = v8;
  *(_OWORD *)(a1 + 112)  = v9;
  *(_OWORD *)(a1 + 128)  = v11;
  *(_OWORD *)(a1 + 144)  = v4;
  *(_OWORD *)(a1 + 32)  = v14;
  *(_OWORD *)(a1 + 48)  = v15;
  *(_OWORD *)(a1 + 64)  = v17;
  *(_OWORD *)(a1 + 80)  = v6;
  uint64_t v33 = *(void *)(v3 + 192);
  *(void *)(a1 + 192)  = *(void *)(v3 + 192);
  *(_OWORD *)a1  = v19;
  *(_OWORD *)(a1 + 16)  = v12;
  return sub_1AD97B814((uint64_t)v22);
}

uint64_t sub_1AD973C2C()
{
  uint64_t v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  long long v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v7);
  long long v9 = (char *)&v27 - v8;
  uint64_t v10 = sub_1AD9DCC70();
  long long v11 = *(void **)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  long long v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v16);
  long long v18 = (char *)&v27 - v17;
  long long v19 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1AD97B960(v0 + v19[13], (uint64_t)v9, &qword_1EB724D70, v1);
  long long v20 = (unsigned int (*)(char *, uint64_t, uint64_t))v11[6];
  if (v20(v9, 1, v10) == 1)
  {
    long long v5 = v9;
  }
  else
  {
    long long v28 = v14;
    long long v27 = (void (*)(char *, char *, uint64_t))v11[4];
    v27(v18, v9, v10);
    sub_1AD97B960(v0 + v19[12], (uint64_t)v5, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    if (v20(v5, 1, v10) != 1)
    {
      long long v23 = v28;
      v27(v28, v5, v10);
      sub_1AD97BA3C(&qword_1E9A4C738, MEMORY[0x1E4F27928]);
      char v24 = sub_1AD9DF6C0();
      long long v25 = (void (*)(char *, uint64_t))v11[1];
      v25(v23, v10);
      v25(v18, v10);
      char v22 = v24 ^ 1;
      return v22 & 1;
    }
    ((void (*)(char *, uint64_t))v11[1])(v18, v10);
  }
  sub_1AD97B8F0((uint64_t)v5, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v21 = v0 + v19[6];
  char v22 = (*(unsigned char *)(v21 + 8) & 1) == 0 && *(double *)v21 > 0.0;
  return v22 & 1;
}

uint64_t sub_1AD973F78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v113 = a1;
  uint64_t v2 = sub_1AD9DCE20();
  uint64_t v100 = *(void *)(v2 - 8);
  uint64_t v101 = v2;
  MEMORY[0x1F4188790](v2, v3);
  long long v94 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v98 = (uint64_t)&v91 - v8;
  uint64_t v109 = sub_1AD9DC990();
  uint64_t v112 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109, v9);
  long long v97 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AD9DCE40();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v103 = v11;
  uint64_t v104 = v12;
  MEMORY[0x1F4188790](v11, v13);
  char v108 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], v5);
  MEMORY[0x1F4188790](v16 - 8, v17);
  long long v92 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v20);
  long long v95 = (char *)&v91 - v21;
  MEMORY[0x1F4188790](v22, v23);
  uint64_t v106 = (uint64_t)&v91 - v24;
  MEMORY[0x1F4188790](v25, v26);
  long long v28 = (char *)&v91 - v27;
  MEMORY[0x1F4188790](v29, v30);
  long long v32 = (char *)&v91 - v31;
  uint64_t v33 = sub_1AD9DCC70();
  long long v34 = *(void **)(v33 - 8);
  MEMORY[0x1F4188790](v33, v35);
  long long v93 = (char *)&v91 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37, v38);
  unsigned long long v111 = (char *)&v91 - v39;
  MEMORY[0x1F4188790](v40, v41);
  uint64_t v102 = (char *)&v91 - v42;
  MEMORY[0x1F4188790](v43, v44);
  uint64_t v46 = (char *)&v91 - v45;
  uint64_t v47 = type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v105 = v1 + *(int *)(v47 + 52);
  sub_1AD97B960(v105, (uint64_t)v32, &qword_1EB724D70, v15);
  uint64_t v48 = (unsigned int (*)(char *, uint64_t, uint64_t))v34[6];
  unsigned int v49 = v48(v32, 1, v33);
  int v107 = v34 + 6;
  uint64_t v110 = v1;
  id v99 = v34;
  if (v49 == 1)
  {
    long long v28 = v32;
    uint64_t v50 = v47;
  }
  else
  {
    id v51 = v32;
    uint64_t v52 = (void (*)(char *, char *, uint64_t))v34[4];
    v52(v46, v51, v33);
    sub_1AD97B960(v1 + *(int *)(v47 + 48), (uint64_t)v28, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    long long v96 = v48;
    uint64_t v50 = v47;
    if (v48(v28, 1, v33) != 1)
    {
      id v62 = v102;
      v52(v102, v28, v33);
      sub_1AD97BA3C(&qword_1E9A4C738, MEMORY[0x1E4F27928]);
      char v63 = sub_1AD9DF6C0();
      id v64 = (void (*)(char *, uint64_t))v34[1];
      v64(v62, v33);
      v64(v46, v33);
      uint64_t v54 = v111;
      uint64_t v56 = v112;
      uint64_t v53 = v110;
      uint64_t v48 = v96;
      if ((v63 & 1) == 0) {
        goto LABEL_7;
      }
LABEL_11:
      uint64_t v61 = 1;
      uint64_t v60 = v109;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v113, v61, 1, v60);
    }
    ((void (*)(char *, uint64_t))v34[1])(v46, v33);
    uint64_t v48 = v96;
  }
  sub_1AD97B8F0((uint64_t)v28, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v53 = v110;
  uint64_t v54 = v111;
  uint64_t v55 = v110 + *(int *)(v50 + 24);
  uint64_t v56 = v112;
  if ((*(unsigned char *)(v55 + 8) & 1) != 0 || *(double *)v55 <= 0.0) {
    goto LABEL_11;
  }
LABEL_7:
  id v57 = v108;
  sub_1AD9DCE10();
  uint64_t v58 = v106;
  sub_1AD97B960(v105, v106, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  if (v48((char *)v58, 1, v33) != 1)
  {
    uint64_t v66 = v99;
    ((void (*)(char *, uint64_t, uint64_t))v99[4])(v54, v58, v33);
    uint64_t v60 = v109;
    goto LABEL_14;
  }
  sub_1AD97B8F0(v58, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v59 = v53 + *(int *)(v50 + 24);
  uint64_t v60 = v109;
  if (*(unsigned char *)(v59 + 8))
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v57, v103);
    uint64_t v61 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v113, v61, 1, v60);
  }
  double v76 = *(double *)v59;
  uint64_t v77 = v53;
  uint64_t v78 = v98;
  sub_1AD97B960(v77, v98, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v78, 1, v60) == 1)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v57, v103);
    long long v79 = &qword_1E9A49F48;
    long long v80 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
LABEL_19:
    uint64_t v82 = v80;
    uint64_t v83 = v78;
LABEL_20:
    sub_1AD97B8F0(v83, v79, v82);
    uint64_t v61 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v113, v61, 1, v60);
  }
  uint64_t v81 = v97;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v97, v78, v60);
  uint64_t v78 = (uint64_t)v95;
  sub_1AD9DCDC0();
  long long v96 = v48;
  if (v48((char *)v78, 1, v33) == 1)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v81, v60);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v57, v103);
    long long v79 = &qword_1EB724D70;
    long long v80 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
    goto LABEL_19;
  }
  uint64_t v84 = v78;
  uint64_t v85 = (void (*)(char *, uint64_t, uint64_t))v99[4];
  v85(v93, v84, v33);
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v100 + 104))(v94, *MEMORY[0x1E4F27C50], v101);
  if ((~*(void *)&v76 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  long long v86 = v108;
  if (v76 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v66 = v99;
  if (v76 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (!__OFSUB__(0, (uint64_t)v76))
  {
    long long v88 = v93;
    long long v87 = v94;
    sub_1AD9DCDE0();
    long long v89 = v87;
    long long v90 = v92;
    (*(void (**)(char *, uint64_t))(v100 + 8))(v89, v101);
    ((void (*)(char *, uint64_t))v66[1])(v88, v33);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v97, v60);
    if (v96(v90, 1, v33) == 1)
    {
      (*(void (**)(char *, uint64_t))(v104 + 8))(v86, v103);
      long long v79 = &qword_1EB724D70;
      uint64_t v82 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
      uint64_t v83 = (uint64_t)v90;
      goto LABEL_20;
    }
    v85(v54, (uint64_t)v90, v33);
LABEL_14:
    uint64_t v112 = v33;
    uint64_t v67 = v54;
    sub_1AD97F2E8(0, &qword_1E9A4C140, MEMORY[0x1E4F27C88], MEMORY[0x1E4FBBE00]);
    uint64_t v68 = v100;
    uint64_t v69 = *(void *)(v100 + 72);
    unint64_t v70 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    uint64_t v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16)  = xmmword_1AD9E3080;
    unint64_t v72 = v71 + v70;
    long long v73 = *(void (**)(unint64_t, void, uint64_t))(v68 + 104);
    uint64_t v74 = v101;
    v73(v72, *MEMORY[0x1E4F27C10], v101);
    v73(v72 + v69, *MEMORY[0x1E4F27C48], v74);
    sub_1AD922F84(v71);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    long long v75 = v108;
    sub_1AD9DCD80();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v66[1])(v67, v112);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v75, v103);
    uint64_t v61 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v113, v61, 1, v60);
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t ScheduleOccurrenceViewModel.localizedWindDownString.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v30 - v3;
  uint64_t v5 = sub_1AD9DCC70();
  uint64_t v31 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v30 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], v0);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_1AD9DC990();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1AD9DCE40();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCE10();
  sub_1AD973F78((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    uint64_t v22 = &qword_1E9A49F48;
    uint64_t v23 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
    uint64_t v24 = (uint64_t)v11;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
    sub_1AD9DCDC0();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v4, 1, v5) != 1)
    {
      (*(void (**)(void))(v31 + 32))();
      id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
      objc_msgSend(v26, sel_setDateStyle_, 0);
      objc_msgSend(v26, sel_setTimeStyle_, 1);
      uint64_t v27 = (void *)sub_1AD9DCBB0();
      id v28 = objc_msgSend(v26, sel_stringFromDate_, v27);

      uint64_t v25 = sub_1AD9DF710();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v5);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
      return v25;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    uint64_t v22 = &qword_1EB724D70;
    uint64_t v23 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
    uint64_t v24 = (uint64_t)v4;
  }
  sub_1AD97B8F0(v24, v22, v23);
  return 0;
}

uint64_t ScheduleOccurrenceViewModel.localizedWindDownDayString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)v21 - v5;
  uint64_t v7 = sub_1AD9DCC70();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1AD97B960(v1 + v12[13], (uint64_t)v6, &qword_1EB724D70, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1AD97B8F0((uint64_t)v6, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    uint64_t v14 = *(void **)(v1 + v12[14]);
    if (v14)
    {
      uint64_t v15 = (void *)sub_1AD9DCBB0();
      id v16 = objc_msgSend(v14, sel_stringFromDate_, v15);

      uint64_t v13 = sub_1AD9DF710();
      uint64_t v14 = v17;
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v18 = *(unsigned __int8 *)(v1 + v12[10] + 168);
    BOOL v19 = v18 != 2 && (v18 & 1) == 0;
    if (v19 && v14)
    {
      v21[0]  = v13;
      v21[1]  = v14;
      sub_1AD85F688();
      uint64_t v13 = sub_1AD9DFEE0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  return v13;
}

uint64_t ScheduleOccurrenceViewModel.localizedBedtimeString.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v33 - v3;
  uint64_t v5 = sub_1AD9DCC70();
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v35 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], v0);
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = sub_1AD9DC990();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1AD9DCE40();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18, v20);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCE10();
  sub_1AD97B960(v36, (uint64_t)v12, &qword_1E9A49F48, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    uint64_t v23 = &qword_1E9A49F48;
    uint64_t v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
    uint64_t v25 = (uint64_t)v12;
  }
  else
  {
    uint64_t v36 = v18;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
    sub_1AD9DCDC0();
    uint64_t v27 = v33;
    uint64_t v26 = v34;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v4, 1, v34) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v35, v4, v26);
      id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
      objc_msgSend(v29, sel_setDateStyle_, 0);
      objc_msgSend(v29, sel_setTimeStyle_, 1);
      uint64_t v30 = (void *)sub_1AD9DCBB0();
      id v31 = objc_msgSend(v29, sel_stringFromDate_, v30);

      uint64_t v28 = sub_1AD9DF710();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v26);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v36);
      return v28;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v36);
    uint64_t v23 = &qword_1EB724D70;
    uint64_t v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
    uint64_t v25 = (uint64_t)v4;
  }
  sub_1AD97B8F0(v25, v23, v24);
  return 0;
}

uint64_t ScheduleOccurrenceViewModel.localizedBedtimeDayString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)v21 - v5;
  uint64_t v7 = sub_1AD9DCC70();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1AD97B960(v1 + v12[12], (uint64_t)v6, &qword_1EB724D70, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1AD97B8F0((uint64_t)v6, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    uint64_t v14 = *(void **)(v1 + v12[14]);
    if (v14)
    {
      uint64_t v15 = (void *)sub_1AD9DCBB0();
      id v16 = objc_msgSend(v14, sel_stringFromDate_, v15);

      uint64_t v13 = sub_1AD9DF710();
      uint64_t v14 = v17;
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v18 = *(unsigned __int8 *)(v1 + v12[10] + 168);
    BOOL v19 = v18 != 2 && (v18 & 1) == 0;
    if (v19 && v14)
    {
      v21[0]  = v13;
      v21[1]  = v14;
      sub_1AD85F688();
      uint64_t v13 = sub_1AD9DFEE0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  return v13;
}

uint64_t ScheduleOccurrenceViewModel.localizedWakeUpString.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v34 - v3;
  uint64_t v5 = sub_1AD9DCC70();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v36 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], v0);
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = sub_1AD9DC990();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1AD9DCE40();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18, v20);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCE10();
  uint64_t v23 = type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1AD97B960(v37 + *(int *)(v23 + 20), (uint64_t)v12, &qword_1E9A49F48, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    uint64_t v24 = &qword_1E9A49F48;
    uint64_t v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
    uint64_t v26 = (uint64_t)v12;
  }
  else
  {
    uint64_t v37 = v18;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
    sub_1AD9DCDC0();
    uint64_t v28 = v34;
    uint64_t v27 = v35;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v4, 1, v35) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v36, v4, v27);
      id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
      objc_msgSend(v30, sel_setDateStyle_, 0);
      objc_msgSend(v30, sel_setTimeStyle_, 1);
      id v31 = (void *)sub_1AD9DCBB0();
      id v32 = objc_msgSend(v30, sel_stringFromDate_, v31);

      uint64_t v29 = sub_1AD9DF710();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v36, v27);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v37);
      return v29;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v37);
    uint64_t v24 = &qword_1EB724D70;
    uint64_t v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
    uint64_t v26 = (uint64_t)v4;
  }
  sub_1AD97B8F0(v26, v24, v25);
  return 0;
}

uint64_t ScheduleOccurrenceViewModel.localizedWakeUpDayString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)v21 - v5;
  uint64_t v7 = sub_1AD9DCC70();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1AD97B960(v1 + v12[11], (uint64_t)v6, &qword_1EB724D70, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1AD97B8F0((uint64_t)v6, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    uint64_t v14 = *(void **)(v1 + v12[14]);
    if (v14)
    {
      uint64_t v15 = (void *)sub_1AD9DCBB0();
      id v16 = objc_msgSend(v14, sel_stringFromDate_, v15);

      uint64_t v13 = sub_1AD9DF710();
      uint64_t v14 = v17;
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v18 = *(unsigned __int8 *)(v1 + v12[10] + 168);
    BOOL v19 = v18 != 2 && (v18 & 1) == 0;
    if (v19 && v14)
    {
      v21[0]  = v13;
      v21[1]  = v14;
      sub_1AD85F688();
      uint64_t v13 = sub_1AD9DFEE0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  return v13;
}

uint64_t ScheduleOccurrenceViewModel.localizedHeaderString.getter()
{
  return sub_1AD9760E8(1);
}

uint64_t ScheduleOccurrenceViewModel.localizedHeaderAccessibilityString.getter()
{
  return sub_1AD9760E8(0);
}

uint64_t sub_1AD9760E8(char a1)
{
  uint64_t v3 = sub_1AD9DCE40();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ScheduleOccurrenceViewModel();
  if (*(unsigned char *)(v1 + *(int *)(v8 + 36)))
  {
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v9 = (id)qword_1EB727930;
    uint64_t v10 = sub_1AD9DCA70();
  }
  else
  {
    uint64_t v11 = *(void *)(v1 + *(int *)(v8 + 28));
    sub_1AD9DCE10();
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
    objc_msgSend(v12, sel_setFormattingContext_, 2);
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
    objc_msgSend(v13, sel_setFormattingContext_, 5);
    uint64_t v10 = (uint64_t)_sSo15NSDateFormatterC13SleepHealthUIE13localizedList5using8calendar010standaloneB008listItemB015useShortSymbolsSSSo12HKSPWeekdaysV_10Foundation8CalendarVA2BSbtFZ_0(v11, (uint64_t)v7, v12, (uint64_t)v13, a1 & 1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v10;
}

uint64_t sub_1AD9762EC()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ScheduleOccurrenceViewModel();
  id v0 = (id)HKSPIdentifierStringForWeekdays();
  uint64_t v1 = sub_1AD9DF710();
  unint64_t v3 = v2;

  swift_bridgeObjectRelease();
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    id v5 = (id)HKSPIdentifierStringForWeekdays();
    uint64_t v6 = sub_1AD9DF710();
    unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = 0xE400000000000000;
    uint64_t v6 = 1954047310;
  }
  unsigned __int8 v12 = 3;
  sub_1AD97BA84(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1AD9E3070;
  *(void *)(inited + 32)  = v6;
  *(void *)(inited + 40)  = v8;
  uint64_t v10 = static String.healthAccessibilityIdentifier(_:_:)(&v12, inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v10;
}

__n128 sub_1AD976460@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
  int v4 = *(unsigned __int8 *)(v3 + 56);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  if (v4) {
    __int16 v5 = -772;
  }
  else {
    __int16 v5 = 0x8000;
  }
  __int16 v32 = v5;
  id v6 = (id)qword_1EB727930;
  uint64_t v7 = sub_1AD9DCA70();
  uint64_t v30 = v8;
  uint64_t v31 = v7;
  swift_bridgeObjectRelease();

  uint64_t v9 = *(void *)(v3 + 32);
  uint64_t v10 = *(void *)(v3 + 48);
  char v29 = *(unsigned char *)(v3 + 57);
  swift_retain();
  swift_retain();
  uint64_t v11 = ScheduleOccurrenceViewModel.localizedWindDownString.getter();
  sub_1AD9766CC(v11, v12, 1, (uint64_t)&v35);
  swift_bridgeObjectRelease();
  __int16 v28 = v35;
  __n128 v27 = v36;
  uint64_t v25 = v38;
  uint64_t v26 = v37;
  char v24 = v39;
  uint64_t v22 = v41;
  uint64_t v23 = v40;
  uint64_t v13 = ScheduleOccurrenceViewModel.localizedWindDownDayString.getter();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v3 + 160);
  uint64_t v17 = *(void *)(v3 + 176);
  char v18 = *(unsigned char *)(v3 + 185);
  swift_retain();
  swift_retain();
  uint64_t v33 = sub_1AD9762EC();
  uint64_t v34 = v19;
  sub_1AD9DF790();
  uint64_t v20 = *(void *)(v3 + 192);
  *(_WORD *)a1  = v32;
  *(void *)(a1 + 8)  = v31;
  *(void *)(a1 + 16)  = v30;
  *(void *)(a1 + 24)  = v9;
  *(void *)(a1 + 32)  = v10;
  *(unsigned char *)(a1 + 40)  = v29;
  *(void *)(a1 + 48)  = 0;
  *(void *)(a1 + 56)  = 0;
  *(_WORD *)(a1 + 64)  = v28;
  __n128 result = v27;
  *(__n128 *)(a1 + 72)  = v27;
  *(void *)(a1 + 88)  = v26;
  *(void *)(a1 + 96)  = v25;
  *(unsigned char *)(a1 + 104)  = v24;
  *(void *)(a1 + 112)  = v23;
  *(void *)(a1 + 120)  = v22;
  *(_WORD *)(a1 + 128)  = -772;
  *(void *)(a1 + 136)  = v13;
  *(void *)(a1 + 144)  = v15;
  *(void *)(a1 + 152)  = v16;
  *(void *)(a1 + 160)  = v17;
  *(unsigned char *)(a1 + 168)  = v18;
  *(void *)(a1 + 176)  = 0;
  *(void *)(a1 + 184)  = 0;
  *(void *)(a1 + 192)  = v33;
  *(void *)(a1 + 200)  = v34;
  *(void *)(a1 + 208)  = v20;
  return result;
}

uint64_t sub_1AD9766CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v9 = v4 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
    uint64_t v10 = 121;
    if (a3) {
      uint64_t v10 = 89;
    }
    uint64_t v11 = 96;
    if (a3) {
      uint64_t v11 = 64;
    }
    uint64_t v12 = 112;
    if (a3) {
      uint64_t v12 = 80;
    }
    uint64_t v13 = *(void *)(v9 + v12);
    uint64_t v14 = *(void *)(v9 + v11);
    char v15 = *(unsigned char *)(v9 + v10);
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    *(_WORD *)a4  = -772;
    *(void *)(a4 + 8)  = a1;
    *(void *)(a4 + 16)  = a2;
    *(void *)(a4 + 24)  = v14;
    *(void *)(a4 + 32)  = v13;
    *(unsigned char *)(a4 + 40)  = v15;
    *(void *)(a4 + 48)  = 0;
    *(void *)(a4 + 56)  = 0;
  }
  else
  {
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v17 = (id)qword_1EB727930;
    uint64_t v18 = sub_1AD9DCA70();
    uint64_t v20 = v19;

    uint64_t v21 = v4 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
    uint64_t v22 = *(void *)(v21 + 128);
    uint64_t v23 = *(void *)(v21 + 144);
    LOBYTE(v21)  = *(unsigned char *)(v21 + 153);
    *(_WORD *)a4  = -772;
    *(void *)(a4 + 8)  = v18;
    *(void *)(a4 + 16)  = v20;
    *(void *)(a4 + 24)  = v22;
    *(void *)(a4 + 32)  = v23;
    *(unsigned char *)(a4 + 40)  = v21;
    *(void *)(a4 + 48)  = a1;
    *(void *)(a4 + 56)  = 0;
    swift_retain();
    return swift_retain();
  }
  return result;
}

__n128 sub_1AD976874@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
  int v4 = *(unsigned __int8 *)(v3 + 56);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  if (v4) {
    __int16 v5 = -772;
  }
  else {
    __int16 v5 = 0;
  }
  __int16 v32 = v5;
  id v6 = (id)qword_1EB727930;
  uint64_t v7 = sub_1AD9DCA70();
  uint64_t v30 = v8;
  uint64_t v31 = v7;
  swift_bridgeObjectRelease();

  uint64_t v9 = *(void *)(v3 + 32);
  uint64_t v10 = *(void *)(v3 + 48);
  char v29 = *(unsigned char *)(v3 + 57);
  swift_retain();
  swift_retain();
  uint64_t v11 = ScheduleOccurrenceViewModel.localizedBedtimeString.getter();
  sub_1AD9766CC(v11, v12, 1, (uint64_t)&v35);
  swift_bridgeObjectRelease();
  __int16 v28 = v35;
  __n128 v27 = v36;
  uint64_t v25 = v38;
  uint64_t v26 = v37;
  char v24 = v39;
  uint64_t v22 = v41;
  uint64_t v23 = v40;
  uint64_t v13 = ScheduleOccurrenceViewModel.localizedBedtimeDayString.getter();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v3 + 160);
  uint64_t v17 = *(void *)(v3 + 176);
  char v18 = *(unsigned char *)(v3 + 185);
  swift_retain();
  swift_retain();
  uint64_t v33 = sub_1AD9762EC();
  uint64_t v34 = v19;
  sub_1AD9DF790();
  uint64_t v20 = *(void *)(v3 + 192);
  *(_WORD *)a1  = v32;
  *(void *)(a1 + 8)  = v31;
  *(void *)(a1 + 16)  = v30;
  *(void *)(a1 + 24)  = v9;
  *(void *)(a1 + 32)  = v10;
  *(unsigned char *)(a1 + 40)  = v29;
  *(void *)(a1 + 48)  = 0;
  *(void *)(a1 + 56)  = 0;
  *(_WORD *)(a1 + 64)  = v28;
  __n128 result = v27;
  *(__n128 *)(a1 + 72)  = v27;
  *(void *)(a1 + 88)  = v26;
  *(void *)(a1 + 96)  = v25;
  *(unsigned char *)(a1 + 104)  = v24;
  *(void *)(a1 + 112)  = v23;
  *(void *)(a1 + 120)  = v22;
  *(_WORD *)(a1 + 128)  = -772;
  *(void *)(a1 + 136)  = v13;
  *(void *)(a1 + 144)  = v15;
  *(void *)(a1 + 152)  = v16;
  *(void *)(a1 + 160)  = v17;
  *(unsigned char *)(a1 + 168)  = v18;
  *(void *)(a1 + 176)  = 0;
  *(void *)(a1 + 184)  = 0;
  *(void *)(a1 + 192)  = v33;
  *(void *)(a1 + 200)  = v34;
  *(void *)(a1 + 208)  = v20;
  return result;
}

__n128 sub_1AD976AD8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v4 = v3;
  uint64_t v5 = *(int *)(v3 + 32);
  unsigned int v6 = *(unsigned __int8 *)(v1 + v5);
  if (*(unsigned char *)(v1 + v5))
  {
    if (v6 == 1)
    {
      if (*(unsigned char *)(v1 + *(int *)(v3 + 40) + 56)) {
        __int16 v7 = -772;
      }
      else {
        __int16 v7 = -32767;
      }
      __int16 v37 = v7;
    }
    else
    {
      if (*(unsigned char *)(v1 + *(int *)(v3 + 40) + 56)) {
        __int16 v9 = -772;
      }
      else {
        __int16 v9 = 4096;
      }
      __int16 v37 = v9;
    }
  }
  else
  {
    if (*(unsigned char *)(v1 + *(int *)(v3 + 40) + 56)) {
      __int16 v8 = -772;
    }
    else {
      __int16 v8 = 4097;
    }
    __int16 v37 = v8;
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v10 = (id)qword_1EB727930;
  uint64_t v11 = sub_1AD9DCA70();
  uint64_t v35 = v12;
  uint64_t v36 = v11;
  swift_bridgeObjectRelease();

  uint64_t v13 = v1 + *(int *)(v4 + 40);
  uint64_t v14 = *(void *)(v13 + 32);
  uint64_t v15 = *(void *)(v13 + 48);
  char v34 = *(unsigned char *)(v13 + 57);
  swift_retain();
  swift_retain();
  uint64_t v16 = ScheduleOccurrenceViewModel.localizedWakeUpString.getter();
  sub_1AD9766CC(v16, v17, v6 < 2, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  __int16 v33 = v40;
  __n128 v32 = v41;
  uint64_t v30 = v43;
  uint64_t v31 = v42;
  char v29 = v44;
  uint64_t v27 = v46;
  uint64_t v28 = v45;
  uint64_t v18 = ScheduleOccurrenceViewModel.localizedWakeUpDayString.getter();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v13 + 160);
  uint64_t v22 = *(void *)(v13 + 176);
  char v23 = *(unsigned char *)(v13 + 185);
  swift_retain();
  swift_retain();
  uint64_t v38 = sub_1AD9762EC();
  uint64_t v39 = v24;
  sub_1AD9DF790();
  uint64_t v25 = *(void *)(v13 + 192);
  *(_WORD *)a1  = v37;
  *(void *)(a1 + 8)  = v36;
  *(void *)(a1 + 16)  = v35;
  *(void *)(a1 + 24)  = v14;
  *(void *)(a1 + 32)  = v15;
  *(unsigned char *)(a1 + 40)  = v34;
  *(void *)(a1 + 48)  = 0;
  *(void *)(a1 + 56)  = 0;
  *(_WORD *)(a1 + 64)  = v33;
  __n128 result = v32;
  *(__n128 *)(a1 + 72)  = v32;
  *(void *)(a1 + 88)  = v31;
  *(void *)(a1 + 96)  = v30;
  *(unsigned char *)(a1 + 104)  = v29;
  *(void *)(a1 + 112)  = v28;
  *(void *)(a1 + 120)  = v27;
  *(_WORD *)(a1 + 128)  = -772;
  *(void *)(a1 + 136)  = v18;
  *(void *)(a1 + 144)  = v20;
  *(void *)(a1 + 152)  = v21;
  *(void *)(a1 + 160)  = v22;
  *(unsigned char *)(a1 + 168)  = v23;
  *(void *)(a1 + 176)  = 0;
  *(void *)(a1 + 184)  = 0;
  *(void *)(a1 + 192)  = v38;
  *(void *)(a1 + 200)  = v39;
  *(void *)(a1 + 208)  = v25;
  return result;
}

uint64_t static ScheduleOccurrenceViewModel.emptyViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  unsigned int v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v8);
  id v10 = (char *)&v47 - v9;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)&v47 - v13;
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], v2);
  MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v22 = (char *)&v47 - v21;
  sub_1AD9DE810();
  uint64_t v62 = sub_1AD9DE870();
  swift_release();
  if (qword_1EB7255E0 != -1) {
    swift_once();
  }
  uint64_t v61 = qword_1EB725608;
  swift_retain();
  sub_1AD9DE990();
  sub_1AD9DE8B0();
  uint64_t v60 = sub_1AD9DE920();
  swift_release();
  if (qword_1E9A48F08 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1E9A490B8;
  uint64_t v59 = qword_1E9A4AE58;
  swift_retain();
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v58 = sub_1AD9DE870();
  if (qword_1E9A48F00 != -1) {
    swift_once();
  }
  uint64_t v56 = qword_1E9A4AE50;
  swift_retain();
  uint64_t v55 = sub_1AD9DE870();
  uint64_t v57 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE910();
  sub_1AD9DE8C0();
  uint64_t v54 = sub_1AD9DE920();
  swift_release();
  uint64_t v53 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE990();
  sub_1AD9DE8C0();
  uint64_t v52 = sub_1AD9DE920();
  swift_release();
  uint64_t v51 = qword_1E9A4AE58;
  uint64_t v24 = sub_1AD9DC990();
  uint64_t v25 = *(void (**)(void, void, void, void))(*(void *)(v24 - 8) + 56);
  v25(v22, 1, 1, v24);
  v25(v18, 1, 1, v24);
  uint64_t v26 = sub_1AD9DCC70();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v50 = v18;
  uint64_t v28 = *(void (**)(void, void, void, void))(v27 + 56);
  unsigned int v49 = v22;
  v28(v14, 1, 1, v26);
  v28(v10, 1, 1, v26);
  v28(v6, 1, 1, v26);
  char v29 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v30 = a1 + v29[11];
  v28(v30, 1, 1, v26);
  uint64_t v31 = v29[12];
  uint64_t v48 = v10;
  uint64_t v32 = a1 + v31;
  v28(a1 + v31, 1, 1, v26);
  uint64_t v33 = a1 + v29[13];
  v28(v33, 1, 1, v26);
  sub_1AD870740((uint64_t)v49, a1);
  sub_1AD870740((uint64_t)v50, a1 + v29[5]);
  uint64_t v34 = a1 + v29[6];
  *(void *)uint64_t v34 = 0;
  *(unsigned char *)(v34 + 8)  = 1;
  *(void *)(a1 + v29[7])  = 0;
  uint64_t v35 = v51;
  swift_retain();
  sub_1AD8DF3BC((uint64_t)v14, v33);
  sub_1AD8DF3BC((uint64_t)v48, v32);
  uint64_t result = sub_1AD8DF3BC((uint64_t)v6, v30);
  *(void *)(a1 + v29[14])  = 0;
  *(unsigned char *)(a1 + v29[8])  = 0;
  *(unsigned char *)(a1 + v29[9])  = 0;
  uint64_t v37 = a1 + v29[10];
  *(void *)uint64_t v37 = v62;
  *(unsigned char *)(v37 + 8)  = 2;
  *(_DWORD *)(v37 + 9)  = v75[0];
  *(_DWORD *)(v37 + 12)  = *(_DWORD *)((char *)v75 + 3);
  *(void *)(v37 + 16)  = v61;
  *(_WORD *)(v37 + 24)  = 0;
  *(_DWORD *)(v37 + 26)  = *(_DWORD *)&v73[7];
  *(_WORD *)(v37 + 30)  = v74;
  *(void *)(v37 + 32)  = v60;
  *(unsigned char *)(v37 + 40)  = 2;
  *(_DWORD *)(v37 + 41)  = *(_DWORD *)v73;
  *(_DWORD *)(v37 + 44)  = *(_DWORD *)&v73[3];
  *(void *)(v37 + 48)  = v59;
  *(_WORD *)(v37 + 56)  = 0;
  int v38 = *(_DWORD *)&v71[7];
  *(_WORD *)(v37 + 62)  = v72;
  *(_DWORD *)(v37 + 58)  = v38;
  *(void *)(v37 + 64)  = v58;
  *(unsigned char *)(v37 + 72)  = 2;
  int v39 = *(_DWORD *)v71;
  *(_DWORD *)(v37 + 76)  = *(_DWORD *)&v71[3];
  *(_DWORD *)(v37 + 73)  = v39;
  *(void *)(v37 + 80)  = v56;
  *(_WORD *)(v37 + 88)  = 0;
  int v40 = *(_DWORD *)&v69[7];
  *(_WORD *)(v37 + 94)  = v70;
  *(_DWORD *)(v37 + 90)  = v40;
  *(void *)(v37 + 96)  = v55;
  *(unsigned char *)(v37 + 104)  = 2;
  int v41 = *(_DWORD *)v69;
  *(_DWORD *)(v37 + 108)  = *(_DWORD *)&v69[3];
  *(_DWORD *)(v37 + 105)  = v41;
  *(void *)(v37 + 112)  = v57;
  *(_WORD *)(v37 + 120)  = 0;
  int v42 = *(_DWORD *)&v67[7];
  *(_WORD *)(v37 + 126)  = v68;
  *(_DWORD *)(v37 + 122)  = v42;
  *(void *)(v37 + 128)  = v54;
  *(unsigned char *)(v37 + 136)  = 2;
  int v43 = *(_DWORD *)v67;
  *(_DWORD *)(v37 + 140)  = *(_DWORD *)&v67[3];
  *(_DWORD *)(v37 + 137)  = v43;
  *(void *)(v37 + 144)  = v53;
  *(_WORD *)(v37 + 152)  = 0;
  int v44 = *(_DWORD *)&v65[7];
  *(_WORD *)(v37 + 158)  = v66;
  *(_DWORD *)(v37 + 154)  = v44;
  *(void *)(v37 + 160)  = v52;
  *(unsigned char *)(v37 + 168)  = 2;
  int v45 = *(_DWORD *)v65;
  *(_DWORD *)(v37 + 172)  = *(_DWORD *)&v65[3];
  *(_DWORD *)(v37 + 169)  = v45;
  *(void *)(v37 + 176)  = v35;
  *(_WORD *)(v37 + 184)  = 0;
  int v46 = v63;
  *(_WORD *)(v37 + 190)  = v64;
  *(_DWORD *)(v37 + 186)  = v46;
  *(void *)(v37 + 192)  = 0;
  return result;
}

__n128 ScheduleOccurrenceViewModel.init(bedtimeComponents:wakeUpComponents:windDownTimeInterval:weekdays:relativeWindDownDate:relativeBedtimeDate:relativeWakeUpDate:relativeWeekdayFormatter:alarmState:isNextOccurrence:viewStyle:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char *a11, char a12, long long *a13)
{
  char v29 = *a11;
  long long v42 = a13[10];
  long long v43 = a13[11];
  uint64_t v44 = *((void *)a13 + 24);
  long long v38 = a13[6];
  long long v39 = a13[7];
  long long v40 = a13[8];
  long long v41 = a13[9];
  long long v34 = a13[2];
  long long v35 = a13[3];
  long long v36 = a13[4];
  long long v37 = a13[5];
  long long v32 = *a13;
  __n128 v33 = (__n128)a13[1];
  uint64_t v16 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v17 = a9 + v16[11];
  uint64_t v18 = sub_1AD9DCC70();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  v19(v17, 1, 1, v18);
  uint64_t v20 = a9 + v16[12];
  v19(v20, 1, 1, v18);
  uint64_t v21 = a9 + v16[13];
  v19(v21, 1, 1, v18);
  sub_1AD870740(a1, a9);
  sub_1AD870740(a2, a9 + v16[5]);
  uint64_t v22 = a9 + v16[6];
  *(void *)uint64_t v22 = a3;
  *(unsigned char *)(v22 + 8)  = a4 & 1;
  *(void *)(a9 + v16[7])  = a5;
  sub_1AD8DF3BC(a6, v21);
  sub_1AD8DF3BC(a7, v20);
  sub_1AD8DF3BC(a8, v17);
  *(void *)(a9 + v16[14])  = a10;
  *(unsigned char *)(a9 + v16[8])  = v29;
  *(unsigned char *)(a9 + v16[9])  = a12;
  uint64_t v23 = a9 + v16[10];
  *(_OWORD *)(v23 + 160)  = v42;
  *(_OWORD *)(v23 + 176)  = v43;
  *(void *)(v23 + 192)  = v44;
  *(_OWORD *)(v23 + 96)  = v38;
  *(_OWORD *)(v23 + 112)  = v39;
  *(_OWORD *)(v23 + 128)  = v40;
  *(_OWORD *)(v23 + 144)  = v41;
  *(_OWORD *)(v23 + 32)  = v34;
  *(_OWORD *)(v23 + 48)  = v35;
  *(_OWORD *)(v23 + 64)  = v36;
  *(_OWORD *)(v23 + 80)  = v37;
  __n128 result = v33;
  *(_OWORD *)uint64_t v23 = v32;
  *(__n128 *)(v23 + 16)  = v33;
  return result;
}

uint64_t ScheduleOccurrenceViewModel.id.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AD9DCC70();
  uint64_t v57 = *(void *)(v2 - 8);
  uint64_t v58 = v2;
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v56 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v59 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v55 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v16 = (char *)&v54 - v15;
  uint64_t v17 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], v9);
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v21 = (char *)&v54 - v20;
  sub_1AD97BA84(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16)  = xmmword_1AD9EB6D0;
  sub_1AD97B960(v1, (uint64_t)v21, &qword_1E9A49F48, v17);
  *(void *)(v22 + 32)  = sub_1AD9DF730();
  *(void *)(v22 + 40)  = v23;
  sub_1AD97B960(v1 + v5[5], (uint64_t)v21, &qword_1E9A49F48, v17);
  *(void *)(v22 + 48)  = sub_1AD9DF730();
  *(void *)(v22 + 56)  = v24;
  id v25 = (id)NSStringFromHKSPWeekdays();
  uint64_t v26 = sub_1AD9DF710();
  uint64_t v28 = v27;

  *(void *)(v22 + 64)  = v26;
  *(void *)(v22 + 72)  = v28;
  char v61 = *(unsigned char *)(v1 + v5[8]);
  *(void *)(v22 + 80)  = sub_1AD9DF730();
  *(void *)(v22 + 88)  = v29;
  uint64_t v30 = 1702195828;
  if (!*(unsigned char *)(v1 + v5[9])) {
    uint64_t v30 = 0x65736C6166;
  }
  unint64_t v31 = 0xE500000000000000;
  if (*(unsigned char *)(v1 + v5[9])) {
    unint64_t v31 = 0xE400000000000000;
  }
  *(void *)(v22 + 96)  = v30;
  *(void *)(v22 + 104)  = v31;
  sub_1AD97B960(v1 + v5[11], (uint64_t)v16, &qword_1EB724D70, v8);
  *(void *)(v22 + 112)  = sub_1AD9DF730();
  *(void *)(v22 + 120)  = v32;
  sub_1AD97B960(v1 + v5[12], (uint64_t)v16, &qword_1EB724D70, v8);
  uint64_t v33 = (uint64_t)v59;
  *(void *)(v22 + 128)  = sub_1AD9DF730();
  *(void *)(v22 + 136)  = v34;
  uint64_t v35 = *(void *)(v1 + v5[10] + 192);
  sub_1AD91D244(v1, v33);
  if ((v35 & 2) != 0)
  {
    char v36 = sub_1AD973C2C();
    sub_1AD97B9E0(v33);
    if (v36)
    {
      if ((*(unsigned char *)(v1 + v5[6] + 8) & 1) == 0)
      {
        uint64_t v37 = sub_1AD9DF960();
        uint64_t v39 = v38;
        unint64_t v41 = *(void *)(v22 + 16);
        unint64_t v40 = *(void *)(v22 + 24);
        if (v41 >= v40 >> 1) {
          uint64_t v22 = (uint64_t)sub_1AD99A70C((void *)(v40 > 1), v41 + 1, 1, (void *)v22);
        }
        *(void *)(v22 + 16)  = v41 + 1;
        uint64_t v42 = v22 + 16 * v41;
        *(void *)(v42 + 32)  = v37;
        *(void *)(v42 + 40)  = v39;
      }
      uint64_t v43 = v55;
      sub_1AD97B960(v1 + v5[13], v55, &qword_1EB724D70, MEMORY[0x1E4F27928]);
      uint64_t v45 = v57;
      uint64_t v44 = v58;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v43, 1, v58) == 1)
      {
        sub_1AD97B8F0(v43, &qword_1EB724D70, MEMORY[0x1E4F27928]);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v56, v43, v44);
        sub_1AD97BA3C((unint64_t *)&qword_1EB725230, MEMORY[0x1E4F27928]);
        uint64_t v46 = sub_1AD9E0280();
        uint64_t v48 = v47;
        unint64_t v50 = *(void *)(v22 + 16);
        unint64_t v49 = *(void *)(v22 + 24);
        if (v50 >= v49 >> 1) {
          uint64_t v22 = (uint64_t)sub_1AD99A70C((void *)(v49 > 1), v50 + 1, 1, (void *)v22);
        }
        *(void *)(v22 + 16)  = v50 + 1;
        uint64_t v51 = v22 + 16 * v50;
        *(void *)(v51 + 32)  = v46;
        *(void *)(v51 + 40)  = v48;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v56, v44);
      }
    }
  }
  else
  {
    sub_1AD97B9E0(v33);
  }
  uint64_t v60 = v22;
  sub_1AD97BA84(0, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v52 = sub_1AD9DF690();
  swift_bridgeObjectRelease();
  return v52;
}

uint64_t ScheduleOccurrenceViewModel.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AD9DCC70();
  uint64_t v43 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v42 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v8 = MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v41 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v40 = (uint64_t)&v39 - v12;
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v39 = (uint64_t)&v39 - v14;
  uint64_t v15 = sub_1AD9DC990();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v17);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], v5);
  uint64_t v23 = MEMORY[0x1F4188790](v21 - 8, v22);
  id v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23, v26);
  uint64_t v28 = (char *)&v39 - v27;
  uint64_t v44 = v1;
  sub_1AD97B960(v1, (uint64_t)&v39 - v27, &qword_1E9A49F48, v20);
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v29(v28, 1, v15) == 1)
  {
    sub_1AD9E03C0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v28, v15);
    sub_1AD9E03C0();
    sub_1AD97BA3C(&qword_1E9A4D0C0, MEMORY[0x1E4F26F90]);
    sub_1AD9DF650();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  uint64_t v30 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1AD97B960(v44 + v30[5], (uint64_t)v25, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  if (v29(v25, 1, v15) == 1)
  {
    sub_1AD9E03C0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v25, v15);
    sub_1AD9E03C0();
    sub_1AD97BA3C(&qword_1E9A4D0C0, MEMORY[0x1E4F26F90]);
    sub_1AD9DF650();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  unint64_t v31 = v42;
  uint64_t v32 = v44;
  if (*(unsigned char *)(v44 + v30[6] + 8) == 1)
  {
    sub_1AD9E03C0();
  }
  else
  {
    sub_1AD9E03C0();
    sub_1AD9E03D0();
  }
  uint64_t v33 = v43;
  uint64_t v34 = v39;
  sub_1AD97B960(v32 + v30[13], v39, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  if (v35(v34, 1, v2) == 1)
  {
    sub_1AD9E03C0();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v31, v34, v2);
    sub_1AD9E03C0();
    sub_1AD97BA3C(&qword_1E9A4D0C8, MEMORY[0x1E4F27928]);
    sub_1AD9DF650();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v2);
  }
  uint64_t v36 = v40;
  sub_1AD97B960(v32 + v30[12], v40, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  if (v35(v36, 1, v2) == 1)
  {
    sub_1AD9E03C0();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v31, v36, v2);
    sub_1AD9E03C0();
    sub_1AD97BA3C(&qword_1E9A4D0C8, MEMORY[0x1E4F27928]);
    sub_1AD9DF650();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v2);
  }
  uint64_t v37 = v41;
  sub_1AD97B960(v32 + v30[11], v41, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  if (v35(v37, 1, v2) == 1)
  {
    sub_1AD9E03C0();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v31, v37, v2);
    sub_1AD9E03C0();
    sub_1AD97BA3C(&qword_1E9A4D0C8, MEMORY[0x1E4F27928]);
    sub_1AD9DF650();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v2);
  }
  sub_1AD9E03B0();
  sub_1AD9E03B0();
  return sub_1AD9E03C0();
}

uint64_t ScheduleOccurrenceViewModel.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD978494@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ScheduleOccurrenceViewModel.id.getter();
  *a1  = result;
  a1[1]  = v3;
  return result;
}

uint64_t ScheduleOccurrenceViewModel.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v57 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v56 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v6 = (char *)&v56 - v5;
  uint64_t v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], v2);
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (char *)&v56 - v10;
  sub_1AD97F2E8(0, (unint64_t *)&qword_1E9A4A978, (uint64_t (*)(uint64_t))sub_1AD8C93A0, MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16)  = xmmword_1AD9EC710;
  sub_1AD97B960(v1, (uint64_t)v11, &qword_1E9A49F48, v7);
  uint64_t v13 = sub_1AD9DF730();
  uint64_t v15 = v14;
  *(void *)(v12 + 56)  = MEMORY[0x1E4FBB1A0];
  unint64_t v16 = sub_1AD89E5A8();
  *(void *)(v12 + 64)  = v16;
  *(void *)(v12 + 32)  = v13;
  *(void *)(v12 + 40)  = v15;
  uint64_t v17 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1AD97B960(v1 + v17[5], (uint64_t)v11, &qword_1E9A49F48, v7);
  uint64_t v18 = sub_1AD9DF730();
  uint64_t v19 = MEMORY[0x1E4FBB1A0];
  *(void *)(v12 + 96)  = MEMORY[0x1E4FBB1A0];
  *(void *)(v12 + 104)  = v16;
  *(void *)(v12 + 72)  = v18;
  *(void *)(v12 + 80)  = v20;
  uint64_t v21 = v1 + v17[6];
  uint64_t v22 = *(void *)v21;
  LOBYTE(v21)  = *(unsigned char *)(v21 + 8);
  *(void *)&v71[0]  = v22;
  BYTE8(v71[0])  = v21;
  sub_1AD97BA84(0, (unint64_t *)&qword_1EB725080, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB718]);
  uint64_t v23 = sub_1AD9DF730();
  *(void *)(v12 + 136)  = v19;
  *(void *)(v12 + 144)  = v16;
  *(void *)(v12 + 112)  = v23;
  *(void *)(v12 + 120)  = v24;
  id v25 = (id)NSStringFromHKSPWeekdays();
  uint64_t v26 = sub_1AD9DF710();
  uint64_t v28 = v27;

  *(void *)(v12 + 176)  = v19;
  *(void *)(v12 + 184)  = v16;
  *(void *)(v12 + 152)  = v26;
  *(void *)(v12 + 160)  = v28;
  LOBYTE(v71[0])  = *(unsigned char *)(v1 + v17[8]);
  uint64_t v29 = sub_1AD9DF730();
  *(void *)(v12 + 216)  = v19;
  *(void *)(v12 + 224)  = v16;
  *(void *)(v12 + 192)  = v29;
  *(void *)(v12 + 200)  = v30;
  uint64_t v31 = 1702195828;
  if (!*(unsigned char *)(v1 + v17[9])) {
    uint64_t v31 = 0x65736C6166;
  }
  unint64_t v32 = 0xE500000000000000;
  if (*(unsigned char *)(v1 + v17[9])) {
    unint64_t v32 = 0xE400000000000000;
  }
  *(void *)(v12 + 256)  = v19;
  *(void *)(v12 + 264)  = v16;
  *(void *)(v12 + 232)  = v31;
  *(void *)(v12 + 240)  = v32;
  uint64_t v33 = v57;
  sub_1AD97B960(v1 + v17[11], (uint64_t)v6, &qword_1EB724D70, v57);
  uint64_t v34 = sub_1AD9DF730();
  *(void *)(v12 + 296)  = v19;
  *(void *)(v12 + 304)  = v16;
  *(void *)(v12 + 272)  = v34;
  *(void *)(v12 + 280)  = v35;
  sub_1AD97B960(v1 + v17[12], (uint64_t)v6, &qword_1EB724D70, v33);
  uint64_t v36 = sub_1AD9DF730();
  *(void *)(v12 + 336)  = v19;
  *(void *)(v12 + 344)  = v16;
  *(void *)(v12 + 312)  = v36;
  *(void *)(v12 + 320)  = v37;
  sub_1AD97B960(v1 + v17[13], (uint64_t)v6, &qword_1EB724D70, v33);
  uint64_t v38 = sub_1AD9DF730();
  *(void *)(v12 + 376)  = v19;
  *(void *)(v12 + 384)  = v16;
  *(void *)(v12 + 352)  = v38;
  *(void *)(v12 + 360)  = v39;
  uint64_t v40 = v1 + v17[10];
  long long v41 = *(_OWORD *)(v40 + 144);
  long long v42 = *(_OWORD *)(v40 + 176);
  long long v80 = *(_OWORD *)(v40 + 160);
  long long v81 = v42;
  long long v43 = *(_OWORD *)(v40 + 80);
  long long v44 = *(_OWORD *)(v40 + 112);
  long long v76 = *(_OWORD *)(v40 + 96);
  long long v77 = v44;
  long long v45 = *(_OWORD *)(v40 + 112);
  long long v46 = *(_OWORD *)(v40 + 144);
  long long v78 = *(_OWORD *)(v40 + 128);
  long long v79 = v46;
  long long v47 = *(_OWORD *)(v40 + 16);
  long long v48 = *(_OWORD *)(v40 + 48);
  long long v72 = *(_OWORD *)(v40 + 32);
  long long v73 = v48;
  long long v49 = *(_OWORD *)(v40 + 48);
  long long v50 = *(_OWORD *)(v40 + 80);
  long long v74 = *(_OWORD *)(v40 + 64);
  long long v75 = v50;
  long long v51 = *(_OWORD *)(v40 + 16);
  v71[0]  = *(_OWORD *)v40;
  v71[1]  = v51;
  long long v52 = *(_OWORD *)(v40 + 176);
  long long v68 = v80;
  long long v69 = v52;
  long long v64 = v76;
  long long v65 = v45;
  long long v66 = v78;
  long long v67 = v41;
  long long v60 = v72;
  long long v61 = v49;
  long long v62 = v74;
  long long v63 = v43;
  uint64_t v82 = *(void *)(v40 + 192);
  uint64_t v70 = *(void *)(v40 + 192);
  long long v58 = v71[0];
  long long v59 = v47;
  sub_1AD97B814((uint64_t)v71);
  uint64_t v53 = sub_1AD9DF730();
  *(void *)(v12 + 416)  = v19;
  *(void *)(v12 + 424)  = v16;
  *(void *)(v12 + 392)  = v53;
  *(void *)(v12 + 400)  = v54;
  return sub_1AD9DF720();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.font.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.titleCased.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.color.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hideIcons.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hidden.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  swift_retain();
  sub_1AD9DE880();
  swift_release();
  if (v1 != 2) {
    sub_1AD9E03C0();
  }
  sub_1AD9E03C0();
  swift_retain();
  sub_1AD9DEE80();
  swift_release();
  sub_1AD9E03C0();
  return sub_1AD9E03C0();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD978A58()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD978AC8()
{
  return sub_1AD9E03E0();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.Options.rawValue.getter()
{
  return *(void *)v0;
}

SleepHealthUI::ScheduleOccurrenceViewModel::ViewStyle::Options __swiftcall ScheduleOccurrenceViewModel.ViewStyle.Options.init(rawValue:)(SleepHealthUI::ScheduleOccurrenceViewModel::ViewStyle::Options rawValue)
{
  v1->rawValue  = rawValue.rawValue;
  return rawValue;
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.headerTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 24);
  char v5 = *(unsigned char *)(v1 + 25);
  *(void *)a1  = *(void *)v1;
  *(unsigned char *)(a1 + 8)  = v2;
  *(void *)(a1 + 16)  = v3;
  *(unsigned char *)(a1 + 24)  = v4;
  *(unsigned char *)(a1 + 25)  = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.titleTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  char v4 = *(unsigned char *)(v1 + 56);
  char v5 = *(unsigned char *)(v1 + 57);
  *(void *)a1  = *(void *)(v1 + 32);
  *(unsigned char *)(a1 + 8)  = v2;
  *(void *)(a1 + 16)  = v3;
  *(unsigned char *)(a1 + 24)  = v4;
  *(unsigned char *)(a1 + 25)  = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.timeTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 80);
  char v4 = *(unsigned char *)(v1 + 88);
  char v5 = *(unsigned char *)(v1 + 89);
  *(void *)a1  = *(void *)(v1 + 64);
  *(unsigned char *)(a1 + 8)  = v2;
  *(void *)(a1 + 16)  = v3;
  *(unsigned char *)(a1 + 24)  = v4;
  *(unsigned char *)(a1 + 25)  = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.disabledTimeTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 112);
  char v4 = *(unsigned char *)(v1 + 120);
  char v5 = *(unsigned char *)(v1 + 121);
  *(void *)a1  = *(void *)(v1 + 96);
  *(unsigned char *)(a1 + 8)  = v2;
  *(void *)(a1 + 16)  = v3;
  *(unsigned char *)(a1 + 24)  = v4;
  *(unsigned char *)(a1 + 25)  = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.unsetTimeTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 136);
  uint64_t v3 = *(void *)(v1 + 144);
  char v4 = *(unsigned char *)(v1 + 152);
  char v5 = *(unsigned char *)(v1 + 153);
  *(void *)a1  = *(void *)(v1 + 128);
  *(unsigned char *)(a1 + 8)  = v2;
  *(void *)(a1 + 16)  = v3;
  *(unsigned char *)(a1 + 24)  = v4;
  *(unsigned char *)(a1 + 25)  = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.dayTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 168);
  uint64_t v3 = *(void *)(v1 + 176);
  char v4 = *(unsigned char *)(v1 + 184);
  char v5 = *(unsigned char *)(v1 + 185);
  *(void *)a1  = *(void *)(v1 + 160);
  *(unsigned char *)(a1 + 8)  = v2;
  *(void *)(a1 + 16)  = v3;
  *(unsigned char *)(a1 + 24)  = v4;
  *(unsigned char *)(a1 + 25)  = v5;
  swift_retain();
  return swift_retain();
}

void ScheduleOccurrenceViewModel.ViewStyle.options.getter(void *a1@<X8>)
{
  *a1  = *(void *)(v1 + 192);
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepRoomNextOccurrenceStyle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD978FEC(MEMORY[0x1E4F3E0C8], a1);
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepRoomRepeatOccurrenceStyle.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1AD9DE810();
  sub_1AD9DE8C0();
  uint64_t v15 = sub_1AD9DE920();
  swift_release();
  if (qword_1E9A48F00 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1E9A4AE50;
  swift_retain();
  sub_1AD9DE990();
  sub_1AD9DE8C0();
  uint64_t v13 = sub_1AD9DE920();
  swift_release();
  if (qword_1E9A48F08 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E9A4AE58;
  uint64_t v3 = qword_1E9A490B8;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_1AD9DE870();
  uint64_t v4 = qword_1E9A4AE50;
  swift_retain();
  uint64_t v5 = sub_1AD9DE870();
  uint64_t v6 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE910();
  sub_1AD9DE8C0();
  uint64_t v7 = sub_1AD9DE920();
  swift_release();
  uint64_t v8 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE990();
  sub_1AD9DE8C0();
  uint64_t v9 = sub_1AD9DE920();
  swift_release();
  uint64_t v10 = qword_1E9A4AE58;
  *(void *)a1  = v15;
  *(unsigned char *)(a1 + 8)  = 2;
  *(void *)(a1 + 16)  = v14;
  *(_WORD *)(a1 + 24)  = 0;
  *(void *)(a1 + 32)  = v13;
  *(unsigned char *)(a1 + 40)  = 2;
  *(void *)(a1 + 48)  = v2;
  *(_WORD *)(a1 + 56)  = 0;
  *(void *)(a1 + 64)  = v12;
  *(unsigned char *)(a1 + 72)  = 2;
  *(void *)(a1 + 80)  = v4;
  *(_WORD *)(a1 + 88)  = 0;
  *(void *)(a1 + 96)  = v5;
  *(unsigned char *)(a1 + 104)  = 2;
  *(void *)(a1 + 112)  = v6;
  *(_WORD *)(a1 + 120)  = 0;
  *(void *)(a1 + 128)  = v7;
  *(unsigned char *)(a1 + 136)  = 2;
  *(void *)(a1 + 144)  = v8;
  *(_WORD *)(a1 + 152)  = 0;
  *(void *)(a1 + 160)  = v9;
  *(unsigned char *)(a1 + 168)  = 2;
  *(void *)(a1 + 176)  = v10;
  *(_WORD *)(a1 + 184)  = 0;
  *(void *)(a1 + 192)  = 0;
  return swift_retain();
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepFullScheduleStyle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD978FEC(MEMORY[0x1E4F3E0C8], a1);
}

uint64_t sub_1AD978FEC@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  sub_1AD9DE810();
  uint64_t v17 = sub_1AD9DE870();
  swift_release();
  if (qword_1EB7255E0 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1EB725608;
  swift_retain();
  sub_1AD9DE990();
  a1();
  uint64_t v15 = sub_1AD9DE920();
  swift_release();
  if (qword_1E9A48F08 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1E9A4AE58;
  uint64_t v5 = qword_1E9A490B8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_1AD9DE870();
  if (qword_1E9A48F00 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1E9A4AE50;
  swift_retain();
  uint64_t v7 = sub_1AD9DE870();
  uint64_t v8 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE910();
  sub_1AD9DE8C0();
  uint64_t v9 = sub_1AD9DE920();
  swift_release();
  uint64_t v10 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE990();
  sub_1AD9DE8C0();
  uint64_t v11 = sub_1AD9DE920();
  swift_release();
  uint64_t v12 = qword_1E9A4AE58;
  *(void *)a2  = v17;
  *(unsigned char *)(a2 + 8)  = 2;
  *(void *)(a2 + 16)  = v16;
  *(_WORD *)(a2 + 24)  = 0;
  *(void *)(a2 + 32)  = v15;
  *(unsigned char *)(a2 + 40)  = 2;
  *(void *)(a2 + 48)  = v4;
  *(_WORD *)(a2 + 56)  = 0;
  *(void *)(a2 + 64)  = v14;
  *(unsigned char *)(a2 + 72)  = 2;
  *(void *)(a2 + 80)  = v6;
  *(_WORD *)(a2 + 88)  = 0;
  *(void *)(a2 + 96)  = v7;
  *(unsigned char *)(a2 + 104)  = 2;
  *(void *)(a2 + 112)  = v8;
  *(_WORD *)(a2 + 120)  = 0;
  *(void *)(a2 + 128)  = v9;
  *(unsigned char *)(a2 + 136)  = 2;
  *(void *)(a2 + 144)  = v10;
  *(_WORD *)(a2 + 152)  = 0;
  *(void *)(a2 + 160)  = v11;
  *(unsigned char *)(a2 + 168)  = 2;
  *(void *)(a2 + 176)  = v12;
  *(_WORD *)(a2 + 184)  = 0;
  *(void *)(a2 + 192)  = 0;
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD9794B4()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD9794F8()
{
  return sub_1AD9E03E0();
}

uint64_t type metadata accessor for ScheduleOccurrenceViewModel()
{
  uint64_t result = qword_1E9A4D110;
  if (!qword_1E9A4D110) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD979584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = a1[8];
  unsigned __int8 v3 = a1[24];
  int v4 = a1[25];
  int v5 = a2[8];
  unsigned __int8 v6 = a2[24];
  int v7 = a2[25];
  if ((sub_1AD9DE850() & 1) == 0) {
    return 0;
  }
  if (v2 == 2)
  {
    if (v5 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v5 == 2 || ((((v2 & 1) == 0) ^ v5) & 1) == 0) {
      return result;
    }
  }
  char v9 = sub_1AD9DEE40();
  if ((v3 ^ v6)) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = v4 ^ v7 ^ 1;
  }
  if (v9) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t _s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = a1[2];
  char v4 = *((unsigned char *)a1 + 24);
  char v5 = *((unsigned char *)a1 + 25);
  uint64_t v62 = a1[4];
  char v61 = *((unsigned char *)a1 + 40);
  uint64_t v60 = a1[6];
  char v58 = *((unsigned char *)a1 + 57);
  char v59 = *((unsigned char *)a1 + 56);
  uint64_t v52 = a1[8];
  char v51 = *((unsigned char *)a1 + 72);
  uint64_t v50 = a1[10];
  char v49 = *((unsigned char *)a1 + 88);
  char v48 = *((unsigned char *)a1 + 89);
  uint64_t v42 = a1[12];
  char v41 = *((unsigned char *)a1 + 104);
  uint64_t v40 = a1[14];
  char v38 = *((unsigned char *)a1 + 121);
  char v39 = *((unsigned char *)a1 + 120);
  uint64_t v32 = a1[16];
  char v31 = *((unsigned char *)a1 + 136);
  uint64_t v30 = a1[18];
  char v28 = *((unsigned char *)a1 + 153);
  char v29 = *((unsigned char *)a1 + 152);
  uint64_t v26 = a1[20];
  char v25 = *((unsigned char *)a1 + 168);
  uint64_t v24 = a1[22];
  char v23 = *((unsigned char *)a1 + 184);
  uint64_t v68 = *a1;
  char v21 = *((unsigned char *)a1 + 185);
  uint64_t v22 = a1[24];
  char v69 = v2;
  uint64_t v6 = *a2;
  uint64_t v70 = v3;
  char v7 = *((unsigned char *)a2 + 8);
  char v71 = v4;
  uint64_t v8 = a2[2];
  char v72 = v5;
  char v9 = *((unsigned char *)a2 + 24);
  uint64_t v63 = v6;
  LOBYTE(v6)  = *((unsigned char *)a2 + 25);
  char v64 = v7;
  uint64_t v53 = a2[4];
  uint64_t v65 = v8;
  LOBYTE(v8)  = *((unsigned char *)a2 + 40);
  char v66 = v9;
  uint64_t v57 = a2[6];
  char v67 = v6;
  char v55 = *((unsigned char *)a2 + 56);
  char v56 = v8;
  char v54 = *((unsigned char *)a2 + 57);
  uint64_t v47 = a2[8];
  uint64_t v44 = a2[10];
  char v45 = *((unsigned char *)a2 + 88);
  char v46 = *((unsigned char *)a2 + 72);
  char v43 = *((unsigned char *)a2 + 89);
  uint64_t v33 = a2[12];
  char v34 = *((unsigned char *)a2 + 104);
  uint64_t v35 = a2[14];
  char v36 = *((unsigned char *)a2 + 120);
  char v37 = *((unsigned char *)a2 + 121);
  uint64_t v27 = a2[16];
  char v10 = *((unsigned char *)a2 + 136);
  uint64_t v11 = a2[18];
  char v12 = *((unsigned char *)a2 + 152);
  char v13 = *((unsigned char *)a2 + 153);
  uint64_t v14 = a2[20];
  char v15 = *((unsigned char *)a2 + 168);
  uint64_t v16 = a2[22];
  char v17 = *((unsigned char *)a2 + 184);
  char v18 = *((unsigned char *)a2 + 185);
  uint64_t v19 = a2[24];
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0; {
  uint64_t v68 = v62;
  }
  char v69 = v61;
  uint64_t v70 = v60;
  char v71 = v59;
  char v72 = v58;
  uint64_t v63 = v53;
  char v64 = v56;
  uint64_t v65 = v57;
  char v66 = v55;
  char v67 = v54;
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0; {
  uint64_t v68 = v52;
  }
  char v69 = v51;
  uint64_t v70 = v50;
  char v71 = v49;
  char v72 = v48;
  uint64_t v63 = v47;
  char v64 = v46;
  uint64_t v65 = v44;
  char v66 = v45;
  char v67 = v43;
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0; {
  uint64_t v68 = v42;
  }
  char v69 = v41;
  uint64_t v70 = v40;
  char v71 = v39;
  char v72 = v38;
  uint64_t v63 = v33;
  char v64 = v34;
  uint64_t v65 = v35;
  char v66 = v36;
  char v67 = v37;
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0; {
  uint64_t v68 = v32;
  }
  char v69 = v31;
  uint64_t v70 = v30;
  char v71 = v29;
  char v72 = v28;
  uint64_t v63 = v27;
  char v64 = v10;
  uint64_t v65 = v11;
  char v66 = v12;
  char v67 = v13;
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0; {
  uint64_t v68 = v26;
  }
  char v69 = v25;
  uint64_t v70 = v24;
  char v71 = v23;
  char v72 = v21;
  uint64_t v63 = v14;
  char v64 = v15;
  uint64_t v65 = v16;
  char v66 = v17;
  char v67 = v18;
  return _s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & (v22 == v19);
}

uint64_t _s13SleepHealthUI27ScheduleOccurrenceViewModelV2eeoiySbAC_ACtFZ_0(unsigned int (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v246 = a2;
  uint64_t v220 = sub_1AD9DCC70();
  uint64_t v222 = *(void *)(v220 - 8);
  MEMORY[0x1F4188790](v220, v3);
  uint64_t v217 = &v211[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8, v8);
  long long v213 = &v211[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10, v11);
  v215  = &v211[-v12];
  MEMORY[0x1F4188790](v13, v14);
  CGFloat v218 = &v211[-v15];
  sub_1AD97F214(0, (unint64_t *)&qword_1E9A4C730, &qword_1EB724D70, v5);
  uint64_t v221 = v16;
  MEMORY[0x1F4188790](v16, v17);
  long long v214 = &v211[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v19, v20);
  long long v216 = &v211[-v21];
  MEMORY[0x1F4188790](v22, v23);
  uint64_t v219 = &v211[-v24];
  long long v227 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  MEMORY[0x1F4188790](v227, v25);
  long long v233 = &v211[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v27, v28);
  long long v232 = &v211[-v29];
  MEMORY[0x1F4188790](v30, v31);
  v231  = &v211[-v32];
  MEMORY[0x1F4188790](v33, v34);
  long long v230 = &v211[-v35];
  MEMORY[0x1F4188790](v36, v37);
  long long v239 = &v211[-v38];
  MEMORY[0x1F4188790](v39, v40);
  long long v240 = &v211[-v41];
  MEMORY[0x1F4188790](v42, v43);
  long long v238 = &v211[-v44];
  MEMORY[0x1F4188790](v45, v46);
  CGAffineTransform v237 = &v211[-v47];
  MEMORY[0x1F4188790](v48, v49);
  long long v235 = &v211[-v50];
  MEMORY[0x1F4188790](v51, v52);
  long long v234 = &v211[-v53];
  MEMORY[0x1F4188790](v54, v55);
  uint64_t v244 = (uint64_t)&v211[-v56];
  MEMORY[0x1F4188790](v57, v58);
  long long v236 = &v211[-v59];
  MEMORY[0x1F4188790](v60, v61);
  long long v229 = &v211[-v62];
  MEMORY[0x1F4188790](v63, v64);
  long long v243 = &v211[-v65];
  MEMORY[0x1F4188790](v66, v67);
  long long v241 = &v211[-v68];
  MEMORY[0x1F4188790](v69, v70);
  uint64_t v242 = (uint64_t)&v211[-v71];
  uint64_t v72 = sub_1AD9DC990();
  uint64_t v73 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72, v74);
  long long v224 = &v211[-((v75 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v76 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
  sub_1AD97F214(0, &qword_1E9A4D120, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  uint64_t v78 = v77;
  MEMORY[0x1F4188790](v77, v79);
  long long v226 = &v211[-((v80 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v81, v82);
  uint64_t v84 = &v211[-v83];
  sub_1AD97F2E8(0, &qword_1E9A49F48, v76, v6);
  MEMORY[0x1F4188790](v85 - 8, v86);
  v223  = &v211[-((v87 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v88, v89);
  uint64_t v91 = &v211[-v90];
  MEMORY[0x1F4188790](v92, v93);
  long long v95 = &v211[-v94];
  MEMORY[0x1F4188790](v96, v97);
  id v99 = &v211[-v98];
  long long v245 = a1;
  sub_1AD97B960((uint64_t)a1, (uint64_t)&v211[-v98], &qword_1E9A49F48, v76);
  sub_1AD97B960(v246, (uint64_t)v95, &qword_1E9A49F48, v76);
  uint64_t v225 = v78;
  uint64_t v100 = (uint64_t)&v84[*(int *)(v78 + 48)];
  sub_1AD97B960((uint64_t)v99, (uint64_t)v84, &qword_1E9A49F48, v76);
  sub_1AD97B960((uint64_t)v95, v100, &qword_1E9A49F48, v76);
  uint64_t v228 = v73;
  uint64_t v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  if (v101((uint64_t)v84, 1, v72) == 1)
  {
    uint64_t v102 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
    sub_1AD97B8F0((uint64_t)v95, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    sub_1AD97B8F0((uint64_t)v99, &qword_1E9A49F48, v102);
    int v103 = v101(v100, 1, v72);
    uint64_t v105 = v243;
    uint64_t v104 = v244;
    if (v103 == 1)
    {
      sub_1AD97B8F0((uint64_t)v84, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
      uint64_t v106 = v242;
      sub_1AD91D244((uint64_t)v245, v242);
      int v107 = v241;
      sub_1AD91D244(v246, (uint64_t)v241);
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  sub_1AD97B960((uint64_t)v84, (uint64_t)v91, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  if (v101(v100, 1, v72) == 1)
  {
    char v108 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
    sub_1AD97B8F0((uint64_t)v95, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    sub_1AD97B8F0((uint64_t)v99, &qword_1E9A49F48, v108);
    (*(void (**)(unsigned char *, uint64_t))(v228 + 8))(v91, v72);
    uint64_t v105 = v243;
    uint64_t v104 = v244;
LABEL_6:
    sub_1AD97F28C((uint64_t)v84, &qword_1E9A4D120, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    uint64_t v106 = v242;
    sub_1AD91D244((uint64_t)v245, v242);
    uint64_t v109 = v246;
    int v107 = v241;
    sub_1AD91D244(v246, (uint64_t)v241);
    uint64_t v110 = (uint64_t)v239;
LABEL_7:
    sub_1AD97B9E0((uint64_t)v107);
    sub_1AD97B9E0(v106);
    unsigned long long v111 = v240;
    uint64_t v112 = v237;
    uint64_t v113 = v238;
    char v114 = v229;
    uint64_t v115 = v245;
LABEL_15:
    sub_1AD91D244((uint64_t)v115, (uint64_t)v105);
    sub_1AD91D244(v109, (uint64_t)v114);
LABEL_16:
    sub_1AD97B9E0((uint64_t)v114);
    sub_1AD97B9E0((uint64_t)v105);
    goto LABEL_17;
  }
  uint64_t v116 = v228;
  uint64_t v117 = v224;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v228 + 32))(v224, v100, v72);
  sub_1AD97BA3C((unint64_t *)&qword_1E9A4C988, MEMORY[0x1E4F26F90]);
  int v212 = sub_1AD9DF6C0();
  char v118 = *(void (**)(unsigned char *, uint64_t))(v116 + 8);
  v118(v117, v72);
  char v119 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
  sub_1AD97B8F0((uint64_t)v95, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  sub_1AD97B8F0((uint64_t)v99, &qword_1E9A49F48, v119);
  v118(v91, v72);
  sub_1AD97B8F0((uint64_t)v84, &qword_1E9A49F48, v119);
  uint64_t v106 = v242;
  sub_1AD91D244((uint64_t)v245, v242);
  uint64_t v109 = v246;
  int v107 = v241;
  sub_1AD91D244(v246, (uint64_t)v241);
  uint64_t v110 = (uint64_t)v239;
  uint64_t v105 = v243;
  uint64_t v104 = v244;
  if ((v212 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v120 = v227[5];
  uint64_t v121 = v106 + v120;
  uint64_t v122 = v106;
  uint64_t v123 = (uint64_t)&v107[v120];
  uint64_t v124 = v226;
  uint64_t v125 = (uint64_t)&v226[*(int *)(v225 + 48)];
  char v126 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
  sub_1AD97B960(v121, (uint64_t)v226, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  sub_1AD97B960(v123, v125, &qword_1E9A49F48, v126);
  if (v101((uint64_t)v124, 1, v72) == 1)
  {
    sub_1AD97B9E0((uint64_t)v107);
    sub_1AD97B9E0(v122);
    if (v101(v125, 1, v72) == 1)
    {
      sub_1AD97B8F0((uint64_t)v124, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
      uint64_t v115 = v245;
      uint64_t v105 = v243;
      sub_1AD91D244((uint64_t)v245, (uint64_t)v243);
      uint64_t v109 = v246;
      char v114 = v229;
      sub_1AD91D244(v246, (uint64_t)v229);
      uint64_t v112 = v237;
      uint64_t v113 = v238;
      uint64_t v104 = v244;
      uint64_t v110 = (uint64_t)v239;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  unint64_t v127 = v223;
  sub_1AD97B960((uint64_t)v124, (uint64_t)v223, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  if (v101(v125, 1, v72) == 1)
  {
    sub_1AD97B9E0((uint64_t)v241);
    sub_1AD97B9E0(v242);
    (*(void (**)(unsigned char *, uint64_t))(v228 + 8))(v127, v72);
LABEL_14:
    sub_1AD97F28C((uint64_t)v124, &qword_1E9A4D120, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    uint64_t v110 = (uint64_t)v239;
    unsigned long long v111 = v240;
    uint64_t v112 = v237;
    uint64_t v113 = v238;
    uint64_t v105 = v243;
    uint64_t v104 = v244;
    char v114 = v229;
    uint64_t v115 = v245;
    uint64_t v109 = v246;
    goto LABEL_15;
  }
  uint64_t v137 = v228;
  uint64_t v138 = v224;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v228 + 32))(v224, v125, v72);
  sub_1AD97BA3C((unint64_t *)&qword_1E9A4C988, MEMORY[0x1E4F26F90]);
  char v139 = sub_1AD9DF6C0();
  uint64_t v140 = (uint64_t)v124;
  uint64_t v141 = *(void (**)(unsigned char *, uint64_t))(v137 + 8);
  v141(v138, v72);
  sub_1AD97B9E0((uint64_t)v241);
  sub_1AD97B9E0(v242);
  v141(v127, v72);
  sub_1AD97B8F0(v140, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  uint64_t v115 = v245;
  uint64_t v105 = v243;
  sub_1AD91D244((uint64_t)v245, (uint64_t)v243);
  uint64_t v109 = v246;
  char v114 = v229;
  sub_1AD91D244(v246, (uint64_t)v229);
  uint64_t v110 = (uint64_t)v239;
  unsigned long long v111 = v240;
  uint64_t v112 = v237;
  uint64_t v113 = v238;
  uint64_t v104 = v244;
  if ((v139 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_29:
  uint64_t v142 = (uint64_t)v105;
  uint64_t v143 = (uint64_t)v114;
  uint64_t v144 = v227;
  uint64_t v145 = v142 + v227[6];
  double v146 = *(double *)v145;
  char v147 = *(unsigned char *)(v145 + 8);
  sub_1AD97B9E0(v142);
  uint64_t v148 = v143 + v144[6];
  double v149 = *(double *)v148;
  char v150 = *(unsigned char *)(v148 + 8);
  sub_1AD97B9E0(v143);
  if (v147)
  {
    unsigned long long v111 = v240;
    if (v150)
    {
      uint64_t v128 = v236;
      sub_1AD91D244((uint64_t)v115, (uint64_t)v236);
      sub_1AD91D244(v109, v104);
      goto LABEL_34;
    }
    goto LABEL_17;
  }
  unsigned long long v111 = v240;
  if (v150)
  {
LABEL_17:
    uint64_t v128 = v236;
    sub_1AD91D244((uint64_t)v115, (uint64_t)v236);
    sub_1AD91D244(v109, v104);
LABEL_18:
    sub_1AD97B9E0(v104);
    sub_1AD97B9E0((uint64_t)v128);
LABEL_19:
    uint64_t v129 = v234;
    sub_1AD91D244((uint64_t)v115, (uint64_t)v234);
    char v130 = v235;
    sub_1AD91D244(v109, (uint64_t)v235);
LABEL_20:
    sub_1AD97B9E0((uint64_t)v130);
    sub_1AD97B9E0((uint64_t)v129);
LABEL_21:
    sub_1AD91D244((uint64_t)v115, (uint64_t)v112);
    sub_1AD91D244(v109, (uint64_t)v113);
LABEL_22:
    sub_1AD97B9E0((uint64_t)v113);
    sub_1AD97B9E0((uint64_t)v112);
    uint64_t v132 = (uint64_t)v232;
    uint64_t v131 = (uint64_t)v233;
    uint64_t v134 = (uint64_t)v230;
    uint64_t v133 = (uint64_t)v231;
LABEL_23:
    sub_1AD91D244((uint64_t)v115, (uint64_t)v111);
    sub_1AD91D244(v109, v110);
LABEL_24:
    sub_1AD97B9E0(v110);
    sub_1AD97B9E0((uint64_t)v111);
    sub_1AD91D244((uint64_t)v115, v134);
    sub_1AD91D244(v109, v133);
LABEL_25:
    sub_1AD97B9E0(v133);
    sub_1AD97B9E0(v134);
    sub_1AD91D244((uint64_t)v115, v132);
    sub_1AD91D244(v109, v131);
    goto LABEL_26;
  }
  uint64_t v128 = v236;
  sub_1AD91D244((uint64_t)v115, (uint64_t)v236);
  sub_1AD91D244(v109, v104);
  if (v146 != v149) {
    goto LABEL_18;
  }
LABEL_34:
  uint64_t v151 = v144[13];
  uint64_t v152 = (uint64_t)&v128[v151];
  uint64_t v153 = v104 + v151;
  uint64_t v154 = v104;
  double v155 = v219;
  uint64_t v156 = (uint64_t)v128;
  uint64_t v157 = (uint64_t)&v219[*(int *)(v221 + 48)];
  uint64_t v158 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD97B960(v152, (uint64_t)v219, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  sub_1AD97B960(v153, v157, &qword_1EB724D70, v158);
  long long v159 = (unsigned char *)(v222 + 48);
  uint64_t v160 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v222 + 48);
  uint64_t v161 = v220;
  if (v160((uint64_t)v155, 1, v220) == 1)
  {
    sub_1AD97B9E0(v154);
    sub_1AD97B9E0(v156);
    unsigned int v162 = v160(v157, 1, v161);
    unsigned long long v111 = v240;
    long long v163 = v159;
    char v164 = v160;
    uint64_t v112 = v237;
    uint64_t v113 = v238;
    if (v162 == 1)
    {
      long long v245 = v164;
      long long v243 = v163;
      sub_1AD97B8F0((uint64_t)v155, &qword_1EB724D70, MEMORY[0x1E4F27928]);
      uint64_t v129 = v234;
      sub_1AD91D244((uint64_t)v115, (uint64_t)v234);
      char v130 = v235;
      sub_1AD91D244(v109, (uint64_t)v235);
      uint64_t v165 = v221;
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  uint64_t v166 = v161;
  uint64_t v167 = v218;
  sub_1AD97B960((uint64_t)v155, (uint64_t)v218, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  v168  = v160(v157, 1, v166);
  v169  = v160;
  uint64_t v113 = v238;
  if (v168 == 1)
  {
    sub_1AD97B9E0(v244);
    sub_1AD97B9E0((uint64_t)v236);
    (*(void (**)(unsigned char *, uint64_t))(v222 + 8))(v167, v166);
    unsigned long long v111 = v240;
    uint64_t v112 = v237;
LABEL_39:
    sub_1AD97F28C((uint64_t)v155, (unint64_t *)&qword_1E9A4C730, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    goto LABEL_19;
  }
  long long v245 = v169;
  long long v243 = v159;
  uint64_t v170 = v222;
  v171  = v217;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v222 + 32))(v217, v157, v166);
  sub_1AD97BA3C(&qword_1E9A4C738, MEMORY[0x1E4F27928]);
  LODWORD(v242)  = sub_1AD9DF6C0();
  v172  = *(void (**)(unsigned char *, uint64_t))(v170 + 8);
  uint64_t v165 = v221;
  v172(v171, v166);
  sub_1AD97B9E0(v244);
  sub_1AD97B9E0((uint64_t)v236);
  v172(v167, v166);
  sub_1AD97B8F0((uint64_t)v219, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v129 = v234;
  sub_1AD91D244((uint64_t)v115, (uint64_t)v234);
  char v130 = v235;
  sub_1AD91D244(v109, (uint64_t)v235);
  unsigned long long v111 = v240;
  uint64_t v112 = v237;
  if ((v242 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_41:
  uint64_t v173 = v227[12];
  uint64_t v174 = (uint64_t)&v130[v173];
  char v175 = v216;
  uint64_t v176 = (uint64_t)&v216[*(int *)(v165 + 48)];
  uint64_t v177 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD97B960((uint64_t)&v129[v173], (uint64_t)v216, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  sub_1AD97B960(v174, v176, &qword_1EB724D70, v177);
  uint64_t v178 = v220;
  uint64_t v179 = v245;
  if (v245((uint64_t)v175, 1, v220) == 1)
  {
    sub_1AD97B9E0((uint64_t)v235);
    sub_1AD97B9E0((uint64_t)v129);
    if (v179(v176, 1, v178) == 1)
    {
      sub_1AD97B8F0((uint64_t)v175, &qword_1EB724D70, MEMORY[0x1E4F27928]);
      uint64_t v180 = v178;
      uint64_t v112 = v237;
      sub_1AD91D244((uint64_t)v115, (uint64_t)v237);
      uint64_t v113 = v238;
      sub_1AD91D244(v109, (uint64_t)v238);
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  v181  = v215;
  sub_1AD97B960((uint64_t)v175, (uint64_t)v215, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  if (v179(v176, 1, v178) == 1)
  {
    sub_1AD97B9E0((uint64_t)v235);
    sub_1AD97B9E0((uint64_t)v234);
    (*(void (**)(unsigned char *, uint64_t))(v222 + 8))(v181, v178);
LABEL_46:
    sub_1AD97F28C((uint64_t)v175, (unint64_t *)&qword_1E9A4C730, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    unsigned long long v111 = v240;
    uint64_t v112 = v237;
    uint64_t v113 = v238;
    goto LABEL_21;
  }
  v182  = v176;
  uint64_t v180 = v178;
  v183  = v222;
  v184  = v217;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v222 + 32))(v217, v182, v180);
  sub_1AD97BA3C(&qword_1E9A4C738, MEMORY[0x1E4F27928]);
  LODWORD(v244)  = sub_1AD9DF6C0();
  v185  = *(void (**)(unsigned char *, uint64_t))(v183 + 8);
  v185(v184, v180);
  sub_1AD97B9E0((uint64_t)v235);
  sub_1AD97B9E0((uint64_t)v234);
  v185(v181, v180);
  sub_1AD97B8F0((uint64_t)v175, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  uint64_t v112 = v237;
  sub_1AD91D244((uint64_t)v115, (uint64_t)v237);
  uint64_t v113 = v238;
  sub_1AD91D244(v109, (uint64_t)v238);
  unsigned long long v111 = v240;
  if ((v244 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_48:
  uint64_t v186 = v227[11];
  v187  = (uint64_t)&v113[v186];
  uint64_t v188 = v214;
  v189  = (uint64_t)&v214[*(int *)(v221 + 48)];
  v190  = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1AD97B960((uint64_t)&v112[v186], (uint64_t)v214, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  sub_1AD97B960(v187, v189, &qword_1EB724D70, v190);
  id v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v245;
  if (v245((uint64_t)v188, 1, v180) == 1)
  {
    sub_1AD97B9E0((uint64_t)v238);
    sub_1AD97B9E0((uint64_t)v237);
    int v192 = v191(v189, 1, v180);
    uint64_t v132 = (uint64_t)v232;
    uint64_t v131 = (uint64_t)v233;
    uint64_t v134 = (uint64_t)v230;
    uint64_t v133 = (uint64_t)v231;
    if (v192 == 1)
    {
      sub_1AD97B8F0((uint64_t)v188, &qword_1EB724D70, MEMORY[0x1E4F27928]);
      unsigned long long v111 = v240;
      sub_1AD91D244((uint64_t)v115, (uint64_t)v240);
      sub_1AD91D244(v109, v110);
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  uint64_t v193 = v213;
  sub_1AD97B960((uint64_t)v188, (uint64_t)v213, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  int v194 = v191(v189, 1, v180);
  uint64_t v195 = v180;
  if (v194 == 1)
  {
    sub_1AD97B9E0((uint64_t)v238);
    sub_1AD97B9E0((uint64_t)v237);
    (*(void (**)(unsigned char *, uint64_t))(v222 + 8))(v193, v180);
    uint64_t v132 = (uint64_t)v232;
    uint64_t v131 = (uint64_t)v233;
    uint64_t v134 = (uint64_t)v230;
    uint64_t v133 = (uint64_t)v231;
LABEL_53:
    sub_1AD97F28C((uint64_t)v188, (unint64_t *)&qword_1E9A4C730, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    unsigned long long v111 = v240;
    goto LABEL_23;
  }
  uint64_t v196 = v222;
  v197  = v189;
  v198  = v217;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v222 + 32))(v217, v197, v180);
  sub_1AD97BA3C(&qword_1E9A4C738, MEMORY[0x1E4F27928]);
  uint64_t v199 = (uint64_t)v188;
  v200  = v193;
  v201  = sub_1AD9DF6C0();
  int v202 = *(void (**)(unsigned char *, uint64_t))(v196 + 8);
  v202(v198, v195);
  sub_1AD97B9E0((uint64_t)v238);
  sub_1AD97B9E0((uint64_t)v237);
  v202(v200, v195);
  sub_1AD97B8F0(v199, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  unsigned long long v111 = v240;
  sub_1AD91D244((uint64_t)v115, (uint64_t)v240);
  sub_1AD91D244(v109, v110);
  uint64_t v132 = (uint64_t)v232;
  uint64_t v131 = (uint64_t)v233;
  uint64_t v134 = (uint64_t)v230;
  uint64_t v133 = (uint64_t)v231;
  if ((v201 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_55:
  unint64_t v203 = v227;
  uint64_t v204 = v227[7];
  long long v245 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))&v111[v204];
  uint64_t v205 = (uint64_t)v111;
  v206  = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + v204);
  sub_1AD97B9E0(v110);
  sub_1AD97B9E0(v205);
  sub_1AD91D244((uint64_t)v115, v134);
  sub_1AD91D244(v109, v133);
  if (v245 != v206) {
    goto LABEL_25;
  }
  int v207 = *(unsigned __int8 *)(v134 + v203[8]);
  sub_1AD97B9E0(v134);
  int v208 = *(unsigned __int8 *)(v133 + v203[8]);
  sub_1AD97B9E0(v133);
  sub_1AD91D244((uint64_t)v115, v132);
  sub_1AD91D244(v109, v131);
  if (v207 == v208)
  {
    long long v209 = v203;
    char v210 = *(unsigned char *)(v132 + v203[9]);
    sub_1AD97B9E0(v132);
    LOBYTE(v209)  = *(unsigned char *)(v131 + v209[9]);
    sub_1AD97B9E0(v131);
    char v135 = v210 ^ v209 ^ 1;
    return v135 & 1;
  }
LABEL_26:
  sub_1AD97B9E0(v131);
  sub_1AD97B9E0(v132);
  char v135 = 0;
  return v135 & 1;
}

uint64_t sub_1AD97B368(unint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8, v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    if (!v13) {
      return v14;
    }
    uint64_t v35 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_1AD8A2748(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0) {
      break;
    }
    unint64_t v29 = v4;
    uint64_t v16 = 0;
    uint64_t v14 = v35;
    unint64_t v31 = a1 & 0xC000000000000001;
    BOOL v30 = a2 == 0;
    unint64_t v32 = a1;
    while (v13 != v16)
    {
      if (v31) {
        id v17 = (id)MEMORY[0x1B3E6BFF0](v16, a1);
      }
      else {
        id v17 = *(id *)(a1 + 8 * v16 + 32);
      }
      id v18 = v17;
      if (a2)
      {
        objc_msgSend(a2, sel_windDownTime);
        uint64_t v20 = v19;
      }
      else
      {
        uint64_t v20 = 0;
      }
      long long v21 = *(_OWORD *)(a3 + 176);
      v33[10]  = *(_OWORD *)(a3 + 160);
      v33[11]  = v21;
      uint64_t v34 = *(void *)(a3 + 192);
      long long v22 = *(_OWORD *)(a3 + 112);
      v33[6]  = *(_OWORD *)(a3 + 96);
      v33[7]  = v22;
      long long v23 = *(_OWORD *)(a3 + 144);
      v33[8]  = *(_OWORD *)(a3 + 128);
      v33[9]  = v23;
      long long v24 = *(_OWORD *)(a3 + 48);
      void v33[2] = *(_OWORD *)(a3 + 32);
      v33[3]  = v24;
      long long v25 = *(_OWORD *)(a3 + 80);
      v33[4]  = *(_OWORD *)(a3 + 64);
      v33[5]  = v25;
      long long v26 = *(_OWORD *)a3;
      v33[1]  = *(_OWORD *)(a3 + 16);
      v33[0]  = v26;
      sub_1AD97B814(a3);
      ScheduleOccurrenceViewModel.init(scheduleOccurrence:windDownTimeInterval:viewStyle:)(v18, v20, v30, v33, (uint64_t)v12);

      uint64_t v35 = v14;
      unint64_t v28 = *(void *)(v14 + 16);
      unint64_t v27 = *(void *)(v14 + 24);
      unint64_t v4 = v28 + 1;
      if (v28 >= v27 >> 1)
      {
        sub_1AD8A2748(v27 > 1, v28 + 1, 1);
        uint64_t v14 = v35;
      }
      ++v16;
      *(void *)(v14 + 16)  = v4;
      sub_1AD979584((uint64_t)v12, v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v28);
      a1  = v32;
      if (v13 == v16) {
        return v14;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void _s13SleepHealthUI27ScheduleOccurrenceViewModelV013makeRepeatingeF6Models05sleepD09viewStyleSayACGSo09HKSPSleepD0CSg_AC0fM0VtFZ_0(void *a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 160);
  long long v3 = *(_OWORD *)(a2 + 176);
  long long v4 = *(_OWORD *)(a2 + 128);
  v20[9]  = *(_OWORD *)(a2 + 144);
  v20[10]  = v2;
  v20[11]  = v3;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  uint64_t v21 = *(void *)(a2 + 192);
  v20[7]  = v5;
  v20[8]  = v4;
  long long v7 = *(_OWORD *)(a2 + 48);
  void v20[2] = *(_OWORD *)(a2 + 32);
  v20[3]  = v7;
  long long v8 = *(_OWORD *)(a2 + 64);
  v20[5]  = *(_OWORD *)(a2 + 80);
  v20[6]  = v6;
  v20[4]  = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  v20[0]  = *(_OWORD *)a2;
  v20[1]  = v9;
  unint64_t v10 = MEMORY[0x1E4FBC860];
  if (a1)
  {
    id v12 = objc_msgSend(a1, sel_occurrences);
    sub_1AD97F34C();
    unint64_t v13 = sub_1AD9DF860();

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_1AD9E0190();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v14)
      {
LABEL_4:
        if (v14 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0) {
            id v16 = (id)MEMORY[0x1B3E6BFF0](i, v13);
          }
          else {
            id v16 = *(id *)(v13 + 8 * i + 32);
          }
          id v17 = v16;
          if (objc_msgSend(v16, sel_isSingleDayOverride))
          {
          }
          else
          {
            sub_1AD9E0080();
            sub_1AD9E00C0();
            sub_1AD9E00D0();
            sub_1AD9E0090();
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v18 = v10;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_16:
    id v19 = a1;
    sub_1AD97B814((uint64_t)v20);
    sub_1AD97B368(v18, a1, (uint64_t)v20);
    sub_1AD91D168((uint64_t)v20);
    swift_release();
  }
}

uint64_t sub_1AD97B814(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD97B8F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1AD97F2E8(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1AD97B960(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1AD97F2E8(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1AD97B9E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ScheduleOccurrenceViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD97BA3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD97BA84(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1AD97BAD4()
{
  unint64_t result = qword_1E9A4D0D0;
  if (!qword_1E9A4D0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D0D0);
  }
  return result;
}

uint64_t sub_1AD97BB28()
{
  return sub_1AD97BA3C(&qword_1E9A4D0D8, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel);
}

unint64_t sub_1AD97BB74()
{
  unint64_t result = qword_1E9A4D0E0;
  if (!qword_1E9A4D0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D0E0);
  }
  return result;
}

unint64_t sub_1AD97BBCC()
{
  unint64_t result = qword_1E9A4D0E8;
  if (!qword_1E9A4D0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D0E8);
  }
  return result;
}

unint64_t sub_1AD97BC24()
{
  unint64_t result = qword_1E9A4D0F0;
  if (!qword_1E9A4D0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D0F0);
  }
  return result;
}

unint64_t sub_1AD97BC7C()
{
  unint64_t result = qword_1E9A4D0F8;
  if (!qword_1E9A4D0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D0F8);
  }
  return result;
}

unint64_t sub_1AD97BCD4()
{
  unint64_t result = qword_1E9A4D100;
  if (!qword_1E9A4D100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D100);
  }
  return result;
}

unint64_t sub_1AD97BD2C()
{
  unint64_t result = qword_1E9A4D108;
  if (!qword_1E9A4D108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D108);
  }
  return result;
}

uint64_t dispatch thunk of ScheduleOccurrenceViewModelProviding.viewModel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ScheduleOccurrenceViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1  = *a2;
    id v12 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AD9DC990();
    uint64_t v8 = *(void *)(v7 - 8);
    long long v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v13 = a3[5];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    if (v9((uint64_t *)((char *)a2 + v13), 1, v7))
    {
      sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v15, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
    }
    uint64_t v17 = a3[6];
    uint64_t v18 = a3[7];
    id v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)id v19 = *(void *)v20;
    v19[8]  = v20[8];
    *(uint64_t *)((char *)a1 + v18)  = *(uint64_t *)((char *)a2 + v18);
    uint64_t v21 = a3[9];
    *((unsigned char *)a1 + a3[8])  = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)a1 + v21)  = *((unsigned char *)a2 + v21);
    uint64_t v22 = a3[10];
    uint64_t v23 = a3[11];
    long long v24 = (char *)a1 + v22;
    long long v25 = (char *)a2 + v22;
    *(void *)long long v24 = *(void *)v25;
    v24[8]  = v25[8];
    *((void *)v24 + 2)  = *((void *)v25 + 2);
    v24[24]  = v25[24];
    v24[25]  = v25[25];
    *((void *)v24 + 4)  = *((void *)v25 + 4);
    v24[40]  = v25[40];
    *((void *)v24 + 6)  = *((void *)v25 + 6);
    v24[56]  = v25[56];
    v24[57]  = v25[57];
    *((void *)v24 + 8)  = *((void *)v25 + 8);
    v24[72]  = v25[72];
    *((void *)v24 + 10)  = *((void *)v25 + 10);
    v24[88]  = v25[88];
    v24[89]  = v25[89];
    *((void *)v24 + 12)  = *((void *)v25 + 12);
    v24[104]  = v25[104];
    *((void *)v24 + 14)  = *((void *)v25 + 14);
    v24[120]  = v25[120];
    v24[121]  = v25[121];
    *((void *)v24 + 16)  = *((void *)v25 + 16);
    v24[136]  = v25[136];
    *((void *)v24 + 18)  = *((void *)v25 + 18);
    v24[152]  = v25[152];
    v24[153]  = v25[153];
    *((void *)v24 + 20)  = *((void *)v25 + 20);
    v24[168]  = v25[168];
    v24[184]  = v25[184];
    v24[185]  = v25[185];
    uint64_t v26 = *((void *)v25 + 22);
    *((void *)v24 + 24)  = *((void *)v25 + 24);
    uint64_t v46 = a1;
    __dst  = (char *)a1 + v23;
    uint64_t v43 = (char *)a2 + v23;
    *((void *)v24 + 22)  = v26;
    uint64_t v27 = sub_1AD9DCC70();
    uint64_t v45 = *(void *)(v27 - 8);
    uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v42(v43, 1, v27))
    {
      sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(__dst, v43, *(void *)(*(void *)(v28 - 8) + 64));
      uint64_t v29 = v45;
    }
    else
    {
      uint64_t v29 = v45;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(__dst, v43, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v27);
    }
    uint64_t v30 = a3[12];
    id v12 = v46;
    unint64_t v31 = (char *)v46 + v30;
    unint64_t v32 = (char *)a2 + v30;
    if (v42((char *)a2 + v30, 1, v27))
    {
      sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v31, v32, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v27);
    }
    uint64_t v34 = a3[13];
    uint64_t v35 = (char *)v46 + v34;
    uint64_t v36 = (char *)a2 + v34;
    if (v42((char *)a2 + v34, 1, v27))
    {
      sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v35, v36, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v35, 0, 1, v27);
    }
    uint64_t v38 = a3[14];
    uint64_t v39 = *(void **)((char *)a2 + v38);
    *(uint64_t *)((char *)v46 + v38)  = (uint64_t)v39;
    id v40 = v39;
  }
  return v12;
}

void destroy for ScheduleOccurrenceViewModel(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v7 = a1 + a2[5];
  if (!v6(v7, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = a1 + a2[11];
  uint64_t v9 = sub_1AD9DCC70();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = a1 + a2[12];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = a1 + a2[13];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  uint64_t v14 = *(void **)(a1 + a2[14]);
}

char *initializeWithCopy for ScheduleOccurrenceViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AD9DC990();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8]  = v17[8];
  *(void *)&a1[v15]  = *(void *)&a2[v15];
  uint64_t v18 = a3[9];
  a1[a3[8]]  = a2[a3[8]];
  a1[v18]  = a2[v18];
  uint64_t v19 = a3[10];
  uint64_t v20 = a3[11];
  uint64_t v21 = &a1[v19];
  uint64_t v22 = &a2[v19];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8]  = v22[8];
  *((void *)v21 + 2)  = *((void *)v22 + 2);
  v21[24]  = v22[24];
  v21[25]  = v22[25];
  *((void *)v21 + 4)  = *((void *)v22 + 4);
  v21[40]  = v22[40];
  *((void *)v21 + 6)  = *((void *)v22 + 6);
  v21[56]  = v22[56];
  v21[57]  = v22[57];
  *((void *)v21 + 8)  = *((void *)v22 + 8);
  v21[72]  = v22[72];
  *((void *)v21 + 10)  = *((void *)v22 + 10);
  v21[88]  = v22[88];
  v21[89]  = v22[89];
  *((void *)v21 + 12)  = *((void *)v22 + 12);
  v21[104]  = v22[104];
  *((void *)v21 + 14)  = *((void *)v22 + 14);
  v21[120]  = v22[120];
  v21[121]  = v22[121];
  *((void *)v21 + 16)  = *((void *)v22 + 16);
  v21[136]  = v22[136];
  *((void *)v21 + 18)  = *((void *)v22 + 18);
  v21[152]  = v22[152];
  v21[153]  = v22[153];
  *((void *)v21 + 20)  = *((void *)v22 + 20);
  v21[168]  = v22[168];
  v21[184]  = v22[184];
  v21[185]  = v22[185];
  uint64_t v23 = *((void *)v22 + 22);
  *((void *)v21 + 24)  = *((void *)v22 + 24);
  uint64_t v43 = a1;
  __dst  = &a1[v20];
  id v40 = &a2[v20];
  *((void *)v21 + 22)  = v23;
  uint64_t v24 = sub_1AD9DCC70();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v39(v40, 1, v24))
  {
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(__dst, v40, *(void *)(*(void *)(v25 - 8) + 64));
    uint64_t v26 = v42;
  }
  else
  {
    uint64_t v26 = v42;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dst, v40, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v24);
  }
  uint64_t v27 = a3[12];
  uint64_t v28 = &v43[v27];
  uint64_t v29 = &a2[v27];
  if (v39(&a2[v27], 1, v24))
  {
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v29, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v24);
  }
  uint64_t v31 = a3[13];
  unint64_t v32 = &v43[v31];
  uint64_t v33 = &a2[v31];
  if (v39(&a2[v31], 1, v24))
  {
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v32, v33, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v32, 0, 1, v24);
  }
  uint64_t v35 = a3[14];
  uint64_t v36 = *(void **)&a2[v35];
  *(void *)&v43[v35]  = v36;
  id v37 = v36;
  return v43;
}

char *assignWithCopy for ScheduleOccurrenceViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AD9DC990();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8]  = v20[8];
  *(void *)uint64_t v19 = v21;
  *(void *)&a1[a3[7]]  = *(void *)&a2[a3[7]];
  a1[a3[8]]  = a2[a3[8]];
  a1[a3[9]]  = a2[a3[9]];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  *(void *)&a1[v22]  = *(void *)&a2[v22];
  swift_retain();
  swift_release();
  v23[8]  = v24[8];
  *((void *)v23 + 2)  = *((void *)v24 + 2);
  swift_retain();
  swift_release();
  v23[24]  = v24[24];
  v23[25]  = v24[25];
  *((void *)v23 + 4)  = *((void *)v24 + 4);
  swift_retain();
  swift_release();
  v23[40]  = v24[40];
  *((void *)v23 + 6)  = *((void *)v24 + 6);
  swift_retain();
  swift_release();
  v23[56]  = v24[56];
  v23[57]  = v24[57];
  *((void *)v23 + 8)  = *((void *)v24 + 8);
  swift_retain();
  swift_release();
  v23[72]  = v24[72];
  *((void *)v23 + 10)  = *((void *)v24 + 10);
  swift_retain();
  swift_release();
  v23[88]  = v24[88];
  v23[89]  = v24[89];
  *((void *)v23 + 12)  = *((void *)v24 + 12);
  swift_retain();
  swift_release();
  v23[104]  = v24[104];
  *((void *)v23 + 14)  = *((void *)v24 + 14);
  swift_retain();
  swift_release();
  v23[120]  = v24[120];
  v23[121]  = v24[121];
  *((void *)v23 + 16)  = *((void *)v24 + 16);
  swift_retain();
  swift_release();
  v23[136]  = v24[136];
  *((void *)v23 + 18)  = *((void *)v24 + 18);
  swift_retain();
  swift_release();
  v23[152]  = v24[152];
  v23[153]  = v24[153];
  *((void *)v23 + 20)  = *((void *)v24 + 20);
  swift_retain();
  swift_release();
  v23[168]  = v24[168];
  *((void *)v23 + 22)  = *((void *)v24 + 22);
  swift_retain();
  swift_release();
  v23[184]  = v24[184];
  v23[185]  = v24[185];
  *((void *)v23 + 24)  = *((void *)v24 + 24);
  uint64_t v25 = a3[11];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = sub_1AD9DCC70();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_18:
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_19:
  uint64_t v34 = a3[12];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  int v37 = v30(&a1[v34], 1, v28);
  int v38 = v30(v36, 1, v28);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v35, v36, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v35, 0, 1, v28);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v28);
LABEL_24:
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v35, v36, v28);
LABEL_25:
  uint64_t v40 = a3[13];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  int v43 = v30(&a1[v40], 1, v28);
  int v44 = v30(v42, 1, v28);
  if (!v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v41, v42, v28);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v41, v28);
    goto LABEL_30;
  }
  if (v44)
  {
LABEL_30:
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v41, v42, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v41, 0, 1, v28);
LABEL_31:
  uint64_t v46 = a3[14];
  uint64_t v47 = *(void **)&a1[v46];
  uint64_t v48 = *(void **)&a2[v46];
  *(void *)&a1[v46]  = v48;
  id v49 = v48;

  return a1;
}

char *initializeWithTake for ScheduleOccurrenceViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AD9DC990();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  int v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)int v16 = *(void *)v17;
  v16[8]  = v17[8];
  *(void *)&a1[v15]  = *(void *)&a2[v15];
  uint64_t v18 = a3[9];
  a1[a3[8]]  = a2[a3[8]];
  a1[v18]  = a2[v18];
  uint64_t v19 = a3[10];
  uint64_t v20 = a3[11];
  uint64_t v21 = &a1[v19];
  uint64_t v22 = &a2[v19];
  *((void *)v21 + 24)  = *((void *)v22 + 24);
  long long v23 = *((_OWORD *)v22 + 11);
  *((_OWORD *)v21 + 10)  = *((_OWORD *)v22 + 10);
  *((_OWORD *)v21 + 11)  = v23;
  long long v24 = *((_OWORD *)v22 + 7);
  *((_OWORD *)v21 + 6)  = *((_OWORD *)v22 + 6);
  *((_OWORD *)v21 + 7)  = v24;
  long long v25 = *((_OWORD *)v22 + 9);
  *((_OWORD *)v21 + 8)  = *((_OWORD *)v22 + 8);
  *((_OWORD *)v21 + 9)  = v25;
  long long v26 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2)  = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3)  = v26;
  long long v27 = *((_OWORD *)v22 + 5);
  *((_OWORD *)v21 + 4)  = *((_OWORD *)v22 + 4);
  *((_OWORD *)v21 + 5)  = v27;
  long long v28 = *((_OWORD *)v22 + 1);
  uint64_t v29 = &a1[v20];
  uint64_t v30 = &a2[v20];
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1)  = v28;
  uint64_t v31 = sub_1AD9DCC70();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v33(v30, 1, v31))
  {
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v35 = a3[12];
  uint64_t v36 = &a1[v35];
  int v37 = &a2[v35];
  if (v33(&a2[v35], 1, v31))
  {
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v36, v37, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v36, 0, 1, v31);
  }
  uint64_t v39 = a3[13];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  if (v33(&a2[v39], 1, v31))
  {
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v40, v41, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v40, 0, 1, v31);
  }
  *(void *)&a1[a3[14]]  = *(void *)&a2[a3[14]];
  return a1;
}

char *assignWithTake for ScheduleOccurrenceViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AD9DC990();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8]  = v21[8];
  *(void *)&a1[v19]  = *(void *)&a2[v19];
  uint64_t v22 = a3[9];
  a1[a3[8]]  = a2[a3[8]];
  a1[v22]  = a2[v22];
  uint64_t v23 = a3[10];
  long long v24 = &a1[v23];
  long long v25 = &a2[v23];
  *(void *)&a1[v23]  = *(void *)&a2[v23];
  swift_release();
  v24[8]  = v25[8];
  *((void *)v24 + 2)  = *((void *)v25 + 2);
  swift_release();
  v24[24]  = v25[24];
  v24[25]  = v25[25];
  *((void *)v24 + 4)  = *((void *)v25 + 4);
  swift_release();
  v24[40]  = v25[40];
  *((void *)v24 + 6)  = *((void *)v25 + 6);
  swift_release();
  v24[56]  = v25[56];
  v24[57]  = v25[57];
  *((void *)v24 + 8)  = *((void *)v25 + 8);
  swift_release();
  v24[72]  = v25[72];
  *((void *)v24 + 10)  = *((void *)v25 + 10);
  swift_release();
  v24[88]  = v25[88];
  v24[89]  = v25[89];
  *((void *)v24 + 12)  = *((void *)v25 + 12);
  swift_release();
  v24[104]  = v25[104];
  *((void *)v24 + 14)  = *((void *)v25 + 14);
  swift_release();
  v24[120]  = v25[120];
  v24[121]  = v25[121];
  *((void *)v24 + 16)  = *((void *)v25 + 16);
  swift_release();
  v24[136]  = v25[136];
  *((void *)v24 + 18)  = *((void *)v25 + 18);
  swift_release();
  v24[152]  = v25[152];
  v24[153]  = v25[153];
  *((void *)v24 + 20)  = *((void *)v25 + 20);
  swift_release();
  v24[168]  = v25[168];
  *((void *)v24 + 22)  = *((void *)v25 + 22);
  swift_release();
  v24[184]  = v25[184];
  v24[185]  = v25[185];
  *((void *)v24 + 24)  = *((void *)v25 + 24);
  uint64_t v26 = a3[11];
  long long v27 = &a1[v26];
  long long v28 = &a2[v26];
  uint64_t v29 = sub_1AD9DCC70();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
LABEL_18:
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v27, v28, v29);
LABEL_19:
  uint64_t v35 = a3[12];
  uint64_t v36 = &a1[v35];
  int v37 = &a2[v35];
  int v38 = v31(&a1[v35], 1, v29);
  int v39 = v31(v37, 1, v29);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v36, v37, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v36, 0, 1, v29);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
LABEL_24:
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v36, v37, v29);
LABEL_25:
  uint64_t v41 = a3[13];
  uint64_t v42 = &a1[v41];
  int v43 = &a2[v41];
  int v44 = v31(&a1[v41], 1, v29);
  int v45 = v31(v43, 1, v29);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v42, v43, v29);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v42, v29);
    goto LABEL_30;
  }
  if (v45)
  {
LABEL_30:
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v42, v43, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v42, 0, 1, v29);
LABEL_31:
  uint64_t v47 = a3[14];
  uint64_t v48 = *(void **)&a1[v47];
  *(void *)&a1[v47]  = *(void *)&a2[v47];

  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleOccurrenceViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD97E3DC);
}

uint64_t sub_1AD97E3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 40));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10)  = -1;
    }
    return (v10 + 1);
  }
  else
  {
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 44);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD97E57C);
}

void sub_1AD97E57C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1AD97F2E8(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 40))  = (a2 - 1);
  }
  else
  {
    sub_1AD97F2E8(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 44);
    v12(v14, a2, a2, v13);
  }
}

void sub_1AD97E708()
{
  sub_1AD97F2E8(319, &qword_1E9A49F48, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F)
  {
    sub_1AD97F2E8(319, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ScheduleOccurrenceViewModel.AlarmState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD97E940);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewModel.AlarmState()
{
  return &type metadata for ScheduleOccurrenceViewModel.AlarmState;
}

uint64_t destroy for ScheduleOccurrenceViewModel.ViewStyle()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScheduleOccurrenceViewModel.ViewStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56)  = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88)  = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(_WORD *)(a1 + 120)  = *(_WORD *)(a2 + 120);
  *(void *)(a1 + 128)  = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136)  = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 152)  = *(_WORD *)(a2 + 152);
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168)  = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(_WORD *)(a1 + 184)  = *(_WORD *)(a2 + 184);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleOccurrenceViewModel.ViewStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25)  = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56)  = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57)  = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89)  = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 120)  = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121)  = *(unsigned char *)(a2 + 121);
  *(void *)(a1 + 128)  = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 136)  = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 152)  = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153)  = *(unsigned char *)(a2 + 153);
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 168)  = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 184)  = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 185)  = *(unsigned char *)(a2 + 185);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v4;
  *(_OWORD *)(a1 + 16)  = v2;
  *(_OWORD *)(a1 + 32)  = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128)  = v7;
  *(_OWORD *)(a1 + 80)  = v5;
  *(_OWORD *)(a1 + 96)  = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160)  = v9;
  *(_OWORD *)(a1 + 176)  = v10;
  *(__n128 *)(a1 + 144)  = result;
  return result;
}

uint64_t assignWithTake for ScheduleOccurrenceViewModel.ViewStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25)  = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 56)  = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57)  = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  swift_release();
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  swift_release();
  *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89)  = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  swift_release();
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  swift_release();
  *(unsigned char *)(a1 + 120)  = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121)  = *(unsigned char *)(a2 + 121);
  *(void *)(a1 + 128)  = *(void *)(a2 + 128);
  swift_release();
  *(unsigned char *)(a1 + 136)  = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  swift_release();
  *(unsigned char *)(a1 + 152)  = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153)  = *(unsigned char *)(a2 + 153);
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  swift_release();
  *(unsigned char *)(a1 + 168)  = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  swift_release();
  *(unsigned char *)(a1 + 184)  = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 185)  = *(unsigned char *)(a2 + 185);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleOccurrenceViewModel.ViewStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceViewModel.ViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 200)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 200)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewModel.ViewStyle()
{
  return &type metadata for ScheduleOccurrenceViewModel.ViewStyle;
}

uint64_t destroy for ScheduleOccurrenceViewModel.ViewStyle.TextStyle()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25)  = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10)  = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t assignWithTake for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25)  = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(_WORD *)(result + 24)  = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewModel.ViewStyle.TextStyle()
{
  return &type metadata for ScheduleOccurrenceViewModel.ViewStyle.TextStyle;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewModel.ViewStyle.Options()
{
  return &type metadata for ScheduleOccurrenceViewModel.ViewStyle.Options;
}

void sub_1AD97F214(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_1AD97F2E8(255, a3, a4, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_1AD97F28C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1AD97F214(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_1AD97F2E8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1AD97F34C()
{
  unint64_t result = qword_1E9A49720;
  if (!qword_1E9A49720)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A49720);
  }
  return result;
}

id sub_1AD97F38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = &v3[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item];
  *(_OWORD *)long long v4 = 0u;
  *((_OWORD *)v4 + 1)  = 0u;
  *((void *)v4 + 4)  = 0;
  uint64_t v5 = (void *)*MEMORY[0x1E4FB2950];
  uint64_t v6 = self;
  uint64_t v7 = v3;
  id v8 = objc_msgSend(v6, sel_hk_sleepKeyColor);
  uint64_t v9 = *MEMORY[0x1E4FB09E0];
  id v10 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v11 = v5;
  id v12 = v8;
  id v13 = objc_msgSend(v10, sel_init);
  uint64_t v14 = v13;
  if (v12) {
    objc_msgSend(v13, sel_setTextColor_, v12);
  }
  uint64_t v15 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v16 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v11, 0, 0, 0, 0, 0, 0, v9, 0);
  objc_msgSend(v14, sel_setFont_, v16);

  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v14, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v14, sel_setLineBreakMode_, 0);
  objc_msgSend(v14, sel_setNumberOfLines_, 0);

  *(void *)&v7[v15]  = v14;
  uint64_t v17 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel;
  uint64_t v18 = (void *)*MEMORY[0x1E4FB28C8];
  uint64_t v19 = *MEMORY[0x1E4FB09B8];
  id v20 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v21 = v18;
  id v22 = objc_msgSend(v20, sel_init);
  id v23 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v21, 0, 1, 0, 0, 0, 0, v19, 0);
  objc_msgSend(v22, sel_setFont_, v23);

  objc_msgSend(v22, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v22, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v22, sel_setLineBreakMode_, 0);
  objc_msgSend(v22, sel_setNumberOfLines_, 0);
  *(void *)&v7[v17]  = v22;

  if (a3)
  {
    long long v24 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v24 = 0;
  }
  v30.receiver  = v7;
  v30.super_class  = (Class)type metadata accessor for ConfirmationListItemTableViewCell();
  id v25 = objc_msgSendSuper2(&v30, sel_initWithStyle_reuseIdentifier_, a1, v24);

  id v26 = v25;
  objc_msgSend(v26, sel_setAccessoryType_, 0);
  objc_msgSend(v26, sel_setSelectionStyle_, 0);
  sub_1AD97F738();

  return v26;
}

void sub_1AD97F738()
{
  unint64_t v1 = v0;
  sub_1AD870B1C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1AD9E5930;
  long long v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel];
  *(void *)(inited + 32)  = v3;
  long long v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel];
  *(void *)(inited + 40)  = v4;
  unint64_t v11 = inited;
  sub_1AD9DF870();
  id v5 = v3;
  id v6 = v4;
  id v7 = objc_msgSend(v0, sel_contentView);
  UIView.addSubviews(_:useAutoLayout:)((Swift::OpaquePointer)v11, 1);

  id v8 = objc_msgSend(v1, sel_contentView);
  UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(v11, 4.0, 16.0, 0.0, 16.0, 0.0);
  swift_bridgeObjectRelease();

  uint64_t v9 = self;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  id v10 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_activateConstraints_, v10);
}

id sub_1AD97F88C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item;
  swift_beginAccess();
  sub_1AD886B10(v2, (uint64_t)v12);
  if (!v13)
  {
    sub_1AD8B1F34((uint64_t)v12, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v16 = 0;
    goto LABEL_9;
  }
  sub_1AD843E70(0, (unint64_t *)&qword_1E9A4A3C0);
  sub_1AD843E70(0, &qword_1E9A4D148);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    goto LABEL_9;
  }
  if (!*((void *)&v15 + 1))
  {
LABEL_9:
    sub_1AD8B1F34((uint64_t)&v14, &qword_1E9A4D140, &qword_1E9A4D148);
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel), sel_setText_, 0);
    return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel), sel_setText_, 0);
  }
  sub_1AD843F30(&v14, (uint64_t)v17);
  long long v3 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v4 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  id v5 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setText_, v5, 0xE000000000000000);

  id v6 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel);
  id v7 = __swift_project_boxed_opaque_existential_1Tm(v17, v18);
  sub_1AD881F34(*v7, *((unsigned char *)v7 + 8));
  id v8 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setText_, v8);

  __swift_project_boxed_opaque_existential_1Tm(v17, v18);
  uint64_t v9 = sub_1AD9DD460();
  sub_1AD97FB40(v9, v10);
  swift_bridgeObjectRelease();
  return (id)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
}

void sub_1AD97FB40(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v3 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel);
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    id v4 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setAccessibilityIdentifier_, v4);

    id v5 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel);
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    id v7 = (id)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setAccessibilityIdentifier_, v7);
  }
  else
  {
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel), sel_setAccessibilityIdentifier_, 0);
    id v6 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel);
    objc_msgSend(v6, sel_setAccessibilityIdentifier_, 0);
  }
}

id sub_1AD97FCC8()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for ConfirmationListItemTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ConfirmationListItemTableViewCell()
{
  return self;
}

uint64_t sub_1AD97FD94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item;
  swift_beginAccess();
  return sub_1AD886B10(v3, a1);
}

uint64_t sub_1AD97FDE8(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item;
  swift_beginAccess();
  sub_1AD8869F8(a1, v3);
  swift_endAccess();
  sub_1AD97F88C();
  return sub_1AD8B1F34(a1, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
}

id (*sub_1AD97FE70(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24)  = v1;
  swift_beginAccess();
  return sub_1AD97FED0;
}

id sub_1AD97FED0(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1AD97F88C();
  }
  return result;
}

uint64_t sub_1AD97FF04()
{
  return sub_1AD9DD310();
}

void sub_1AD97FF78(uint64_t a1, uint64_t a2)
{
}

void sub_1AD97FF9C()
{
  uint64_t v1 = v0;
  objc_super v2 = &v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item];
  *(_OWORD *)objc_super v2 = 0u;
  *((_OWORD *)v2 + 1)  = 0u;
  *((void *)v2 + 4)  = 0;
  uint64_t v3 = (void *)*MEMORY[0x1E4FB2950];
  id v4 = objc_msgSend(self, sel_hk_sleepKeyColor);
  uint64_t v5 = *MEMORY[0x1E4FB09E0];
  id v6 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v7 = v3;
  id v8 = v4;
  id v9 = objc_msgSend(v6, sel_init);
  uint64_t v10 = v9;
  if (v8) {
    objc_msgSend(v9, sel_setTextColor_, v8);
  }
  uint64_t v11 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v12 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v7, 0, 0, 0, 0, 0, 0, v5, 0);
  objc_msgSend(v10, sel_setFont_, v12);

  objc_msgSend(v10, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v10, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v10, sel_setLineBreakMode_, 0);
  objc_msgSend(v10, sel_setNumberOfLines_, 0);

  *(void *)&v1[v11]  = v10;
  uint64_t v13 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel;
  long long v14 = (void *)*MEMORY[0x1E4FB28C8];
  uint64_t v15 = *MEMORY[0x1E4FB09B8];
  id v16 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v17 = v14;
  id v18 = objc_msgSend(v16, sel_init);
  id v19 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v17, 0, 1, 0, 0, 0, 0, v15, 0);
  objc_msgSend(v18, sel_setFont_, v19);

  objc_msgSend(v18, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v18, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v18, sel_setLineBreakMode_, 0);
  objc_msgSend(v18, sel_setNumberOfLines_, 0);
  *(void *)&v1[v13]  = v18;

  sub_1AD9E0140();
  __break(1u);
}

id CurrentUserModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id CurrentUserModel.init()()
{
  v17[1]  = *(id *)MEMORY[0x1E4F143B8];
  id v1 = objc_allocWithZone(MEMORY[0x1E4F1B980]);
  objc_super v2 = v0;
  id v3 = objc_msgSend(v1, sel_init);
  *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI16CurrentUserModel_contactStore]  = v3;
  sub_1AD870B1C();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_1AD9E5930;
  uint64_t v5 = (void *)*MEMORY[0x1E4F1ADF0];
  id v6 = (void *)*MEMORY[0x1E4F1AEC0];
  *(void *)(v4 + 32)  = *MEMORY[0x1E4F1ADF0];
  *(void *)(v4 + 40)  = v6;
  sub_1AD9DF870();
  sub_1AD980444();
  id v7 = v5;
  id v8 = v6;
  id v9 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  v17[0]  = 0;
  id v10 = objc_msgSend(v3, sel__ios_meContactWithKeysToFetch_error_, v9, v17);

  id v11 = v17[0];
  if (v10)
  {
    *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI16CurrentUserModel_meContact]  = v10;
    id v12 = v11;
  }
  else
  {
    id v13 = v17[0];
    long long v14 = (void *)sub_1AD9DCB10();

    swift_willThrow();
    *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI16CurrentUserModel_meContact]  = 0;
  }

  v16.receiver  = v2;
  v16.super_class  = (Class)type metadata accessor for CurrentUserModel();
  return objc_msgSendSuper2(&v16, sel_init);
}

unint64_t sub_1AD980444()
{
  unint64_t result = qword_1E9A4D160;
  if (!qword_1E9A4D160)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4D160);
  }
  return result;
}

uint64_t type metadata accessor for CurrentUserModel()
{
  return self;
}

uint64_t sub_1AD9804E4()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI16CurrentUserModel_meContact);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  id v3 = objc_msgSend(v2, sel_nickname);
  sub_1AD9DF710();

  uint64_t v4 = sub_1AD9DF770();
  swift_bridgeObjectRelease();
  if (v4 < 1)
  {
    id v6 = objc_msgSend(v2, sel_givenName);
    sub_1AD9DF710();

    uint64_t v7 = sub_1AD9DF770();
    swift_bridgeObjectRelease();
    if (v7 >= 1)
    {
      id v5 = objc_msgSend(v2, sel_givenName);
      goto LABEL_6;
    }

    return 0;
  }
  id v5 = objc_msgSend(v2, sel_nickname);
LABEL_6:
  id v8 = v5;
  uint64_t v9 = sub_1AD9DF710();

  return v9;
}

id CurrentUserModel.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for CurrentUserModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for CurrentUserModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CurrentUserModel);
}

uint64_t dispatch thunk of CurrentUserModel.firstName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t WindDownPickerItem.baseIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WindDownPickerItem.baseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16)  = a1;
  *(void *)(v2 + 24)  = a2;
  return result;
}

uint64_t (*WindDownPickerItem.baseIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t WindDownPickerItem.reuseIdentifier.getter()
{
  return sub_1AD9DD280();
}

uint64_t WindDownPickerItem.uniqueIdentifier.getter()
{
  sub_1AD980860();
  uint64_t v0 = sub_1AD9DF730();
  sub_1AD9DF980();
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_1AD980860()
{
  unint64_t result = qword_1E9A4D170;
  if (!qword_1E9A4D170)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4D170);
  }
  return result;
}

uint64_t WindDownPickerItem.init(windDownDurationPublisher:maxDuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16)  = xmmword_1AD9E53A0;
  *(void *)(v6 + 32)  = sub_1AD9DF710();
  *(void *)(v6 + 40)  = v7;
  *(void *)(v6 + 48)  = 0x7065656C53;
  *(void *)(v6 + 56)  = 0xE500000000000000;
  *(void *)(v6 + 64)  = 0x736E6F6974704FLL;
  *(void *)(v6 + 72)  = 0xE700000000000000;
  sub_1AD86C2F8((uint64_t)&unk_1F046A6B0);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v8 = sub_1AD9DF690();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t result = swift_arrayDestroy();
  *(void *)a2  = a1;
  *(double *)(a2 + 8)  = a3;
  *(void *)(a2 + 16)  = v8;
  *(void *)(a2 + 24)  = v10;
  return result;
}

unint64_t sub_1AD9809F8(uint64_t a1)
{
  *(void *)(a1 + 8)  = sub_1AD980A28();
  unint64_t result = sub_1AD980A7C();
  *(void *)(a1 + 16)  = result;
  return result;
}

unint64_t sub_1AD980A28()
{
  unint64_t result = qword_1E9A4D178;
  if (!qword_1E9A4D178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D178);
  }
  return result;
}

unint64_t sub_1AD980A7C()
{
  unint64_t result = qword_1E9A4D180;
  if (!qword_1E9A4D180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D180);
  }
  return result;
}

uint64_t sub_1AD980AD0()
{
  return sub_1AD9DD280();
}

uint64_t destroy for WindDownPickerItem()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WindDownPickerItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WindDownPickerItem(void *a1, void *a2)
{
  *a1  = *a2;
  swift_retain();
  swift_release();
  a1[1]  = a2[1];
  a1[2]  = a2[2];
  a1[3]  = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for WindDownPickerItem(void *a1, void *a2)
{
  *a1  = *a2;
  swift_release();
  a1[1]  = a2[1];
  uint64_t v4 = a2[3];
  a1[2]  = a2[2];
  a1[3]  = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for WindDownPickerItem()
{
  return &type metadata for WindDownPickerItem;
}

void sub_1AD980C60()
{
  id v1 = objc_msgSend(v0, sel_textLabel);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (uint64_t)v0 + OBJC_IVAR____TtC13SleepHealthUI17TextTableViewCell_model;
    swift_beginAccess();
    sub_1AD981278(v3, (uint64_t)v11);
    uint64_t v4 = v12;
    if (v12)
    {
      id v5 = __swift_project_boxed_opaque_existential_1Tm(v11, (uint64_t)v12);
      uint64_t v6 = *(v4 - 1);
      MEMORY[0x1F4188790](v5, v5);
      uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(unsigned char *))(v6 + 16))(v8);
      sub_1AD8A5158((uint64_t)v11);
      uint64_t v9 = *(void (**)(unsigned char *, void *))(v6 + 8);
      swift_bridgeObjectRetain();
      v9(v8, v4);
      uint64_t v4 = (void *)sub_1AD9DF6D0();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1AD8A5158((uint64_t)v11);
    }
    objc_msgSend(v2, sel_setText_, v4);
  }
  sub_1AD980E08();
}

void sub_1AD980E08()
{
  id v1 = objc_msgSend(v0, sel_textLabel);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (uint64_t)v0 + OBJC_IVAR____TtC13SleepHealthUI17TextTableViewCell_model;
    swift_beginAccess();
    sub_1AD981278(v3, (uint64_t)v13);
    uint64_t v4 = v14;
    if (v14)
    {
      id v5 = __swift_project_boxed_opaque_existential_1Tm(v13, v14);
      uint64_t v6 = *(void *)(v4 - 8);
      MEMORY[0x1F4188790](v5, v5);
      uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(unsigned char *))(v6 + 16))(v8);
      sub_1AD8A5158((uint64_t)v13);
      uint64_t v9 = (void *)*((void *)v8 + 2);
      uint64_t v10 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
      id v11 = v9;
      v10(v8, v4);
      if (v9)
      {
LABEL_7:
        objc_msgSend(v2, sel_setTextColor_, v11);

        return;
      }
    }
    else
    {
      sub_1AD8A5158((uint64_t)v13);
    }
    id v11 = objc_msgSend(v0, sel_tintColor);
    goto LABEL_7;
  }
}

id sub_1AD9810CC()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for TextTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TextTableViewCell()
{
  return self;
}

id sub_1AD981134(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = &v2[OBJC_IVAR____TtC13SleepHealthUI17TextTableViewCell_model];
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1)  = 0u;
  *((void *)v6 + 4)  = 0;
  uint64_t v7 = (*(uint64_t (**)(void))(ObjectType + 112))();
  if (a2)
  {
    uint64_t v8 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  v16.receiver  = v3;
  v16.super_class  = (Class)type metadata accessor for TextTableViewCell();
  id v9 = objc_msgSendSuper2(&v16, sel_initWithStyle_reuseIdentifier_, v7, v8);

  id v10 = v9;
  objc_msgSend(v10, sel_setAccessoryType_, 0);
  id v11 = objc_msgSend(v10, sel_textLabel);
  if (v11)
  {
    id v12 = v11;
    objc_msgSend(v11, sel_setNumberOfLines_, 0);
  }
  id v13 = objc_msgSend(v10, sel_textLabel);
  if (v13)
  {
    uint64_t v14 = v13;
    objc_msgSend(v13, sel_setLineBreakMode_, 0);
  }
  return v10;
}

uint64_t sub_1AD981278(uint64_t a1, uint64_t a2)
{
  sub_1AD8A50A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD9812DC@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v62 = a8;
  int v61 = a7;
  uint64_t v60 = a6;
  uint64_t v59 = a5;
  int v66 = a4;
  uint64_t v67 = a2;
  uint64_t v68 = a3;
  uint64_t v11 = sub_1AD9DCB80();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD985488(0, &qword_1E9A4CE80, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v16 - 8, v17);
  id v19 = (char *)v56 - v18;
  sub_1AD8C88A8();
  uint64_t v64 = *(void *)(v20 - 8);
  uint64_t v65 = v20;
  MEMORY[0x1F4188790](v20, v21);
  uint64_t v63 = (char *)v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = a9;
  uint64_t v70 = v12;
  uint64_t v71 = v11;
  if (a1)
  {
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
  }
  else if (qword_1EB724E38 != -1)
  {
    swift_once();
  }
  id v23 = (id)qword_1EB727930;
  uint64_t v57 = sub_1AD9DCA70();
  uint64_t v72 = v24;

  swift_bridgeObjectRelease();
  id v25 = (id)qword_1EB727930;
  unint64_t v54 = 0xE000000000000000;
  v56[3]  = sub_1AD9DCA70();
  uint64_t v58 = v26;

  swift_bridgeObjectRelease();
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v27 = (id)qword_1EB727930;
  uint64_t v28 = sub_1AD9DCA70();
  uint64_t v30 = v29;

  swift_bridgeObjectRelease();
  id v31 = (id)qword_1EB727930;
  unint64_t v54 = 0xE000000000000000;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  id v32 = (id)HKSPScreenTimeURL();
  if (v32)
  {
    int v33 = v32;
    sub_1AD9DCB60();

    uint64_t v34 = v70;
    uint64_t v35 = v71;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v19, v15, v71);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v19, 0, 1, v35);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v19, 1, v35);
    if (result != 1)
    {
      void v56[2] = v56;
      uint64_t v79 = &type metadata for DeepLinkOpener;
      uint64_t v80 = &protocol witness table for DeepLinkOpener;
      v75[0]  = v59;
      v75[1]  = v60;
      char v76 = v61 & 1;
      uint64_t v77 = v62;
      uint64_t v73 = v57;
      uint64_t v74 = v72;
      uint64_t v38 = MEMORY[0x1F4188790](result, v37);
      v56[-10]  = v75;
      v56[-9]  = v28;
      v56[1]  = v30;
      MEMORY[0x1F4188790](v38, v39);
      uint64_t v62 = v19;
      sub_1AD985488(0, &qword_1E9A4B248, (uint64_t (*)(uint64_t))sub_1AD8C8A08, MEMORY[0x1E4F3F108]);
      uint64_t v41 = v40;
      sub_1AD95748C(0, &qword_1E9A4B280, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, MEMORY[0x1E4F3CC10]);
      uint64_t v43 = v42;
      unint64_t v44 = sub_1AD85F688();
      unint64_t v45 = sub_1AD957534();
      unint64_t v46 = sub_1AD8C8CC0();
      unint64_t v54 = v45;
      unint64_t v55 = v46;
      uint64_t v52 = MEMORY[0x1E4F3E2E8];
      unint64_t v53 = v44;
      uint64_t v50 = v41;
      uint64_t v51 = v43;
      uint64_t v48 = MEMORY[0x1E4F3E2F8];
      uint64_t v49 = MEMORY[0x1E4FBB1A0];
      uint64_t v47 = v63;
      sub_1AD9DED60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v62, v35);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v64 + 32))(v69, v47, v65);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v19, 1, 1, v71);
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD981A80@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v61 = a4;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v7 = sub_1AD9DCB80();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD985488(0, &qword_1E9A4CE80, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v69 = (char *)v54 - v14;
  sub_1AD985850();
  uint64_t v59 = *(void *)(v15 - 8);
  uint64_t v60 = v15;
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v58 = (char *)v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = a5;
  uint64_t v65 = v8;
  uint64_t v66 = v7;
  if (a1)
  {
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
  }
  else if (qword_1EB724E38 != -1)
  {
    swift_once();
  }
  id v18 = (id)qword_1EB727930;
  uint64_t v56 = (void *)sub_1AD9DCA70();
  uint64_t v67 = v19;

  swift_bridgeObjectRelease();
  id v20 = (id)qword_1EB727930;
  unint64_t v52 = 0xE000000000000000;
  uint64_t v55 = sub_1AD9DCA70();
  uint64_t v57 = v21;

  swift_bridgeObjectRelease();
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v22 = (id)qword_1EB727930;
  uint64_t v23 = sub_1AD9DCA70();
  uint64_t v25 = v24;

  swift_bridgeObjectRelease();
  id v26 = (id)qword_1EB727930;
  unint64_t v52 = 0xE000000000000000;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  id v27 = (id)HKSPScreenTimeURL();
  if (v27)
  {
    uint64_t v28 = v27;
    sub_1AD9DCB60();

    uint64_t v29 = v65;
    uint64_t v30 = v66;
    id v31 = v69;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v69, v11, v66);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v30);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v31, 1, v30);
    if (result != 1)
    {
      v54[2]  = v54;
      uint64_t v73 = &type metadata for DeepLinkOpener;
      uint64_t v74 = &protocol witness table for DeepLinkOpener;
      uint64_t v70 = v56;
      uint64_t v71 = v67;
      MEMORY[0x1F4188790](result, v33);
      uint64_t v56 = &v54[-12];
      v54[-10]  = v68;
      v54[-9]  = v23;
      v54[1]  = v25;
      MEMORY[0x1F4188790](v34, v35);
      sub_1AD983A0C();
      uint64_t v55 = v36;
      sub_1AD985488(0, &qword_1E9A4B248, (uint64_t (*)(uint64_t))sub_1AD8C8A08, MEMORY[0x1E4F3F108]);
      uint64_t v38 = v37;
      sub_1AD95748C(0, &qword_1E9A4B280, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, MEMORY[0x1E4F3CC10]);
      uint64_t v40 = v39;
      uint64_t v41 = sub_1AD9854EC(&qword_1E9A4D1A8, (void (*)(uint64_t))sub_1AD983A0C);
      unint64_t v42 = sub_1AD85F688();
      unint64_t v43 = sub_1AD957534();
      unint64_t v44 = sub_1AD8C8CC0();
      unint64_t v52 = v43;
      unint64_t v53 = v44;
      uint64_t v50 = v41;
      unint64_t v51 = v42;
      uint64_t v48 = v38;
      uint64_t v49 = v40;
      uint64_t v47 = MEMORY[0x1E4FBB1A0];
      uint64_t v46 = v55;
      unint64_t v45 = v58;
      sub_1AD9DED60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v72);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v69, v30);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v59 + 32))(v64, v45, v60);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v69, 1, 1, v66);
  }
  __break(1u);
  return result;
}

uint64_t SleepDeepLinkDestination.deepLinkURL.getter@<X0>(uint64_t a1@<X8>)
{
  if (*v1)
  {
    uint64_t v3 = (id *)MEMORY[0x1E4FA53D8];
    if (*v1 == 1) {
      uint64_t v3 = (id *)MEMORY[0x1E4FA53E0];
    }
    id v4 = *v3;
  }
  else
  {
    id v4 = 0;
  }
  id v5 = (id)HKSPSleepURL();

  if (v5)
  {
    sub_1AD9DCB60();

    uint64_t v6 = sub_1AD9DCB80();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    uint64_t v8 = v6;
    uint64_t v9 = a1;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = sub_1AD9DCB80();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v8 = v11;
    uint64_t v9 = a1;
    uint64_t v10 = 1;
  }
  return v7(v9, v10, 1, v8);
}

uint64_t sub_1AD982314@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, unint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, long long a8)
{
  unint64_t v72 = a3;
  uint64_t v81 = a5;
  long long v78 = a8;
  uint64_t v76 = a7;
  uint64_t v82 = a6;
  sub_1AD985488(0, &qword_1E9A4D1B0, MEMORY[0x1E4F3C4B0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v77 = (char *)&v66 - v13;
  sub_1AD8C8BE4();
  uint64_t v16 = MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v79 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v18);
  uint64_t v80 = (uint64_t)&v66 - v19;
  uint64_t v20 = sub_1AD9DDFE0();
  uint64_t v73 = *(void *)(v20 - 8);
  uint64_t v74 = v20;
  MEMORY[0x1F4188790](v20, v21);
  uint64_t v71 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1AD9DCB80();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  MEMORY[0x1F4188790](v23, v26);
  id v27 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD95748C(0, &qword_1E9A4B268, MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F3ECD0]);
  uint64_t v68 = v28;
  uint64_t v70 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28, v29);
  id v31 = (char *)&v66 - v30;
  sub_1AD8C8AB0();
  uint64_t v69 = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32, v34);
  uint64_t v36 = (char *)&v66 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD95742C();
  uint64_t v39 = MEMORY[0x1F4188790](v37 - 8, v38);
  uint64_t v75 = (uint64_t)&v66 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39, v41);
  uint64_t v67 = (char *)&v66 - v42;
  uint64_t v84 = a1;
  uint64_t v85 = a2;
  sub_1AD841030(v72, (uint64_t)v83);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, a4, v23);
  unint64_t v43 = (*(unsigned __int8 *)(v24 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v44 = (v25 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v45 = swift_allocObject();
  sub_1AD843F30(v83, v45 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v45 + v43, v27, v23);
  uint64_t v46 = (uint64_t *)(v45 + v44);
  uint64_t v47 = v82;
  uint64_t v48 = v76;
  *uint64_t v46 = v82;
  v46[1]  = v48;
  swift_bridgeObjectRetain();
  sub_1AD8CB060(v47);
  unint64_t v72 = sub_1AD85F688();
  sub_1AD9DF0B0();
  uint64_t v49 = v71;
  sub_1AD9DDFD0();
  sub_1AD8C8B60();
  uint64_t v50 = v68;
  sub_1AD9DECB0();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v49, v74);
  uint64_t v51 = v70;
  unint64_t v52 = *(void (**)(char *, uint64_t))(v70 + 8);
  v52(v31, v50);
  uint64_t v53 = (uint64_t)v67;
  uint64_t v54 = v69;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v67, v36, v69);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v54);
  v83[0]  = v78;
  swift_bridgeObjectRetain();
  uint64_t v55 = v77;
  sub_1AD9DDCA0();
  uint64_t v56 = sub_1AD9DDCB0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 0, 1, v56);
  uint64_t v57 = swift_allocObject();
  uint64_t v58 = v82;
  *(void *)(v57 + 16)  = v82;
  *(void *)(v57 + 24)  = v48;
  sub_1AD8CB060(v58);
  sub_1AD9DF0A0();
  uint64_t v59 = (uint64_t)v79;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v79, v31, v50);
  v52(v31, v50);
  uint64_t v60 = v59;
  uint64_t v61 = v80;
  sub_1AD985590(v59, v80);
  uint64_t v62 = v75;
  sub_1AD9855F4(v53, v75, (uint64_t (*)(void))sub_1AD95742C);
  sub_1AD9855F4(v61, v59, (uint64_t (*)(void))sub_1AD8C8BE4);
  uint64_t v63 = v81;
  sub_1AD9855F4(v62, v81, (uint64_t (*)(void))sub_1AD95742C);
  sub_1AD8C8A08();
  sub_1AD9855F4(v60, v63 + *(int *)(v64 + 48), (uint64_t (*)(void))sub_1AD8C8BE4);
  sub_1AD98565C(v61, (uint64_t (*)(void))sub_1AD8C8BE4);
  sub_1AD98565C(v53, (uint64_t (*)(void))sub_1AD95742C);
  sub_1AD98565C(v60, (uint64_t (*)(void))sub_1AD8C8BE4);
  return sub_1AD98565C(v62, (uint64_t (*)(void))sub_1AD95742C);
}

uint64_t sub_1AD982A44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  return sub_1AD982AA4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (unint64_t)&unk_1F0471A50, (uint64_t)sub_1AD985580, (uint64_t)&unk_1F0471A78, (uint64_t)sub_1AD985BB4);
}

uint64_t sub_1AD982AA4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v85 = a7;
  uint64_t v80 = a5;
  uint64_t v81 = a6;
  uint64_t v75 = a3;
  uint64_t v90 = a8;
  uint64_t v88 = a12;
  uint64_t v89 = a13;
  uint64_t v82 = a11;
  uint64_t v84 = a9;
  unint64_t v76 = a10;
  sub_1AD985488(0, &qword_1E9A4D1B0, MEMORY[0x1E4F3C4B0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v16 - 8, v17);
  uint64_t v83 = (char *)&v70 - v18;
  sub_1AD8C8BE4();
  uint64_t v21 = MEMORY[0x1F4188790](v19 - 8, v20);
  uint64_t v86 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21, v23);
  uint64_t v87 = (uint64_t)&v70 - v24;
  uint64_t v78 = sub_1AD9DDFE0();
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78, v25);
  uint64_t v74 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_1AD9DCB80();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(void *)(v28 + 64);
  MEMORY[0x1F4188790](v27, v30);
  id v31 = (char *)&v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD95748C(0, &qword_1E9A4B268, MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F3ECD0]);
  uint64_t v91 = v32;
  uint64_t v73 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32, v33);
  uint64_t v35 = (char *)&v70 - v34;
  sub_1AD8C8AB0();
  uint64_t v72 = v36;
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36, v38);
  uint64_t v40 = (char *)&v70 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD95742C();
  uint64_t v43 = MEMORY[0x1F4188790](v41 - 8, v42);
  uint64_t v79 = (uint64_t)&v70 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v43, v45);
  uint64_t v71 = (char *)&v70 - v46;
  uint64_t v93 = a1;
  uint64_t v94 = a2;
  sub_1AD841030(v75, (uint64_t)v92);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, a4, v27);
  unint64_t v47 = (*(unsigned __int8 *)(v28 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  unint64_t v48 = (v29 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = swift_allocObject();
  sub_1AD843F30(v92, v49 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v49 + v47, v31, v27);
  uint64_t v50 = (uint64_t *)(v49 + v48);
  uint64_t v51 = v80;
  uint64_t v52 = v81;
  uint64_t *v50 = v80;
  v50[1]  = v52;
  swift_bridgeObjectRetain();
  sub_1AD8CB060(v51);
  unint64_t v76 = sub_1AD85F688();
  sub_1AD9DF0B0();
  uint64_t v53 = v74;
  sub_1AD9DDFD0();
  sub_1AD8C8B60();
  uint64_t v54 = v91;
  sub_1AD9DECB0();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v53, v78);
  uint64_t v55 = v73;
  uint64_t v56 = *(void (**)(char *, uint64_t))(v73 + 8);
  v56(v35, v54);
  uint64_t v57 = (uint64_t)v71;
  uint64_t v58 = v72;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v71, v40, v72);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v58);
  *(void *)&v92[0]  = v85;
  *((void *)&v92[0] + 1)  = v84;
  swift_bridgeObjectRetain();
  uint64_t v59 = v83;
  sub_1AD9DDCA0();
  uint64_t v60 = sub_1AD9DDCB0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 0, 1, v60);
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16)  = v51;
  *(void *)(v61 + 24)  = v52;
  sub_1AD8CB060(v51);
  sub_1AD9DF0A0();
  uint64_t v62 = (uint64_t)v86;
  uint64_t v63 = v91;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v86, v35, v91);
  v56(v35, v63);
  uint64_t v64 = v62;
  uint64_t v65 = v87;
  sub_1AD985590(v62, v87);
  uint64_t v66 = v79;
  sub_1AD9855F4(v57, v79, (uint64_t (*)(void))sub_1AD95742C);
  sub_1AD9855F4(v65, v62, (uint64_t (*)(void))sub_1AD8C8BE4);
  uint64_t v67 = v90;
  sub_1AD9855F4(v66, v90, (uint64_t (*)(void))sub_1AD95742C);
  sub_1AD8C8A08();
  sub_1AD9855F4(v64, v67 + *(int *)(v68 + 48), (uint64_t (*)(void))sub_1AD8C8BE4);
  sub_1AD98565C(v65, (uint64_t (*)(void))sub_1AD8C8BE4);
  sub_1AD98565C(v57, (uint64_t (*)(void))sub_1AD95742C);
  sub_1AD98565C(v64, (uint64_t (*)(void))sub_1AD8C8BE4);
  return sub_1AD98565C(v66, (uint64_t (*)(void))sub_1AD95742C);
}

SleepHealthUI::SleepDeepLinkDestination_optional __swiftcall SleepDeepLinkDestination.init(rawValue:)(Swift::String rawValue)
{
  objc_super v2 = v1;
  unint64_t v3 = sub_1AD9E0210();
  result.value  = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *objc_super v2 = v5;
  return result;
}

uint64_t SleepDeepLinkDestination.rawValue.getter()
{
  uint64_t v1 = 0x696472616F626E6FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x63536567616E616DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657078456E69616DLL;
  }
}

uint64_t sub_1AD9832C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1AD902214(*a1, *a2);
}

uint64_t sub_1AD9832CC()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD98338C()
{
  sub_1AD9DF760();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD983438()
{
  return sub_1AD9E03E0();
}

SleepHealthUI::SleepDeepLinkDestination_optional sub_1AD9834F4(Swift::String *a1)
{
  return SleepDeepLinkDestination.init(rawValue:)(*a1);
}

void sub_1AD983500(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEE0065636E656972;
  unint64_t v4 = 0xEA0000000000676ELL;
  uint64_t v5 = 0x696472616F626E6FLL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x63536567616E616DLL;
    unint64_t v4 = 0xEE00656C75646568;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x657078456E69616DLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1  = v7;
  a1[1]  = v3;
}

unint64_t SleepDeepLinkDestination.description.getter()
{
  return 0xD000000000000019;
}

unint64_t SleepDeepLinkDestination.route.getter()
{
  unint64_t v1 = *v0;
  if (*v0)
  {
    int v2 = (id *)MEMORY[0x1E4FA53E0];
    if (v1 != 1) {
      int v2 = (id *)MEMORY[0x1E4FA53D8];
    }
    unint64_t v1 = (unint64_t)*v2;
    id v3 = *v2;
  }
  return v1;
}

uint64_t SleepDeepLinkDestination.localizedTitle.getter()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SleepDeepLinkButton.init(destination:deepLinkOpener:)@<X0>(char *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  sub_1AD9DF040();
  *(unsigned char *)(a3 + 48)  = v7;
  *(void *)(a3 + 56)  = v8;
  *(unsigned char *)a3  = v5;
  return sub_1AD843F30(a2, a3 + 8);
}

uint64_t SleepDeepLinkButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1AD983A0C();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1AD8C94FC(v1, (uint64_t)&v19);
  uint64_t v9 = (_OWORD *)swift_allocObject();
  long long v10 = v20;
  v9[1]  = v19;
  v9[2]  = v10;
  long long v11 = v22;
  v9[3]  = v21;
  void v9[4] = v11;
  uint64_t v16 = v1;
  sub_1AD959D04();
  sub_1AD983AEC();
  sub_1AD9DF090();
  char v12 = *(unsigned char *)v1 != 1;
  uint64_t v13 = *(void *)(v1 + 56);
  char v17 = *(unsigned char *)(v1 + 48);
  uint64_t v18 = v13;
  sub_1AD983DD0(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
  sub_1AD9DF070();
  sub_1AD981A80(v12, v19, *((uint64_t *)&v19 + 1), v20, a1);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1AD983A0C()
{
  if (!qword_1E9A4D190)
  {
    sub_1AD959D04();
    sub_1AD983AEC();
    unint64_t v0 = sub_1AD9DF0C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4D190);
    }
  }
}

void sub_1AD983A70()
{
  if (!qword_1E9A4A120)
  {
    sub_1AD983DD0(255, &qword_1E9A4A128, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB718]);
    unint64_t v0 = sub_1AD9DE6D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A120);
    }
  }
}

unint64_t sub_1AD983AEC()
{
  unint64_t result = qword_1E9A4D198;
  if (!qword_1E9A4D198)
  {
    sub_1AD959D04();
    sub_1AD8846A0();
    sub_1AD9854EC((unint64_t *)&qword_1E9A4A180, (void (*)(uint64_t))sub_1AD983A70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D198);
  }
  return result;
}

void sub_1AD983B94(unsigned char *a1)
{
  id v2 = objc_msgSend(self, sel_sharedBehavior);
  if (v2)
  {
    uint64_t v3 = v2;
    unsigned int v4 = objc_msgSend(v2, sel_healthAppHidden);

    if (v4)
    {
      sub_1AD984BA8((uint64_t)a1);
    }
    else
    {
      sub_1AD983E1C(a1);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1AD983C34()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_release();
  return swift_deallocObject();
}

void sub_1AD983C74()
{
  sub_1AD983B94((unsigned char *)(v0 + 16));
}

Swift::Void __swiftcall SleepDeepLinkButton.openDeepLink()()
{
  id v1 = objc_msgSend(self, sel_sharedBehavior);
  if (v1)
  {
    id v2 = v1;
    unsigned int v3 = objc_msgSend(v1, sel_healthAppHidden);

    if (v3)
    {
      sub_1AD984BA8((uint64_t)v0);
    }
    else
    {
      sub_1AD983E1C(v0);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1AD983D18@<X0>(uint64_t a1@<X8>)
{
  SleepDeepLinkDestination.localizedTitle.getter();
  sub_1AD85F688();
  uint64_t v2 = sub_1AD9DEAF0();
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1  = v2;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = v6 & 1;
  *(void *)(a1 + 24)  = v8;
  *(void *)(a1 + 32)  = KeyPath;
  *(unsigned char *)(a1 + 40)  = 0;
  *(void *)(a1 + 48)  = result;
  *(void *)(a1 + 56)  = 0;
  *(unsigned char *)(a1 + 64)  = 1;
  return result;
}

uint64_t sub_1AD983DC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD983D18(a1);
}

void sub_1AD983DD0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD983E1C(unsigned char *a1)
{
  sub_1AD985488(0, &qword_1E9A4CE80, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  unint64_t v5 = (char *)&v32 - v4;
  uint64_t v6 = sub_1AD9DCB80();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6, v9);
  long long v10 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)&v32 - v13;
  if (*a1)
  {
    uint64_t v15 = (id *)MEMORY[0x1E4FA53D8];
    if (*a1 == 1) {
      uint64_t v15 = (id *)MEMORY[0x1E4FA53E0];
    }
    id v16 = *v15;
  }
  else
  {
    id v16 = 0;
  }
  id v17 = (id)HKSPSleepURL();

  if (v17)
  {
    sub_1AD9DCB60();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v36(v14, v5, v6);
      if (qword_1E9A48EC8 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_1AD9DD550();
      __swift_project_value_buffer(v18, (uint64_t)qword_1E9A5A708);
      sub_1AD8C94FC((uint64_t)a1, (uint64_t)v40);
      long long v19 = sub_1AD9DD530();
      int v20 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v19, (os_log_type_t)v20))
      {
        int v33 = v20;
        os_log_t v34 = v19;
        uint64_t v35 = v7 + 32;
        uint64_t v21 = swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        uint64_t v39 = v32;
        *(_DWORD *)uint64_t v21 = 136446466;
        uint64_t v37 = sub_1AD838978(0xD000000000000013, 0x80000001AD9ED010, &v39);
        sub_1AD9DFEA0();
        *(_WORD *)(v21 + 12)  = 2082;
        uint64_t v37 = 0xD000000000000019;
        unint64_t v38 = 0x80000001AD9F24F0;
        sub_1AD9DF790();
        swift_bridgeObjectRelease();
        uint64_t v37 = sub_1AD838978(v37, v38, &v39);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        sub_1AD8C9670((uint64_t)v40);
        long long v19 = v34;
        _os_log_impl(&dword_1AD834000, v34, (os_log_type_t)v33, "[%{public}s] Opening deep link to destination: %{public}s", (uint8_t *)v21, 0x16u);
        uint64_t v22 = v32;
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v22, -1, -1);
        MEMORY[0x1B3E6D1A0](v21, -1, -1);
      }
      else
      {
        sub_1AD8C9670((uint64_t)v40);
      }

      sub_1AD841030((uint64_t)(a1 + 8), (uint64_t)v40);
      uint64_t v28 = v41;
      uint64_t v29 = v42;
      __swift_project_boxed_opaque_existential_1Tm(v40, v41);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v14, v6);
      unint64_t v30 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v31 = swift_allocObject();
      v36((char *)(v31 + v30), v10, v6);
      (*(void (**)(char *, void (*)(void *), uint64_t, uint64_t, uint64_t))(v29 + 8))(v14, sub_1AD9857E0, v31, v28, v29);
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  sub_1AD9856C4((uint64_t)v5);
  if (qword_1E9A48EC8 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_1AD9DD550();
  __swift_project_value_buffer(v23, (uint64_t)qword_1E9A5A708);
  sub_1AD8C94FC((uint64_t)a1, (uint64_t)v40);
  uint64_t v24 = sub_1AD9DD530();
  os_log_type_t v25 = sub_1AD9DFBD0();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v39 = v27;
    *(_DWORD *)uint64_t v26 = 136446466;
    uint64_t v37 = sub_1AD838978(0xD000000000000013, 0x80000001AD9ED010, &v39);
    sub_1AD9DFEA0();
    *(_WORD *)(v26 + 12)  = 2082;
    uint64_t v37 = 0xD000000000000019;
    unint64_t v38 = 0x80000001AD9F24F0;
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    uint64_t v37 = sub_1AD838978(v37, v38, &v39);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    sub_1AD8C9670((uint64_t)v40);
    _os_log_impl(&dword_1AD834000, v24, v25, "[%{public}s] Unable to resolve deep link URL for destination: %{public}s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v27, -1, -1);
    MEMORY[0x1B3E6D1A0](v26, -1, -1);
  }
  else
  {
    sub_1AD8C9670((uint64_t)v40);
  }
}

void sub_1AD9845F0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DCB80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v33 - v11;
  if (a1)
  {
    id v13 = a1;
    if (qword_1E9A48EC8 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_1AD9DD550();
    __swift_project_value_buffer(v14, (uint64_t)qword_1E9A5A708);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    id v15 = a1;
    id v16 = a1;
    id v17 = sub_1AD9DD530();
    os_log_type_t v18 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v36 = v34;
      *(_DWORD *)uint64_t v19 = 136446722;
      uint64_t v35 = sub_1AD838978(0xD000000000000013, 0x80000001AD9ED010, &v36);
      sub_1AD9DFEA0();
      *(_WORD *)(v19 + 12)  = 2082;
      sub_1AD9854EC(&qword_1E9A4D1B8, MEMORY[0x1E4F276F0]);
      uint64_t v20 = sub_1AD9E0280();
      uint64_t v35 = sub_1AD838978(v20, v21, &v36);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      *(_WORD *)(v19 + 22)  = 2082;
      uint64_t v35 = (uint64_t)a1;
      id v22 = a1;
      sub_1AD869CF0();
      uint64_t v23 = sub_1AD9DF730();
      uint64_t v35 = sub_1AD838978(v23, v24, &v36);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v17, v18, "[%{public}s] Failed to open deep link (%{public}s) due to error: %{public}s", (uint8_t *)v19, 0x20u);
      uint64_t v25 = v34;
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v25, -1, -1);
      MEMORY[0x1B3E6D1A0](v19, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  else
  {
    if (qword_1E9A48EC8 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_1AD9DD550();
    __swift_project_value_buffer(v26, (uint64_t)qword_1E9A5A708);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v12, a2, v4);
    uint64_t v27 = sub_1AD9DD530();
    os_log_type_t v28 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v36 = v30;
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v35 = sub_1AD838978(0xD000000000000013, 0x80000001AD9ED010, &v36);
      sub_1AD9DFEA0();
      *(_WORD *)(v29 + 12)  = 2082;
      sub_1AD9854EC(&qword_1E9A4D1B8, MEMORY[0x1E4F276F0]);
      uint64_t v31 = sub_1AD9E0280();
      uint64_t v35 = sub_1AD838978(v31, v32, &v36);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
      _os_log_impl(&dword_1AD834000, v27, v28, "[%{public}s] Successfully opened deep link (%{public}s)", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v30, -1, -1);
      MEMORY[0x1B3E6D1A0](v29, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    }
  }
}

uint64_t sub_1AD984BA8(uint64_t a1)
{
  if (qword_1E9A48EC8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1E9A5A708);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v9[0]  = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_1AD838978(0xD000000000000013, 0x80000001AD9ED010, v9);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Displaying Health App Hidden Alert", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  uint64_t v7 = *(void *)(a1 + 56);
  LOBYTE(v9[0])  = *(unsigned char *)(a1 + 48);
  v9[1]  = v7;
  sub_1AD983DD0(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
  return sub_1AD9DF060();
}

unint64_t sub_1AD984D80()
{
  unint64_t result = qword_1E9A4D1A0;
  if (!qword_1E9A4D1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D1A0);
  }
  return result;
}

uint64_t sub_1AD984DD4()
{
  return swift_getOpaqueTypeConformance2();
}

unsigned char *storeEnumTagSinglePayload for SleepDeepLinkDestination(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD984EC0);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepDeepLinkDestination()
{
  return &type metadata for SleepDeepLinkDestination;
}

uint64_t dispatch thunk of SleepDeepLinkDestinationOpening.openDeepLink(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t destroy for SleepDeepLinkButton(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  return swift_release();
}

uint64_t initializeWithCopy for SleepDeepLinkButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32)  = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SleepDeepLinkButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *int v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3]  = v5;
      result[4]  = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *int v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for SleepDeepLinkButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepDeepLinkButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepDeepLinkButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56)  = 0;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepDeepLinkButton()
{
  return &type metadata for SleepDeepLinkButton;
}

uint64_t sub_1AD985358()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD985488(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD9854EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD985534@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD982314(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1, *(void *)(v1 + 56), *(void *)(v1 + 64), *(_OWORD *)(v1 + 72));
}

uint64_t (*sub_1AD985588())(void)
{
  return sub_1AD90F098(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1AD985590(uint64_t a1, uint64_t a2)
{
  sub_1AD8C8BE4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD9855F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD98565C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD9856C4(uint64_t a1)
{
  sub_1AD985488(0, &qword_1E9A4CE80, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD985750()
{
  uint64_t v1 = sub_1AD9DCB80();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void sub_1AD9857E0(void *a1)
{
  uint64_t v3 = *(void *)(sub_1AD9DCB80() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  sub_1AD9845F0(a1, v4);
}

void sub_1AD985850()
{
  if (!qword_1E9A4D1C0)
  {
    sub_1AD983A0C();
    sub_1AD985488(255, &qword_1E9A4B248, (uint64_t (*)(uint64_t))sub_1AD8C8A08, MEMORY[0x1E4F3F108]);
    sub_1AD95748C(255, &qword_1E9A4B280, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, MEMORY[0x1E4F3CC10]);
    sub_1AD9854EC(&qword_1E9A4D1A8, (void (*)(uint64_t))sub_1AD983A0C);
    sub_1AD85F688();
    sub_1AD957534();
    sub_1AD8C8CC0();
    OpaqueTypeMetadata2  = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4D1C0);
    }
  }
}

uint64_t sub_1AD9859B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD982AA4(v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], a1, v1[10], (unint64_t)&unk_1F0471AC8, (uint64_t)sub_1AD985580, (uint64_t)&unk_1F0471AF0, (uint64_t)sub_1AD985BB4);
}

uint64_t objectdestroy_9Tm()
{
  uint64_t v1 = sub_1AD9DCB80();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(void *)(v0 + v4)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1AD985B0C()
{
  uint64_t v1 = *(void *)(sub_1AD9DCB80() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + v2;
  unint64_t v4 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  return sub_1AD90EFC8((void *)(v0 + 16), v3, v5, v6);
}

id SleepSettingsProviderWrapper.provider.getter()
{
  return *(id *)(v0 + 16);
}

id sub_1AD985BC4()
{
  return *(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore);
}

uint64_t sub_1AD985BDC()
{
  return swift_retain();
}

uint64_t sub_1AD985BF4()
{
  return swift_retain();
}

uint64_t SleepSettingsProviderWrapper.__allocating_init(sleepStore:sleepSettings:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  id v5 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  *(void *)(v4 + 16)  = SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, a2);
  return v4;
}

uint64_t SleepSettingsProviderWrapper.init(sleepStore:sleepSettings:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  *(void *)(v3 + 16)  = SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, a2);
  return v3;
}

uint64_t SleepSettingsProviderWrapper.__allocating_init(sleepStore:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  id v3 = HKSPSleepStore.settings.getter();
  id v4 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  *(void *)(v2 + 16)  = SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, v3);
  return v2;
}

uint64_t SleepSettingsProviderWrapper.init(sleepStore:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = HKSPSleepStore.settings.getter();
  id v5 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  *(void *)(v2 + 16)  = SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, v4);
  return v2;
}

uint64_t SleepSettingsProviderWrapper.deinit()
{
  return v0;
}

uint64_t SleepSettingsProviderWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id sub_1AD985DEC()
{
  return objc_retain(*(id *)(*(void *)(*(void *)v0 + 16)
                           + OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore));
}

uint64_t sub_1AD985E08()
{
  return swift_retain();
}

uint64_t sub_1AD985E24()
{
  return swift_retain();
}

uint64_t type metadata accessor for SleepSettingsProviderWrapper()
{
  return self;
}

uint64_t method lookup function for SleepSettingsProviderWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepSettingsProviderWrapper);
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.sleepStore.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.currentSettingsPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.currentSleepFocusConfigurationPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.__allocating_init(sleepStore:sleepSettings:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.__allocating_init(sleepStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

unint64_t static String.lockScreenAccessibilityIdentifier(_:)()
{
  return 0xD000000000000014;
}

id LockScreenContentView.model.getter()
{
  return *(id *)(v0 + 8);
}

void LockScreenContentView.model.setter(uint64_t a1)
{
  *(void *)(v1 + 8)  = a1;
}

uint64_t (*LockScreenContentView.model.modify())()
{
  return nullsub_1;
}

uint64_t LockScreenContentView.$model.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = type metadata accessor for LockScreenContentModel();
  uint64_t v4 = sub_1AD986EF4(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
  return MEMORY[0x1F40F8808](v1, v2, v3, v4);
}

uint64_t LockScreenContentView.init(model:)@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for LockScreenContentModel();
  sub_1AD986EF4(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
  uint64_t result = sub_1AD9DDF30();
  *a1  = result;
  a1[1]  = v3;
  return result;
}

uint64_t LockScreenContentView.body.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1AD98626C();
  MEMORY[0x1F4188790](v3 - 8, v4);
  id v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9863A4(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9863E0(*(void **)(v1 + 8), (uint64_t)v6);
  char v12 = sub_1AD9DE790();
  sub_1AD9DDCC0();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_1AD98692C((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(void))sub_1AD98626C);
  unint64_t v21 = &v11[*(int *)(v8 + 44)];
  *unint64_t v21 = v12;
  *((void *)v21 + 1)  = v14;
  *((void *)v21 + 2)  = v16;
  *((void *)v21 + 3)  = v18;
  *((void *)v21 + 4)  = v20;
  v21[40]  = 0;
  sub_1AD9869D0((uint64_t)v6, (uint64_t (*)(void))sub_1AD98626C);
  char v22 = sub_1AD9DE7A0();
  sub_1AD9DDCC0();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  sub_1AD98692C((uint64_t)v11, a1, (uint64_t (*)(void))sub_1AD9863A4);
  sub_1AD986994(0);
  uint64_t v32 = a1 + *(int *)(v31 + 36);
  *(unsigned char *)uint64_t v32 = v22;
  *(void *)(v32 + 8)  = v24;
  *(void *)(v32 + 16)  = v26;
  *(void *)(v32 + 24)  = v28;
  *(void *)(v32 + 32)  = v30;
  *(unsigned char *)(v32 + 40)  = 0;
  return sub_1AD9869D0((uint64_t)v11, (uint64_t (*)(void))sub_1AD9863A4);
}

void sub_1AD98626C()
{
  if (!qword_1E9A4D1C8)
  {
    sub_1AD986338(255, &qword_1E9A4D1D0, (uint64_t (*)(uint64_t))sub_1AD9862FC, MEMORY[0x1E4F3F058], MEMORY[0x1E4F3D750]);
    unint64_t v0 = sub_1AD9DEF30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4D1C8);
    }
  }
}

void sub_1AD9862FC(uint64_t a1)
{
}

void sub_1AD986338(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_1AD9863A4(uint64_t a1)
{
}

void sub_1AD9863E0(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v29[2] = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4F3D748];
  sub_1AD986338(0, &qword_1E9A4D228, (uint64_t (*)(uint64_t))sub_1AD9862FC, MEMORY[0x1E4F3F058], MEMORY[0x1E4F3D748]);
  v29[1]  = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (char *)v29 - v6;
  sub_1AD986338(0, &qword_1E9A4D230, type metadata accessor for LockScreenGreetingView, (uint64_t)&type metadata for LockScreenBedtimeView, v3);
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (void *)((char *)v29 - v10);
  sub_1AD9862FC(0);
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for LockScreenGreetingView(0);
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v20 = (void *)((char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getKeyPath();
  swift_getKeyPath();
  id v21 = a1;
  sub_1AD9DDBC0();

  swift_release();
  swift_release();
  if (v30 - 1 >= 2)
  {
    v29[0]  = v13;
    if (v30)
    {
      *(uint64_t *)((char *)v20 + *(int *)(v17 + 20))  = swift_getKeyPath();
      sub_1AD986FA0();
      swift_storeEnumTagMultiPayload();
      type metadata accessor for LockScreenContentModel();
      sub_1AD986EF4(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
      id v27 = v21;
      *uint64_t v20 = sub_1AD9DDF30();
      v20[1]  = v28;
      sub_1AD98692C((uint64_t)v20, (uint64_t)v11, type metadata accessor for LockScreenGreetingView);
      swift_storeEnumTagMultiPayload();
      sub_1AD986EF4(&qword_1E9A4D218, (void (*)(uint64_t))type metadata accessor for LockScreenGreetingView);
      sub_1AD986F3C();
      sub_1AD9DE470();
      sub_1AD98692C((uint64_t)v16, (uint64_t)v7, (uint64_t (*)(void))sub_1AD9862FC);
      swift_storeEnumTagMultiPayload();
      sub_1AD986E4C();
      sub_1AD9DE470();
      sub_1AD9869D0((uint64_t)v16, (uint64_t (*)(void))sub_1AD9862FC);
      sub_1AD9869D0((uint64_t)v20, type metadata accessor for LockScreenGreetingView);
    }
    else
    {
      swift_storeEnumTagMultiPayload();
      sub_1AD986E4C();
      sub_1AD9DE470();
    }
  }
  else
  {
    type metadata accessor for LockScreenContentModel();
    sub_1AD986EF4(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
    id v22 = v21;
    uint64_t v23 = sub_1AD9DDF30();
    uint64_t v25 = v24;
    *uint64_t v11 = v23;
    v11[1]  = (uint64_t)v24;
    swift_storeEnumTagMultiPayload();
    sub_1AD986EF4(&qword_1E9A4D218, (void (*)(uint64_t))type metadata accessor for LockScreenGreetingView);
    sub_1AD986F3C();
    id v26 = v25;
    sub_1AD9DE470();
    sub_1AD98692C((uint64_t)v16, (uint64_t)v7, (uint64_t (*)(void))sub_1AD9862FC);
    swift_storeEnumTagMultiPayload();
    sub_1AD986E4C();
    sub_1AD9DE470();
    sub_1AD9869D0((uint64_t)v16, (uint64_t (*)(void))sub_1AD9862FC);
  }
}

uint64_t sub_1AD98692C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1AD986994(uint64_t a1)
{
}

uint64_t sub_1AD9869D0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD986A30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD986A4C@<X0>(uint64_t a1@<X8>)
{
  sub_1AD98626C();
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9863A4(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9863E0(*(void **)(v1 + 8), (uint64_t)v6);
  char v12 = sub_1AD9DE790();
  sub_1AD9DDCC0();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_1AD98692C((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(void))sub_1AD98626C);
  id v21 = &v11[*(int *)(v8 + 44)];
  *id v21 = v12;
  *((void *)v21 + 1)  = v14;
  *((void *)v21 + 2)  = v16;
  *((void *)v21 + 3)  = v18;
  *((void *)v21 + 4)  = v20;
  v21[40]  = 0;
  sub_1AD9869D0((uint64_t)v6, (uint64_t (*)(void))sub_1AD98626C);
  char v22 = sub_1AD9DE7A0();
  sub_1AD9DDCC0();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  sub_1AD98692C((uint64_t)v11, a1, (uint64_t (*)(void))sub_1AD9863A4);
  sub_1AD986994(0);
  uint64_t v32 = a1 + *(int *)(v31 + 36);
  *(unsigned char *)uint64_t v32 = v22;
  *(void *)(v32 + 8)  = v24;
  *(void *)(v32 + 16)  = v26;
  *(void *)(v32 + 24)  = v28;
  *(void *)(v32 + 32)  = v30;
  *(unsigned char *)(v32 + 40)  = 0;
  return sub_1AD9869D0((uint64_t)v11, (uint64_t (*)(void))sub_1AD9863A4);
}

id sub_1AD986C00@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 8);
  *a2  = v2;
  return v2;
}

void sub_1AD986C0C(id *a1, uint64_t a2)
{
}

ValueMetadata *type metadata accessor for LockScreenContentView()
{
  return &type metadata for LockScreenContentView;
}

uint64_t sub_1AD986C2C()
{
  return sub_1AD986CA8(&qword_1E9A4D1F0, sub_1AD986994, (void (*)(void))sub_1AD986C74);
}

uint64_t sub_1AD986C74()
{
  return sub_1AD986CA8(&qword_1E9A4D1F8, sub_1AD9863A4, (void (*)(void))sub_1AD986D2C);
}

uint64_t sub_1AD986CA8(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD986D2C()
{
  unint64_t result = qword_1E9A4D200;
  if (!qword_1E9A4D200)
  {
    sub_1AD98626C();
    sub_1AD986D9C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D200);
  }
  return result;
}

unint64_t sub_1AD986D9C()
{
  unint64_t result = qword_1E9A4D208;
  if (!qword_1E9A4D208)
  {
    sub_1AD986338(255, &qword_1E9A4D1D0, (uint64_t (*)(uint64_t))sub_1AD9862FC, MEMORY[0x1E4F3F058], MEMORY[0x1E4F3D750]);
    sub_1AD986E4C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D208);
  }
  return result;
}

unint64_t sub_1AD986E4C()
{
  unint64_t result = qword_1E9A4D210;
  if (!qword_1E9A4D210)
  {
    sub_1AD9862FC(255);
    sub_1AD986EF4(&qword_1E9A4D218, (void (*)(uint64_t))type metadata accessor for LockScreenGreetingView);
    sub_1AD986F3C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D210);
  }
  return result;
}

uint64_t sub_1AD986EF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD986F3C()
{
  unint64_t result = qword_1E9A4D220;
  if (!qword_1E9A4D220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D220);
  }
  return result;
}

void sub_1AD986FA0()
{
  if (!qword_1E9A4B6D8)
  {
    sub_1AD9DDF50();
    unint64_t v0 = sub_1AD9DDD30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B6D8);
    }
  }
}

ValueMetadata *type metadata accessor for RelativeReferenceLine()
{
  return &type metadata for RelativeReferenceLine;
}

uint64_t sub_1AD987008()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD987024@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4 = sub_1AD9DF210();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD987298(0);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8, v10);
  char v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *MEMORY[0x1E4F3D4A0];
  uint64_t v14 = sub_1AD9DE2D0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v7, v13, v14);
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  uint64_t v15 = (uint64_t (*)(void))MEMORY[0x1E4F3EE58];
  sub_1AD9872C0((uint64_t)v7, (uint64_t)v12, MEMORY[0x1E4F3EE58]);
  uint64_t v16 = &v12[*(int *)(v9 + 44)];
  long long v17 = v25[1];
  *(_OWORD *)uint64_t v16 = v25[0];
  *((_OWORD *)v16 + 1)  = v17;
  *((_OWORD *)v16 + 2)  = v25[2];
  sub_1AD98738C((uint64_t)v7, v15);
  sub_1AD9DDDE0();
  double v19 = v18 * 0.5;
  sub_1AD9DDDE0();
  double v21 = (1.0 - a2) * v20;
  sub_1AD9872C0((uint64_t)v12, a1, (uint64_t (*)(void))sub_1AD987298);
  sub_1AD987328(0, &qword_1E9A4D240, sub_1AD987298);
  uint64_t v23 = (double *)(a1 + *(int *)(v22 + 36));
  *uint64_t v23 = v19;
  v23[1]  = v21;
  return sub_1AD98738C((uint64_t)v12, (uint64_t (*)(void))sub_1AD987298);
}

uint64_t sub_1AD987228@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t result = swift_allocObject();
  *(void *)(result + 16)  = v3;
  *(void *)(result + 24)  = v4;
  *a1  = sub_1AD987290;
  a1[1]  = (uint64_t (*)@<X0>(uint64_t@<X8>))result;
  return result;
}

uint64_t sub_1AD987280()
{
  return swift_deallocObject();
}

uint64_t sub_1AD987290@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD987024(a1, *(double *)(v1 + 16));
}

void sub_1AD987298(uint64_t a1)
{
}

uint64_t sub_1AD9872C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1AD987328(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD98738C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD9873EC()
{
  return sub_1AD987600(&qword_1E9A4D248, (void (*)(uint64_t))sub_1AD987434);
}

void sub_1AD987434()
{
  if (!qword_1E9A4D250)
  {
    sub_1AD987328(255, &qword_1E9A4D240, sub_1AD987298);
    sub_1AD9874BC();
    unint64_t v0 = sub_1AD9DDEE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4D250);
    }
  }
}

unint64_t sub_1AD9874BC()
{
  unint64_t result = qword_1E9A4D258;
  if (!qword_1E9A4D258)
  {
    sub_1AD987328(255, &qword_1E9A4D240, sub_1AD987298);
    sub_1AD987558();
    sub_1AD8589C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D258);
  }
  return result;
}

unint64_t sub_1AD987558()
{
  unint64_t result = qword_1E9A4D260;
  if (!qword_1E9A4D260)
  {
    sub_1AD987298(255);
    sub_1AD987600(&qword_1E9A4D268, MEMORY[0x1E4F3EE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D260);
  }
  return result;
}

uint64_t sub_1AD987600(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t HKDateCache.occurrenceDescription(_:at:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v63 = a2;
  id v64 = a1;
  uint64_t v74 = a3;
  uint64_t v4 = sub_1AD9DCD10();
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v68 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v66 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1AD9DCC70();
  uint64_t v72 = *(void *)(v7 - 8);
  uint64_t v73 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v59 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v70 = (char *)&v59 - v12;
  uint64_t v71 = sub_1AD9DC7C0();
  uint64_t v69 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71, v13);
  uint64_t v62 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1AD9DCD30();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v17);
  double v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v21);
  uint64_t v23 = (char *)&v59 - v22;
  uint64_t v24 = sub_1AD9DCE40();
  uint64_t v25 = *(void *)(v24 - 8);
  double v27 = MEMORY[0x1F4188790](v24, v26);
  uint64_t v29 = (char *)&v59 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v65 = v3;
  id v30 = objc_msgSend(v3, sel_calendar, v27);
  sub_1AD9DCDB0();

  sub_1AD9DCD50();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v25 + 8);
  v31(v29, v24);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, *MEMORY[0x1E4F27B20], v15);
  LOBYTE(v30)  = sub_1AD9DCD20();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v16 + 8);
  v32(v19, v15);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v32)(v23, v15);
  if (v30)
  {
    uint64_t v34 = (void *)sub_1AD9DCBB0();
    id v35 = v65;
    id v36 = objc_msgSend(v65, sel_calendar);
    sub_1AD9DCDB0();

    uint64_t v37 = (void *)sub_1AD9DCDA0();
    uint64_t v60 = v24;
    uint64_t v61 = v31;
    v31(v29, v24);
    id v38 = v64;
    id v39 = objc_msgSend(v64, sel_nextDateIntervalWithWakeUpAfterDate_gregorianCalendar_, v34, v37);

    uint64_t v40 = v62;
    sub_1AD9DC740();

    uint64_t v41 = v40;
    if (sub_1AD9DC790())
    {
      uint64_t v42 = (uint64_t)v70;
      sub_1AD9DC750();
    }
    else
    {
      uint64_t v42 = (uint64_t)v70;
      sub_1AD9DC780();
    }
    id v43 = objc_msgSend(v35, sel_calendar);
    sub_1AD9DCDB0();

    uint64_t v44 = v66;
    sub_1AD9DCCF0();
    BOOL v45 = Calendar.dayPeriod(for:in:)(v42);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v68);
    v61(v29, v60);
    uint64_t v46 = (void *)sub_1AD9DCBB0();
    unsigned __int8 v47 = objc_msgSend(v35, sel_isDateInToday_, v46);

    if (v47)
    {
      char v48 = 0;
      uint64_t v50 = v72;
      uint64_t v49 = v73;
    }
    else
    {
      uint64_t v51 = (void *)sub_1AD9DCBB0();
      unsigned int v52 = objc_msgSend(v35, sel_isDateInTomorrow_, v51);

      uint64_t v50 = v72;
      uint64_t v49 = v73;
      if (v52)
      {
        BSDayPeriod.simplified.getter(v45, v75);
        char v48 = 1;
        if (v75[0] == 2)
        {
          id v53 = objc_msgSend(v35, sel_startOfTomorrowMidnight);
          uint64_t v54 = v59;
          sub_1AD9DCC40();

          sub_1AD9DCB90();
          double v56 = v55;
          (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v49);
          if (v56 < 43200.0) {
            char v48 = 0;
          }
        }
      }
      else
      {
        char v48 = 2;
      }
    }
    unsigned __int8 v57 = objc_msgSend(v38, sel_isSingleDayOverride);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v42, v49);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v41, v71);
    uint64_t v58 = v74;
    *uint64_t v74 = v48;
    *((void *)v58 + 1)  = v45;
    v58[16]  = v57;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL LockScreenContentState.showsWeather.getter()
{
  return *v0 == 3;
}

BOOL LockScreenContentState.showsAlarmAction.getter()
{
  if (*v0) {
    BOOL v1 = *v0 == 3;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1;
}

uint64_t LockScreenContentState.heading.getter()
{
  uint64_t v1 = sub_1AD9DCD10();
  uint64_t v29 = *(void *)(v1 - 8);
  uint64_t v30 = v1;
  MEMORY[0x1F4188790](v1, v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AD9DCC70();
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AD9DCD30();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1AD9DCE40();
  uint64_t v15 = *(void *)(v14 - 8);
  double v18 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = 0;
  if (*v0 >= 3u)
  {
    uint64_t v22 = v17;
    (*(void (**)(char *, void, uint64_t, double))(v10 + 104))(v13, *MEMORY[0x1E4F27B20], v9, v18);
    sub_1AD9DCD40();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    sub_1AD9DCC60();
    sub_1AD9DCCF0();
    BOOL v23 = Calendar.dayPeriod(for:in:)((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v22);
    uint64_t v31 = 0;
    sub_1AD9AB9C4(&v31, v23);
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v24 = (id)qword_1EB727930;
    uint64_t v21 = sub_1AD9DCA70();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v21;
}

uint64_t LockScreenContentState.isShortFormat.getter()
{
  id v0 = objc_msgSend(self, sel_currentTraitCollection);
  id v1 = objc_msgSend(v0, sel_preferredContentSizeCategory);

  LOBYTE(v0)  = sub_1AD9DFD60();
  return v0 & 1;
}

uint64_t LockScreenContentState.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t LockScreenContentState.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t static LockScreenContentState.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a2;
  switch(*a1)
  {
    case 1:
      if (v2 != 1) {
        goto LABEL_10;
      }
      uint64_t result = 1;
      break;
    case 2:
      if (v2 != 2) {
        goto LABEL_10;
      }
      uint64_t result = 1;
      break;
    case 3:
      if (v2 != 3) {
        goto LABEL_10;
      }
      uint64_t result = 1;
      break;
    default:
      if (*a2) {
LABEL_10:
      }
        uint64_t result = 0;
      else {
        uint64_t result = 1;
      }
      break;
  }
  return result;
}

BOOL sub_1AD9881DC(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a2;
  switch(*a1)
  {
    case 1:
      return v2 == 1;
    case 2:
      return v2 == 2;
    case 3:
      return v2 == 3;
    default:
      return !*a2;
  }
}

unint64_t sub_1AD98824C()
{
  unint64_t result = qword_1E9A4D270;
  if (!qword_1E9A4D270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D270);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LockScreenContentState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD98836CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LockScreenContentState()
{
  return &type metadata for LockScreenContentState;
}

uint64_t View.sizeReader(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v14[0]  = a1;
  v14[1]  = a4;
  sub_1AD9885D4(255, (unint64_t *)&qword_1E9A4C7B8, (uint64_t (*)(uint64_t))sub_1AD940ABC, sub_1AD988654, MEMORY[0x1E4F3D730]);
  uint64_t v6 = sub_1AD9DDFC0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)v14 - v9;
  v14[4]  = sub_1AD9886D0;
  v14[5]  = 0;
  sub_1AD9DF320();
  sub_1AD940ABC();
  sub_1AD988654();
  sub_1AD9DEBE0();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16)  = v14[0];
  *(void *)(v11 + 24)  = a2;
  unint64_t v12 = sub_1AD9887B4();
  v14[2]  = a3;
  v14[3]  = v12;
  swift_retain();
  swift_getWitnessTable();
  sub_1AD940BA0();
  sub_1AD988850();
  sub_1AD9DECF0();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1AD9885D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_1AD988654()
{
  return sub_1AD988688(&qword_1E9A4C7F0, (void (*)(uint64_t))sub_1AD940ABC);
}

uint64_t sub_1AD988688(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD9886D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1AD9DEEA0();
  uint64_t result = sub_1AD9DDDE0();
  *(void *)a1  = v2;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(unsigned char *)(a1 + 24)  = 0;
  return result;
}

uint64_t sub_1AD988714(uint64_t result, uint64_t (*a2)(double, double))
{
  if ((*(unsigned char *)(result + 16) & 1) == 0) {
    return a2(*(double *)result, *(double *)(result + 8));
  }
  return result;
}

uint64_t sub_1AD988748()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD988780(uint64_t result)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0) {
    return (*(uint64_t (**)(double, double))(v1 + 16))(*(double *)result, *(double *)(result + 8));
  }
  return result;
}

unint64_t sub_1AD9887B4()
{
  unint64_t result = qword_1E9A4D278;
  if (!qword_1E9A4D278)
  {
    sub_1AD9885D4(255, (unint64_t *)&qword_1E9A4C7B8, (uint64_t (*)(uint64_t))sub_1AD940ABC, sub_1AD988654, MEMORY[0x1E4F3D730]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D278);
  }
  return result;
}

unint64_t sub_1AD988850()
{
  unint64_t result = qword_1E9A4C800;
  if (!qword_1E9A4C800)
  {
    sub_1AD940D6C(255);
    sub_1AD988688(&qword_1E9A4C810, type metadata accessor for CGSize);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4C800);
  }
  return result;
}

uint64_t sub_1AD9888F0()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for SizeReader()
{
  return &type metadata for SizeReader;
}

void sub_1AD988A24(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = 1;
}

void *sub_1AD988A34(void *result, void *(*a2)(long long *__return_ptr))
{
  uint64_t v2 = result;
  if (result[2])
  {
    unint64_t result = a2(&v5);
    long long v3 = v5;
    char v4 = v6;
  }
  else
  {
    char v4 = 0;
    long long v3 = *(_OWORD *)result;
  }
  *(_OWORD *)uint64_t v2 = v3;
  *((unsigned char *)v2 + 16)  = v4;
  return result;
}

uint64_t sub_1AD988A98(uint64_t a1)
{
  return sub_1AD8372E4(a1, qword_1E9A4D288);
}

uint64_t static Logger.mode.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD837628(&qword_1E9A49060, (uint64_t)qword_1E9A4D288, a1);
}

uint64_t sub_1AD988AD0(uint64_t a1)
{
  return sub_1AD8372E4(a1, qword_1E9A4D2A0);
}

uint64_t static Logger.lock.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD837628(qword_1E9A49068, (uint64_t)qword_1E9A4D2A0, a1);
}

uint64_t sub_1AD988B08(uint64_t a1)
{
  return sub_1AD8372E4(a1, qword_1EB725018);
}

uint64_t static Logger.schedule.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD837628(&qword_1EB725030, (uint64_t)qword_1EB725018, a1);
}

uint64_t sub_1AD988B40(uint64_t a1)
{
  return sub_1AD8372E4(a1, qword_1E9A4D2B8);
}

uint64_t static Logger.notification.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD837628(&qword_1E9A49078, (uint64_t)qword_1E9A4D2B8, a1);
}

uint64_t sub_1AD988B78(uint64_t a1)
{
  return sub_1AD8372E4(a1, qword_1E9A4D2D0);
}

uint64_t static Logger.analytics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD837628(qword_1E9A49080, (uint64_t)qword_1E9A4D2D0, a1);
}

uint64_t sub_1AD988BB0(uint64_t a1)
{
  return sub_1AD8372E4(a1, qword_1EB724CA0);
}

uint64_t static Logger.widgets.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD837628(&qword_1EB724CB8, (uint64_t)qword_1EB724CA0, a1);
}

uint64_t sub_1AD988BE8(uint64_t a1)
{
  return sub_1AD8372E4(a1, qword_1E9A4D2E8);
}

uint64_t static Logger.bridgeSetup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD837628(&qword_1E9A49090, (uint64_t)qword_1E9A4D2E8, a1);
}

uint64_t sub_1AD988C20(uint64_t a1)
{
  return sub_1AD8372E4(a1, qword_1E9A4D300);
}

uint64_t static Logger.onboarding.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD837628(&qword_1E9A49098, (uint64_t)qword_1E9A4D300, a1);
}

uint64_t NSObject.sp_className.getter()
{
  return sub_1AD9DF730();
}

unint64_t sub_1AD988C94()
{
  unint64_t result = qword_1E9A4D318[0];
  if (!qword_1E9A4D318[0])
  {
    sub_1AD8B4794();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, qword_1E9A4D318);
  }
  return result;
}

uint64_t sub_1AD988CD0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AD988D6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *char v4 = *a2;
    char v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    v12[1]  = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1AD988E64(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
  return swift_release();
}

uint64_t sub_1AD988ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  void *v7 = *v8;
  v7[1]  = v9;
  swift_retain();
  return a1;
}

uint64_t sub_1AD988F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  void *v7 = *v8;
  v7[1]  = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1AD988FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8)  = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1AD98905C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8)  = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1AD9890E0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1AD98922CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10)  = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17)  = -1;
  }
  return (v17 + 1);
}

void sub_1AD989240(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1  = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10]  = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10]  = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10]  = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1AD989420);
    case 4:
      *(_DWORD *)&a1[v10]  = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          double v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1]  = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          void *v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for NavigationLinkWithoutChevron()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1AD989460()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD9894A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v18[1]  = a2;
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a1[5];
  _OWORD v18[10] = MEMORY[0x1E4F3F058];
  v18[11]  = v3;
  v18[12]  = MEMORY[0x1E4F3F050];
  v18[13]  = v5;
  sub_1AD9DDF20();
  sub_1AD9DDFC0();
  swift_getTupleTypeMetadata2();
  sub_1AD9DF350();
  swift_getWitnessTable();
  uint64_t v6 = sub_1AD9DF1A0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  unint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)v18 - v13;
  v18[4]  = v4;
  v18[5]  = v3;
  void v18[6] = a1[4];
  v18[7]  = v5;
  v18[8]  = v18[0];
  sub_1AD9DF320();
  sub_1AD9DF190();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1AD90C5E8(v10, v6, WitnessTable);
  int v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  sub_1AD90C5E8(v14, v6, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v6);
}

uint64_t sub_1AD9896CC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v49 = a1;
  uint64_t v57 = a5;
  uint64_t v54 = *((void *)a3 - 1);
  MEMORY[0x1F4188790](a1, a2);
  id v53 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = (char *)MEMORY[0x1E4F3F058];
  uint64_t v62 = v9;
  uint64_t v63 = MEMORY[0x1E4F3F050];
  uint64_t v64 = v10;
  uint64_t v11 = v10;
  v42[1]  = v10;
  uint64_t v12 = sub_1AD9DDF20();
  uint64_t v55 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v13);
  unsigned __int8 v47 = (char *)v42 - v14;
  uint64_t v15 = sub_1AD9DDFC0();
  uint64_t v56 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v46 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18, v19);
  unsigned int v52 = (char *)v42 - v20;
  uint64_t v44 = *((void *)a2 - 1);
  uint64_t v21 = v44;
  MEMORY[0x1F4188790](v22, v23);
  uint64_t v25 = (char *)v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v27);
  BOOL v45 = (char *)v42 - v28;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  uint64_t v48 = a4;
  uint64_t v63 = a4;
  uint64_t v64 = v11;
  uint64_t v29 = type metadata accessor for NavigationLinkWithoutChevron();
  uint64_t v30 = v49;
  (*(void (**)(void))(v49 + *(int *)(v29 + 52)))();
  id v43 = a2;
  sub_1AD90C5E8(v25, a2, a4);
  uint64_t v50 = *(void (**)(char *, char *))(v21 + 8);
  uint64_t v51 = v21 + 8;
  v50(v25, a2);
  (*(void (**)(char *, uint64_t, char *))(v54 + 16))(v53, v30, a3);
  uint64_t v31 = v47;
  sub_1AD9DDF10();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v33 = v46;
  sub_1AD9DEDA0();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v31, v12);
  v60[2]  = WitnessTable;
  v60[3]  = MEMORY[0x1E4F3CA90];
  uint64_t v34 = swift_getWitnessTable();
  id v35 = v52;
  sub_1AD90C5E8(v33, v15, v34);
  uint64_t v36 = v56;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v56 + 8);
  v37(v33, v15);
  id v38 = v45;
  id v39 = v43;
  (*(void (**)(char *, char *, char *))(v44 + 16))(v25, v45, v43);
  uint64_t v61 = v25;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v35, v15);
  uint64_t v62 = v33;
  v60[0]  = v39;
  v60[1]  = v15;
  uint64_t v58 = v48;
  uint64_t v59 = v34;
  sub_1AD9656C4((uint64_t)&v61, 2uLL, (uint64_t)v60);
  v37(v35, v15);
  uint64_t v40 = (uint64_t (*)(char *, char *))v50;
  v50(v38, v39);
  v37(v33, v15);
  return v40(v25, v39);
}

uint64_t sub_1AD989BEC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD9896CC(*(void *)(v1 + 48), *(char **)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1AD989BFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1AD989CD0(uint64_t a1)
{
  return sub_1AD989D54(a1, qword_1E9A4D3A0);
}

uint64_t static OSSignposter.app.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD989E04(&qword_1E9A490A0, (uint64_t)qword_1E9A4D3A0, a1);
}

uint64_t sub_1AD989D08(uint64_t a1)
{
  return sub_1AD989D54(a1, qword_1E9A4D3B8);
}

uint64_t static OSSignposter.view.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD989E04(&qword_1E9A490A8, (uint64_t)qword_1E9A4D3B8, a1);
}

uint64_t sub_1AD989D40(uint64_t a1)
{
  return sub_1AD989D54(a1, qword_1E9A4D3D0);
}

uint64_t sub_1AD989D54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1AD9DD520();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  sub_1AD9DF7A0();
  sub_1AD9DF7A0();
  return sub_1AD9DD510();
}

uint64_t static OSSignposter.query.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD989E04(&qword_1E9A490B0, (uint64_t)qword_1E9A4D3D0, a1);
}

uint64_t sub_1AD989E04@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1AD9DD520();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t _s5ModelVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1  = *(void *)a2;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  id v4 = v3;
  return a1;
}

uint64_t _s5ModelVwca(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  return a1;
}

uint64_t _s5ModelVwta(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1  = *(void *)a2;

  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *_s5ModelVMa_0()
{
  return &_s5ModelVN_0;
}

id static LocalizedStringTable.sleepFramework.getter@<X0>(void *a1@<X8>)
{
  return sub_1AD989FC4(&qword_1E9A48F50, (void **)&qword_1E9A4C618, a1);
}

id static LocalizedStringTable.sleepHealthUI.getter@<X0>(void *a1@<X8>)
{
  return sub_1AD989FC4(&qword_1EB724E38, (void **)&qword_1EB727930, a1);
}

id sub_1AD989FC4@<X0>(void *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = *a2;
  *a3  = 0x617A696C61636F4CLL;
  a3[1]  = 0xEB00000000656C62;
  a3[2]  = v5;
  return v5;
}

id static LocalizedStringTable.harmonia.getter@<X0>(void *a1@<X8>)
{
  return sub_1AD98A054(0xD000000000000014, 0x80000001AD9F0E10, a1);
}

id sub_1AD98A054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v6 = (void *)qword_1EB727930;
  *a3  = a1;
  a3[1]  = a2;
  a3[2]  = v6;
  return v6;
}

id static LocalizedStringTable.sleepStages.getter@<X0>(void *a1@<X8>)
{
  return sub_1AD98A054(0xD000000000000012, 0x80000001AD9F3B80, a1);
}

uint64_t initializeBufferWithCopyOfBuffer for VerticalBar(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t destroy for VerticalBar()
{
  return swift_release();
}

void *assignWithCopy for VerticalBar(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  a1[2]  = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for VerticalBar(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for VerticalBar()
{
  return &type metadata for VerticalBar;
}

uint64_t sub_1AD98A1C8()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1AD98A1E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D1>)
{
  swift_retain();
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  *(void *)a2  = 0;
  *(unsigned char *)(a2 + 8)  = 0;
  *(double *)(a2 + 16)  = a3;
  *(void *)(a2 + 24)  = a1;
  *(_WORD *)(a2 + 32)  = 256;
  *(void *)(a2 + 40)  = v7;
  *(unsigned char *)(a2 + 48)  = v8;
  *(void *)(a2 + 56)  = v9;
  *(unsigned char *)(a2 + 64)  = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a2 + 72)  = v11;
  return result;
}

double sub_1AD98A290@<D0>(uint64_t a1@<X8>)
{
  double v3 = *(double *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_1AD9DE330();
  sub_1AD98A1E4(v4, (uint64_t)&v17, v3);
  uint64_t v6 = v17;
  char v7 = v18;
  double result = v19;
  uint64_t v9 = v20;
  char v10 = v21;
  char v11 = v22;
  uint64_t v12 = v23;
  char v13 = v24;
  uint64_t v14 = v25;
  char v15 = v26;
  long long v16 = v27;
  *(void *)a1  = v5;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = 1;
  *(void *)(a1 + 24)  = v6;
  *(unsigned char *)(a1 + 32)  = v7;
  *(double *)(a1 + 40)  = result;
  *(void *)(a1 + 48)  = v9;
  *(unsigned char *)(a1 + 56)  = v10;
  *(unsigned char *)(a1 + 57)  = v11;
  *(void *)(a1 + 64)  = v12;
  *(unsigned char *)(a1 + 72)  = v13;
  *(void *)(a1 + 80)  = v14;
  *(unsigned char *)(a1 + 88)  = v15;
  *(_OWORD *)(a1 + 96)  = v16;
  return result;
}

ValueMetadata *type metadata accessor for Bar()
{
  return &type metadata for Bar;
}

uint64_t sub_1AD98A360()
{
  return sub_1AD98A5C8(&qword_1E9A4D3E8, (void (*)(uint64_t))sub_1AD98A3A8);
}

void sub_1AD98A3A8()
{
  if (!qword_1E9A4D3F0)
  {
    sub_1AD98A43C();
    sub_1AD98A5C8(&qword_1E9A4D420, (void (*)(uint64_t))sub_1AD98A43C);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4D3F0);
    }
  }
}

void sub_1AD98A43C()
{
  if (!qword_1E9A4D3F8)
  {
    sub_1AD98A494();
    unint64_t v0 = sub_1AD9DF350();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4D3F8);
    }
  }
}

void sub_1AD98A494()
{
  if (!qword_1E9A4D400)
  {
    sub_1AD98A4FC();
    TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4D400);
    }
  }
}

void sub_1AD98A4FC()
{
  if (!qword_1E9A4D408)
  {
    sub_1AD98A684(255, &qword_1E9A4D410);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4D408);
    }
  }
}

unint64_t sub_1AD98A574()
{
  unint64_t result = qword_1E9A4D418;
  if (!qword_1E9A4D418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D418);
  }
  return result;
}

uint64_t sub_1AD98A5C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD98A614()
{
  unint64_t result = qword_1E9A4D428;
  if (!qword_1E9A4D428)
  {
    sub_1AD98A684(255, &qword_1E9A4D430);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D428);
  }
  return result;
}

void sub_1AD98A684(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_1AD98A574();
    unint64_t v3 = sub_1AD9DDD00();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

double sub_1AD98A6F8@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  id v7 = objc_msgSend(self, sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, 3, a2, a3, a4, a5, *v5, *v5);
  id v8 = objc_msgSend(v7, sel_CGPath);

  sub_1AD9DEA40();
  double result = *(double *)&v10;
  *(_OWORD *)a1  = v10;
  *(_OWORD *)(a1 + 16)  = v11;
  *(unsigned char *)(a1 + 32)  = v12;
  return result;
}

uint64_t sub_1AD98A7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD98A574();
  return MEMORY[0x1F40FC6D8](a1, a2, a3, v6);
}

uint64_t sub_1AD98A834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD98A574();
  return MEMORY[0x1F40FC690](a1, a2, a3, v6);
}

uint64_t sub_1AD98A898(uint64_t a1)
{
  unint64_t v2 = sub_1AD98A574();
  return MEMORY[0x1F40FC6B0](a1, v2);
}

unint64_t sub_1AD98A8E8()
{
  unint64_t result = qword_1E9A4D438;
  if (!qword_1E9A4D438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D438);
  }
  return result;
}

unint64_t sub_1AD98A940()
{
  unint64_t result = qword_1E9A4D440;
  if (!qword_1E9A4D440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4D440);
  }
  return result;
}

uint64_t AlarmPreviewPlayer.__allocating_init(model:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  AlarmPreviewPlayer.init(model:)(a1);
  return v2;
}

void sub_1AD98A9D8()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = qword_1EB725030;
    id v4 = v1;
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1AD9DD550();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EB725018);
    unint64_t v6 = sub_1AD9DD530();
    os_log_type_t v7 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v12 = v9;
      *(_DWORD *)id v8 = 136446210;
      uint64_t v10 = sub_1AD9E04F0();
      sub_1AD838978(v10, v11, &v12);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v6, v7, "[%{public}s] Updating audio volume on actively playing alert preview", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v9, -1, -1);
      MEMORY[0x1B3E6D1A0](v8, -1, -1);
    }

    objc_msgSend(*(id *)(v2 + 16), sel_audioVolume);
    objc_msgSend(v4, sel__updateAudioVolumeDynamicallyToValue_);
  }
}

void sub_1AD98ABBC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = sub_1AD9DD550();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v10 = __swift_project_value_buffer(v5, (uint64_t)qword_1EB725018);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  id v11 = a2;
  id v12 = a2;
  char v13 = sub_1AD9DD530();
  int v14 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v13, (os_log_type_t)v14))
  {
    int v32 = v14;
    uint64_t v30 = v13;
    uint64_t v31 = a3;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v34[0]  = v29;
    *(_DWORD *)uint64_t v15 = 136446722;
    uint64_t v16 = sub_1AD9E04F0();
    uint64_t v33 = sub_1AD838978(v16, v17, v34);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12)  = 2082;
    id v18 = (id)NSStringFromTLAlertPlaybackCompletionType();
    if (!v18)
    {

      __break(1u);
      return;
    }
    double v19 = v18;
    uint64_t v20 = sub_1AD9DF710();
    unint64_t v22 = v21;

    uint64_t v33 = sub_1AD838978(v20, v22, v34);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22)  = 2082;
    if (a2)
    {
      uint64_t v33 = (uint64_t)a2;
      id v23 = a2;
      sub_1AD869CF0();
      uint64_t v24 = sub_1AD9DF730();
      unint64_t v26 = v25;
    }
    else
    {
      unint64_t v26 = 0xE300000000000000;
      uint64_t v24 = 7104878;
    }
    long long v27 = v30;
    uint64_t v28 = v29;
    uint64_t v33 = sub_1AD838978(v24, v26, v34);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v27, (os_log_type_t)v32, "[%{public}s] Alert finished playing for %{public}s with error: %{public}s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v28, -1, -1);
    MEMORY[0x1B3E6D1A0](v15, -1, -1);
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1AD98AF5C(0);
    swift_release();
  }
}

void sub_1AD98AF5C(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)v1[3];
  v1[3]  = (uint64_t)a1;
  id v9 = a1;
  objc_msgSend(v3, sel_stop);
  id v4 = (void *)v1[3];
  if (v4)
  {
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16)  = v5;
    *(void *)(v6 + 24)  = v2;
    aBlock[4]  = sub_1AD98BD24;
    aBlock[5]  = v6;
    aBlock[0]  = MEMORY[0x1E4F143A8];
    aBlock[1]  = 1107296256;
    aBlock[2]  = sub_1AD98B0F4;
    aBlock[3]  = &block_descriptor_31;
    uint64_t v7 = _Block_copy(aBlock);
    id v8 = v4;
    swift_release();
    objc_msgSend(v8, sel_playWithCompletionHandler_, v7);
    _Block_release(v7);
  }
  else
  {
  }
}

void sub_1AD98B0F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t AlarmPreviewPlayer.init(model:)(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)(v1 + 24)  = 0;
  *(void *)(v1 + 32)  = 0;
  id v3 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v3, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v4 = sub_1AD98B2E0();

  *(void *)(v2 + 16)  = v4;
  swift_allocObject();
  swift_weakInit();
  sub_1AD8418F4();
  sub_1AD98B4EC();
  swift_retain();
  uint64_t v5 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  swift_release();
  *(void *)(v2 + 32)  = v5;
  swift_release();
  return v2;
}

id sub_1AD98B2E0()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FAF5E8]), sel_initWithType_, 13);
  objc_msgSend(v1, sel_setTopic_, *MEMORY[0x1E4FAF610]);
  id v2 = objc_msgSend(v0, sel_toneIdentifier);
  if (v2)
  {
    id v3 = v2;
    objc_msgSend(v1, sel_setToneIdentifier_, v2);
  }
  id v4 = objc_msgSend(v0, sel_vibrationIdentifier);
  if (v4)
  {
    uint64_t v5 = v4;
    objc_msgSend(v1, sel_setVibrationIdentifier_, v4);
  }
  id v6 = objc_msgSend(v0, sel_soundVolume);
  if (v6)
  {
    uint64_t v7 = v6;
    objc_msgSend(v6, sel_floatValue);
    int v9 = v8;

    LODWORD(v10)  = v9;
    objc_msgSend(v1, sel_setAudioVolume_, v10);
  }
  objc_msgSend(v1, sel_setShouldRepeat_, 1);
  objc_msgSend(v1, sel_setForPreview_, 1);
  return v1;
}

uint64_t sub_1AD98B428()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_1AD98B460()
{
  swift_beginAccess();
  Strong  = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    id v2 = sub_1AD98B2E0();
    id v3 = *(void **)(v1 + 16);
    *(void *)(v1 + 16)  = v2;
    id v4 = v2;

    sub_1AD98A9D8();
    swift_release();
  }
}

void sub_1AD98B4E4()
{
}

unint64_t sub_1AD98B4EC()
{
  unint64_t result = qword_1E9A491A0;
  if (!qword_1E9A491A0)
  {
    sub_1AD8418F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A491A0);
  }
  return result;
}

uint64_t AlarmPreviewPlayer.deinit()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    objc_msgSend(v1, sel_stop);
    id v2 = *(void **)(v0 + 24);
  }
  else
  {
    id v2 = 0;
  }
  *(void *)(v0 + 24)  = 0;

  if (*(void *)(v0 + 32))
  {
    swift_retain();
    sub_1AD9DDA90();
    swift_release();
  }

  swift_release();
  return v0;
}

uint64_t AlarmPreviewPlayer.__deallocating_deinit()
{
  AlarmPreviewPlayer.deinit();
  return swift_deallocClassInstance();
}

void sub_1AD98B5F8()
{
  if (*(void *)(v0 + 24))
  {
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v1 = sub_1AD9DD550();
    __swift_project_value_buffer(v1, (uint64_t)qword_1EB725018);
    oslog  = sub_1AD9DD530();
    os_log_type_t v2 = sub_1AD9DFBE0();
    if (os_log_type_enabled(oslog, v2))
    {
      id v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v4 = swift_slowAlloc();
      uint64_t v22 = v4;
      *(_DWORD *)id v3 = 136446210;
      uint64_t v5 = sub_1AD9E04F0();
      sub_1AD838978(v5, v6, &v22);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, oslog, v2, "[%{public}s] Already playing alert", v3, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v4, -1, -1);
      MEMORY[0x1B3E6D1A0](v3, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    uint64_t v7 = v0;
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_1AD9DD550();
    __swift_project_value_buffer(v8, (uint64_t)qword_1EB725018);
    swift_retain_n();
    int v9 = sub_1AD9DD530();
    os_log_type_t v10 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      osloga  = (os_log_t)swift_slowAlloc();
      uint64_t v22 = (uint64_t)osloga;
      *(_DWORD *)uint64_t v11 = 136446466;
      uint64_t v12 = sub_1AD9E04F0();
      sub_1AD838978(v12, v13, &v22);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12)  = 2082;
      id v14 = *(id *)(v7 + 16);
      id v15 = objc_msgSend(v14, sel_description);
      uint64_t v16 = sub_1AD9DF710();
      unint64_t v18 = v17;

      sub_1AD838978(v16, v18, &v22);
      sub_1AD9DFEA0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] Playing new alert for %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](osloga, -1, -1);
      MEMORY[0x1B3E6D1A0](v11, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    id v19 = objc_msgSend(self, sel_alertWithConfiguration_, *(void *)(v7 + 16));
    sub_1AD98AF5C(v19);
  }
}

void sub_1AD98B9F4()
{
  uint64_t v1 = v0;
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725018);
  swift_retain_n();
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = v6;
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v14);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12)  = 2082;
    int v9 = *(void **)(v1 + 24);
    if (v9)
    {
      sub_1AD837214(0, &qword_1E9A4D448);
      id v10 = v9;
      uint64_t v11 = sub_1AD9DF730();
      unint64_t v13 = v12;
    }
    else
    {
      unint64_t v13 = 0xE300000000000000;
      uint64_t v11 = 7104878;
    }
    sub_1AD838978(v11, v13, &v14);
    sub_1AD9DFEA0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Stopping alert: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  sub_1AD98AF5C(0);
}