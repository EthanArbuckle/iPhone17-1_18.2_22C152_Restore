uint64_t type metadata accessor for SleepScheduleProvider()
{
  return self;
}

uint64_t sub_1AD837214(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1AD837250(uint64_t a1)
{
  id v1 = (id)(*(uint64_t (**)(void))(a1 + 16))();
  sub_1AD9DCC40();
}

uint64_t sub_1AD8372AC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD8372E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1AD9DD550();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  sub_1AD9DF7A0();
  sub_1AD9DF7A0();
  return sub_1AD9DD540();
}

id sub_1AD837370()
{
  v17[1] = *(id *)MEMORY[0x1E4F143B8];
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
  v2 = (void *)sub_1AD9DCBB0();
  v17[0] = 0;
  id v3 = objc_msgSend(v1, sel_upcomingResolvedScheduleOccurrenceAfterDate_error_, v2, v17);

  id v4 = v17[0];
  if (v17[0])
  {
    uint64_t v5 = qword_1EB725030;
    id v6 = v17[0];
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_1AD9DD550();
    __swift_project_value_buffer(v7, (uint64_t)qword_1EB725018);
    id v8 = v6;
    v9 = sub_1AD9DD530();
    os_log_type_t v10 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      v12 = (void *)swift_slowAlloc();
      v17[0] = v12;
      *(_DWORD *)uint64_t v11 = 136446466;
      sub_1AD838978(0xD000000000000015, 0x80000001AD9EC6C0, (uint64_t *)v17);
      sub_1AD9DFEA0();
      *(_WORD *)(v11 + 12) = 2082;
      sub_1AD837214(0, (unint64_t *)&unk_1E9A4D060);
      id v13 = v8;
      uint64_t v14 = sub_1AD9DF740();
      sub_1AD838978(v14, v15, (uint64_t *)v17);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] Error loading upcoming resolved occurrence: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v12, -1, -1);
      MEMORY[0x1B3E6D1A0](v11, -1, -1);
    }
    else
    {
    }
  }

  return v3;
}

uint64_t sub_1AD837628@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1AD9DD550();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

id SleepScheduleProvider.__allocating_init(sleepStore:)(void *a1)
{
  v26[1] = *(id *)MEMORY[0x1E4F143B8];
  v26[0] = 0;
  id v2 = objc_msgSend(a1, sel_currentSleepScheduleWithError_, v26);
  id v3 = v26[0];
  if (v2)
  {
    id v4 = v26[0];
  }
  else if (v26[0])
  {
    uint64_t v10 = qword_1EB725030;
    id v11 = v26[0];
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_1AD9DD550();
    __swift_project_value_buffer(v12, (uint64_t)qword_1EB725018);
    id v13 = v11;
    uint64_t v14 = sub_1AD9DD530();
    os_log_type_t v15 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc();
      v25 = (void *)swift_slowAlloc();
      v26[0] = v25;
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v17 = sub_1AD9E04F0();
      sub_1AD838978(v17, v18, (uint64_t *)v26);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      id v19 = v13;
      id v20 = objc_msgSend(v19, sel_description);
      uint64_t v21 = sub_1AD9DF710();
      unint64_t v23 = v22;

      sub_1AD838978(v21, v23, (uint64_t *)v26);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v14, type, "[%{public}s] Failed to read sleep schedule with error: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v25, -1, -1);
      MEMORY[0x1B3E6D1A0](v16, -1, -1);
    }
    else
    {
    }
  }
  id v5 = (id)HKSPCurrentDateProvider();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  id v7 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleProvider());
  id v8 = SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(a1, v2, (uint64_t)sub_1AD838788, v6);

  return v8;
}

id SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentSchedulePublisher;
  sub_1AD837D1C(0, (unint64_t *)&qword_1EB725060, (unint64_t *)&qword_1EB7250A0, (unint64_t *)&qword_1EB725090);
  swift_allocObject();
  uint64_t v10 = v4;
  *(void *)&v4[v9] = sub_1AD9DDB30();
  uint64_t v11 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_nextOccurrencePublisher;
  sub_1AD837D1C(0, &qword_1EB725070, &qword_1EB7250C8, &qword_1EB7250C0);
  swift_allocObject();
  *(void *)&v10[v11] = sub_1AD9DDB30();
  uint64_t v12 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentGoalPublisher;
  sub_1AD8387F8();
  swift_allocObject();
  *(void *)&v10[v12] = sub_1AD9DDB30();
  uint64_t v13 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentWindDownDurationPublisher;
  uint64_t v21 = 0;
  char v22 = 1;
  swift_allocObject();
  *(void *)&v10[v13] = sub_1AD9DDB30();
  uint64_t v14 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentScheduleEnabledPublisher;
  LOBYTE(v21) = 1;
  sub_1AD838884();
  swift_allocObject();
  *(void *)&v10[v14] = sub_1AD9DDB30();
  uint64_t v15 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_eventRecordPublisher;
  sub_1AD8388EC();
  swift_allocObject();
  *(void *)&v10[v15] = sub_1AD9DDAD0();
  *(void *)&v10[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_query] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore] = a1;
  uint64_t v16 = &v10[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider];
  *(void *)uint64_t v16 = a3;
  *((void *)v16 + 1) = a4;
  id v17 = a1;
  swift_retain();

  v20.receiver = v10;
  v20.super_class = (Class)type metadata accessor for SleepScheduleProvider();
  id v18 = objc_msgSendSuper2(&v20, sel_init);
  objc_msgSend(v17, sel_addObserver_, v18);
  sub_1AD837D88(a2);

  swift_release();
  return v18;
}

void sub_1AD837C1C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    sub_1AD841AB4(255, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t))sub_1AD837214);
    unint64_t v6 = sub_1AD9DDB20();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD837C9C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    sub_1AD8BEF04(255, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t))sub_1AD837214);
    unint64_t v6 = sub_1AD9DDB20();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD837D1C(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    sub_1AD8A4990(255, a3, a4);
    unint64_t v5 = sub_1AD9DDB20();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD837D88(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = sub_1AD9DCC70();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  id v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_1AD9DD550();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EB725018);
  uint64_t v10 = sub_1AD9DD530();
  os_log_type_t v11 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v39 = v4;
    uint64_t v14 = v13;
    v41[0] = v13;
    v38 = a1;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v15 = sub_1AD9E04F0();
    id v40 = (id)sub_1AD838978(v15, v16, (uint64_t *)v41);
    a1 = v38;
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v10, v11, "[%{public}s] Updating all publishers!", v12, 0xCu);
    swift_arrayDestroy();
    id v17 = v14;
    uint64_t v4 = v39;
    MEMORY[0x1B3E6D1A0](v17, -1, -1);
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
  }

  sub_1AD9DDB00();
  id v18 = v41[0];
  if (v41[0])
  {
    if (a1)
    {
      sub_1AD837214(0, (unint64_t *)&qword_1EB725090);
      id v19 = v18;
      id v20 = a1;
      char v21 = sub_1AD9DFE00();

      if (v21) {
        goto LABEL_14;
      }
LABEL_13:
      v41[0] = a1;
      id v22 = v20;
      sub_1AD9DDB10();
      goto LABEL_14;
    }

LABEL_12:
    id v20 = a1;
    goto LABEL_13;
  }
  if (a1) {
    goto LABEL_12;
  }
LABEL_14:
  swift_beginAccess();
  unint64_t v23 = *(void (**)(uint64_t))(v2 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  uint64_t v24 = swift_retain();
  v23(v24);
  id v25 = sub_1AD837370();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_1AD9DDB00();
  id v26 = v40;
  if (v40)
  {
    if (v25)
    {
      sub_1AD837214(0, &qword_1EB7250C0);
      id v27 = v26;
      id v28 = v25;
      char v29 = sub_1AD9DFE00();

      if (v29) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else if (!v25)
  {
    goto LABEL_24;
  }
  id v28 = v25;
LABEL_22:
  id v40 = v25;
  id v28 = v28;
  sub_1AD9DDB10();
LABEL_23:

LABEL_24:
  swift_release();
  if (a1 && (objc_msgSend(a1, sel_sleepDurationGoal), v30 > 0.0))
  {
    objc_msgSend(a1, sel_sleepDurationGoal);
    char v31 = 0;
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v33 = 0;
    char v31 = 1;
  }
  sub_1AD838244(v33, v31);
  if (a1)
  {
    objc_msgSend(a1, sel_windDownTime);
    uint64_t v35 = v34;
  }
  else
  {
    uint64_t v35 = 0;
  }
  sub_1AD838244(v35, a1 == 0);
  if (!a1)
  {
    uint64_t result = sub_1AD9DDB00();
    if (v40) {
      return result;
    }
    LOBYTE(v36) = 1;
    goto LABEL_36;
  }
  unsigned int v36 = objc_msgSend(a1, sel_isEnabled);
  uint64_t result = sub_1AD9DDB00();
  if (v36 != v40)
  {
LABEL_36:
    LOBYTE(v40) = v36;
    return sub_1AD9DDB10();
  }
  return result;
}

uint64_t sub_1AD838244(uint64_t a1, char a2)
{
  uint64_t result = sub_1AD9DDB00();
  if (v6)
  {
    if (a2) {
      return result;
    }
    return sub_1AD9DDB10();
  }
  if ((a2 & 1) != 0 || v5 != *(double *)&a1) {
    return sub_1AD9DDB10();
  }
  return result;
}

uint64_t static Logger.app.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD837628(&qword_1EB725658, (uint64_t)qword_1EB725958, a1);
}

void sub_1AD8382DC()
{
  sub_1AD838420(319, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F)
  {
    sub_1AD838420(319, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1AD838420(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1AD838570(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1AD8385CC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1AD9DFEB0();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1AD840C28(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1AD9E0070();
  if (!v8)
  {
    sub_1AD9E0130();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1AD9E01E0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void sub_1AD838788()
{
  sub_1AD837250(*(void *)(v0 + 16));
}

void sub_1AD838790()
{
  if (!qword_1EB725C90)
  {
    sub_1AD837214(255, (unint64_t *)&qword_1EB725C98);
    unint64_t v0 = sub_1AD9DF460();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725C90);
    }
  }
}

void sub_1AD8387F8()
{
  if (!qword_1EB725050)
  {
    sub_1AD8442BC(255, (unint64_t *)&qword_1EB725080, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB718]);
    unint64_t v0 = sub_1AD9DDB20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725050);
    }
  }
}

void sub_1AD838884()
{
  if (!qword_1EB725040)
  {
    unint64_t v0 = sub_1AD9DDB20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725040);
    }
  }
}

void sub_1AD8388EC()
{
  if (!qword_1EB725038)
  {
    sub_1AD837214(255, (unint64_t *)&unk_1EB7250B0);
    unint64_t v0 = sub_1AD9DDAE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725038);
    }
  }
}

uint64_t sub_1AD838964(uint64_t a1)
{
  return sub_1AD8372E4(a1, qword_1EB725958);
}

uint64_t sub_1AD838978(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1AD8385CC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1AD838570((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1AD838570((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t type metadata accessor for SleepScheduleProviderWrapper()
{
  return self;
}

uint64_t SleepScheduleProviderWrapper.init(sleepStore:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for SleepScheduleProvider();
  *(void *)(v2 + 16) = SleepScheduleProvider.__allocating_init(sleepStore:)(a1);
  return v2;
}

void sub_1AD838AB4()
{
  sub_1AD838790();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for SleepMetricsWrapper(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1EB725C08);
}

uint64_t type metadata accessor for SleepStagesModel(uint64_t a1)
{
  return sub_1AD8372AC(a1, qword_1EB725640);
}

uint64_t sub_1AD838B80@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1AD838BDC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1AD838C40()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3E6D270](v1);
}

uint64_t sub_1AD838C90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1AD838CFC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3E6D270](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1AD838D84;
}

void sub_1AD838D84(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

BOOL sub_1AD838E0C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  return v1 && *(unsigned char *)(v1 + qword_1E9A49E68) != 2;
}

id ScheduleOccurrenceViewController.__allocating_init(scheduleOccurrence:isAdding:weekdaysWithExistingOccurrences:sleepScheduleProvider:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, int a2, uint64_t a3, void *a4, int a5, uint64_t a6)
{
  uint64_t v26 = a6;
  int v30 = a5;
  uint64_t v29 = a3;
  int v28 = a2;
  uint64_t v8 = sub_1AD9DCE40();
  uint64_t v27 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a4[3];
  uint64_t v13 = a4[4];
  __swift_project_boxed_opaque_existential_1Tm(a4, v14);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 40);
  id v16 = a1;
  uint64_t v17 = v15(v14, v13);
  uint64_t v19 = a4[3];
  uint64_t v18 = a4[4];
  __swift_project_boxed_opaque_existential_1Tm(a4, v19);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v19, v18);
  uint64_t v21 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v26, v8);
  type metadata accessor for ScheduleOccurrenceEditModel();
  swift_allocObject();
  LOBYTE(v8) = v28;
  uint64_t v22 = sub_1AD8945FC(v16, v28, 0, v29, v17, v20, v30, (uint64_t)v12);

  swift_release();
  swift_release();
  sub_1AD841030((uint64_t)a4, (uint64_t)v31);
  id v23 = objc_allocWithZone((Class)type metadata accessor for ScheduleOccurrenceViewController());
  id v24 = sub_1AD8410B8(v22, (v8 & 1) == 0, (uint64_t)v31);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v21, v27);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a4);
  return v24;
}

id ScheduleOccurrenceViewController.__allocating_init(scheduleOccurrence:isAdding:weekdaysWithExistingOccurrences:sleepSchedulePublisher:sleepDurationGoalPublisher:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14 = sub_1AD9DCE40();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a7, v14);
  type metadata accessor for ScheduleOccurrenceEditModel();
  swift_allocObject();
  uint64_t v19 = sub_1AD8945FC(a1, a2, 0, a3, a5, a4, a6, (uint64_t)v18);
  uint64_t v20 = (objc_class *)type metadata accessor for ScheduleOccurrenceViewController();
  memset(v24, 0, sizeof(v24));
  uint64_t v25 = 0;
  id v21 = objc_allocWithZone(v20);
  id v22 = sub_1AD8410B8(v19, (a2 & 1) == 0, (uint64_t)v24);

  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a7, v14);
  return v22;
}

id ScheduleOccurrenceViewController.__allocating_init(overrideOccurrence:allowsDeletion:isAdding:sleepScheduleProvider:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v13 = *(void *)(a4 + 24);
  uint64_t v14 = *(void *)(a4 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a4, v13);
  MEMORY[0x1F4188790](v15, v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  id v19 = sub_1AD8414F0(a1, a2, a3, (uint64_t)v17, a5, a6, v6, v13, v14);

  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v19;
}

uint64_t sub_1AD83933C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void sub_1AD839394()
{
  sub_1AD841C7C(0, (unint64_t *)&qword_1EB724D00, MEMORY[0x1E4FBCC28], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  v74 = (char *)&v71 - v3;
  uint64_t v76 = sub_1AD9DFD30();
  uint64_t v79 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76, v4);
  v73 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD841744();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  v75 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(v0, sel_tableView);
  if (!v11)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v11;
  uint64_t v13 = *(id **)&v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model];
  char v14 = v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_allowsDeletion];
  swift_retain();
  id v15 = objc_msgSend(v0, sel_traitCollection);
  id v16 = objc_msgSend(v15, sel_preferredContentSizeCategory);

  LOBYTE(v15) = sub_1AD9DFD50();
  objc_allocWithZone((Class)_s10DataSourceCMa());
  uint64_t v17 = v0;
  id v18 = sub_1AD86AFB8(v12, (uint64_t)v13, v14, v15 & 1);

  swift_release();
  id v19 = *(void **)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource];
  *(void *)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource] = v18;

  uint64_t v20 = (objc_class *)type metadata accessor for ScheduleOccurrenceViewController();
  v91.receiver = v17;
  v91.super_class = v20;
  objc_msgSendSuper2(&v91, sel_viewDidLoad);
  id v21 = objc_msgSend(v17, sel_tableView);
  if (!v21)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v22 = v21;
  type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v24 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v22, sel_registerClass_forHeaderFooterViewReuseIdentifier_, ObjCClassFromMetadata, v24);

  id v25 = objc_msgSend(v17, sel_tableView);
  if (!v25)
  {
LABEL_23:
    __break(1u);
    return;
  }
  uint64_t v26 = v25;
  objc_msgSend(v25, sel_setDelegate_, v17);

  id v27 = objc_msgSend(v17, sel_navigationController);
  if (v27)
  {
    int v28 = v27;
    id v29 = objc_msgSend(v27, sel_viewControllers);

    sub_1AD837214(0, &qword_1E9A49270);
    unint64_t v30 = sub_1AD9DF860();

    if (v30 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_1AD9E0190();
      swift_bridgeObjectRelease();
      if (v42) {
        goto LABEL_7;
      }
    }
    else if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_7:
      if ((v30 & 0xC000000000000001) != 0)
      {
        id v31 = (id)MEMORY[0x1B3E6BFF0](0, v30);
        goto LABEL_10;
      }
      if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v31 = *(id *)(v30 + 32);
LABEL_10:
        uint64_t v32 = v31;
        swift_bridgeObjectRelease();
        uint64_t v33 = v17;
        id v34 = v32;
        char v35 = sub_1AD9DFE00();

        if (v35)
        {
          id v36 = objc_msgSend(v33, sel_navigationItem);
          id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14A8]), sel_initWithBarButtonSystemItem_target_action_, 1, v33, sel_cancelButtonPressed);
          objc_msgSend(v36, sel_setLeftBarButtonItem_, v37);

          id v38 = objc_msgSend(v33, sel_navigationItem);
          id v39 = sub_1AD83A414(v33);
          objc_msgSend(v38, sel_setRightBarButtonItem_, v39);

          id v40 = objc_msgSend(v33, sel_navigationItem);
          id v41 = objc_msgSend(v40, sel_rightBarButtonItem);

          if (v41)
          {
            objc_msgSend(v41, sel_setEnabled_, ScheduleOccurrenceEditModel.isValid.getter() & 1);
          }
        }
        goto LABEL_15;
      }
      __break(1u);
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
  }
LABEL_15:
  uint64_t v72 = v7;
  v88[0] = v13[2];
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8418F4();
  sub_1AD84196C((unint64_t *)&qword_1E9A491A0, (void (*)(uint64_t))sub_1AD8418F4);
  swift_retain();
  uint64_t v43 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  *(void *)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_alarmConfigurationObserver] = v43;
  swift_release();
  v88[0] = v13[3];
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8419BC();
  sub_1AD84196C(&qword_1E9A491B8, (void (*)(uint64_t))sub_1AD8419BC);
  swift_retain();
  uint64_t v44 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  *(void *)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelEditObserver] = v44;
  swift_release();
  uint64_t v45 = (uint64_t)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepScheduleProvider];
  swift_beginAccess();
  sub_1AD841A24(v45, (uint64_t)v88);
  uint64_t v46 = v89;
  uint64_t v71 = v8;
  if (v89)
  {
    uint64_t v47 = v90;
    v48 = __swift_project_boxed_opaque_existential_1Tm(v88, v89);
    uint64_t v49 = *(void *)(v46 - 8);
    MEMORY[0x1F4188790](v48, v48);
    v51 = (char *)&v71 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v49 + 16))(v51);
    sub_1AD843EC0((uint64_t)v88, &qword_1E9A491D0, (uint64_t)&unk_1E9A491D8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
    uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 24))(v46, v47);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v46);
    uint64_t v87 = v52;
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1AD837C1C(0, (unint64_t *)&qword_1EB725060, (unint64_t *)&qword_1EB7250A0, (uint64_t)&qword_1EB725090, 0x1E4FA5540);
    sub_1AD841D94();
    uint64_t v46 = sub_1AD9DDC40();
    swift_release();
    swift_release();
  }
  else
  {
    sub_1AD843EC0((uint64_t)v88, &qword_1E9A491D0, (uint64_t)&unk_1E9A491D8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
  }
  *(void *)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver] = v46;
  swift_release();
  v88[0] = v13[8];
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8387F8();
  sub_1AD84196C((unint64_t *)&qword_1E9A4B080, (void (*)(uint64_t))sub_1AD8387F8);
  swift_retain();
  uint64_t v53 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  *(void *)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepDurationGoalObserver] = v53;
  swift_release();
  v88[0] = v13[4];
  sub_1AD837C1C(0, &qword_1E9A491F8, (unint64_t *)&qword_1E9A49200, (uint64_t)&qword_1E9A49208, 0x1E4FA5558);
  sub_1AD841B18();
  v88[0] = (id)sub_1AD9DDBF0();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD841B98();
  sub_1AD84196C(&qword_1E9A49220, (void (*)(uint64_t))sub_1AD841B98);
  uint64_t v54 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  *(void *)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_validScheduleRangeObserver] = v54;
  swift_release();
  id v86 = self;
  id v55 = objc_msgSend(v86, sel_defaultCenter);
  v56 = v73;
  sub_1AD9DFD40();

  uint64_t v77 = sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  v88[0] = (id)sub_1AD9DFCA0();
  uint64_t v84 = sub_1AD9DFC90();
  uint64_t v57 = *(void *)(v84 - 8);
  v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
  uint64_t v85 = v57 + 56;
  uint64_t v58 = (uint64_t)v74;
  v83(v74, 1, 1, v84);
  uint64_t v82 = sub_1AD84196C(&qword_1EB725B80, MEMORY[0x1E4F27FC8]);
  unint64_t v81 = sub_1AD841810();
  v59 = v75;
  uint64_t v60 = v76;
  sub_1AD9DDC20();
  v80 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FBCC28];
  sub_1AD842AC4(v58, (unint64_t *)&qword_1EB724D00, MEMORY[0x1E4FBCC28]);

  uint64_t v79 = *(void *)(v79 + 8);
  ((void (*)(char *, uint64_t))v79)(v56, v60);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v78 = sub_1AD84196C((unint64_t *)&unk_1EB724CF0, (void (*)(uint64_t))sub_1AD841744);
  uint64_t v61 = v72;
  uint64_t v62 = sub_1AD9DDC40();
  swift_release();
  uint64_t v71 = *(void *)(v71 + 8);
  ((void (*)(char *, uint64_t))v71)(v59, v61);
  *(void *)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_significantTimeChangeObserver] = v62;
  swift_release();
  id v63 = objc_msgSend(v86, sel_defaultCenter);
  sub_1AD9DFD40();

  v88[0] = (id)sub_1AD9DFCA0();
  v83((char *)v58, 1, 1, v84);
  sub_1AD9DDC20();
  sub_1AD842AC4(v58, (unint64_t *)&qword_1EB724D00, v80);

  ((void (*)(char *, uint64_t))v79)(v56, v60);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v64 = sub_1AD9DDC40();
  swift_release();
  v65 = (void (*)(char *, uint64_t))v71;
  ((void (*)(char *, uint64_t))v71)(v59, v61);
  *(void *)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_localeChangeObserver] = v64;
  swift_release();
  id v66 = objc_msgSend(v86, sel_defaultCenter);
  sub_1AD9DFD40();

  v88[0] = (id)sub_1AD9DFCA0();
  v83((char *)v58, 1, 1, v84);
  sub_1AD9DDC20();
  sub_1AD842AC4(v58, (unint64_t *)&qword_1EB724D00, v80);

  ((void (*)(char *, uint64_t))v79)(v56, v60);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v67 = sub_1AD9DDC40();
  swift_release();
  v65(v59, v61);
  *(void *)&v17[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_willResignActiveObserver] = v67;
  swift_release();
  sub_1AD841C7C(0, (unint64_t *)&qword_1E9A49250, (uint64_t (*)(uint64_t))sub_1AD841CE0, MEMORY[0x1E4FBBE00]);
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_1AD9E3070;
  uint64_t v69 = sub_1AD9DD6D0();
  uint64_t v70 = MEMORY[0x1E4FB1138];
  *(void *)(v68 + 32) = v69;
  *(void *)(v68 + 40) = v70;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD841D34();
  sub_1AD9DFC70();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

id sub_1AD83A414(char *a1)
{
  if (*(unsigned char *)(*(void *)&a1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model] + 48) != 1) {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14A8]), sel_initWithBarButtonSystemItem_target_action_, 0, a1, sel_saveButtonPressed);
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  uint64_t v3 = type metadata accessor for ScheduleOccurrenceViewController();
  v14[3] = v3;
  v14[0] = a1;
  uint64_t v4 = a1;
  uint64_t v5 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v6 = __swift_project_boxed_opaque_existential_1Tm(v14, v3);
    uint64_t v7 = *(void *)(v3 - 8);
    MEMORY[0x1F4188790](v6, v6);
    uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    uint64_t v10 = sub_1AD9E02B0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v12 = objc_allocWithZone(MEMORY[0x1E4FB14A8]);
  id v11 = objc_msgSend(v12, sel_initWithTitle_style_target_action_, v5, 2, v10, sel_saveButtonPressed, v14[0]);

  swift_unknownObjectRelease();
  return v11;
}

void sub_1AD83A670(void **a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    sub_1AD83CEE0();
    uint64_t v6 = *(void **)&v5[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource];
    if (v6)
    {
      id v7 = v6;
      id v8 = objc_msgSend(v5, sel_tableView);
      sub_1AD86AAD8(v2, v8);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1AD83A720(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    *(unsigned char *)(v3 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelHasChanged) = 1;
    if (*(void *)(v3 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver))
    {
      swift_retain();
      sub_1AD9DDA90();
      swift_release();
    }
    objc_msgSend(v4, sel_setModalInPresentation_, 1);
    id v5 = objc_msgSend(v4, sel_navigationItem);
    id v6 = objc_msgSend(v5, sel_rightBarButtonItem);

    if (v6)
    {
      objc_msgSend(v6, sel_setEnabled_, ScheduleOccurrenceEditModel.isValid.getter() & 1);

      uint64_t v4 = v6;
    }
  }
}

void sub_1AD83A828(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    sub_1AD83A884(v2);
  }
}

void sub_1AD83A884(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_1AD9DCC70();
  uint64_t v75 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v5);
  id v7 = (char *)v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1AD9DD550();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)qword_1EB725958);
  uint64_t v10 = sub_1AD9DD530();
  os_log_type_t v11 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v73 = v7;
    uint64_t v74 = v4;
    uint64_t v14 = v13;
    v79[0] = v13;
    *(_DWORD *)id v12 = 136446210;
    uint64_t v15 = sub_1AD9E04F0();
    uint64_t v78 = sub_1AD838978(v15, v16, v79);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v10, v11, "[%{public}s] Sleep schedule did change while editing", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v17 = v14;
    id v7 = v73;
    uint64_t v4 = v74;
    MEMORY[0x1B3E6D1A0](v17, -1, -1);
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
  }

  if (v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelHasChanged])
  {
    id v18 = sub_1AD9DD530();
    os_log_type_t v19 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v79[0] = v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      uint64_t v22 = sub_1AD9E04F0();
      uint64_t v78 = sub_1AD838978(v22, v23, v79);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v18, v19, "[%{public}s] Ignoring occurrence reset since the user has already edited the model.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v21, -1, -1);
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
    }

    return;
  }
  v72[1] = v9;
  if (a1)
  {
    id v24 = a1;
  }
  else
  {
    id v25 = sub_1AD9DD530();
    os_log_type_t v26 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v73 = v7;
      uint64_t v29 = v4;
      uint64_t v30 = v28;
      v79[0] = v28;
      *(_DWORD *)id v27 = 136446210;
      uint64_t v31 = sub_1AD9E04F0();
      uint64_t v78 = sub_1AD838978(v31, v32, v79);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v25, v26, "[%{public}s] Sleep schedule is nil - creating empty schedule.", v27, 0xCu);
      swift_arrayDestroy();
      uint64_t v33 = v30;
      uint64_t v4 = v29;
      id v7 = v73;
      MEMORY[0x1B3E6D1A0](v33, -1, -1);
      MEMORY[0x1B3E6D1A0](v27, -1, -1);
    }

    id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5540]), sel_init);
  }
  uint64_t v34 = (uint64_t)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepScheduleProvider];
  swift_beginAccess();
  sub_1AD841A24(v34, (uint64_t)v79);
  uint64_t v35 = v80;
  if (v80)
  {
    uint64_t v36 = v81;
    id v37 = __swift_project_boxed_opaque_existential_1Tm(v79, v80);
    id v38 = a1;
    uint64_t v39 = *(void *)(v35 - 8);
    MEMORY[0x1F4188790](v37, v37);
    id v41 = (char *)v72 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v39 + 16))(v41);
    id v42 = v38;
    sub_1AD843EC0((uint64_t)v79, &qword_1E9A491D0, (uint64_t)&unk_1E9A491D8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
    id v43 = SleepScheduleProviding.sleepScheduleModel.getter(v35, v36);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v35);
  }
  else
  {
    id v44 = a1;
    sub_1AD843EC0((uint64_t)v79, &qword_1E9A491D0, (uint64_t)&unk_1E9A491D8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
    id v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5548]), sel_init);
  }
  sub_1AD9DCC60();
  uint64_t v45 = *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model];
  if (*(unsigned char *)(v45 + 49) == 1)
  {
    uint64_t v46 = (void *)sub_1AD9DCBB0();
    uint64_t v47 = (void *)sub_1AD9DCDA0();
    id v48 = objc_msgSend(v43, sel_overrideOccurrenceGenerationResultForCurrentDate_gregorianCalendar_schedule_, v46, v47, v24);

    id v49 = objc_msgSend(v48, sel_overrideOccurrence);
    ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(v49, 0);

    uint64_t v50 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource];
    if (v50)
    {
      v51 = v50;
      if (objc_msgSend(v48, sel_wasGeneratedFromTemplate))
      {
        char v52 = v51[qword_1E9A49E88];
        v51[qword_1E9A49E88] = 0;
        if ((v52 & 1) == 0) {
          goto LABEL_33;
        }
      }
      else
      {
        unsigned int v60 = objc_msgSend(v48, sel_upcomingOccurrenceWasOverride);
        int v61 = v51[qword_1E9A49E88];
        v51[qword_1E9A49E88] = v60;
        if (v60 == v61)
        {
LABEL_33:

          goto LABEL_34;
        }
      }
      sub_1AD86B550();
      goto LABEL_33;
    }
LABEL_43:
    __break(1u);
    return;
  }
  if (*(unsigned char *)(v45 + 48) == 1)
  {
    id v53 = objc_msgSend(v24, sel_mutableOccurrenceTemplate);
    ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(v53, (uint64_t)objc_msgSend(v24, sel_weekdaysWithOccurrences));

LABEL_34:
    (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v4);
    return;
  }
  v73 = v2;
  uint64_t v74 = v4;
  swift_beginAccess();
  id v54 = objc_msgSend(v24, sel_occurrencesOnDays_, objc_msgSend(*(id *)(v45 + 40), sel_weekdays));
  sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
  unint64_t v55 = sub_1AD9DF860();

  if (v55 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v62 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (v62) {
      goto LABEL_26;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  if (!*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_37;
  }
LABEL_26:
  if ((v55 & 0xC000000000000001) != 0)
  {
    id v56 = (id)MEMORY[0x1B3E6BFF0](0, v55);
  }
  else
  {
    if (!*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_43;
    }
    id v56 = *(id *)(v55 + 32);
  }
  uint64_t v57 = v56;
  swift_bridgeObjectRelease();
  id v58 = objc_msgSend(v57, sel_weekdays);
  if (v58 == objc_msgSend(*(id *)(v45 + 40), sel_weekdays))
  {
    objc_msgSend(v57, sel_mutableCopy);
    sub_1AD9DFF20();
    swift_unknownObjectRelease();
    sub_1AD837214(0, (unint64_t *)&unk_1E9A4D9E0);
    swift_dynamicCast();
    v59 = v77;
    ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(v77, (uint64_t)objc_msgSend(v24, sel_weekdaysWithOccurrences));

    (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v74);
    return;
  }

LABEL_38:
  id v63 = sub_1AD9DD530();
  os_log_type_t v64 = sub_1AD9DFBC0();
  if (os_log_type_enabled(v63, v64))
  {
    id v65 = v43;
    id v66 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    v79[0] = v67;
    *(_DWORD *)id v66 = 136446210;
    uint64_t v68 = sub_1AD9E04F0();
    uint64_t v77 = (void *)sub_1AD838978(v68, v69, v79);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v63, v64, "[%{public}s] Occurrence being edited has changed weekdays. Dismissing.", v66, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v67, -1, -1);
    uint64_t v70 = v66;
    id v43 = v65;
    MEMORY[0x1B3E6D1A0](v70, -1, -1);
  }

  uint64_t v71 = v74;
  objc_msgSend(v73, sel_cancelButtonPressed);

  (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v71);
}

void sub_1AD83B2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_1AD83D118("[%{public}s] Sleep duration goal did change while editing");
  }
}

void sub_1AD83B34C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_navigationItem);
    id v6 = objc_msgSend(v5, sel_rightBarButtonItem);

    if (v6)
    {
      objc_msgSend(v6, sel_setEnabled_, ScheduleOccurrenceEditModel.isValid.getter() & 1);
    }
    sub_1AD83CEE0();
  }
}

void sub_1AD83B40C(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  id v5 = (void *)MEMORY[0x1B3E6D270](v4);
  if (v5)
  {
    id v6 = v5;
    [v5 *a3];
  }
}

void sub_1AD83B468(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_1AD83B9E4();
  }
}

void sub_1AD83B4BC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1B3E6D270](v4);
  if (v5)
  {
    id v6 = (void *)v5;
    id v7 = *(void **)(v5 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
    uint64_t v8 = v7;

    if (v7)
    {
      id v9 = objc_msgSend(a1, sel_traitCollection);
      id v10 = objc_msgSend(v9, sel_preferredContentSizeCategory);

      LOBYTE(v9) = sub_1AD9DFD50();
      v8[qword_1E9A49E98] = v9 & 1;
      sub_1AD86B550();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1AD83B5E0(char a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  v26.receiver = v2;
  v26.super_class = (Class)type metadata accessor for ScheduleOccurrenceViewController();
  objc_msgSendSuper2(&v26, sel_viewWillDisappear_, a1 & 1);
  id v4 = objc_msgSend(v2, sel_navigationController);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = v4;
  id v6 = objc_msgSend(v4, sel_viewControllers);

  sub_1AD837214(0, &qword_1E9A49270);
  unint64_t v7 = sub_1AD9DF860();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_4;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v8 = (id)MEMORY[0x1B3E6BFF0](0, v7);
  }
  else
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_24:
      swift_once();
      goto LABEL_19;
    }
    id v8 = *(id *)(v7 + 32);
  }
  id v9 = v8;
  swift_bridgeObjectRelease();
  id v10 = v2;
  id v11 = v9;
  char v12 = sub_1AD9DFE00();

  if (v12) {
    goto LABEL_17;
  }
LABEL_11:
  if (v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate])
  {
LABEL_17:
    sub_1AD98B9F4();
    return;
  }
  if (v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelHasChanged] == 1)
  {
    if (*(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver])
    {
      swift_retain();
      sub_1AD9DDA90();
      swift_release();
    }
    uint64_t v14 = &v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate];
    swift_beginAccess();
    if (MEMORY[0x1B3E6D270](v14))
    {
      uint64_t v15 = *((void *)v14 + 1);
      uint64_t ObjectType = swift_getObjectType();
      id v17 = ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()();
      (*(void (**)(char *, id, void, uint64_t, uint64_t))(v15 + 8))(v2, v17, 0, ObjectType, v15);

      swift_unknownObjectRelease();
    }
    goto LABEL_17;
  }
  if (qword_1EB725658 != -1) {
    goto LABEL_24;
  }
LABEL_19:
  uint64_t v18 = sub_1AD9DD550();
  __swift_project_value_buffer(v18, (uint64_t)qword_1EB725958);
  os_log_type_t v19 = sub_1AD9DD530();
  os_log_type_t v20 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    v25[0] = v22;
    *(_DWORD *)uint64_t v21 = 136446210;
    uint64_t v23 = sub_1AD9E04F0();
    v25[3] = sub_1AD838978(v23, v24, v25);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v19, v20, "[%{public}s] Skipping notifying delegate due to no changes", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v22, -1, -1);
    MEMORY[0x1B3E6D1A0](v21, -1, -1);
  }
}

void sub_1AD83B9E4()
{
  swift_getObjectType();
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1AD9DD550();
  __swift_project_value_buffer(v0, (uint64_t)qword_1EB725958);
  uint64_t v1 = sub_1AD9DD530();
  os_log_type_t v2 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136446210;
    uint64_t v5 = sub_1AD9E04F0();
    sub_1AD838978(v5, v6, &v7);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v1, v2, "[%{public}s] App will resign active", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v4, -1, -1);
    MEMORY[0x1B3E6D1A0](v3, -1, -1);
  }

  sub_1AD98B9F4();
}

void sub_1AD83BBC8(uint64_t a1)
{
  os_log_type_t v2 = v1;
  v12.receiver = v2;
  v12.super_class = (Class)type metadata accessor for ScheduleOccurrenceViewController();
  objc_msgSendSuper2(&v12, sel_restoreUserActivityState_, a1);
  sub_1AD83F638();
  if (v4)
  {
    uint64_t v5 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1AD9DF710();
    uint64_t v8 = v7;
    if (v6 == sub_1AD9DF710() && v8 == v9)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v11 = sub_1AD9E02D0();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0) {
        return;
      }
    }
    ScheduleOccurrenceEditModel.alarmEnabled.setter(1);
  }
}

void sub_1AD83BD34()
{
}

void sub_1AD83BE3C(void *a1)
{
  os_log_type_t v2 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (v2)
  {
    id v4 = v2;
    sub_1AD9DD680();

    if (v8)
    {
      if ((v7 != 0xD000000000000029 || v8 != 0x80000001AD9EF600) && (sub_1AD9E02D0() & 1) == 0)
      {
        if (v7 == 0xD000000000000025 && v8 == 0x80000001AD9EF690)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v5 = sub_1AD9E02D0();
          swift_bridgeObjectRelease();
          if ((v5 & 1) == 0) {
            goto LABEL_12;
          }
        }
        sub_1AD83C26C();
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
      sub_1AD83BF9C();
    }
LABEL_12:
    uint64_t v6 = (void *)sub_1AD9DCED0();
    objc_msgSend(a1, sel_deselectRowAtIndexPath_animated_, v6, 1);

    return;
  }
  __break(1u);
}

void sub_1AD83BF9C()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  id v2 = objc_msgSend(*(id *)(*(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model]+ OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v2, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  uint64_t v3 = self;
  id v4 = objc_msgSend(v14, sel_toneIdentifier);
  id v5 = objc_msgSend(v14, sel_vibrationIdentifier);
  id v6 = objc_msgSend(v3, sel_hksh_alarmPickerWithToneIdentifier_vibrationIdentifier_, v4, v5);

  objc_msgSend(v6, sel_setDelegate_, v1);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1AD9DD550();
  __swift_project_value_buffer(v7, (uint64_t)qword_1EB725958);
  uint64_t v8 = sub_1AD9DD530();
  os_log_type_t v9 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v15[0] = v11;
    *(_DWORD *)id v10 = 136446210;
    uint64_t v12 = sub_1AD9E04F0();
    sub_1AD838978(v12, v13, v15);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v8, v9, "[%{public}s] Presenting tone picker", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v11, -1, -1);
    MEMORY[0x1B3E6D1A0](v10, -1, -1);
  }

  objc_msgSend(v1, sel_showViewController_sender_, v6, 0);
}

void sub_1AD83C26C()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate;
  if ((v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate] & 1) == 0)
  {
    id v2 = v0;
    uint64_t v3 = &v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate];
    swift_beginAccess();
    if (MEMORY[0x1B3E6D270](v3))
    {
      uint64_t v4 = *((void *)v3 + 1);
      if (*(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver])
      {
        swift_retain();
        sub_1AD9DDA90();
        swift_release();
      }
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v6 = *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model];
      swift_beginAccess();
      uint64_t v7 = *(void (**)(unsigned char *, id, uint64_t, uint64_t))(v4 + 16);
      id v8 = *(id *)(v6 + 40);
      v7(v2, v8, ObjectType, v4);

      v2[v1] = 1;
      id v9 = objc_msgSend(v2, sel_navigationController);
      if (v9)
      {
        id v10 = v9;
        id v11 = objc_msgSend(v9, sel_viewControllers);

        sub_1AD837214(0, &qword_1E9A49270);
        unint64_t v12 = sub_1AD9DF860();

        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_1AD9E0190();
          swift_bridgeObjectRelease();
          if (v18)
          {
LABEL_8:
            if ((v12 & 0xC000000000000001) != 0)
            {
              id v13 = (id)MEMORY[0x1B3E6BFF0](0, v12);
            }
            else
            {
              if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                return;
              }
              id v13 = *(id *)(v12 + 32);
            }
            uint64_t v14 = v13;
            swift_bridgeObjectRelease();
            uint64_t v15 = v2;
            id v16 = v14;
            char v17 = sub_1AD9DFE00();

            if (v17) {
              goto LABEL_16;
            }
            goto LABEL_15;
          }
        }
        else if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
      }
LABEL_15:
      id v19 = objc_msgSend(v2, sel_navigationController);

LABEL_16:
      swift_unknownObjectRelease();
    }
  }
}

void sub_1AD83C5E4(uint64_t a1, void *a2)
{
}

id sub_1AD83C704(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1AD9DCF10();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  id v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource;
  unint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (!v12) {
    return 0;
  }
  sub_1AD8442BC(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1AD9E3080;
  *(void *)(v13 + 32) = a2;
  *(void *)(v13 + 40) = 0;
  id v14 = v12;
  MEMORY[0x1B3E68E60](v13);
  sub_1AD9DD680();

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v27)
  {
    if (v26 == 0xD000000000000029 && v27 == 0x80000001AD9EF600 || (sub_1AD9E02D0() & 1) != 0)
    {
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D30]), sel_init);
      swift_bridgeObjectRelease();
      return v15;
    }
    swift_bridgeObjectRelease();
  }
  id v16 = *(void **)(v3 + v11);
  if (!v16) {
    return 0;
  }
  id v17 = v16;
  sub_1AD86B964(a2);
  uint64_t v19 = v18;

  if (!v19) {
    return 0;
  }
  os_log_type_t v20 = (void *)sub_1AD9DF6D0();
  id v21 = objc_msgSend(a1, sel_dequeueReusableHeaderFooterViewWithIdentifier_, v20);

  if (!v21)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  id v15 = (id)swift_dynamicCastClass();
  if (v15)
  {
    id v22 = v21;
    id v23 = sub_1AD993D30();
    unint64_t v24 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_setText_, v24);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v15;
}

id sub_1AD83CA60(uint64_t a1, uint64_t a2)
{
  return sub_1AD842318(a2);
}

double sub_1AD83CACC(uint64_t a1, uint64_t a2)
{
  return sub_1AD8424F0(a2);
}

double sub_1AD83CB30(uint64_t a1, uint64_t a2)
{
  return sub_1AD8426BC(a2);
}

double sub_1AD83CB94(uint64_t a1, uint64_t a2)
{
  return sub_1AD842888(a2);
}

void ScheduleOccurrenceViewController.__allocating_init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
}

void ScheduleOccurrenceViewController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
}

void sub_1AD83CC58()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1AD843EC0(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepScheduleProvider, &qword_1E9A491D0, (uint64_t)&unk_1E9A491D8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
  sub_1AD843DF4(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate);
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
}

id ScheduleOccurrenceViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL sub_1AD83CEA8()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  return v1 && *(unsigned char *)(v1 + qword_1E9A49E68) != 2;
}

void sub_1AD83CEE0()
{
  id v1 = objc_msgSend(v0, sel_tableView);
  if (!v1) {
    goto LABEL_19;
  }
  objc_super v2 = v1;
  id v3 = objc_msgSend(v1, sel_visibleCells);

  sub_1AD837214(0, (unint64_t *)&unk_1E9A49700);
  unint64_t v4 = sub_1AD9DF860();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5)
    {
LABEL_4:
      if (v5 >= 1)
      {
        uint64_t v6 = 0;
        uint64_t v10 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model;
        do
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v7 = (id)MEMORY[0x1B3E6BFF0](v6, v4);
          }
          else {
            id v7 = *(id *)(v4 + 8 * v6 + 32);
          }
          id v14 = v7;
          sub_1AD843E70(0, (unint64_t *)&qword_1E9A4AFD0);
          if (swift_dynamicCast())
          {
            sub_1AD843F30(v12, (uint64_t)v15);
            uint64_t v9 = v16;
            uint64_t v8 = v17;
            __swift_project_boxed_opaque_existential_1Tm(v15, v16);
            (*(void (**)(void, uint64_t, uint64_t))(v8 + 8))(*(void *)(v11 + v10), v9, v8);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
          }
          else
          {
            uint64_t v13 = 0;
            memset(v12, 0, sizeof(v12));
            sub_1AD843EC0((uint64_t)v12, (unint64_t *)&unk_1E9A49710, (uint64_t)&qword_1E9A4AFD0, (uint64_t)&protocol descriptor for ScheduleOccurrenceEditModelConsuming);
          }
          ++v6;
        }
        while (v5 != v6);
        swift_bridgeObjectRelease();
        return;
      }
      __break(1u);
LABEL_19:
      __break(1u);
      return;
    }
  }
  swift_bridgeObjectRelease();
}

void sub_1AD83D118(const char *a1)
{
  swift_getObjectType();
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v9 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v9);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, a1, v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  sub_1AD83CEE0();
}

void sub_1AD83D308()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = sub_1AD9DCD10();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCCF0();
  int v7 = sub_1AD9DCD00() & 1;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if (v7 != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_isIn24HourTime))
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_isIn24HourTime) = v7;
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_1AD9DD550();
    __swift_project_value_buffer(v8, (uint64_t)qword_1EB725958);
    uint64_t v9 = sub_1AD9DD530();
    os_log_type_t v10 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v16 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v13 = sub_1AD9E04F0();
      uint64_t v15 = sub_1AD838978(v13, v14, &v16);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] 24 hour time changed", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v12, -1, -1);
      MEMORY[0x1B3E6D1A0](v11, -1, -1);
    }

    sub_1AD83CEE0();
  }
}

void sub_1AD83D59C()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate) & 1) == 0)
  {
    uint64_t v2 = v0;
    uint64_t v3 = v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
    swift_beginAccess();
    if (MEMORY[0x1B3E6D270](v3))
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (*(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver))
      {
        swift_retain();
        sub_1AD9DDA90();
        swift_release();
      }
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v2, ObjectType, v4);
      swift_unknownObjectRelease();
      *(unsigned char *)(v2 + v1) = 1;
    }
  }
}

void ScheduleOccurrenceViewController.sleepScheduleComponentsEditViewEditingDidChange(_:)(uint64_t a1)
{
  uint64_t v25 = a1;
  sub_1AD841C7C(0, (unint64_t *)&qword_1E9A49298, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v25 - v3;
  uint64_t v5 = sub_1AD9DCF10();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource;
  uint64_t v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v26 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v27 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  do
  {
    char v14 = v9;
    uint64_t v15 = *(void **)&v28[v11];
    if (!v15)
    {
      __break(1u);
LABEL_16:
      __break(1u);
      return;
    }
    uint64_t v16 = *((void *)&unk_1F04699D8 + 2 * v10 + 5);
    uint64_t v29 = *((void *)&unk_1F04699D8 + 2 * v10 + 4);
    uint64_t v30 = v16;
    swift_bridgeObjectRetain();
    id v17 = v15;
    sub_1AD9DD6B0();
    swift_bridgeObjectRelease();

    if ((*v13)(v4, 1, v5) == 1)
    {
      sub_1AD842AC4((uint64_t)v4, (unint64_t *)&qword_1E9A49298, MEMORY[0x1E4F27DE8]);
    }
    else
    {
      uint64_t v18 = v11;
      (*v27)(v8, v4, v5);
      id v19 = objc_msgSend(v28, sel_tableView);
      if (!v19) {
        goto LABEL_16;
      }
      os_log_type_t v20 = v19;
      id v21 = (void *)sub_1AD9DCED0();
      id v22 = objc_msgSend(v20, sel_cellForRowAtIndexPath_, v21);

      uint64_t v11 = v18;
      if (v22)
      {
        type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
        if (swift_dynamicCastClass()) {
          sub_1AD921864(v25);
        }
      }
      (*v26)(v8, v5);
    }
    char v9 = 1;
    uint64_t v10 = 1;
  }
  while ((v14 & 1) == 0);
  swift_arrayDestroy();
  id v23 = objc_msgSend(v28, sel_navigationItem);
  id v24 = objc_msgSend(v23, sel_rightBarButtonItem);

  if (v24)
  {
    objc_msgSend(v24, sel_setEnabled_, 0);
  }
}

uint64_t ScheduleOccurrenceViewController.sleepScheduleComponentsEditViewEditingDidEnd(_:)(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DC990();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = (long long *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  uint64_t v12 = *((void *)v11 + 4);
  char v13 = *((unsigned char *)v11 + 40);
  char v14 = *((unsigned char *)v11 + 41);
  char v15 = *((unsigned char *)v11 + 42);
  long long v16 = v11[1];
  long long v25 = *v11;
  long long v26 = v16;
  uint64_t v27 = v12;
  char v28 = v13;
  char v29 = v14;
  char v30 = v15;
  uint64_t v17 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  sub_1AD94B060(*(double *)(v17 + 144));
  uint64_t v18 = *((void *)v11 + 4);
  char v19 = *((unsigned char *)v11 + 40);
  char v20 = *((unsigned char *)v11 + 41);
  char v21 = *((unsigned char *)v11 + 42);
  long long v22 = v11[1];
  long long v25 = *v11;
  long long v26 = v22;
  uint64_t v27 = v18;
  char v28 = v19;
  char v29 = v20;
  char v30 = v21;
  sub_1AD94B2E4(*(double *)(v17 + 144));
  ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)();
  id v23 = *(void (**)(char *, uint64_t))(v3 + 8);
  v23(v7, v2);
  return ((uint64_t (*)(char *, uint64_t))v23)(v10, v2);
}

uint64_t ScheduleOccurrenceViewController.scheduleOccurrenceComponentsAccessibilityTableViewCellCanUpdateValue(_:)(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DC990();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *(unsigned char *)(a1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component);
  sub_1AD91F808(v6);
  if (v7)
  {
    if (qword_1E9A48E78 != -1) {
      swift_once();
    }
    double v8 = *(double *)&qword_1E9A4A808;
    if (qword_1E9A48E80 != -1) {
      swift_once();
    }
    double v9 = *(double *)&qword_1E9A4A810;
    if (qword_1E9A48E70 != -1) {
      swift_once();
    }
    ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(v6, 1, v8, v9, *(double *)&qword_1E9A4A800);
  }
  else
  {
    if (qword_1E9A48E78 != -1) {
      swift_once();
    }
    double v11 = *(double *)&qword_1E9A4A808;
    if (qword_1E9A48E80 != -1) {
      swift_once();
    }
    double v12 = *(double *)&qword_1E9A4A810;
    if (qword_1E9A48E70 != -1) {
      swift_once();
    }
    char v10 = ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)((uint64_t)v6, 1, v11, v12, *(double *)&qword_1E9A4A800);
  }
  char v13 = v10;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v13 & 1;
}

void ScheduleOccurrenceViewController.scheduleOccurrenceComponentsAccessibilityTableViewCellDidUpdateValue(_:)(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  double v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_1AD9DD550();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EB725958);
  char v10 = a1;
  double v11 = sub_1AD9DD530();
  os_log_type_t v12 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v33 = v4;
    uint64_t v14 = v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v32 = v5;
    uint64_t v16 = v15;
    uint64_t v35 = v15;
    *(_DWORD *)uint64_t v14 = 136446723;
    uint64_t v17 = sub_1AD9E04F0();
    uint64_t v34 = sub_1AD838978(v17, v18, &v35);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    LOBYTE(v34) = v10[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component];
    v31[1] = v2;
    uint64_t v19 = sub_1AD9DF730();
    uint64_t v34 = sub_1AD838978(v19, v20, &v35);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 22) = 2081;
    sub_1AD91F808(v8);
    sub_1AD84196C((unint64_t *)&unk_1E9A492A0, MEMORY[0x1E4F26F90]);
    uint64_t v21 = sub_1AD9E0280();
    unint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v33);
    uint64_t v34 = sub_1AD838978(v21, v23, &v35);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v11, v12, "[%{public}s] AX %{public}s changed to %{private}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    uint64_t v24 = v16;
    uint64_t v5 = v32;
    MEMORY[0x1B3E6D1A0](v24, -1, -1);
    uint64_t v25 = v14;
    uint64_t v4 = v33;
    MEMORY[0x1B3E6D1A0](v25, -1, -1);
  }
  else
  {
  }
  char v26 = v10[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component];
  sub_1AD91F808(v8);
  if (v26)
  {
    if (qword_1E9A48E78 != -1) {
      swift_once();
    }
    double v27 = *(double *)&qword_1E9A4A808;
    if (qword_1E9A48E80 != -1) {
      swift_once();
    }
    double v28 = *(double *)&qword_1E9A4A810;
    if (qword_1E9A48E70 != -1) {
      swift_once();
    }
    ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(v8, 0, v27, v28, *(double *)&qword_1E9A4A800);
  }
  else
  {
    if (qword_1E9A48E78 != -1) {
      swift_once();
    }
    double v29 = *(double *)&qword_1E9A4A808;
    if (qword_1E9A48E80 != -1) {
      swift_once();
    }
    double v30 = *(double *)&qword_1E9A4A810;
    if (qword_1E9A48E70 != -1) {
      swift_once();
    }
    ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)((uint64_t)v8, 0, v29, v30, *(double *)&qword_1E9A4A800);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_1AD83CEE0();
}

Swift::Void __swiftcall ScheduleOccurrenceViewController.scheduleOccurrenceAlarmVolumeEditingDidEnd(_:)(UISlider *a1)
{
  swift_getObjectType();
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  uint64_t v3 = a1;
  uint64_t v4 = sub_1AD9DD530();
  os_log_type_t v5 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136446466;
    uint64_t v8 = sub_1AD9E04F0();
    uint64_t v14 = sub_1AD838978(v8, v9, &v15);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    [(UISlider *)v3 value];
    uint64_t v10 = sub_1AD9DF9A0();
    uint64_t v13 = sub_1AD838978(v10, v11, &v15);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v4, v5, "[%{public}s] Volume changed to %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
  }
  else
  {
  }
  [(UISlider *)v3 value];
  ScheduleOccurrenceEditModel.alarmVolume.setter(v12);
  sub_1AD98B5F8();
}

Swift::Void __swiftcall ScheduleOccurrenceViewController.switchCellValueChanged(_:value:)(HKSwitchTableViewCell_optional *_, Swift::Bool value)
{
  if (_)
  {
    type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
    if (swift_dynamicCastClass())
    {
      ScheduleOccurrenceEditModel.alarmEnabled.setter(value);
      sub_1AD98B9F4();
    }
    else
    {
      type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
      if (swift_dynamicCastClass()) {
        ScheduleOccurrenceEditModel.allowsSnooze.setter(value);
      }
    }
  }
}

uint64_t ScheduleOccurrenceViewController.tonePickerViewController(_:selectedToneWithIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD842B34(a2, a3, "[%{public}s] Did select tone with identifier: %{public}s", (uint64_t (*)(uint64_t, uint64_t))ScheduleOccurrenceEditModel.toneIdentifier.setter);
}

void ScheduleOccurrenceViewController.tonePickerViewController(_:willPresent:)(int a1, id a2)
{
  if (a2)
  {
    objc_msgSend(a2, sel_setShowsEditButtonInNavigationBar_, 1);
    objc_msgSend(a2, sel_setDelegate_, v2);
  }
  else
  {
    __break(1u);
  }
}

id ScheduleOccurrenceViewController.tonePickerViewController(_:didDismiss:)(int a1, id a2)
{
  if (a2) {
    return objc_msgSend(a2, sel_setDelegate_, v2);
  }
  __break(1u);
  return result;
}

uint64_t ScheduleOccurrenceViewController.vibrationPickerViewController(_:selectedVibrationWithIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD842B34(a2, a3, "[%{public}s] Did select vibration with identifier: %{public}s", (uint64_t (*)(uint64_t, uint64_t))ScheduleOccurrenceEditModel.vibrationIdentifier.setter);
}

uint64_t sub_1AD83EAE0(void *a1, uint64_t a2, void *a3, uint64_t a4, char *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  if (a4)
  {
    uint64_t v10 = sub_1AD9DF710();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  id v13 = a3;
  id v14 = a1;
  sub_1AD842B34(v10, v12, a5, a6);

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ScheduleOccurrenceViewController.saveButtonPressed()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model];
  if ((*(unsigned char *)(v3 + 48) & 1) != 0
    || (uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence),
        swift_beginAccess(),
        (objc_msgSend(v4, sel_isEqual_, *(void *)(v3 + 40)) & 1) == 0))
  {
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    *(void *)(v17 + 24) = ObjectType;
    char v18 = *(unsigned char *)(v3 + 49);
    swift_retain_n();
    if ((v18 & 1) == 0
      && (ScheduleOccurrenceEditModel.hasUpcomingSingleDayOverride.getter() & 1) != 0
      && ScheduleOccurrenceEditModel.scheduleConflictsWithOverride.getter())
    {
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_1AD9DD550();
      __swift_project_value_buffer(v19, (uint64_t)qword_1EB725958);
      unint64_t v20 = sub_1AD9DD530();
      os_log_type_t v21 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v20, v21))
      {
        unint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        v28[0] = v23;
        *(_DWORD *)unint64_t v22 = 136446210;
        uint64_t v24 = sub_1AD9E04F0();
        uint64_t v29 = sub_1AD838978(v24, v25, v28);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v20, v21, "[%{public}s] schedule conflicts with override, presenting alert", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v23, -1, -1);
        MEMORY[0x1B3E6D1A0](v22, -1, -1);
      }

      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = sub_1AD842DCC;
      *(void *)(v26 + 24) = v17;
      sub_1AD837214(0, (unint64_t *)&unk_1E9A4B010);
      swift_retain();
      id v27 = static UIAlertController.overlappingOverrideOccurrenceAlert(dismissHandler:)((uint64_t)sub_1AD842E0C, v26);
      objc_msgSend(v1, sel_presentViewController_animated_completion_, v27, 1, 0);
      swift_release_n();
      swift_release();
      swift_release();
    }
    else
    {
      sub_1AD83F080(1, 0, v16);
      swift_release();
      swift_release_n();
    }
  }
  else
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1AD9DD550();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
    uint64_t v6 = sub_1AD9DD530();
    os_log_type_t v7 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v28[0] = v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      uint64_t v10 = sub_1AD9E04F0();
      uint64_t v29 = sub_1AD838978(v10, v11, v28);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v6, v7, "[%{public}s] save button pressed but no changes were made", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v9, -1, -1);
      MEMORY[0x1B3E6D1A0](v8, -1, -1);
    }

    uint64_t v12 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate;
    if ((v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate] & 1) == 0)
    {
      id v13 = &v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate];
      swift_beginAccess();
      if (MEMORY[0x1B3E6D270](v13))
      {
        uint64_t v14 = *((void *)v13 + 1);
        if (*(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver])
        {
          swift_retain();
          sub_1AD9DDA90();
          swift_release();
        }
        uint64_t v15 = swift_getObjectType();
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 24))(v1, v15, v14);
        swift_unknownObjectRelease();
        v1[v12] = 1;
      }
    }
  }
}

void sub_1AD83F080(char a1, char a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = a3 + 16;
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1AD9DD550();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
    uint64_t v6 = sub_1AD9DD530();
    os_log_type_t v7 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v23[0] = v9;
      *(_DWORD *)uint64_t v8 = 136446466;
      uint64_t v10 = sub_1AD9E04F0();
      uint64_t v24 = sub_1AD838978(v10, v11, v23);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2082;
      LOBYTE(v24) = a2 & 1;
      uint64_t v12 = sub_1AD9DF730();
      uint64_t v24 = sub_1AD838978(v12, v13, v23);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v6, v7, "[%{public}s] Saving (deleteOverride: %{public}s)", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v9, -1, -1);
      MEMORY[0x1B3E6D1A0](v8, -1, -1);
    }

    swift_beginAccess();
    uint64_t v14 = MEMORY[0x1B3E6D270](v4);
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      sub_1AD83F404(a2 & 1);
    }
  }
  else
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_1AD9DD550();
    __swift_project_value_buffer(v16, (uint64_t)qword_1EB725958);
    oslog = sub_1AD9DD530();
    os_log_type_t v17 = sub_1AD9DFBE0();
    if (os_log_type_enabled(oslog, v17))
    {
      char v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v23[0] = v19;
      *(_DWORD *)char v18 = 136446210;
      uint64_t v20 = sub_1AD9E04F0();
      uint64_t v24 = sub_1AD838978(v20, v21, v23);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, oslog, v17, "[%{public}s] Cancelling", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v19, -1, -1);
      MEMORY[0x1B3E6D1A0](v18, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t sub_1AD83F404(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate) & 1) == 0)
  {
    uint64_t v3 = v1;
    char v4 = result;
    uint64_t v5 = v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
    swift_beginAccess();
    id result = MEMORY[0x1B3E6D270](v5);
    if (result)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (*(void *)(v3 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver))
      {
        swift_retain();
        sub_1AD9DDA90();
        swift_release();
      }
      uint64_t ObjectType = swift_getObjectType();
      id v8 = ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()();
      (*(void (**)(uint64_t, id, void, uint64_t, uint64_t))(v6 + 8))(v3, v8, v4 & 1, ObjectType, v6);

      id result = swift_unknownObjectRelease();
      *(unsigned char *)(v3 + v2) = 1;
    }
  }
  return result;
}

Swift::Void __swiftcall ScheduleOccurrenceViewController.ppt_toggleAlarmEnabled()()
{
  id v1 = objc_msgSend(*(id *)(*(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model)+ OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v1, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  unsigned __int8 v2 = objc_msgSend(v3, sel_isEnabled);

  ScheduleOccurrenceEditModel.alarmEnabled.setter(v2 ^ 1);
}

uint64_t sub_1AD83F638()
{
  id v1 = objc_msgSend(v0, sel_userInfo);
  uint64_t v2 = MEMORY[0x1E4FBC840];
  if (v1)
  {
    id v3 = v1;
    uint64_t v4 = sub_1AD9DF600();

    *(void *)&long long v10 = sub_1AD9AF5E8();
    *((void *)&v10 + 1) = v5;
    sub_1AD9DFFE0();
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_1AD86509C((uint64_t)&v9), (v7 & 1) != 0))
    {
      sub_1AD838570(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v10);
    }
    else
    {
      long long v10 = 0u;
      long long v11 = 0u;
    }
    sub_1AD843E1C((uint64_t)&v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  sub_1AD8442BC(0, &qword_1E9A496F8, v2 + 8, MEMORY[0x1E4FBB718]);
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_1AD83F778()
{
  id v1 = objc_msgSend(v0, sel_userInfo);
  uint64_t v2 = MEMORY[0x1E4FBC840];
  if (v1)
  {
    id v3 = v1;
    uint64_t v4 = sub_1AD9DF600();

    *(void *)&long long v10 = sub_1AD9AF5E8();
    *((void *)&v10 + 1) = v5;
    sub_1AD9DFFE0();
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_1AD86509C((uint64_t)v9), (v7 & 1) != 0))
    {
      sub_1AD838570(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v10);
    }
    else
    {
      long long v10 = 0u;
      long long v11 = 0u;
    }
    sub_1AD843E1C((uint64_t)v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  sub_1AD8442BC(0, &qword_1E9A496F8, v2 + 8, MEMORY[0x1E4FBB718]);
  if (swift_dynamicCast()) {
    return v9[0];
  }
  else {
    return 2;
  }
}

void sub_1AD83F8B8(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1AD83F8C0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1AD83F8D4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1AD83F8E8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1AD83F8FC(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1AD83F92C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1AD83F958@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1AD83F97C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1AD83F990(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1AD83F9A4(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1AD83F9B8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1AD83F9CC(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1AD83F9E0(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1AD83F9F4(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1AD83FA08()
{
  return *v0 == 0;
}

uint64_t sub_1AD83FA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *sub_1AD83FA30(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1AD83FA44(uint64_t a1, uint64_t a2)
{
  return sub_1AD840A7C(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1AD83FA70()
{
  return sub_1AD9E03B0();
}

uint64_t sub_1AD83FAA0()
{
  return MEMORY[0x1F40E5F50](*v0);
}

uint64_t sub_1AD83FAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x1B3E690B0](a1, &v6);
  char v4 = v7;
  uint64_t v5 = v6;
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_1AD83FAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v8 = 1;
  char v3 = MEMORY[0x1B3E690C0](a1, &v7);
  char v4 = v8;
  uint64_t v5 = v7;
  if (v8) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_1AD83FB54(double *a1@<X8>)
{
  *a1 = MEMORY[0x1B3E690D0]();
}

uint64_t sub_1AD83FB7C(uint64_t a1)
{
  uint64_t v2 = sub_1AD84196C(&qword_1E9A49650, type metadata accessor for HKError);
  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_1AD83FBE8(uint64_t a1)
{
  uint64_t v2 = sub_1AD84196C(&qword_1E9A49650, type metadata accessor for HKError);
  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t sub_1AD83FC58(uint64_t a1)
{
  uint64_t v2 = sub_1AD84196C((unint64_t *)&qword_1E9A49688, type metadata accessor for HKError);
  return MEMORY[0x1F40E4480](a1, v2);
}

id sub_1AD83FCC4()
{
  return *v0;
}

uint64_t sub_1AD83FCCC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1AD83FCE0()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD83FD28()
{
  return sub_1AD9E03E0();
}

void *sub_1AD83FD6C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AD83FD78(uint64_t a1, id *a2)
{
  uint64_t result = sub_1AD9DF6F0();
  *a2 = 0;
  return result;
}

uint64_t sub_1AD83FDF0(uint64_t a1, id *a2)
{
  char v3 = sub_1AD9DF700();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1AD83FE70@<X0>(uint64_t *a1@<X8>)
{
  sub_1AD9DF710();
  uint64_t v2 = sub_1AD9DF6D0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1AD83FEB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1AD84187C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1AD83FEF4()
{
  return sub_1AD9DF710();
}

uint64_t sub_1AD83FF04(uint64_t a1)
{
  uint64_t v2 = sub_1AD84196C((unint64_t *)&qword_1E9A49688, type metadata accessor for HKError);
  return MEMORY[0x1F40E44F0](a1, v2);
}

uint64_t sub_1AD83FF70(uint64_t a1)
{
  uint64_t v2 = sub_1AD84196C((unint64_t *)&qword_1E9A49688, type metadata accessor for HKError);
  return MEMORY[0x1F40E44A8](a1, v2);
}

uint64_t sub_1AD83FFDC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD84196C((unint64_t *)&qword_1E9A49688, type metadata accessor for HKError);
  id v5 = a1;
  return MEMORY[0x1F40E4498](v5, a2, v4);
}

uint64_t sub_1AD84006C()
{
  id v1 = *v0;
  uint64_t v2 = sub_1AD9DFE20();

  return v2;
}

uint64_t sub_1AD8400A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD84196C((unint64_t *)&qword_1E9A49688, type metadata accessor for HKError);
  return MEMORY[0x1F40E44D8](a1, a2, v4);
}

uint64_t sub_1AD840120()
{
  return sub_1AD9E03E0();
}

void *sub_1AD840180@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1AD840190(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1AD84019C()
{
  sub_1AD84196C(&qword_1E9A49800, type metadata accessor for Name);
  sub_1AD84196C(&qword_1E9A49808, type metadata accessor for Name);
  return sub_1AD9E0200();
}

uint64_t sub_1AD840258()
{
  sub_1AD84196C(&qword_1E9A49820, type metadata accessor for HKSPSleepLaunchURLRoute);
  sub_1AD84196C(&qword_1E9A49828, type metadata accessor for HKSPSleepLaunchURLRoute);
  return sub_1AD9E0200();
}

uint64_t sub_1AD840314@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1AD9DF710();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1AD840340()
{
  sub_1AD84196C(&qword_1E9A49830, type metadata accessor for TextStyle);
  sub_1AD84196C(&qword_1E9A49838, type metadata accessor for TextStyle);
  return sub_1AD9E0200();
}

double sub_1AD8403FC@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t sub_1AD840408()
{
  return sub_1AD9E0200();
}

uint64_t sub_1AD8404D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD84196C((unint64_t *)&qword_1E9A49688, type metadata accessor for HKError);
  return MEMORY[0x1F40E44B8](a1, a2, a3, v6);
}

BOOL sub_1AD840554(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1AD840568()
{
  sub_1AD84196C(&qword_1E9A49690, type metadata accessor for HKSPProvenanceSource);
  sub_1AD84196C(&qword_1E9A49698, type metadata accessor for HKSPProvenanceSource);
  return sub_1AD9E0200();
}

uint64_t sub_1AD840624()
{
  sub_1AD84196C(&qword_1E9A49810, type metadata accessor for HKFeatureIdentifier);
  sub_1AD84196C(&qword_1E9A49818, type metadata accessor for HKFeatureIdentifier);
  return sub_1AD9E0200();
}

uint64_t sub_1AD8406E0()
{
  sub_1AD84196C((unint64_t *)&qword_1E9A496A0, type metadata accessor for Key);
  sub_1AD84196C(&qword_1E9A496A8, type metadata accessor for Key);
  return sub_1AD9E0200();
}

uint64_t sub_1AD84079C()
{
  sub_1AD84196C((unint64_t *)&unk_1E9A4C450, type metadata accessor for AttributeName);
  sub_1AD84196C(&qword_1E9A496F0, type metadata accessor for AttributeName);
  return sub_1AD9E0200();
}

uint64_t sub_1AD840858()
{
  sub_1AD84196C(&qword_1E9A496D8, type metadata accessor for FeatureKey);
  sub_1AD84196C((unint64_t *)&unk_1E9A496E0, type metadata accessor for FeatureKey);
  return sub_1AD9E0200();
}

uint64_t sub_1AD840914@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AD9DF6D0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1AD84095C()
{
  sub_1AD84196C(&qword_1E9A496C8, type metadata accessor for TraitKey);
  sub_1AD84196C(&qword_1E9A496D0, type metadata accessor for TraitKey);
  return sub_1AD9E0200();
}

uint64_t sub_1AD840A18(uint64_t a1, uint64_t a2)
{
  return sub_1AD840A7C(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1AD840A30()
{
  return MEMORY[0x1F4184070](*v0);
}

uint64_t sub_1AD840A38()
{
  return sub_1AD9E03D0();
}

uint64_t sub_1AD840A6C()
{
  return sub_1AD9E0390();
}

uint64_t sub_1AD840A7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1AD9DF710();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1AD840AC0()
{
  sub_1AD9DF710();
  sub_1AD9DF760();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD840B14()
{
  sub_1AD9DF710();
  sub_1AD9E03A0();
  sub_1AD9DF760();
  uint64_t v0 = sub_1AD9E03E0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AD840B88()
{
  uint64_t v0 = sub_1AD9DF710();
  uint64_t v2 = v1;
  if (v0 == sub_1AD9DF710() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1AD9E02D0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL sub_1AD840C14(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1AD840C28(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1AD840CC0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1AD840EC0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1AD840EC0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1AD840CC0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1AD840E38(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1AD9E0040();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1AD9E0130();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1AD9DF7E0();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1AD9E01E0();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1AD9E0130();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1AD840E38(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1AD8442BC(0, &qword_1EB725328, MEMORY[0x1E4FBC358], MEMORY[0x1E4FBBE00]);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1AD840EC0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1AD8442BC(0, &qword_1EB725328, MEMORY[0x1E4FBC358], MEMORY[0x1E4FBBE00]);
    long long v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    long long v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD841030(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for ScheduleOccurrenceViewController()
{
  return self;
}

id sub_1AD8410B8(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v4 = v3;
  HIDWORD(v25) = a2;
  uint64_t v7 = sub_1AD9DCD10();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  size_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_alarmConfigurationObserver] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelEditObserver] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_significantTimeChangeObserver] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_localeChangeObserver] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepDurationGoalObserver] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_validScheduleRangeObserver] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_willResignActiveObserver] = 0;
  uint64_t v12 = (uint64_t)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepScheduleProvider];
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(void *)(v12 + 32) = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate] = 0;
  v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelHasChanged] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource] = 0;
  uint64_t v13 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_isIn24HourTime;
  uint64_t v14 = v4;
  sub_1AD9DCCF0();
  char v15 = sub_1AD9DCD00();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v16 = a3;
  v4[v13] = v15 & 1;
  *(void *)&v14[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model] = a1;
  v14[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_allowsDeletion] = BYTE4(v25);
  swift_beginAccess();
  swift_retain();
  sub_1AD843FF4(a3, v12);
  swift_endAccess();
  type metadata accessor for AlarmPreviewPlayer();
  swift_allocObject();
  uint64_t v17 = swift_retain();
  *(void *)&v14[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_alarmPreviewPlayer] = AlarmPreviewPlayer.init(model:)(v17);

  if (*(unsigned char *)(a1 + 49) & 1) == 0 && (*(unsigned char *)(a1 + 48)) {
    swift_beginAccess();
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v18 = (id)qword_1EB727930;
  uint64_t v19 = sub_1AD9DCA70();
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();

  id v22 = SleepTableWelcomeController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)(v19, v21, 0, 0, 0, 2, 1);
  id v23 = objc_msgSend(v22, sel_headerView);
  objc_msgSend(v23, sel_setTitleHyphenationFactor_, 0.0);

  sub_1AD843EC0(v16, &qword_1E9A491D0, (uint64_t)&unk_1E9A491D8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
  return v22;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_1AD8414F0(void *a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v27 = a3;
  int v28 = a5;
  uint64_t v13 = sub_1AD9DCE40();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[3] = a8;
  v30[4] = a9;
  __swift_allocate_boxed_opaque_existential_1(v30);
  (*(void (**)(void))(*(void *)(a8 - 8) + 32))();
  id result = objc_msgSend(a1, sel_isSingleDayOverride);
  if (result)
  {
    HIDWORD(v26) = a2;
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 40);
    id v20 = a1;
    uint64_t v21 = v19(a8, a9);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 24))(a8, a9);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a6, v13);
    type metadata accessor for ScheduleOccurrenceEditModel();
    swift_allocObject();
    uint64_t v23 = sub_1AD8945FC(v20, v27 & 1, 1, 0, v21, v22, v28 & 1, (uint64_t)v17);

    swift_release();
    swift_release();
    sub_1AD841030((uint64_t)v30, (uint64_t)v29);
    id v24 = objc_allocWithZone((Class)type metadata accessor for ScheduleOccurrenceViewController());
    id v25 = sub_1AD8410B8(v23, BYTE4(v26) & 1, (uint64_t)v29);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a6, v13);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
    return v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1AD841744()
{
  if (!qword_1EB724D30)
  {
    sub_1AD9DFD30();
    sub_1AD837214(255, (unint64_t *)&qword_1EB724D50);
    sub_1AD84196C(&qword_1EB725B80, MEMORY[0x1E4F27FC8]);
    sub_1AD841810();
    unint64_t v0 = sub_1AD9DDA50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB724D30);
    }
  }
}

unint64_t sub_1AD841810()
{
  unint64_t result = qword_1EB724D40;
  if (!qword_1EB724D40)
  {
    sub_1AD837214(255, (unint64_t *)&qword_1EB724D50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB724D40);
  }
  return result;
}

uint64_t sub_1AD84187C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1AD8418B4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD8418EC(void **a1)
{
  sub_1AD83A670(a1, v1);
}

void sub_1AD8418F4()
{
  if (!qword_1E9A49190)
  {
    sub_1AD837214(255, (unint64_t *)&unk_1E9A4B060);
    unint64_t v0 = sub_1AD9DDAE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49190);
    }
  }
}

uint64_t sub_1AD84196C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8419B4(uint64_t a1)
{
  sub_1AD83A720(a1, v1);
}

void sub_1AD8419BC()
{
  if (!qword_1E9A491B0)
  {
    type metadata accessor for ScheduleOccurrenceEditModel();
    unint64_t v0 = sub_1AD9DDAE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A491B0);
    }
  }
}

uint64_t sub_1AD841A24(uint64_t a1, uint64_t a2)
{
  sub_1AD841AB4(0, &qword_1E9A491D0, (uint64_t)&unk_1E9A491D8, (uint64_t)&protocol descriptor for SleepScheduleProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1AD843E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1AD841AB4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = sub_1AD9DFE90();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD841B10(uint64_t a1)
{
  sub_1AD83B2F0(a1, v1);
}

unint64_t sub_1AD841B18()
{
  unint64_t result = qword_1E9A49210;
  if (!qword_1E9A49210)
  {
    sub_1AD837C1C(255, &qword_1E9A491F8, (unint64_t *)&qword_1E9A49200, (uint64_t)&qword_1E9A49208, 0x1E4FA5558);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49210);
  }
  return result;
}

void sub_1AD841B90(uint64_t a1)
{
  sub_1AD83B34C(a1, v1);
}

void sub_1AD841B98()
{
  if (!qword_1E9A49218)
  {
    sub_1AD841AB4(255, (unint64_t *)&qword_1E9A49200, (uint64_t)&qword_1E9A49208, 0x1E4FA5558, (void (*)(uint64_t, uint64_t, uint64_t))sub_1AD837214);
    unint64_t v0 = sub_1AD9DDA70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49218);
    }
  }
}

void sub_1AD841C2C(uint64_t a1)
{
  sub_1AD83B40C(a1, v1, (SEL *)&selRef_handleSignificantTimeChange);
}

void sub_1AD841C50(uint64_t a1)
{
  sub_1AD83B40C(a1, v1, (SEL *)&selRef_handleLocaleDidChange);
}

void sub_1AD841C74(uint64_t a1)
{
  sub_1AD83B468(a1, v1);
}

void sub_1AD841C7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1AD841CE0()
{
  unint64_t result = qword_1E9A4A0A0;
  if (!qword_1E9A4A0A0)
  {
    sub_1AD843E70(255, (unint64_t *)&unk_1E9A49260);
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A0A0);
  }
  return result;
}

void sub_1AD841D2C(void *a1, uint64_t a2)
{
  sub_1AD83B4BC(a1, a2, v2);
}

unint64_t sub_1AD841D34()
{
  unint64_t result = qword_1E9A4A0B0;
  if (!qword_1E9A4A0B0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A0B0);
  }
  return result;
}

void sub_1AD841D8C(void **a1)
{
  sub_1AD83A828(a1, v1);
}

unint64_t sub_1AD841D94()
{
  unint64_t result = qword_1E9A4B030;
  if (!qword_1E9A4B030)
  {
    sub_1AD837C1C(255, (unint64_t *)&qword_1EB725060, (unint64_t *)&qword_1EB7250A0, (uint64_t)&qword_1EB725090, 0x1E4FA5540);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B030);
  }
  return result;
}

void sub_1AD841E0C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (v1)
  {
    id v2 = v1;
    sub_1AD9DD680();

    if (v4)
    {
      if ((v3 != 0xD000000000000029 || v4 != 0x80000001AD9EF600)
        && (sub_1AD9E02D0() & 1) == 0
        && (v3 != 0xD000000000000025 || v4 != 0x80000001AD9EF690))
      {
        sub_1AD9E02D0();
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1AD841F1C(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for ScheduleOccurrenceDayPickerTableViewCell();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model);
    unint64_t v6 = *(char **)(v4 + OBJC_IVAR____TtC13SleepHealthUI40ScheduleOccurrenceDayPickerTableViewCell_picker);
    swift_beginAccess();
    uint64_t v7 = *(void *)(v5 + 56);
    unint64_t v8 = *(void **)(v5 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    id v9 = a1;
    sub_1AD9ADE9C(v7, (uint64_t)objc_msgSend(v8, sel_weekdays));
    *(void *)&v6[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleDayPicker_alertPresenter + 8] = &off_1F046AB68;
    swift_unknownObjectWeakAssign();
    objc_msgSend(v6, sel_addTarget_action_forControlEvents_, v2, sel_scheduleDayPickerDidChange_, 4096);

    return;
  }
  type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
  uint64_t v10 = swift_dynamicCastClass();
  if (v10)
  {
    size_t v11 = (void *)v10;
    uint64_t v12 = *(void **)(*(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model)
                   + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    id v13 = a1;
    id v14 = objc_msgSend(v12, sel_alarmConfiguration);
    objc_msgSend(v14, sel_mutableCopy);

    sub_1AD9DFF20();
    swift_unknownObjectRelease();
    sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
    swift_dynamicCast();
    id v15 = v29[0];
    id v16 = objc_msgSend(v29[0], sel_isEnabled);
LABEL_7:
    id v20 = v16;

    objc_msgSend(v11, sel_setOn_animated_, v20, 1);
    objc_msgSend(v11, sel_setDelegate_, v2);

    return;
  }
  type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  uint64_t v17 = swift_dynamicCastClass();
  if (v17)
  {
    size_t v11 = (void *)v17;
    id v18 = *(void **)(*(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model)
                   + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    id v13 = a1;
    id v19 = objc_msgSend(v18, sel_alarmConfiguration);
    objc_msgSend(v19, sel_mutableCopy);

    sub_1AD9DFF20();
    swift_unknownObjectRelease();
    sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
    swift_dynamicCast();
    id v15 = v29[0];
    id v16 = objc_msgSend(v29[0], sel_allowsSnooze);
    goto LABEL_7;
  }
  type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  uint64_t v21 = swift_dynamicCastClass();
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model);
    id v24 = a1;
    sub_1AD921068(v23);
    uint64_t v25 = v22 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
    swift_beginAccess();
    *(void *)(v25 + 8) = &protocol witness table for ScheduleOccurrenceViewController;
    swift_unknownObjectWeakAssign();
  }
  else
  {
    id v33 = a1;
    sub_1AD837214(0, (unint64_t *)&unk_1E9A49700);
    sub_1AD843E70(0, (unint64_t *)&qword_1E9A4AFD0);
    id v26 = a1;
    if (swift_dynamicCast())
    {
      sub_1AD843F30(&v32, (uint64_t)v29);
      uint64_t v27 = v30;
      uint64_t v28 = v31;
      __swift_project_boxed_opaque_existential_1Tm(v29, v30);
      (*(void (**)(void, uint64_t, uint64_t))(v28 + 8))(*(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model), v27, v28);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    }
  }
}

id sub_1AD842318(uint64_t a1)
{
  uint64_t v3 = sub_1AD9DCF10();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (v8)
  {
    sub_1AD8442BC(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1AD9E3080;
    *(void *)(v9 + 32) = a1;
    *(void *)(v9 + 40) = 0;
    id v10 = v8;
    MEMORY[0x1B3E68E60](v9);
    sub_1AD9DD680();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    if (v14)
    {
      if (v13 == 0xD00000000000002BLL && v14 == 0x80000001AD9EF510)
      {
        swift_bridgeObjectRelease();
        return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D30]), sel_init);
      }
      char v11 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      if (v11) {
        return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D30]), sel_init);
      }
    }
  }
  return 0;
}

double sub_1AD8424F0(uint64_t a1)
{
  uint64_t v3 = sub_1AD9DCF10();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (!v8) {
    return *MEMORY[0x1E4FB2F28];
  }
  sub_1AD8442BC(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1AD9E3080;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  id v10 = v8;
  MEMORY[0x1B3E68E60](v9);
  sub_1AD9DD680();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (!v14) {
    return *MEMORY[0x1E4FB2F28];
  }
  if (v13 == 0xD000000000000029 && v14 == 0x80000001AD9EF600)
  {
    swift_bridgeObjectRelease();
    return 0.0;
  }
  char v12 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  double result = 0.0;
  if ((v12 & 1) == 0) {
    return *MEMORY[0x1E4FB2F28];
  }
  return result;
}

double sub_1AD8426BC(uint64_t a1)
{
  uint64_t v3 = sub_1AD9DCF10();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (!v8) {
    return *MEMORY[0x1E4FB2F28];
  }
  sub_1AD8442BC(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1AD9E3080;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  id v10 = v8;
  MEMORY[0x1B3E68E60](v9);
  sub_1AD9DD680();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (!v14) {
    return *MEMORY[0x1E4FB2F28];
  }
  if (v13 == 0xD00000000000002BLL && v14 == 0x80000001AD9EF510)
  {
    swift_bridgeObjectRelease();
    return 10.0;
  }
  char v12 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  double result = 10.0;
  if ((v12 & 1) == 0) {
    return *MEMORY[0x1E4FB2F28];
  }
  return result;
}

double sub_1AD842888(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DCF10();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource;
  id v10 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (!v10) {
    return 44.0;
  }
  sub_1AD8442BC(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1AD9E3080;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = 0;
  id v12 = v10;
  MEMORY[0x1B3E68E60](v11);
  sub_1AD9DD680();

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (!v20) {
    goto LABEL_7;
  }
  if (v19 == 0xD000000000000029 && v20 == 0x80000001AD9EF600)
  {
    swift_bridgeObjectRelease();
    return 1.0;
  }
  char v14 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  double result = 1.0;
  if ((v14 & 1) == 0)
  {
LABEL_7:
    id v15 = *(void **)(v2 + v9);
    if (v15)
    {
      id v16 = v15;
      sub_1AD86B964(a1);
      uint64_t v18 = v17;

      if (v18)
      {
        swift_bridgeObjectRelease();
        if (qword_1E9A48F40 != -1) {
          swift_once();
        }
        return *(double *)&qword_1E9A4C468;
      }
    }
    return 44.0;
  }
  return result;
}

uint64_t sub_1AD842AC4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1AD841C7C(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1AD842B34(uint64_t a1, uint64_t a2, char *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  swift_getObjectType();
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EB725958);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = sub_1AD9DD530();
  os_log_type_t v10 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v9, v10))
  {
    format = a3;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v13 = sub_1AD9E04F0();
    sub_1AD838978(v13, v14, &v20);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    if (a2)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1AD9DF730();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    sub_1AD838978(v15, v17, &v20);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v9, v10, format, (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
    MEMORY[0x1B3E6D1A0](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  return a4(a1, a2);
}

uint64_t sub_1AD842D94()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1AD842DCC(char a1, char a2)
{
  sub_1AD83F080(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1AD842DD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD842E0C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, a1);
}

uint64_t method lookup function for ScheduleOccurrenceViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScheduleOccurrenceViewController);
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.isAnimating.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:shouldHighlightRowAt:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:didSelectRowAt:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:willDisplay:forRowAt:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:viewForHeaderInSection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:viewForFooterInSection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:heightForHeaderInSection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:heightForFooterInSection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:estimatedHeightForHeaderInSection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerDelegate.scheduleOccurrenceViewController(_:didModify:deleteOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerDelegate.scheduleOccurrenceViewController(_:didFinishByDeleting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerDelegate.scheduleOccurrenceViewControllerDidCancel(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

void type metadata accessor for HKSPProvenanceSource(uint64_t a1)
{
}

void type metadata accessor for HKTimePeriodStringFormatOptions(uint64_t a1)
{
}

void type metadata accessor for HKSPSleepLockScreenState(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TimeOfDay(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimeOfDay(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for HKDayIndexRange(uint64_t a1)
{
}

void type metadata accessor for BSDayPeriod(uint64_t a1)
{
}

void type metadata accessor for HKSPDay(uint64_t a1)
{
}

void type metadata accessor for HKSPWeekdays(uint64_t a1)
{
}

void type metadata accessor for HKSPSleepWidgetState(uint64_t a1)
{
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for Weight(uint64_t a1)
{
}

void type metadata accessor for TraitKey(uint64_t a1)
{
}

void type metadata accessor for FeatureKey(uint64_t a1)
{
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

void type metadata accessor for HKError(uint64_t a1)
{
}

uint64_t sub_1AD843468()
{
  return sub_1AD84196C(&qword_1E9A49590, type metadata accessor for HKError);
}

uint64_t sub_1AD8434B0()
{
  return sub_1AD84196C(&qword_1E9A49598, type metadata accessor for HKError);
}

uint64_t sub_1AD8434F8()
{
  return sub_1AD84196C(&qword_1E9A495A0, type metadata accessor for AttributeName);
}

uint64_t sub_1AD843540()
{
  return sub_1AD84196C(&qword_1E9A495A8, type metadata accessor for AttributeName);
}

uint64_t sub_1AD843588()
{
  return sub_1AD84196C(&qword_1E9A495B0, type metadata accessor for FeatureKey);
}

uint64_t sub_1AD8435D0()
{
  return sub_1AD84196C(&qword_1E9A495B8, type metadata accessor for FeatureKey);
}

uint64_t sub_1AD843618()
{
  return sub_1AD84196C(&qword_1E9A495C0, type metadata accessor for TraitKey);
}

uint64_t sub_1AD843660()
{
  return sub_1AD84196C(&qword_1E9A495C8, type metadata accessor for TraitKey);
}

uint64_t sub_1AD8436A8()
{
  return sub_1AD84196C(&qword_1E9A495D0, type metadata accessor for Weight);
}

uint64_t sub_1AD8436F0()
{
  return sub_1AD84196C(&qword_1E9A495D8, type metadata accessor for Weight);
}

uint64_t sub_1AD843738()
{
  return sub_1AD84196C(&qword_1E9A495E0, type metadata accessor for Weight);
}

uint64_t sub_1AD843780()
{
  return sub_1AD84196C(&qword_1E9A495E8, type metadata accessor for Key);
}

uint64_t sub_1AD8437C8()
{
  return sub_1AD84196C(&qword_1E9A495F0, type metadata accessor for Key);
}

uint64_t sub_1AD843810()
{
  return sub_1AD84196C((unint64_t *)&qword_1E9A495F8, type metadata accessor for HKSPWeekdays);
}

uint64_t sub_1AD843858()
{
  return sub_1AD84196C(&qword_1E9A49600, type metadata accessor for HKSPWeekdays);
}

uint64_t sub_1AD8438A0()
{
  return sub_1AD84196C(&qword_1E9A49608, type metadata accessor for HKSPWeekdays);
}

uint64_t sub_1AD8438E8()
{
  return sub_1AD84196C(&qword_1E9A49610, type metadata accessor for HKSPWeekdays);
}

uint64_t sub_1AD843930()
{
  return sub_1AD84196C(&qword_1E9A49618, type metadata accessor for HKSPProvenanceSource);
}

uint64_t sub_1AD843978()
{
  return sub_1AD84196C(&qword_1E9A49620, type metadata accessor for HKSPProvenanceSource);
}

uint64_t sub_1AD8439C0()
{
  return sub_1AD84196C(&qword_1E9A49628, type metadata accessor for HKSPProvenanceSource);
}

uint64_t sub_1AD843A08()
{
  return sub_1AD84196C(&qword_1E9A49630, type metadata accessor for Key);
}

uint64_t sub_1AD843A50()
{
  return sub_1AD84196C(&qword_1E9A49638, type metadata accessor for TraitKey);
}

uint64_t sub_1AD843A98()
{
  return sub_1AD84196C(&qword_1E9A49640, type metadata accessor for AttributeName);
}

uint64_t sub_1AD843AE0()
{
  return sub_1AD84196C(&qword_1E9A49648, type metadata accessor for FeatureKey);
}

uint64_t sub_1AD843B28()
{
  return sub_1AD84196C(&qword_1E9A49650, type metadata accessor for HKError);
}

uint64_t sub_1AD843B70()
{
  return sub_1AD84196C(&qword_1E9A49658, type metadata accessor for HKError);
}

uint64_t sub_1AD843BB8()
{
  return sub_1AD84196C(&qword_1E9A49660, type metadata accessor for HKError);
}

uint64_t sub_1AD843C00()
{
  return sub_1AD84196C(&qword_1E9A49668, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_1AD843C70()
{
  return sub_1AD84196C(&qword_1E9A49670, type metadata accessor for Code);
}

unint64_t sub_1AD843CBC()
{
  unint64_t result = qword_1E9A49678;
  if (!qword_1E9A49678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49678);
  }
  return result;
}

uint64_t sub_1AD843D10()
{
  return sub_1AD84196C(&qword_1E9A49680, type metadata accessor for Code);
}

uint64_t sub_1AD843D58()
{
  return sub_1AD84196C((unint64_t *)&qword_1E9A49688, type metadata accessor for HKError);
}

unint64_t sub_1AD843DA0()
{
  unint64_t result = qword_1E9A496C0;
  if (!qword_1E9A496C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A496C0);
  }
  return result;
}

uint64_t sub_1AD843DF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD843E1C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD843E70(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1AD843EC0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1AD841AB4(0, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1AD843E70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1AD843F30(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *__swift_project_boxed_opaque_existential_1Tm(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1AD843FF4(uint64_t a1, uint64_t a2)
{
  sub_1AD841AB4(0, &qword_1E9A491D0, (uint64_t)&unk_1E9A491D8, (uint64_t)&protocol descriptor for SleepScheduleProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1AD843E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
}

void type metadata accessor for HKCategoryValueSleepAnalysis(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for HKFeatureIdentifier(uint64_t a1)
{
}

void type metadata accessor for UNAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for HKSPSleepLaunchURLRoute(uint64_t a1)
{
}

void type metadata accessor for CLKDeviceSizeClass(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for SleepStagesLegend.LegendRow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1AD8441D0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1AD8441F0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for TextStyle(uint64_t a1)
{
}

void type metadata accessor for CGLineCap(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void sub_1AD8442BC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD844308()
{
  return sub_1AD84196C(&qword_1E9A49790, type metadata accessor for TextStyle);
}

uint64_t sub_1AD844350()
{
  return sub_1AD84196C(&qword_1E9A49798, type metadata accessor for TextStyle);
}

uint64_t sub_1AD844398()
{
  return sub_1AD84196C(&qword_1E9A497A0, type metadata accessor for TextStyle);
}

uint64_t sub_1AD8443E0()
{
  return sub_1AD84196C(&qword_1E9A497A8, type metadata accessor for HKSPSleepLaunchURLRoute);
}

uint64_t sub_1AD844428()
{
  return sub_1AD84196C(&qword_1E9A497B0, type metadata accessor for HKSPSleepLaunchURLRoute);
}

uint64_t sub_1AD844470()
{
  return sub_1AD84196C(&qword_1E9A497B8, type metadata accessor for HKSPSleepLaunchURLRoute);
}

uint64_t sub_1AD8444B8()
{
  return sub_1AD84196C(&qword_1E9A497C0, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_1AD844500()
{
  return sub_1AD84196C(&qword_1E9A497C8, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_1AD844548()
{
  return sub_1AD84196C(&qword_1E9A497D0, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_1AD844590()
{
  return sub_1AD84196C(&qword_1E9A497D8, type metadata accessor for Name);
}

uint64_t sub_1AD8445D8()
{
  return sub_1AD84196C(&qword_1E9A497E0, type metadata accessor for Name);
}

uint64_t sub_1AD844620()
{
  return sub_1AD84196C((unint64_t *)&unk_1E9A497E8, type metadata accessor for Name);
}

uint64_t sub_1AD844668()
{
  return sub_1AD84196C(qword_1EB725400, type metadata accessor for HKCategoryValueSleepAnalysis);
}

uint64_t sub_1AD8446B0()
{
  return sub_1AD84196C(&qword_1E9A497F8, type metadata accessor for CLKDeviceSizeClass);
}

uint64_t sub_1AD844728()
{
  sub_1AD9DEE70();
  uint64_t v0 = sub_1AD9DEEF0();
  uint64_t result = swift_release();
  qword_1EB7253C8 = v0;
  return result;
}

id sub_1AD844768(uint64_t a1)
{
  return sub_1AD8489A0(a1, (uint64_t)&unk_1F0469A18, &qword_1E9A49A20);
}

id sub_1AD844780(uint64_t a1)
{
  return sub_1AD8489A0(a1, (uint64_t)&unk_1F0469A68, &qword_1E9A49A28);
}

id sub_1AD844798(uint64_t a1)
{
  return sub_1AD8489A0(a1, (uint64_t)&unk_1F0469AB8, &qword_1E9A49A30);
}

uint64_t SleepStagesDiagram.Options.rawValue.getter()
{
  return *(void *)v0;
}

void static SleepStagesDiagram.Options.useCompactSize.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static SleepStagesDiagram.Options.hideYAxisSupplementaryLabels.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static SleepStagesDiagram.Options.hideAllYAxisLabels.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static SleepStagesDiagram.Options.useGrayScale.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static SleepStagesDiagram.Options.useSmallXAxisLabels.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static SleepStagesDiagram.Options.hideXAxisTicks.getter(void *a1@<X8>)
{
  *a1 = 128;
}

void static SleepStagesDiagram.Options.showDateRange.getter(void *a1@<X8>)
{
  *a1 = 256;
}

void static SleepStagesDiagram.Options.shouldAnimate.getter(void *a1@<X8>)
{
  *a1 = 512;
}

uint64_t SleepStagesDiagram.init(sleepDayModel:sleepStagesModel:options:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a2;
  type metadata accessor for SleepDayModel(0);
  sub_1AD844CF8(&qword_1EB725860, (void (*)(uint64_t))type metadata accessor for SleepDayModel);
  *a3 = sub_1AD9DDF30();
  a3[1] = v6;
  uint64_t v7 = type metadata accessor for SleepStagesDiagram(0);
  uint64_t result = sub_1AD853C78(a1, (uint64_t)a3 + *(int *)(v7 + 20), type metadata accessor for SleepStagesModel);
  *(uint64_t *)((char *)a3 + *(int *)(v7 + 24)) = v5;
  return result;
}

uint64_t type metadata accessor for SleepStagesDiagram(uint64_t a1)
{
  return sub_1AD8372AC(a1, qword_1EB724D80);
}

uint64_t SleepStagesDiagram.body.getter()
{
  sub_1AD8449C4();
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD844D40(v0);
  uint64_t v5 = type metadata accessor for SleepStagesDiagram(0);
  sub_1AD845B24((*(void *)(v0 + *(int *)(v5 + 24)) & 4) != 0);
  return sub_1AD847280((uint64_t)v4, (uint64_t (*)(void))sub_1AD8449C4);
}

void sub_1AD8449C4()
{
  if (!qword_1EB725AE0)
  {
    sub_1AD844C00(255, &qword_1EB725AA8, (uint64_t (*)(uint64_t))sub_1AD844A54, (uint64_t)&type metadata for GridView, MEMORY[0x1E4F3D750]);
    unint64_t v0 = sub_1AD9DEF30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725AE0);
    }
  }
}

void sub_1AD844A54()
{
  if (!qword_1EB725AF0)
  {
    sub_1AD844AE8(255);
    sub_1AD844CF8(&qword_1EB725B18, sub_1AD844AE8);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725AF0);
    }
  }
}

void sub_1AD844AE8(uint64_t a1)
{
}

void sub_1AD844B1C(uint64_t a1)
{
}

uint64_t type metadata accessor for Somnogram(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1EB7258E8);
}

void sub_1AD844B70()
{
  if (!qword_1EB725A70)
  {
    sub_1AD844C00(255, &qword_1EB725A68, (uint64_t (*)(uint64_t))sub_1AD844C6C, MEMORY[0x1E4F3CE30], MEMORY[0x1E4F3CC10]);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725A70);
    }
  }
}

void sub_1AD844C00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_1AD844C6C()
{
  if (!qword_1EB725A60)
  {
    sub_1AD861C44(255, &qword_1EB725A30, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725A60);
    }
  }
}

uint64_t sub_1AD844CF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD844D40(uint64_t a1)
{
  sub_1AD844C00(0, &qword_1EB725A80, (uint64_t (*)(uint64_t))sub_1AD844A54, (uint64_t)&type metadata for GridView, MEMORY[0x1E4F3D748]);
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v5 = (uint64_t *)((char *)&v17 - v4);
  sub_1AD844A54();
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + *(int *)(type metadata accessor for SleepStagesDiagram(0) + 20));
  swift_bridgeObjectRetain();
  double v11 = sub_1AD903074(2u, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  double v12 = sub_1AD903074(3u, v10);
  swift_bridgeObjectRelease();
  double v13 = v11 + v12;
  swift_bridgeObjectRetain();
  double v14 = sub_1AD903074(1u, v10);
  swift_bridgeObjectRelease();
  if (v13 + v14 <= 0.0)
  {
    *uint64_t v5 = 4;
    swift_storeEnumTagMultiPayload();
    sub_1AD844CF8(&qword_1EB725AE8, (void (*)(uint64_t))sub_1AD844A54);
    sub_1AD857FC4();
    return sub_1AD9DE470();
  }
  else
  {
    *(void *)uint64_t v9 = sub_1AD9DE340();
    *((void *)v9 + 1) = 0;
    v9[16] = 0;
    sub_1AD85D78C(0, &qword_1EB725A18, sub_1AD844AE8);
    sub_1AD845044(a1, (uint64_t)&v9[*(int *)(v15 + 44)]);
    sub_1AD85CF24((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(void))sub_1AD844A54);
    swift_storeEnumTagMultiPayload();
    sub_1AD844CF8(&qword_1EB725AE8, (void (*)(uint64_t))sub_1AD844A54);
    sub_1AD857FC4();
    sub_1AD9DE470();
    return sub_1AD847280((uint64_t)v9, (uint64_t (*)(void))sub_1AD844A54);
  }
}

uint64_t sub_1AD845044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD846470(0, (unint64_t *)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)&v68 - v7;
  sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], v4);
  MEMORY[0x1F4188790](v9 - 8, v10);
  double v12 = (char *)&v68 - v11;
  uint64_t v13 = type metadata accessor for SleepStagesModel(0);
  MEMORY[0x1F4188790](v13 - 8, v14);
  unint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Somnogram(0);
  uint64_t v19 = MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v22);
  id v24 = (char *)&v68 - v23;
  uint64_t v25 = type metadata accessor for SleepStagesDiagram(0);
  sub_1AD85CF24(a1 + *(int *)(v25 + 20), (uint64_t)v16, type metadata accessor for SleepStagesModel);
  uint64_t v26 = a1 + *(int *)(v25 + 24);
  v99[0] = *(void *)v26;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1AD845828((uint64_t)v16, v99, KeyPath, 0, (uint64_t)v24);
  if ((*(unsigned char *)(v26 + 1) & 1) == 0) {
    goto LABEL_4;
  }
  swift_retain();
  sub_1AD943984((uint64_t)v12);
  swift_release();
  uint64_t v28 = sub_1AD9DC7C0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v12, 1, v28) == 1)
  {
    sub_1AD862084((uint64_t)v12, (uint64_t)&qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
LABEL_4:
    sub_1AD8622B0(&v79);
    sub_1AD853C78((uint64_t)&v79, (uint64_t)v99, (uint64_t (*)(void))sub_1AD844B70);
    goto LABEL_14;
  }
  uint64_t v70 = a2;
  sub_1AD862084((uint64_t)v12, (uint64_t)&qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
  swift_retain();
  uint64_t v29 = sub_1AD945184();
  uint64_t v31 = v30;
  swift_release();
  v99[0] = v29;
  v99[1] = v31;
  sub_1AD85F688();
  sub_1AD9DFEE0();
  uint64_t v71 = v32;
  swift_bridgeObjectRelease();
  if (qword_1E9A490F8 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_1AD9DE890();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v8, 1, 1, v33);
  sub_1AD9DE8D0();
  sub_1AD862084((uint64_t)v8, (uint64_t)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
  uint64_t v34 = sub_1AD9DEAB0();
  uint64_t v36 = v35;
  char v38 = v37;
  swift_release();
  char v39 = v38 & 1;
  uint64_t v40 = sub_1AD9DEAC0();
  uint64_t v42 = v41;
  LODWORD(v69) = v43;
  sub_1AD861548(v34, v36, v39);
  swift_bridgeObjectRelease();
  if (qword_1E9A49100 != -1) {
    swift_once();
  }
  char v44 = v69 & 1;
  uint64_t v45 = sub_1AD9DEA70();
  uint64_t v68 = v46;
  uint64_t v69 = v45;
  char v48 = v47;
  uint64_t v50 = v49;
  sub_1AD861548(v40, v42, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v51 = sub_1AD9DE790();
  if (qword_1E9A48D78 != -1) {
    swift_once();
  }
  sub_1AD9DDCC0();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  char v60 = sub_1AD9DE7A0();
  if (qword_1E9A48D80 != -1) {
    swift_once();
  }
  sub_1AD9DDCC0();
  char v76 = v48 & 1;
  char v75 = 0;
  char v72 = 0;
  *(_DWORD *)uint64_t v81 = *(_DWORD *)v78;
  *(_DWORD *)&v81[3] = *(_DWORD *)&v78[3];
  *(_DWORD *)uint64_t v84 = *(_DWORD *)v77;
  *(_DWORD *)&v84[3] = *(_DWORD *)&v77[3];
  *(_DWORD *)&v90[3] = *(_DWORD *)&v74[3];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v74;
  *(_DWORD *)&v92[3] = *(_DWORD *)&v73[3];
  *(_DWORD *)v92 = *(_DWORD *)v73;
  *(void *)&long long v79 = v69;
  *((void *)&v79 + 1) = v68;
  char v80 = v48 & 1;
  uint64_t v82 = v50;
  char v83 = v51;
  uint64_t v85 = v53;
  uint64_t v86 = v55;
  uint64_t v87 = v57;
  uint64_t v88 = v59;
  char v89 = 0;
  char v91 = v60;
  uint64_t v93 = v61;
  uint64_t v94 = v62;
  uint64_t v95 = v63;
  uint64_t v96 = v64;
  char v97 = 0;
  __int16 v98 = 256;
  nullsub_1(&v79);
  sub_1AD853C78((uint64_t)&v79, (uint64_t)v99, (uint64_t (*)(void))sub_1AD844B70);
  a2 = v70;
LABEL_14:
  sub_1AD85CF24((uint64_t)v24, (uint64_t)v21, type metadata accessor for Somnogram);
  sub_1AD853C78((uint64_t)v99, (uint64_t)v77, (uint64_t (*)(void))sub_1AD844B70);
  sub_1AD85CF24((uint64_t)v21, a2, type metadata accessor for Somnogram);
  sub_1AD844B1C(0);
  uint64_t v66 = a2 + *(int *)(v65 + 48);
  sub_1AD853C78((uint64_t)v77, (uint64_t)v78, (uint64_t (*)(void))sub_1AD844B70);
  sub_1AD853C78((uint64_t)v78, v66, (uint64_t (*)(void))sub_1AD844B70);
  sub_1AD862310((uint64_t)v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_1AD8622CC);
  sub_1AD847280((uint64_t)v24, type metadata accessor for Somnogram);
  sub_1AD853C78((uint64_t)v77, (uint64_t)&v79, (uint64_t (*)(void))sub_1AD844B70);
  sub_1AD862310((uint64_t)&v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_1AD862384);
  return sub_1AD847280((uint64_t)v21, type metadata accessor for Somnogram);
}

uint64_t sub_1AD845828@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v32 = a4;
  uint64_t v31 = a3;
  uint64_t v8 = sub_1AD9DCD10();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  double v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a2;
  sub_1AD853C78(a1, a5, type metadata accessor for SleepStagesModel);
  uint64_t v14 = (int *)type metadata accessor for Somnogram(0);
  *(void *)(a5 + v14[5]) = v13;
  sub_1AD9DCCF0();
  char v15 = HKSPIsRemoveSpacesForTimeFormatEnabled();
  unint64_t v16 = self;
  uint64_t v17 = (void *)sub_1AD9DF6D0();
  uint64_t v18 = (void *)sub_1AD9DCCD0();
  id v19 = objc_msgSend(v16, sel_dateFormatFromTemplate_options_locale_, v17, 0, v18);

  if (v19)
  {
    uint64_t v20 = sub_1AD9DF710();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v22 = 0xE500000000000000;
    uint64_t v20 = 0x616D6D3A68;
  }
  uint64_t v23 = v14[6];
  id v24 = sub_1AD99B1D4(v20, v22, (uint64_t)v12, v15);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  *(void *)(a5 + v23) = v24;
  uint64_t v25 = (uint64_t *)(a5 + v14[7]);
  uint64_t *v25 = swift_getKeyPath();
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
  sub_1AD846470(0, &qword_1EB725A10, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648]);
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = (uint64_t *)(a5 + v14[8]);
  *uint64_t v27 = swift_getKeyPath();
  sub_1AD846470(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], v26);
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = (uint64_t *)(a5 + v14[9]);
  *uint64_t v28 = swift_getKeyPath();
  sub_1AD846470(0, &qword_1EB725270, MEMORY[0x1E4F3E0D8], v26);
  uint64_t result = swift_storeEnumTagMultiPayload();
  uint64_t v30 = a5 + v14[10];
  *(void *)uint64_t v30 = v31;
  *(unsigned char *)(v30 + 8) = v32 & 1;
  return result;
}

uint64_t sub_1AD845B24(char a1)
{
  uint64_t v2 = v1;
  sub_1AD844C00(0, &qword_1EB725A58, (uint64_t (*)(uint64_t))sub_1AD8449C4, MEMORY[0x1E4F3CE48], MEMORY[0x1E4F3CC10]);
  uint64_t v5 = v4;
  uint64_t v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  double v12 = (char *)v28 - v11;
  sub_1AD8620E4(0, &qword_1EB725A78, MEMORY[0x1E4F3D748]);
  MEMORY[0x1F4188790](v13, v14);
  unint64_t v16 = (char *)v28 - v15;
  sub_1AD8449C4();
  MEMORY[0x1F4188790](v17, v18);
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = (char *)v28 - v20;
  if (a1)
  {
    sub_1AD85CF24(v2, (uint64_t)v28 - v20, (uint64_t (*)(void))sub_1AD8449C4);
    sub_1AD85CF24((uint64_t)v21, (uint64_t)v16, (uint64_t (*)(void))sub_1AD8449C4);
    swift_storeEnumTagMultiPayload();
    sub_1AD858840(&qword_1EB725AD8, (void (*)(uint64_t))sub_1AD8449C4, (void (*)(void))sub_1AD857EE4);
    sub_1AD858018();
    sub_1AD9DE470();
    return sub_1AD847280((uint64_t)v21, (uint64_t (*)(void))sub_1AD8449C4);
  }
  else
  {
    sub_1AD9DF320();
    sub_1AD9DE040();
    sub_1AD85CF24(v2, (uint64_t)v9, (uint64_t (*)(void))sub_1AD8449C4);
    uint64_t v23 = &v9[*(int *)(v5 + 36)];
    long long v24 = v28[5];
    *((_OWORD *)v23 + 4) = v28[4];
    *((_OWORD *)v23 + 5) = v24;
    *((_OWORD *)v23 + 6) = v28[6];
    long long v25 = v28[1];
    *(_OWORD *)uint64_t v23 = v28[0];
    *((_OWORD *)v23 + 1) = v25;
    long long v26 = v28[3];
    *((_OWORD *)v23 + 2) = v28[2];
    *((_OWORD *)v23 + 3) = v26;
    uint64_t v27 = MEMORY[0x1E4F3CE48];
    sub_1AD86218C((uint64_t)v9, (uint64_t)v12, &qword_1EB725A58, (uint64_t (*)(uint64_t))sub_1AD8449C4, MEMORY[0x1E4F3CE48]);
    sub_1AD862210((uint64_t)v12, (uint64_t)v16);
    swift_storeEnumTagMultiPayload();
    sub_1AD858840(&qword_1EB725AD8, (void (*)(uint64_t))sub_1AD8449C4, (void (*)(void))sub_1AD857EE4);
    sub_1AD858018();
    sub_1AD9DE470();
    return sub_1AD862FD8((uint64_t)v12, &qword_1EB725A58, (uint64_t (*)(uint64_t))sub_1AD8449C4, v27);
  }
}

uint64_t sub_1AD845F14(uint64_t a1)
{
  sub_1AD8449C4();
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD844D40(v1);
  sub_1AD845B24((*(void *)(v1 + *(int *)(a1 + 24)) & 4) != 0);
  return sub_1AD847280((uint64_t)v6, (uint64_t (*)(void))sub_1AD8449C4);
}

uint64_t OneDaySleepStagesDiagram.init(sleepDayModel:sleepStagesModel:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  type metadata accessor for SleepDayModel(0);
  sub_1AD844CF8(&qword_1EB725860, (void (*)(uint64_t))type metadata accessor for SleepDayModel);
  *a2 = sub_1AD9DDF30();
  a2[1] = v4;
  uint64_t v5 = type metadata accessor for OneDaySleepStagesDiagram(0);
  return sub_1AD853C78(a1, (uint64_t)a2 + *(int *)(v5 + 20), type metadata accessor for SleepStagesModel);
}

uint64_t type metadata accessor for OneDaySleepStagesDiagram(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A49AE8);
}

BOOL sub_1AD846098()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OneDaySleepStagesDiagram(0);
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(v1 + 8) + 32) + 16);
  sub_1AD85CF24(v1, (uint64_t)v5, type metadata accessor for OneDaySleepStagesDiagram);
  if (v6)
  {
    uint64_t v7 = *(void *)&v5[*(int *)(v2 + 20)];
    swift_bridgeObjectRetain();
    double v8 = sub_1AD903074(2u, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    double v9 = sub_1AD903074(3u, v7);
    swift_bridgeObjectRelease();
    double v10 = v8 + v9;
    swift_bridgeObjectRetain();
    double v11 = sub_1AD903074(1u, v7);
    swift_bridgeObjectRelease();
    BOOL v12 = v10 + v11 > 0.0;
  }
  else
  {
    BOOL v12 = 0;
  }
  sub_1AD847280((uint64_t)v5, type metadata accessor for OneDaySleepStagesDiagram);
  return v12;
}

uint64_t OneDaySleepStagesDiagram.body.getter()
{
  uint64_t v1 = sub_1AD9DE610();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD84638C();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v6, v8);
  double v10 = (BOOL *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *double v10 = sub_1AD846098();
  sub_1AD846808(v0, (uint64_t)&v10[*(int *)(v7 + 52)]);
  sub_1AD9DE600();
  sub_1AD844CF8(&qword_1E9A49AA8, (void (*)(uint64_t))sub_1AD84638C);
  sub_1AD9DED00();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return sub_1AD847280((uint64_t)v10, (uint64_t (*)(void))sub_1AD84638C);
}

void sub_1AD84638C()
{
  if (!qword_1E9A49A40)
  {
    sub_1AD84643C(255);
    sub_1AD844CF8(&qword_1E9A49AA0, sub_1AD84643C);
    unint64_t v0 = type metadata accessor for OptionalContentGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49A40);
    }
  }
}

void sub_1AD84643C(uint64_t a1)
{
}

void sub_1AD846470(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD8464D4()
{
  if (!qword_1E9A49A50)
  {
    sub_1AD846564();
    sub_1AD9DF230();
    sub_1AD846754();
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1E9A49A50);
    }
  }
}

void sub_1AD846564()
{
  if (!qword_1E9A49A58)
  {
    sub_1AD8465F8();
    sub_1AD844CF8(&qword_1E9A49A88, (void (*)(uint64_t))sub_1AD8465F8);
    unint64_t v0 = type metadata accessor for DiagramHeader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49A58);
    }
  }
}

void sub_1AD8465F8()
{
  if (!qword_1E9A49A60)
  {
    sub_1AD84668C(255);
    sub_1AD844CF8(&qword_1E9A49A80, sub_1AD84668C);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49A60);
    }
  }
}

void sub_1AD84668C(uint64_t a1)
{
}

void sub_1AD8466C0()
{
  if (!qword_1E9A49A70)
  {
    sub_1AD861C44(255, (unint64_t *)&qword_1E9A49A78, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3CE30], MEMORY[0x1E4F3CC10]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1E9A49A70);
    }
  }
}

void sub_1AD846754()
{
  if (!qword_1E9A49A90)
  {
    type metadata accessor for SleepStagesChart(255);
    sub_1AD844CF8(&qword_1E9A49A98, (void (*)(uint64_t))type metadata accessor for SleepStagesChart);
    unint64_t v0 = type metadata accessor for DiagramHeader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49A90);
    }
  }
}

uint64_t type metadata accessor for SleepStagesChart(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A49AF8);
}

uint64_t sub_1AD846808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v93 = a2;
  uint64_t v3 = type metadata accessor for SleepStagesModel(0);
  uint64_t v90 = *(char **)(v3 - 8);
  char v91 = (int *)v3;
  MEMORY[0x1F4188790](v3, v4);
  v92 = (void (*)())((char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1AD846470(0, &qword_1E9A49AB0, type metadata accessor for SleepStagesModel, MEMORY[0x1E4FBB718]);
  uint64_t v8 = MEMORY[0x1F4188790](v6 - 8, v7);
  double v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v89 - v12;
  sub_1AD846754();
  uint64_t v15 = v14;
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v97 = (uint64_t)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v17, v19);
  uint64_t v22 = (char *)&v89 - v21;
  MEMORY[0x1F4188790](v20, v23);
  uint64_t v96 = (uint64_t)&v89 - v24;
  uint64_t v25 = sub_1AD9DF230();
  uint64_t v94 = *(void *)(v25 - 8);
  uint64_t v95 = v25;
  uint64_t v27 = MEMORY[0x1F4188790](v25, v26);
  v99 = (char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27, v29);
  __int16 v98 = (char *)&v89 - v30;
  if (qword_1E9A48F50 != -1) {
    swift_once();
  }
  uint64_t v31 = (void *)qword_1E9A4C618;
  uint64_t KeyPath = swift_getKeyPath();
  id v33 = v31;
  uint64_t v34 = sub_1AD9DCA70();
  uint64_t v36 = v35;

  swift_bridgeObjectRelease();
  uint64_t v37 = sub_1AD9DE340();
  sub_1AD8472E0(a1, &v121);
  uint64_t v38 = *((void *)&v122 + 1);
  char v39 = v123[0];
  char v40 = BYTE1(v123[0]);
  uint64_t v41 = *(void *)&v123[2];
  char v42 = BYTE8(v123[2]);
  uint64_t v43 = *((void *)&v125 + 1);
  char v44 = v126;
  long long v45 = v121;
  long long v46 = *(_OWORD *)((char *)v123 + 8);
  long long v47 = v124;
  char v120 = 1;
  char v119 = v122;
  char v118 = BYTE8(v123[1]);
  char v117 = v125;
  *(void *)&long long v121 = KeyPath;
  BYTE8(v121) = 0;
  *(void *)&long long v122 = v34;
  *((void *)&v122 + 1) = v36;
  v123[0] = (unint64_t)v37;
  LOBYTE(v123[1]) = 1;
  *(_OWORD *)((char *)&v123[1] + 8) = v45;
  BYTE8(v123[2]) = v119;
  *(void *)&long long v124 = v38;
  BYTE8(v124) = v39;
  BYTE9(v124) = v40;
  long long v125 = v46;
  LOBYTE(v126) = v118;
  *((void *)&v126 + 1) = v41;
  LOBYTE(v127[0]) = v42;
  BYTE1(v127[0]) = BYTE9(v123[2]);
  *(_OWORD *)((char *)v127 + 8) = v47;
  BYTE8(v127[1]) = v117;
  *(void *)&v127[2] = v43;
  BYTE8(v127[2]) = v44;
  BYTE9(v127[2]) = BYTE1(v126);
  sub_1AD9DF220();
  char v48 = (void *)qword_1E9A4C618;
  *(void *)uint64_t v22 = swift_getKeyPath();
  v22[8] = 0;
  id v49 = v48;
  uint64_t v50 = sub_1AD9DCA70();
  uint64_t v52 = v51;

  swift_bridgeObjectRelease();
  *((void *)v22 + 2) = v50;
  *((void *)v22 + 3) = v52;
  uint64_t v53 = (uint64_t *)&v22[*(int *)(v15 + 40)];
  uint64_t v54 = type metadata accessor for OneDaySleepStagesDiagram(0);
  sub_1AD85CF24(a1 + *(int *)(v54 + 20), (uint64_t)v13, type metadata accessor for SleepStagesModel);
  uint64_t v55 = (uint64_t)v90;
  uint64_t v56 = v91;
  (*((void (**)(char *, void, uint64_t, int *))v90 + 7))(v13, 0, 1, v91);
  type metadata accessor for SleepDayModel(0);
  sub_1AD844CF8(&qword_1EB725860, (void (*)(uint64_t))type metadata accessor for SleepDayModel);
  swift_retain_n();
  *uint64_t v53 = sub_1AD9DDF30();
  v53[1] = v57;
  sub_1AD8614D4((uint64_t)v13, (uint64_t)v10, (uint64_t)&qword_1E9A49AB0, (uint64_t)type metadata accessor for SleepStagesModel, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD846470);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v55 + 48))(v10, 1, v56) == 1)
  {
    uint64_t v90 = v10;
    uint64_t v58 = MEMORY[0x1E4FBC860];
    uint64_t v59 = v92;
    *(void *)v92 = MEMORY[0x1E4FBC860];
    char v60 = (char *)v59 + v56[5];
    uint64_t v61 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v60, 1, 1, v61);
    sub_1AD853284(v58, type metadata accessor for SleepStageSegment, (char *)sub_1AD861E7C, (void (*)(char *))sub_1AD861E94, (uint64_t)v59 + v56[6]);
    double v62 = sub_1AD853A04(v58, type metadata accessor for SleepStageSegment, (void (*)(uint64_t, char *))sub_1AD861E7C, (void (*)(char *))sub_1AD861E94);
    swift_release();
    *(double *)((char *)v59 + v56[7]) = v62;
    uint64_t v63 = MEMORY[0x1E4FBB718];
    sub_1AD862084((uint64_t)v13, (uint64_t)&qword_1E9A49AB0, (uint64_t)type metadata accessor for SleepStagesModel, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
    sub_1AD862084((uint64_t)v90, (uint64_t)&qword_1E9A49AB0, (uint64_t)type metadata accessor for SleepStagesModel, v63, (uint64_t (*)(void))sub_1AD846470);
  }
  else
  {
    swift_release();
    sub_1AD862084((uint64_t)v13, (uint64_t)&qword_1E9A49AB0, (uint64_t)type metadata accessor for SleepStagesModel, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
    uint64_t v59 = v92;
    sub_1AD853C78((uint64_t)v10, (uint64_t)v92, type metadata accessor for SleepStagesModel);
  }
  uint64_t v64 = (int *)type metadata accessor for SleepStagesChart(0);
  sub_1AD853C78((uint64_t)v59, (uint64_t)v53 + v64[5], type metadata accessor for SleepStagesModel);
  *((unsigned char *)v53 + v64[6]) = 0;
  *(uint64_t *)((char *)v53 + v64[7]) = 0;
  uint64_t v65 = v96;
  sub_1AD853C78((uint64_t)v22, v96, (uint64_t (*)(void))sub_1AD846754);
  long long v110 = v126;
  long long v111 = v127[0];
  v112[0] = v127[1];
  *(_OWORD *)((char *)v112 + 10) = *(_OWORD *)((char *)&v127[1] + 10);
  long long v107 = v123[2];
  long long v108 = v124;
  long long v109 = v125;
  long long v103 = v121;
  long long v104 = v122;
  long long v105 = v123[0];
  long long v106 = v123[1];
  char v102 = 0;
  uint64_t v67 = v94;
  uint64_t v66 = v95;
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  v68(v99, v98, v95);
  char v101 = 0;
  v92 = sub_1AD846754;
  sub_1AD85CF24(v65, v97, (uint64_t (*)(void))sub_1AD846754);
  v113[7] = v110;
  v113[8] = v111;
  long long v69 = v110;
  v114[0] = v112[0];
  *(_OWORD *)((char *)v114 + 10) = *(_OWORD *)((char *)v112 + 10);
  long long v70 = v107;
  long long v71 = v108;
  v113[4] = v107;
  v113[5] = v108;
  long long v72 = v109;
  v113[6] = v109;
  long long v73 = v103;
  long long v74 = v104;
  v113[0] = v103;
  v113[1] = v104;
  long long v76 = v105;
  long long v75 = v106;
  v113[2] = v105;
  v113[3] = v106;
  long long v77 = v112[0];
  uint64_t v78 = v93;
  *(_OWORD *)(v93 + 128) = v111;
  *(_OWORD *)(v78 + 144) = v77;
  *(_OWORD *)(v78 + 154) = *(_OWORD *)((char *)v112 + 10);
  *(_OWORD *)(v78 + 64) = v70;
  *(_OWORD *)(v78 + 80) = v71;
  *(_OWORD *)(v78 + 96) = v72;
  *(_OWORD *)(v78 + 112) = v69;
  *(_OWORD *)uint64_t v78 = v73;
  *(_OWORD *)(v78 + 16) = v74;
  char v100 = 0;
  *(_OWORD *)(v78 + 32) = v76;
  *(_OWORD *)(v78 + 48) = v75;
  char v79 = v102;
  *(void *)(v78 + 176) = 0x4018000000000000;
  *(unsigned char *)(v78 + 184) = v79;
  sub_1AD8464D4();
  uint64_t v81 = v80;
  v68((char *)(v78 + v80[16]), v99, v66);
  uint64_t v82 = v78 + v81[20];
  char v83 = v101;
  *(void *)uint64_t v82 = 0x4018000000000000;
  *(unsigned char *)(v82 + 8) = v83;
  uint64_t v84 = v97;
  sub_1AD85CF24(v97, v78 + v81[24], (uint64_t (*)(void))v92);
  uint64_t v85 = v78 + v81[28];
  char v86 = v100;
  *(void *)uint64_t v85 = 0x4010000000000000;
  *(unsigned char *)(v85 + 8) = v86;
  sub_1AD861EB4((uint64_t)v113);
  sub_1AD861EB4((uint64_t)&v121);
  sub_1AD847280(v96, (uint64_t (*)(void))sub_1AD846754);
  uint64_t v87 = *(void (**)(char *, uint64_t))(v67 + 8);
  v87(v98, v66);
  sub_1AD861F9C((uint64_t)&v121);
  sub_1AD847280(v84, (uint64_t (*)(void))sub_1AD846754);
  v87(v99, v66);
  v115[7] = v110;
  v115[8] = v111;
  v116[0] = v112[0];
  *(_OWORD *)((char *)v116 + 10) = *(_OWORD *)((char *)v112 + 10);
  v115[4] = v107;
  v115[5] = v108;
  v115[6] = v109;
  v115[0] = v103;
  v115[1] = v104;
  v115[2] = v105;
  v115[3] = v106;
  return sub_1AD861F9C((uint64_t)v115);
}

uint64_t sub_1AD847280(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD8472E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v84 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD846470(0, (unint64_t *)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  char v83 = (char *)&v75 - v6;
  uint64_t v7 = sub_1AD9DE9A0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, v3);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v15 = (char *)&v75 - v14;
  uint64_t v16 = sub_1AD9DCA50();
  MEMORY[0x1F4188790](v16 - 8, v17);
  uint64_t v18 = a1 + *(int *)(type metadata accessor for OneDaySleepStagesDiagram(0) + 20);
  uint64_t v19 = type metadata accessor for SleepStagesModel(0);
  sub_1AD8614D4(v18 + *(int *)(v19 + 20), (uint64_t)v15, (uint64_t)qword_1EB725C18, (uint64_t)type metadata accessor for SleepMetricsWrapper, (uint64_t)v3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD846470);
  uint64_t v20 = type metadata accessor for SleepMetricsWrapper(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v15, 1, v20) == 1)
  {
    sub_1AD862084((uint64_t)v15, (uint64_t)qword_1EB725C18, (uint64_t)type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    uint64_t v21 = (void *)sub_1AD9DF440();
    sub_1AD847280((uint64_t)v15, type metadata accessor for SleepMetricsWrapper);
    id v22 = objc_msgSend(v21, sel_averageSleepDuration);

    if (v22)
    {
      objc_msgSend(v22, sel__value);
      double v24 = v23;

      goto LABEL_6;
    }
  }
  double v24 = 0.0;
LABEL_6:
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
  objc_msgSend(v25, sel_setAllowedUnits_, 96);
  objc_msgSend(v25, sel_setUnitsStyle_, 5);
  objc_msgSend(v25, sel_setFormattingContext_, 2);
  id v26 = objc_msgSend(v25, sel_stringFromTimeInterval_, v24);

  if (v26)
  {
    sub_1AD9DF710();
  }
  sub_1AD9DF7B0();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1AD9DEAE0();
  uint64_t v29 = v28;
  char v31 = v30;
  if (qword_1E9A490B8 != -1) {
    swift_once();
  }
  uint64_t v85 = sub_1AD9DEAB0();
  uint64_t v81 = v32;
  uint64_t v82 = v33;
  int v80 = v34 & 1;
  sub_1AD861548(v27, v29, v31 & 1);
  swift_bridgeObjectRelease();
  swift_retain();
  id v35 = sub_1AD944F60();
  uint64_t v37 = v36;
  swift_release();
  uint64_t v87 = (uint64_t)v35;
  uint64_t v88 = v37;
  unint64_t v79 = sub_1AD85F688();
  uint64_t v38 = sub_1AD9DEAF0();
  uint64_t v40 = v39;
  uint64_t v75 = v41;
  uint64_t v78 = a1;
  char v43 = v42 & 1;
  char v44 = v11;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E4F3E168], v7);
  uint64_t v45 = *MEMORY[0x1E4F3E090];
  uint64_t v46 = sub_1AD9DE890();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 104))(v83, v45, v46);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v46);
  sub_1AD9DE8F0();
  sub_1AD862084(v48, (uint64_t)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v44, v7);
  uint64_t v49 = sub_1AD9DEAB0();
  uint64_t v76 = v50;
  uint64_t v77 = v49;
  LOBYTE(v47) = v51;
  char v83 = v52;
  swift_release();
  LOBYTE(v45) = v47 & 1;
  sub_1AD861548(v38, v40, v43);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v53 = sub_1AD945184();
  uint64_t v55 = v54;
  swift_release();
  uint64_t v87 = v53;
  uint64_t v88 = v55;
  uint64_t v56 = sub_1AD9DEAF0();
  uint64_t v58 = v57;
  char v60 = v59 & 1;
  sub_1AD9DE990();
  uint64_t v61 = sub_1AD9DEAB0();
  uint64_t v63 = v62;
  LOBYTE(v48) = v64;
  uint64_t v66 = v65;
  swift_release();
  LOBYTE(v40) = v48 & 1;
  sub_1AD861548(v56, v58, v60);
  swift_bridgeObjectRelease();
  char v67 = v80;
  LOBYTE(v87) = v80;
  char v86 = v45;
  long long v69 = v84;
  uint64_t v68 = v85;
  uint64_t v71 = v81;
  uint64_t v70 = v82;
  *uint64_t v84 = v85;
  v69[1] = v71;
  *((unsigned char *)v69 + 16) = v67;
  v69[3] = v70;
  *((_WORD *)v69 + 16) = 256;
  uint64_t v72 = v76;
  uint64_t v73 = v77;
  v69[5] = v77;
  v69[6] = v72;
  *((unsigned char *)v69 + 56) = v45;
  v69[8] = v83;
  *((_WORD *)v69 + 36) = 256;
  v69[10] = v61;
  v69[11] = v63;
  *((unsigned char *)v69 + 96) = v40;
  v69[13] = v66;
  *((_WORD *)v69 + 56) = 256;
  sub_1AD861558(v68, v71, v67);
  swift_bridgeObjectRetain();
  sub_1AD861558(v73, v72, v45);
  swift_bridgeObjectRetain();
  sub_1AD861558(v61, v63, v40);
  swift_bridgeObjectRetain();
  sub_1AD861548(v61, v63, v40);
  swift_bridgeObjectRelease();
  sub_1AD861548(v73, v72, v86);
  swift_bridgeObjectRelease();
  sub_1AD861548(v85, v71, v87);
  return swift_bridgeObjectRelease();
}

uint64_t SleepStagesChart.init(sleepDayModel:sleepStagesModel:isLoading:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  int v29 = a3;
  sub_1AD846470(0, &qword_1E9A49AB0, type metadata accessor for SleepStagesModel, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v14 = *((void *)v13 - 1);
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v17 = (uint64_t *)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = *a4;
  if (!a1)
  {
    type metadata accessor for SleepDayModel(0);
    swift_allocObject();
    SleepDayModel.init(segmentModels:sleepMetrics:)(MEMORY[0x1E4FBC860], 0);
  }
  type metadata accessor for SleepDayModel(0);
  sub_1AD844CF8(&qword_1EB725860, (void (*)(uint64_t))type metadata accessor for SleepDayModel);
  swift_retain();
  *a5 = sub_1AD9DDF30();
  a5[1] = v18;
  sub_1AD8614D4(a2, (uint64_t)v12, (uint64_t)&qword_1E9A49AB0, (uint64_t)type metadata accessor for SleepStagesModel, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD846470);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13) == 1)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    *uint64_t v17 = MEMORY[0x1E4FBC860];
    uint64_t v20 = (char *)v17 + v13[5];
    uint64_t v21 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
    sub_1AD853284(v19, type metadata accessor for SleepStageSegment, (char *)sub_1AD861E7C, (void (*)(char *))sub_1AD861E94, (uint64_t)v17 + v13[6]);
    double v22 = sub_1AD853A04(v19, type metadata accessor for SleepStageSegment, (void (*)(uint64_t, char *))sub_1AD861E7C, (void (*)(char *))sub_1AD861E94);
    swift_release();
    *(double *)((char *)v17 + v13[7]) = v22;
    uint64_t v23 = MEMORY[0x1E4FBB718];
    sub_1AD862084(a2, (uint64_t)&qword_1E9A49AB0, (uint64_t)type metadata accessor for SleepStagesModel, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
    sub_1AD862084((uint64_t)v12, (uint64_t)&qword_1E9A49AB0, (uint64_t)type metadata accessor for SleepStagesModel, v23, (uint64_t (*)(void))sub_1AD846470);
  }
  else
  {
    swift_release();
    sub_1AD862084(a2, (uint64_t)&qword_1E9A49AB0, (uint64_t)type metadata accessor for SleepStagesModel, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
    sub_1AD853C78((uint64_t)v12, (uint64_t)v17, type metadata accessor for SleepStagesModel);
  }
  char v24 = v29;
  uint64_t v25 = v28;
  id v26 = (int *)type metadata accessor for SleepStagesChart(0);
  uint64_t result = sub_1AD853C78((uint64_t)v17, (uint64_t)a5 + v26[5], type metadata accessor for SleepStagesModel);
  *((unsigned char *)a5 + v26[6]) = v24 & 1;
  *(uint64_t *)((char *)a5 + v26[7]) = v25;
  return result;
}

uint64_t sub_1AD847F6C()
{
  return sub_1AD9DEC70();
}

uint64_t sub_1AD847F88()
{
  uint64_t v1 = sub_1AD9DE610();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD84638C();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (BOOL *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v10 = sub_1AD846098();
  sub_1AD846808(v0, (uint64_t)&v10[*(int *)(v7 + 52)]);
  sub_1AD9DE600();
  sub_1AD844CF8(&qword_1E9A49AA8, (void (*)(uint64_t))sub_1AD84638C);
  sub_1AD9DED00();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return sub_1AD847280((uint64_t)v10, (uint64_t (*)(void))sub_1AD84638C);
}

uint64_t SleepStagesChart.Options.rawValue.getter()
{
  return *(void *)v0;
}

SleepHealthUI::SleepStagesChart::Options __swiftcall SleepStagesChart.Options.init(rawValue:)(SleepHealthUI::SleepStagesChart::Options rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static SleepStagesChart.Options.showDateRange.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static SleepStagesChart.Options.useCompactLegend.getter(void *a1@<X8>)
{
  *a1 = 2;
}

BOOL sub_1AD848154()
{
  uint64_t v1 = type metadata accessor for SleepStagesChart(0);
  uint64_t v3 = MEMORY[0x1F4188790](v1, v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + *(int *)(v3 + 24))) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(v0 + 8) + 32) + 16);
  sub_1AD85CF24(v0, (uint64_t)v5, type metadata accessor for SleepStagesChart);
  if (v7)
  {
    uint64_t v8 = *(void *)&v5[*(int *)(v1 + 20)];
    swift_bridgeObjectRetain();
    double v9 = sub_1AD903074(2u, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    double v10 = sub_1AD903074(3u, v8);
    swift_bridgeObjectRelease();
    double v11 = v9 + v10;
    swift_bridgeObjectRetain();
    double v12 = sub_1AD903074(1u, v8);
    swift_bridgeObjectRelease();
    BOOL v6 = v11 + v12 > 0.0;
  }
  else
  {
    BOOL v6 = 0;
  }
  sub_1AD847280((uint64_t)v5, type metadata accessor for SleepStagesChart);
  return v6;
}

uint64_t SleepStagesChart.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SleepStagesChart(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4 - 8, v7);
  uint64_t v8 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1E9A48D88 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1E9A49A30;
  sub_1AD85CF24(v2, (uint64_t)&v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for SleepStagesChart);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  sub_1AD853C78((uint64_t)v8, v11 + v10, type metadata accessor for SleepStagesChart);
  sub_1AD85CF24(v2, (uint64_t)v8, type metadata accessor for SleepStagesChart);
  uint64_t v12 = swift_allocObject();
  sub_1AD853C78((uint64_t)v8, v12 + v10, type metadata accessor for SleepStagesChart);
  v19[15] = 0;
  sub_1AD9DF040();
  char v13 = v19[16];
  uint64_t v14 = v20;
  if (qword_1E9A48F88 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1E9A4C9E0;
  uint64_t v16 = qword_1E9A48F90;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1E9A4C9E8;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = sub_1AD853CE0;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = sub_1AD853F0C;
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v17;
  return swift_retain();
}

uint64_t sub_1AD848534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD844C00(0, &qword_1E9A49C18, type metadata accessor for SleepStagesDiagram, (uint64_t)&type metadata for SleepDataUnavailable, MEMORY[0x1E4F3D748]);
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (char *)v28 - v6;
  uint64_t v8 = type metadata accessor for SleepStagesModel(0);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SleepStagesDiagram(0);
  uint64_t v14 = MEMORY[0x1F4188790](v12, v13);
  uint64_t v16 = (void *)((char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v14, v17);
  uint64_t v19 = (char *)v28 - v18;
  if (sub_1AD848154())
  {
    uint64_t v20 = type metadata accessor for SleepStagesChart(0);
    sub_1AD85CF24(a1 + *(int *)(v20 + 20), (uint64_t)v11, type metadata accessor for SleepStagesModel);
    uint64_t v21 = unk_1F0469B60;
    if ((unk_1F0469B60 & ~qword_1F0469B58) == 0) {
      uint64_t v21 = 0;
    }
    uint64_t v22 = qword_1F0469B68;
    if ((qword_1F0469B68 & ~(v21 | qword_1F0469B58)) == 0) {
      uint64_t v22 = 0;
    }
    unint64_t v23 = v22 | v21 | qword_1F0469B58;
    uint64_t v24 = (v23 >> 8) & 1;
    if ((*(void *)(a1 + *(int *)(v20 + 28)) & 1) == 0) {
      LODWORD(v24) = 1;
    }
    v28[1] = a2;
    if (v24) {
      uint64_t v25 = v23;
    }
    else {
      uint64_t v25 = v23 | 0x100;
    }
    type metadata accessor for SleepDayModel(0);
    sub_1AD844CF8(&qword_1EB725860, (void (*)(uint64_t))type metadata accessor for SleepDayModel);
    swift_retain();
    *uint64_t v16 = sub_1AD9DDF30();
    v16[1] = v26;
    sub_1AD853C78((uint64_t)v11, (uint64_t)v16 + *(int *)(v12 + 20), type metadata accessor for SleepStagesModel);
    *(uint64_t *)((char *)v16 + *(int *)(v12 + 24)) = v25;
    sub_1AD853C78((uint64_t)v16, (uint64_t)v19, type metadata accessor for SleepStagesDiagram);
    sub_1AD85CF24((uint64_t)v19, (uint64_t)v7, type metadata accessor for SleepStagesDiagram);
    swift_storeEnumTagMultiPayload();
    sub_1AD844CF8(&qword_1E9A49B28, (void (*)(uint64_t))type metadata accessor for SleepStagesDiagram);
    sub_1AD8583D0();
    sub_1AD9DE470();
    return sub_1AD847280((uint64_t)v19, type metadata accessor for SleepStagesDiagram);
  }
  else
  {
    *uint64_t v7 = *(unsigned char *)(a1 + *(int *)(type metadata accessor for SleepStagesChart(0) + 24));
    swift_storeEnumTagMultiPayload();
    sub_1AD844CF8(&qword_1E9A49B28, (void (*)(uint64_t))type metadata accessor for SleepStagesDiagram);
    sub_1AD8583D0();
    return sub_1AD9DE470();
  }
}

uint64_t sub_1AD84890C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SleepStagesChart(0);
  sub_1AD85CF24(a1 + *(int *)(v4 + 20), a2, type metadata accessor for SleepStagesModel);
  LOBYTE(a1) = *(unsigned char *)(a1 + *(int *)(v4 + 28));
  uint64_t result = type metadata accessor for SleepStagesLegend(0);
  *(unsigned char *)(a2 + *(int *)(result + 20)) = (a1 & 2) != 0;
  return result;
}

id sub_1AD848988(uint64_t a1)
{
  return sub_1AD8489A0(a1, (uint64_t)&unk_1F0469B70, &qword_1E9A49A38);
}

id sub_1AD8489A0(uint64_t a1, uint64_t a2, void *a3)
{
  id result = objc_msgSend(self, sel_currentDevice);
  if (result)
  {
    uint64_t v6 = result;
    sub_1AD866410(a2);
    sub_1AD9DFE70();
    uint64_t v8 = v7;

    id result = (id)swift_bridgeObjectRelease();
    *a3 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD848A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  sub_1AD85CCF4();
  uint64_t v5 = MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v46 = (uint64_t)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)v38 - v8;
  uint64_t v10 = type metadata accessor for SleepStagesLegend(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10 - 8, v13);
  uint64_t v14 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85CB28();
  uint64_t v17 = MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v44 = (uint64_t)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)v38 - v20;
  uint64_t v22 = sub_1AD9DE340();
  if (qword_1E9A48D90 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1E9A49A38;
  *(void *)uint64_t v21 = v22;
  *((void *)v21 + 1) = v23;
  v21[16] = 0;
  sub_1AD85CFE8(0, &qword_1E9A49BF8, &qword_1E9A49BA8);
  uint64_t v25 = *(int *)(v24 + 44);
  if (qword_1EB725788 != -1) {
    swift_once();
  }
  v38[2] = &v21[v25];
  uint64_t v47 = qword_1EB725780;
  char v43 = type metadata accessor for SleepStagesLegend;
  sub_1AD85CF24(a1, (uint64_t)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SleepStagesLegend);
  uint64_t v26 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v40 = a1;
  uint64_t v27 = (v26 + 16) & ~v26;
  uint64_t v41 = v26 | 7;
  uint64_t v42 = v27 + v12;
  uint64_t v28 = swift_allocObject();
  uint64_t v39 = type metadata accessor for SleepStagesLegend;
  sub_1AD853C78((uint64_t)v14, v28 + v27, type metadata accessor for SleepStagesLegend);
  sub_1AD862E4C(0, &qword_1E9A49BB0, (uint64_t)&type metadata for SleepStage, MEMORY[0x1E4FBB320]);
  v38[1] = v29;
  sub_1AD85CBD0(&qword_1E9A49BB8, &qword_1E9A49BB0, (uint64_t)&type metadata for SleepStage);
  sub_1AD85CCA0();
  sub_1AD85CF94();
  swift_bridgeObjectRetain();
  sub_1AD9DF260();
  uint64_t v30 = sub_1AD9DE340();
  uint64_t v31 = qword_1E9A49A38;
  *(void *)uint64_t v9 = v30;
  *((void *)v9 + 1) = v31;
  v9[16] = 0;
  sub_1AD85CFE8(0, &qword_1E9A49C08, &qword_1E9A49BD8);
  uint64_t v47 = qword_1EB725780;
  sub_1AD85CF24(v40, (uint64_t)v14, v43);
  uint64_t v32 = swift_allocObject();
  sub_1AD853C78((uint64_t)v14, v32 + v27, v39);
  sub_1AD85CE7C();
  swift_bridgeObjectRetain();
  sub_1AD9DF260();
  uint64_t v33 = v44;
  sub_1AD85CF24((uint64_t)v21, v44, (uint64_t (*)(void))sub_1AD85CB28);
  uint64_t v34 = v46;
  sub_1AD85CF24((uint64_t)v9, v46, (uint64_t (*)(void))sub_1AD85CCF4);
  uint64_t v35 = v45;
  sub_1AD85CF24(v33, v45, (uint64_t (*)(void))sub_1AD85CB28);
  sub_1AD85CAF4(0);
  sub_1AD85CF24(v34, v35 + *(int *)(v36 + 48), (uint64_t (*)(void))sub_1AD85CCF4);
  sub_1AD847280((uint64_t)v9, (uint64_t (*)(void))sub_1AD85CCF4);
  sub_1AD847280((uint64_t)v21, (uint64_t (*)(void))sub_1AD85CB28);
  sub_1AD847280(v34, (uint64_t (*)(void))sub_1AD85CCF4);
  return sub_1AD847280(v33, (uint64_t (*)(void))sub_1AD85CB28);
}

uint64_t sub_1AD848F54(char a1)
{
  sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = *v1;
  swift_bridgeObjectRetain();
  double v8 = sub_1AD903074(2u, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  double v9 = sub_1AD903074(3u, v7);
  swift_bridgeObjectRelease();
  double v10 = v8 + v9;
  swift_bridgeObjectRetain();
  double v11 = sub_1AD903074(1u, v7);
  swift_bridgeObjectRelease();
  if (v10 + v11 <= 0.0) {
    return 11565;
  }
  uint64_t v12 = type metadata accessor for SleepStagesModel(0);
  sub_1AD8614D4((uint64_t)v1 + *(int *)(v12 + 20), (uint64_t)v6, (uint64_t)qword_1EB725C18, (uint64_t)type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD846470);
  uint64_t v13 = type metadata accessor for SleepMetricsWrapper(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v6, 1, v13) == 1)
  {
    sub_1AD862084((uint64_t)v6, (uint64_t)qword_1EB725C18, (uint64_t)type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    uint64_t v15 = (void *)sub_1AD9DF440();
    sub_1AD847280((uint64_t)v6, type metadata accessor for SleepMetricsWrapper);
    sub_1AD90717C(a1);
  }
  uint64_t v16 = sub_1AD9E04C0();
  return sub_1AD8E8CDC(v16, v17);
}

uint64_t sub_1AD8491E8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  sub_1AD862828();
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD862E2C(0);
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v13 = sub_1AD9DE2B0();
  *((void *)v13 + 1) = 0;
  v13[16] = 1;
  sub_1AD85D78C(0, &qword_1E9A49CD8, sub_1AD8628BC);
  sub_1AD8493AC(a1, a2, a3, a4, (uint64_t)&v13[*(int *)(v19 + 44)]);
  uint64_t v20 = 0;
  if (a4) {
    uint64_t v20 = sub_1AD9DE990();
  }
  uint64_t KeyPath = swift_getKeyPath();
  sub_1AD85CF24((uint64_t)v13, (uint64_t)v18, (uint64_t (*)(void))sub_1AD862828);
  uint64_t v22 = (uint64_t *)&v18[*(int *)(v15 + 36)];
  *uint64_t v22 = KeyPath;
  v22[1] = v20;
  sub_1AD847280((uint64_t)v13, (uint64_t (*)(void))sub_1AD862828);
  return sub_1AD853C78((uint64_t)v18, a5, (uint64_t (*)(void))sub_1AD862E2C);
}

uint64_t sub_1AD8493AC@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v66 = a2;
  uint64_t v64 = a5;
  sub_1AD862D98();
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v63 = (uint64_t)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v62 = (char *)&v58 - v13;
  sub_1AD862AD8();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v17);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD862A08();
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v23);
  uint64_t v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_1AD862A08;
  sub_1AD844C00(0, &qword_1E9A49C58, (uint64_t (*)(uint64_t))sub_1AD862A08, MEMORY[0x1E4F3CE30], MEMORY[0x1E4F3CC10]);
  uint64_t v58 = v26;
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v29 = (char *)&v58 - v28;
  sub_1AD862968();
  uint64_t v32 = MEMORY[0x1F4188790](v30 - 8, v31);
  uint64_t v65 = (uint64_t)&v58 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32, v34);
  uint64_t v67 = (uint64_t)&v58 - v35;
  char v72 = a1;
  uint64_t v73 = v66;
  uint64_t v74 = a3;
  uint64_t v60 = a3;
  char v75 = a4;
  char v68 = a1;
  uint64_t v69 = v66;
  uint64_t v70 = a3;
  char v71 = a4;
  sub_1AD844C00(0, &qword_1E9A49C70, (uint64_t (*)(uint64_t))sub_1AD862B90, MEMORY[0x1E4F3EC98], MEMORY[0x1E4F3D750]);
  sub_1AD862BEC();
  sub_1AD9DEFC0();
  int v59 = a1;
  id v36 = sub_1AD903EF8(a1);
  v77[0] = MEMORY[0x1B3E6ADC0](v36);
  sub_1AD844CF8(&qword_1E9A49CA0, (void (*)(uint64_t))sub_1AD862AD8);
  sub_1AD862D44();
  sub_1AD9DEC00();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v29, v25, v21);
  *(_WORD *)&v29[*(int *)(v58 + 36)] = 1;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  v77[0] = 0;
  v77[1] = 0xE000000000000000;
  sub_1AD9E0030();
  swift_bridgeObjectRelease();
  v77[0] = 0xD00000000000001ALL;
  v77[1] = 0x80000001AD9F0160;
  sub_1AD902AEC(a1);
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  strcpy((char *)v77, "UIA.NanoSleep.");
  HIBYTE(v77[1]) = -18;
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD862EAC();
  uint64_t v37 = v65;
  sub_1AD9DED30();
  swift_bridgeObjectRelease();
  sub_1AD862FD8((uint64_t)v29, &qword_1E9A49C58, (uint64_t (*)(uint64_t))v61, MEMORY[0x1E4F3CE30]);
  sub_1AD853C78(v37, v67, (uint64_t (*)(void))sub_1AD862968);
  v77[0] = v66;
  v77[1] = v60;
  sub_1AD85F688();
  swift_bridgeObjectRetain();
  uint64_t v38 = sub_1AD9DEAF0();
  uint64_t v40 = v39;
  char v42 = v41 & 1;
  sub_1AD9DEF10();
  uint64_t v43 = sub_1AD9DEA70();
  uint64_t v45 = v44;
  LOBYTE(v16) = v46;
  uint64_t v48 = v47;
  swift_release();
  sub_1AD861548(v38, v40, v42);
  swift_bridgeObjectRelease();
  v77[0] = v43;
  v77[1] = v45;
  char v78 = v16 & 1;
  uint64_t v79 = v48;
  __int16 v80 = 1;
  v76[0] = 0;
  v76[1] = 0xE000000000000000;
  sub_1AD9E0030();
  swift_bridgeObjectRelease();
  v76[0] = 0xD00000000000001ALL;
  v76[1] = 0x80000001AD9F0160;
  sub_1AD902AEC(v59);
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD9DF790();
  strcpy((char *)v76, "UIA.NanoSleep.");
  HIBYTE(v76[1]) = -18;
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  uint64_t v49 = MEMORY[0x1E4F3CE30];
  sub_1AD861C44(0, (unint64_t *)&qword_1E9A49A78, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3CE30], MEMORY[0x1E4F3CC10]);
  sub_1AD863048((unint64_t *)&qword_1E9A49CE8, (unint64_t *)&qword_1E9A49A78, v49);
  uint64_t v50 = (uint64_t)v62;
  sub_1AD9DED30();
  swift_bridgeObjectRelease();
  sub_1AD861548(v43, v45, v16 & 1);
  swift_bridgeObjectRelease();
  uint64_t v51 = v67;
  uint64_t v52 = v65;
  sub_1AD85CF24(v67, v65, (uint64_t (*)(void))sub_1AD862968);
  uint64_t v53 = v63;
  sub_1AD85CF24(v50, v63, (uint64_t (*)(void))sub_1AD862D98);
  uint64_t v54 = v64;
  sub_1AD85CF24(v52, v64, (uint64_t (*)(void))sub_1AD862968);
  sub_1AD8628F0();
  uint64_t v56 = v54 + *(int *)(v55 + 48);
  *(void *)uint64_t v56 = 0x4030000000000000;
  *(unsigned char *)(v56 + 8) = 0;
  sub_1AD85CF24(v53, v54 + *(int *)(v55 + 64), (uint64_t (*)(void))sub_1AD862D98);
  sub_1AD847280(v50, (uint64_t (*)(void))sub_1AD862D98);
  sub_1AD847280(v51, (uint64_t (*)(void))sub_1AD862968);
  sub_1AD847280(v53, (uint64_t (*)(void))sub_1AD862D98);
  return sub_1AD847280(v52, (uint64_t (*)(void))sub_1AD862968);
}

uint64_t sub_1AD849C08@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  sub_1AD844C00(0, &qword_1E9A49CF0, (uint64_t (*)(uint64_t))sub_1AD862B90, MEMORY[0x1E4F3EC98], MEMORY[0x1E4F3D748]);
  uint64_t v31 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v6 = (uint64_t *)((char *)&v29 - v5);
  sub_1AD862BB8(0);
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_1AD9DEF90();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD862B90(0);
  uint64_t v30 = v17;
  uint64_t v19 = MEMORY[0x1F4188790](v17, v18);
  uint64_t v21 = (uint64_t *)((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v19, v22);
  uint64_t v24 = (char *)&v29 - v23;
  uint64_t v25 = sub_1AD9DEF70();
  uint64_t v26 = v25;
  if (a1)
  {
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E4F3EC60], v12);
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))((char *)v11 + *(int *)(v8 + 28), v16, v12);
    *uint64_t v11 = KeyPath;
    sub_1AD85CF24((uint64_t)v11, (uint64_t)v21 + *(int *)(v30 + 36), (uint64_t (*)(void))sub_1AD862BB8);
    *uint64_t v21 = v26;
    swift_retain();
    sub_1AD847280((uint64_t)v11, (uint64_t (*)(void))sub_1AD862BB8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    swift_release();
    sub_1AD853C78((uint64_t)v21, (uint64_t)v24, (uint64_t (*)(void))sub_1AD862B90);
    sub_1AD85CF24((uint64_t)v24, (uint64_t)v6, (uint64_t (*)(void))sub_1AD862B90);
    swift_storeEnumTagMultiPayload();
    sub_1AD862C9C();
    sub_1AD9DE470();
    return sub_1AD847280((uint64_t)v24, (uint64_t (*)(void))sub_1AD862B90);
  }
  else
  {
    *uint64_t v6 = v25;
    swift_storeEnumTagMultiPayload();
    sub_1AD862C9C();
    return sub_1AD9DE470();
  }
}

uint64_t sub_1AD849FD0@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8491E8(*v1, *((void *)v1 + 1), *((void *)v1 + 2), v1[24], a1);
}

uint64_t sub_1AD849FE0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  sub_1AD8630DC();
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD863364(0);
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v13 = sub_1AD9DE340();
  *((void *)v13 + 1) = 0;
  v13[16] = 1;
  sub_1AD85D78C(0, &qword_1E9A49D30, sub_1AD863170);
  sub_1AD84A1A4(a1, a2, a3, a4, (uint64_t)&v13[*(int *)(v19 + 44)]);
  uint64_t v20 = 0;
  if (a4) {
    uint64_t v20 = sub_1AD9DE990();
  }
  uint64_t KeyPath = swift_getKeyPath();
  sub_1AD85CF24((uint64_t)v13, (uint64_t)v18, (uint64_t (*)(void))sub_1AD8630DC);
  uint64_t v22 = (uint64_t *)&v18[*(int *)(v15 + 36)];
  *uint64_t v22 = KeyPath;
  v22[1] = v20;
  sub_1AD847280((uint64_t)v13, (uint64_t (*)(void))sub_1AD8630DC);
  return sub_1AD853C78((uint64_t)v18, a5, (uint64_t (*)(void))sub_1AD863364);
}

uint64_t sub_1AD84A1A4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v72 = a5;
  uint64_t v71 = MEMORY[0x1E4F3DF60];
  sub_1AD863300(0, (unint64_t *)&qword_1E9A49D18, MEMORY[0x1E4F3DF60]);
  uint64_t v11 = MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v70 = &v61[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v66 = &v61[-v14];
  sub_1AD862AD8();
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v18);
  uint64_t v20 = &v61[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1AD862A08();
  uint64_t v65 = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21, v23);
  uint64_t v25 = &v61[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v69 = sub_1AD862A08;
  char v68 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3DF60];
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4F3CC10];
  sub_1AD86327C(0, &qword_1E9A49D10, (uint64_t (*)(uint64_t))sub_1AD862A08, MEMORY[0x1E4F3DF60], MEMORY[0x1E4F3CC10]);
  uint64_t v28 = MEMORY[0x1F4188790](v26 - 8, v27);
  uint64_t v73 = &v61[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v28, v30);
  uint64_t v74 = &v61[-v31];
  char v79 = a1;
  uint64_t v64 = a2;
  uint64_t v80 = a2;
  uint64_t v81 = a3;
  uint64_t v63 = a3;
  char v82 = a4;
  char v75 = a1;
  uint64_t v76 = a2;
  uint64_t v77 = a3;
  char v78 = a4;
  sub_1AD844C00(0, &qword_1E9A49C70, (uint64_t (*)(uint64_t))sub_1AD862B90, MEMORY[0x1E4F3EC98], MEMORY[0x1E4F3D750]);
  sub_1AD862BEC();
  sub_1AD9DEFC0();
  int v62 = a1;
  id v32 = sub_1AD903EF8(a1);
  v84[0] = MEMORY[0x1B3E6ADC0](v32);
  uint64_t v33 = sub_1AD844CF8(&qword_1E9A49CA0, (void (*)(uint64_t))sub_1AD862AD8);
  unint64_t v34 = sub_1AD862D44();
  sub_1AD9DEC00();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v20, v16);
  v84[0] = 0;
  v84[1] = 0xE000000000000000;
  sub_1AD9E0030();
  swift_bridgeObjectRelease();
  v84[0] = 0xD00000000000001ALL;
  v84[1] = 0x80000001AD9F0160;
  sub_1AD902AEC(a1);
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  strcpy((char *)v84, "UIA.NanoSleep.");
  HIBYTE(v84[1]) = -18;
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  v84[0] = v16;
  v84[1] = &type metadata for SleepStagesLegend.LegendLabelStyle;
  uint64_t v85 = v33;
  unint64_t v86 = v34;
  swift_getOpaqueTypeConformance2();
  uint64_t v35 = v73;
  uint64_t v36 = v65;
  sub_1AD9DED30();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v22 + 8))(v25, v36);
  sub_1AD863444((uint64_t)v35, (uint64_t)v74);
  v84[0] = v64;
  v84[1] = v63;
  sub_1AD85F688();
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_1AD9DEAF0();
  uint64_t v39 = v38;
  LOBYTE(v34) = v40 & 1;
  sub_1AD9DEF10();
  uint64_t v41 = sub_1AD9DEA70();
  uint64_t v43 = v42;
  LOBYTE(v22) = v44;
  unint64_t v46 = v45;
  swift_release();
  sub_1AD861548(v37, v39, v34);
  swift_bridgeObjectRelease();
  v84[0] = v41;
  v84[1] = v43;
  LOBYTE(v85) = v22 & 1;
  unint64_t v86 = v46;
  v83[0] = 0;
  v83[1] = 0xE000000000000000;
  sub_1AD9E0030();
  swift_bridgeObjectRelease();
  v83[0] = 0xD00000000000001ALL;
  v83[1] = 0x80000001AD9F0160;
  sub_1AD902AEC(v62);
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD9DF790();
  strcpy((char *)v83, "UIA.NanoSleep.");
  HIBYTE(v83[1]) = -18;
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  uint64_t v47 = (uint64_t)v66;
  uint64_t v48 = MEMORY[0x1E4F3E2F8];
  sub_1AD9DED30();
  swift_bridgeObjectRelease();
  sub_1AD861548(v41, v43, v22 & 1);
  swift_bridgeObjectRelease();
  uint64_t v50 = v73;
  uint64_t v49 = v74;
  sub_1AD8634EC((uint64_t)v74, (uint64_t)v73);
  uint64_t v51 = v70;
  uint64_t v52 = v71;
  uint64_t v53 = v48;
  sub_1AD8614D4(v47, (uint64_t)v70, (uint64_t)&qword_1E9A49D18, v71, v48, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD863300);
  uint64_t v54 = v72;
  sub_1AD8634EC((uint64_t)v50, v72);
  sub_1AD8631A4();
  sub_1AD8614D4((uint64_t)v51, v54 + *(int *)(v55 + 48), (uint64_t)&qword_1E9A49D18, v52, v53, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD863300);
  sub_1AD862084(v47, (uint64_t)&qword_1E9A49D18, v52, v53, (uint64_t (*)(void))sub_1AD863300);
  uint64_t v56 = (uint64_t)v49;
  uint64_t v57 = (uint64_t (*)(uint64_t))v69;
  uint64_t v58 = v68;
  int v59 = v67;
  sub_1AD861478(v56, &qword_1E9A49D10, (uint64_t (*)(uint64_t))v69, v68, v67);
  sub_1AD862084((uint64_t)v51, (uint64_t)&qword_1E9A49D18, v52, v53, (uint64_t (*)(void))sub_1AD863300);
  return sub_1AD861478((uint64_t)v50, &qword_1E9A49D10, v57, v58, v59);
}

uint64_t sub_1AD84A988@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD849FE0(*v1, *((void *)v1 + 1), *((void *)v1 + 2), v1[24], a1);
}

uint64_t sub_1AD84A998@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v37 = a2;
  uint64_t v2 = sub_1AD9DE5B0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v36 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v7);
  unint64_t v34 = (char *)&v34 - v8;
  uint64_t v9 = sub_1AD9DE590();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86386C(0, &qword_1E9A49D78, MEMORY[0x1E4F3DAD0]);
  uint64_t v15 = v14 - 8;
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v20);
  uint64_t v22 = (char *)&v34 - v21;
  sub_1AD9DE5A0();
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v19, v13, v9);
  uint64_t v24 = (uint64_t *)&v19[*(int *)(v15 + 44)];
  uint64_t v25 = v35;
  *uint64_t v24 = KeyPath;
  v24[1] = v25;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  swift_retain();
  v26(v13, v9);
  sub_1AD8638F0((uint64_t)v19, (uint64_t)v22);
  uint64_t v27 = v34;
  sub_1AD9DE5C0();
  sub_1AD863970((uint64_t)v22, (uint64_t)v19);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v29 = v36;
  v28(v36, v27, v2);
  uint64_t v30 = v37;
  sub_1AD863970((uint64_t)v19, v37);
  sub_1AD8637E0();
  v28((char *)(v30 + *(int *)(v31 + 48)), v29, v2);
  id v32 = *(void (**)(char *, uint64_t))(v3 + 8);
  v32(v27, v2);
  sub_1AD8639F0((uint64_t)v22);
  v32(v29, v2);
  return sub_1AD8639F0((uint64_t)v19);
}

uint64_t sub_1AD84ACA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  *(void *)a1 = sub_1AD9DE2B0();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  sub_1AD85D78C(0, &qword_1E9A49D60, sub_1AD8637AC);
  return sub_1AD84A998(v3, a1 + *(int *)(v4 + 44));
}

uint64_t sub_1AD84AD28@<X0>(unsigned char *a1@<X8>)
{
  *a1 = sub_1AD9DE740();
  sub_1AD85CA54();
  return sub_1AD848A30(v1, (uint64_t)&a1[*(int *)(v3 + 44)]);
}

void sub_1AD84AD68()
{
  off_1EB725750 = (_UNKNOWN *)MEMORY[0x1E4FBC868];
}

uint64_t sub_1AD84AD7C()
{
  uint64_t v1 = sub_1AD9DC7C0();
  uint64_t v31 = *(void *)(v1 - 8);
  uint64_t v32 = v1;
  MEMORY[0x1F4188790](v1, v2);
  uint64_t v30 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1AD9DCC10();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AD9DCC20();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD861C94();
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725758 != -1) {
    swift_once();
  }
  uint64_t v18 = v0 + *(int *)(type metadata accessor for SleepStageSegment(0) + 20);
  swift_beginAccess();
  uint64_t v19 = off_1EB725750;
  if (*((void *)off_1EB725750 + 2) && (unint64_t v20 = sub_1AD86514C(v18), (v21 & 1) != 0))
  {
    uint64_t v22 = *(void *)(v19[7] + 16 * v20);
    swift_endAccess();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_endAccess();
    sub_1AD91A0D0(v17);
    sub_1AD9DCC00();
    sub_1AD9DC690();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_1AD844CF8(&qword_1EB725678, MEMORY[0x1E4F27908]);
    sub_1AD9DFAB0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    sub_1AD847280((uint64_t)v17, (uint64_t (*)(void))sub_1AD861C94);
    uint64_t v22 = v34;
    uint64_t v23 = v35;
    uint64_t v25 = (uint64_t)v30;
    uint64_t v24 = v31;
    uint64_t v26 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v18, v32);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v33 = off_1EB725750;
    off_1EB725750 = (_UNKNOWN *)0x8000000000000000;
    sub_1AD85D508(v22, v23, v25, isUniquelyReferenced_nonNull_native);
    off_1EB725750 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    swift_endAccess();
  }
  return v22;
}

uint64_t sub_1AD84B174@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v199 = a2;
  uint64_t v187 = sub_1AD9DCC70();
  uint64_t v186 = *(void *)(v187 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v187, v3);
  v185 = (char *)&v181 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v6);
  v184 = (char *)&v181 - v7;
  sub_1AD8612F0();
  uint64_t v198 = v8;
  uint64_t v197 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v9);
  v183 = (uint64_t *)((char *)&v181 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v188 = (uint64_t)&v181 - v14;
  uint64_t v190 = sub_1AD9DC7C0();
  uint64_t v189 = *(void *)(v190 - 8);
  MEMORY[0x1F4188790](v190, v15);
  v182 = (char *)&v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD846470(0, &qword_1EB7252D8, (uint64_t (*)(uint64_t))sub_1AD8612F0, v11);
  uint64_t v19 = MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v196 = (uint64_t)&v181 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v21);
  uint64_t v238 = (uint64_t)&v181 - v22;
  sub_1AD85FCFC();
  uint64_t v194 = v23;
  MEMORY[0x1F4188790](v23, v24);
  v234 = (char *)&v181 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v236 = type metadata accessor for Somnogram(0);
  uint64_t v231 = *(void *)(v236 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v236, v26);
  uint64_t v195 = (uint64_t)&v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v232 = v28;
  MEMORY[0x1F4188790](v27, v29);
  uint64_t v233 = (uint64_t)&v181 - v30;
  sub_1AD846470(0, &qword_1EB725A08, MEMORY[0x1E4F194D8], v11);
  MEMORY[0x1F4188790](v31 - 8, v32);
  uint64_t v34 = (char *)&v181 - v33;
  v206 = (uint64_t *)sub_1AD9DD840();
  uint64_t v204 = *(v206 - 1);
  MEMORY[0x1F4188790](v206, v35);
  uint64_t v37 = (char *)&v181 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85EFFC();
  unint64_t v39 = v38;
  uint64_t v202 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38, v40);
  uint64_t v42 = (char *)&v181 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85EF28();
  unint64_t v201 = v43;
  uint64_t v203 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43, v44);
  unint64_t v46 = (char *)&v181 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85EE24();
  unint64_t v207 = v47;
  v208 = *(void (***)(char *, void))(v47 - 8);
  MEMORY[0x1F4188790](v47, v48);
  v205 = (char *)&v181 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85ECA0();
  unint64_t v210 = v50;
  uint64_t v212 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50, v51);
  v209 = (char *)&v181 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85EAA8();
  unint64_t v215 = v53;
  v213 = *(uint64_t **)(v53 - 8);
  MEMORY[0x1F4188790](v53, v54);
  v211 = (char *)&v181 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85E878();
  unint64_t v217 = v56;
  uint64_t v216 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56, v57);
  v214 = (char *)&v181 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85E5D8();
  unint64_t v221 = v59;
  uint64_t v219 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59, v60);
  v218 = (char *)&v181 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85E290();
  unint64_t v225 = v62;
  uint64_t v222 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62, v63);
  v220 = (char *)&v181 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85DF14();
  uint64_t v229 = v65;
  uint64_t v226 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65, v66);
  v223 = (char *)&v181 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85DB10();
  uint64_t v230 = v68;
  uint64_t v227 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68, v69);
  v224 = (char *)&v181 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86327C(0, &qword_1EB7251B8, (uint64_t (*)(uint64_t))sub_1AD85D9E4, (uint64_t (*)(uint64_t))sub_1AD85DB10, MEMORY[0x1E4F3D750]);
  uint64_t v192 = v71;
  MEMORY[0x1F4188790](v71, v72);
  uint64_t v228 = (uint64_t)&v181 - v73;
  sub_1AD85D8CC();
  uint64_t v235 = v74;
  uint64_t v237 = *(void *)(v74 - 8);
  uint64_t v76 = MEMORY[0x1F4188790](v74, v75);
  v193 = (char *)&v181 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = MEMORY[0x1F4188790](v76, v78);
  v191 = (char *)&v181 - v80;
  MEMORY[0x1F4188790](v79, v81);
  v246 = (char *)&v181 - v82;
  if (qword_1EB725788 != -1) {
    swift_once();
  }
  uint64_t v83 = qword_1EB725780;
  uint64_t v84 = swift_bridgeObjectRetain();
  uint64_t v247 = sub_1AD84CDE4(v84);
  MEMORY[0x1F4188790](v247, v85);
  uint64_t v245 = sub_1AD9C5494((void (*)(uint64_t *__return_ptr, char *))sub_1AD861424, (uint64_t)(&v181 - 4), v83);
  uint64_t v86 = swift_bridgeObjectRelease();
  v248 = a1;
  MEMORY[0x1F4188790](v86, v87);
  uint64_t v179 = (uint64_t)v248;
  sub_1AD85F0D0();
  sub_1AD85F184();
  unint64_t v89 = v88;
  uint64_t v90 = sub_1AD844CF8(&qword_1EB7259D0, (void (*)(uint64_t))sub_1AD85F184);
  unint64_t v249 = v89;
  uint64_t v250 = v90;
  swift_getOpaqueTypeConformance2();
  sub_1AD9DD8C0();
  sub_1AD9DD6E0();
  uint64_t v240 = sub_1AD9DD9D0();
  uint64_t v91 = *(void *)(v240 - 8);
  v239 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56);
  uint64_t v241 = v91 + 56;
  v239(v34, 1, 1, v240);
  uint64_t v92 = sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
  unint64_t v93 = MEMORY[0x1E4F193E0];
  uint64_t v94 = v206;
  sub_1AD9DEB70();
  uint64_t v244 = MEMORY[0x1E4F194D8];
  uint64_t v243 = MEMORY[0x1E4FBB718];
  v242 = sub_1AD846470;
  sub_1AD862084((uint64_t)v34, (uint64_t)&qword_1EB725A08, MEMORY[0x1E4F194D8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
  (*(void (**)(char *, uint64_t *))(v204 + 8))(v37, v94);
  (*(void (**)(char *, unint64_t))(v202 + 8))(v42, v39);
  uint64_t v204 = *(int *)(v236 + 20);
  unint64_t v249 = v39;
  uint64_t v250 = (uint64_t)v94;
  uint64_t v251 = v92;
  unint64_t v252 = v93;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v96 = v205;
  unint64_t v97 = v201;
  sub_1AD9DEB30();
  uint64_t v98 = (*(uint64_t (**)(char *, unint64_t))(v203 + 8))(v46, v97);
  v206 = &v181;
  MEMORY[0x1F4188790](v98, v99);
  uint64_t v179 = (uint64_t)v248;
  sub_1AD85F83C();
  uint64_t v101 = v100;
  unint64_t v249 = v97;
  uint64_t v250 = OpaqueTypeConformance2;
  uint64_t v102 = swift_getOpaqueTypeConformance2();
  uint64_t v103 = sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
  long long v104 = v209;
  unint64_t v105 = v207;
  sub_1AD9DEB20();
  v208[1](v96, v105);
  uint64_t v258 = v247;
  v239(v34, 1, 1, v240);
  v208 = (void (**)(char *, void))MEMORY[0x1E4FBB320];
  sub_1AD862E4C(0, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  uint64_t v107 = v106;
  unint64_t v249 = v105;
  uint64_t v250 = v101;
  uint64_t v251 = v102;
  unint64_t v252 = v103;
  uint64_t v108 = swift_getOpaqueTypeConformance2();
  unint64_t v109 = sub_1AD8600B4();
  long long v110 = v211;
  v200 = v34;
  unint64_t v111 = v210;
  unint64_t v207 = v109;
  sub_1AD9DEB80();
  sub_1AD862084((uint64_t)v34, (uint64_t)&qword_1EB725A08, v244, v243, (uint64_t (*)(void))v242);
  (*(void (**)(char *, unint64_t))(v212 + 8))(v104, v111);
  unint64_t v249 = v111;
  uint64_t v250 = v107;
  uint64_t v251 = v108;
  unint64_t v252 = v109;
  uint64_t v112 = swift_getOpaqueTypeConformance2();
  v113 = v214;
  unint64_t v114 = v215;
  sub_1AD9DEB50();
  uint64_t v115 = ((uint64_t (*)(char *, unint64_t))v213[1])(v110, v114);
  v213 = &v181;
  MEMORY[0x1F4188790](v115, v116);
  uint64_t v179 = (uint64_t)v248;
  sub_1AD860140();
  uint64_t v118 = v117;
  unint64_t v249 = v114;
  uint64_t v250 = v112;
  uint64_t v119 = swift_getOpaqueTypeConformance2();
  uint64_t v120 = sub_1AD844CF8(&qword_1EB725180, (void (*)(uint64_t))sub_1AD860140);
  long long v121 = v218;
  unint64_t v122 = v217;
  sub_1AD9DEB40();
  (*(void (**)(char *, unint64_t))(v216 + 8))(v113, v122);
  uint64_t v256 = v245;
  uint64_t v257 = v247;
  uint64_t v123 = (uint64_t)v200;
  v239(v200, 1, 1, v240);
  uint64_t v124 = MEMORY[0x1E4F3EB98];
  sub_1AD862E4C(0, &qword_1EB725B50, MEMORY[0x1E4F3EB98], (uint64_t (*)(void, uint64_t))v208);
  uint64_t v126 = v125;
  unint64_t v249 = v122;
  uint64_t v250 = v118;
  uint64_t v251 = v119;
  unint64_t v252 = v120;
  uint64_t v127 = swift_getOpaqueTypeConformance2();
  uint64_t v128 = sub_1AD85CBD0(&qword_1EB725B58, &qword_1EB725B50, v124);
  uint64_t v179 = v128;
  uint64_t v180 = MEMORY[0x1E4F3EB78];
  v129 = v220;
  unint64_t v130 = v221;
  unint64_t v131 = v207;
  sub_1AD9DEBA0();
  sub_1AD862084(v123, (uint64_t)&qword_1EB725A08, v244, v243, (uint64_t (*)(void))v242);
  (*(void (**)(char *, unint64_t))(v219 + 8))(v121, v130);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v249 = v130;
  uint64_t v250 = v107;
  uint64_t v251 = v126;
  unint64_t v252 = v127;
  unint64_t v253 = v131;
  uint64_t v254 = v128;
  v132 = v248;
  uint64_t v255 = MEMORY[0x1E4F3EB78];
  uint64_t v133 = swift_getOpaqueTypeConformance2();
  v134 = v223;
  unint64_t v135 = v225;
  sub_1AD9DEB60();
  (*(void (**)(char *, unint64_t))(v222 + 8))(v129, v135);
  uint64_t v136 = v233;
  sub_1AD85CF24((uint64_t)v132, v233, type metadata accessor for Somnogram);
  unint64_t v137 = (*(unsigned __int8 *)(v231 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v231 + 80);
  uint64_t v138 = swift_allocObject();
  sub_1AD853C78(v136, v138 + v137, type metadata accessor for Somnogram);
  sub_1AD844C00(0, &qword_1EB725A48, (uint64_t (*)(uint64_t))sub_1AD8606F4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
  unint64_t v249 = v135;
  uint64_t v250 = v133;
  swift_getOpaqueTypeConformance2();
  sub_1AD8607A8();
  v139 = v224;
  uint64_t v140 = v229;
  sub_1AD9DEB90();
  swift_release();
  v141 = v134;
  uint64_t v142 = v204;
  (*(void (**)(char *, uint64_t))(v226 + 8))(v141, v140);
  uint64_t v143 = (*(unint64_t *)((char *)v132 + v142) >> 9) & 1;
  uint64_t v144 = *v132;
  swift_bridgeObjectRetain();
  uint64_t v145 = v228;
  sub_1AD850C08(v143, v144, v228);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v227 + 8))(v139, v230);
  uint64_t v146 = *MEMORY[0x1E4F3CB50];
  uint64_t v147 = sub_1AD9DDF50();
  uint64_t v148 = (uint64_t)v234;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v147 - 8) + 104))(v234, v146, v147);
  sub_1AD844CF8(&qword_1EB725A28, MEMORY[0x1E4F3CB98]);
  uint64_t result = sub_1AD9DF6C0();
  if (result)
  {
    uint64_t v150 = v145;
    sub_1AD860DB8();
    sub_1AD844CF8(&qword_1EB725B90, (void (*)(uint64_t))sub_1AD85FCFC);
    v151 = v191;
    sub_1AD9DEC80();
    sub_1AD847280(v148, (uint64_t (*)(void))sub_1AD85FCFC);
    sub_1AD861478(v150, &qword_1EB7251B8, (uint64_t (*)(uint64_t))sub_1AD85D9E4, (uint64_t (*)(uint64_t))sub_1AD85DB10, MEMORY[0x1E4F3D750]);
    uint64_t v152 = v235;
    (*(void (**)(char *, char *, uint64_t))(v237 + 32))(v246, v151, v235);
    uint64_t v153 = *(uint64_t *)((char *)v132 + v142);
    uint64_t v154 = v195;
    sub_1AD85CF24((uint64_t)v132, v195, type metadata accessor for Somnogram);
    if (v153)
    {
      sub_1AD847280(v154, type metadata accessor for Somnogram);
      uint64_t v157 = 1;
      uint64_t v156 = v238;
    }
    else
    {
      uint64_t v155 = *(void *)(v154 + *(int *)(v236 + 20));
      sub_1AD847280(v154, type metadata accessor for Somnogram);
      uint64_t v156 = v238;
      if ((v155 & 0x80) != 0)
      {
        uint64_t v158 = type metadata accessor for SleepStagesModel(0);
        uint64_t v159 = v188;
        sub_1AD8614D4((uint64_t)v132 + *(int *)(v158 + 24), v188, (uint64_t)&qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD846470);
        uint64_t v160 = v189;
        uint64_t v161 = v190;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48))(v159, 1, v190) == 1)
        {
          sub_1AD862084(v159, (uint64_t)&qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
          uint64_t v157 = 1;
        }
        else
        {
          v162 = v182;
          (*(void (**)(char *, uint64_t, uint64_t))(v160 + 32))(v182, v159, v161);
          v163 = v184;
          sub_1AD9DC780();
          v164 = v185;
          sub_1AD9DC750();
          uint64_t v165 = sub_1AD9DE2B0();
          uint64_t v166 = (uint64_t)v183;
          uint64_t *v183 = v165;
          *(void *)(v166 + 8) = 0;
          *(unsigned char *)(v166 + 16) = 1;
          sub_1AD85D78C(0, &qword_1E9A49C10, sub_1AD861384);
          sub_1AD85196C((char *)(v166 + *(int *)(v167 + 44)));
          v168 = *(void (**)(char *, uint64_t))(v186 + 8);
          uint64_t v169 = v187;
          v168(v164, v187);
          v168(v163, v169);
          (*(void (**)(char *, uint64_t))(v160 + 8))(v162, v161);
          sub_1AD853C78(v166, v156, (uint64_t (*)(void))sub_1AD8612F0);
          uint64_t v157 = 0;
        }
        uint64_t v152 = v235;
      }
      else
      {
        uint64_t v157 = 1;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v197 + 56))(v156, v157, 1, v198);
    uint64_t v170 = v156;
    uint64_t v171 = v237;
    v172 = *(void (**)(char *, char *, uint64_t))(v237 + 16);
    v173 = v193;
    v172(v193, v246, v152);
    uint64_t v174 = MEMORY[0x1E4FBB718];
    uint64_t v175 = v196;
    sub_1AD8614D4(v170, v196, (uint64_t)&qword_1EB7252D8, (uint64_t)sub_1AD8612F0, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD846470);
    v176 = v199;
    v172(v199, v173, v152);
    sub_1AD85D82C();
    sub_1AD8614D4(v175, (uint64_t)&v176[*(int *)(v177 + 48)], (uint64_t)&qword_1EB7252D8, (uint64_t)sub_1AD8612F0, v174, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD846470);
    sub_1AD862084(v238, (uint64_t)&qword_1EB7252D8, (uint64_t)sub_1AD8612F0, v174, (uint64_t (*)(void))sub_1AD846470);
    v178 = *(void (**)(char *, uint64_t))(v171 + 8);
    v178(v246, v152);
    sub_1AD862084(v175, (uint64_t)&qword_1EB7252D8, (uint64_t)sub_1AD8612F0, v174, (uint64_t (*)(void))sub_1AD846470);
    return ((uint64_t (*)(char *, uint64_t))v178)(v173, v152);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD84CDE4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    sub_1AD8A2568(0, v1, 0);
    uint64_t v2 = v15;
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    while (2)
    {
      int v6 = *v4++;
      int v5 = v6;
      switch(v6)
      {
        case 4:
          swift_bridgeObjectRelease();
          goto LABEL_8;
        default:
          char v7 = sub_1AD9E02D0();
          swift_bridgeObjectRelease();
          if (v7)
          {
LABEL_8:
            uint64_t v9 = 0;
            unint64_t v8 = 0xE000000000000000;
          }
          else
          {
            unint64_t v8 = 0xE500000000000000;
            uint64_t v9 = 0x656B617761;
            switch(v5)
            {
              case 1:
                unint64_t v8 = 0xE800000000000000;
                uint64_t v9 = 0x7065656C536D6572;
                break;
              case 2:
                unsigned int v10 = 1701998435;
                goto LABEL_11;
              case 3:
                unsigned int v10 = 1885693284;
LABEL_11:
                uint64_t v9 = v10 | 0x65656C5300000000;
                unint64_t v8 = 0xE900000000000070;
                break;
              default:
                break;
            }
          }
          unint64_t v12 = *(void *)(v15 + 16);
          unint64_t v11 = *(void *)(v15 + 24);
          if (v12 >= v11 >> 1) {
            sub_1AD8A2568(v11 > 1, v12 + 1, 1);
          }
          *(void *)(v15 + 16) = v12 + 1;
          uint64_t v13 = v15 + 16 * v12;
          *(void *)(v13 + 32) = v9;
          *(void *)(v13 + 40) = v8;
          if (!--v1) {
            return v2;
          }
          continue;
      }
    }
  }
  return v2;
}

uint64_t sub_1AD84D008@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if ((*(unsigned char *)(a2 + *(int *)(type metadata accessor for Somnogram(0) + 20)) & 0x20) != 0)
  {
    uint64_t result = sub_1AD9DEEC0();
  }
  else
  {
    id v5 = sub_1AD903EF8(*a1);
    uint64_t result = MEMORY[0x1B3E6ADC0](v5);
  }
  *a3 = result;
  return result;
}

uint64_t sub_1AD84D06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD85F184();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1AD85F0D0();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v13);
  uint64_t v15 = &v17[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  sub_1AD85F1E8();
  sub_1AD85F6DC();
  sub_1AD9DD8A0();
  sub_1AD84E090();
  type metadata accessor for Somnogram(0);
  sub_1AD844CF8(&qword_1EB7259D0, (void (*)(uint64_t))sub_1AD85F184);
  sub_1AD9DD750();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(a2, v15, v11);
}

uint64_t sub_1AD84D2A8(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for Somnogram(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2 - 8, v5);
  uint64_t v26 = *a1;
  sub_1AD85CF24((uint64_t)a1, (uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Somnogram);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  sub_1AD853C78((uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for Somnogram);
  sub_1AD85F2B0(0);
  sub_1AD85F2E4();
  sub_1AD844CF8(&qword_1EB725B48, sub_1AD85F2B0);
  sub_1AD85F428();
  uint64_t v9 = v8;
  sub_1AD85F528();
  uint64_t v11 = v10;
  sub_1AD85F5F0();
  uint64_t v13 = v12;
  uint64_t v14 = sub_1AD9DD780();
  swift_bridgeObjectRetain();
  uint64_t v15 = MEMORY[0x1E4FBB1A0];
  uint64_t v22 = v14;
  uint64_t v23 = MEMORY[0x1E4FBB1A0];
  uint64_t v24 = MEMORY[0x1E4F19360];
  unint64_t v25 = MEMORY[0x1E4F195A0];
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v22 = v13;
  uint64_t v23 = OpaqueTypeConformance2;
  uint64_t v17 = swift_getOpaqueTypeConformance2();
  uint64_t v22 = v11;
  uint64_t v23 = v17;
  uint64_t v18 = swift_getOpaqueTypeConformance2();
  unint64_t v19 = sub_1AD85F688();
  uint64_t v22 = v9;
  uint64_t v23 = v15;
  uint64_t v24 = v18;
  unint64_t v25 = v19;
  swift_getOpaqueTypeConformance2();
  sub_1AD844CF8(&qword_1EB725768, (void (*)(uint64_t))type metadata accessor for SleepStageSegment);
  return sub_1AD9DF240();
}

uint64_t sub_1AD84D588@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v89 = a2;
  uint64_t v93 = a3;
  uint64_t v4 = sub_1AD9DE2D0();
  uint64_t v91 = *(void *)(v4 - 8);
  uint64_t v92 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v90 = (char *)v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD861C44(0, &qword_1EB7259C0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F195A0], MEMORY[0x1E4F19388]);
  uint64_t v87 = *(void *)(v7 - 8);
  uint64_t v88 = v7;
  uint64_t v9 = MEMORY[0x1F4188790](v7, v8);
  uint64_t v84 = (char *)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v11);
  v71[2] = (char *)v71 - v12;
  uint64_t v13 = sub_1AD9DCC70();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v17 = (char *)v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD844C00(0, &qword_1EB7259B8, MEMORY[0x1E4F27928], MEMORY[0x1E4F19208], MEMORY[0x1E4F19388]);
  uint64_t v20 = MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v94 = (char *)v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v22);
  uint64_t v24 = (char *)v71 - v23;
  uint64_t v74 = sub_1AD9DD780();
  uint64_t v72 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74, v25);
  uint64_t v95 = (char *)v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85F5F0();
  uint64_t v79 = v27;
  uint64_t v76 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27, v28);
  uint64_t v73 = (char *)v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85F528();
  uint64_t v82 = v30;
  uint64_t v77 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30, v31);
  uint64_t v75 = (char *)v71 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85F428();
  uint64_t v85 = *(void *)(v33 - 8);
  uint64_t v86 = v33;
  MEMORY[0x1F4188790](v33, v34);
  uint64_t v81 = (char *)v71 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85F2E4();
  uint64_t v83 = v36;
  uint64_t v80 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36, v37);
  uint64_t v78 = (char *)v71 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DE2C0();
  type metadata accessor for SleepStageSegment(0);
  sub_1AD9DC780();
  v71[0] = v24;
  sub_1AD9DD800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v39 = *(void (**)(char *, uint64_t))(v14 + 8);
  v39(v17, v13);
  sub_1AD9DE2C0();
  sub_1AD9DC750();
  sub_1AD9DD800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39(v17, v13);
  sub_1AD9DE2C0();
  v71[1] = a1;
  int v40 = *a1;
  if (v40 == 4)
  {
    char v41 = sub_1AD9E02D0();
    BOOL v42 = (v41 & 1) == 0;
    if (v41) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = 0x65656C5365726F63;
    }
    if (v42) {
      unint64_t v44 = 0xE900000000000070;
    }
    else {
      unint64_t v44 = 0xE000000000000000;
    }
  }
  else
  {
    uint64_t v43 = sub_1AD902AEC(*a1);
    unint64_t v44 = v45;
  }
  uint64_t v98 = v43;
  unint64_t v99 = v44;
  unint64_t v46 = MEMORY[0x1E4FBB1A0];
  sub_1AD9DD800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AD9DD770();
  sub_1AD9DE2C0();
  if (v40 == 4)
  {
    char v47 = sub_1AD9E02D0();
    BOOL v48 = (v47 & 1) == 0;
    if (v47) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = 0x65656C5365726F63;
    }
    if (v48) {
      unint64_t v50 = 0xE900000000000070;
    }
    else {
      unint64_t v50 = 0xE000000000000000;
    }
  }
  else
  {
    uint64_t v49 = sub_1AD902AEC(v40);
    unint64_t v50 = v51;
  }
  uint64_t v98 = v49;
  unint64_t v99 = v50;
  uint64_t v52 = v84;
  uint64_t v53 = MEMORY[0x1E4F195A0];
  sub_1AD9DD800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v54 = MEMORY[0x1E4F19360];
  uint64_t v55 = v73;
  uint64_t v56 = v74;
  uint64_t v57 = v95;
  sub_1AD9DD730();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v52, v88);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v57, v56);
  type metadata accessor for Somnogram(0);
  uint64_t v58 = v90;
  uint64_t v60 = v91;
  uint64_t v59 = v92;
  (*(void (**)(char *, void, uint64_t))(v91 + 104))(v90, *MEMORY[0x1E4F3D4A0], v92);
  uint64_t v98 = v56;
  unint64_t v99 = v46;
  uint64_t v100 = v54;
  uint64_t v101 = v53;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v62 = v75;
  uint64_t v63 = v79;
  sub_1AD9DD720();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v59);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v55, v63);
  uint64_t v98 = v63;
  unint64_t v99 = OpaqueTypeConformance2;
  uint64_t v64 = swift_getOpaqueTypeConformance2();
  uint64_t v65 = v81;
  uint64_t v66 = v82;
  sub_1AD9DD760();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v62, v66);
  uint64_t v98 = sub_1AD84AD7C();
  unint64_t v99 = v67;
  uint64_t v96 = v66;
  uint64_t v97 = v64;
  swift_getOpaqueTypeConformance2();
  sub_1AD85F688();
  uint64_t v68 = v78;
  uint64_t v69 = v86;
  sub_1AD9DD740();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v65, v69);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v80 + 32))(v93, v68, v83);
}

uint64_t sub_1AD84E090()
{
  uint64_t v1 = sub_1AD9DE320();
  uint64_t v113 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1, v2);
  uint64_t v5 = (char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v107 - v7;
  uint64_t v115 = sub_1AD9DDD20();
  uint64_t v9 = *(void *)(v115 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v115, v10);
  uint64_t v13 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14);
  uint64_t v16 = (char *)&v107 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for Somnogram(0) + 20);
  unint64_t v114 = v0;
  LOBYTE(v17) = *((unsigned char *)v0 + v17);
  uint64_t v112 = v16;
  if ((v17 & 0x20) == 0)
  {
    uint64_t v18 = self;
    uint64_t v109 = MEMORY[0x1B3E6ADC0](objc_msgSend(v18, sel_hk_sleepAwakeColor));
    id v19 = objc_msgSend(v18, sel_hk_sleepAsleepCoreColor, MEMORY[0x1B3E6ADC0](objc_msgSend(v18, sel_hk_sleepAsleepREMColor)));
    uint64_t v111 = MEMORY[0x1B3E6ADC0](v19);
    uint64_t v110 = MEMORY[0x1B3E6ADC0](objc_msgSend(v18, sel_hk_sleepAsleepDeepColor));
    uint64_t v21 = v114;
    uint64_t v20 = v115;
    sub_1AD96639C((uint64_t)v16);
    sub_1AD96667C((uint64_t)v8);
    id v108 = self;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v13, *MEMORY[0x1E4F3C5B8], v20);
    char v22 = sub_1AD9DDD10();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v13, v20);
    uint64_t v24 = v113;
    (*(void (**)(char *, void, uint64_t))(v113 + 104))(v5, *MEMORY[0x1E4F3D540], v1);
    uint64_t v25 = sub_1AD9DDD10();
    uint64_t v26 = v5;
    uint64_t v27 = v8;
    unint64_t v28 = *(void *)(v24 + 8);
    ((void (*)(char *, uint64_t))v28)(v26, v1);
    objc_msgSend(v108, sel_somnogramBackgroundOpacityWithIsDarkMode_isHighContrast_isGrayScale_, v22 & 1, v25 & 1, 0);
    uint64_t v30 = v29;
    ((void (*)(char *, uint64_t))v28)(v27, v1);
    v23(v112, v20);
    uint64_t v31 = *v21;
    double v32 = sub_1AD903074(0, *v21);
    double v33 = sub_1AD903074(1u, v31);
    double v34 = sub_1AD903074(2u, v31);
    double v35 = sub_1AD903074(3u, v31);
    unint64_t v36 = v35 > 2.22507386e-308;
    double v37 = sub_1AD903074(4u, v31);
    if (v32 <= 2.22507386e-308)
    {
      unint64_t v36 = v35 > 2.22507386e-308 && v33 > 2.22507386e-308;
      uint64_t v38 = (void *)MEMORY[0x1E4FBC860];
      if (v33 <= 2.22507386e-308 && v37 <= 2.22507386e-308)
      {
        if (v34 <= 2.22507386e-308) {
          goto LABEL_51;
        }
        goto LABEL_40;
      }
      goto LABEL_26;
    }
    uint64_t v38 = (void *)MEMORY[0x1E4FBC860];
    sub_1AD9DEEF0();
    uint64_t v39 = sub_1AD9DF2C0();
    uint64_t v41 = v40;
    sub_1AD9DEEF0();
    uint64_t v42 = sub_1AD9DF2C0();
    int64_t v44 = v38[2];
    int64_t v45 = v44 + 2;
    if (__OFADD__(v44, 2))
    {
      __break(1u);
    }
    else
    {
      uint64_t v25 = v42;
      double v32 = v43;
      char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (unint64_t v28 = v38[3], v47 = v28 >> 1, (uint64_t)(v28 >> 1) < v45))
      {
        if (v44 <= v45) {
          int64_t v48 = v44 + 2;
        }
        else {
          int64_t v48 = v44;
        }
        uint64_t v38 = sub_1AD99A9C0(isUniquelyReferenced_nonNull_native, v48, 1, MEMORY[0x1E4FBC860]);
        unint64_t v28 = v38[3];
        unint64_t v47 = v28 >> 1;
      }
      int64_t v45 = v38[2];
      int64_t v44 = v45 + 1;
      swift_retain();
      if (v47 > v45)
      {
LABEL_11:
        v38[2] = v44;
        uint64_t v49 = &v38[2 * v45];
        v49[4] = v39;
        v49[5] = v41;
        int64_t v50 = v45 + 2;
        swift_retain();
        if ((uint64_t)v47 < v50) {
          uint64_t v38 = sub_1AD99A9C0((void *)(v28 > 1), v50, 1, v38);
        }
        v38[2] = v50;
        unint64_t v51 = (double *)&v38[2 * v44];
        *((void *)v51 + 4) = v25;
        v51[5] = v32;
        swift_release();
        swift_release();
        if (v33 <= 2.22507386e-308 && v34 <= 2.22507386e-308 && v35 <= 2.22507386e-308 && v37 <= 2.22507386e-308)
        {
          unint64_t v36 = 0;
          goto LABEL_37;
        }
LABEL_26:
        sub_1AD9DEEF0();
        uint64_t v65 = sub_1AD9DF2C0();
        uint64_t v67 = v66;
        sub_1AD9DEEF0();
        uint64_t v68 = sub_1AD9DF2C0();
        int64_t v70 = v38[2];
        int64_t v71 = v70 + 2;
        if (__OFADD__(v70, 2))
        {
          __break(1u);
        }
        else
        {
          uint64_t v25 = v68;
          double v33 = v69;
          uint64_t v72 = (void *)swift_isUniquelyReferenced_nonNull_native();
          if (!v72 || (unint64_t v28 = v38[3], v73 = v28 >> 1, (uint64_t)(v28 >> 1) < v71))
          {
            if (v70 <= v71) {
              int64_t v74 = v70 + 2;
            }
            else {
              int64_t v74 = v70;
            }
            uint64_t v38 = sub_1AD99A9C0(v72, v74, 1, v38);
            unint64_t v28 = v38[3];
            unint64_t v73 = v28 >> 1;
          }
          int64_t v71 = v38[2];
          int64_t v70 = v71 + 1;
          swift_retain();
          if (v73 > v71) {
            goto LABEL_34;
          }
        }
        uint64_t v38 = sub_1AD99A9C0((void *)(v28 > 1), v70, 1, v38);
        unint64_t v28 = v38[3];
        unint64_t v73 = v28 >> 1;
LABEL_34:
        v38[2] = v70;
        uint64_t v75 = &v38[2 * v71];
        v75[4] = v65;
        v75[5] = v67;
        int64_t v76 = v71 + 2;
        swift_retain();
        if ((uint64_t)v73 < v76) {
          uint64_t v38 = sub_1AD99A9C0((void *)(v28 > 1), v76, 1, v38);
        }
        v38[2] = v76;
        uint64_t v77 = (double *)&v38[2 * v70];
        *((void *)v77 + 4) = v25;
        v77[5] = v33;
        swift_release();
        swift_release();
LABEL_37:
        if (v34 <= 2.22507386e-308 && (v36 & 1) == 0 && v37 <= 2.22507386e-308) {
          goto LABEL_51;
        }
LABEL_40:
        uint64_t v78 = v111;
        sub_1AD9DEEF0();
        uint64_t v79 = sub_1AD9DF2C0();
        uint64_t v81 = v80;
        sub_1AD9DEEF0();
        uint64_t v82 = sub_1AD9DF2C0();
        int64_t v84 = v38[2];
        int64_t v85 = v84 + 2;
        if (__OFADD__(v84, 2))
        {
          __break(1u);
        }
        else
        {
          uint64_t v78 = v82;
          double v34 = v83;
          uint64_t v86 = (void *)swift_isUniquelyReferenced_nonNull_native();
          if (!v86 || (unint64_t v36 = v38[3], v87 = v36 >> 1, (uint64_t)(v36 >> 1) < v85))
          {
            if (v84 <= v85) {
              int64_t v88 = v84 + 2;
            }
            else {
              int64_t v88 = v84;
            }
            uint64_t v38 = sub_1AD99A9C0(v86, v88, 1, v38);
            unint64_t v36 = v38[3];
            unint64_t v87 = v36 >> 1;
          }
          int64_t v85 = v38[2];
          int64_t v84 = v85 + 1;
          swift_retain();
          if (v87 > v85) {
            goto LABEL_48;
          }
        }
        uint64_t v38 = sub_1AD99A9C0((void *)(v36 > 1), v84, 1, v38);
        unint64_t v36 = v38[3];
        unint64_t v87 = v36 >> 1;
LABEL_48:
        v38[2] = v84;
        uint64_t v89 = &v38[2 * v85];
        v89[4] = v79;
        v89[5] = v81;
        int64_t v90 = v85 + 2;
        swift_retain();
        if ((uint64_t)v87 < v90) {
          uint64_t v38 = sub_1AD99A9C0((void *)(v36 > 1), v90, 1, v38);
        }
        v38[2] = v90;
        uint64_t v91 = (double *)&v38[2 * v84];
        *((void *)v91 + 4) = v78;
        v91[5] = v34;
        swift_release();
        swift_release();
LABEL_51:
        if (v35 <= 2.22507386e-308 && v37 <= 2.22507386e-308)
        {
LABEL_64:
          uint64_t v64 = MEMORY[0x1B3E6B270](v38);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          return v64;
        }
        uint64_t v92 = v110;
        sub_1AD9DEEF0();
        uint64_t v93 = sub_1AD9DF2C0();
        uint64_t v95 = v94;
        sub_1AD9DEEF0();
        uint64_t v96 = sub_1AD9DF2C0();
        int64_t v98 = v38[2];
        int64_t v99 = v98 + 2;
        if (__OFADD__(v98, 2))
        {
          __break(1u);
        }
        else
        {
          uint64_t v92 = v96;
          uint64_t v30 = v97;
          uint64_t v100 = (void *)swift_isUniquelyReferenced_nonNull_native();
          if (!v100 || (unint64_t v36 = v38[3], v101 = v36 >> 1, (uint64_t)(v36 >> 1) < v99))
          {
            if (v98 <= v99) {
              int64_t v102 = v98 + 2;
            }
            else {
              int64_t v102 = v98;
            }
            uint64_t v38 = sub_1AD99A9C0(v100, v102, 1, v38);
            unint64_t v36 = v38[3];
            unint64_t v101 = v36 >> 1;
          }
          int64_t v99 = v38[2];
          int64_t v98 = v99 + 1;
          swift_retain();
          if (v101 > v99) {
            goto LABEL_61;
          }
        }
        uint64_t v38 = sub_1AD99A9C0((void *)(v36 > 1), v98, 1, v38);
        unint64_t v36 = v38[3];
        unint64_t v101 = v36 >> 1;
LABEL_61:
        v38[2] = v98;
        uint64_t v103 = &v38[2 * v99];
        v103[4] = v93;
        v103[5] = v95;
        int64_t v104 = v99 + 2;
        swift_retain();
        if ((uint64_t)v101 < v104) {
          uint64_t v38 = sub_1AD99A9C0((void *)(v36 > 1), v104, 1, v38);
        }
        v38[2] = v104;
        unint64_t v105 = &v38[2 * v98];
        v105[4] = v92;
        v105[5] = v30;
        swift_release();
        swift_release();
        goto LABEL_64;
      }
    }
    uint64_t v38 = sub_1AD99A9C0((void *)(v28 > 1), v44, 1, v38);
    unint64_t v28 = v38[3];
    unint64_t v47 = v28 >> 1;
    goto LABEL_11;
  }
  sub_1AD862E4C(0, &qword_1EB725BB8, MEMORY[0x1E4F3EB98], MEMORY[0x1E4FBBE00]);
  uint64_t v52 = swift_allocObject();
  uint64_t v109 = v1;
  uint64_t v111 = v52;
  *(_OWORD *)(v52 + 16) = xmmword_1AD9E3070;
  uint64_t v110 = sub_1AD9DEE70();
  uint64_t v53 = v113;
  uint64_t v54 = *(void (**)(char *, void, uint64_t))(v9 + 104);
  uint64_t v55 = v115;
  v54(v16, *MEMORY[0x1E4F3C5C0], v115);
  uint64_t v56 = v55;
  sub_1AD96667C((uint64_t)v8);
  unint64_t v114 = (uint64_t *)self;
  v54(v13, *MEMORY[0x1E4F3C5B8], v55);
  char v57 = sub_1AD9DDD10();
  uint64_t v58 = *(void (**)(char *, uint64_t))(v9 + 8);
  v58(v13, v55);
  uint64_t v59 = v109;
  (*(void (**)(char *, void, uint64_t))(v53 + 104))(v5, *MEMORY[0x1E4F3D540], v109);
  char v60 = sub_1AD9DDD10();
  uint64_t v61 = *(void (**)(char *, uint64_t))(v53 + 8);
  v61(v5, v59);
  objc_msgSend(v114, sel_somnogramBackgroundOpacityWithIsDarkMode_isHighContrast_isGrayScale_, v57 & 1, v60 & 1, 1);
  v61(v8, v59);
  v58(v112, v56);
  uint64_t v62 = sub_1AD9DEEF0();
  swift_release();
  uint64_t v63 = v111;
  *(void *)(v111 + 32) = v62;
  uint64_t v116 = v63;
  sub_1AD9DF870();
  return MEMORY[0x1B3E6B280](v116);
}

uint64_t sub_1AD84EC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v30 = a2;
  uint64_t v2 = sub_1AD9DD820();
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v29 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Somnogram(0);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v27 + 64);
  MEMORY[0x1F4188790](v5 - 8, v7);
  uint64_t v8 = MEMORY[0x1E4F27CA0];
  uint64_t v9 = MEMORY[0x1E4FBB718];
  sub_1AD846470(0, &qword_1EB725690, MEMORY[0x1E4F27CA0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = sub_1AD9DCE20();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1AD9DD7D0();
  MEMORY[0x1F4188790](v19 - 8, v20);
  uint64_t v21 = sub_1AD9DD7A0();
  MEMORY[0x1F4188790](v21 - 8, v22);
  sub_1AD9DD790();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, *MEMORY[0x1E4F27C48], v14);
  uint64_t v23 = sub_1AD9DCE40();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v13, 1, 1, v23);
  sub_1AD9DD7B0();
  sub_1AD862084((uint64_t)v13, (uint64_t)&qword_1EB725690, v8, v9, (uint64_t (*)(void))sub_1AD846470);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  sub_1AD85CF24(v28, (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Somnogram);
  unint64_t v24 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v25 = swift_allocObject();
  sub_1AD853C78((uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24, type metadata accessor for Somnogram);
  sub_1AD9DD810();
  sub_1AD8601D4(0, &qword_1EB725118, sub_1AD85F8D0, sub_1AD85F988);
  sub_1AD85FEEC();
  return sub_1AD9DD970();
}

uint64_t sub_1AD84F058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v109 = a2;
  sub_1AD861B08(0, &qword_1EB725168, sub_1AD85F8D0, sub_1AD85F988);
  uint64_t v108 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v107 = (uint64_t)&v94 - v5;
  uint64_t v6 = sub_1AD9DD860();
  MEMORY[0x1F4188790](v6 - 8, v7);
  int64_t v98 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AD9DD890();
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v97 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85F9BC();
  uint64_t v105 = v12;
  uint64_t v112 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12, v13);
  uint64_t v96 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v95 = (char *)&v94 - v17;
  uint64_t v113 = (uint64_t *)type metadata accessor for Somnogram(0);
  uint64_t v19 = MEMORY[0x1F4188790](v113, v18);
  uint64_t v101 = (uint64_t)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v21);
  uint64_t v102 = (uint64_t)&v94 - v22;
  sub_1AD85F988(0);
  uint64_t v25 = MEMORY[0x1F4188790](v23 - 8, v24);
  uint64_t v106 = (uint64_t)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v27);
  int64_t v104 = (char *)&v94 - v28;
  uint64_t v100 = sub_1AD9DD960();
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x1F4188790](v100, v29);
  uint64_t v31 = (char *)&v94 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD85F904();
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v32, v35);
  uint64_t v38 = (char *)&v94 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36, v39);
  uint64_t v41 = (char *)&v94 - v40;
  sub_1AD85F8D0(0);
  uint64_t v44 = MEMORY[0x1F4188790](v42 - 8, v43);
  uint64_t v103 = (uint64_t)&v94 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v44, v46);
  uint64_t v110 = (char *)&v94 - v47;
  uint64_t v48 = sub_1AD9DD9C0();
  uint64_t v49 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48, v50);
  uint64_t v52 = (char *)&v94 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_1AD9DD9B0();
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
  uint64_t v94 = a1;
  v54(v52, a1, v48);
  if (!v53)
  {
    BOOL v57 = 1;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v48);
    uint64_t v58 = v113;
    uint64_t v59 = v111;
    if ((*(unsigned char *)(v111 + *((int *)v113 + 5)) & 0x80) != 0)
    {
      uint64_t v64 = 1;
      uint64_t v65 = (uint64_t)v104;
      uint64_t v63 = v112;
      uint64_t v62 = (uint64_t)v110;
    }
    else
    {
      sub_1AD9DDD40();
      long long v121 = v118;
      long long v122 = v119;
      uint64_t v123 = v120;
      sub_1AD9DD940();
      uint64_t v60 = v100;
      sub_1AD9DD900();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v31, v60);
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v61(v41, v38, v33);
      uint64_t v62 = (uint64_t)v110;
      v61(v110, v41, v33);
      uint64_t v63 = v112;
      uint64_t v58 = v113;
      uint64_t v64 = 0;
      uint64_t v65 = (uint64_t)v104;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v62, v64, 1, v33);
    uint64_t v66 = v102;
    sub_1AD85CF24(v59, v102, type metadata accessor for Somnogram);
    if (v57)
    {
      uint64_t v67 = *(void *)(v66 + *((int *)v58 + 5));
      uint64_t v68 = v101;
      sub_1AD85CF24(v66, v101, type metadata accessor for Somnogram);
      uint64_t v69 = v105;
      if (v67)
      {
        sub_1AD847280(v68, type metadata accessor for Somnogram);
        sub_1AD847280(v66, type metadata accessor for Somnogram);
      }
      else
      {
        uint64_t v70 = *(void *)(v68 + *((int *)v58 + 5));
        sub_1AD847280(v68, type metadata accessor for Somnogram);
        sub_1AD847280(v66, type metadata accessor for Somnogram);
        if ((v70 & 0x80) != 0)
        {
          uint64_t v71 = 1;
LABEL_18:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v65, v71, 1, v69);
          uint64_t v87 = v103;
          sub_1AD85CF24(v62, v103, (uint64_t (*)(void))sub_1AD85F8D0);
          uint64_t v88 = v106;
          sub_1AD85CF24(v65, v106, (uint64_t (*)(void))sub_1AD85F988);
          sub_1AD85FFE0();
          uint64_t v89 = v107;
          sub_1AD85CF24(v87, v107, (uint64_t (*)(void))sub_1AD85F8D0);
          sub_1AD858840(&qword_1EB725268, sub_1AD85F988, (void (*)(void))sub_1AD860080);
          uint64_t v90 = v108;
          uint64_t v91 = v89 + *(int *)(v108 + 48);
          sub_1AD85CF24(v88, v91, (uint64_t (*)(void))sub_1AD85F988);
          uint64_t v92 = v109;
          sub_1AD853C78(v89, v109, (uint64_t (*)(void))sub_1AD85F8D0);
          sub_1AD853C78(v91, v92 + *(int *)(v90 + 48), (uint64_t (*)(void))sub_1AD85F988);
          sub_1AD847280(v65, (uint64_t (*)(void))sub_1AD85F988);
          sub_1AD847280(v62, (uint64_t (*)(void))sub_1AD85F8D0);
          sub_1AD847280(v88, (uint64_t (*)(void))sub_1AD85F988);
          return sub_1AD847280(v87, (uint64_t (*)(void))sub_1AD85F8D0);
        }
      }
      if (sub_1AD9DD9B0()) {
        sub_1AD9DF380();
      }
      else {
        sub_1AD9DF370();
      }
      int64_t v104 = v73;
      uint64_t v102 = v72;
      uint64_t v74 = sub_1AD9DD870();
      uint64_t v113 = &v94;
      MEMORY[0x1F4188790](v74, v75);
      sub_1AD9DD850();
      sub_1AD85FAE0();
      uint64_t v77 = v76;
      sub_1AD85FBE4();
      uint64_t v79 = v78;
      sub_1AD85FCFC();
      uint64_t v81 = v80;
      uint64_t v82 = sub_1AD85FD90(&qword_1EB725278, (void (*)(uint64_t))sub_1AD85FBE4, (void (*)(void))sub_1AD85FE34);
      uint64_t v83 = sub_1AD844CF8(&qword_1EB725B90, (void (*)(uint64_t))sub_1AD85FCFC);
      uint64_t v114 = v79;
      uint64_t v115 = v81;
      uint64_t v116 = v82;
      uint64_t v117 = v83;
      v93[2] = v77;
      v93[3] = swift_getOpaqueTypeConformance2();
      v93[0] = sub_1AD861B84;
      v93[1] = v93;
      int64_t v84 = v96;
      sub_1AD9DD7E0();
      uint64_t v63 = v112;
      int64_t v85 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
      uint64_t v86 = v95;
      v85(v95, v84, v69);
      v85((char *)v65, v86, v69);
      uint64_t v71 = 0;
      uint64_t v62 = (uint64_t)v110;
      goto LABEL_18;
    }
    sub_1AD847280(v66, type metadata accessor for Somnogram);
    uint64_t v71 = 1;
    uint64_t v69 = v105;
    goto LABEL_18;
  }
  uint64_t v55 = sub_1AD9DD9B0();
  uint64_t result = sub_1AD9DD9A0();
  if (!__OFSUB__(result, 1))
  {
    BOOL v57 = v55 == result - 1;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD84FBB4(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DD7D0();
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v4 = sub_1AD9DD820();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v6 = type metadata accessor for Somnogram(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6 - 8, v9);
  uint64_t v10 = sub_1AD9DD7A0();
  MEMORY[0x1F4188790](v10 - 8, v11);
  sub_1AD9DD790();
  sub_1AD85CF24(a1, (uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Somnogram);
  unint64_t v12 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = swift_allocObject();
  sub_1AD853C78((uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, type metadata accessor for Somnogram);
  sub_1AD9DD810();
  sub_1AD9DD7C0();
  sub_1AD8601D4(0, &qword_1EB725160, (void (*)(uint64_t))sub_1AD860254, sub_1AD8602DC);
  sub_1AD8604EC();
  return sub_1AD9DD970();
}

uint64_t sub_1AD84FE20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v93 = a2;
  sub_1AD861B08(0, &qword_1EB725140, (void (*)(uint64_t))sub_1AD860254, sub_1AD8602DC);
  uint64_t v92 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v91 = (uint64_t)&v75 - v5;
  uint64_t v6 = sub_1AD9DD860();
  MEMORY[0x1F4188790](v6 - 8, v7);
  int64_t v84 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AD9DD890();
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v83 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8602DC(0);
  uint64_t v14 = MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v90 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)&v75 - v17;
  sub_1AD861B08(0, &qword_1EB725120, MEMORY[0x1E4F19230], MEMORY[0x1E4F19478]);
  uint64_t v89 = v19;
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v22 = (char *)&v75 - v21;
  uint64_t v23 = sub_1AD9DD930();
  MEMORY[0x1F4188790](v23 - 8, v24);
  uint64_t v87 = sub_1AD9DD960();
  uint64_t v88 = *(void *)(v87 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v87, v25);
  uint64_t v94 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v28);
  uint64_t v30 = (char *)&v75 - v29;
  uint64_t v86 = sub_1AD9DD700();
  uint64_t v31 = *(void *)(v86 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v86, v32);
  uint64_t v35 = (char *)&v75 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33, v36);
  uint64_t v38 = (char *)&v75 - v37;
  sub_1AD860254();
  uint64_t v41 = MEMORY[0x1F4188790](v39 - 8, v40);
  uint64_t v43 = (char *)&v75 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41, v44);
  uint64_t v46 = (char *)&v75 - v45;
  uint64_t v85 = a1;
  if (sub_1AD9DD9B0())
  {
    sub_1AD862E4C(0, &qword_1EB725BB0, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBBE00]);
    uint64_t v79 = v22;
    uint64_t v80 = v46;
    uint64_t v47 = swift_allocObject();
    long long v81 = xmmword_1AD9E3080;
    long long v82 = xmmword_1AD9E47C0;
    *(_OWORD *)(v47 + 16) = xmmword_1AD9E3080;
    *(_OWORD *)(v47 + 32) = xmmword_1AD9E47C0;
    sub_1AD9DDD40();
    long long v106 = v97;
    long long v107 = v98;
    uint64_t v108 = v99;
    uint64_t v78 = v38;
    sub_1AD9DD6F0();
    sub_1AD9DD920();
    uint64_t v48 = swift_allocObject();
    long long v49 = v82;
    *(_OWORD *)(v48 + 16) = v81;
    *(_OWORD *)(v48 + 32) = v49;
    sub_1AD9DDD40();
    long long v103 = v100;
    long long v104 = v101;
    uint64_t v105 = v102;
    uint64_t v76 = v30;
    sub_1AD9DD950();
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    uint64_t v77 = v35;
    uint64_t v51 = v86;
    v50(v35, v38, v86);
    *(void *)&long long v81 = v43;
    uint64_t v52 = v88;
    *(void *)&long long v82 = v18;
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
    uint64_t v54 = v87;
    v53(v94, v30, v87);
    uint64_t v55 = v79;
    v50(v79, v35, v51);
    uint64_t v56 = v89;
    BOOL v57 = &v55[*(int *)(v89 + 48)];
    uint64_t v58 = v94;
    v53(v57, v94, v54);
    uint64_t v43 = (char *)v81;
    (*(void (**)(void, char *, uint64_t))(v31 + 32))(v81, v55, v51);
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v43[*(int *)(v56 + 48)], v57, v54);
    uint64_t v59 = *(void (**)(char *, uint64_t))(v52 + 8);
    v59(v76, v54);
    uint64_t v60 = *(void (**)(char *, uint64_t))(v31 + 8);
    v60(v78, v51);
    v59(v58, v54);
    uint64_t v18 = (char *)v82;
    v60(v77, v51);
    sub_1AD8601D4(0, &qword_1EB725130, MEMORY[0x1E4F19230], MEMORY[0x1E4F19478]);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v43, 0, 1, v61);
    uint64_t v62 = (uint64_t)v80;
    sub_1AD853C78((uint64_t)v43, (uint64_t)v80, (uint64_t (*)(void))sub_1AD860254);
  }
  else
  {
    sub_1AD8601D4(0, &qword_1EB725130, MEMORY[0x1E4F19230], MEMORY[0x1E4F19478]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v46, 1, 1, v63);
    uint64_t v62 = (uint64_t)v46;
  }
  if ((*(unsigned char *)(v95 + *(int *)(type metadata accessor for Somnogram(0) + 20)) & 0x10) != 0)
  {
    sub_1AD860310();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v18, 1, 1, v68);
    goto LABEL_9;
  }
  uint64_t result = sub_1AD9DD990();
  if (v96)
  {
    uint64_t result = _s13SleepHealthUI0A5StageO8rawValueACSgSS_tcfC_0();
    if (result != 5)
    {
      MEMORY[0x1F4188790](result, v65);
      sub_1AD9DD880();
      sub_1AD9DD850();
      sub_1AD8603A4();
      v74[2] = v66;
      v74[3] = sub_1AD844CF8(&qword_1EB725AF8, (void (*)(uint64_t))sub_1AD8603A4);
      v74[0] = sub_1AD861A28;
      v74[1] = v74;
      sub_1AD9DD7E0();
      sub_1AD860310();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v18, 0, 1, v67);
LABEL_9:
      sub_1AD85CF24(v62, (uint64_t)v43, (uint64_t (*)(void))sub_1AD860254);
      uint64_t v69 = v90;
      sub_1AD85CF24((uint64_t)v18, v90, (uint64_t (*)(void))sub_1AD8602DC);
      sub_1AD858840(&qword_1EB725148, (void (*)(uint64_t))sub_1AD860254, (void (*)(void))sub_1AD860618);
      uint64_t v70 = v91;
      sub_1AD85CF24((uint64_t)v43, v91, (uint64_t (*)(void))sub_1AD860254);
      sub_1AD858840(&qword_1EB7259B0, sub_1AD8602DC, (void (*)(void))sub_1AD8606C0);
      uint64_t v71 = v92;
      uint64_t v72 = v70 + *(int *)(v92 + 48);
      sub_1AD85CF24(v69, v72, (uint64_t (*)(void))sub_1AD8602DC);
      uint64_t v73 = v93;
      sub_1AD853C78(v70, v93, (uint64_t (*)(void))sub_1AD860254);
      sub_1AD853C78(v72, v73 + *(int *)(v71 + 48), (uint64_t (*)(void))sub_1AD8602DC);
      sub_1AD847280((uint64_t)v18, (uint64_t (*)(void))sub_1AD8602DC);
      sub_1AD847280(v62, (uint64_t (*)(void))sub_1AD860254);
      sub_1AD847280(v69, (uint64_t (*)(void))sub_1AD8602DC);
      return sub_1AD847280((uint64_t)v43, (uint64_t (*)(void))sub_1AD860254);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD8509D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_1AD8606F4();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD844C00(0, &qword_1EB725A48, (uint64_t (*)(uint64_t))sub_1AD8606F4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v19 - v13;
  sub_1AD9DD830();
  sub_1AD844CF8(&qword_1EB7259C8, MEMORY[0x1E4F19398]);
  sub_1AD9DEBB0();
  if ((*(void *)(a1 + *(int *)(type metadata accessor for Somnogram(0) + 20)) & 4) != 0) {
    uint64_t v15 = 0x4000000000000000;
  }
  else {
    uint64_t v15 = 0x4008000000000000;
  }
  char v16 = sub_1AD9DE780();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v14, v9, v5);
  uint64_t v17 = &v14[*(int *)(v11 + 44)];
  *uint64_t v17 = v16;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = v15;
  *((void *)v17 + 3) = 0;
  *((void *)v17 + 4) = v15;
  v17[40] = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return sub_1AD86218C((uint64_t)v14, a2, &qword_1EB725A48, (uint64_t (*)(uint64_t))sub_1AD8606F4, MEMORY[0x1E4F3CAB0]);
}

uint64_t sub_1AD850C08@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v136 = a3;
  sub_1AD85DB10();
  uint64_t v137 = v5;
  uint64_t v6 = *(void (***)(char *, uint64_t, uint64_t))(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t OpaqueTypeConformance2 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86327C(0, &qword_1EB7251A8, (uint64_t (*)(uint64_t))sub_1AD85D9E4, (uint64_t (*)(uint64_t))sub_1AD85DB10, MEMORY[0x1E4F3D748]);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v138 = (char *)&v126 - v11;
  uint64_t v12 = sub_1AD9DE070();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  char v16 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86327C(0, &qword_1EB7251A0, (uint64_t (*)(uint64_t))sub_1AD85DB10, (uint64_t (*)(uint64_t))sub_1AD8608B8, MEMORY[0x1E4F3CC10]);
  uint64_t v18 = v17;
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)&v126 - v20;
  sub_1AD85D9E4();
  uint64_t v135 = v22;
  uint64_t v24 = MEMORY[0x1F4188790](v22, v23);
  uint64_t v26 = (char *)&v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24, v27);
  uint64_t v146 = a2;
  if (a1)
  {
    unint64_t v131 = (char *)&v126 - v28;
    uint64_t v132 = v29;
    sub_1AD9DE060();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v31 = (uint64_t *)&v21[*(int *)(v18 + 36)];
    sub_1AD8608B8(0);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))((char *)v31 + *(int *)(v32 + 28), v16, v12);
    *uint64_t v31 = KeyPath;
    v6[2](v21, v133, v137);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    sub_1AD9DF330();
    sub_1AD85F2B0(0);
    uint64_t v34 = v33;
    unint64_t v35 = sub_1AD8608EC();
    uint64_t v36 = sub_1AD858840(&qword_1EB725300, sub_1AD85F2B0, (void (*)(void))sub_1AD860D84);
    sub_1AD9DEB10();
    swift_release();
    sub_1AD861478((uint64_t)v21, &qword_1EB7251A0, (uint64_t (*)(uint64_t))sub_1AD85DB10, (uint64_t (*)(uint64_t))sub_1AD8608B8, MEMORY[0x1E4F3CC10]);
    uint64_t v38 = v131;
    uint64_t v37 = v132;
    uint64_t v39 = v135;
    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v131, v26, v135);
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v138, v38, v39);
    swift_storeEnumTagMultiPayload();
    uint64_t v139 = v18;
    uint64_t v140 = v34;
    unint64_t v141 = v35;
    unint64_t v142 = v36;
    uint64_t OpaqueTypeConformance2 = (char *)swift_getOpaqueTypeConformance2();
    sub_1AD85DF14();
    uint64_t v133 = v40;
    sub_1AD844C00(255, &qword_1EB725A48, (uint64_t (*)(uint64_t))sub_1AD8606F4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    unint64_t v130 = v41;
    sub_1AD85E290();
    uint64_t v129 = v42;
    sub_1AD85E5D8();
    uint64_t v128 = v43;
    uint64_t v44 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    uint64_t v46 = v45;
    sub_1AD862E4C(255, &qword_1EB725B50, MEMORY[0x1E4F3EB98], v44);
    unint64_t v127 = v47;
    sub_1AD85E878();
    uint64_t v126 = v48;
    sub_1AD860140();
    uint64_t v50 = v49;
    sub_1AD85EAA8();
    uint64_t v52 = v51;
    sub_1AD85ECA0();
    uint64_t v54 = v53;
    sub_1AD85EE24();
    uint64_t v56 = v55;
    sub_1AD85F83C();
    uint64_t v58 = v57;
    sub_1AD85EF28();
    uint64_t v60 = v59;
    sub_1AD85EFFC();
    uint64_t v62 = v61;
    uint64_t v63 = sub_1AD9DD840();
    uint64_t v64 = sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    uint64_t v139 = v62;
    uint64_t v140 = (char *)v63;
    unint64_t v141 = v64;
    unint64_t v142 = MEMORY[0x1E4F193E0];
    uint64_t v65 = swift_getOpaqueTypeConformance2();
    uint64_t v139 = v60;
    uint64_t v140 = (char *)v65;
    uint64_t v66 = swift_getOpaqueTypeConformance2();
    uint64_t v67 = sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    uint64_t v139 = v56;
    uint64_t v140 = v58;
    unint64_t v141 = v66;
    unint64_t v142 = v67;
    uint64_t v68 = swift_getOpaqueTypeConformance2();
    unint64_t v69 = sub_1AD8600B4();
    uint64_t v139 = v54;
    uint64_t v140 = v46;
    unint64_t v141 = v68;
    unint64_t v142 = v69;
    uint64_t v70 = swift_getOpaqueTypeConformance2();
    uint64_t v139 = v52;
    uint64_t v140 = (char *)v70;
    uint64_t v71 = swift_getOpaqueTypeConformance2();
    uint64_t v72 = sub_1AD844CF8(&qword_1EB725180, (void (*)(uint64_t))sub_1AD860140);
    uint64_t v139 = v126;
    uint64_t v140 = v50;
    unint64_t v141 = v71;
    unint64_t v142 = v72;
    uint64_t v73 = swift_getOpaqueTypeConformance2();
    uint64_t v74 = sub_1AD85CBD0(&qword_1EB725B58, &qword_1EB725B50, MEMORY[0x1E4F3EB98]);
    uint64_t v139 = v128;
    uint64_t v140 = v46;
    unint64_t v141 = v127;
    unint64_t v142 = v73;
    unint64_t v143 = v69;
    uint64_t v144 = v74;
    uint64_t v145 = MEMORY[0x1E4F3EB78];
    uint64_t v75 = swift_getOpaqueTypeConformance2();
    uint64_t v139 = v129;
    uint64_t v140 = (char *)v75;
    uint64_t v76 = swift_getOpaqueTypeConformance2();
    unint64_t v77 = sub_1AD8607A8();
    uint64_t v139 = v133;
    uint64_t v140 = v130;
    unint64_t v141 = v76;
    unint64_t v142 = v77;
    swift_getOpaqueTypeConformance2();
    sub_1AD9DE470();
    return (*(uint64_t (**)(char *, uint64_t))(v132 + 8))(v131, v39);
  }
  else
  {
    unint64_t v130 = (char *)v6;
    uint64_t v79 = v6[2];
    uint64_t v80 = OpaqueTypeConformance2;
    uint64_t v81 = v137;
    v79(OpaqueTypeConformance2, v133, v137);
    v79(v138, (uint64_t)v80, v81);
    swift_storeEnumTagMultiPayload();
    sub_1AD85F2B0(255);
    uint64_t v83 = v82;
    unint64_t v84 = sub_1AD8608EC();
    uint64_t v85 = sub_1AD858840(&qword_1EB725300, sub_1AD85F2B0, (void (*)(void))sub_1AD860D84);
    uint64_t v139 = v18;
    uint64_t v140 = v83;
    unint64_t v141 = v84;
    unint64_t v142 = v85;
    uint64_t v133 = swift_getOpaqueTypeConformance2();
    sub_1AD85DF14();
    uint64_t v132 = v86;
    sub_1AD844C00(255, &qword_1EB725A48, (uint64_t (*)(uint64_t))sub_1AD8606F4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    unint64_t v131 = v87;
    sub_1AD85E290();
    uint64_t v129 = v88;
    sub_1AD85E5D8();
    uint64_t v128 = v89;
    uint64_t v90 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    uint64_t v92 = v91;
    sub_1AD862E4C(255, &qword_1EB725B50, MEMORY[0x1E4F3EB98], v90);
    unint64_t v127 = v93;
    sub_1AD85E878();
    uint64_t v95 = v94;
    sub_1AD860140();
    long long v97 = v96;
    sub_1AD85EAA8();
    uint64_t v99 = v98;
    sub_1AD85ECA0();
    uint64_t v101 = v100;
    sub_1AD85EE24();
    uint64_t v103 = v102;
    sub_1AD85F83C();
    uint64_t v105 = v104;
    sub_1AD85EF28();
    uint64_t v107 = v106;
    sub_1AD85EFFC();
    uint64_t v109 = v108;
    uint64_t v110 = sub_1AD9DD840();
    uint64_t v111 = sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    uint64_t v139 = v109;
    uint64_t v140 = (char *)v110;
    unint64_t v141 = v111;
    unint64_t v142 = MEMORY[0x1E4F193E0];
    uint64_t v112 = swift_getOpaqueTypeConformance2();
    uint64_t v139 = v107;
    uint64_t v140 = (char *)v112;
    uint64_t v113 = swift_getOpaqueTypeConformance2();
    uint64_t v114 = sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    uint64_t v139 = v103;
    uint64_t v140 = v105;
    unint64_t v141 = v113;
    unint64_t v142 = v114;
    uint64_t v115 = swift_getOpaqueTypeConformance2();
    unint64_t v116 = sub_1AD8600B4();
    uint64_t v139 = v101;
    uint64_t v140 = v92;
    unint64_t v141 = v115;
    unint64_t v142 = v116;
    uint64_t v117 = swift_getOpaqueTypeConformance2();
    uint64_t v139 = v99;
    uint64_t v140 = (char *)v117;
    uint64_t v118 = swift_getOpaqueTypeConformance2();
    uint64_t v119 = sub_1AD844CF8(&qword_1EB725180, (void (*)(uint64_t))sub_1AD860140);
    uint64_t v139 = v95;
    uint64_t v140 = v97;
    unint64_t v141 = v118;
    unint64_t v142 = v119;
    uint64_t v120 = swift_getOpaqueTypeConformance2();
    uint64_t v121 = sub_1AD85CBD0(&qword_1EB725B58, &qword_1EB725B50, MEMORY[0x1E4F3EB98]);
    uint64_t v139 = v128;
    uint64_t v140 = v92;
    unint64_t v141 = v127;
    unint64_t v142 = v120;
    unint64_t v143 = v116;
    uint64_t v144 = v121;
    uint64_t v145 = MEMORY[0x1E4F3EB78];
    uint64_t v122 = swift_getOpaqueTypeConformance2();
    uint64_t v139 = v129;
    uint64_t v140 = (char *)v122;
    uint64_t v123 = swift_getOpaqueTypeConformance2();
    unint64_t v124 = sub_1AD8607A8();
    uint64_t v139 = v132;
    uint64_t v140 = v131;
    unint64_t v141 = v123;
    unint64_t v142 = v124;
    swift_getOpaqueTypeConformance2();
    uint64_t v125 = v137;
    sub_1AD9DE470();
    return (*((uint64_t (**)(char *, uint64_t))v130 + 1))(OpaqueTypeConformance2, v125);
  }
}

uint64_t sub_1AD85196C@<X0>(char *a1@<X8>)
{
  sub_1AD85FAE0();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v2, v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v6, v9);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v14 = MEMORY[0x1F4188790](v10, v13);
  char v16 = (char *)&v26 - v15;
  MEMORY[0x1F4188790](v14, v17);
  uint64_t v19 = (char *)&v26 - v18;
  sub_1AD851B94((uint64_t)&v26 - v18);
  sub_1AD851B94((uint64_t)v16);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v20(v12, v19, v3);
  char v27 = 1;
  v20(v8, v16, v3);
  v20(a1, v12, v3);
  sub_1AD8613B8();
  uint64_t v22 = &a1[*(int *)(v21 + 48)];
  char v23 = v27;
  *(void *)uint64_t v22 = 0;
  v22[8] = v23;
  v20(&a1[*(int *)(v21 + 64)], v8, v3);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v24(v16, v3);
  v24(v19, v3);
  v24(v8, v3);
  return ((uint64_t (*)(char *, uint64_t))v24)(v12, v3);
}

id sub_1AD851B94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_1AD85FCFC();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AD9DE930();
  *(void *)&long long v67 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v10);
  *(void *)&long long v66 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1AD9DE940();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  char v16 = (char *)v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (int *)type metadata accessor for Somnogram(0);
  char v18 = *(unsigned char *)(v1 + v17[5]);
  v63[3] = a1;
  v63[2] = v5;
  unint64_t v69 = v8;
  uint64_t v68 = v9;
  if ((v18 & 0x40) != 0)
  {
    id result = objc_msgSend(self, sel_sharedBehavior);
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = result;
    unsigned int v22 = objc_msgSend(result, sel_isAppleWatch);

    if (!v22)
    {
      if (qword_1E9A490C0 != -1) {
        goto LABEL_14;
      }
      goto LABEL_7;
    }
    uint64_t v19 = sub_1AD9DE960();
  }
  else
  {
    sub_1AD9DE980();
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E4F3E0F8], v12);
    sub_1AD9DE970();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    uint64_t v19 = sub_1AD9DE870();
    swift_release();
  }
  while (1)
  {
    char v23 = *(void **)(v2 + v17[6]);
    uint64_t v24 = (void *)sub_1AD9DCBB0();
    id v25 = objc_msgSend(v23, sel_stringFromDate_, v24);

    uint64_t v26 = sub_1AD9DF710();
    uint64_t v28 = v27;

    *(void *)&long long v70 = v26;
    *((void *)&v70 + 1) = v28;
    sub_1AD85F688();
    uint64_t v29 = sub_1AD9DEAF0();
    uint64_t v31 = v30;
    char v33 = v32 & 1;
    swift_retain();
    uint64_t v34 = sub_1AD9DEAB0();
    uint64_t v36 = v35;
    uint64_t v37 = v19;
    char v39 = v38;
    *(void *)&long long v65 = v40;
    swift_release();
    uint64_t v41 = v39 & 1;
    sub_1AD861548(v29, v31, v33);
    swift_bridgeObjectRelease();
    uint64_t v42 = v66;
    sub_1AD966950(v66);
    uint64_t v43 = v2 + v17[10];
    uint64_t v44 = *(void *)v43;
    char v45 = *(unsigned char *)(v43 + 8);
    sub_1AD861F90(*(void *)v43, v45);
    char v46 = sub_1AD966198(v44, v45);
    sub_1AD862078(v44, v45);
    v63[1] = v37;
    if (v46)
    {
      unsigned __int8 v47 = sub_1AD9DE7A0();
      sub_1AD9DE7F0();
      sub_1AD9DDCC0();
      uint64_t v48 = v34;
      uint64_t v79 = v34;
      uint64_t v80 = v36;
      uint64_t v17 = (int *)v65;
      uint64_t v81 = v41;
      uint64_t v82 = v65;
      *(void *)&long long v83 = v47;
      *((void *)&v83 + 1) = v49;
      *(void *)unint64_t v84 = v50;
      *(void *)&v84[8] = v51;
      *(void *)&v84[16] = v52;
      *(_WORD *)&v84[24] = 0;
    }
    else
    {
      uint64_t v48 = v34;
      uint64_t v79 = v34;
      uint64_t v80 = v36;
      uint64_t v17 = (int *)v65;
      uint64_t v81 = v41;
      uint64_t v82 = v65;
      long long v83 = 0u;
      memset(v84, 0, 25);
      v84[25] = 1;
    }
    sub_1AD861558(v34, v36, v41);
    uint64_t v53 = MEMORY[0x1E4F3CAB0];
    sub_1AD861C44(0, &qword_1EB725A30, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    uint64_t v2 = v42;
    sub_1AD863048(&qword_1EB725288, &qword_1EB725A30, v53);
    swift_bridgeObjectRetain();
    sub_1AD9DE470();
    uint64_t v54 = v67;
    long long v67 = v70;
    long long v66 = v71;
    long long v65 = v72;
    long long v64 = v73;
    uint64_t v55 = v74;
    char v56 = v75;
    LOBYTE(v53) = v76;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v42, v68);
    sub_1AD861548(v48, v36, v41);
    swift_bridgeObjectRelease();
    id v57 = objc_msgSend(self, sel_secondaryLabelColor);
    uint64_t v58 = MEMORY[0x1B3E6ADC0](v57);
    uint64_t KeyPath = swift_getKeyPath();
    long long v70 = v67;
    long long v71 = v66;
    long long v72 = v65;
    long long v73 = v64;
    uint64_t v74 = v55;
    char v75 = v56;
    char v76 = v53;
    uint64_t v77 = KeyPath;
    uint64_t v78 = v58;
    uint64_t v60 = *MEMORY[0x1E4F3CB80];
    uint64_t v61 = sub_1AD9DDF50();
    uint64_t v62 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v69, v60, v61);
    sub_1AD844CF8(&qword_1EB725A28, MEMORY[0x1E4F3CB98]);
    if (sub_1AD9DF6C0()) {
      break;
    }
    __break(1u);
LABEL_14:
    swift_once();
LABEL_7:
    uint64_t v19 = qword_1E9A4D500;
    swift_retain();
  }
  sub_1AD85FBE4();
  sub_1AD85FD90(&qword_1EB725278, (void (*)(uint64_t))sub_1AD85FBE4, (void (*)(void))sub_1AD85FE34);
  sub_1AD844CF8(&qword_1EB725B90, (void (*)(uint64_t))sub_1AD85FCFC);
  sub_1AD9DEC80();
  swift_release();
  sub_1AD847280(v62, (uint64_t (*)(void))sub_1AD85FCFC);
  sub_1AD861570(v70, *((uint64_t *)&v70 + 1), v71);
  swift_release();
  return (id)swift_release();
}

uint64_t sub_1AD85235C@<X0>(uint64_t a1@<X8>)
{
  sub_1AD846470(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v15 - v4;
  sub_1AD85FAE0();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1AD9DCC70();
  sub_1AD9DD990();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1AD851B94((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v12);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v11, v7);
  }
  return result;
}

__n128 sub_1AD85254C@<Q0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1AD9DE340();
  sub_1AD8525D4(a1, a2, (uint64_t)&v13);
  char v7 = v14;
  uint64_t v8 = v15;
  char v9 = v18;
  __n128 result = v13;
  long long v11 = v16;
  long long v12 = v17;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  *(__n128 *)(a3 + 24) = result;
  *(unsigned char *)(a3 + 40) = v7;
  *(void *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 56) = v11;
  *(_OWORD *)(a3 + 72) = v12;
  *(unsigned char *)(a3 + 88) = v9;
  return result;
}

uint64_t sub_1AD8525D4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = MEMORY[0x1E4FBB718];
  sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)&v47 - v9;
  int v48 = a1;
  uint64_t v56 = sub_1AD9028B0(a1);
  uint64_t v57 = v11;
  unint64_t v51 = sub_1AD85F688();
  uint64_t v12 = sub_1AD9DEAF0();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  id v50 = self;
  MEMORY[0x1B3E6ADC0](objc_msgSend(v50, sel_labelColor));
  uint64_t v17 = sub_1AD9DEA70();
  uint64_t v52 = v18;
  uint64_t v53 = v17;
  int v49 = v19;
  uint64_t v54 = v20;
  swift_release();
  sub_1AD861548(v12, v14, v16);
  swift_bridgeObjectRelease();
  uint64_t v21 = *(int *)(type metadata accessor for SleepStagesModel(0) + 20);
  uint64_t v55 = a2;
  sub_1AD8614D4(a2 + v21, (uint64_t)v10, (uint64_t)qword_1EB725C18, (uint64_t)type metadata accessor for SleepMetricsWrapper, v6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD846470);
  uint64_t v22 = type metadata accessor for SleepMetricsWrapper(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v10, 1, v22) == 1)
  {
    sub_1AD862084((uint64_t)v10, (uint64_t)qword_1EB725C18, (uint64_t)type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD846470);
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    char v23 = (void *)sub_1AD9DF440();
    sub_1AD847280((uint64_t)v10, type metadata accessor for SleepMetricsWrapper);
    sub_1AD90717C(v48);
  }
  v49 &= 1u;
  uint64_t v24 = sub_1AD9E04C0();
  uint64_t v56 = sub_1AD8E8CDC(v24, v25);
  uint64_t v57 = v26;
  uint64_t v27 = sub_1AD9DEAF0();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  MEMORY[0x1B3E6ADC0](objc_msgSend(v50, sel_secondaryLabelColor));
  uint64_t v32 = sub_1AD9DEA70();
  uint64_t v34 = v33;
  char v36 = v35;
  swift_release();
  sub_1AD861548(v27, v29, v31);
  swift_bridgeObjectRelease();
  type metadata accessor for Somnogram(0);
  sub_1AD953EF0(v32, v34, v36 & 1, (uint64_t)&v56);
  sub_1AD861548(v32, v34, v36 & 1);
  swift_bridgeObjectRelease();
  uint64_t v37 = v56;
  uint64_t v38 = v57;
  uint64_t v39 = v58;
  uint64_t v40 = v59;
  char v41 = v60;
  uint64_t v43 = v52;
  uint64_t v42 = v53;
  *(void *)a3 = v53;
  *(void *)(a3 + 8) = v43;
  char v44 = v49;
  *(unsigned char *)(a3 + 16) = v49;
  *(void *)(a3 + 24) = v54;
  *(void *)(a3 + 32) = v37;
  *(void *)(a3 + 40) = v38;
  *(void *)(a3 + 48) = v39;
  *(void *)(a3 + 56) = v40;
  *(unsigned char *)(a3 + 64) = v41 & 1;
  char v45 = v44;
  sub_1AD861558(v42, v43, v44);
  swift_bridgeObjectRetain();
  sub_1AD861A34(v37, v38, v39);
  sub_1AD861570(v37, v38, v39);
  sub_1AD861548(v42, v43, v45);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD852A18()
{
  return sub_1AD9DE0C0();
}

uint64_t sub_1AD852A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AD85D438(a1, a2, a3, a4, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3CF08]);
}

uint64_t sub_1AD852A68()
{
  return sub_1AD9DE180();
}

uint64_t sub_1AD852A8C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_1AD9DE330();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  sub_1AD85D78C(0, &qword_1EB725190, sub_1AD85D7F8);
  return sub_1AD84B174(v1, (char *)(a1 + *(int *)(v3 + 44)));
}

uint64_t GridView.body.getter@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *a1 = sub_1AD853FB8;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t sub_1AD852B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DDDF0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t result = MEMORY[0x1F4188790](v4, v7);
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else if (((a2 - 1) & 0x8000000000000000) == 0)
  {
    v11[0] = 0;
    v11[1] = a2 - 1;
    swift_getKeyPath();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = a2;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    sub_1AD861C44(0, &qword_1EB7253F0, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    sub_1AD844C00(0, &qword_1EB7253C0, (uint64_t (*)(uint64_t))sub_1AD85860C, MEMORY[0x1E4F3CC98], MEMORY[0x1E4F3CC10]);
    sub_1AD858748();
    sub_1AD8588B0();
    return sub_1AD9DF250();
  }
  __break(1u);
  return result;
}

double sub_1AD852D6C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *a1;
  sub_1AD9DDDE0();
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_5;
  }
  double v4 = v12;
  sub_1AD9DDD40();
  uint64_t v5 = v19;
  uint64_t v6 = v20;
  uint64_t v7 = v21;
  uint64_t v3 = v22;
  uint64_t v8 = v23;
  if (qword_1EB7253D0 != -1) {
LABEL_5:
  }
    swift_once();
  double v13 = v4 / (double)a2;
  double v14 = v13 * (double)(v11 + 1)
      + v13 * 0.5
      + (v13 * (double)v11 + v13 * 0.5 - (v13 * (double)(v11 + 1) + v13 * 0.5)) * 0.5;
  uint64_t v15 = qword_1EB7253C8;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  sub_1AD9DDDE0();
  double result = v17 * 0.5;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v3;
  *(void *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = KeyPath;
  *(void *)(a3 + 48) = v15;
  *(double *)(a3 + 56) = result;
  *(double *)(a3 + 64) = v14;
  return result;
}

uint64_t sub_1AD852EB4@<X0>(uint64_t (**a1)(uint64_t)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *a1 = sub_1AD863B44;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t sub_1AD852F04(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRectGetMinX(*(CGRect *)&a1);
  v9.origin.x = a1;
  v9.origin.y = a2;
  v9.size.width = a3;
  v9.size.height = a4;
  CGRectGetMidY(v9);
  sub_1AD9DEA10();
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMaxX(v10);
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.width = a3;
  v11.size.height = a4;
  CGRectGetMidY(v11);
  return sub_1AD9DEA20();
}

double sub_1AD852FAC@<D0>(uint64_t a1@<X8>)
{
  sub_1AD9DEA50();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1AD853018()
{
  return MEMORY[0x1F40FC680]();
}

void (*sub_1AD853034(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1AD9DDC80();
  return sub_1AD8530A4;
}

void sub_1AD8530A4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_1AD8530F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD858688();
  return MEMORY[0x1F40FC6D8](a1, a2, a3, v6);
}

uint64_t sub_1AD853154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD858688();
  return MEMORY[0x1F40FC690](a1, a2, a3, v6);
}

uint64_t sub_1AD8531B8(uint64_t a1)
{
  unint64_t v2 = sub_1AD858688();
  return MEMORY[0x1F40FC6B0](a1, v2);
}

uint64_t sub_1AD853204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD853284(a1, type metadata accessor for SleepDayModel.SegmentModel, (char *)sub_1AD861D38, (void (*)(char *))sub_1AD861D50, a2);
}

uint64_t sub_1AD853244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD853284(a1, type metadata accessor for SleepStageSegment, (char *)sub_1AD861E7C, (void (*)(char *))sub_1AD861E94, a2);
}

uint64_t sub_1AD853284@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, char *a3@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v86 = a3;
  uint64_t v87 = a4;
  uint64_t v8 = sub_1AD9DCC70();
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v81 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v80 = (char *)&v72 - v13;
  sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  double v17 = (char *)&v72 - v16;
  uint64_t v85 = a2(0);
  uint64_t v18 = *(void *)(v85 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v85, v19);
  uint64_t v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v23);
  uint64_t v25 = (char *)&v72 - v24;
  uint64_t v26 = sub_1AD9DC7C0();
  uint64_t v28 = MEMORY[0x1F4188790](v26, v27);
  long long v83 = (char *)&v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v28, v30);
  uint64_t v79 = (char *)&v72 - v32;
  uint64_t v34 = MEMORY[0x1F4188790](v31, v33);
  uint64_t v82 = (char *)&v72 - v35;
  uint64_t v37 = MEMORY[0x1F4188790](v34, v36);
  char v76 = (char *)&v72 - v38;
  MEMORY[0x1F4188790](v37, v39);
  uint64_t v42 = (char *)&v72 - v41;
  int64_t v43 = *(void *)(a1 + 16);
  if (v43)
  {
    uint64_t v78 = (uint64_t *)v22;
    uint64_t v74 = v17;
    uint64_t v75 = a5;
    uint64_t v92 = MEMORY[0x1E4FBC860];
    uint64_t v88 = v40;
    sub_1AD8A2648(0, v43, 0);
    char v44 = (void (**)(char *, uint64_t))(a1
                                                + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)));
    unint64_t v84 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v18 + 72);
    uint64_t v90 = (void (**)(char *, char *, uint64_t))(v88 + 16);
    uint64_t v91 = v88 + 32;
    uint64_t v77 = v44;
    do
    {
      ((void (*)(void, char *))v86)(v44, v25);
      char v45 = &v25[*(int *)(v85 + 20)];
      uint64_t v89 = *v90;
      v89(v42, v45, v26);
      v87(v25);
      uint64_t v46 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AD8A2648(0, *(void *)(v46 + 16) + 1, 1);
        uint64_t v46 = v92;
      }
      uint64_t v47 = v88;
      unint64_t v49 = *(void *)(v46 + 16);
      unint64_t v48 = *(void *)(v46 + 24);
      if (v49 >= v48 >> 1)
      {
        sub_1AD8A2648(v48 > 1, v49 + 1, 1);
        uint64_t v47 = v88;
        uint64_t v46 = v92;
      }
      *(void *)(v46 + 16) = v49 + 1;
      unint64_t v50 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      uint64_t v51 = *(void *)(v47 + 72);
      uint64_t v52 = *(void (**)(unint64_t, char *, uint64_t))(v47 + 32);
      v52(v46 + v50 + v51 * v49, v42, v26);
      uint64_t v92 = v46;
      char v44 = (void (**)(char *, uint64_t))((char *)v84 + (void)v44);
      --v43;
    }
    while (v43);
    uint64_t v53 = v78;
    ((void (*)(void, uint64_t *))v86)(v77, v78);
    uint64_t v54 = v76;
    uint64_t v55 = v89;
    v89(v76, (char *)v53 + *(int *)(v85 + 20), v26);
    v87((char *)v53);
    v55(v82, v54, v26);
    uint64_t v56 = *(void (**)(char *))(v46 + 16);
    uint64_t v57 = (uint64_t *)(v88 + 56);
    if (v56)
    {
      unint64_t v84 = (unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
      uint64_t v77 = (void (**)(char *, uint64_t))(v88 + 8);
      swift_retain();
      uint64_t v58 = (char *)(v46 + v50);
      unint64_t v73 = (unint64_t)v57 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v59 = v74;
      uint64_t v78 = v57;
      while (1)
      {
        v89(v59, v58, v26);
        char v60 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))*v57;
        ((void (*)(char *, void, uint64_t, uint64_t))*v57)(v59, 0, 1, v26);
        if ((*v84)(v59, 1, v26) == 1) {
          break;
        }
        uint64_t v85 = (uint64_t)v60;
        uint64_t v61 = v79;
        v52((unint64_t)v79, v59, v26);
        uint64_t v62 = v26;
        uint64_t v63 = v82;
        uint64_t v86 = v58;
        sub_1AD9DC780();
        uint64_t v87 = v56;
        sub_1AD9DC750();
        long long v64 = v87;
        sub_1AD9DC760();
        long long v65 = *v77;
        long long v66 = v61;
        uint64_t v57 = v78;
        (*v77)(v66, v62);
        v65(v63, v62);
        long long v67 = v86;
        uint64_t v68 = v63;
        uint64_t v26 = v62;
        v52((unint64_t)v68, v83, v62);
        uint64_t v58 = &v67[v51];
        uint64_t v56 = (void (*)(char *))((char *)v64 - 1);
        if (!v56) {
          goto LABEL_17;
        }
      }
      uint64_t v71 = v75;
    }
    else
    {
      uint64_t v85 = *v57;
      swift_retain();
      unint64_t v73 = (unint64_t)v57 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v59 = v74;
LABEL_17:
      char v60 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v85;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v85)(v59, 1, 1, v26);
      uint64_t v71 = v75;
    }
    swift_release();
    v52(v71, v82, v26);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v76, v26);
    swift_release();
    return v60(v71, 0, 1, v26);
  }
  else
  {
    unint64_t v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
    return v69(a5, 1, 1, v26);
  }
}

double sub_1AD853984(uint64_t a1)
{
  return sub_1AD853A04(a1, type metadata accessor for SleepStageSegment, (void (*)(uint64_t, char *))sub_1AD861E7C, (void (*)(char *))sub_1AD861E94);
}

double sub_1AD8539C4(uint64_t a1)
{
  return sub_1AD853A04(a1, type metadata accessor for SleepDayModel.SegmentModel, (void (*)(uint64_t, char *))sub_1AD861D38, (void (*)(char *))sub_1AD861D50);
}

double sub_1AD853A04(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t, char *), void (*a4)(char *))
{
  uint64_t v25 = a4;
  uint64_t v6 = a2(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v25 - v9;
  int64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v26 = MEMORY[0x1E4FBC860];
    sub_1AD8A25D8(0, v11, 0);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v13 = *(void *)(v7 + 72);
    uint64_t v14 = v26;
    do
    {
      a3(v12, v10);
      sub_1AD9DC7A0();
      uint64_t v16 = v15;
      v25(v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AD8A25D8(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v26;
      }
      unint64_t v18 = *(void *)(v14 + 16);
      unint64_t v17 = *(void *)(v14 + 24);
      unint64_t v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        sub_1AD8A25D8(v17 > 1, v18 + 1, 1);
        uint64_t v14 = v26;
      }
      *(void *)(v14 + 16) = v19;
      *(void *)(v14 + 8 * v18 + 32) = v16;
      v12 += v13;
      --v11;
    }
    while (v11);
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    unint64_t v19 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v19)
    {
      double v21 = 0.0;
      goto LABEL_18;
    }
  }
  if (v19 >= 2)
  {
    uint64_t v22 = 0;
    unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
    double v21 = 0.0;
    do
    {
      double v21 = v21 + *(double *)(v14 + 8 * v22 + 32) + *(double *)(v14 + 8 * v22 + 40);
      v22 += 2;
    }
    while (v20 != v22);
    goto LABEL_17;
  }
  unint64_t v20 = 0;
  double v21 = 0.0;
  do
  {
    double v23 = *(double *)(v14 + 8 * v20++ + 32);
    double v21 = v21 + v23;
LABEL_17:
    ;
  }
  while (v19 != v20);
LABEL_18:
  swift_bridgeObjectRelease();
  return v21;
}

unint64_t sub_1AD853C38()
{
  unint64_t result = qword_1EB725C98;
  if (!qword_1EB725C98)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB725C98);
  }
  return result;
}

uint64_t sub_1AD853C78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD853CE0()
{
  return sub_1AD853F24((uint64_t (*)(uint64_t))sub_1AD848534);
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = (int *)(type metadata accessor for SleepStagesChart(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  uint64_t v3 = v2 + v1[7];
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for SleepStagesModel(0);
  uint64_t v5 = v3 + *(int *)(v4 + 20);
  uint64_t v6 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  }
  uint64_t v8 = v3 + *(int *)(v4 + 24);
  uint64_t v9 = sub_1AD9DC7C0();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  return swift_deallocObject();
}

uint64_t sub_1AD853F0C()
{
  return sub_1AD853F24((uint64_t (*)(uint64_t))sub_1AD84890C);
}

uint64_t sub_1AD853F24(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for SleepStagesChart(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3);
}

uint64_t sub_1AD853FA8()
{
  return swift_deallocObject();
}

uint64_t sub_1AD853FB8(uint64_t a1)
{
  return sub_1AD852B4C(a1, *(void *)(v1 + 16));
}

unint64_t sub_1AD853FC4()
{
  unint64_t result = qword_1E9A49AB8;
  if (!qword_1E9A49AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49AB8);
  }
  return result;
}

unint64_t sub_1AD85401C()
{
  unint64_t result = qword_1E9A49AC0;
  if (!qword_1E9A49AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49AC0);
  }
  return result;
}

unint64_t sub_1AD854074()
{
  unint64_t result = qword_1EB725770;
  if (!qword_1EB725770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725770);
  }
  return result;
}

unint64_t sub_1AD8540CC()
{
  unint64_t result = qword_1EB725778;
  if (!qword_1EB725778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725778);
  }
  return result;
}

uint64_t sub_1AD854120()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD85413C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1AD85415C()
{
  unint64_t result = qword_1E9A49AC8;
  if (!qword_1E9A49AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49AC8);
  }
  return result;
}

unint64_t sub_1AD8541B4()
{
  unint64_t result = qword_1E9A49AD0;
  if (!qword_1E9A49AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49AD0);
  }
  return result;
}

unint64_t sub_1AD85420C()
{
  unint64_t result = qword_1E9A49AD8;
  if (!qword_1E9A49AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49AD8);
  }
  return result;
}

unint64_t sub_1AD854264()
{
  unint64_t result = qword_1E9A49AE0;
  if (!qword_1E9A49AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49AE0);
  }
  return result;
}

uint64_t sub_1AD8542B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8542D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepStagesDiagram(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for SleepStagesModel(0);
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v29 = v10;
    uint64_t v30 = v9;
    __dst = &v9[v12];
    uint64_t v28 = v11;
    uint64_t v13 = &v10[v12];
    uint64_t v14 = type metadata accessor for SleepMetricsWrapper(0);
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(__dst, v13, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v20 = *(int *)(v28 + 24);
    double v21 = &v30[v20];
    uint64_t v22 = &v29[v20];
    uint64_t v23 = sub_1AD9DC7C0();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(void *)&v30[*(int *)(v28 + 28)] = *(void *)&v29[*(int *)(v28 + 28)];
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

void *initializeWithCopy for SleepStagesDiagram(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)((char *)a1 + v5) = *(void *)((char *)a2 + v5);
  uint64_t v8 = type metadata accessor for SleepStagesModel(0);
  uint64_t v9 = *(int *)(v8 + 20);
  __dst = &v6[v9];
  uint64_t v24 = v8;
  uint64_t v10 = &v7[v9];
  uint64_t v11 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(__dst, v10, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v16 = *(int *)(v24 + 24);
  uint64_t v17 = &v6[v16];
  uint64_t v18 = &v7[v16];
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(void *)&v6[*(int *)(v24 + 28)] = *(void *)&v7[*(int *)(v24 + 28)];
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithCopy for SleepStagesDiagram(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v30 = a3;
  uint64_t v31 = a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v9 = v32[5];
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  uint64_t v12 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v10, v11, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_1AD847280((uint64_t)v10, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v10, v11, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(v10, v11, v29);
LABEL_7:
  uint64_t v19 = v32[6];
  uint64_t v20 = &v7[v19];
  uint64_t v21 = &v8[v19];
  uint64_t v22 = sub_1AD9DC7C0();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  *(void *)&v7[v32[7]] = *(void *)&v8[v32[7]];
  *(void *)((char *)a1 + *(int *)(v30 + 24)) = *(void *)((char *)v31 + *(int *)(v30 + 24));
  return a1;
}

_OWORD *initializeWithTake for SleepStagesDiagram(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = v9[6];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  uint64_t v20 = sub_1AD9DC7C0();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for SleepStagesDiagram(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  swift_bridgeObjectRelease();
  uint64_t v33 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v10 = v33[5];
  uint64_t v11 = &v8[v10];
  uint64_t v12 = &v9[v10];
  uint64_t v13 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v11, v12, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_1AD847280((uint64_t)v11, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 40))(v11, v12, v30);
LABEL_7:
  uint64_t v20 = v33[6];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  uint64_t v23 = sub_1AD9DC7C0();
  uint64_t v24 = *(void *)(v23 - 8);
  int v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_13:
  *(void *)&v8[v33[7]] = *(void *)&v9[v33[7]];
  *(void *)((char *)a1 + *(int *)(v31 + 24)) = *(void *)((char *)v32 + *(int *)(v31 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStagesDiagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for SleepStagesDiagram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t sub_1AD855500()
{
  uint64_t result = type metadata accessor for SleepStagesModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesDiagram.Options()
{
  return &type metadata for SleepStagesDiagram.Options;
}

uint64_t *initializeBufferWithCopyOfBuffer for OneDaySleepStagesDiagram(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    *(uint64_t *)((char *)a1 + v6) = *(uint64_t *)((char *)a2 + v6);
    uint64_t v9 = type metadata accessor for SleepStagesModel(0);
    uint64_t v10 = *(int *)(v9 + 20);
    __dst = &v7[v10];
    uint64_t v26 = v9;
    uint64_t v11 = &v8[v10];
    uint64_t v12 = type metadata accessor for SleepMetricsWrapper(0);
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
      memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(__dst, v11, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v18 = *(int *)(v26 + 24);
    uint64_t v19 = &v7[v18];
    uint64_t v20 = &v8[v18];
    uint64_t v21 = sub_1AD9DC7C0();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    *(void *)&v7[*(int *)(v26 + 28)] = *(void *)&v8[*(int *)(v26 + 28)];
  }
  return v3;
}

uint64_t _s13SleepHealthUI18SleepStagesDiagramVwxx_0(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for SleepStagesModel(0);
  uint64_t v6 = v4 + *(int *)(v5 + 20);
  uint64_t v7 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
  }
  uint64_t v9 = v4 + *(int *)(v5 + 24);
  uint64_t v10 = sub_1AD9DC7C0();
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v9, v10);
  }
  return result;
}

void *initializeWithCopy for OneDaySleepStagesDiagram(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)((char *)a1 + v5) = *(void *)((char *)a2 + v5);
  uint64_t v8 = type metadata accessor for SleepStagesModel(0);
  uint64_t v9 = *(int *)(v8 + 20);
  __dst = &v6[v9];
  uint64_t v24 = v8;
  uint64_t v10 = &v7[v9];
  uint64_t v11 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(__dst, v10, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v16 = *(int *)(v24 + 24);
  uint64_t v17 = &v6[v16];
  uint64_t v18 = &v7[v16];
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(void *)&v6[*(int *)(v24 + 28)] = *(void *)&v7[*(int *)(v24 + 28)];
  return a1;
}

void *assignWithCopy for OneDaySleepStagesDiagram(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v9 = v30[5];
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  uint64_t v12 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v10, v11, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_1AD847280((uint64_t)v10, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v10, v11, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(v10, v11, v29);
LABEL_7:
  uint64_t v19 = v30[6];
  uint64_t v20 = &v7[v19];
  uint64_t v21 = &v8[v19];
  uint64_t v22 = sub_1AD9DC7C0();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  *(void *)&v7[v30[7]] = *(void *)&v8[v30[7]];
  return a1;
}

_OWORD *initializeWithTake for OneDaySleepStagesDiagram(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v9, v10, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = v7[6];
  int v16 = &v5[v15];
  uint64_t v17 = &v6[v15];
  uint64_t v18 = sub_1AD9DC7C0();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(void *)&v5[v7[7]] = *(void *)&v6[v7[7]];
  return a1;
}

void *assignWithTake for OneDaySleepStagesDiagram(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  swift_bridgeObjectRelease();
  uint64_t v31 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v10 = v31[5];
  uint64_t v11 = &v8[v10];
  uint64_t v12 = &v9[v10];
  uint64_t v13 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v11, v12, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_1AD847280((uint64_t)v11, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 40))(v11, v12, v30);
LABEL_7:
  uint64_t v20 = v31[6];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  uint64_t v23 = sub_1AD9DC7C0();
  uint64_t v24 = *(void *)(v23 - 8);
  int v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_13:
  *(void *)&v8[v31[7]] = *(void *)&v9[v31[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for OneDaySleepStagesDiagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for OneDaySleepStagesDiagram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t sub_1AD856908()
{
  uint64_t result = type metadata accessor for SleepStagesModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SleepStagesChart(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for SleepStagesModel(0);
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v30 = v10;
    uint64_t v31 = v9;
    __dst = &v9[v12];
    uint64_t v29 = v11;
    uint64_t v13 = &v10[v12];
    uint64_t v14 = type metadata accessor for SleepMetricsWrapper(0);
    uint64_t v15 = *(void *)(v14 - 8);
    int v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(__dst, v13, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v20 = *(int *)(v29 + 24);
    uint64_t v21 = &v31[v20];
    uint64_t v22 = &v30[v20];
    uint64_t v23 = sub_1AD9DC7C0();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(void *)&v31[*(int *)(v29 + 28)] = *(void *)&v30[*(int *)(v29 + 28)];
    uint64_t v26 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *(void *)((char *)v4 + v26) = *(void *)((char *)a2 + v26);
  }
  return v4;
}

void *initializeWithCopy for SleepStagesChart(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v25 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v26 = v7;
  uint64_t v9 = v25[5];
  __dst = &v7[v9];
  uint64_t v10 = &v8[v9];
  uint64_t v11 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(__dst, v10, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v16 = v25[6];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(void *)&v26[v25[7]] = *(void *)&v8[v25[7]];
  uint64_t v22 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  return a1;
}

void *assignWithCopy for SleepStagesChart(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v30 = a3;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v32 = v8;
  uint64_t v9 = v31[5];
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  uint64_t v12 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v10, v11, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_1AD847280((uint64_t)v10, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v10, v11, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(v10, v11, v29);
LABEL_7:
  uint64_t v19 = v31[6];
  uint64_t v20 = &v7[v19];
  uint64_t v21 = &v8[v19];
  uint64_t v22 = sub_1AD9DC7C0();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  *(void *)&v7[v31[7]] = *(void *)&v32[v31[7]];
  *((unsigned char *)a1 + *(int *)(v30 + 24)) = *((unsigned char *)a2 + *(int *)(v30 + 24));
  *(void *)((char *)a1 + *(int *)(v30 + 28)) = *(void *)((char *)a2 + *(int *)(v30 + 28));
  return a1;
}

_OWORD *initializeWithTake for SleepStagesChart(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = v9[6];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  uint64_t v20 = sub_1AD9DC7C0();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  uint64_t v23 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);
  return a1;
}

void *assignWithTake for SleepStagesChart(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  uint64_t v32 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  swift_bridgeObjectRelease();
  uint64_t v33 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v34 = v9;
  uint64_t v10 = v33[5];
  uint64_t v11 = &v8[v10];
  uint64_t v12 = &v9[v10];
  uint64_t v13 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v11, v12, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_1AD847280((uint64_t)v11, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40))(v11, v12, v31);
LABEL_7:
  uint64_t v20 = v33[6];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  uint64_t v23 = sub_1AD9DC7C0();
  uint64_t v24 = *(void *)(v23 - 8);
  int v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_13:
  *(void *)&v8[v33[7]] = *(void *)&v34[v33[7]];
  uint64_t v29 = *(int *)(v32 + 28);
  *((unsigned char *)a1 + *(int *)(v32 + 24)) = *((unsigned char *)a2 + *(int *)(v32 + 24));
  *(void *)((char *)a1 + v29) = *(void *)((char *)a2 + v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStagesChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD857BC4);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SleepStagesModel(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SleepStagesChart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD857C8C);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SleepStagesModel(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1AD857D38()
{
  uint64_t result = type metadata accessor for SleepStagesModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesChart.Options()
{
  return &type metadata for SleepStagesChart.Options;
}

ValueMetadata *type metadata accessor for GridView()
{
  return &type metadata for GridView;
}

unint64_t sub_1AD857E0C()
{
  unint64_t result = qword_1EB725A90;
  if (!qword_1EB725A90)
  {
    sub_1AD8620E4(255, &qword_1EB725A98, MEMORY[0x1E4F3D750]);
    sub_1AD858840(&qword_1EB725AD8, (void (*)(uint64_t))sub_1AD8449C4, (void (*)(void))sub_1AD857EE4);
    sub_1AD858018();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725A90);
  }
  return result;
}

unint64_t sub_1AD857EE4()
{
  unint64_t result = qword_1EB725AA0;
  if (!qword_1EB725AA0)
  {
    sub_1AD844C00(255, &qword_1EB725AA8, (uint64_t (*)(uint64_t))sub_1AD844A54, (uint64_t)&type metadata for GridView, MEMORY[0x1E4F3D750]);
    sub_1AD844CF8(&qword_1EB725AE8, (void (*)(uint64_t))sub_1AD844A54);
    sub_1AD857FC4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725AA0);
  }
  return result;
}

unint64_t sub_1AD857FC4()
{
  unint64_t result = qword_1EB7258A0;
  if (!qword_1EB7258A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB7258A0);
  }
  return result;
}

unint64_t sub_1AD858018()
{
  unint64_t result = qword_1EB725A50;
  if (!qword_1EB725A50)
  {
    sub_1AD844C00(255, &qword_1EB725A58, (uint64_t (*)(uint64_t))sub_1AD8449C4, MEMORY[0x1E4F3CE48], MEMORY[0x1E4F3CC10]);
    sub_1AD858840(&qword_1EB725AD8, (void (*)(uint64_t))sub_1AD8449C4, (void (*)(void))sub_1AD857EE4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725A50);
  }
  return result;
}

uint64_t sub_1AD85810C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD858194()
{
  return sub_1AD844CF8(&qword_1E9A49B08, (void (*)(uint64_t))sub_1AD8581DC);
}

void sub_1AD8581DC()
{
  if (!qword_1E9A49B10)
  {
    sub_1AD844C00(255, &qword_1E9A49B18, type metadata accessor for SleepStagesDiagram, (uint64_t)&type metadata for SleepDataUnavailable, MEMORY[0x1E4F3D750]);
    type metadata accessor for SleepStagesLegend(255);
    sub_1AD8582F0();
    sub_1AD844CF8(&qword_1E9A49B38, (void (*)(uint64_t))type metadata accessor for SleepStagesLegend);
    unint64_t v0 = type metadata accessor for InfographicGrid();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49B10);
    }
  }
}

uint64_t type metadata accessor for SleepStagesLegend(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A49B48);
}

unint64_t sub_1AD8582F0()
{
  unint64_t result = qword_1E9A49B20;
  if (!qword_1E9A49B20)
  {
    sub_1AD844C00(255, &qword_1E9A49B18, type metadata accessor for SleepStagesDiagram, (uint64_t)&type metadata for SleepDataUnavailable, MEMORY[0x1E4F3D750]);
    sub_1AD844CF8(&qword_1E9A49B28, (void (*)(uint64_t))type metadata accessor for SleepStagesDiagram);
    sub_1AD8583D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49B20);
  }
  return result;
}

unint64_t sub_1AD8583D0()
{
  unint64_t result = qword_1E9A49B30;
  if (!qword_1E9A49B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49B30);
  }
  return result;
}

uint64_t sub_1AD858424()
{
  return sub_1AD844CF8(&qword_1EB725398, (void (*)(uint64_t))sub_1AD85846C);
}

void sub_1AD85846C()
{
  if (!qword_1EB7253A0)
  {
    sub_1AD858514();
    sub_1AD858840(&qword_1EB7253D8, (void (*)(uint64_t))sub_1AD858514, (void (*)(void))sub_1AD8588B0);
    unint64_t v0 = sub_1AD9DDEE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB7253A0);
    }
  }
}

void sub_1AD858514()
{
  if (!qword_1EB7253E0)
  {
    sub_1AD861C44(255, &qword_1EB7253F0, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    sub_1AD844C00(255, &qword_1EB7253C0, (uint64_t (*)(uint64_t))sub_1AD85860C, MEMORY[0x1E4F3CC98], MEMORY[0x1E4F3CC10]);
    sub_1AD858748();
    unint64_t v0 = sub_1AD9DF270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB7253E0);
    }
  }
}

void sub_1AD85860C(uint64_t a1)
{
}

void sub_1AD85862C()
{
  if (!qword_1EB725390)
  {
    sub_1AD858688();
    unint64_t v0 = sub_1AD9DDE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725390);
    }
  }
}

unint64_t sub_1AD858688()
{
  unint64_t result = qword_1EB725380;
  if (!qword_1EB725380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725380);
  }
  return result;
}

void sub_1AD8586DC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_1AD862E4C(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = sub_1AD9DE6D0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1AD858748()
{
  unint64_t result = qword_1EB7253F8;
  if (!qword_1EB7253F8)
  {
    sub_1AD861C44(255, &qword_1EB7253F0, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    sub_1AD8587EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB7253F8);
  }
  return result;
}

unint64_t sub_1AD8587EC()
{
  unint64_t result = qword_1EB7253E8;
  if (!qword_1EB7253E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB7253E8);
  }
  return result;
}

uint64_t sub_1AD858840(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD8588B0()
{
  unint64_t result = qword_1EB7253B8;
  if (!qword_1EB7253B8)
  {
    sub_1AD844C00(255, &qword_1EB7253C0, (uint64_t (*)(uint64_t))sub_1AD85860C, MEMORY[0x1E4F3CC98], MEMORY[0x1E4F3CC10]);
    sub_1AD85FD90(&qword_1EB7253A8, sub_1AD85860C, (void (*)(void))sub_1AD858990);
    sub_1AD8589C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB7253B8);
  }
  return result;
}

uint64_t sub_1AD858990()
{
  return sub_1AD844CF8(&qword_1EB725388, (void (*)(uint64_t))sub_1AD85862C);
}

unint64_t sub_1AD8589C4()
{
  unint64_t result = qword_1E9A49B40;
  if (!qword_1E9A49B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49B40);
  }
  return result;
}

ValueMetadata *type metadata accessor for HLine()
{
  return &type metadata for HLine;
}

void *sub_1AD858A28(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v23 = (int *)type metadata accessor for SleepStagesModel(0);
    uint64_t v8 = v23[5];
    uint64_t v9 = (char *)v7 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SleepMetricsWrapper(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v9, v10, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = v23[6];
    int v17 = (char *)v7 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = sub_1AD9DC7C0();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(void *)((char *)v7 + v23[7]) = *(void *)((char *)a2 + v23[7]);
    *((unsigned char *)v7 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return v7;
}

uint64_t sub_1AD858D68(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for SleepStagesModel(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
  }
  uint64_t v6 = a1 + *(int *)(v2 + 24);
  uint64_t v7 = sub_1AD9DC7C0();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v6, v7);
  }
  return result;
}

void *sub_1AD858F10(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v7, v8, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v14 = v5[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_1AD9DC7C0();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(void *)((char *)a1 + v5[7]) = *(void *)((char *)a2 + v5[7]);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1AD859204(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1AD847280((uint64_t)v7, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24))(v7, v8, v26);
LABEL_7:
  uint64_t v16 = v5[6];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  *(void *)((char *)a1 + v5[7]) = *(void *)((char *)a2 + v5[7]);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1AD85960C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v8, v9, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = v6[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_1AD9DC7C0();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1AD8598E4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v7, v8, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1AD847280((uint64_t)v7, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 40))(v7, v8, v26);
LABEL_7:
  uint64_t v16 = v5[6];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  *(void *)((char *)a1 + v5[7]) = *(void *)((char *)a2 + v5[7]);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1AD859CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD859CF8);
}

uint64_t sub_1AD859CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepStagesModel(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1AD859DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD859DDC);
}

uint64_t sub_1AD859DDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SleepStagesModel(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t sub_1AD859E98()
{
  uint64_t result = type metadata accessor for SleepStagesModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AD859F2C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    int64_t v43 = (int *)type metadata accessor for SleepStagesModel(0);
    uint64_t v8 = v43[5];
    uint64_t v9 = (char *)v7 + v8;
    unsigned int v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SleepMetricsWrapper(0);
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v9, v10, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = v43[6];
    uint64_t v17 = (char *)v7 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = sub_1AD9DC7C0();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(uint64_t *)((char *)v7 + v43[7]) = *(uint64_t *)((char *)a2 + v43[7]);
    uint64_t v22 = a3[6];
    *(uint64_t *)((char *)v7 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    int v23 = *(void **)((char *)a2 + v22);
    *(uint64_t *)((char *)v7 + v22) = (uint64_t)v23;
    uint64_t v24 = a3[7];
    int v25 = (uint64_t *)((char *)v7 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    sub_1AD846470(0, &qword_1EB725A10, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648]);
    id v27 = v23;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = sub_1AD9DDD20();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(v25, v26, v28);
    }
    else
    {
      void *v25 = *v26;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = a3[8];
    uint64_t v30 = (uint64_t *)((char *)v7 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    sub_1AD846470(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v32 = sub_1AD9DE320();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
    }
    else
    {
      *uint64_t v30 = *v31;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v33 = a3[9];
    uint64_t v34 = (uint64_t *)((char *)v7 + v33);
    uint64_t v35 = (uint64_t *)((char *)a2 + v33);
    sub_1AD846470(0, &qword_1EB725270, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C648]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v36 = sub_1AD9DE930();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
    }
    else
    {
      *uint64_t v34 = *v35;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = a3[10];
    uint64_t v38 = (char *)v7 + v37;
    uint64_t v39 = (char *)a2 + v37;
    uint64_t v40 = *(void *)v39;
    char v41 = v39[8];
    sub_1AD861F90(*(void *)v39, v41);
    *(void *)uint64_t v38 = v40;
    v38[8] = v41;
  }
  return v7;
}

uint64_t sub_1AD85A4D4(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for SleepStagesModel(0);
  uint64_t v5 = a1 + *(int *)(v4 + 20);
  uint64_t v6 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  }
  uint64_t v8 = a1 + *(int *)(v4 + 24);
  uint64_t v9 = sub_1AD9DC7C0();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }

  uint64_t v11 = a1 + a2[7];
  sub_1AD846470(0, &qword_1EB725A10, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_1AD9DDD20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = a1 + a2[8];
  sub_1AD846470(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1AD9DE320();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = a1 + a2[9];
  sub_1AD846470(0, &qword_1EB725270, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_1AD9DE930();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release();
  }
  uint64_t v17 = a1 + a2[10];
  uint64_t v18 = *(void *)v17;
  char v19 = *(unsigned char *)(v17 + 8);
  return sub_1AD862078(v18, v19);
}

void *sub_1AD85A850(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v7, v8, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v14 = v5[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_1AD9DC7C0();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(void *)((char *)a1 + v5[7]) = *(void *)((char *)a2 + v5[7]);
  uint64_t v20 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v21 = *(void **)((char *)a2 + v20);
  *(void *)((char *)a1 + v20) = v21;
  uint64_t v22 = a3[7];
  int v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  sub_1AD846470(0, &qword_1EB725A10, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648]);
  id v25 = v21;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = sub_1AD9DDD20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(v23, v24, v26);
  }
  else
  {
    *int v23 = *v24;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = a3[8];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  sub_1AD846470(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v30 = sub_1AD9DE320();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
  }
  else
  {
    *uint64_t v28 = *v29;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = a3[9];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  sub_1AD846470(0, &qword_1EB725270, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v34 = sub_1AD9DE930();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  }
  else
  {
    *uint64_t v32 = *v33;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = a3[10];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  uint64_t v38 = *(void *)v37;
  char v39 = v37[8];
  sub_1AD861F90(*(void *)v37, v39);
  *(void *)uint64_t v36 = v38;
  v36[8] = v39;
  return a1;
}

void *sub_1AD85ADAC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1AD847280((uint64_t)v7, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 24))(v7, v8, v55);
LABEL_7:
  uint64_t v16 = v5[6];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_13:
  *(void *)((char *)a1 + v5[7]) = *(void *)((char *)a2 + v5[7]);
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v25 = a3[6];
  uint64_t v26 = *(void **)((char *)a2 + v25);
  uint64_t v27 = *(void **)((char *)a1 + v25);
  *(void *)((char *)a1 + v25) = v26;
  id v28 = v26;

  if (a1 != a2)
  {
    uint64_t v29 = a3[7];
    uint64_t v30 = (void *)((char *)a1 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    uint64_t v32 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3C5D0];
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD862084((uint64_t)a1 + v29, (uint64_t)&qword_1EB725A10, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD846470);
    sub_1AD846470(0, &qword_1EB725A10, v32, v33);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v34 = sub_1AD9DDD20();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v30, v31, v34);
    }
    else
    {
      *uint64_t v30 = *v31;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v35 = a3[8];
    uint64_t v36 = (void *)((char *)a1 + v35);
    uint64_t v37 = (void *)((char *)a2 + v35);
    uint64_t v38 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3D548];
    char v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD862084((uint64_t)a1 + v35, (uint64_t)&qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD846470);
    sub_1AD846470(0, &qword_1EB724E28, v38, v39);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v40 = sub_1AD9DE320();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(v36, v37, v40);
    }
    else
    {
      *uint64_t v36 = *v37;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v41 = a3[9];
    uint64_t v42 = (void *)((char *)a1 + v41);
    int64_t v43 = (void *)((char *)a2 + v41);
    char v44 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3E0D8];
    char v45 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD862084((uint64_t)a1 + v41, (uint64_t)&qword_1EB725270, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD846470);
    sub_1AD846470(0, &qword_1EB725270, v44, v45);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v46 = sub_1AD9DE930();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v46 - 8) + 16))(v42, v43, v46);
    }
    else
    {
      *uint64_t v42 = *v43;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v47 = a3[10];
  unint64_t v48 = (char *)a1 + v47;
  unint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(void *)v49;
  char v51 = v49[8];
  sub_1AD861F90(*(void *)v49, v51);
  uint64_t v52 = *(void *)v48;
  char v53 = v48[8];
  *(void *)unint64_t v48 = v50;
  v48[8] = v51;
  sub_1AD862078(v52, v53);
  return a1;
}

void *sub_1AD85B4D8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v8, v9, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = v6[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_1AD9DC7C0();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  uint64_t v20 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  uint64_t v21 = a3[7];
  int v22 = (char *)a1 + v21;
  int v23 = (char *)a2 + v21;
  sub_1AD846470(0, &qword_1EB725A10, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648]);
  uint64_t v25 = v24;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = sub_1AD9DDD20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v22, v23, v26);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
  }
  uint64_t v27 = a3[8];
  id v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  sub_1AD846470(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  uint64_t v31 = v30;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v32 = sub_1AD9DE320();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v28, v29, v32);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  uint64_t v33 = a3[9];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  sub_1AD846470(0, &qword_1EB725270, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C648]);
  uint64_t v37 = v36;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v38 = sub_1AD9DE930();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v34, v35, v38);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
  }
  uint64_t v39 = a3[10];
  uint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  *(void *)uint64_t v40 = *(void *)v41;
  v40[8] = v41[8];
  return a1;
}

void *sub_1AD85BA38(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for SleepStagesModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SleepMetricsWrapper(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v7, v8, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1AD847280((uint64_t)v7, type metadata accessor for SleepMetricsWrapper);
LABEL_6:
    sub_1AD846470(0, qword_1EB725C18, type metadata accessor for SleepMetricsWrapper, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 40))(v7, v8, v59);
LABEL_7:
  uint64_t v16 = v5[6];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    uint64_t v24 = a3;
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v24 = a3;
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    sub_1AD846470(0, &qword_1EB725CA0, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  *(void *)((char *)a1 + v5[7]) = *(void *)((char *)a2 + v5[7]);
  uint64_t v26 = v24[6];
  *(void *)((char *)a1 + v24[5]) = *(void *)((char *)a2 + v24[5]);
  uint64_t v27 = *(void **)((char *)a1 + v26);
  *(void *)((char *)a1 + v26) = *(void *)((char *)a2 + v26);

  if (a1 != a2)
  {
    uint64_t v28 = v24[7];
    uint64_t v29 = (char *)a1 + v28;
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3C5D0];
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD862084((uint64_t)a1 + v28, (uint64_t)&qword_1EB725A10, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD846470);
    sub_1AD846470(0, &qword_1EB725A10, v31, v32);
    uint64_t v34 = v33;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v35 = sub_1AD9DDD20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v29, v30, v35);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
    }
    uint64_t v36 = v24[8];
    uint64_t v37 = (char *)a1 + v36;
    uint64_t v38 = (char *)a2 + v36;
    uint64_t v39 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3D548];
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD862084((uint64_t)a1 + v36, (uint64_t)&qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD846470);
    sub_1AD846470(0, &qword_1EB724E28, v39, v40);
    uint64_t v42 = v41;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v43 = sub_1AD9DE320();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v37, v38, v43);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
    }
    uint64_t v44 = v24[9];
    char v45 = (char *)a1 + v44;
    uint64_t v46 = (char *)a2 + v44;
    uint64_t v47 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3E0D8];
    unint64_t v48 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD862084((uint64_t)a1 + v44, (uint64_t)&qword_1EB725270, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD846470);
    sub_1AD846470(0, &qword_1EB725270, v47, v48);
    uint64_t v50 = v49;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v51 = sub_1AD9DE930();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v45, v46, v51);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
    }
  }
  uint64_t v52 = v24[10];
  char v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)a2 + v52;
  uint64_t v55 = *(void *)v54;
  LOBYTE(v54) = v54[8];
  uint64_t v56 = *(void *)v53;
  char v57 = v53[8];
  *(void *)char v53 = v55;
  v53[8] = (char)v54;
  sub_1AD862078(v56, v57);
  return a1;
}

uint64_t sub_1AD85C17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD85C190);
}

uint64_t sub_1AD85C190(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SleepStagesModel(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[6]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  sub_1AD846470(0, &qword_1E9A49B58, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C658]);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[7];
LABEL_11:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_12;
  }
  sub_1AD846470(0, &qword_1E9A49B60, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C658]);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[8];
    goto LABEL_11;
  }
  sub_1AD846470(0, &qword_1E9A49B68, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C658]);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a3[9];
  return v18(v20, a2, v19);
}

uint64_t sub_1AD85C3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD85C400);
}

uint64_t sub_1AD85C400(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for SleepStagesModel(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6]) = (a2 - 1);
    return result;
  }
  sub_1AD846470(0, &qword_1E9A49B58, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C658]);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[7];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  sub_1AD846470(0, &qword_1E9A49B60, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C658]);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[8];
    goto LABEL_9;
  }
  sub_1AD846470(0, &qword_1E9A49B68, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C658]);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[9];
  return v18(v20, a2, a2, v19);
}

void sub_1AD85C65C()
{
  type metadata accessor for SleepStagesModel(319);
  if (v0 <= 0x3F)
  {
    sub_1AD846470(319, &qword_1EB725A10, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648]);
    if (v1 <= 0x3F)
    {
      sub_1AD846470(319, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
      if (v2 <= 0x3F)
      {
        sub_1AD846470(319, &qword_1EB725270, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C648]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_1AD85C850()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD85C86C()
{
  return sub_1AD844CF8(&qword_1E9A49B70, (void (*)(uint64_t))sub_1AD85C8B4);
}

void sub_1AD85C8B4()
{
  if (!qword_1E9A49B78)
  {
    sub_1AD858688();
    unint64_t v0 = sub_1AD9DDD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49B78);
    }
  }
}

unint64_t sub_1AD85C934()
{
  unint64_t result = qword_1E9A49B80;
  if (!qword_1E9A49B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49B80);
  }
  return result;
}

unint64_t sub_1AD85C98C()
{
  unint64_t result = qword_1EB725370;
  if (!qword_1EB725370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725370);
  }
  return result;
}

unint64_t sub_1AD85C9E4()
{
  unint64_t result = qword_1EB725378;
  if (!qword_1EB725378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725378);
  }
  return result;
}

uint64_t sub_1AD85CA38()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD85CA54()
{
  if (!qword_1E9A49B88)
  {
    sub_1AD85CAC0(255);
    sub_1AD85CED0();
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49B88);
    }
  }
}

void sub_1AD85CAC0(uint64_t a1)
{
}

void sub_1AD85CAF4(uint64_t a1)
{
}

void sub_1AD85CB28()
{
  if (!qword_1E9A49BA0)
  {
    sub_1AD85CD9C(255, &qword_1E9A49BA8);
    sub_1AD85CC28(&qword_1E9A49BC0, &qword_1E9A49BA8, (uint64_t)&type metadata for SleepStagesLegend.LegendRow, (void (*)(void))sub_1AD85CCA0);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49BA0);
    }
  }
}

uint64_t sub_1AD85CBD0(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD862E4C(255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD85CC28(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD85CD9C(255, a2);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD85CCA0()
{
  unint64_t result = qword_1E9A49BC8;
  if (!qword_1E9A49BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49BC8);
  }
  return result;
}

void sub_1AD85CCF4()
{
  if (!qword_1E9A49BD0)
  {
    sub_1AD85CD9C(255, &qword_1E9A49BD8);
    sub_1AD85CC28(&qword_1E9A49BE0, &qword_1E9A49BD8, (uint64_t)&type metadata for SleepStagesLegend.FlowingLabel, (void (*)(void))sub_1AD85CE7C);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49BD0);
    }
  }
}

void sub_1AD85CD9C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_1AD862E4C(255, &qword_1E9A49BB0, (uint64_t)&type metadata for SleepStage, MEMORY[0x1E4FBB320]);
    sub_1AD85CBD0(&qword_1E9A49BB8, &qword_1E9A49BB0, (uint64_t)&type metadata for SleepStage);
    unint64_t v3 = sub_1AD9DF270();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t sub_1AD85CE7C()
{
  unint64_t result = qword_1E9A49BE8;
  if (!qword_1E9A49BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49BE8);
  }
  return result;
}

unint64_t sub_1AD85CED0()
{
  unint64_t result = qword_1E9A49BF0;
  if (!qword_1E9A49BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49BF0);
  }
  return result;
}

uint64_t sub_1AD85CF24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1AD85CF94()
{
  unint64_t result = qword_1E9A49C00;
  if (!qword_1E9A49C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49C00);
  }
  return result;
}

void sub_1AD85CFE8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1AD85CD9C(255, a3);
    unint64_t v4 = sub_1AD9DDEA0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t objectdestroy_28Tm()
{
  uint64_t v1 = *(void *)(type metadata accessor for SleepStagesLegend(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for SleepStagesModel(0);
  uint64_t v4 = v2 + *(int *)(v3 + 20);
  uint64_t v5 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  uint64_t v7 = v2 + *(int *)(v3 + 24);
  uint64_t v8 = sub_1AD9DC7C0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  return swift_deallocObject();
}

uint64_t sub_1AD85D250@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (int *)(type metadata accessor for SleepStagesLegend(0) - 8);
  uint64_t v6 = v2
     + ((*(unsigned __int8 *)(*(void *)v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80));
  LOBYTE(a1) = *a1;
  uint64_t result = sub_1AD848F54((char)a1);
  char v8 = *(unsigned char *)(v6 + v5[7]);
  *(unsigned char *)a2 = (_BYTE)a1;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = v8;
  return result;
}

uint64_t sub_1AD85D2DC()
{
  sub_1AD9DE220();
  sub_1AD844CF8(&qword_1EB725298, MEMORY[0x1E4F468D8]);
  sub_1AD9DE270();
  return v1;
}

uint64_t sub_1AD85D358@<X0>(unsigned char *a1@<X8>)
{
  sub_1AD9DE220();
  sub_1AD844CF8(&qword_1EB725298, MEMORY[0x1E4F468D8]);
  uint64_t result = sub_1AD9DE270();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD85D3E8()
{
  return sub_1AD9DE130();
}

uint64_t sub_1AD85D40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AD85D438(a1, a2, a3, a4, MEMORY[0x1E4F3CEB8], MEMORY[0x1E4F3D090]);
}

uint64_t sub_1AD85D438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  MEMORY[0x1F4188790]();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_1AD85D508(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v29 = a2;
  uint64_t v9 = sub_1AD9DC7C0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)*v4;
  unint64_t v16 = sub_1AD86514C(a3);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    int v22 = *v5;
    if (v20)
    {
LABEL_8:
      int v23 = (uint64_t *)(v22[7] + 16 * v16);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v25 = v29;
      *int v23 = a1;
      v23[1] = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_1AD865FA0();
    goto LABEL_7;
  }
  sub_1AD8658B4(v19, a4 & 1);
  unint64_t v26 = sub_1AD86514C(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = sub_1AD9E0310();
    __break(1u);
    return result;
  }
  unint64_t v16 = v26;
  int v22 = *v5;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  return sub_1AD85D6C0(v16, (uint64_t)v13, a1, v29, v22);
}

uint64_t sub_1AD85D6C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = sub_1AD9DC7C0();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_1AD85D780()
{
  return sub_1AD852F04(v0[2], v0[3], v0[4], v0[5]);
}

void sub_1AD85D78C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDEA0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD85D7F8(uint64_t a1)
{
}

void sub_1AD85D82C()
{
  if (!qword_1EB725208)
  {
    sub_1AD85D8CC();
    sub_1AD846470(255, &qword_1EB7252D8, (uint64_t (*)(uint64_t))sub_1AD8612F0, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB725208);
    }
  }
}

void sub_1AD85D8CC()
{
  if (!qword_1EB725200)
  {
    sub_1AD86327C(255, &qword_1EB7251B8, (uint64_t (*)(uint64_t))sub_1AD85D9E4, (uint64_t (*)(uint64_t))sub_1AD85DB10, MEMORY[0x1E4F3D750]);
    sub_1AD85FCFC();
    sub_1AD860DB8();
    sub_1AD844CF8(&qword_1EB725B90, (void (*)(uint64_t))sub_1AD85FCFC);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB725200);
    }
  }
}

void sub_1AD85D9E4()
{
  if (!qword_1EB7251C0)
  {
    sub_1AD86327C(255, &qword_1EB7251A0, (uint64_t (*)(uint64_t))sub_1AD85DB10, (uint64_t (*)(uint64_t))sub_1AD8608B8, MEMORY[0x1E4F3CC10]);
    sub_1AD85F2B0(255);
    sub_1AD8608EC();
    sub_1AD858840(&qword_1EB725300, sub_1AD85F2B0, (void (*)(void))sub_1AD860D84);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7251C0);
    }
  }
}

void sub_1AD85DB10()
{
  if (!qword_1EB7251F0)
  {
    sub_1AD85DF14();
    sub_1AD844C00(255, &qword_1EB725A48, (uint64_t (*)(uint64_t))sub_1AD8606F4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    sub_1AD85E290();
    sub_1AD85E5D8();
    uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1AD862E4C(255, &qword_1EB725B50, MEMORY[0x1E4F3EB98], v0);
    sub_1AD85E878();
    sub_1AD860140();
    sub_1AD85EAA8();
    sub_1AD85ECA0();
    sub_1AD85EE24();
    sub_1AD85F83C();
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    swift_getOpaqueTypeConformance2();
    sub_1AD8600B4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725180, (void (*)(uint64_t))sub_1AD860140);
    swift_getOpaqueTypeConformance2();
    sub_1AD85CBD0(&qword_1EB725B58, &qword_1EB725B50, MEMORY[0x1E4F3EB98]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD8607A8();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v2) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7251F0);
    }
  }
}

void sub_1AD85DF14()
{
  if (!qword_1EB7251E0)
  {
    sub_1AD85E290();
    sub_1AD85E5D8();
    uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1AD862E4C(255, &qword_1EB725B50, MEMORY[0x1E4F3EB98], v0);
    sub_1AD85E878();
    sub_1AD860140();
    sub_1AD85EAA8();
    sub_1AD85ECA0();
    sub_1AD85EE24();
    sub_1AD85F83C();
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    swift_getOpaqueTypeConformance2();
    sub_1AD8600B4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725180, (void (*)(uint64_t))sub_1AD860140);
    swift_getOpaqueTypeConformance2();
    sub_1AD85CBD0(&qword_1EB725B58, &qword_1EB725B50, MEMORY[0x1E4F3EB98]);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v2) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7251E0);
    }
  }
}

void sub_1AD85E290()
{
  if (!qword_1EB7251F8)
  {
    sub_1AD85E5D8();
    uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1AD862E4C(255, &qword_1EB725B50, MEMORY[0x1E4F3EB98], v0);
    sub_1AD85E878();
    sub_1AD860140();
    sub_1AD85EAA8();
    sub_1AD85ECA0();
    sub_1AD85EE24();
    sub_1AD85F83C();
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    swift_getOpaqueTypeConformance2();
    sub_1AD8600B4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725180, (void (*)(uint64_t))sub_1AD860140);
    swift_getOpaqueTypeConformance2();
    sub_1AD85CBD0(&qword_1EB725B58, &qword_1EB725B50, MEMORY[0x1E4F3EB98]);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v2) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7251F8);
    }
  }
}

void sub_1AD85E5D8()
{
  if (!qword_1EB7251D0)
  {
    sub_1AD85E878();
    sub_1AD860140();
    sub_1AD85EAA8();
    sub_1AD85ECA0();
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1AD85EE24();
    sub_1AD85F83C();
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    swift_getOpaqueTypeConformance2();
    sub_1AD8600B4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725180, (void (*)(uint64_t))sub_1AD860140);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7251D0);
    }
  }
}

void sub_1AD85E878()
{
  if (!qword_1EB7251D8)
  {
    sub_1AD85EAA8();
    sub_1AD85ECA0();
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1AD85EE24();
    sub_1AD85F83C();
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    swift_getOpaqueTypeConformance2();
    sub_1AD8600B4();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7251D8);
    }
  }
}

void sub_1AD85EAA8()
{
  if (!qword_1EB7251E8)
  {
    sub_1AD85ECA0();
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1AD85EE24();
    sub_1AD85F83C();
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    swift_getOpaqueTypeConformance2();
    sub_1AD8600B4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7251E8);
    }
  }
}

void sub_1AD85ECA0()
{
  if (!qword_1EB7251C8)
  {
    sub_1AD85EE24();
    sub_1AD85F83C();
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7251C8);
    }
  }
}

void sub_1AD85EE24()
{
  if (!qword_1EB725AC0)
  {
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB725AC0);
    }
  }
}

void sub_1AD85EF28()
{
  if (!qword_1EB725AC8)
  {
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB725AC8);
    }
  }
}

void sub_1AD85EFFC()
{
  if (!qword_1EB7259E8)
  {
    sub_1AD85F0D0();
    sub_1AD85F184();
    sub_1AD844CF8(&qword_1EB7259D0, (void (*)(uint64_t))sub_1AD85F184);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = sub_1AD9DD8D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB7259E8);
    }
  }
}

void sub_1AD85F0D0()
{
  if (!qword_1EB725988)
  {
    sub_1AD85F184();
    sub_1AD844CF8(&qword_1EB7259D0, (void (*)(uint64_t))sub_1AD85F184);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB725988);
    }
  }
}

void sub_1AD85F184()
{
  if (!qword_1EB7259D8)
  {
    sub_1AD85F1E8();
    sub_1AD85F6DC();
    unint64_t v0 = sub_1AD9DD8B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB7259D8);
    }
  }
}

void sub_1AD85F1E8()
{
  if (!qword_1EB725B10)
  {
    sub_1AD85F2B0(255);
    sub_1AD85F2E4();
    sub_1AD844CF8(&qword_1EB725B48, sub_1AD85F2B0);
    unint64_t v0 = sub_1AD9DF270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725B10);
    }
  }
}

void sub_1AD85F2B0(uint64_t a1)
{
}

void sub_1AD85F2E4()
{
  if (!qword_1EB725980)
  {
    sub_1AD85F428();
    sub_1AD85F528();
    sub_1AD85F5F0();
    sub_1AD9DD780();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD85F688();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB725980);
    }
  }
}

void sub_1AD85F428()
{
  if (!qword_1EB725990)
  {
    sub_1AD85F528();
    sub_1AD85F5F0();
    sub_1AD9DD780();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB725990);
    }
  }
}

void sub_1AD85F528()
{
  if (!qword_1EB725970)
  {
    sub_1AD85F5F0();
    sub_1AD9DD780();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB725970);
    }
  }
}

void sub_1AD85F5F0()
{
  if (!qword_1EB725978)
  {
    sub_1AD9DD780();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB725978);
    }
  }
}

unint64_t sub_1AD85F688()
{
  unint64_t result = qword_1EB725B38;
  if (!qword_1EB725B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725B38);
  }
  return result;
}

unint64_t sub_1AD85F6DC()
{
  unint64_t result = qword_1EB725B08;
  if (!qword_1EB725B08)
  {
    sub_1AD85F1E8();
    sub_1AD85F428();
    sub_1AD85F528();
    sub_1AD85F5F0();
    sub_1AD9DD780();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD85F688();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725B08);
  }
  return result;
}

void sub_1AD85F83C()
{
  if (!qword_1EB725178)
  {
    sub_1AD8601D4(255, &qword_1EB725118, sub_1AD85F8D0, sub_1AD85F988);
    sub_1AD85FEEC();
    unint64_t v0 = sub_1AD9DD980();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725178);
    }
  }
}

void sub_1AD85F8D0(uint64_t a1)
{
}

void sub_1AD85F904()
{
  if (!qword_1EB7259F0)
  {
    sub_1AD9DD960();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7259F0);
    }
  }
}

void sub_1AD85F988(uint64_t a1)
{
}

void sub_1AD85F9BC()
{
  if (!qword_1EB725258)
  {
    sub_1AD85FAE0();
    sub_1AD85FBE4();
    sub_1AD85FCFC();
    sub_1AD85FD90(&qword_1EB725278, (void (*)(uint64_t))sub_1AD85FBE4, (void (*)(void))sub_1AD85FE34);
    sub_1AD844CF8(&qword_1EB725B90, (void (*)(uint64_t))sub_1AD85FCFC);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = sub_1AD9DD7F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725258);
    }
  }
}

void sub_1AD85FAE0()
{
  if (!qword_1EB7252C0)
  {
    sub_1AD85FBE4();
    sub_1AD85FCFC();
    sub_1AD85FD90(&qword_1EB725278, (void (*)(uint64_t))sub_1AD85FBE4, (void (*)(void))sub_1AD85FE34);
    sub_1AD844CF8(&qword_1EB725B90, (void (*)(uint64_t))sub_1AD85FCFC);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB7252C0);
    }
  }
}

void sub_1AD85FBE4()
{
  if (!qword_1EB725280)
  {
    sub_1AD85FC7C(255, &qword_1EB7252A8, &qword_1EB725A30, MEMORY[0x1E4F3CAB0]);
    sub_1AD8586DC(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725280);
    }
  }
}

void sub_1AD85FC7C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_1AD861C44(255, a3, MEMORY[0x1E4F3E2F8], a4, MEMORY[0x1E4F3CC10]);
    unint64_t v5 = sub_1AD9DE480();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD85FCFC()
{
  if (!qword_1EB725B98)
  {
    sub_1AD9DDF50();
    sub_1AD844CF8((unint64_t *)&qword_1EB725A20, MEMORY[0x1E4F3CB98]);
    unint64_t v0 = sub_1AD9E01F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725B98);
    }
  }
}

uint64_t sub_1AD85FD90(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    sub_1AD8636C4((unint64_t *)&qword_1EB725C78, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD85FE34()
{
  unint64_t result = qword_1EB7252A0;
  if (!qword_1EB7252A0)
  {
    uint64_t v1 = MEMORY[0x1E4F3CAB0];
    sub_1AD85FC7C(255, &qword_1EB7252A8, &qword_1EB725A30, MEMORY[0x1E4F3CAB0]);
    sub_1AD863048(&qword_1EB725288, &qword_1EB725A30, v1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB7252A0);
  }
  return result;
}

unint64_t sub_1AD85FEEC()
{
  unint64_t result = qword_1EB725150;
  if (!qword_1EB725150)
  {
    sub_1AD8601D4(255, &qword_1EB725118, sub_1AD85F8D0, sub_1AD85F988);
    sub_1AD85FFE0();
    sub_1AD858840(&qword_1EB725268, sub_1AD85F988, (void (*)(void))sub_1AD860080);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725150);
  }
  return result;
}

unint64_t sub_1AD85FFE0()
{
  unint64_t result = qword_1EB725A00;
  if (!qword_1EB725A00)
  {
    sub_1AD85F8D0(255);
    sub_1AD9DD960();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725A00);
  }
  return result;
}

uint64_t sub_1AD860080()
{
  return sub_1AD844CF8(&qword_1EB725250, (void (*)(uint64_t))sub_1AD85F9BC);
}

unint64_t sub_1AD8600B4()
{
  unint64_t result = qword_1EB725B68;
  if (!qword_1EB725B68)
  {
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725B68);
  }
  return result;
}

void sub_1AD860140()
{
  if (!qword_1EB725188)
  {
    sub_1AD8601D4(255, &qword_1EB725160, (void (*)(uint64_t))sub_1AD860254, sub_1AD8602DC);
    sub_1AD8604EC();
    unint64_t v0 = sub_1AD9DD980();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725188);
    }
  }
}

void sub_1AD8601D4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_1AD9DD710();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD860254()
{
  if (!qword_1EB725138)
  {
    sub_1AD8601D4(255, &qword_1EB725130, MEMORY[0x1E4F19230], MEMORY[0x1E4F19478]);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725138);
    }
  }
}

void sub_1AD8602DC(uint64_t a1)
{
}

void sub_1AD860310()
{
  if (!qword_1EB7259A0)
  {
    sub_1AD8603A4();
    sub_1AD844CF8(&qword_1EB725AF8, (void (*)(uint64_t))sub_1AD8603A4);
    unint64_t v0 = sub_1AD9DD7F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB7259A0);
    }
  }
}

void sub_1AD8603A4()
{
  if (!qword_1EB725B00)
  {
    sub_1AD860438(255);
    sub_1AD844CF8(&qword_1EB725B28, sub_1AD860438);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725B00);
    }
  }
}

void sub_1AD860438(uint64_t a1)
{
}

void sub_1AD86046C()
{
  if (!qword_1EB725AB8)
  {
    sub_1AD85FC7C(255, &qword_1EB725A88, &qword_1EB725A38, MEMORY[0x1E4F3CC78]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB725AB8);
    }
  }
}

unint64_t sub_1AD8604EC()
{
  unint64_t result = qword_1EB725158;
  if (!qword_1EB725158)
  {
    sub_1AD8601D4(255, &qword_1EB725160, (void (*)(uint64_t))sub_1AD860254, sub_1AD8602DC);
    sub_1AD858840(&qword_1EB725148, (void (*)(uint64_t))sub_1AD860254, (void (*)(void))sub_1AD860618);
    sub_1AD858840(&qword_1EB7259B0, sub_1AD8602DC, (void (*)(void))sub_1AD8606C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725158);
  }
  return result;
}

unint64_t sub_1AD860618()
{
  unint64_t result = qword_1EB725128;
  if (!qword_1EB725128)
  {
    sub_1AD8601D4(255, &qword_1EB725130, MEMORY[0x1E4F19230], MEMORY[0x1E4F19478]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725128);
  }
  return result;
}

uint64_t sub_1AD8606C0()
{
  return sub_1AD844CF8(&qword_1EB725998, (void (*)(uint64_t))sub_1AD860310);
}

void sub_1AD8606F4()
{
  if (!qword_1EB725AD0)
  {
    sub_1AD9DD830();
    sub_1AD844CF8(&qword_1EB7259C8, MEMORY[0x1E4F19398]);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB725AD0);
    }
  }
}

unint64_t sub_1AD8607A8()
{
  unint64_t result = qword_1EB725A40;
  if (!qword_1EB725A40)
  {
    sub_1AD844C00(255, &qword_1EB725A48, (uint64_t (*)(uint64_t))sub_1AD8606F4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    sub_1AD9DD830();
    sub_1AD844CF8(&qword_1EB7259C8, MEMORY[0x1E4F19398]);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725A40);
  }
  return result;
}

void sub_1AD8608B8(uint64_t a1)
{
}

unint64_t sub_1AD8608EC()
{
  unint64_t result = qword_1EB725198;
  if (!qword_1EB725198)
  {
    sub_1AD86327C(255, &qword_1EB7251A0, (uint64_t (*)(uint64_t))sub_1AD85DB10, (uint64_t (*)(uint64_t))sub_1AD8608B8, MEMORY[0x1E4F3CC10]);
    sub_1AD85DF14();
    sub_1AD844C00(255, &qword_1EB725A48, (uint64_t (*)(uint64_t))sub_1AD8606F4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    sub_1AD85E290();
    sub_1AD85E5D8();
    uint64_t v1 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1AD862E4C(255, &qword_1EB725B50, MEMORY[0x1E4F3EB98], v1);
    sub_1AD85E878();
    sub_1AD860140();
    sub_1AD85EAA8();
    sub_1AD85ECA0();
    sub_1AD85EE24();
    sub_1AD85F83C();
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    swift_getOpaqueTypeConformance2();
    sub_1AD8600B4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725180, (void (*)(uint64_t))sub_1AD860140);
    swift_getOpaqueTypeConformance2();
    sub_1AD85CBD0(&qword_1EB725B58, &qword_1EB725B50, MEMORY[0x1E4F3EB98]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD8607A8();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB7252B0, sub_1AD8608B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725198);
  }
  return result;
}

uint64_t sub_1AD860D84()
{
  return sub_1AD844CF8(&qword_1EB725238, (void (*)(uint64_t))type metadata accessor for SleepStageSegment);
}

unint64_t sub_1AD860DB8()
{
  unint64_t result = qword_1EB7251B0;
  if (!qword_1EB7251B0)
  {
    sub_1AD86327C(255, &qword_1EB7251B8, (uint64_t (*)(uint64_t))sub_1AD85D9E4, (uint64_t (*)(uint64_t))sub_1AD85DB10, MEMORY[0x1E4F3D750]);
    sub_1AD86327C(255, &qword_1EB7251A0, (uint64_t (*)(uint64_t))sub_1AD85DB10, (uint64_t (*)(uint64_t))sub_1AD8608B8, MEMORY[0x1E4F3CC10]);
    sub_1AD85F2B0(255);
    sub_1AD8608EC();
    sub_1AD858840(&qword_1EB725300, sub_1AD85F2B0, (void (*)(void))sub_1AD860D84);
    swift_getOpaqueTypeConformance2();
    sub_1AD85DF14();
    sub_1AD844C00(255, &qword_1EB725A48, (uint64_t (*)(uint64_t))sub_1AD8606F4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    sub_1AD85E290();
    sub_1AD85E5D8();
    uint64_t v1 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
    sub_1AD862E4C(255, &qword_1EB725B60, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1AD862E4C(255, &qword_1EB725B50, MEMORY[0x1E4F3EB98], v1);
    sub_1AD85E878();
    sub_1AD860140();
    sub_1AD85EAA8();
    sub_1AD85ECA0();
    sub_1AD85EE24();
    sub_1AD85F83C();
    sub_1AD85EF28();
    sub_1AD85EFFC();
    sub_1AD9DD840();
    sub_1AD844CF8(&qword_1EB7259E0, (void (*)(uint64_t))sub_1AD85EFFC);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725170, (void (*)(uint64_t))sub_1AD85F83C);
    swift_getOpaqueTypeConformance2();
    sub_1AD8600B4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD844CF8(&qword_1EB725180, (void (*)(uint64_t))sub_1AD860140);
    swift_getOpaqueTypeConformance2();
    sub_1AD85CBD0(&qword_1EB725B58, &qword_1EB725B50, MEMORY[0x1E4F3EB98]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1AD8607A8();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB7251B0);
  }
  return result;
}

void sub_1AD8612F0()
{
  if (!qword_1EB7252D0)
  {
    sub_1AD861384(255);
    sub_1AD844CF8(&qword_1EB7252E0, sub_1AD861384);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB7252D0);
    }
  }
}

void sub_1AD861384(uint64_t a1)
{
}

void sub_1AD8613B8()
{
  if (!qword_1EB7252C8)
  {
    sub_1AD85FAE0();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EB7252C8);
    }
  }
}

uint64_t sub_1AD861424@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1AD84D008(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1AD861444@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD84D06C(*(void *)(v1 + 16), a1);
}

uint64_t sub_1AD86144C@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD84EC24(*(void *)(v1 + 16), a1);
}

uint64_t sub_1AD861454()
{
  return sub_1AD84FBB4(*(void *)(v0 + 16));
}

uint64_t sub_1AD861460(uint64_t a1)
{
  return sub_1AD861BB0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1AD8509D8);
}

uint64_t sub_1AD861478(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  sub_1AD86327C(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_1AD8614D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_1AD861548(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1AD861558(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1AD861570(uint64_t a1, uint64_t a2, char a3)
{
  sub_1AD861548(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD8615AC()
{
  return sub_1AD9DE130();
}

uint64_t sub_1AD8615D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AD85D438(a1, a2, a3, a4, MEMORY[0x1E4F3CEB8], MEMORY[0x1E4F3D090]);
}

uint64_t objectdestroy_52Tm()
{
  uint64_t v1 = (int *)type metadata accessor for Somnogram(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for SleepStagesModel(0);
  uint64_t v4 = v2 + *(int *)(v3 + 20);
  uint64_t v5 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    sub_1AD846470(0, (unint64_t *)&qword_1EB725C90, (uint64_t (*)(uint64_t))sub_1AD853C38, MEMORY[0x1E4F29518]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  uint64_t v7 = v2 + *(int *)(v3 + 24);
  uint64_t v8 = sub_1AD9DC7C0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }

  uint64_t v10 = v2 + v1[7];
  sub_1AD846470(0, &qword_1EB725A10, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1AD9DDD20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = v2 + v1[8];
  sub_1AD846470(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_1AD9DE320();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  uint64_t v14 = v2 + v1[9];
  sub_1AD846470(0, &qword_1EB725270, MEMORY[0x1E4F3E0D8], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = sub_1AD9DE930();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release();
  }
  sub_1AD862078(*(void *)(v2 + v1[10]), *(unsigned char *)(v2 + v1[10] + 8));
  return swift_deallocObject();
}

uint64_t sub_1AD861A10(uint64_t a1)
{
  return sub_1AD861A8C(a1, (uint64_t (*)(uint64_t))sub_1AD84FE20);
}

double sub_1AD861A28@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1AD85254C(*(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), a1).n128_u64[0];
  return result;
}

uint64_t sub_1AD861A34(uint64_t a1, uint64_t a2, char a3)
{
  sub_1AD861558(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD861A74(uint64_t a1)
{
  return sub_1AD861A8C(a1, (uint64_t (*)(uint64_t))sub_1AD84F058);
}

uint64_t sub_1AD861A8C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(a1);
}

void sub_1AD861B08(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_1AD861B84@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD85235C(a1);
}

uint64_t sub_1AD861B8C()
{
  return sub_1AD84D2A8(*(uint64_t **)(v0 + 16));
}

uint64_t sub_1AD861B98(uint64_t a1)
{
  return sub_1AD861BB0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1AD84D588);
}

uint64_t sub_1AD861BB0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for Somnogram(0) - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a2(a1, v5);
}

void sub_1AD861C44(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD861C94()
{
  if (!qword_1EB725B70)
  {
    sub_1AD9DCC70();
    sub_1AD844CF8((unint64_t *)&qword_1EB725688, MEMORY[0x1E4F27928]);
    unint64_t v0 = sub_1AD9DFAC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725B70);
    }
  }
}

uint64_t sub_1AD861D28()
{
  return swift_deallocObject();
}

uint64_t sub_1AD861D38(uint64_t a1, uint64_t a2)
{
  return sub_1AD85CF24(a1, a2, type metadata accessor for SleepDayModel.SegmentModel);
}

uint64_t sub_1AD861D50(uint64_t a1)
{
  return sub_1AD847280(a1, type metadata accessor for SleepDayModel.SegmentModel);
}

uint64_t sub_1AD861D68()
{
  uint64_t v1 = sub_1AD9DDDF0();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

double sub_1AD861DF8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD9DDDF0();
  uint64_t v5 = *(void *)(v2 + 16);
  return sub_1AD852D6C(a1, v5, a2);
}

uint64_t sub_1AD861E7C(uint64_t a1, uint64_t a2)
{
  return sub_1AD85CF24(a1, a2, type metadata accessor for SleepStageSegment);
}

uint64_t sub_1AD861E94(uint64_t a1)
{
  return sub_1AD847280(a1, type metadata accessor for SleepStageSegment);
}

uint64_t sub_1AD861EB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  char v7 = *(unsigned char *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 144);
  uint64_t v11 = *(void *)(a1 + 136);
  char v9 = *(unsigned char *)(a1 + 152);
  sub_1AD861F90(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_bridgeObjectRetain();
  sub_1AD861558(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_1AD861558(v5, v6, v7);
  swift_bridgeObjectRetain();
  sub_1AD861558(v11, v10, v9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AD861F90(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1AD861F9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  char v7 = *(unsigned char *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 144);
  uint64_t v11 = *(void *)(a1 + 136);
  char v9 = *(unsigned char *)(a1 + 152);
  sub_1AD862078(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_bridgeObjectRelease();
  sub_1AD861548(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_1AD861548(v5, v6, v7);
  swift_bridgeObjectRelease();
  sub_1AD861548(v11, v10, v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD862078(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD862084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_1AD8620E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1AD8449C4();
    uint64_t v7 = v6;
    sub_1AD844C00(255, &qword_1EB725A58, (uint64_t (*)(uint64_t))sub_1AD8449C4, MEMORY[0x1E4F3CE48], MEMORY[0x1E4F3CC10]);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_1AD86218C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  sub_1AD844C00(0, a3, a4, a5, MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_1AD862210(uint64_t a1, uint64_t a2)
{
  sub_1AD844C00(0, &qword_1EB725A58, (uint64_t (*)(uint64_t))sub_1AD8449C4, MEMORY[0x1E4F3CE48], MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_1AD8622B0(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 107) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1AD8622CC(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1AD861558(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AD862310(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))
{
  return a1;
}

uint64_t sub_1AD862384(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1AD861548(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1AD8623C8()
{
  return sub_1AD9DE0C0();
}

uint64_t sub_1AD8623EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AD85D438(a1, a2, a3, a4, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3CF08]);
}

uint64_t sub_1AD86242C()
{
  return sub_1AD9DE180();
}

uint64_t sub_1AD862450()
{
  return sub_1AD9DE190();
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesLegend.FlowingLabel()
{
  return &type metadata for SleepStagesLegend.FlowingLabel;
}

uint64_t destroy for SleepStagesLegend.LegendRow()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s13SleepHealthUI17SleepStagesLegendV12FlowingLabelVwcp_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s13SleepHealthUI17SleepStagesLegendV12FlowingLabelVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t _s13SleepHealthUI17SleepStagesLegendV12FlowingLabelVwta_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t _s13SleepHealthUI17SleepStagesLegendV12FlowingLabelVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1AD8625E4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesLegend.LegendRow()
{
  return &type metadata for SleepStagesLegend.LegendRow;
}

uint64_t sub_1AD862638()
{
  return sub_1AD844CF8(&qword_1E9A49C20, (void (*)(uint64_t))sub_1AD862680);
}

void sub_1AD862680()
{
  if (!qword_1E9A49C28)
  {
    sub_1AD85CAC0(255);
    sub_1AD844CF8(&qword_1E9A49C30, sub_1AD85CAC0);
    unint64_t v0 = sub_1AD9DDDB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49C28);
    }
  }
}

uint64_t sub_1AD862714()
{
  return sub_1AD844CF8(&qword_1EB725210, (void (*)(uint64_t))sub_1AD86275C);
}

void sub_1AD86275C()
{
  if (!qword_1EB725218)
  {
    sub_1AD85D7F8(255);
    sub_1AD844CF8(&qword_1EB725220, sub_1AD85D7F8);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725218);
    }
  }
}

uint64_t sub_1AD8627F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD86280C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD862828()
{
  if (!qword_1E9A49C38)
  {
    sub_1AD8628BC(255);
    sub_1AD844CF8(&qword_1E9A49CB8, sub_1AD8628BC);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49C38);
    }
  }
}

void sub_1AD8628BC(uint64_t a1)
{
}

void sub_1AD8628F0()
{
  if (!qword_1E9A49C48)
  {
    sub_1AD862968();
    sub_1AD862D98();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1E9A49C48);
    }
  }
}

void sub_1AD862968()
{
  if (!qword_1E9A49C50)
  {
    sub_1AD844C00(255, &qword_1E9A49C58, (uint64_t (*)(uint64_t))sub_1AD862A08, MEMORY[0x1E4F3CE30], MEMORY[0x1E4F3CC10]);
    sub_1AD9DE6E0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49C50);
    }
  }
}

void sub_1AD862A08()
{
  if (!qword_1E9A49C60)
  {
    sub_1AD862AD8();
    sub_1AD844CF8(&qword_1E9A49CA0, (void (*)(uint64_t))sub_1AD862AD8);
    sub_1AD862D44();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A49C60);
    }
  }
}

void sub_1AD862AD8()
{
  if (!qword_1E9A49C68)
  {
    sub_1AD844C00(255, &qword_1E9A49C70, (uint64_t (*)(uint64_t))sub_1AD862B90, MEMORY[0x1E4F3EC98], MEMORY[0x1E4F3D750]);
    sub_1AD862BEC();
    unint64_t v0 = sub_1AD9DEFD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49C68);
    }
  }
}

void sub_1AD862B90(uint64_t a1)
{
}

void sub_1AD862BB8(uint64_t a1)
{
}

unint64_t sub_1AD862BEC()
{
  unint64_t result = qword_1E9A49C88;
  if (!qword_1E9A49C88)
  {
    sub_1AD844C00(255, &qword_1E9A49C70, (uint64_t (*)(uint64_t))sub_1AD862B90, MEMORY[0x1E4F3EC98], MEMORY[0x1E4F3D750]);
    sub_1AD862C9C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49C88);
  }
  return result;
}

unint64_t sub_1AD862C9C()
{
  unint64_t result = qword_1E9A49C90;
  if (!qword_1E9A49C90)
  {
    sub_1AD862B90(255);
    sub_1AD844CF8((unint64_t *)&qword_1E9A49C98, sub_1AD862BB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49C90);
  }
  return result;
}

unint64_t sub_1AD862D44()
{
  unint64_t result = qword_1E9A49CA8;
  if (!qword_1E9A49CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49CA8);
  }
  return result;
}

void sub_1AD862D98()
{
  if (!qword_1E9A49CB0)
  {
    sub_1AD861C44(255, (unint64_t *)&qword_1E9A49A78, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3CE30], MEMORY[0x1E4F3CC10]);
    sub_1AD9DE6E0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49CB0);
    }
  }
}

void sub_1AD862E2C(uint64_t a1)
{
}

void sub_1AD862E4C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD862EA4@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD849C08(*(unsigned char *)(v1 + 40), a1);
}

unint64_t sub_1AD862EAC()
{
  unint64_t result = qword_1E9A49CE0;
  if (!qword_1E9A49CE0)
  {
    sub_1AD844C00(255, &qword_1E9A49C58, (uint64_t (*)(uint64_t))sub_1AD862A08, MEMORY[0x1E4F3CE30], MEMORY[0x1E4F3CC10]);
    sub_1AD862AD8();
    sub_1AD844CF8(&qword_1E9A49CA0, (void (*)(uint64_t))sub_1AD862AD8);
    sub_1AD862D44();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49CE0);
  }
  return result;
}

uint64_t sub_1AD862FD8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  sub_1AD844C00(0, a2, a3, a4, MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1AD863048(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD861C44(255, a2, MEMORY[0x1E4F3E2F8], a3, MEMORY[0x1E4F3CC10]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8630DC()
{
  if (!qword_1E9A49CF8)
  {
    sub_1AD863170(255);
    sub_1AD844CF8(&qword_1E9A49D20, sub_1AD863170);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49CF8);
    }
  }
}

void sub_1AD863170(uint64_t a1)
{
}

void sub_1AD8631A4()
{
  if (!qword_1E9A49D08)
  {
    sub_1AD86327C(255, &qword_1E9A49D10, (uint64_t (*)(uint64_t))sub_1AD862A08, MEMORY[0x1E4F3DF60], MEMORY[0x1E4F3CC10]);
    sub_1AD863300(255, (unint64_t *)&qword_1E9A49D18, MEMORY[0x1E4F3DF60]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A49D08);
    }
  }
}

void sub_1AD86327C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_1AD863300(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD863364(uint64_t a1)
{
}

void sub_1AD863384(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_1AD8586DC(255, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD863408@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1AD9028B0(*(unsigned char *)(v1 + 16));
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t sub_1AD863444(uint64_t a1, uint64_t a2)
{
  sub_1AD86327C(0, &qword_1E9A49D10, (uint64_t (*)(uint64_t))sub_1AD862A08, MEMORY[0x1E4F3DF60], MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8634EC(uint64_t a1, uint64_t a2)
{
  sub_1AD86327C(0, &qword_1E9A49D10, (uint64_t (*)(uint64_t))sub_1AD862A08, MEMORY[0x1E4F3DF60], MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SleepStagesLegend.LegendLabelStyle()
{
  return &type metadata for SleepStagesLegend.LegendLabelStyle;
}

uint64_t sub_1AD8635A4()
{
  return sub_1AD8635EC(&qword_1E9A49D38, sub_1AD862E2C, (void (*)(void))sub_1AD863690);
}

uint64_t sub_1AD8635EC(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    sub_1AD8636C4((unint64_t *)&qword_1E9A49D48, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD863690()
{
  return sub_1AD844CF8(&qword_1E9A49D40, (void (*)(uint64_t))sub_1AD862828);
}

uint64_t sub_1AD8636C4(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8586DC(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD863714()
{
  return sub_1AD8635EC(&qword_1E9A49D50, sub_1AD863364, (void (*)(void))sub_1AD86375C);
}

uint64_t sub_1AD86375C()
{
  return sub_1AD844CF8(&qword_1E9A49D58, (void (*)(uint64_t))sub_1AD8630DC);
}

uint64_t sub_1AD863790()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD8637AC(uint64_t a1)
{
}

void sub_1AD8637E0()
{
  if (!qword_1E9A49D70)
  {
    sub_1AD86386C(255, &qword_1E9A49D78, MEMORY[0x1E4F3DAD0]);
    sub_1AD9DE5B0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A49D70);
    }
  }
}

void sub_1AD86386C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_1AD8586DC(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD8638F0(uint64_t a1, uint64_t a2)
{
  sub_1AD86386C(0, &qword_1E9A49D78, MEMORY[0x1E4F3DAD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD863970(uint64_t a1, uint64_t a2)
{
  sub_1AD86386C(0, &qword_1E9A49D78, MEMORY[0x1E4F3DAD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8639F0(uint64_t a1)
{
  sub_1AD86386C(0, &qword_1E9A49D78, MEMORY[0x1E4F3DAD0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD863A68()
{
  return sub_1AD844CF8(&qword_1E9A49D80, (void (*)(uint64_t))sub_1AD863AB0);
}

void sub_1AD863AB0()
{
  if (!qword_1E9A49D88)
  {
    sub_1AD8637AC(255);
    sub_1AD844CF8(&qword_1E9A49D90, sub_1AD8637AC);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49D88);
    }
  }
}

unint64_t sub_1AD863B9C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1AD867840();
  uint64_t v2 = (void *)sub_1AD9E01C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_1AD86500C((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AD863C98(uint64_t a1)
{
  return sub_1AD8642AC(a1, (void (*)(void))sub_1AD867A38, (uint64_t)&qword_1E9A4C430, (uint64_t)type metadata accessor for AttributeName, (uint64_t (*)(uint64_t))sub_1AD86500C);
}

unint64_t sub_1AD863CE0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1AD86798C();
  uint64_t v2 = (void *)sub_1AD9E01C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_1AD86500C((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AD863DE8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1AD8678DC(0, &qword_1E9A49DE8);
  uint64_t v2 = (void *)sub_1AD9E01C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1AD865228(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AD863F18(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1AD8678DC(0, &qword_1E9A49DC8);
  uint64_t v2 = sub_1AD9E01C0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  uint64_t v7 = MEMORY[0x1E4FBB960];
  while (1)
  {
    sub_1AD8676C4(v6, (uint64_t)v16, (uint64_t)&qword_1E9A49DD0, v7, (uint64_t (*)(void, uint64_t, uint64_t))sub_1AD86792C);
    unint64_t result = sub_1AD86509C((uint64_t)v16);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v10 = v3[6] + 40 * result;
    long long v11 = v16[0];
    long long v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)sub_1AD867734(&v18, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AD86409C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1AD8678DC(0, (unint64_t *)&qword_1E9A49DF0);
  uint64_t v2 = sub_1AD9E01C0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  uint64_t v7 = MEMORY[0x1E4FBB1A0];
  while (1)
  {
    sub_1AD8676C4(v6, (uint64_t)&v16, (uint64_t)&qword_1E9A49DF8, v7, (uint64_t (*)(void, uint64_t, uint64_t))sub_1AD86792C);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_1AD865228(v16, v17);
    if (v11) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v12 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_1AD867734(&v18, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AD86421C(uint64_t a1)
{
  return sub_1AD8642AC(a1, (void (*)(void))sub_1AD8677A0, (uint64_t)&qword_1E9A4BFE0, (uint64_t)type metadata accessor for Key, (uint64_t (*)(uint64_t))sub_1AD8652A0);
}

unint64_t sub_1AD864264(uint64_t a1)
{
  return sub_1AD8642AC(a1, (void (*)(void))sub_1AD867624, (uint64_t)&unk_1E9A49DC0, (uint64_t)type metadata accessor for TraitKey, (uint64_t (*)(uint64_t))sub_1AD86500C);
}

unint64_t sub_1AD8642AC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  a2(0);
  uint64_t v9 = sub_1AD9E01C0();
  uint64_t v10 = (void *)v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v10;
  }
  uint64_t v12 = v9 + 64;
  uint64_t v13 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1AD8676C4(v13, (uint64_t)&v20, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))sub_1AD867B20);
    uint64_t v14 = v20;
    unint64_t result = a5(v20);
    if (v16) {
      break;
    }
    *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v10[6] + 8 * result) = v14;
    unint64_t result = (unint64_t)sub_1AD867734(&v21, (_OWORD *)(v10[7] + 32 * result));
    uint64_t v17 = v10[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v10[2] = v19;
    v13 += 40;
    if (!--v11)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t OneWeekResults.morningIndexRange.getter()
{
  return *(void *)v0;
}

uint64_t OneWeekResults.summaries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OneWeekResults.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for OneWeekResults() + 24);
  uint64_t v4 = sub_1AD9DCE40();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for OneWeekResults()
{
  uint64_t result = qword_1E9A49D98;
  if (!qword_1E9A49D98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id OneWeekResults.averageDurationFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for OneWeekResults() + 28));
  return v1;
}

id OneWeekResults.axisFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for OneWeekResults() + 32));
  return v1;
}

uint64_t OneWeekResults.week.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for OneWeekResults() + 36);
  return sub_1AD864584(v3, a1);
}

uint64_t sub_1AD864584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WeekResults(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL OneWeekResults.hasData.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for OneWeekResults() + 36));
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  if (v2 == 1)
  {
    uint64_t v3 = 0;
    double v4 = 0.0;
  }
  else
  {
    uint64_t v3 = v2 & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v6 = (double *)(v1 + 72);
    double v4 = 0.0;
    uint64_t v7 = v2 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      double v8 = *(v6 - 4);
      double v9 = *v6;
      v6 += 8;
      double v4 = v4 + v8 + v9;
      v7 -= 2;
    }
    while (v7);
    if (v2 == v3) {
      return v4 > 0.0;
    }
  }
  uint64_t v10 = v2 - v3;
  uint64_t v11 = (double *)(v1 + 32 * v3 + 40);
  do
  {
    double v12 = *v11;
    v11 += 4;
    double v4 = v4 + v12;
    --v10;
  }
  while (v10);
  return v4 > 0.0;
}

uint64_t static OneWeekResults.emptyResults.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_1AD9DCD30();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*MEMORY[0x1E4F29990];
  uint64_t v12 = *(void *)(MEMORY[0x1E4F29990] + 8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E4F27B20], v2);
  sub_1AD9DCD40();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
  objc_msgSend(v13, sel_setAllowedUnits_, 96);
  objc_msgSend(v13, sel_setUnitsStyle_, 1);
  id v14 = _sSo23NSDateIntervalFormatterC13SleepHealthUIE15weeklyChartAxisABvgZ_0();
  return OneWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)(v11, v12, MEMORY[0x1E4FBC860], (uint64_t)v10, v13, v14, a1);
}

uint64_t OneWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  id v80 = a5;
  uint64_t v81 = a6;
  long long v83 = a1;
  uint64_t v12 = type metadata accessor for WeekResults(0);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v77 = (uint64_t *)((char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for WeekResultsBuilder();
  uint64_t v16 = (int *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v17);
  uint64_t v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  uint64_t v20 = (int *)type metadata accessor for OneWeekResults();
  long long v21 = (char *)a7 + v20[6];
  uint64_t v22 = sub_1AD9DCE40();
  uint64_t v74 = *(void *)(v22 - 8);
  int v23 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
  v23(v21, a4, v22);
  id v24 = v80;
  *(void *)((char *)a7 + v20[7]) = v80;
  uint64_t v75 = v22;
  char v76 = v20;
  uint64_t v25 = v20[8];
  uint64_t v78 = a4;
  uint64_t v79 = a7;
  unint64_t v26 = (unint64_t)v81;
  *(void *)((char *)a7 + v25) = v81;
  uint64_t v27 = a4;
  unint64_t v28 = a3;
  v23(&v19[v16[7]], v27, v22);
  uint64_t v29 = v16[11];
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v24;
  *(void *)&v19[v29] = sub_1AD8664E8(MEMORY[0x1E4FBC860]);
  *(void *)uint64_t v19 = v83;
  *((void *)v19 + 1) = 7;
  uint64_t v73 = v16[8];
  *(void *)&v19[v73] = 0x40CC200000000000;
  *(void *)&v19[v16[9]] = v24;
  uint64_t v31 = v16[10];
  long long v83 = v19;
  uint64_t v84 = v29;
  *(void *)&v19[v31] = v26;
  if (v28 >> 62)
  {
LABEL_25:
    id v58 = (id)isUniquelyReferenced_nonNull_native;
    id v59 = (id)v26;
    swift_bridgeObjectRetain_n();
    id v60 = v58;
    id v61 = v59;
    uint64_t v32 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    unint64_t v26 = (unint64_t)v83;
    if (v32) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v32 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v33 = v24;
    id v34 = (id)v26;
    id v35 = v33;
    id v36 = v34;
    swift_bridgeObjectRetain();
    unint64_t v26 = (unint64_t)v83;
    if (v32)
    {
LABEL_3:
      unint64_t v37 = v28 & 0xC000000000000001;
      uint64_t v38 = 4;
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)&_OBJC_LABEL_PROTOCOL___HKSPSuggestionProvider;
      unint64_t v82 = v28 & 0xC000000000000001;
      do
      {
        if (v37) {
          id v39 = (id)MEMORY[0x1B3E6BFF0](v38 - 4, v28);
        }
        else {
          id v39 = *(id *)(v28 + 8 * v38);
        }
        uint64_t v40 = v39;
        uint64_t v41 = v38 - 3;
        if (__OFADD__(v38 - 4, 1))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        objc_msgSend(v39, *(SEL *)(isUniquelyReferenced_nonNull_native + 3456));
        if (sub_1AD9DFC10())
        {
          uint64_t v42 = v32;
          unint64_t v43 = v28;
          id v44 = objc_msgSend(v40, *(SEL *)(isUniquelyReferenced_nonNull_native + 3456));
          unint64_t v28 = v40;
          uint64_t v45 = v84;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v85 = *(void *)(v26 + v45);
          uint64_t v46 = v85;
          *(void *)(v26 + v45) = 0x8000000000000000;
          unint64_t v26 = sub_1AD8651E4((uint64_t)v44);
          uint64_t v48 = *(void *)(v46 + 16);
          BOOL v49 = (v47 & 1) == 0;
          uint64_t v50 = v48 + v49;
          if (__OFADD__(v48, v49)) {
            goto LABEL_23;
          }
          char v51 = v47;
          if (*(void *)(v46 + 24) >= v50)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_1AD866270();
            }
          }
          else
          {
            sub_1AD865CF0(v50, isUniquelyReferenced_nonNull_native);
            unint64_t v52 = sub_1AD8651E4((uint64_t)v44);
            if ((v51 & 1) != (v53 & 1))
            {
              uint64_t result = sub_1AD9E0310();
              __break(1u);
              return result;
            }
            unint64_t v26 = v52;
          }
          uint64_t isUniquelyReferenced_nonNull_native = v85;
          if (v51)
          {
            uint64_t v54 = *(void *)(v85 + 56);

            *(void *)(v54 + 8 * v26) = v28;
          }
          else
          {
            *(void *)(v85 + 8 * (v26 >> 6) + 64) |= 1 << v26;
            *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 8 * v26) = v44;
            *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v26) = v28;
            uint64_t v55 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
            BOOL v56 = __OFADD__(v55, 1);
            uint64_t v57 = v55 + 1;
            if (v56) {
              goto LABEL_24;
            }
            *(void *)(isUniquelyReferenced_nonNull_native + 16) = v57;
          }
          unint64_t v26 = (unint64_t)v83;
          *(void *)((char *)v83 + v84) = isUniquelyReferenced_nonNull_native;

          swift_bridgeObjectRelease();
          unint64_t v28 = v43;
          uint64_t v32 = v42;
          unint64_t v37 = v82;
          uint64_t isUniquelyReferenced_nonNull_native = 0x1E5E88000;
        }
        else
        {
        }
        ++v38;
      }
      while (v41 != v32);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v62 = swift_bridgeObjectRetain();
  sub_1AD864D84(v62);
  long long v64 = v63;
  swift_bridgeObjectRelease();
  long long v65 = v81;
  if (v64)
  {
    id v66 = objc_msgSend(v64, sel_sleepDurationGoal);
    if (v66)
    {
      long long v67 = v66;
      id v68 = objc_msgSend(self, sel_secondUnit);
      objc_msgSend(v67, sel_doubleValueForUnit_, v68);
      uint64_t v70 = v69;

      long long v65 = v81;
      *(void *)(v26 + v73) = v70;
    }
    else
    {
    }
  }
  uint64_t v71 = v77;
  sub_1AD99F86C(v77);

  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v78, v75);
  sub_1AD8665DC(v26);
  return sub_1AD866638((uint64_t)v71, (uint64_t)v79 + v76[9]);
}

uint64_t sub_1AD864D84(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = 1 << v3;
  uint64_t v5 = -1;
  if (1 << v3 < 64) {
    uint64_t v5 = ~(-1 << (1 << v3));
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    unint64_t v9 = (v6 - 1) & v6;
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
    while (2)
    {
      uint64_t v11 = 8 * v8;
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + v11);
      uint64_t v13 = *(void **)(*(void *)(a1 + 56) + v11);
      swift_bridgeObjectRetain();
      id v15 = v13;
      if (v9)
      {
LABEL_6:
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v7 << 6);
        goto LABEL_7;
      }
      while (1)
      {
        int64_t v19 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          break;
        }
        if (v19 >= v10) {
          goto LABEL_27;
        }
        unint64_t v20 = *(void *)(v2 + 8 * v19);
        ++v7;
        if (!v20)
        {
          uint64_t v7 = v19 + 1;
          if (v19 + 1 >= v10) {
            goto LABEL_27;
          }
          unint64_t v20 = *(void *)(v2 + 8 * v7);
          if (!v20)
          {
            uint64_t v7 = v19 + 2;
            if (v19 + 2 >= v10) {
              goto LABEL_27;
            }
            unint64_t v20 = *(void *)(v2 + 8 * v7);
            if (!v20)
            {
              uint64_t v7 = v19 + 3;
              if (v19 + 3 >= v10) {
                goto LABEL_27;
              }
              unint64_t v20 = *(void *)(v2 + 8 * v7);
              if (!v20)
              {
                int64_t v21 = v19 + 4;
                if (v21 >= v10)
                {
LABEL_27:
                  swift_release();
                  return v12;
                }
                unint64_t v20 = *(void *)(v2 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    uint64_t v7 = v21 + 1;
                    if (__OFADD__(v21, 1)) {
                      break;
                    }
                    if (v7 >= v10) {
                      goto LABEL_27;
                    }
                    unint64_t v20 = *(void *)(v2 + 8 * v7);
                    ++v21;
                    if (v20) {
                      goto LABEL_24;
                    }
                  }
                  __break(1u);
LABEL_44:
                  uint64_t v24 = 0;
                  uint64_t v25 = 6;
                  if (v10 > 6) {
                    uint64_t v25 = v10;
                  }
                  uint64_t v26 = v25 - 6;
                  while (v26 != v24)
                  {
                    unint64_t v23 = *(void *)(a1 + 112 + 8 * v24++);
                    if (v23)
                    {
                      uint64_t v7 = v24 + 5;
                      goto LABEL_31;
                    }
                  }
                  return 0;
                }
                uint64_t v7 = v21;
              }
            }
          }
        }
LABEL_24:
        unsigned int v14 = v20 - 1;
        unint64_t v9 = (v20 - 1) & v20;
        unint64_t v17 = __clz(__rbit64(v20)) + (v7 << 6);
LABEL_7:
        uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * v17);
        if (v18 < v12)
        {
          id v22 = *(id *)(*(void *)(a1 + 56) + 8 * v17);

          id v15 = v22;
          uint64_t v12 = v18;
          if (v9) {
            goto LABEL_6;
          }
        }
        else if (v9)
        {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_38:
      if (v14 >= 9)
      {
        unint64_t v23 = *(void *)(a1 + 96);
        if (v23)
        {
          uint64_t v7 = 4;
        }
        else
        {
          unint64_t v23 = *(void *)(a1 + 104);
          if (!v23) {
            goto LABEL_44;
          }
          uint64_t v7 = 5;
        }
LABEL_31:
        unint64_t v9 = (v23 - 1) & v23;
        unint64_t v8 = __clz(__rbit64(v23)) + (v7 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    unsigned int v14 = v3 & 0x3F;
    if (v14 > 6)
    {
      int64_t v10 = (unint64_t)(v4 + 63) >> 6;
      unint64_t v23 = *(void *)(a1 + 72);
      if (v23)
      {
        uint64_t v7 = 1;
        goto LABEL_31;
      }
      if (v14 >= 8)
      {
        unint64_t v23 = *(void *)(a1 + 80);
        if (v23)
        {
          uint64_t v7 = 2;
        }
        else
        {
          unint64_t v23 = *(void *)(a1 + 88);
          if (!v23) {
            goto LABEL_38;
          }
          uint64_t v7 = 3;
        }
        goto LABEL_31;
      }
    }
  }
  return 0;
}

unint64_t sub_1AD86500C(uint64_t a1)
{
  sub_1AD9DF710();
  sub_1AD9E03A0();
  sub_1AD9DF760();
  uint64_t v2 = sub_1AD9E03E0();
  swift_bridgeObjectRelease();
  return sub_1AD865334(a1, v2);
}

unint64_t sub_1AD86509C(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DFFC0();
  return sub_1AD8654AC(a1, v2);
}

unint64_t sub_1AD8650E0(uint64_t a1)
{
  sub_1AD9E03A0();
  sub_1AD9E03B0();
  uint64_t v2 = sub_1AD9E03E0();
  return sub_1AD865574(a1, v2);
}

unint64_t sub_1AD86514C(uint64_t a1)
{
  sub_1AD9DC7C0();
  sub_1AD867AD8(&qword_1EB725660, MEMORY[0x1E4F26E60]);
  uint64_t v2 = sub_1AD9DF640();
  return sub_1AD865610(a1, v2);
}

unint64_t sub_1AD8651E4(uint64_t a1)
{
  uint64_t v2 = sub_1AD9E0390();
  return sub_1AD865574(a1, v2);
}

unint64_t sub_1AD865228(uint64_t a1, uint64_t a2)
{
  sub_1AD9E03A0();
  sub_1AD9DF760();
  uint64_t v4 = sub_1AD9E03E0();
  return sub_1AD8657D0(a1, a2, v4);
}

unint64_t sub_1AD8652A0(uint64_t a1)
{
  sub_1AD9DF710();
  sub_1AD9E03A0();
  sub_1AD9DF760();
  uint64_t v2 = sub_1AD9E03E0();
  swift_bridgeObjectRelease();
  return sub_1AD865334(a1, v2);
}

unint64_t sub_1AD865334(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_1AD9DF710();
    uint64_t v8 = v7;
    if (v6 == sub_1AD9DF710() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_1AD9DF710();
          uint64_t v15 = v14;
          if (v13 == sub_1AD9DF710() && v15 == v16) {
            break;
          }
          char v18 = sub_1AD9E02D0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1AD8654AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1AD867744(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x1B3E6BF70](v9, a1);
      sub_1AD843E1C((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1AD865574(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1AD865610(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v4 = sub_1AD9DC7C0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  uint64_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    uint64_t v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4);
      sub_1AD867AD8(&qword_1EB725668, MEMORY[0x1E4F26E60]);
      char v16 = sub_1AD9DF6C0();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1AD8657D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1AD9E02D0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1AD9E02D0() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1AD8658B4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_1AD9DC7C0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1AD867588();
  int v48 = a2;
  uint64_t v11 = sub_1AD9E01B0();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v50 = v9;
  uint64_t v51 = v5;
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  id v44 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  BOOL v49 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v46 = v10;
  uint64_t v47 = v6;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v43) {
      break;
    }
    uint64_t v25 = v44;
    unint64_t v26 = v44[v24];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v26 = v44[v19];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v19 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v43) {
              goto LABEL_34;
            }
            unint64_t v26 = v44[v19];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v10 + 48) + v28 * v23;
    if (v48)
    {
      (*v49)(v50, v29, v51);
      uint64_t v30 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v23);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
    }
    else
    {
      (*v45)(v50, v29, v51);
      id v33 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v23);
      uint64_t v32 = *v33;
      uint64_t v31 = v33[1];
      swift_bridgeObjectRetain();
    }
    sub_1AD867AD8(&qword_1EB725660, MEMORY[0x1E4F26E60]);
    uint64_t result = sub_1AD9DF640();
    uint64_t v34 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v47;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      uint64_t v6 = v47;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v17 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v20 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v49)(*(void *)(v12 + 48) + v28 * v20, v50, v51);
    uint64_t v21 = (void *)(*(void *)(v12 + 56) + 16 * v20);
    *uint64_t v21 = v32;
    v21[1] = v31;
    ++*(void *)(v12 + 16);
    uint64_t v10 = v46;
  }
  swift_release();
  uint64_t v3 = v42;
  uint64_t v25 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v10 + 32);
  if (v41 >= 64) {
    bzero(v25, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v41;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1AD865CF0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1AD867B88();
  uint64_t result = sub_1AD9E01B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = v3;
    int64_t v35 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v35);
              }
              else {
                uint64_t *v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void **)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        id v31 = v30;
      }
      uint64_t result = sub_1AD9E0390();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

void *sub_1AD865FA0()
{
  uint64_t v40 = sub_1AD9DC7C0();
  uint64_t v1 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40, v2);
  BOOL v39 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD867588();
  uint64_t v34 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = sub_1AD9E01A0();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v42 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v32 = v42;
    id v31 = v34;
LABEL_28:
    *id v31 = v32;
    return result;
  }
  uint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v42;
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v41 = v4;
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  uint64_t v35 = v4 + 64;
  int64_t v36 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v37 = v1 + 32;
  uint64_t v38 = v1 + 16;
  unint64_t v16 = v39;
  uint64_t v15 = v40;
  uint64_t v17 = v42;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v11 << 6);
      uint64_t v20 = v41;
      goto LABEL_12;
    }
    int64_t v28 = v11 + 1;
    uint64_t v20 = v41;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v11;
    if (!v29)
    {
      int64_t v11 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v11);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v29 - 1) & v29;
    unint64_t v19 = __clz(__rbit64(v29)) + (v11 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(void *)(v20 + 48) + v21, v15);
    uint64_t v22 = *(void *)(v20 + 56);
    uint64_t v23 = 16 * v19;
    char v24 = (uint64_t *)(v22 + 16 * v19);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v17 + 48) + v21, v16, v15);
    uint64_t v27 = (void *)(*(void *)(v17 + 56) + v23);
    *uint64_t v27 = v25;
    v27[1] = v26;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    id v31 = v34;
    uint64_t v32 = v42;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v11 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v11 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v11);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1AD866270()
{
  uint64_t v1 = v0;
  sub_1AD867B88();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1AD9E01A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1AD866410(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1AD8674EC();
    uint64_t v3 = (void *)sub_1AD9E01C0();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_1AD8650E0(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

unint64_t sub_1AD8664E8(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  sub_1AD867B88();
  uint64_t v3 = (void *)sub_1AD9E01C0();
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)a1[5];
  unint64_t result = sub_1AD8651E4(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v17 = v5;
    return (unint64_t)v3;
  }
  char v8 = (void **)(a1 + 7);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v4;
    *(void *)(v3[7] + v9) = v5;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    int64_t v13 = v8 + 2;
    uint64_t v4 = (uint64_t)*(v8 - 1);
    unint64_t v14 = *v8;
    id v15 = v5;
    unint64_t result = sub_1AD8651E4(v4);
    char v8 = v13;
    uint64_t v5 = v14;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD8665DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WeekResultsBuilder();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD866638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WeekResults(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for OneWeekResults(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v37 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = a3[6];
    char v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v42 = sub_1AD9DCE40();
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
    swift_bridgeObjectRetain();
    v41(v8, v9, v42);
    uint64_t v10 = a3[7];
    uint64_t v11 = a3[8];
    uint64_t v12 = *(void **)((char *)a2 + v10);
    *(uint64_t *)((char *)v4 + v10) = (uint64_t)v12;
    int64_t v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)v4 + v11) = (uint64_t)v13;
    uint64_t v14 = a3[9];
    id v15 = (char *)v4 + v14;
    char v16 = (char *)a2 + v14;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v14);
    uint64_t v17 = *(uint64_t *)((char *)a2 + v14 + 8);
    *(void *)id v15 = v18;
    *((void *)v15 + 1) = v17;
    v15[16] = v16[16];
    unint64_t v19 = (int *)type metadata accessor for WeekResults(0);
    uint64_t v20 = v19[6];
    BOOL v39 = &v16[v20];
    uint64_t v40 = &v15[v20];
    uint64_t v21 = sub_1AD9DC7C0();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
    id v23 = v12;
    id v24 = v13;
    swift_bridgeObjectRetain();
    v22(v40, v39, v21);
    *(void *)&v15[v19[7]] = *(void *)&v16[v19[7]];
    uint64_t v25 = v19[8];
    uint64_t v26 = &v15[v25];
    uint64_t v27 = &v16[v25];
    v26[8] = v27[8];
    *(void *)uint64_t v26 = *(void *)v27;
    *(void *)&v15[v19[9]] = *(void *)&v16[v19[9]];
    v41(&v15[v19[10]], &v16[v19[10]], v42);
    uint64_t v28 = v19[11];
    unint64_t v29 = *(void **)&v16[v28];
    *(void *)&v15[v28] = v29;
    uint64_t v30 = v19[12];
    id v31 = *(void **)&v16[v30];
    *(void *)&v15[v30] = v31;
    uint64_t v32 = v19[13];
    uint64_t v33 = *(void **)&v16[v32];
    *(void *)&v15[v32] = v33;
    id v34 = v29;
    id v35 = v31;
    id v36 = v33;
  }
  return v4;
}

void destroy for OneWeekResults(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_1AD9DCE40();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);

  uint64_t v7 = a1 + a2[9];
  swift_bridgeObjectRelease();
  char v8 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v9 = v7 + v8[6];
  uint64_t v10 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  v6(v7 + v8[10], v5);

  uint64_t v11 = *(void **)(v7 + v8[13]);
}

uint64_t initializeWithCopy for OneWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v40 = sub_1AD9DCE40();
  BOOL v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16);
  swift_bridgeObjectRetain();
  v39(v7, v8, v40);
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = *(void **)(a2 + v9);
  *(void *)(a1 + v9) = v11;
  uint64_t v12 = *(void **)(a2 + v10);
  *(void *)(a1 + v10) = v12;
  uint64_t v13 = a3[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v17 = *(void *)(a2 + v13);
  uint64_t v16 = *(void *)(v15 + 8);
  *(void *)uint64_t v14 = v17;
  *(void *)(v14 + 8) = v16;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  uint64_t v18 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v19 = v18[6];
  uint64_t v37 = v15 + v19;
  uint64_t v38 = v14 + v19;
  uint64_t v20 = sub_1AD9DC7C0();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
  id v22 = v11;
  id v23 = v12;
  swift_bridgeObjectRetain();
  v21(v38, v37, v20);
  *(void *)(v14 + v18[7]) = *(void *)(v15 + v18[7]);
  uint64_t v24 = v18[8];
  uint64_t v25 = v14 + v24;
  uint64_t v26 = v15 + v24;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  *(void *)uint64_t v25 = *(void *)v26;
  *(void *)(v14 + v18[9]) = *(void *)(v15 + v18[9]);
  v39(v14 + v18[10], v15 + v18[10], v40);
  uint64_t v27 = v18[11];
  uint64_t v28 = *(void **)(v15 + v27);
  *(void *)(v14 + v27) = v28;
  uint64_t v29 = v18[12];
  uint64_t v30 = *(void **)(v15 + v29);
  *(void *)(v14 + v29) = v30;
  uint64_t v31 = v18[13];
  uint64_t v32 = *(void **)(v15 + v31);
  *(void *)(v14 + v31) = v32;
  id v33 = v28;
  id v34 = v30;
  id v35 = v32;
  return a1;
}

void *assignWithCopy for OneWeekResults(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1AD9DCE40();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)((char *)a2 + v11);
  uint64_t v13 = *(void **)((char *)a1 + v11);
  *(void *)((char *)a1 + v11) = v12;
  id v14 = v12;

  uint64_t v15 = a3[8];
  uint64_t v16 = *(void **)((char *)a2 + v15);
  uint64_t v17 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = v16;
  id v18 = v16;

  uint64_t v19 = a3[9];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = *((void *)v21 + 1);
  v20[16] = v21[16];
  *((void *)v20 + 1) = v22;
  id v23 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v24 = v23[6];
  uint64_t v25 = &v20[v24];
  uint64_t v26 = &v21[v24];
  uint64_t v27 = sub_1AD9DC7C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
  *(void *)&v20[v23[7]] = *(void *)&v21[v23[7]];
  uint64_t v28 = v23[8];
  uint64_t v29 = &v20[v28];
  uint64_t v30 = &v21[v28];
  char v31 = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v31;
  *(void *)&v20[v23[9]] = *(void *)&v21[v23[9]];
  v10(&v20[v23[10]], &v21[v23[10]], v9);
  uint64_t v32 = v23[11];
  id v33 = *(void **)&v21[v32];
  id v34 = *(void **)&v20[v32];
  *(void *)&v20[v32] = v33;
  id v35 = v33;

  uint64_t v36 = v23[12];
  uint64_t v37 = *(void **)&v21[v36];
  uint64_t v38 = *(void **)&v20[v36];
  *(void *)&v20[v36] = v37;
  id v39 = v37;

  uint64_t v40 = v23[13];
  uint64_t v41 = *(void **)&v21[v40];
  uint64_t v42 = *(void **)&v20[v40];
  *(void *)&v20[v40] = v41;
  id v43 = v41;

  return a1;
}

uint64_t initializeWithTake for OneWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1AD9DCE40();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(a2 + v12 + 8);
  *(void *)uint64_t v13 = *(void *)(a2 + v12);
  *(void *)(v13 + 8) = v15;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(a2 + v12 + 16);
  uint64_t v16 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v17 = v16[6];
  uint64_t v18 = v13 + v17;
  uint64_t v19 = v14 + v17;
  uint64_t v20 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  *(void *)(v13 + v16[7]) = *(void *)(v14 + v16[7]);
  uint64_t v21 = v16[8];
  uint64_t v22 = v13 + v21;
  uint64_t v23 = v14 + v21;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)(v13 + v16[9]) = *(void *)(v14 + v16[9]);
  v10(v13 + v16[10], v14 + v16[10], v9);
  *(void *)(v13 + v16[11]) = *(void *)(v14 + v16[11]);
  *(void *)(v13 + v16[12]) = *(void *)(v14 + v16[12]);
  *(void *)(v13 + v16[13]) = *(void *)(v14 + v16[13]);
  return a1;
}

uint64_t assignWithTake for OneWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1AD9DCE40();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  uint64_t v13 = a3[8];
  uint64_t v14 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);

  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  swift_bridgeObjectRelease();
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  uint64_t v18 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v19 = v18[6];
  uint64_t v20 = v16 + v19;
  uint64_t v21 = v17 + v19;
  uint64_t v22 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  *(void *)(v16 + v18[7]) = *(void *)(v17 + v18[7]);
  uint64_t v23 = v18[8];
  uint64_t v24 = v16 + v23;
  uint64_t v25 = v17 + v23;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  *(void *)(v16 + v18[9]) = *(void *)(v17 + v18[9]);
  v10(v16 + v18[10], v17 + v18[10], v9);
  uint64_t v26 = v18[11];
  uint64_t v27 = *(void **)(v16 + v26);
  *(void *)(v16 + v26) = *(void *)(v17 + v26);

  uint64_t v28 = v18[12];
  uint64_t v29 = *(void **)(v16 + v28);
  *(void *)(v16 + v28) = *(void *)(v17 + v28);

  uint64_t v30 = v18[13];
  char v31 = *(void **)(v16 + v30);
  *(void *)(v16 + v30) = *(void *)(v17 + v30);

  return a1;
}

uint64_t getEnumTagSinglePayload for OneWeekResults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD867190);
}

uint64_t sub_1AD867190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1AD9DCE40();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for WeekResults(0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for OneWeekResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD8672D0);
}

uint64_t sub_1AD8672D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_1AD9DCE40();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for WeekResults(0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1AD8673FC()
{
  uint64_t result = sub_1AD9DCE40();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for WeekResults(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_1AD8674EC()
{
  if (!qword_1E9A49DA8)
  {
    type metadata accessor for CLKDeviceSizeClass(255);
    sub_1AD867AD8(&qword_1E9A49DB0, type metadata accessor for CLKDeviceSizeClass);
    unint64_t v0 = sub_1AD9E01D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49DA8);
    }
  }
}

void sub_1AD867588()
{
  if (!qword_1EB725B88)
  {
    sub_1AD9DC7C0();
    sub_1AD867AD8(&qword_1EB725660, MEMORY[0x1E4F26E60]);
    unint64_t v0 = sub_1AD9E01D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725B88);
    }
  }
}

void sub_1AD867624()
{
  if (!qword_1E9A49DB8)
  {
    type metadata accessor for TraitKey(255);
    sub_1AD867AD8(&qword_1E9A496C8, type metadata accessor for TraitKey);
    unint64_t v0 = sub_1AD9E01D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49DB8);
    }
  }
}

uint64_t sub_1AD8676C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

_OWORD *sub_1AD867734(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1AD867744(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1AD8677A0()
{
  if (!qword_1E9A49DD8)
  {
    type metadata accessor for Key(255);
    sub_1AD867AD8((unint64_t *)&qword_1E9A496A0, type metadata accessor for Key);
    unint64_t v0 = sub_1AD9E01D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49DD8);
    }
  }
}

void sub_1AD867840()
{
  if (!qword_1E9A49DE0)
  {
    type metadata accessor for FeatureKey(255);
    sub_1AD867AD8(&qword_1E9A496D8, type metadata accessor for FeatureKey);
    unint64_t v0 = sub_1AD9E01D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49DE0);
    }
  }
}

void sub_1AD8678DC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1AD9E01D0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_1AD86792C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_1AD86798C()
{
  if (!qword_1E9A49E00)
  {
    type metadata accessor for TraitKey(255);
    type metadata accessor for Weight(255);
    sub_1AD867AD8(&qword_1E9A496C8, type metadata accessor for TraitKey);
    unint64_t v0 = sub_1AD9E01D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49E00);
    }
  }
}

void sub_1AD867A38()
{
  if (!qword_1E9A49E08)
  {
    type metadata accessor for AttributeName(255);
    sub_1AD867AD8((unint64_t *)&unk_1E9A4C450, type metadata accessor for AttributeName);
    unint64_t v0 = sub_1AD9E01D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49E08);
    }
  }
}

uint64_t sub_1AD867AD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD867B20(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_1AD867B88()
{
  if (!qword_1E9A49E10)
  {
    sub_1AD867BF0();
    unint64_t v0 = sub_1AD9E01D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49E10);
    }
  }
}

unint64_t sub_1AD867BF0()
{
  unint64_t result = qword_1EB725340;
  if (!qword_1EB725340)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB725340);
  }
  return result;
}

void *sub_1AD867C30()
{
  type metadata accessor for SilentModeModel();
  uint64_t v0 = swift_allocObject();
  unint64_t result = sub_1AD8686E4();
  qword_1E9A49E18 = v0;
  return result;
}

uint64_t static SilentModeModel.shared.getter()
{
  if (qword_1E9A48DA0 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t sub_1AD867CCC@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD867D4C()
{
  return sub_1AD9DDBD0();
}

uint64_t sub_1AD867DC0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1AD867E3C()
{
  return sub_1AD9DDBD0();
}

void (*sub_1AD867EAC(void *a1))(void *a1)
{
  long long v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1AD9DDBB0();
  return sub_1AD867F38;
}

void sub_1AD867F38(void *a1)
{
  unsigned __int8 v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

id sub_1AD867FA0()
{
  id v0 = sub_1AD8693D8();
  if (!v0) {
    return 0;
  }
  unsigned __int8 v1 = v0;
  id v2 = objc_msgSend(v0, sel_getSilentMode);

  return v2;
}

uint64_t sub_1AD867FE8()
{
  return swift_endAccess();
}

uint64_t sub_1AD868070(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBB390];
  sub_1AD869ED4(0, &qword_1E9A49E28, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC60]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v3, v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13((char *)&v15 - v11, a1, v4);
  v13(v9, (uint64_t)v12, v4);
  swift_beginAccess();
  sub_1AD869ED4(0, (unint64_t *)&qword_1E9A4AC40, v2, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
}

uint64_t sub_1AD868230()
{
  return swift_endAccess();
}

uint64_t sub_1AD8682B4(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBB390];
  sub_1AD869ED4(0, &qword_1E9A49E28, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC60]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v9 - v7, a1, v4);
  swift_beginAccess();
  sub_1AD869ED4(0, (unint64_t *)&qword_1E9A4AC40, v2, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

void (*sub_1AD86841C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = MEMORY[0x1E4FBB390];
  sub_1AD869ED4(0, &qword_1E9A49E28, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC60]);
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[11] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[12] = malloc(v7);
  v3[13] = malloc(v7);
  uint64_t v8 = malloc(v7);
  uint64_t v9 = OBJC_IVAR____TtC13SleepHealthUI15SilentModeModel__enabled;
  v3[14] = v8;
  v3[15] = v9;
  swift_beginAccess();
  sub_1AD869ED4(0, (unint64_t *)&qword_1E9A4AC40, v4, MEMORY[0x1E4F1AC70]);
  v3[16] = v10;
  sub_1AD9DDB90();
  swift_endAccess();
  return sub_1AD868574;
}

void sub_1AD868574(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), v3[14], v3[10]);
  uint64_t v5 = (void *)v3[14];
  uint64_t v6 = (void *)v3[12];
  size_t v7 = (void *)v3[13];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  if (a2)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    sub_1AD9DDBA0();
    swift_endAccess();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v5, v8);
  }
  else
  {
    swift_beginAccess();
    sub_1AD9DDBA0();
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v7);
  free(v6);
  free(v3);
}

void *sub_1AD8686E4()
{
  uint64_t v1 = v0;
  uint64_t v63 = *v0;
  uint64_t v62 = MEMORY[0x1E4FBCC28];
  uint64_t v61 = MEMORY[0x1E4FBB718];
  sub_1AD869D48(0, (unint64_t *)&qword_1EB724D00, MEMORY[0x1E4FBCC28], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v48 - v4;
  uint64_t v60 = sub_1AD9DFD30();
  uint64_t v64 = *(void *)(v60 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v60, v6);
  id v58 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v48 - v10;
  sub_1AD841744();
  uint64_t v57 = v12;
  uint64_t v65 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12, v13);
  id v59 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)&v48 - v17;
  sub_1AD869ED4(0, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v22);
  uint64_t v24 = (char *)&v48 - v23;
  v0[2] = 0;
  v0[3] = 0;
  uint64_t v25 = (char *)v0 + OBJC_IVAR____TtC13SleepHealthUI15SilentModeModel__enabled;
  type metadata accessor for SilentModeModel();
  LOBYTE(v66) = sub_1AD867FA0() & 1;
  sub_1AD9DDB80();
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, v24, v20);
  sub_1AD869580();
  id v56 = self;
  id v26 = objc_msgSend(v56, sel_defaultCenter);
  id v55 = self;
  id v27 = objc_msgSend(v55, sel_sharedAVSystemController);
  sub_1AD9DFD40();

  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  id v66 = (id)sub_1AD9DFCA0();
  uint64_t v28 = sub_1AD9DFC90();
  uint64_t v29 = *(void *)(v28 - 8);
  char v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  uint64_t v54 = v29 + 56;
  v53(v5, 1, 1, v28);
  uint64_t v52 = sub_1AD869E24(&qword_1EB725B80, MEMORY[0x1E4F27FC8]);
  unint64_t v51 = sub_1AD841810();
  uint64_t v30 = v60;
  sub_1AD9DDC20();
  uint64_t v50 = sub_1AD869D48;
  sub_1AD869E74((uint64_t)v5, (uint64_t)&qword_1EB724D00, v62, v61, (uint64_t (*)(void))sub_1AD869D48);

  char v31 = *(void (**)(char *, uint64_t))(v64 + 8);
  v64 += 8;
  BOOL v49 = v31;
  v31(v11, v30);
  uint64_t v32 = swift_allocObject();
  swift_weakInit();
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v63;
  *(void *)(v33 + 16) = v32;
  *(void *)(v33 + 24) = v34;
  uint64_t v48 = sub_1AD869E24((unint64_t *)&unk_1EB724CF0, (void (*)(uint64_t))sub_1AD841744);
  uint64_t v35 = v57;
  uint64_t v36 = sub_1AD9DDC40();
  swift_release();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v65 + 8);
  v65 += 8;
  v37(v18, v35);
  v1[2] = v36;
  swift_release();
  id v38 = objc_msgSend(v56, sel_defaultCenter);
  id v39 = objc_msgSend(v55, sel_sharedAVSystemController);
  uint64_t v40 = v58;
  sub_1AD9DFD40();

  id v66 = (id)sub_1AD9DFCA0();
  v53(v5, 1, 1, v28);
  uint64_t v42 = v59;
  uint64_t v41 = v60;
  sub_1AD9DDC20();
  sub_1AD869E74((uint64_t)v5, (uint64_t)&qword_1EB724D00, v62, v61, (uint64_t (*)(void))v50);

  v49(v40, v41);
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = swift_allocObject();
  uint64_t v45 = v63;
  *(void *)(v44 + 16) = v43;
  *(void *)(v44 + 24) = v45;
  uint64_t v46 = sub_1AD9DDC40();
  swift_release();
  v37(v42, v35);
  v1[3] = v46;
  swift_release();
  return v1;
}

void sub_1AD868E10()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v0 = sub_1AD9DC7E0();
    if (!v0) {
      goto LABEL_13;
    }
    uint64_t v1 = v0;
    uint64_t v18 = (void *)sub_1AD9DF710();
    sub_1AD9DFFE0();
    if (*(void *)(v1 + 16) && (unint64_t v2 = sub_1AD86509C((uint64_t)v19), (v3 & 1) != 0))
    {
      sub_1AD838570(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v20);
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1AD843E1C((uint64_t)v19);
    if (!*((void *)&v21 + 1))
    {
      swift_release();
      sub_1AD869E74((uint64_t)&v20, (uint64_t)&qword_1E9A496F8, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD869ED4);
      return;
    }
    sub_1AD837214(0, &qword_1E9A49E48);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_13:
      swift_release();
      return;
    }
    if (qword_1E9A49078 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_1AD9DD550();
    __swift_project_value_buffer(v4, (uint64_t)qword_1E9A4D2B8);
    id v5 = v18;
    uint64_t v6 = sub_1AD9DD530();
    os_log_type_t v7 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v19[0] = v17;
      *(_DWORD *)uint64_t v8 = 136446466;
      uint64_t v9 = sub_1AD9E04F0();
      *(void *)&long long v20 = sub_1AD838978(v9, v10, v19);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2082;
      id v11 = v5;
      id v12 = objc_msgSend(v11, sel_description);
      uint64_t v13 = sub_1AD9DF710();
      unint64_t v15 = v14;

      *(void *)&long long v20 = sub_1AD838978(v13, v15, v19);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v6, v7, "[%{public}s] Silent mode enabled did change: %{public}s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v17, -1, -1);
      MEMORY[0x1B3E6D1A0](v8, -1, -1);
    }
    else
    {
    }
    unsigned __int8 v16 = objc_msgSend(v5, sel_BOOLValue);
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v19[0]) = v16;
    swift_retain();
    sub_1AD9DDBD0();
    swift_release();
  }
}

uint64_t sub_1AD8691DC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (qword_1E9A49078 != -1) {
      swift_once();
    }
    uint64_t v1 = sub_1AD9DD550();
    __swift_project_value_buffer(v1, (uint64_t)qword_1E9A4D2B8);
    unint64_t v2 = sub_1AD9DD530();
    os_log_type_t v3 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v8 = v5;
      *(_DWORD *)uint64_t v4 = 136446210;
      uint64_t v6 = sub_1AD9E04F0();
      sub_1AD838978(v6, v7, &v8);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v2, v3, "[%{public}s] Server connection died, rebuilding", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v5, -1, -1);
      MEMORY[0x1B3E6D1A0](v4, -1, -1);
    }

    sub_1AD869580();
    return swift_release();
  }
  return result;
}

void static SilentModeModel.prewarm()()
{
  id v0 = objc_msgSend(self, sel_sharedAVSystemController);
}

id sub_1AD8693D8()
{
  id result = objc_msgSend(self, sel_sharedAVSystemController);
  if (!result)
  {
    if (qword_1E9A49078 != -1) {
      swift_once();
    }
    uint64_t v1 = sub_1AD9DD550();
    __swift_project_value_buffer(v1, (uint64_t)qword_1E9A4D2B8);
    unint64_t v2 = sub_1AD9DD530();
    os_log_type_t v3 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v8 = v5;
      *(_DWORD *)uint64_t v4 = 136446210;
      uint64_t v6 = sub_1AD9E04F0();
      sub_1AD838978(v6, v7, &v8);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v2, v3, "[%{public}s] Failed to access shared AVSystemController", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v5, -1, -1);
      MEMORY[0x1B3E6D1A0](v4, -1, -1);
    }

    return 0;
  }
  return result;
}

void sub_1AD869580()
{
  v24[1] = *(id *)MEMORY[0x1E4F143B8];
  id v0 = sub_1AD8693D8();
  if (v0)
  {
    uint64_t v1 = v0;
    sub_1AD869D48(0, &qword_1E9A49E40, (uint64_t (*)(uint64_t))type metadata accessor for Name, MEMORY[0x1E4FBBE00]);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1AD9E3070;
    os_log_type_t v3 = (void *)*MEMORY[0x1E4F74E40];
    *(void *)(v2 + 32) = *MEMORY[0x1E4F74E40];
    type metadata accessor for Name(0);
    id v4 = v3;
    uint64_t v5 = (void *)sub_1AD9DF850();
    swift_bridgeObjectRelease();
    uint64_t v6 = *MEMORY[0x1E4F74EA8];
    v24[0] = 0;
    unsigned int v7 = objc_msgSend(v1, sel_setAttribute_forKey_error_, v5, v6, v24);

    id v8 = v24[0];
    if (v7)
    {
      id v9 = v8;
    }
    else
    {
      id v10 = v24[0];
      id v11 = (void *)sub_1AD9DCB10();

      swift_willThrow();
      if (qword_1E9A49078 != -1) {
        swift_once();
      }
      uint64_t v12 = sub_1AD9DD550();
      __swift_project_value_buffer(v12, (uint64_t)qword_1E9A4D2B8);
      id v13 = v11;
      id v14 = v11;
      unint64_t v15 = sub_1AD9DD530();
      os_log_type_t v16 = sub_1AD9DFBC0();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v18 = (void *)swift_slowAlloc();
        v24[0] = v18;
        *(_DWORD *)uint64_t v17 = 136446466;
        uint64_t v19 = sub_1AD9E04F0();
        sub_1AD838978(v19, v20, (uint64_t *)v24);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v21 = v11;
        sub_1AD869CF0();
        uint64_t v22 = sub_1AD9DF730();
        sub_1AD838978(v22, v23, (uint64_t *)v24);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1AD834000, v15, v16, "[%{public}s] Failed to set attribute with error: %{public}s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v18, -1, -1);
        MEMORY[0x1B3E6D1A0](v17, -1, -1);
      }
      else
      {
      }
    }
  }
}

uint64_t SilentModeModel.deinit()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI15SilentModeModel__enabled;
  sub_1AD869ED4(0, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SilentModeModel.__deallocating_deinit()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI15SilentModeModel__enabled;
  sub_1AD869ED4(0, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1AD869A98()
{
  return MEMORY[0x1E4F1ABE8];
}

uint64_t sub_1AD869AA4@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SilentModeModel();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

uint64_t sub_1AD869AEC()
{
  return type metadata accessor for SilentModeModel();
}

uint64_t type metadata accessor for SilentModeModel()
{
  uint64_t result = qword_1E9A49E30;
  if (!qword_1E9A49E30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1AD869B40()
{
  sub_1AD869ED4(319, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SilentModeModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SilentModeModel);
}

uint64_t dispatch thunk of SilentModeModel.enabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SilentModeModel.enabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SilentModeModel.enabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SilentModeModel.$enabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SilentModeModel.$enabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SilentModeModel.$enabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

unint64_t sub_1AD869CF0()
{
  unint64_t result = qword_1E9A4D810;
  if (!qword_1E9A4D810)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4D810);
  }
  return result;
}

void sub_1AD869D48(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD869DAC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD869DE4()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1AD869E1C()
{
}

uint64_t sub_1AD869E24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD869E6C()
{
  return sub_1AD8691DC();
}

uint64_t sub_1AD869E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_1AD869ED4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t _s10DataSourceCMa()
{
  uint64_t result = qword_1E9A49EA0;
  if (!qword_1E9A49EA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD869F70()
{
  return swift_initClassMetadata2();
}

BOOL sub_1AD869FF0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1AD86A008()
{
  sub_1AD9DD650();
  if (*(unsigned char *)(v0 + qword_1E9A49E78) == 1)
  {
    sub_1AD86C080(0, (unint64_t *)&qword_1E9A4AFF0, MEMORY[0x1E4FB0FF8]);
    sub_1AD9DD610();
    sub_1AD9DD600();
  }
  sub_1AD86C080(0, (unint64_t *)&qword_1E9A4AFF0, MEMORY[0x1E4FB0FF8]);
  sub_1AD9DD610();
  sub_1AD9DD600();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1AD9DD600();
  if (*(unsigned char *)(v0 + qword_1E9A49E80) == 1)
  {
    sub_1AD9DD610();
    uint64_t result = sub_1AD9DD600();
  }
  if (*(unsigned char *)(v0 + qword_1E9A49E88) == 1)
  {
    sub_1AD9DD610();
    return sub_1AD9DD600();
  }
  return result;
}

uint64_t sub_1AD86A234(uint64_t result)
{
  *(unsigned char *)(result + qword_1E9A49E68) = 2;
  if (*(unsigned char *)(result + qword_1E9A49E70) != 2)
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v1 = sub_1AD9DD550();
    __swift_project_value_buffer(v1, (uint64_t)qword_1EB725958);
    uint64_t v2 = sub_1AD9DD530();
    os_log_type_t v3 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v2, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v10 = v5;
      *(_DWORD *)id v4 = 136446210;
      uint64_t v6 = sub_1AD9E04F0();
      sub_1AD838978(v6, v7, &v10);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v2, v3, "[%{public}s] performing another snapshot", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v5, -1, -1);
      MEMORY[0x1B3E6D1A0](v4, -1, -1);
    }

    return sub_1AD86B550(v8, v9);
  }
  return result;
}

id sub_1AD86A3E4(void *a1)
{
  uint64_t v2 = (void *)sub_1AD9DF6D0();
  os_log_type_t v3 = (void *)sub_1AD9DCED0();
  id v4 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_forIndexPath_, v2, v3);

  return v4;
}

uint64_t sub_1AD86A454(uint64_t a1, uint64_t a2)
{
  return sub_1AD86B964(a2);
}

id sub_1AD86A45C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1AD86A494(a1, a2, a3, a4, (void (*)(uint64_t))sub_1AD86B964);
}

uint64_t sub_1AD86A474(uint64_t a1, uint64_t a2)
{
  return sub_1AD86BD00(a2);
}

id sub_1AD86A47C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1AD86A494(a1, a2, a3, a4, (void (*)(uint64_t))sub_1AD86BD00);
}

id sub_1AD86A494(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v8 = a3;
  id v9 = a1;
  a5(a4);
  uint64_t v11 = v10;

  if (v11)
  {
    uint64_t v12 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  return v12;
}

void *sub_1AD86A52C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1AD9DCD30();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v11 - 8, v12);
  id v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86C080(0, (unint64_t *)&unk_1E9A4AFE0, MEMORY[0x1E4FB1030]);
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))sub_1AD9DD6C0();
  unint64_t v20 = (void *)v19(a1, a2);
  type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  uint64_t v21 = swift_dynamicCastClass();
  if (v21)
  {
    uint64_t v45 = v7;
    uint64_t v46 = v6;
    uint64_t v22 = (void **)(v21 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
    swift_beginAccess();
    unint64_t v23 = *v22;
    char v24 = *(unsigned char *)(v3 + qword_1E9A49E78);
    uint64_t v25 = (uint64_t)*v22 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
    swift_beginAccess();
    *(unsigned char *)(v25 + *(int *)(v15 + 32)) = (v24 & 1) == 0;
    id v26 = v20;
    id v27 = v23;
    sub_1AD936990();
    swift_endAccess();
    sub_1AD896DC4();

    int v28 = *(unsigned __int8 *)(v3 + qword_1E9A49E98);
    if (((v28 ^ (*(void *)((char *)*v22
                            + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0)) & 1) == 0)
    {
      int v29 = v28 ^ 1;
      uint64_t v31 = v45;
      uint64_t v30 = v46;
      (*(void (**)(char *, void, uint64_t))(v45 + 104))(v10, *MEMORY[0x1E4F27B20], v46);
      sub_1AD9DCD40();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v30);
      SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v14, v18);
      id v32 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
      sub_1AD897988(22, 0, 7, 0, (uint64_t)v18, v29);
      uint64_t v33 = *v22;
      *uint64_t v22 = v34;
    }
    uint64_t v35 = (void *)MEMORY[0x1B3E6D270](v3 + qword_1E9A49E60);
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  else
  {
    type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
    uint64_t v36 = swift_dynamicCastClass();
    if (v36)
    {
      char v37 = *(unsigned char *)(v3 + qword_1E9A49E78);
      uint64_t v38 = v36 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
      swift_beginAccess();
      *(unsigned char *)(v38 + *(int *)(v15 + 32)) = (v37 & 1) == 0;
      id v39 = v20;
      sub_1AD936990();
      swift_endAccess();
    }
    else
    {
      id v51 = v20;
      sub_1AD837214(0, (unint64_t *)&unk_1E9A49700);
      sub_1AD86BF74();
      id v40 = v20;
      if (swift_dynamicCast())
      {
        sub_1AD843F30(&v50, (uint64_t)v47);
        uint64_t v41 = v48;
        uint64_t v42 = v49;
        __swift_project_boxed_opaque_existential_1Tm(v47, v48);
        (*(void (**)(void, uint64_t, uint64_t))(v42 + 8))(*(void *)(v3 + qword_1E9A49E50), v41, v42);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
      }
    }
  }
  return v20;
}

id sub_1AD86A9C4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_1AD9DCF10();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCEE0();
  id v10 = a3;
  id v11 = a1;
  uint64_t v12 = sub_1AD86A52C((uint64_t)v10, (uint64_t)v9);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v12;
}

uint64_t sub_1AD86AAD8(void *a1, void *a2)
{
  sub_1AD86BFCC();
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AD9DCF10();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = qword_1E9A49E80;
  int v15 = *(unsigned __int8 *)(v2 + qword_1E9A49E80);
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_isEnabled);
  int v17 = *(unsigned __int8 *)(v2 + v14);
  *(unsigned char *)(v2 + v14) = result;
  if (result != v17)
  {
    sub_1AD86B550();
    uint64_t result = *(unsigned __int8 *)(v2 + v14);
  }
  if (((result ^ 1 | v15) & 1) == 0)
  {
    v19[0] = 0xD00000000000002ALL;
    v19[1] = 0x80000001AD9EF660;
    sub_1AD9DD6B0();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      return sub_1AD86C024((uint64_t)v8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
      if (a2)
      {
        uint64_t v18 = (void *)sub_1AD9DCED0();
        objc_msgSend(a2, sel_scrollToRowAtIndexPath_atScrollPosition_animated_, v18, 0, 1);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
  }
  return result;
}

uint64_t sub_1AD86ACE4()
{
  swift_release();
  swift_release();
  return swift_unknownObjectWeakDestroy();
}

id sub_1AD86AD34()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s10DataSourceCMa();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD86AD6C()
{
  swift_release();
  swift_release();
  return swift_unknownObjectWeakDestroy();
}

void sub_1AD86ADC8()
{
}

uint64_t sub_1AD86AE00()
{
  return _s10DataSourceCMa();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s10DataSourceC17SnapshotOperationVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s10DataSourceC17SnapshotOperationVwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD86AF80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10DataSourceC17SnapshotOperationVMa()
{
  return &_s10DataSourceC17SnapshotOperationVN;
}

id sub_1AD86AFB8(void *a1, uint64_t a2, char a3, char a4)
{
  sub_1AD86C080(0, (unint64_t *)&qword_1E9A4AFF0, MEMORY[0x1E4FB0FF8]);
  uint64_t v41 = *(void *)(v9 - 8);
  uint64_t v42 = v9;
  MEMORY[0x1F4188790](v9, v10);
  id v40 = (char *)&v40 - v11;
  *(void *)&v4[qword_1E9A49E58] = 0;
  swift_unknownObjectWeakInit();
  v4[qword_1E9A49E68] = 2;
  v4[qword_1E9A49E70] = 2;
  v4[qword_1E9A49E78] = (*(unsigned char *)(a2 + 49) & 1) == 0;
  uint64_t v12 = *(void **)(a2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  uint64_t v13 = v4;
  id v14 = objc_msgSend(v12, sel_alarmConfiguration);
  objc_msgSend(v14, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v15 = v43;
  unsigned __int8 v16 = objc_msgSend(v43, sel_isEnabled);

  v13[qword_1E9A49E80] = v16;
  v13[qword_1E9A49E88] = a3;
  v13[qword_1E9A49E90] = *(unsigned char *)(a2 + 80);
  v13[qword_1E9A49E98] = a4;
  *(void *)&v13[qword_1E9A49E50] = a2;
  swift_unknownObjectWeakAssign();
  swift_retain();

  id v17 = a1;
  id v18 = (id)sub_1AD9DD670();
  sub_1AD9DD690();

  if (*((unsigned char *)v18 + qword_1E9A49E78) == 1)
  {
    type metadata accessor for ScheduleOccurrenceDayPickerTableViewCell();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    unint64_t v20 = (void *)sub_1AD9DF6D0();
    objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v20);

    type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  }
  else
  {
    type metadata accessor for ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell();
  }
  uint64_t v21 = swift_getObjCClassFromMetadata();
  uint64_t v22 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v21, v22);

  unint64_t v23 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v21, v23);

  type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  uint64_t v24 = swift_getObjCClassFromMetadata();
  uint64_t v25 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v24, v25);

  id v26 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v24, v26);

  type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
  uint64_t v27 = swift_getObjCClassFromMetadata();
  int v28 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v27, v28);

  type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  uint64_t v29 = swift_getObjCClassFromMetadata();
  uint64_t v30 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v29, v30);

  type metadata accessor for ScheduleOccurrenceAlarmSoundTableViewCell();
  uint64_t v31 = swift_getObjCClassFromMetadata();
  id v32 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v31, v32);

  type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell();
  uint64_t v33 = swift_getObjCClassFromMetadata();
  uint64_t v34 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v33, v34);

  type metadata accessor for ScheduleOccurrenceDeleteTableViewCell();
  uint64_t v35 = swift_getObjCClassFromMetadata();
  uint64_t v36 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v35, v36);

  id v37 = v18;
  uint64_t v38 = v40;
  sub_1AD86A008();
  sub_1AD9DD6A0();

  (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v42);
  return v37;
}

void sub_1AD86B550()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  sub_1AD86C080(0, (unint64_t *)&qword_1E9A4AFF0, MEMORY[0x1E4FB0FF8]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  int v8 = (char *)&v30 - v7;
  int v31 = v0[qword_1E9A49E98];
  uint64_t v9 = qword_1E9A49E68;
  int v10 = v0[qword_1E9A49E68];
  if (v10 == 2)
  {
    v0[qword_1E9A49E70] = 2;
    v0[v9] = v31;
    sub_1AD86A008();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v0;
    *(void *)(v11 + 24) = ObjectType;
    uint64_t v12 = v0;
    sub_1AD9DD6A0();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_1AD9DD550();
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)qword_1EB725958);
    id v15 = sub_1AD9DD530();
    os_log_type_t v16 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v30 = v14;
      id v18 = (uint8_t *)v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v33 = v19;
      *(_DWORD *)id v18 = 136446210;
      uint64_t v20 = sub_1AD9E04F0();
      uint64_t v32 = sub_1AD838978(v20, v21, &v33);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v15, v16, "[%{public}s] already applying snapshot", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v19, -1, -1);
      MEMORY[0x1B3E6D1A0](v18, -1, -1);
    }

    if ((v31 ^ ((v10 & 1) == 0)))
    {
      uint64_t v22 = qword_1E9A49E70;
      char v23 = 2;
    }
    else
    {
      uint64_t v24 = sub_1AD9DD530();
      os_log_type_t v25 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v24, v25))
      {
        id v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v33 = v27;
        *(_DWORD *)id v26 = 136446210;
        uint64_t v28 = sub_1AD9E04F0();
        uint64_t v32 = sub_1AD838978(v28, v29, &v33);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v24, v25, "[%{public}s] we'll need to re-apply when it's done", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v27, -1, -1);
        MEMORY[0x1B3E6D1A0](v26, -1, -1);
      }

      uint64_t v22 = qword_1E9A49E70;
      char v23 = v31;
    }
    v1[v22] = v23;
  }
}

uint64_t sub_1AD86B964(uint64_t a1)
{
  uint64_t v3 = sub_1AD9DCF10();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86BF1C();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1AD9E3080;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = 0;
  MEMORY[0x1B3E68E60]();
  sub_1AD9DD680();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v9 = v16;
  if (!v16) {
    return 0;
  }
  uint64_t v10 = v15;
  if (v15 == 0xD000000000000028 && v16 == 0x80000001AD9EF4B0 || (sub_1AD9E02D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (qword_1EB724E38 == -1) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  if ((v10 != 0xD00000000000002BLL || v9 != 0x80000001AD9EF510) && (sub_1AD9E02D0() & 1) == 0)
  {
    if (v10 == 0xD00000000000002DLL && v9 == 0x80000001AD9EF4E0
      || (sub_1AD9E02D0() & 1) != 0
      || v10 == 0xD00000000000003ELL && v9 == 0x80000001AD9EF540)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v13 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0) {
        return 0;
      }
    }
    if (*(unsigned char *)(v1 + qword_1E9A49E78) == 1)
    {
      if (qword_1EB724E38 == -1) {
        goto LABEL_11;
      }
      goto LABEL_24;
    }
    return 0;
  }
  swift_bridgeObjectRelease();
  if (qword_1EB724E38 != -1) {
LABEL_24:
  }
    swift_once();
LABEL_11:
  id v11 = (id)qword_1EB727930;
  uint64_t v12 = sub_1AD9DCA70();

  return v12;
}

uint64_t sub_1AD86BD00(uint64_t a1)
{
  uint64_t v3 = sub_1AD9DCF10();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86BF1C();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1AD9E3080;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = 0;
  MEMORY[0x1B3E68E60]();
  sub_1AD9DD680();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v9 = v14;
  if (!v14) {
    return v9;
  }
  if (v13 == 0xD000000000000029 && v14 == 0x80000001AD9EF600)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0;
    }
  }
  if (*(unsigned char *)(v1 + qword_1E9A49E90) != 1) {
    return 0;
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v11 = (id)qword_1EB727930;
  uint64_t v9 = sub_1AD9DCA70();

  return v9;
}

void sub_1AD86BF1C()
{
  if (!qword_1E9A49290)
  {
    unint64_t v0 = sub_1AD9E0290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49290);
    }
  }
}

unint64_t sub_1AD86BF74()
{
  unint64_t result = qword_1E9A4AFD0;
  if (!qword_1E9A4AFD0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4AFD0);
  }
  return result;
}

void sub_1AD86BFCC()
{
  if (!qword_1E9A49298)
  {
    sub_1AD9DCF10();
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49298);
    }
  }
}

uint64_t sub_1AD86C024(uint64_t a1)
{
  sub_1AD86BFCC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1AD86C080(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *))
{
  if (!*a2)
  {
    v6[0] = MEMORY[0x1E4FBB1A0];
    v6[1] = MEMORY[0x1E4FBB1A0];
    v6[2] = MEMORY[0x1E4FBB1B0];
    v6[3] = MEMORY[0x1E4FBB1B0];
    unint64_t v4 = a3(0, v6);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD86C0EC()
{
  return swift_deallocObject();
}

uint64_t sub_1AD86C124()
{
  return sub_1AD86A234(*(void *)(v0 + 16));
}

uint64_t sub_1AD86C12C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1B3E6C000](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_1AD86EB3C(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_1AD9DF870();
}

uint64_t sub_1AD86C2F8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1AD99A70C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD86C450(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_1AD99A978(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(sub_1AD9DD390() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD86C5F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1AD99A828(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  sub_1AD86E54C();
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD86C75C(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (void *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  *unint64_t v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1AD86C7C8()
{
  return swift_retain();
}

uint64_t sub_1AD86C814(uint64_t a1)
{
  unint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  *unint64_t v3 = a1;
  return swift_release();
}

uint64_t (*sub_1AD86C868())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1AD86C8C4(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int64_t v4 = (void *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
  swift_beginAccess();
  *int64_t v4 = v2;
  v4[1] = v3;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_1AD86C930()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1AD86C980(uint64_t a1, uint64_t a2)
{
  int64_t v5 = (void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
  swift_beginAccess();
  *int64_t v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1AD86C9E0())()
{
  return j__swift_endAccess;
}

uint64_t SleepOnboardingFlowController.presentationStyle.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_presentationStyle);
}

void SleepOnboardingFlowController.__allocating_init(userInfo:)()
{
}

id SleepOnboardingFlowController.__allocating_init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  id v17 = objc_allocWithZone(v8);
  return SleepOnboardingFlowController.init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

id SleepOnboardingFlowController.init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  BOOL v12 = &v8[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate];
  *(void *)BOOL v12 = 0;
  *((void *)v12 + 1) = 0;
  *(void *)&v8[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_sleepChangeObserver] = 0;
  *(void *)&v8[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo] = a5;
  *(void *)&v8[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_presentationStyle] = a6;
  swift_retain();
  uint64_t v13 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    int64_t v14 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v14 = 0;
  }
  v24.receiver = v8;
  v24.super_class = (Class)type metadata accessor for SleepOnboardingFlowController();
  id v15 = objc_msgSendSuper2(&v24, sel_initWithTitle_detailText_icon_contentLayout_, v13, v14, a7, a8);

  id v16 = v15;
  objc_msgSend(v16, sel_setModalInPresentation_, 1);
  id v17 = objc_msgSend(v16, sel_headerView);
  objc_msgSend(v17, sel_setTitleHyphenationFactor_, 0.0);

  id v18 = objc_msgSend(v16, sel_navigationItem);
  objc_msgSend(v18, sel_setBackButtonDisplayMode_, 1);

  id v19 = objc_msgSend(v16, sel_headerView);
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1AD9E53A0;
  *(void *)(v20 + 32) = sub_1AD9DF710();
  *(void *)(v20 + 40) = v21;
  *(void *)(v20 + 48) = 0x7065656C53;
  *(void *)(v20 + 56) = 0xE500000000000000;
  *(void *)(v20 + 64) = 0x696472616F626E4FLL;
  *(void *)(v20 + 72) = 0xEA0000000000676ELL;
  sub_1AD86C2F8((uint64_t)&unk_1F0469D78);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  sub_1AD9DF690();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  int64_t v22 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_setAccessibilityIdentifier_, v22);

  swift_release();
  return v16;
}

uint64_t type metadata accessor for SleepOnboardingFlowController()
{
  return self;
}

uint64_t sub_1AD86CE44(char a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  v22.receiver = v2;
  v22.super_class = (Class)type metadata accessor for SleepOnboardingFlowController();
  objc_msgSendSuper2(&v22, sel_viewWillAppear_, a1 & 1);
  int64_t v4 = &v2[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  int64_t v5 = *(void **)(*(void *)v4 + 16);
  swift_retain();
  id v6 = objc_msgSend(v5, sel_source);
  uint64_t v7 = sub_1AD9DF710();
  uint64_t v9 = v8;
  if (v7 == sub_1AD9DF710() && v9 == v10)
  {
    swift_release();

    return swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = sub_1AD9E02D0();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_1AD9DD550();
      __swift_project_value_buffer(v14, (uint64_t)qword_1EB725958);
      id v15 = sub_1AD9DD530();
      os_log_type_t v16 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v15, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        uint64_t v21 = v18;
        *(_DWORD *)id v17 = 136446210;
        uint64_t v19 = sub_1AD9E04F0();
        sub_1AD838978(v19, v20, &v21);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v15, v16, "[%{public}s] Observing sleep settings or schedule changes for dismissal", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v18, -1, -1);
        MEMORY[0x1B3E6D1A0](v17, -1, -1);
      }

      *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_sleepChangeObserver] = sub_1AD86D130(&OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo, (uint64_t)&unk_1F046B6A8, (uint64_t)sub_1AD86F2FC);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1AD86D108()
{
  return sub_1AD86D130(&OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo, (uint64_t)&unk_1F046B680, (uint64_t)sub_1AD86EE0C);
}

uint64_t sub_1AD86D130(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  sub_1AD86E5A4();
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v49 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86E5FC(0);
  uint64_t v46 = v8;
  MEMORY[0x1F4188790](v8, v9);
  sub_1AD86E734(0);
  v44[1] = v10;
  MEMORY[0x1F4188790](v10, v11);
  sub_1AD86E888();
  uint64_t v45 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  os_log_type_t v16 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86E970();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v50 = v17;
  uint64_t v51 = v18;
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v47 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86EAA8();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v52 = v21;
  uint64_t v53 = v22;
  MEMORY[0x1F4188790](v21, v23);
  uint64_t v48 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v3 + *a1;
  swift_beginAccess();
  uint64_t v26 = *(void *)(*(void *)v25 + 112);
  uint64_t v27 = *(void *)(*(void *)v25 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(*(void *)v25 + 88), v26);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v27 + 40))(v57, v26, v27);
  uint64_t v28 = v58;
  uint64_t v29 = v59;
  __swift_project_boxed_opaque_existential_1Tm(v57, v58);
  id v56 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
  sub_1AD86E810();
  sub_1AD86EE14((unint64_t *)&qword_1E9A49EF0, (void (*)(uint64_t))sub_1AD86E810);
  sub_1AD9DDC00();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
  uint64_t v30 = *(void *)(*(void *)v25 + 112);
  uint64_t v31 = *(void *)(*(void *)v25 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(*(void *)v25 + 88), v30);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v31 + 48))(v57, v30, v31);
  uint64_t v32 = v58;
  uint64_t v33 = v59;
  __swift_project_boxed_opaque_existential_1Tm(v57, v58);
  id v56 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v32, v33);
  sub_1AD86E638();
  sub_1AD86EE14((unint64_t *)&qword_1E9A4B030, (void (*)(uint64_t))sub_1AD86E638);
  sub_1AD9DDC00();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
  sub_1AD86EE14(&qword_1E9A49F00, sub_1AD86E734);
  sub_1AD86EE14(&qword_1E9A49F08, sub_1AD86E5FC);
  sub_1AD9DDA30();
  sub_1AD86EE14(&qword_1E9A49F28, (void (*)(uint64_t))sub_1AD86E888);
  uint64_t v34 = v45;
  uint64_t v35 = sub_1AD9DDBF0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v34);
  v57[0] = v35;
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  id v56 = (id)sub_1AD9DFCA0();
  uint64_t v36 = sub_1AD9DFC90();
  uint64_t v37 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v49, 1, 1, v36);
  sub_1AD86EA3C();
  sub_1AD86EE14(&qword_1E9A49F18, (void (*)(uint64_t))sub_1AD86EA3C);
  sub_1AD841810();
  uint64_t v38 = v47;
  sub_1AD9DDC20();
  sub_1AD86ED78(v37);

  swift_release();
  sub_1AD86EE14(&qword_1E9A4AAC0, (void (*)(uint64_t))sub_1AD86E970);
  id v39 = v48;
  uint64_t v40 = v50;
  sub_1AD9DDC30();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v38, v40);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD86EE14(&qword_1E9A49F30, (void (*)(uint64_t))sub_1AD86EAA8);
  uint64_t v41 = v52;
  uint64_t v42 = sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v41);
  return v42;
}

id sub_1AD86D908(char a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  int64_t v4 = &v1[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  uint64_t v5 = *(void **)(*(void *)v4 + 16);
  swift_retain();
  id v6 = objc_msgSend(v5, sel_source);
  uint64_t v7 = sub_1AD9DF710();
  uint64_t v9 = v8;
  if (v7 == sub_1AD9DF710() && v9 == v10)
  {
    swift_release();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = sub_1AD9E02D0();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_sleepChangeObserver] = 0;
      swift_release();
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v13 = sub_1AD9DD550();
      __swift_project_value_buffer(v13, (uint64_t)qword_1EB725958);
      uint64_t v14 = sub_1AD9DD530();
      os_log_type_t v15 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v14, v15))
      {
        os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        uint64_t v22 = v17;
        *(_DWORD *)os_log_type_t v16 = 136446210;
        uint64_t v18 = sub_1AD9E04F0();
        sub_1AD838978(v18, v19, &v22);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v14, v15, "[%{public}s] Done observing sleep settings or schedule changes", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v17, -1, -1);
        MEMORY[0x1B3E6D1A0](v16, -1, -1);
      }
    }
  }
  uint64_t v20 = (objc_class *)type metadata accessor for SleepOnboardingFlowController();
  v23.receiver = v2;
  v23.super_class = v20;
  return objc_msgSendSuper2(&v23, sel_viewWillDisappear_, a1 & 1);
}

void sub_1AD86DC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = qword_1E9A48DA8;
  swift_bridgeObjectRetain();
  if (v9 != -1) {
    swift_once();
  }
  id v10 = (id)qword_1E9A49EB0;
  uint64_t v11 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v11, v10);

  if (v12)
  {
    uint64_t v13 = (void *)sub_1AD9DF6D0();
    id v14 = (id)sub_1AD9DF6D0();
    objc_msgSend(v7, sel_addBulletedListItemWithTitle_description_image_tintColor_, v13, v14, v12, a7);
  }
  else
  {
    __break(1u);
  }
}

id SleepOnboardingFlowController.__allocating_init(title:detailText:symbolName:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  id v12 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    uint64_t v13 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    id v14 = 0;
    goto LABEL_6;
  }
  uint64_t v13 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  id v14 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
LABEL_6:
  id v15 = objc_msgSend(objc_allocWithZone(v8), sel_initWithTitle_detailText_symbolName_contentLayout_, v12, v13, v14, a7);

  return v15;
}

void SleepOnboardingFlowController.init(title:detailText:symbolName:contentLayout:)()
{
}

id SleepOnboardingFlowController.__allocating_init(title:detailText:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v11 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    id v12 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v12 = 0;
  }
  id v13 = objc_msgSend(objc_allocWithZone(v7), sel_initWithTitle_detailText_icon_contentLayout_, v11, v12, a5, a6);

  return v13;
}

void SleepOnboardingFlowController.init(title:detailText:icon:contentLayout:)()
{
}

id SleepOnboardingFlowController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepOnboardingFlowController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD86E04C()
{
  return swift_retain();
}

uint64_t sub_1AD86E09C()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1AD86E0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(*v2 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1AD86E154())()
{
  return j_j__swift_endAccess;
}

void sub_1AD86E1B4()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  uint64_t v1 = self;
  id v2 = v0;
  id v3 = objc_msgSend(v1, sel_configurationWithTextStyle_, v2);

  qword_1E9A49EB0 = (uint64_t)v3;
}

void sub_1AD86E220(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB1A0]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1AD86E270()
{
  unint64_t result = qword_1EB725610;
  if (!qword_1EB725610)
  {
    sub_1AD86E220(255, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725610);
  }
  return result;
}

uint64_t sub_1AD86E2E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = (void *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t sub_1AD86E340@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
  swift_beginAccess();
  *a2 = *v3;
  return swift_unknownObjectRetain();
}

uint64_t method lookup function for SleepOnboardingFlowController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepOnboardingFlowController);
}

uint64_t dispatch thunk of SleepOnboardingFlowController.userInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.userInfo.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.userInfo.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.__allocating_init(userInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.__allocating_init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.addBulletedListItem(title:description:systemImageName:imageColor:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

unint64_t sub_1AD86E54C()
{
  unint64_t result = qword_1E9A4A3C0;
  if (!qword_1E9A4A3C0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A3C0);
  }
  return result;
}

void sub_1AD86E5A4()
{
  if (!qword_1EB724D00)
  {
    sub_1AD9DFC90();
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB724D00);
    }
  }
}

void sub_1AD86E5FC(uint64_t a1)
{
}

void sub_1AD86E638()
{
  if (!qword_1EB725060)
  {
    sub_1AD86E6CC(255, (unint64_t *)&qword_1EB7250A0, (unint64_t *)&qword_1EB725090, 0x1E4FA5540, MEMORY[0x1E4FBB718]);
    unint64_t v0 = sub_1AD9DDB20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725060);
    }
  }
}

void sub_1AD86E6CC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_1AD837214(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_1AD86E734(uint64_t a1)
{
}

void sub_1AD86E770(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_1AD86EE14(a4, a5);
    unint64_t v8 = sub_1AD9DDA00();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD86E810()
{
  if (!qword_1E9A49EE8)
  {
    sub_1AD837214(255, &qword_1E9A4AB30);
    unint64_t v0 = sub_1AD9DDB20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49EE8);
    }
  }
}

void sub_1AD86E888()
{
  if (!qword_1E9A49EF8)
  {
    sub_1AD86E734(255);
    sub_1AD86E5FC(255);
    sub_1AD86EE14(&qword_1E9A49F00, sub_1AD86E734);
    sub_1AD86EE14(&qword_1E9A49F08, sub_1AD86E5FC);
    unint64_t v0 = sub_1AD9DDA20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49EF8);
    }
  }
}

void sub_1AD86E970()
{
  if (!qword_1E9A49F10)
  {
    sub_1AD86EA3C();
    sub_1AD837214(255, (unint64_t *)&qword_1EB724D50);
    sub_1AD86EE14(&qword_1E9A49F18, (void (*)(uint64_t))sub_1AD86EA3C);
    sub_1AD841810();
    unint64_t v0 = sub_1AD9DDA50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49F10);
    }
  }
}

void sub_1AD86EA3C()
{
  if (!qword_1E9A4AAB0)
  {
    unint64_t v0 = sub_1AD9DDA70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4AAB0);
    }
  }
}

void sub_1AD86EAA8()
{
  if (!qword_1E9A49F20)
  {
    sub_1AD86E970();
    sub_1AD86EE14(&qword_1E9A4AAC0, (void (*)(uint64_t))sub_1AD86E970);
    unint64_t v0 = sub_1AD9DDA10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49F20);
    }
  }
}

uint64_t sub_1AD86EB3C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1AD86E6CC(0, &qword_1E9A49F38, (unint64_t *)&qword_1E9A4A090, 0x1E4F28DC8, MEMORY[0x1E4FBB320]);
        sub_1AD86F278();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          id v12 = sub_1AD92E6D0(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD86ED78(uint64_t a1)
{
  sub_1AD86E5A4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD86EDD4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD86EE0C()
{
  sub_1AD86F068(v0);
}

uint64_t sub_1AD86EE14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD86EE5C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v12[0] = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_1AD838978(0xD00000000000001DLL, 0x80000001AD9E53B0, v12);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Sleep settings or schedule changed during onboarding, dismissing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1B3E6D270](v1);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = (void *)(v7 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
    swift_beginAccess();
    if (*v9)
    {
      uint64_t v10 = v9[1];
      swift_unknownObjectRetain();

      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);
      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_1AD86F068(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v12[0] = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_1AD838978(0xD000000000000026, 0x80000001AD9F0620, v12);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Sleep settings or schedule changed during onboarding, dismissing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1B3E6D270](v1);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = (void *)(v7 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
    swift_beginAccess();
    if (*v9)
    {
      uint64_t v10 = v9[1];
      swift_unknownObjectRetain();

      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);
      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

unint64_t sub_1AD86F278()
{
  unint64_t result = qword_1E9A49F40;
  if (!qword_1E9A49F40)
  {
    sub_1AD86E6CC(255, &qword_1E9A49F38, (unint64_t *)&qword_1E9A4A090, 0x1E4F28DC8, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49F40);
  }
  return result;
}

void sub_1AD86F2FC()
{
  sub_1AD86EE5C(v0);
}

id static HKSPSuggestionProvider<>.proactive.getter()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for ProactiveSuggestionProvider());
  return objc_msgSend(v0, sel_init);
}

id ProactiveSuggestionProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t type metadata accessor for ProactiveSuggestionProvider()
{
  return self;
}

void sub_1AD86F398(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4B2F0]), sel_init);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v7[4] = sub_1AD86F560;
  v7[5] = v5;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = sub_1AD86F738;
  v7[3] = &block_descriptor_0;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_predictedSleepSuggestionWithCompletionHandler_, v6);
  _Block_release(v6);
}

void sub_1AD86F498(void *a1, uint64_t a2, void (*a3)(void))
{
  if (a2)
  {
    a3(0);
  }
  else
  {
    if (a1) {
      a1 = sub_1AD86F568();
    }
    id v4 = a1;
    ((void (*)(void *, void))a3)(a1, 0);
  }
}

uint64_t sub_1AD86F528()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1AD86F560(void *a1, uint64_t a2)
{
  sub_1AD86F498(a1, a2, *(void (**)(void))(v2 + 16));
}

void *sub_1AD86F568()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5500]), sel_init);
  objc_msgSend(v1, sel_setEnabled_, 1);
  objc_msgSend(v1, sel_setSleepDurationGoal_, *MEMORY[0x1E4FA5398] * 60.0 * 60.0);
  id v2 = objc_msgSend(v0, sel_occurrence);
  id v3 = (void *)sub_1AD86FAD8();

  objc_msgSend(v3, sel_mutableCopy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&unk_1E9A4D9E0);
  swift_dynamicCast();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54F8]), sel_init);
  objc_msgSend(v4, sel_setEnabled_, 0);
  objc_msgSend(v6, sel_setAlarmConfiguration_, v4);
  objc_msgSend(v1, sel_saveOccurrence_, v6);
  objc_msgSend(v1, sel_copy);
  sub_1AD9DFF20();

  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1EB725090);
  swift_dynamicCast();
  return v6;
}

void sub_1AD86F738(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void sub_1AD86F934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = sub_1AD9DCB00();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

id ProactiveSuggestionProvider.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProactiveSuggestionProvider();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ProactiveSuggestionProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProactiveSuggestionProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ProactiveSuggestionProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ProactiveSuggestionProvider);
}

uint64_t dispatch thunk of ProactiveSuggestionProvider.hksp_suggestedSleepSchedule(completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50))();
}

uint64_t sub_1AD86FA98()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1AD86FAD0(uint64_t a1, uint64_t a2)
{
  sub_1AD86F934(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1AD86FAD8()
{
  id v1 = v0;
  sub_1AD8706EC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  uint64_t v4 = MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v121 = (char *)v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v122 = (char *)v108 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  uint64_t v117 = (char *)v108 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  uint64_t v118 = (uint64_t)v108 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13, v15);
  uint64_t v125 = (char *)v108 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16, v18);
  uint64_t v123 = (void (*)(char *, char *, uint64_t))((char *)v108 - v20);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v24 = (char *)v108 - v23;
  MEMORY[0x1F4188790](v22, v25);
  uint64_t v27 = (char *)v108 - v26;
  sub_1AD8706EC(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68]);
  MEMORY[0x1F4188790](v28 - 8, v29);
  uint64_t v31 = (char *)v108 - v30;
  sub_1AD8706EC(0, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v32 - 8, v33);
  uint64_t v35 = (char *)v108 - v34;
  uint64_t v36 = sub_1AD9DC990();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v36, v38);
  uint64_t v119 = (char *)v108 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = MEMORY[0x1F4188790](v39, v41);
  uint64_t v120 = (char *)v108 - v43;
  uint64_t v45 = MEMORY[0x1F4188790](v42, v44);
  unint64_t v130 = (char *)v108 - v46;
  uint64_t v48 = MEMORY[0x1F4188790](v45, v47);
  uint64_t v50 = (char *)v108 - v49;
  uint64_t v52 = MEMORY[0x1F4188790](v48, v51);
  uint64_t v114 = (uint64_t)v108 - v53;
  MEMORY[0x1F4188790](v52, v54);
  id v56 = (char *)v108 - v55;
  id v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5508]), sel_init);
  id v58 = objc_msgSend(v1, sel_weekdays);
  id v124 = v57;
  objc_msgSend(v57, sel_setWeekdays_, v58);
  uint64_t v59 = sub_1AD9DCE40();
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56);
  uint64_t v113 = v59;
  uint64_t v112 = v61;
  uint64_t v111 = v60 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v61)(v35, 1, 1);
  uint64_t v62 = sub_1AD9DCEB0();
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56);
  uint64_t v110 = v62;
  uint64_t v109 = v64;
  v108[1] = v63 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v64)(v31, 1, 1);
  uint64_t v128 = v56;
  uint64_t v115 = v35;
  unint64_t v116 = v31;
  sub_1AD9DC970();
  id v129 = v1;
  id v65 = objc_msgSend(v1, sel_bedtimeComponents);
  if (v65)
  {
    id v66 = v65;
    sub_1AD9DC8C0();

    long long v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v67((uint64_t)v24, 0, 1, v36);
  }
  else
  {
    long long v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v67((uint64_t)v24, 1, 1, v36);
  }
  uint64_t v68 = v37;
  sub_1AD870740((uint64_t)v24, (uint64_t)v27);
  uint64_t v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  unsigned int v70 = v69(v27, 1, v36);
  uint64_t v71 = (uint64_t)v123;
  if (v70 == 1)
  {
    sub_1AD8707C0((uint64_t)v27);
  }
  else
  {
    sub_1AD9DC8F0();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v27, v36);
  }
  uint64_t v72 = v128;
  sub_1AD9DC900();
  id v73 = objc_msgSend(v129, sel_bedtimeComponents);
  if (v73)
  {
    uint64_t v74 = v73;
    uint64_t v75 = (uint64_t)v125;
    sub_1AD9DC8C0();

    uint64_t v76 = 0;
  }
  else
  {
    uint64_t v76 = 1;
    uint64_t v75 = (uint64_t)v125;
  }
  uint64_t v125 = (char *)(v68 + 56);
  v67(v75, v76, 1, v36);
  sub_1AD870740(v75, v71);
  if (v69((char *)v71, 1, v36) == 1)
  {
    sub_1AD8707C0(v71);
  }
  else
  {
    sub_1AD9DC940();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v71, v36);
  }
  sub_1AD9DC950();
  uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  v77(v50, v72, v36);
  uint64_t v78 = sub_1AD9DC940();
  uint64_t v126 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v69;
  unint64_t v127 = v67;
  uint64_t v123 = v77;
  if (v79)
  {
    uint64_t v83 = v114;
    (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v114, v50, v36);
  }
  else
  {
    uint64_t v80 = lrint((double)v78 / 5.0);
    uint64_t v81 = (unsigned __int128)(v80 * (__int128)5) >> 64;
    uint64_t result = 5 * v80;
    if (v81 != result >> 63)
    {
      __break(1u);
      goto LABEL_35;
    }
    sub_1AD9DC950();
    uint64_t v83 = v114;
    sub_1AD9A2450(v114);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v50, v36);
  }
  uint64_t v84 = (void *)sub_1AD9DC8B0();
  uint64_t v85 = v68;
  uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
  v86(v83, v36);
  objc_msgSend(v124, sel_setBedtimeComponents_, v84);

  uint64_t v87 = 1;
  v112(v115, 1, 1, v113);
  v109(v116, 1, 1, v110);
  sub_1AD9DC970();
  id v88 = objc_msgSend(v129, sel_wakeUpComponents);
  if (v88)
  {
    uint64_t v89 = v88;
    uint64_t v90 = (uint64_t)v117;
    sub_1AD9DC8C0();

    uint64_t v87 = 0;
  }
  else
  {
    uint64_t v90 = (uint64_t)v117;
  }
  v127(v90, v87, 1, v36);
  uint64_t v91 = v118;
  sub_1AD870740(v90, v118);
  uint64_t v92 = v85;
  if (v126(v91, 1, v36) == 1)
  {
    sub_1AD8707C0(v91);
  }
  else
  {
    sub_1AD9DC8F0();
    v86(v91, v36);
  }
  unint64_t v93 = v126;
  sub_1AD9DC900();
  id v94 = objc_msgSend(v129, sel_wakeUpComponents);
  uint64_t v95 = (uint64_t)v121;
  if (v94)
  {
    uint64_t v96 = v94;
    sub_1AD9DC8C0();

    uint64_t v97 = 0;
  }
  else
  {
    uint64_t v97 = 1;
  }
  uint64_t v98 = (uint64_t)v122;
  v127(v95, v97, 1, v36);
  sub_1AD870740(v95, v98);
  if (v93(v98, 1, v36) == 1)
  {
    sub_1AD8707C0(v98);
  }
  else
  {
    sub_1AD9DC940();
    v86(v98, v36);
  }
  uint64_t v99 = v119;
  uint64_t v100 = v130;
  sub_1AD9DC950();
  v123(v99, v100, v36);
  uint64_t v101 = sub_1AD9DC940();
  uint64_t v102 = (uint64_t)v120;
  if (v103)
  {
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v120, v99, v36);
    goto LABEL_33;
  }
  uint64_t v104 = lrint((double)v101 / 5.0);
  uint64_t v105 = (unsigned __int128)(v104 * (__int128)5) >> 64;
  uint64_t result = 5 * v104;
  if (v105 == result >> 63)
  {
    sub_1AD9DC950();
    sub_1AD9A2450(v102);
    v86((uint64_t)v99, v36);
LABEL_33:
    uint64_t v106 = (void *)sub_1AD9DC8B0();
    v86(v102, v36);
    id v107 = v124;
    objc_msgSend(v124, sel_setWakeUpComponents_, v106);

    objc_msgSend(v107, sel_copy);
    sub_1AD9DFF20();

    swift_unknownObjectRelease();
    v86((uint64_t)v130, v36);
    v86((uint64_t)v128, v36);
    sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
    swift_dynamicCast();
    return v131;
  }
LABEL_35:
  __break(1u);
  return result;
}

void sub_1AD8706EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD870740(uint64_t a1, uint64_t a2)
{
  sub_1AD8706EC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8707C0(uint64_t a1)
{
  sub_1AD8706EC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(void *a1, char a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7 = v6;
  id v14 = objc_msgSend(v7, sel_leadingAnchor);
  id v15 = objc_msgSend(a1, sel_leadingAnchor);
  id v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v15, a4);

  id v17 = objc_msgSend(v7, sel_topAnchor);
  id v18 = objc_msgSend(a1, sel_topAnchor);
  id v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_constant_, v18, a3);

  id v20 = objc_msgSend(a1, sel_trailingAnchor);
  id v21 = objc_msgSend(v7, sel_trailingAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_constant_, v21, a6);

  id v23 = objc_msgSend(a1, sel_bottomAnchor);
  id v24 = objc_msgSend(v7, sel_bottomAnchor);
  id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_constant_, v24, a5);

  if (a2)
  {
    LODWORD(v26) = 1148829696;
    objc_msgSend(v25, sel_setPriority_, v26);
  }
  sub_1AD870B1C();
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1AD9E5440;
  *(void *)(v27 + 32) = v16;
  *(void *)(v27 + 40) = v19;
  *(void *)(v27 + 48) = v22;
  *(void *)(v27 + 56) = v25;
  uint64_t v35 = v27;
  sub_1AD9DF870();
  id v28 = v16;
  id v29 = v19;
  id v30 = v22;
  id v31 = v25;
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v32 = self;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  uint64_t v33 = (void *)sub_1AD9DF850();
  objc_msgSend(v32, sel_activateConstraints_, v33);

  return v35;
}

void sub_1AD870B1C()
{
  if (!qword_1EB725350)
  {
    unint64_t v0 = sub_1AD9E0290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725350);
    }
  }
}

Swift::Void __swiftcall UIView.alignConstraints(to:)(UILayoutGuide to)
{
  uint64_t v2 = v1;
  uint64_t v4 = self;
  sub_1AD870B1C();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AD9E5440;
  id v6 = objc_msgSend(v2, sel_leadingAnchor);
  id v7 = [(objc_class *)to.super.isa leadingAnchor];
  id v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(void *)(v5 + 32) = v8;
  id v9 = objc_msgSend(v2, sel_topAnchor);
  id v10 = [(objc_class *)to.super.isa topAnchor];
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(void *)(v5 + 40) = v11;
  id v12 = [(objc_class *)to.super.isa trailingAnchor];
  id v13 = objc_msgSend(v2, sel_trailingAnchor);
  id v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(void *)(v5 + 48) = v14;
  id v15 = [(objc_class *)to.super.isa bottomAnchor];
  id v16 = objc_msgSend(v2, sel_bottomAnchor);
  id v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(void *)(v5 + 56) = v17;
  sub_1AD9DF870();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  id v18 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_activateConstraints_, v18);

  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
}

uint64_t UIView.constrained(toEdgesOf:)(void *a1)
{
  uint64_t v2 = v1;
  sub_1AD870B1C();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1AD9E5440;
  id v5 = objc_msgSend(v2, sel_topAnchor);
  id v6 = objc_msgSend(a1, sel_topAnchor);
  id v7 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v6);

  *(void *)(v4 + 32) = v7;
  id v8 = objc_msgSend(v2, sel_leadingAnchor);
  id v9 = objc_msgSend(a1, sel_leadingAnchor);
  id v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v9);

  *(void *)(v4 + 40) = v10;
  id v11 = objc_msgSend(v2, sel_trailingAnchor);
  id v12 = objc_msgSend(a1, sel_trailingAnchor);
  id v13 = objc_msgSend(v11, sel_constraintEqualToAnchor_, v12);

  *(void *)(v4 + 48) = v13;
  id v14 = objc_msgSend(v2, sel_bottomAnchor);
  id v15 = objc_msgSend(a1, sel_bottomAnchor);
  id v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

  *(void *)(v4 + 56) = v16;
  sub_1AD9DF870();
  id v17 = self;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  id v18 = (void *)sub_1AD9DF850();
  objc_msgSend(v17, sel_activateConstraints_, v18);

  return v4;
}

uint64_t UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(unint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  id v11 = v6;
  unint64_t v17 = a1;
  uint64_t v55 = MEMORY[0x1E4FBC860];
  if (!(a1 >> 62))
  {
    uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_3;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1AD9E0190();
  if (!v18) {
    goto LABEL_28;
  }
LABEL_3:
  unint64_t v52 = v17 & 0xC000000000000001;
  if ((v17 & 0xC000000000000001) != 0)
  {
    id v19 = (id)MEMORY[0x1B3E6BFF0](0, v17);
  }
  else
  {
    if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    id v19 = *(id *)(v17 + 32);
  }
  id v8 = v19;
  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(v8, sel_topAnchor);
  id v7 = objc_msgSend(v11, sel_topAnchor);
  id v10 = &_OBJC_LABEL_PROTOCOL___HKSPSuggestionProvider;
  id v21 = objc_msgSend(v20, sel_constraintEqualToAnchor_constant_, v7, a3);

  id v9 = v21;
  MEMORY[0x1B3E6B7E0]();
  if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_31:
  }
    sub_1AD9DF880();
  sub_1AD9DF8B0();
  sub_1AD9DF870();

  if (v18 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v49 = v18 - 1;
  double v22 = -a6;
  uint64_t v48 = v17 + 32;
  swift_bridgeObjectRetain();
  id v23 = 0;
  uint64_t v24 = 0;
  float v25 = 1000.0;
  uint64_t v50 = v18;
  uint64_t v51 = v11;
  do
  {
    if (v52) {
      id v27 = (id)MEMORY[0x1B3E6BFF0](v24, v17);
    }
    else {
      id v27 = *(id *)(v17 + 8 * v24 + 32);
    }
    uint64_t v18 = (uint64_t)v27;
    objc_msgSend(v27, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0, v48);
    unint64_t v54 = MEMORY[0x1E4FBC860];
    id v28 = objc_msgSend((id)v18, sel_leadingAnchor);
    id v29 = objc_msgSend(v11, sel_leadingAnchor);
    id v30 = objc_msgSend(v28, (SEL)v10[461], v29, a4);

    id v31 = v30;
    MEMORY[0x1B3E6B7E0]();
    if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1AD9DF880();
    }
    uint64_t v53 = v31;
    sub_1AD9DF8B0();
    sub_1AD9DF870();
    id v32 = objc_msgSend((id)v18, sel_trailingAnchor);
    id v33 = objc_msgSend(v11, sel_trailingAnchor);
    uint64_t v34 = v10;
    id v35 = objc_msgSend(v32, (SEL)v10[461], v33, v22);

    id v36 = v35;
    MEMORY[0x1B3E6B7E0]();
    if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1AD9DF880();
    }
    sub_1AD9DF8B0();
    sub_1AD9DF870();
    if (v23)
    {
      unint64_t v37 = v17;
      id v38 = v23;
      id v39 = objc_msgSend((id)v18, sel_topAnchor);
      id v40 = objc_msgSend(v38, sel_bottomAnchor);
      id v41 = objc_msgSend(v39, (SEL)v34 + 775, v40, a2);

      id v42 = v41;
      MEMORY[0x1B3E6B7E0]();
      if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1AD9DF880();
      }
      sub_1AD9DF8B0();
      sub_1AD9DF870();

      unint64_t v17 = v37;
    }
    ++v24;
    *(float *)&double v26 = v25;
    objc_msgSend((id)v18, sel_setContentHuggingPriority_forAxis_, 1, v26);
    float v25 = v25 + -1.0;
    sub_1AD86C12C(v54);

    id v23 = (void *)v18;
    id v11 = v51;
    id v10 = v34;
  }
  while (v50 != v24);
  uint64_t result = v49;
  if (v52)
  {
    id v44 = (id)MEMORY[0x1B3E6BFF0](v49, v17);
    goto LABEL_25;
  }
  if (v49 < *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v44 = *(id *)(v48 + 8 * v49);
LABEL_25:
    id v7 = v44;
    swift_bridgeObjectRelease();
    id v45 = objc_msgSend(v7, sel_bottomAnchor);
    id v46 = objc_msgSend(v51, sel_bottomAnchor);
    id v47 = objc_msgSend(v45, (SEL)v34 + 775, v46, -a5);

    id v11 = v47;
    MEMORY[0x1B3E6B7E0]();
    if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_26:
      sub_1AD9DF8B0();
      sub_1AD9DF870();

      return v55;
    }
LABEL_33:
    sub_1AD9DF880();
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t UIView.constraints(withVerticallyStackedSubviews:spacing:verticalPadding:horizontalPadding:)(unint64_t a1, double a2, double a3, double a4)
{
  return UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(a1, a2, a3, a4, a3, a4);
}

Swift::Void __swiftcall UIView.addSubviews(_:useAutoLayout:)(Swift::OpaquePointer _, Swift::Bool useAutoLayout)
{
  BOOL v3 = useAutoLayout;
  if ((unint64_t)_._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1AD9E0190();
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v6 = 0;
  BOOL v7 = !v3;
  do
  {
    if (((unint64_t)_._rawValue & 0xC000000000000001) != 0) {
      id v8 = (id)MEMORY[0x1B3E6BFF0](v6, _._rawValue);
    }
    else {
      id v8 = *((id *)_._rawValue + v6 + 4);
    }
    id v9 = v8;
    ++v6;
    objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, v7);
    objc_msgSend(v2, sel_addSubview_, v9);
  }
  while (v5 != v6);
LABEL_10:
  swift_bridgeObjectRelease();
}

__C::CGRect __swiftcall UIView.smallestFrameFittingVisibleContent()()
{
  id v1 = objc_msgSend(v0, sel_subviews);
  sub_1AD837214(0, &qword_1E9A4C460);
  uint64_t v2 = sub_1AD9DF860();

  __C::CGRect v11 = UIView.smallestFrameFittingVisibleContent(in:)((Swift::OpaquePointer)v2);
  CGFloat x = v11.origin.x;
  CGFloat y = v11.origin.y;
  CGFloat width = v11.size.width;
  CGFloat height = v11.size.height;
  swift_bridgeObjectRelease();
  double v7 = x;
  double v8 = y;
  double v9 = width;
  double v10 = height;
  result.size.CGFloat height = v10;
  result.size.CGFloat width = v9;
  result.origin.CGFloat y = v8;
  result.origin.CGFloat x = v7;
  return result;
}

__C::CGRect __swiftcall UIView.smallestFrameFittingVisibleContent(in:)(Swift::OpaquePointer in)
{
  if ((unint64_t)in._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (v45 > 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_1AD9E0190();
      if (!v46)
      {
        swift_bridgeObjectRelease();
        double v41 = 0.0;
        double v42 = 0.0;
        double v43 = 0.0;
        double v44 = 0.0;
        goto LABEL_43;
      }
      uint64_t v3 = v46;
      if (v46 >= 1)
      {
        id v49 = v1;
        goto LABEL_4;
      }
      __break(1u);
    }
LABEL_39:
    objc_msgSend(v1, sel_frame);
    goto LABEL_43;
  }
  uint64_t v3 = *(void *)(((unint64_t)in._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
LABEL_4:
  uint64_t v4 = 0;
  uint64_t v5 = v3 - 1;
  double MaxY = 0.0;
  char v7 = 1;
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
LABEL_5:
  uint64_t v11 = v4;
  do
  {
    if (((unint64_t)in._rawValue & 0xC000000000000001) != 0) {
      id v12 = (id)MEMORY[0x1B3E6BFF0](v11, in._rawValue);
    }
    else {
      id v12 = *((id *)in._rawValue + v11 + 4);
    }
    id v13 = v12;
    uint64_t v4 = v11 + 1;
    if ((objc_msgSend(v12, sel_isHidden) & 1) == 0)
    {
      double v47 = v8;
      uint64_t v48 = v5;
      objc_msgSend(v13, sel_frame);
      double v15 = v14;
      double v17 = v16;
      double v19 = v18;
      double v21 = v20;
      id v22 = objc_msgSend(v13, sel_superview);
      objc_msgSend(v49, sel_convertRect_fromView_, v22, v15, v17, v19, v21);
      CGFloat v24 = v23;
      CGFloat v26 = v25;
      CGFloat v28 = v27;
      CGFloat v30 = v29;

      v50.origin.CGFloat x = v24;
      v50.origin.CGFloat y = v26;
      v50.size.CGFloat width = v28;
      v50.size.CGFloat height = v30;
      double MinX = CGRectGetMinX(v50);
      double v32 = MinX;
      if (v7)
      {
        v51.origin.CGFloat x = v24;
        v51.origin.CGFloat y = v26;
        v51.size.CGFloat width = v28;
        v51.size.CGFloat height = v30;
        double v33 = CGRectGetMinX(v51);
        if (v33 >= v32) {
          double v10 = v32;
        }
        else {
          double v10 = v33;
        }
        v52.origin.CGFloat x = v24;
        v52.origin.CGFloat y = v26;
        v52.size.CGFloat width = v28;
        v52.size.CGFloat height = v30;
        double MinY = CGRectGetMinY(v52);
        v53.origin.CGFloat x = v24;
        v53.origin.CGFloat y = v26;
        v53.size.CGFloat width = v28;
        v53.size.CGFloat height = v30;
        double v35 = CGRectGetMinY(v53);
        if (v35 >= MinY) {
          double v9 = MinY;
        }
        else {
          double v9 = v35;
        }
        v54.origin.CGFloat x = v24;
        v54.origin.CGFloat y = v26;
        v54.size.CGFloat width = v28;
        v54.size.CGFloat height = v30;
        double MaxX = CGRectGetMaxX(v54);
        v55.origin.CGFloat x = v24;
        v55.origin.CGFloat y = v26;
        v55.size.CGFloat width = v28;
        v55.size.CGFloat height = v30;
        double v37 = CGRectGetMaxX(v55);
        if (MaxX > v37) {
          double v8 = MaxX;
        }
        else {
          double v8 = v37;
        }
        v56.origin.CGFloat x = v24;
        v56.origin.CGFloat y = v26;
        v56.size.CGFloat width = v28;
        v56.size.CGFloat height = v30;
        double MaxY = CGRectGetMaxY(v56);
      }
      else
      {
        if (MinX < v10) {
          double v10 = MinX;
        }
        v57.origin.CGFloat x = v24;
        v57.origin.CGFloat y = v26;
        v57.size.CGFloat width = v28;
        v57.size.CGFloat height = v30;
        double v38 = CGRectGetMinY(v57);
        if (v38 < v9) {
          double v9 = v38;
        }
        v58.origin.CGFloat x = v24;
        v58.origin.CGFloat y = v26;
        v58.size.CGFloat width = v28;
        v58.size.CGFloat height = v30;
        double v39 = CGRectGetMaxX(v58);
        double v8 = v47;
        if (v47 <= v39) {
          double v8 = v39;
        }
      }
      uint64_t v5 = v48;
      v59.origin.CGFloat x = v24;
      v59.origin.CGFloat y = v26;
      v59.size.CGFloat width = v28;
      v59.size.CGFloat height = v30;
      double v40 = CGRectGetMaxY(v59);

      char v7 = 0;
      if (MaxY <= v40) {
        double MaxY = v40;
      }
      if (v48 == v11)
      {
        swift_bridgeObjectRelease();
LABEL_34:
        double v43 = v8 - v10;
        double v44 = MaxY - v9;
        double v41 = v10;
        double v42 = v9;
        goto LABEL_43;
      }
      goto LABEL_5;
    }

    ++v11;
  }
  while (v3 != v4);
  swift_bridgeObjectRelease();
  double v41 = 0.0;
  double v42 = 0.0;
  double v43 = 0.0;
  double v44 = 0.0;
  if ((v7 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_43:
  result.size.CGFloat height = v44;
  result.size.CGFloat width = v43;
  result.origin.CGFloat y = v42;
  result.origin.CGFloat x = v41;
  return result;
}

uint64_t Symbol.image.getter()
{
  Symbol.systemName.getter();
  return sub_1AD9DEF70();
}

BOOL static Symbol.Variant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Symbol.Variant.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t Symbol.Variant.hashValue.getter()
{
  return sub_1AD9E03E0();
}

BOOL sub_1AD871C1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1AD871C30()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD871C78()
{
  return sub_1AD9E03B0();
}

uint64_t sub_1AD871CA4()
{
  return sub_1AD9E03E0();
}

uint64_t Symbol.systemName.getter()
{
  unsigned int v1 = (unsigned __int16)*v0;
  switch(v1 >> 12)
  {
    case 1u:
      unint64_t v3 = 0xD00000000000001FLL;
      unint64_t v4 = 0x6D72616C61;
      if (v1) {
        unint64_t v4 = 0xD00000000000001FLL;
      }
      else {
        unint64_t v3 = 0x69662E6D72616C61;
      }
      if ((v1 & 0xE00) != 0) {
        return v3;
      }
      else {
        return v4;
      }
    case 2u:
      unint64_t v5 = 0x6461622E6C6C6562;
      if ((v1 & 0xF00) == 0x100) {
        unint64_t v5 = 0xD000000000000016;
      }
      if (v1) {
        return v5;
      }
      else {
        return 0x616C732E6C6C6562;
      }
    case 3u:
      if (!*v0) {
        return 0x72616D6B63656863;
      }
      if (*v0 == 1) {
        return 0xD000000000000010;
      }
      return 0xD000000000000015;
    case 4u:
      BOOL v6 = *v0 == 0;
      uint64_t v7 = 0x6B72616D78;
      goto LABEL_22;
    case 5u:
      BOOL v6 = *v0 == 0;
      uint64_t v7 = 0x73756E696DLL;
LABEL_22:
      if (v6) {
        return v7;
      }
      else {
        return 0xD000000000000011;
      }
    case 6u:
      if (*v0) {
        return 0xD000000000000010;
      }
      else {
        return 1937075312;
      }
    case 7u:
      if ((v1 & 0xFE) != 0) {
        return 0x662E656C63726963;
      }
      else {
        return 0x656C63726963;
      }
    case 8u:
      if ((unsigned __int16)*v0 <= 0x80FFu)
      {
        uint64_t v2 = 0x662E7465736E7573;
        switch(*v0)
        {
          case 0x8001:
            return 8026746;
          case 0x8002:
            return 0x7A7A7A2E6E6F6F6DLL;
          case 0x8003:
            double v14 = self;
            id v15 = objc_msgSend(v14, sel_sharedBehavior);
            if (!v15) {
              goto LABEL_61;
            }
            double v16 = v15;
            unsigned int v17 = objc_msgSend(v15, sel_isAppleWatch);

            id v18 = objc_msgSend(v14, sel_sharedBehavior);
            double v19 = v18;
            if (v17)
            {
              if (!v18)
              {
LABEL_62:
                __break(1u);
                goto LABEL_63;
              }
              id v20 = objc_msgSend(v18, sel_hksp_systemImageNameForCurrentDevice);
            }
            else
            {
              if (!v18)
              {
LABEL_63:
                __break(1u);
                JUMPOUT(0x1AD872298);
              }
              id v20 = objc_msgSend(v18, sel_hksp_systemImageNameForActivePairedDevice);
            }
            id v10 = v20;

            if (!v10) {
              return 0x746177656C707061;
            }
            goto LABEL_56;
          default:
            return v2;
        }
      }
      switch(*v0)
      {
        case 0x8100:
          id v8 = objc_msgSend(self, sel_sharedBehavior);
          if (!v8)
          {
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
          double v9 = v8;
          id v10 = objc_msgSend(v8, sel_hksp_systemImageNameForCurrentDevice);

          if (v10)
          {
LABEL_56:
            uint64_t v2 = sub_1AD9DF710();

            return v2;
          }
          return 0x656E6F687069;
        case 0x8101:
          id v11 = objc_msgSend(self, sel_sharedBehavior);
          if (!v11) {
            goto LABEL_60;
          }
          id v12 = v11;
          unsigned int v13 = objc_msgSend(v11, sel_hksp_activePairedDeviceHasHomeButton);

          if (v13) {
            return 0xD000000000000011;
          }
          else {
            return 0x656E6F687069;
          }
        case 0x8102:
          return 0xD000000000000011;
        case 0x8103:
          return 0x61632E73736F7263;
        default:
          if (v1 == 33280) {
            return 0xD000000000000010;
          }
          else {
            return 0xD00000000000001BLL;
          }
      }
    default:
      if (*v0 == 1) {
        return 0xD000000000000016;
      }
      else {
        return 0x62756F642E646562;
      }
  }
}

uint64_t static Symbol.alarm(on:snoozing:variant:)@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, __int16 *a4@<X8>)
{
  __int16 v4 = *a3;
  __int16 v5 = (v4 << 8) | 0x1000;
  __int16 v6 = (v4 << 8) | 0x1001;
  if (a2) {
    __int16 v6 = -32767;
  }
  if ((result & 1) == 0) {
    __int16 v6 = v5;
  }
  *a4 = v6;
  return result;
}

UIImage Symbol.uiImage.getter(UIImageConfiguration_optional a1)
{
  a1.value.super.isa = 0;
  return Symbol.uiImage(configuration:)(a1);
}

UIImage __swiftcall Symbol.uiImage(configuration:)(UIImageConfiguration_optional configuration)
{
  Class isa = configuration.value.super.isa;
  LOWORD(v14) = *v1;
  Symbol.systemName.getter();
  unint64_t v3 = isa;
  __int16 v4 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(self, sel__systemImageNamed_withConfiguration_, v4, v3);

  if (!v5)
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_1AD9DD550();
    __swift_project_value_buffer(v6, (uint64_t)qword_1EB725958);
    uint64_t v7 = sub_1AD9DD530();
    os_log_type_t v8 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v14 = v10;
      *(_DWORD *)uint64_t v9 = 136446466;
      sub_1AD838978(0x6C6F626D7953, 0xE600000000000000, &v14);
      sub_1AD9DFEA0();
      *(_WORD *)(v9 + 12) = 2082;
      uint64_t v11 = Symbol.systemName.getter();
      sub_1AD838978(v11, v12, &v14);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v7, v8, "[%{public}s] No image for symbol with name %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v10, -1, -1);
      MEMORY[0x1B3E6D1A0](v9, -1, -1);
    }

    return (UIImage)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1818]), sel_init);
  }
  return (UIImage)v5;
}

id Symbol.uiColor.getter()
{
  if (*v0 & 0xF000) != 0x1000 || (*v0)
  {
    id v3 = objc_msgSend(self, sel_hk_sleepKeyColor);
    return v3;
  }
  else
  {
    if (qword_1E9A48DB0 != -1) {
      swift_once();
    }
    unsigned int v1 = (void *)qword_1E9A49F58;
    return v1;
  }
}

void Symbol.color.getter()
{
  if (*v0 & 0xF000) != 0x1000 || (*v0)
  {
    id v2 = objc_msgSend(self, sel_hk_sleepKeyColor);
  }
  else
  {
    if (qword_1E9A48DB0 != -1) {
      swift_once();
    }
    id v1 = (id)qword_1E9A49F58;
  }
  JUMPOUT(0x1B3E6ADC0);
}

uint64_t Symbol.hash(into:)()
{
  switch(*v0 >> 12)
  {
    case 1:
    case 2:
      sub_1AD9E03B0();
      sub_1AD9E03C0();
      break;
    case 8:
      return sub_1AD9E03B0();
    default:
      sub_1AD9E03B0();
      break;
  }
  return sub_1AD9E03B0();
}

uint64_t Symbol.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD872904()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD872954()
{
  return sub_1AD9E03E0();
}

void static Symbol.bedtime.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void static Symbol.checkmark.getter(_WORD *a1@<X8>)
{
  *a1 = 12288;
}

void static Symbol.xmark.getter(_WORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static Symbol.circle.getter(_WORD *a1@<X8>)
{
  *a1 = 28672;
}

void static Symbol.plus.getter(_WORD *a1@<X8>)
{
  *a1 = 24576;
}

id static UIColor.wakeup(_:)(char a1)
{
  if (a1)
  {
    id v1 = objc_msgSend(self, sel_hk_sleepKeyColor);
    return v1;
  }
  else
  {
    if (qword_1E9A48DB0 != -1) {
      swift_once();
    }
    id v3 = (void *)qword_1E9A49F58;
    return v3;
  }
}

id sub_1AD872A68()
{
  id result = objc_msgSend(self, sel_secondaryLabelColor);
  qword_1E9A49F58 = (uint64_t)result;
  return result;
}

id static UIColor.alarmDisabled.getter()
{
  if (qword_1E9A48DB0 != -1) {
    swift_once();
  }
  unint64_t v0 = (void *)qword_1E9A49F58;
  return v0;
}

UIImage static UIImage.wakeup(_:)(UIImageConfiguration_optional a1)
{
  a1.value.super.Class isa = 0;
  return Symbol.uiImage(configuration:)(a1);
}

void static Color.wakeup(_:)(char a1)
{
  if (a1)
  {
    id v1 = objc_msgSend(self, sel_hk_sleepKeyColor);
  }
  else
  {
    if (qword_1E9A48DB0 != -1) {
      swift_once();
    }
    id v2 = (id)qword_1E9A49F58;
  }
  JUMPOUT(0x1B3E6ADC0);
}

uint64_t sub_1AD872BC4()
{
  uint64_t result = sub_1AD9DEF70();
  qword_1E9A49F60 = result;
  return result;
}

uint64_t static Image.bedtime.getter()
{
  if (qword_1E9A48DB8 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t static Image.wakeup(_:)()
{
  return sub_1AD9DEF70();
}

uint64_t static Image.alarm(on:snoozing:variant:)()
{
  Symbol.systemName.getter();
  return sub_1AD9DEF70();
}

uint64_t static Image.wakeupToolbar.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1AD872D38(a1);
}

uint64_t static Image.checkmarkToolbar.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1AD872D38(a1);
}

uint64_t sub_1AD872D38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AD9DEF70();
  if (qword_1EB7255E0 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1EB725608;
  uint64_t KeyPath = swift_getKeyPath();
  *a1 = v2;
  a1[1] = KeyPath;
  a1[2] = v3;
  return swift_retain();
}

uint64_t static Image.standardNavigationChevron.getter@<X0>(uint64_t *a1@<X8>)
{
  sub_1AD862BB8(0);
  uint64_t v3 = v2 - 8;
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_1AD9DEF90();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1AD9DEF40();
  id v12 = objc_msgSend(self, sel_tertiaryLabelColor);
  uint64_t v20 = MEMORY[0x1B3E6ADC0](v12);
  uint64_t KeyPath = swift_getKeyPath();
  sub_1AD9DE860();
  uint64_t v14 = sub_1AD9DE870();
  swift_release();
  uint64_t v15 = swift_getKeyPath();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E4F3EC60], v7);
  uint64_t v16 = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v3 + 36), v11, v7);
  *uint64_t v6 = v16;
  sub_1AD8741C4();
  sub_1AD8743C4((uint64_t)v6, (uint64_t)a1 + *(int *)(v17 + 36));
  uint64_t v18 = v20;
  *a1 = v21;
  a1[1] = KeyPath;
  a1[2] = v18;
  a1[3] = v15;
  a1[4] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1AD874428((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t Symbol.customVoiceOverString.getter()
{
  if ((*v0 & 0xF000) != 0x1000) {
    return 0;
  }
  if (*v0)
  {
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
  }
  else if (qword_1EB724E38 != -1)
  {
    swift_once();
  }
  id v2 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t View.addCustomVoiceOverElement(for:title:)@<X0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v77 = a3;
  uint64_t v74 = a2;
  uint64_t v89 = a6;
  id v73 = *(char **)(a4 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v72 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v71 = (char *)&v71 - v12;
  uint64_t v76 = sub_1AD9DE610();
  uint64_t v75 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76, v13);
  uint64_t v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = a4;
  uint64_t v109 = a5;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v79 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2, v17);
  uint64_t v78 = (char *)&v71 - v18;
  sub_1AD9DE6E0();
  uint64_t v80 = OpaqueTypeMetadata2;
  uint64_t v19 = sub_1AD9DDFC0();
  uint64_t v82 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19, v20);
  double v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21, v24);
  uint64_t v81 = (char *)&v71 - v25;
  uint64_t v26 = sub_1AD9DE480();
  uint64_t v85 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v26, v27);
  uint64_t v84 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28, v30);
  uint64_t v83 = (char *)&v71 - v31;
  uint64_t v88 = sub_1AD9DE480();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88, v32);
  uint64_t v34 = (char *)&v71 - v33;
  LOWORD(v108) = *a1;
  uint64_t v35 = Symbol.customVoiceOverString.getter();
  if (v36)
  {
    uint64_t v37 = v35;
    uint64_t v38 = v36;
    id v73 = v34;
    uint64_t v72 = (char *)v26;
    if (v77)
    {
      sub_1AD9DE5F0();
      double v39 = v78;
      sub_1AD9DED00();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v15, v76);
      uint64_t v108 = v37;
      uint64_t v109 = v38;
      sub_1AD9DF790();
      sub_1AD9DF790();
      uint64_t v108 = a4;
      uint64_t v109 = a5;
      uint64_t v40 = a5;
      uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      uint64_t v42 = v80;
      sub_1AD9DEC50();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v39, v42);
      uint64_t v43 = sub_1AD874B44(&qword_1E9A49F80, MEMORY[0x1E4F3DF60]);
      uint64_t v90 = OpaqueTypeConformance2;
      uint64_t v91 = v43;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v45 = v81;
      sub_1AD90C5E8(v23, v19, WitnessTable);
      uint64_t v46 = *(void (**)(char *, uint64_t))(v82 + 8);
      v46(v23, v19);
      sub_1AD90C5E8(v45, v19, WitnessTable);
      double v47 = v83;
      sub_1AD90C624((uint64_t)v23, v19);
    }
    else
    {
      sub_1AD9DE5F0();
      CGRect v53 = v78;
      sub_1AD9DED00();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v15, v76);
      uint64_t v108 = a4;
      uint64_t v109 = a5;
      uint64_t v40 = a5;
      uint64_t v54 = swift_getOpaqueTypeConformance2();
      uint64_t v55 = v80;
      sub_1AD9DEC50();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v53, v55);
      uint64_t v56 = sub_1AD874B44(&qword_1E9A49F80, MEMORY[0x1E4F3DF60]);
      uint64_t v96 = v54;
      uint64_t v97 = v56;
      uint64_t v57 = swift_getWitnessTable();
      uint64_t v45 = v81;
      sub_1AD90C5E8(v23, v19, v57);
      uint64_t v46 = *(void (**)(char *, uint64_t))(v82 + 8);
      v46(v23, v19);
      sub_1AD90C5E8(v45, v19, v57);
      double v47 = v83;
      sub_1AD90C71C((uint64_t)v23, v19, v19);
    }
    v46(v23, v19);
    v46(v45, v19);
    uint64_t v108 = a4;
    uint64_t v109 = v40;
    uint64_t v58 = v40;
    uint64_t v59 = swift_getOpaqueTypeConformance2();
    uint64_t v60 = sub_1AD874B44(&qword_1E9A49F80, MEMORY[0x1E4F3DF60]);
    uint64_t v94 = v59;
    uint64_t v95 = v60;
    uint64_t v92 = swift_getWitnessTable();
    uint64_t v93 = v92;
    uint64_t v61 = (uint64_t)v72;
    uint64_t v62 = swift_getWitnessTable();
    uint64_t v63 = (uint64_t)v84;
    sub_1AD90C5E8(v47, v61, v62);
    uint64_t v34 = v73;
    sub_1AD90C624(v63, v61);
    uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v64(v63, v61);
    v64((uint64_t)v47, v61);
    a5 = v58;
  }
  else
  {
    uint64_t v48 = v71;
    sub_1AD90C5E8(v86, a4, a5);
    uint64_t v49 = (uint64_t)v72;
    sub_1AD90C5E8(v48, a4, a5);
    uint64_t v108 = a4;
    uint64_t v109 = a5;
    uint64_t v50 = swift_getOpaqueTypeConformance2();
    uint64_t v51 = sub_1AD874B44(&qword_1E9A49F80, MEMORY[0x1E4F3DF60]);
    uint64_t v106 = v50;
    uint64_t v107 = v51;
    uint64_t v104 = swift_getWitnessTable();
    uint64_t v105 = v104;
    swift_getWitnessTable();
    sub_1AD90C71C(v49, v26, a4);
    CGRect v52 = (void (*)(uint64_t, uint64_t))*((void *)v73 + 1);
    v52(v49, a4);
    v52((uint64_t)v48, a4);
  }
  uint64_t v65 = v88;
  uint64_t v66 = v87;
  uint64_t v108 = a4;
  uint64_t v109 = a5;
  uint64_t v67 = swift_getOpaqueTypeConformance2();
  uint64_t v68 = sub_1AD874B44(&qword_1E9A49F80, MEMORY[0x1E4F3DF60]);
  uint64_t v102 = v67;
  uint64_t v103 = v68;
  uint64_t v100 = swift_getWitnessTable();
  uint64_t v101 = v100;
  uint64_t v98 = swift_getWitnessTable();
  uint64_t v99 = a5;
  uint64_t v69 = swift_getWitnessTable();
  sub_1AD90C5E8(v34, v65, v69);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v34, v65);
}

uint64_t sub_1AD873D04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1AD9DE1C0();
  *a1 = result;
  return result;
}

uint64_t sub_1AD873D30()
{
  return sub_1AD9DE1D0();
}

uint64_t sub_1AD873D5C()
{
  return sub_1AD9DE0A0();
}

uint64_t sub_1AD873D80(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DEF90();
  MEMORY[0x1F4188790](v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_1AD9DE0B0();
}

uint64_t sub_1AD873E48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1AD9DE110();
  *a1 = result;
  return result;
}

uint64_t sub_1AD873E74()
{
  return sub_1AD9DE120();
}

uint64_t _s13SleepHealthUI6SymbolO2eeoiySbAC_ACtFZ_0(_WORD *a1, unsigned __int16 *a2)
{
  unsigned int v2 = (unsigned __int16)*a1;
  unsigned int v3 = *a2;
  switch(v2 >> 12)
  {
    case 1u:
      if ((v3 & 0xF000) == 0x1000) {
        goto LABEL_7;
      }
      goto LABEL_44;
    case 2u:
      if ((v3 & 0xF000) != 0x2000) {
        goto LABEL_44;
      }
LABEL_7:
      int v4 = v3 & 1;
      BOOL v5 = (((unsigned __int16)v3 ^ (unsigned __int16)v2) & 0xF00) == 0;
      uint64_t result = ((v2 & 1) == 0) != v4 && v5;
      break;
    case 3u:
      if ((v3 & 0xF000) != 0x3000) {
        goto LABEL_44;
      }
      goto LABEL_19;
    case 4u:
      if ((v3 & 0xF000) != 0x4000) {
        goto LABEL_44;
      }
      goto LABEL_19;
    case 5u:
      if ((v3 & 0xF000) != 0x5000) {
        goto LABEL_44;
      }
      goto LABEL_19;
    case 6u:
      if ((v3 & 0xF000) != 0x6000) {
        goto LABEL_44;
      }
      goto LABEL_19;
    case 7u:
      if ((v3 & 0xF000) == 0x7000) {
        goto LABEL_19;
      }
      goto LABEL_44;
    case 8u:
      if ((unsigned __int16)*a1 <= 0x80FFu)
      {
        switch(*a1)
        {
          case 0x8001:
            if (v3 != 32769) {
              goto LABEL_44;
            }
            uint64_t result = 1;
            break;
          case 0x8002:
            if (v3 != 32770) {
              goto LABEL_44;
            }
            uint64_t result = 1;
            break;
          case 0x8003:
            if (v3 != 32771) {
              goto LABEL_44;
            }
            uint64_t result = 1;
            break;
          default:
            if (v3 != 0x8000) {
              goto LABEL_44;
            }
            uint64_t result = 1;
            break;
        }
      }
      else
      {
        switch(*a1)
        {
          case 0x8100:
            if (v3 != 33024) {
              goto LABEL_44;
            }
            uint64_t result = 1;
            break;
          case 0x8101:
            if (v3 != 33025) {
              goto LABEL_44;
            }
            uint64_t result = 1;
            break;
          case 0x8102:
            if (v3 != 33026) {
              goto LABEL_44;
            }
            uint64_t result = 1;
            break;
          case 0x8103:
            if (v3 != 33027) {
              goto LABEL_44;
            }
            uint64_t result = 1;
            break;
          default:
            if (v2 == 33280)
            {
              if (v3 != 33280) {
                goto LABEL_44;
              }
              uint64_t result = 1;
            }
            else
            {
              if (v3 != 33281) {
                goto LABEL_44;
              }
              uint64_t result = 1;
            }
            break;
        }
      }
      return result;
    default:
      if (v3 < 0x1000) {
LABEL_19:
      }
        uint64_t result = (v3 ^ v2) == 0;
      else {
LABEL_44:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1AD8740EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1AD9DE110();
  *a1 = result;
  return result;
}

uint64_t sub_1AD874118()
{
  return sub_1AD9DE120();
}

uint64_t sub_1AD874144@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1AD9DE1C0();
  *a1 = result;
  return result;
}

uint64_t sub_1AD874170()
{
  return sub_1AD9DE1D0();
}

uint64_t sub_1AD87419C()
{
  return sub_1AD9DE0A0();
}

void sub_1AD8741C4()
{
  if (!qword_1E9A49F68)
  {
    sub_1AD87422C();
    sub_1AD862BB8(255);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49F68);
    }
  }
}

void sub_1AD87422C()
{
  if (!qword_1E9A49F70)
  {
    sub_1AD8742AC();
    sub_1AD874324(255, &qword_1E9A49CC8, &qword_1E9A49CD0);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49F70);
    }
  }
}

void sub_1AD8742AC()
{
  if (!qword_1E9A49F78)
  {
    sub_1AD874324(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49F78);
    }
  }
}

void sub_1AD874324(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1AD87437C(255, a3);
    unint64_t v4 = sub_1AD9DE6D0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD87437C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1AD9DFE90();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_1AD8743C4(uint64_t a1, uint64_t a2)
{
  sub_1AD862BB8(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD874428(uint64_t a1)
{
  sub_1AD862BB8(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1AD874488()
{
  unint64_t result = qword_1E9A49F88;
  if (!qword_1E9A49F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49F88);
  }
  return result;
}

unint64_t sub_1AD8744E0()
{
  unint64_t result = qword_1E9A49F90;
  if (!qword_1E9A49F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49F90);
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Symbol(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF8) {
    goto LABEL_17;
  }
  if (a2 + 61448 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 61448 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 61448;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 61448;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 61448;
    }
  }
LABEL_17:
  unsigned int v6 = (*a1 & 0xC00 | (*a1 >> 12) & 0xFFFFFC0F | (16 * (*a1 >> 2))) ^ 0xFFF;
  if (v6 >= 0xFF7) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for Symbol(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 61448 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 61448 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFF7)
  {
    unsigned int v6 = ((a2 - 4088) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 4088;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD8746C8);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2)
        {
LABEL_18:
          __int16 v7 = (-a2 >> 4) - ((_WORD)a2 << 8);
          *(_WORD *)unint64_t result = (16 * v7) & 0xFC00 | (4 * (v7 & 0x3F));
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1AD8746F0(unsigned __int16 *a1)
{
  unsigned int v1 = *a1;
  int v2 = (__int16)v1;
  unsigned int v3 = v1 >> 12;
  unsigned int v4 = (v1 & 3 | (4 * ((v1 >> 8) & 3))) + 8;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return v4;
  }
}

_WORD *sub_1AD874718(_WORD *result)
{
  *result &= 0xFFFu;
  return result;
}

_WORD *sub_1AD874728(_WORD *result, unsigned int a2)
{
  if (a2 < 8) {
    *unint64_t result = *result & 0x303 | ((_WORD)a2 << 12);
  }
  else {
    *unint64_t result = (((_WORD)a2 << 6) + 512) & 0x300 | a2 & 3 | 0x8000;
  }
  return result;
}

ValueMetadata *type metadata accessor for Symbol()
{
  return &type metadata for Symbol;
}

uint64_t getEnumTagSinglePayload for Symbol.Variant(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Symbol.Variant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD8748CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1AD8748F4(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1AD8748FC(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Symbol.Variant()
{
  return &type metadata for Symbol.Variant;
}

unint64_t sub_1AD874918()
{
  unint64_t result = qword_1E9A49F98;
  if (!qword_1E9A49F98)
  {
    sub_1AD8742AC();
    sub_1AD874AF4((unint64_t *)&qword_1EB725C78, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49F98);
  }
  return result;
}

unint64_t sub_1AD8749B4()
{
  unint64_t result = qword_1E9A49FA0;
  if (!qword_1E9A49FA0)
  {
    sub_1AD8741C4();
    sub_1AD874A5C();
    sub_1AD874B44((unint64_t *)&qword_1E9A49C98, sub_1AD862BB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49FA0);
  }
  return result;
}

unint64_t sub_1AD874A5C()
{
  unint64_t result = qword_1E9A49FA8;
  if (!qword_1E9A49FA8)
  {
    sub_1AD87422C();
    sub_1AD874918();
    sub_1AD874AF4((unint64_t *)&qword_1E9A49D48, &qword_1E9A49CC8, &qword_1E9A49CD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49FA8);
  }
  return result;
}

uint64_t sub_1AD874AF4(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD874324(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD874B44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD874B8C()
{
  return swift_getWitnessTable();
}

BOOL static GoalSectionProvider.Configuration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t GoalSectionProvider.Configuration.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t GoalSectionProvider.Configuration.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t GoalSectionProvider.__allocating_init(goalDurationPublisher:presentationStyle:configuration:updateBlock:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  swift_allocObject();
  uint64_t v10 = sub_1AD8772BC(a1, a2, a3, a4, a5);
  swift_release();
  return v10;
}

uint64_t GoalSectionProvider.init(goalDurationPublisher:presentationStyle:configuration:updateBlock:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = sub_1AD8772BC(a1, a2, a3, a4, a5);
  swift_release();
  return v5;
}

uint64_t sub_1AD874E20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 112) = v2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRetain();
  sub_1AD874E90();
  return swift_unknownObjectRelease();
}

uint64_t sub_1AD874E90()
{
  unsigned int v1 = v0;
  uint64_t v2 = *v0;
  uint64_t result = swift_beginAccess();
  uint64_t v4 = v0[2];
  if ((v4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1AD9DFF90();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      return result;
    }
    goto LABEL_3;
  }
  if (!*(void *)(v4 + 16))
  {
LABEL_3:
    uint64_t v6 = swift_allocObject();
    swift_weakInit();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = v2;
    sub_1AD8387F8();
    sub_1AD877828((unint64_t *)&qword_1E9A4B080, (void (*)(uint64_t))sub_1AD8387F8);
    swift_retain();
    sub_1AD9DDC40();
    swift_release();
    swift_release();
    swift_beginAccess();
    sub_1AD9DDA80();
    swift_endAccess();
    swift_release();
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    uint64_t v9 = swift_allocObject();
    swift_beginAccess();
    MEMORY[0x1B3E6D270](v1 + 13);
    *(void *)(v9 + 24) = v1[14];
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_unknownObjectRelease();
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v8;
    v10[3] = v9;
    v10[4] = v2;
    sub_1AD9DDC40();
    swift_release();
    swift_release();
    swift_beginAccess();
    sub_1AD9DDA80();
    swift_endAccess();
    swift_release();
    uint64_t v11 = swift_allocObject();
    swift_weakInit();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = v2;
    sub_1AD838884();
    sub_1AD877828(&qword_1E9A49FF0, (void (*)(uint64_t))sub_1AD838884);
    swift_retain();
    sub_1AD9DDC40();
    swift_release();
    swift_release();
    swift_beginAccess();
    sub_1AD9DDA80();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD875260(uint64_t a1)
{
  double v1 = *(double *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1AD9DD550();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
    uint64_t v6 = sub_1AD9DD530();
    os_log_type_t v7 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v16 = v9;
      *(_DWORD *)uint64_t v8 = 136446466;
      uint64_t v10 = sub_1AD9E04F0();
      double v17 = COERCE_DOUBLE(sub_1AD838978(v10, v11, &v16));
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2082;
      double v17 = v1;
      char v18 = v2;
      sub_1AD878804(0, (unint64_t *)&qword_1EB725080, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB718]);
      uint64_t v12 = sub_1AD9DF730();
      double v17 = COERCE_DOUBLE(sub_1AD838978(v12, v13, &v16));
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v6, v7, "[%{public}s] sleep duration goal updated to %{public}s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v9, -1, -1);
      MEMORY[0x1B3E6D1A0](v8, -1, -1);
    }

    sub_1AD9DDB00();
    if (v18)
    {
      if (v2) {
        goto LABEL_12;
      }
    }
    else if ((v2 & 1) == 0 && v17 == v1)
    {
      goto LABEL_12;
    }
    *(unsigned char *)(v4 + 56) = 1;
    double v17 = v1;
    char v18 = v2;
    sub_1AD9DDB10();
LABEL_12:
    uint64_t v14 = *(void (**)(uint64_t))(v4 + 80);
    uint64_t v15 = swift_retain();
    v14(v15);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD8754F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1AD9DF410();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x1F4188790](v5, v7);
  uint64_t v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned char *)(a1 + 8)) {
    return result;
  }
  double v11 = *(double *)a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v12 = result;
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  *uint64_t v10 = sub_1AD9DFCA0();
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v10, *MEMORY[0x1E4FBCBF0], v5);
  char v13 = sub_1AD9DF420();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v10, v5);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (qword_1EB725658 != -1) {
LABEL_15:
  }
    swift_once();
  uint64_t v14 = sub_1AD9DD550();
  __swift_project_value_buffer(v14, (uint64_t)qword_1EB725958);
  uint64_t v15 = sub_1AD9DD530();
  os_log_type_t v16 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v32[0] = v18;
    *(_DWORD *)uint64_t v17 = 136446466;
    uint64_t v19 = sub_1AD9E04F0();
    uint64_t v31 = sub_1AD838978(v19, v20, v32);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2082;
    uint64_t v21 = sub_1AD9DF960();
    uint64_t v31 = sub_1AD838978(v21, v22, v32);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v15, v16, "[%{public}s] sleep duration goal chosen to be %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v18, -1, -1);
    MEMORY[0x1B3E6D1A0](v17, -1, -1);
  }

  if ((*(unsigned char *)(v12 + 56) & 1) == 0 && ((*(unsigned char *)(v12 + 72) & 1) != 0 || *(double *)(v12 + 64) != v11))
  {
    swift_beginAccess();
    if (MEMORY[0x1B3E6D270](a3 + 16))
    {
      uint64_t v23 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v25;
      *(double *)(v26 + 24) = v11;
      uint64_t v27 = *(void (**)(void, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, double))(v23 + 8);
      swift_retain();
      v27(0, sub_1AD877D60, v26, ObjectType, v23, v11);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  *(unsigned char *)(v12 + 56) = 0;
  uint64_t v28 = *(void (**)(uint64_t))(v12 + 80);
  uint64_t v29 = swift_retain();
  v28(v29);
  swift_release();
  return swift_release();
}

uint64_t sub_1AD87590C(uint64_t a1, double a2)
{
  if (a1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    *(unsigned char *)(result + 56) = 1;
    sub_1AD9DDB10();
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    *(double *)(result + 64) = a2;
    *(unsigned char *)(result + 72) = 0;
  }
  return swift_release();
}

uint64_t sub_1AD8759C0()
{
  uint64_t v0 = sub_1AD9DF410();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (uint64_t *)((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  *uint64_t v4 = sub_1AD9DFCA0();
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4FBCBF0], v0);
  char v7 = sub_1AD9DF420();
  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v4, v0);
  if (v7)
  {
    swift_retain();
    sub_1AD9DDB00();
    swift_release();
    if ((_BYTE)v19) {
      uint64_t v0 = 0x676E69736F6C43;
    }
    else {
      uint64_t v0 = 0x676E696E65704FLL;
    }
    if (qword_1EB725658 == -1) {
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_7:
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EB725958);
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1AD9DD530();
  os_log_type_t v10 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = v12;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v13 = sub_1AD9E04F0();
    uint64_t v18 = sub_1AD838978(v13, v14, &v19);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1AD838978(v0, 0xE700000000000000, &v19);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] %{public}s sleep duration goal picker", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
    MEMORY[0x1B3E6D1A0](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = *(void (**)(uint64_t))(v6 + 80);
  uint64_t v16 = swift_retain();
  v15(v16);
  swift_release();
  return swift_release();
}

uint64_t sub_1AD875D30()
{
  swift_beginAccess();
  return MEMORY[0x1B3E6D270](v0 + 104);
}

uint64_t sub_1AD875D78(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 112) = a2;
  swift_unknownObjectWeakAssign();
  sub_1AD874E90();
  return swift_unknownObjectRelease();
}

void (*sub_1AD875DE0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v1 + 104);
  uint64_t v5 = *(void *)(v1 + 112);
  v3[3] = v4;
  v3[4] = v5;
  return sub_1AD875E60;
}

void sub_1AD875E60(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 112) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    sub_1AD874E90();
  }
  free(v3);
}

uint64_t sub_1AD875EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (*v4)
  {
    sub_1AD9DDB00();
    uint64_t v46 = v56;
    int v45 = v57;
    uint64_t v47 = a1;
    uint64_t v9 = MEMORY[0x1E4FBB1A0];
    sub_1AD878804(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
    uint64_t v44 = v10;
    uint64_t v11 = swift_allocObject();
    long long v43 = xmmword_1AD9E53A0;
    *(_OWORD *)(v11 + 16) = xmmword_1AD9E53A0;
    uint64_t v48 = a4;
    *(void *)(v11 + 32) = sub_1AD9DF710();
    *(void *)(v11 + 40) = v12;
    *(void *)(v11 + 48) = 0x7065656C53;
    *(void *)(v11 + 56) = 0xE500000000000000;
    *(void *)(v11 + 64) = 0x736E6F6974704FLL;
    *(void *)(v11 + 72) = 0xE700000000000000;
    swift_retain();
    sub_1AD86C2F8((uint64_t)&unk_1F0469948);
    sub_1AD878804(0, &qword_1EB725B60, v9, MEMORY[0x1E4FBB320]);
    sub_1AD86E270();
    uint64_t v13 = sub_1AD9DF690();
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    uint64_t v58 = &type metadata for GoalTableViewItem;
    unint64_t v59 = sub_1AD877730();
    uint64_t v16 = swift_allocObject();
    uint64_t v56 = v16;
    *(void *)(v16 + 16) = v46;
    *(unsigned char *)(v16 + 24) = v45;
    *(void *)(v16 + 32) = a2;
    *(void *)(v16 + 40) = 0;
    *(void *)(v16 + 48) = a3;
    *(void *)(v16 + 56) = v13;
    *(void *)(v16 + 64) = v15;
    *(void *)(v16 + 72) = v13;
    *(void *)(v16 + 80) = v15;
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = v43;
    *(void *)(v17 + 32) = sub_1AD9DF710();
    *(void *)(v17 + 40) = v18;
    *(void *)(v17 + 48) = 0x7065656C53;
    *(void *)(v17 + 56) = 0xE500000000000000;
    *(void *)(v17 + 64) = 0x736E6F6974704FLL;
    *(void *)(v17 + 72) = 0xE700000000000000;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    sub_1AD86C2F8((uint64_t)&unk_1F0469978);
    uint64_t v19 = sub_1AD9DF690();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    uint64_t v54 = &type metadata for GoalPickerTableViewItem;
    unint64_t v55 = sub_1AD8777D4();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v51 = v47;
    uint64_t v52 = v19;
    uint64_t v53 = v21;
  }
  else
  {
    sub_1AD9DDB00();
    uint64_t v58 = (ValueMetadata *)sub_1AD9DD430();
    unint64_t v59 = sub_1AD877828(&qword_1E9A49FD0, MEMORY[0x1E4F66510]);
    unint64_t v22 = __swift_allocate_boxed_opaque_existential_1(&v56);
    sub_1AD8766BC(v51, v52, a2, a3, (uint64_t)v22);
    uint64_t v23 = MEMORY[0x1E4FBB1A0];
    sub_1AD878804(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1AD9E53A0;
    *(void *)(v24 + 32) = sub_1AD9DF710();
    *(void *)(v24 + 40) = v25;
    *(void *)(v24 + 48) = 0x7065656C53;
    *(void *)(v24 + 56) = 0xE500000000000000;
    *(void *)(v24 + 64) = 0x736E6F6974704FLL;
    *(void *)(v24 + 72) = 0xE700000000000000;
    swift_retain();
    sub_1AD86C2F8((uint64_t)&unk_1F0469918);
    sub_1AD878804(0, &qword_1EB725B60, v23, MEMORY[0x1E4FBB320]);
    sub_1AD86E270();
    uint64_t v26 = sub_1AD9DF690();
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    uint64_t v54 = &type metadata for GoalPickerItem;
    uint64_t v51 = a1;
    uint64_t v52 = v26;
    unint64_t v55 = sub_1AD877870();
    uint64_t v53 = v28;
  }
  sub_1AD8778C4(0, &qword_1E9A49FC8, (uint64_t (*)(uint64_t))sub_1AD86E54C, MEMORY[0x1E4FBBE00]);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1AD9E3070;
  sub_1AD841030((uint64_t)&v56, v29 + 32);
  sub_1AD9DDB00();
  if (LOBYTE(v49[0]) == 1)
  {
    uint64_t v31 = v54;
    unint64_t v30 = v55;
    uint64_t v32 = __swift_project_boxed_opaque_existential_1Tm(&v51, (uint64_t)v54);
    v49[3] = (uint64_t)v31;
    uint64_t v33 = *(void *)(v30 + 8);
    v49[4] = v33;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v49);
    uint64_t v35 = (void (*)(uint64_t *, uint64_t *, ValueMetadata *))*((void *)v31[-1].Description + 2);
    v35(boxed_opaque_existential_1, v32, v31);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1AD99A828(0, *(void *)(v29 + 16) + 1, 1, (void *)v29);
      uint64_t v29 = isUniquelyReferenced_nonNull_native;
      uint64_t v50 = isUniquelyReferenced_nonNull_native;
    }
    unint64_t v39 = *(void *)(v29 + 16);
    unint64_t v38 = *(void *)(v29 + 24);
    if (v39 >= v38 >> 1)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1AD99A828((void *)(v38 > 1), v39 + 1, 1, (void *)v29);
      uint64_t v50 = isUniquelyReferenced_nonNull_native;
    }
    MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native, v37);
    double v41 = (char *)&v43 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    v35((uint64_t *)v41, boxed_opaque_existential_1, v31);
    sub_1AD881D9C(v39, (uint64_t)v41, &v50, (uint64_t)v31, v33);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
  }
  sub_1AD9DD380();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v56);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v51);
}

uint64_t sub_1AD876578@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = sub_1AD9DD390();
  a1[4] = (uint64_t)&protocol witness table for ArrayDataSourceSection;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v5 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v6 = (void *)v1[6];
  swift_retain();
  sub_1AD875EEC(v4, v5, v6, (uint64_t)boxed_opaque_existential_1);
  return swift_release();
}

uint64_t GoalSectionProvider.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1AD843DF4(v0 + 104);
  return v0;
}

uint64_t GoalSectionProvider.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1AD843DF4(v0 + 104);
  return swift_deallocClassInstance();
}

uint64_t sub_1AD8766BC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, id a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v37 = a5;
  int v39 = a2 & 1;
  uint64_t v7 = sub_1AD9DD470();
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v34 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8778C4(0, &qword_1E9A49FE0, MEMORY[0x1E4FB0F28], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v33 = (char *)v31 - v12;
  uint64_t v32 = sub_1AD9DD410();
  uint64_t v13 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32, v14);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1AD9DD5F0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1E4FBB1A0];
  sub_1AD878804(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1AD9E3080;
  *(void *)(v23 + 32) = 0x7065656C53;
  *(void *)(v23 + 40) = 0xE500000000000000;
  *(void *)(v23 + 48) = 0x736E6F6974704FLL;
  *(void *)(v23 + 56) = 0xE700000000000000;
  uint64_t v38 = a3;
  swift_retain();
  uint64_t v24 = (char *)sub_1AD99A70C((void *)1, 3, 1, (void *)v23);
  *((void *)v24 + 2) = 3;
  strcpy(v24 + 64, "SleepGoalCell");
  *((_WORD *)v24 + 39) = -4864;
  v41[0] = (uint64_t)v24;
  sub_1AD878804(0, &qword_1EB725B60, v22, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  sub_1AD9DF690();
  v31[1] = v25;
  swift_bridgeObjectRelease();
  sub_1AD9DD5E0();
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v26 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  sub_1AD9DD5D0();
  sub_1AD877928(v40, v39);
  sub_1AD9DD5A0();
  if (!a4 || a4 == (id)2)
  {
    a4 = (id)HKHealthTintColor();
    if (a4)
    {
LABEL_9:
      uint64_t v27 = (void (*)(uint64_t *, void))sub_1AD9DD5C0();
      sub_1AD9DD5B0();
      v27(v41, 0);
      v41[0] = (uint64_t)&type metadata for GoalSectionModel;
      sub_1AD877A6C();
      sub_1AD9DF730();
      id v41[3] = v17;
      v41[4] = MEMORY[0x1E4FB0F88];
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41);
      (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 16))(boxed_opaque_existential_1, v21, v17);
      *uint64_t v16 = 1;
      (*(void (**)(unsigned char *, void, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E4F66478], v32);
      uint64_t v29 = sub_1AD9DD580();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v33, 1, 1, v29);
      (*(void (**)(char *, void, uint64_t))(v35 + 104))(v34, *MEMORY[0x1E4F66678], v36);
      sub_1AD9DD420();
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    }
    __break(1u);
  }
  if (a4 == (id)1)
  {
    a4 = (id)BPSBridgeTintColor();
    if (a4) {
      goto LABEL_9;
    }
    __break(1u);
  }
  v41[0] = (uint64_t)a4;
  uint64_t result = sub_1AD9E02E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD876CBC()
{
  long long v4 = *(_OWORD *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_1AD8786B0((uint64_t)&v4 + 8, (uint64_t)&v8);
  sub_1AD87877C((uint64_t)&v5 + 8, (uint64_t)v7);
  swift_retain();
  sub_1AD878850(&v8);
  sub_1AD87887C((uint64_t)v7);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1EB727930;
  uint64_t v2 = sub_1AD9DCA70();
  swift_release();

  sub_1AD8788A8(&v8);
  sub_1AD8788D4((uint64_t)v7);
  return v2;
}

uint64_t sub_1AD876DE0()
{
  long long v4 = *(_OWORD *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_1AD8786B0((uint64_t)&v4 + 8, (uint64_t)&v8);
  sub_1AD87877C((uint64_t)&v5 + 8, (uint64_t)v7);
  uint64_t v1 = v5;
  if (!(void)v5 || (void)v5 == 2)
  {
    swift_retain();
    sub_1AD878850(&v8);
    sub_1AD87887C((uint64_t)v7);
    id v2 = (id)HKHealthTintColor();
    if (v2)
    {
LABEL_7:
      swift_release();
      sub_1AD8788A8(&v8);
      sub_1AD8788D4((uint64_t)v7);
      return (uint64_t)v2;
    }
    __break(1u);
  }
  if (v1 == 1)
  {
    swift_retain();
    sub_1AD878850(&v8);
    sub_1AD87887C((uint64_t)v7);
    id v2 = (id)BPSBridgeTintColor();
    if (v2) {
      goto LABEL_7;
    }
    __break(1u);
  }
  swift_retain();
  sub_1AD878850(&v8);
  sub_1AD87887C((uint64_t)v7);
  uint64_t result = sub_1AD9E02E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD876F0C()
{
  return sub_1AD9DD280();
}

uint64_t sub_1AD876F40()
{
  return sub_1AD9DF730();
}

uint64_t sub_1AD876F7C()
{
  return sub_1AD876CBC();
}

uint64_t sub_1AD876FC0()
{
  return 0;
}

uint64_t sub_1AD876FC8()
{
  return sub_1AD877928(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_1AD876FD4()
{
  return sub_1AD876DE0();
}

void *sub_1AD877018()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t sub_1AD877040()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD877070(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*sub_1AD8770A8())()
{
  return nullsub_1;
}

uint64_t sub_1AD8770CC()
{
  swift_retain();
  sub_1AD877AB0();
  return swift_release();
}

uint64_t sub_1AD87710C@<X0>(unsigned char *a1@<X8>)
{
  *a1 = 1;
  uint64_t v2 = *MEMORY[0x1E4F66478];
  uint64_t v3 = sub_1AD9DD410();
  long long v4 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t sub_1AD877190()
{
  return swift_retain();
}

uint64_t sub_1AD877198()
{
  return sub_1AD9DD280();
}

uint64_t sub_1AD877200()
{
  return sub_1AD9DF730();
}

uint64_t sub_1AD877234()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD877264(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*sub_1AD87729C())()
{
  return nullsub_1;
}

uint64_t sub_1AD8772BC(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  char v10 = *a3;
  *(void *)(v5 + 16) = MEMORY[0x1E4FBC870];
  LOBYTE(v12) = 0;
  sub_1AD838884();
  swift_allocObject();
  *(void *)(v5 + 32) = sub_1AD9DDB30();
  *(unsigned char *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0;
  *(unsigned char *)(v5 + 72) = 1;
  *(void *)(v5 + 112) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v5 + 24) = a1;
  swift_retain();
  sub_1AD9DDB00();
  sub_1AD8387F8();
  swift_allocObject();
  *(void *)(v5 + 40) = sub_1AD9DDB30();
  *(void *)(v5 + 48) = a2;
  sub_1AD9DDB00();
  *(void *)(v5 + 64) = v12;
  *(unsigned char *)(v5 + 72) = v13;
  *(unsigned char *)(v5 + 96) = v10;
  *(void *)(v5 + 80) = a4;
  *(void *)(v5 + 88) = a5;
  return v5;
}

unint64_t sub_1AD8773DC()
{
  unint64_t result = qword_1E9A49FB0;
  if (!qword_1E9A49FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49FB0);
  }
  return result;
}

uint64_t sub_1AD877430@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 104;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](v4);
  uint64_t v6 = *(void *)(v3 + 112);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t type metadata accessor for GoalSectionProvider()
{
  return self;
}

uint64_t method lookup function for GoalSectionProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GoalSectionProvider);
}

uint64_t dispatch thunk of GoalSectionProvider.__allocating_init(goalDurationPublisher:presentationStyle:configuration:updateBlock:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of GoalSectionProvider.sleepTimeDurationPickerDelegate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of GoalSectionProvider.sleepTimeDurationPickerDelegate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of GoalSectionProvider.sleepTimeDurationPickerDelegate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of GoalSectionProvider.safeGoalSection.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t getEnumTagSinglePayload for SleepOnboardingContext.EntryPoint(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GoalSectionProvider.Configuration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD8776ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1AD877714(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GoalSectionProvider.Configuration()
{
  return &type metadata for GoalSectionProvider.Configuration;
}

unint64_t sub_1AD877730()
{
  unint64_t result = qword_1E9A49FB8;
  if (!qword_1E9A49FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49FB8);
  }
  return result;
}

uint64_t sub_1AD877784()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1AD8777D4()
{
  unint64_t result = qword_1E9A49FC0;
  if (!qword_1E9A49FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49FC0);
  }
  return result;
}

uint64_t sub_1AD877828(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD877870()
{
  unint64_t result = qword_1E9A49FD8;
  if (!qword_1E9A49FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49FD8);
  }
  return result;
}

void sub_1AD8778C4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD877928(uint64_t a1, char a2)
{
  if (a2)
  {
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v6 = (id)qword_1EB727930;
    uint64_t v7 = sub_1AD9DCA70();
  }
  else
  {
    int v3 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
    unsigned int v4 = (char *)objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
    v10.receiver = v4;
    v10.super_class = v3;
    id v5 = objc_msgSendSuper2(&v10, sel_init);
    id v6 = objc_msgSend(v5, sel_stringFromTimeInterval_, *(double *)&a1);

    if (!v6) {
      return 0;
    }
    uint64_t v7 = sub_1AD9DF710();
  }
  uint64_t v8 = v7;

  return v8;
}

unint64_t sub_1AD877A6C()
{
  unint64_t result = qword_1E9A49FE8;
  if (!qword_1E9A49FE8)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A49FE8);
  }
  return result;
}

uint64_t sub_1AD877AA8()
{
  return sub_1AD877AB0();
}

uint64_t sub_1AD877AB0()
{
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1AD9DD550();
  __swift_project_value_buffer(v0, (uint64_t)qword_1EB725958);
  uint64_t v1 = sub_1AD9DD530();
  os_log_type_t v2 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v6 = v4;
    *(_DWORD *)int v3 = 136446210;
    sub_1AD838978(0x72756769666E6F43, 0xED00006E6F697461, &v6);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v1, v2, "[%{public}s] Edit goal tapped", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v4, -1, -1);
    MEMORY[0x1B3E6D1A0](v3, -1, -1);
  }

  sub_1AD9DDB00();
  LOBYTE(v6) = (v6 & 1) == 0;
  return sub_1AD9DDAF0();
}

uint64_t sub_1AD877C5C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD877C94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD877CCC(uint64_t a1)
{
  return sub_1AD875260(a1);
}

uint64_t sub_1AD877CD4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD877D0C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD877D4C(uint64_t a1)
{
  return sub_1AD8754F8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1AD877D58()
{
  return sub_1AD8759C0();
}

uint64_t sub_1AD877D60(uint64_t a1)
{
  return sub_1AD87590C(a1, *(double *)(v1 + 24));
}

uint64_t destroy for GoalSectionModel(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GoalSectionModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  int v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GoalSectionModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  swift_retain();
  swift_release();
  id v5 = *(void **)(a1 + 24);
  uint64_t v6 = (void *)a2[3];
  *(void *)(a1 + 24) = v6;
  id v7 = v6;

  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GoalSectionModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_release();
  long long v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GoalSectionModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GoalSectionModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GoalSectionModel()
{
  return &type metadata for GoalSectionModel;
}

uint64_t destroy for GoalPickerTableViewItem()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

void *_s13SleepHealthUI23GoalPickerTableViewItemVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GoalPickerTableViewItem(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for GoalPickerTableViewItem(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepOnboardingContext(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepOnboardingContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GoalPickerTableViewItem()
{
  return &type metadata for GoalPickerTableViewItem;
}

uint64_t destroy for GoalTableViewItem(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GoalTableViewItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GoalTableViewItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  swift_retain();
  swift_release();
  id v5 = *(void **)(a1 + 24);
  uint64_t v6 = (void *)a2[3];
  *(void *)(a1 + 24) = v6;
  id v7 = v6;

  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for GoalTableViewItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_release();
  long long v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GoalTableViewItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GoalTableViewItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GoalTableViewItem()
{
  return &type metadata for GoalTableViewItem;
}

unint64_t sub_1AD878468()
{
  unint64_t result = qword_1E9A49FF8;
  if (!qword_1E9A49FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49FF8);
  }
  return result;
}

unint64_t sub_1AD8784BC(void *a1)
{
  a1[1] = sub_1AD877730();
  a1[2] = sub_1AD8784F4();
  unint64_t result = sub_1AD878548();
  a1[3] = result;
  return result;
}

unint64_t sub_1AD8784F4()
{
  unint64_t result = qword_1E9A4A000;
  if (!qword_1E9A4A000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A000);
  }
  return result;
}

unint64_t sub_1AD878548()
{
  unint64_t result = qword_1E9A4A008;
  if (!qword_1E9A4A008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A008);
  }
  return result;
}

unint64_t sub_1AD87859C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1AD8785CC();
  unint64_t result = sub_1AD878620();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AD8785CC()
{
  unint64_t result = qword_1E9A4A010;
  if (!qword_1E9A4A010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A010);
  }
  return result;
}

unint64_t sub_1AD878620()
{
  unint64_t result = qword_1E9A4A018;
  if (!qword_1E9A4A018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A018);
  }
  return result;
}

unint64_t sub_1AD878674()
{
  unint64_t result = qword_1E9A4A020;
  if (!qword_1E9A4A020)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A020);
  }
  return result;
}

uint64_t sub_1AD8786B0(uint64_t a1, uint64_t a2)
{
  sub_1AD878714();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1AD878714()
{
  if (!qword_1E9A4A030)
  {
    sub_1AD837214(255, (unint64_t *)&qword_1E9A4A8C0);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A030);
    }
  }
}

uint64_t sub_1AD87877C(uint64_t a1, uint64_t a2)
{
  sub_1AD878804(0, &qword_1E9A4A038, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1AD878804(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

id *sub_1AD878850(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_1AD87887C(uint64_t a1)
{
  return a1;
}

id *sub_1AD8788A8(id *a1)
{
  return a1;
}

uint64_t sub_1AD8788D4(uint64_t a1)
{
  return a1;
}

Class sub_1AD878908(char a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    uint64_t v3 = 32;
    if (a1) {
      uint64_t v3 = 24;
    }
    uint64_t v4 = *(void **)(v1 + v3);
    uint64_t v5 = *MEMORY[0x1E4FB27D0];
    uint64_t v6 = self;
    id v7 = v4;
    id v8 = objc_msgSend(v6, sel_traitCollectionWithPreferredContentSizeCategory_, v5);
    id v9 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v2, v8);

    objc_super v10 = self;
    id v11 = objc_msgSend(v10, sel_configurationWithFont_, v9);

    id v12 = objc_msgSend(v10, sel_configurationWithHierarchicalColor_, v7);
    char v13 = (objc_class *)objc_msgSend(v11, sel_configurationByApplyingConfiguration_, v12);

    v18.value.super.Class isa = v13;
    v14.super.Class isa = Symbol.uiImage(configuration:)(v18).super.isa;
  }
  else
  {
    id v15 = objc_msgSend(self, sel_traitCollectionWithPreferredContentSizeCategory_, *MEMORY[0x1E4FB27D0]);
    id v16 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v2, v15);

    id v7 = (objc_class *)objc_msgSend(self, sel_configurationWithFont_, v16);
    v19.value.super.Class isa = v7;
    v14.super.Class isa = Symbol.uiImage(configuration:)(v19).super.isa;
  }

  return v14.super.isa;
}

uint64_t sub_1AD878B10()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD878B40(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = a2;
  return result;
}

uint64_t (*sub_1AD878B78())()
{
  return nullsub_1;
}

id sub_1AD878B98()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((void *)v1 + 12) = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_currentConstraints] = 0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for ConfirmationIconView());
  uint64_t v3 = v0;
  id v4 = objc_msgSend(v2, sel_init);
  *(void *)&v3[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_iconView] = v4;
  *(void *)&v3[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConfirmationFeatureLabelsView()), sel_init);

  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for ConfirmationFeatureView();
  id v5 = objc_msgSendSuper2(&v11, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1AD878F04();
  sub_1AD879054();
  sub_1AD87B1E0();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1AD9E3070;
  uint64_t v7 = sub_1AD9DD6D0();
  uint64_t v8 = MEMORY[0x1E4FB1138];
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v8;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD841D34();
  id v9 = v5;
  sub_1AD9DFD90();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v9;
}

void sub_1AD878D34(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3E6D270](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (a2)
    {
      id v8 = a2;
      id v9 = objc_msgSend(a1, sel_traitCollection);
      id v10 = objc_msgSend(v9, sel_preferredContentSizeCategory);
      int v11 = sub_1AD9DFD60();

      id v12 = objc_msgSend(v8, sel_preferredContentSizeCategory);
      LODWORD(v10) = sub_1AD9DFD60();

      if ((v11 ^ v10)) {
        sub_1AD879054();
      }

      uint64_t v7 = v8;
    }
    else
    {
      sub_1AD879054();
    }
  }
}

id sub_1AD878F04()
{
  sub_1AD870B1C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD9E5930;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_iconView);
  *(void *)(inited + 32) = v2;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView);
  *(void *)(inited + 40) = v3;
  v12._rawValue = (void *)inited;
  sub_1AD9DF870();
  if (!((unint64_t)v12._rawValue >> 62))
  {
    uint64_t v4 = *(void *)(((unint64_t)v12._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v5 = v2;
    id result = v3;
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    UIView.addSubviews(_:useAutoLayout:)(v12, 1);
    return (id)swift_bridgeObjectRelease();
  }
  id v10 = v2;
  id v11 = v3;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1AD9E0190();
  id result = (id)swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_10;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (((unint64_t)v12._rawValue & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x1B3E6BFF0](i, v12._rawValue);
      }
      else {
        id v8 = *((id *)v12._rawValue + i + 4);
      }
      id v9 = v8;
      objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD879054()
{
  uint64_t v1 = v0;
  uint64_t v50 = OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_currentConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_currentConstraints])
  {
    id v2 = self;
    sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
    swift_bridgeObjectRetain();
    uint64_t v3 = (void *)sub_1AD9DF850();
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_deactivateConstraints_, v3);
  }
  sub_1AD870B1C();
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1AD9E5440;
  id v5 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_iconView];
  id v6 = objc_msgSend(v5, sel_leadingAnchor);
  id v7 = objc_msgSend(v1, sel_leadingAnchor);
  id v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(void *)(v4 + 32) = v8;
  id v9 = objc_msgSend(v5, sel_topAnchor);
  id v10 = objc_msgSend(v1, sel_topAnchor);
  id v11 = objc_msgSend(v9, sel_constraintGreaterThanOrEqualToAnchor_constant_, v10, 0.0);

  *(void *)(v4 + 40) = v11;
  Swift::OpaquePointer v12 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView];
  id v13 = objc_msgSend(v12, sel_bottomAnchor);
  id v14 = objc_msgSend(v1, sel_bottomAnchor);
  id v15 = objc_msgSend(v13, sel_constraintLessThanOrEqualToAnchor_constant_, v14, 0.0);

  *(void *)(v4 + 48) = v15;
  id v16 = objc_msgSend(v12, sel_trailingAnchor);
  id v17 = objc_msgSend(v1, sel_trailingAnchor);
  id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_constant_, v17, -1.0);

  *(void *)(v4 + 56) = v18;
  unint64_t v51 = v4;
  sub_1AD9DF870();
  id v19 = objc_msgSend(self, sel_currentTraitCollection);
  id v20 = objc_msgSend(v19, sel_preferredContentSizeCategory);
  LOBYTE(v18) = sub_1AD9DFD60();

  if (v18)
  {
    id v21 = objc_msgSend(v12, sel_topAnchor);
    id v22 = objc_msgSend(v5, sel_bottomAnchor);
    id v23 = objc_msgSend(v21, sel_constraintGreaterThanOrEqualToAnchor_constant_, v22, 0.0);

    id v24 = objc_msgSend(v12, sel_leadingAnchor);
    id v25 = objc_msgSend(v1, sel_leadingAnchor);
    id v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      id v27 = (id)sub_1AD9E0190();
      swift_bridgeObjectRelease();
      if (!__OFADD__(v27, 2))
      {
LABEL_6:
        sub_1AD9AF02C();
        sub_1AD9DF870();
        id v27 = v23;
        MEMORY[0x1B3E6B7E0]();
        if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
LABEL_7:
          sub_1AD9DF8B0();
          sub_1AD9DF870();
          id v28 = v26;
          MEMORY[0x1B3E6B7E0]();
          if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1AD9DF880();
          }
          sub_1AD9DF8B0();
          sub_1AD9DF870();
          goto LABEL_22;
        }
LABEL_28:
        sub_1AD9DF880();
        goto LABEL_7;
      }
    }
    else
    {
      id v27 = *(id *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!__OFADD__(v27, 2)) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  id v29 = objc_msgSend(v5, sel_bottomAnchor);
  id v30 = objc_msgSend(v1, sel_bottomAnchor);
  id v49 = objc_msgSend(v29, sel_constraintLessThanOrEqualToAnchor_constant_, v30, 0.0);

  id v31 = objc_msgSend(v5, sel_centerYAnchor);
  id v32 = objc_msgSend(v1, sel_centerYAnchor);
  id v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v32);

  id v34 = objc_msgSend(v12, sel_topAnchor);
  id v35 = objc_msgSend(v1, sel_topAnchor);
  id v36 = objc_msgSend(v34, sel_constraintGreaterThanOrEqualToAnchor_constant_, v35, 0.0);

  id v37 = objc_msgSend(v12, sel_centerYAnchor);
  id v38 = objc_msgSend(v1, sel_centerYAnchor);
  id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v38);

  id v40 = objc_msgSend(v12, sel_leadingAnchor);
  id v41 = objc_msgSend(v5, sel_trailingAnchor);
  id v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_constant_, v41, 16.0);

  if (!(v4 >> 62))
  {
    if (!__OFADD__(*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10), 5)) {
      goto LABEL_12;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = sub_1AD9E0190();
  swift_bridgeObjectRelease();
  if (__OFADD__(v48, 5)) {
    goto LABEL_31;
  }
LABEL_12:
  sub_1AD9AF02C();
  sub_1AD9DF870();
  id v37 = v49;
  MEMORY[0x1B3E6B7E0]();
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_32:
  }
    sub_1AD9DF880();
  sub_1AD9DF8B0();
  sub_1AD9DF870();
  id v28 = v33;
  MEMORY[0x1B3E6B7E0]();
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1AD9DF880();
  }
  sub_1AD9DF8B0();
  sub_1AD9DF870();
  id v27 = v36;
  MEMORY[0x1B3E6B7E0]();
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1AD9DF880();
  }
  sub_1AD9DF8B0();
  sub_1AD9DF870();
  id v43 = v39;
  MEMORY[0x1B3E6B7E0]();
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1AD9DF880();
  }
  sub_1AD9DF8B0();
  sub_1AD9DF870();
  id v44 = v42;
  MEMORY[0x1B3E6B7E0]();
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1AD9DF880();
  }
  sub_1AD9DF8B0();
  sub_1AD9DF870();

LABEL_22:
  int v45 = self;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  swift_bridgeObjectRetain();
  uint64_t v46 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v45, sel_activateConstraints_, v46);

  *(void *)&v1[v50] = v51;
  return swift_bridgeObjectRelease();
}

void sub_1AD87998C(double *a1)
{
  uint64_t v2 = v1;
  double v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a1 + 3);
  uint64_t v7 = *((unsigned __int8 *)a1 + 32);
  uint64_t v8 = *((unsigned __int16 *)a1 + 20);
  double v9 = a1[6];
  id v11 = (void *)*((void *)a1 + 7);
  id v10 = (void *)*((void *)a1 + 8);
  Swift::OpaquePointer v12 = (void *)*((void *)a1 + 9);
  uint64_t v13 = *((unsigned __int8 *)a1 + 80);
  uint64_t v15 = *((void *)a1 + 11);
  uint64_t v14 = *((void *)a1 + 12);
  id v16 = (double *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel);
  uint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel);
  uint64_t v38 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 8);
  uint64_t v37 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 16);
  uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 32);
  uint64_t v36 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 24);
  uint64_t v35 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 40);
  id v19 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 56);
  uint64_t v34 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 48);
  long long v33 = *(_OWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 64);
  *id v16 = v3;
  *((void *)v16 + 1) = v4;
  *((void *)v16 + 2) = v5;
  *((void *)v16 + 3) = v6;
  int v42 = v7;
  *((void *)v16 + 4) = v7;
  *((void *)v16 + 5) = v8;
  v16[6] = v9;
  *((void *)v16 + 7) = v11;
  *((void *)v16 + 8) = v10;
  *((void *)v16 + 9) = v12;
  *((void *)v16 + 10) = v13;
  char v41 = v13;
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  *((void *)v16 + 11) = v15;
  *((void *)v16 + 12) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11;
  id v40 = v10;
  id v39 = v12;
  sub_1AD87B16C(v17, v38, v37, v36, v18, v35, v34, v19, (void *)v33, *((void **)&v33 + 1));
  uint64_t v20 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView);
  id v21 = objc_retain(*(id *)(v20
                          + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel));
  id v22 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v21, sel_setText_, v22);

  id v23 = objc_retain(*(id *)(v20
                          + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel));
  if (v6) {
    id v24 = (void *)sub_1AD9DF6D0();
  }
  else {
    id v24 = 0;
  }
  objc_msgSend(v23, sel_setText_, v24);

  uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_iconView);
  id v26 = *(void **)(v25
                 + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolView);
  Class v27 = sub_1AD878908(v42);
  objc_msgSend(v26, sel_setImage_, v27);

  if (v41)
  {
    id v28 = 0;
  }
  else
  {
    if (v42) {
      id v29 = v40;
    }
    else {
      id v29 = v39;
    }
    id v28 = v29;
  }
  objc_msgSend(v26, sel_setTintColor_, v28);

  id v30 = *(void **)(v25
                 + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint);
  if (v30)
  {
    objc_msgSend(v30, sel_setConstant_, v9);
    sub_1AD879C2C(v32, v31);
  }
  else
  {
    __break(1u);
  }
}

void sub_1AD879C2C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView);
    uint64_t v4 = *(void **)(v3
                  + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel);
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    id v5 = v4;
    uint64_t v6 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setAccessibilityIdentifier_, v6);

    uint64_t v7 = *(void **)(v3
                  + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel);
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    id v8 = v7;
    id v11 = (id)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setAccessibilityIdentifier_, v11);
  }
  else
  {
    uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView);
    objc_msgSend(*(id *)(v9+ OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel), sel_setAccessibilityIdentifier_, 0);
    id v10 = *(void **)(v9
                   + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel);
    objc_msgSend(v10, sel_setAccessibilityIdentifier_, 0);
  }
}

id sub_1AD879DEC(uint64_t a1)
{
  return sub_1AD87AA60(a1, type metadata accessor for ConfirmationFeatureView);
}

uint64_t type metadata accessor for ConfirmationFeatureView()
{
  return self;
}

void sub_1AD879EBC(uint64_t a1, uint64_t a2)
{
}

char *sub_1AD879EE0()
{
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint] = 0;
  uint64_t v1 = *MEMORY[0x1E4FB2990];
  uint64_t v2 = *MEMORY[0x1E4FB27D0];
  uint64_t v3 = self;
  uint64_t v4 = v0;
  id v5 = objc_msgSend(v3, sel_traitCollectionWithPreferredContentSizeCategory_, v2);
  id v6 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v1, v5);

  id v7 = objc_msgSend(self, sel_configurationWithFont_, v6);
  id v8 = (void *)sub_1AD9DF6D0();
  id v9 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v8, v7);

  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v9);
  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolView] = v10;
  id v11 = v10;
  objc_msgSend(v11, sel_setContentMode_, 4);

  v27.receiver = v4;
  v27.super_class = (Class)type metadata accessor for ConfirmationIconView();
  Swift::OpaquePointer v12 = (char *)objc_msgSendSuper2(&v27, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolView];
  uint64_t v14 = v12;
  objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v14, sel_addSubview_, v13);
  uint64_t v15 = self;
  id v16 = objc_msgSend(v15, sel_systemGray6Color);
  id v17 = objc_msgSend(v15, sel_systemGray4Color);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  *(void *)(v18 + 24) = v17;
  id v19 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  v26[4] = sub_1AD87B14C;
  v26[5] = v18;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 1107296256;
  id v26[2] = sub_1AD8F0900;
  v26[3] = &block_descriptor_1;
  uint64_t v20 = _Block_copy(v26);
  id v21 = v16;
  id v22 = v17;
  id v23 = objc_msgSend(v19, sel_initWithDynamicProvider_, v20);
  _Block_release(v20);

  swift_release();
  objc_msgSend(v14, sel_setBackgroundColor_, v23);

  id v24 = (id)*MEMORY[0x1E4F39EA8];
  sub_1AD9DFD80();

  sub_1AD87A2C8();
  return v14;
}

void sub_1AD87A2C8()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolView];
  id v2 = objc_msgSend(v1, sel_centerYAnchor);
  id v3 = objc_msgSend(v0, sel_centerYAnchor);
  id v4 = objc_msgSend(v2, sel_constraintEqualToAnchor_, v3);

  uint64_t v5 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint;
  id v6 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint];
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint] = v4;

  sub_1AD870B1C();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1AD9E5440;
  id v8 = objc_msgSend(v0, sel_heightAnchor);
  id v9 = objc_msgSend(v8, sel_constraintEqualToConstant_, 44.0);

  *(void *)(v7 + 32) = v9;
  id v10 = objc_msgSend(v0, sel_widthAnchor);
  id v11 = objc_msgSend(v10, sel_constraintEqualToConstant_, 44.0);

  *(void *)(v7 + 40) = v11;
  id v12 = objc_msgSend(v1, sel_centerXAnchor);
  id v13 = objc_msgSend(v0, sel_centerXAnchor);
  id v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(void *)(v7 + 48) = v14;
  uint64_t v15 = *(void **)&v0[v5];
  if (v15)
  {
    *(void *)(v7 + 56) = v15;
    sub_1AD9DF870();
    id v16 = self;
    sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
    id v17 = v15;
    id v18 = (id)sub_1AD9DF850();
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_activateConstraints_, v18);
  }
  else
  {
    __break(1u);
  }
}

id sub_1AD87A52C()
{
  return sub_1AD87AA60(0, type metadata accessor for ConfirmationIconView);
}

uint64_t type metadata accessor for ConfirmationIconView()
{
  return self;
}

char *sub_1AD87A5B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel;
  id v3 = (void *)*MEMORY[0x1E4FB28C8];
  uint64_t v4 = *MEMORY[0x1E4FB09E0];
  id v5 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v6 = v1;
  id v7 = v3;
  id v8 = objc_msgSend(v5, sel_init);
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v9 = v8;
  id v10 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v7, 0, 0, 0, 0, 0, 0, v4, 0);
  objc_msgSend(v9, sel_setFont_, v10);

  objc_msgSend(v9, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v9, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v9, sel_setLineBreakMode_, 0);
  objc_msgSend(v9, sel_setNumberOfLines_, 0);
  *(void *)&v1[v2] = v9;
  id v11 = (void *)*MEMORY[0x1E4FB28F0];
  id v12 = objc_msgSend(self, sel_secondaryLabelColor);
  id v13 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v14 = v11;
  id v15 = v12;
  id v16 = objc_msgSend(v13, sel_init);
  id v17 = v16;
  if (v15) {
    objc_msgSend(v16, sel_setTextColor_, v15);
  }
  uint64_t v18 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel;
  id v19 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v14, 0, 0, 0, 0, 0, 0, v4, 0);
  objc_msgSend(v17, sel_setFont_, v19);

  objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v17, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v17, sel_setLineBreakMode_, 0);
  objc_msgSend(v17, sel_setNumberOfLines_, 0);

  *(void *)&v6[v18] = v17;
  v34.receiver = v6;
  v34.super_class = (Class)type metadata accessor for ConfirmationFeatureLabelsView();
  uint64_t v20 = (char *)objc_msgSendSuper2(&v34, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1AD870B1C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD9E5930;
  id v22 = *(void **)&v20[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel];
  *(void *)(inited + 32) = v22;
  id v23 = *(void **)&v20[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel];
  *(void *)(inited + 40) = v23;
  v33._rawValue = (void *)inited;
  sub_1AD9DF870();
  id v24 = v20;
  id v25 = v22;
  id v26 = v23;
  UIView.addSubviews(_:useAutoLayout:)(v33, 1);
  swift_bridgeObjectRelease();

  objc_super v27 = v24;
  id v28 = objc_msgSend(v27, sel_subviews);
  sub_1AD837214(0, &qword_1E9A4C460);
  unint64_t v29 = sub_1AD9DF860();

  UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(v29, 1.0, 0.0, 0.0, 0.0, 0.0);
  swift_bridgeObjectRelease();
  id v30 = self;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  uint64_t v31 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v30, sel_activateConstraints_, v31);

  return v27;
}

void sub_1AD87AA18()
{
}

id sub_1AD87AA44()
{
  return sub_1AD87AA60(0, type metadata accessor for ConfirmationFeatureLabelsView);
}

id sub_1AD87AA60(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t type metadata accessor for ConfirmationFeatureLabelsView()
{
  return self;
}

uint64_t destroy for ConfirmationFeatureViewModel(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConfirmationFeatureViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  id v5 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  id v6 = *(void **)(a2 + 64);
  id v7 = *(void **)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v5;
  id v10 = v6;
  id v11 = v7;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationFeatureViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void **)(a2 + 56);
  id v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v4;
  id v6 = v4;

  id v7 = *(void **)(a2 + 64);
  uint64_t v8 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 72);
  id v11 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v10;
  id v12 = v10;

  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ConfirmationFeatureViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  long long v6 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  id v7 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);

  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationFeatureViewModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationFeatureViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationFeatureViewModel()
{
  return &type metadata for ConfirmationFeatureViewModel;
}

void sub_1AD87AE60()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel;
  long long v3 = (void *)*MEMORY[0x1E4FB28C8];
  uint64_t v4 = *MEMORY[0x1E4FB09E0];
  id v5 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v6 = v3;
  id v7 = objc_msgSend(v5, sel_init);
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v8 = v7;
  id v9 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v6, 0, 0, 0, 0, 0, 0, v4, 0);
  objc_msgSend(v8, sel_setFont_, v9);

  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v8, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v8, sel_setLineBreakMode_, 0);
  objc_msgSend(v8, sel_setNumberOfLines_, 0);
  *(void *)&v1[v2] = v8;
  id v10 = (void *)*MEMORY[0x1E4FB28F0];
  id v11 = objc_msgSend(self, sel_secondaryLabelColor);
  id v12 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v13 = v10;
  id v14 = v11;
  id v15 = objc_msgSend(v12, sel_init);
  id v16 = v15;
  if (v14) {
    objc_msgSend(v15, sel_setTextColor_, v14);
  }
  uint64_t v17 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel;
  id v18 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v13, 0, 0, 0, 0, 0, 0, v4, 0);
  objc_msgSend(v16, sel_setFont_, v18);

  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v16, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v16, sel_setLineBreakMode_, 0);
  objc_msgSend(v16, sel_setNumberOfLines_, 0);

  *(void *)&v1[v17] = v16;
  sub_1AD9E0140();
  __break(1u);
}

uint64_t sub_1AD87B10C()
{
  return swift_deallocObject();
}

id sub_1AD87B14C(void *a1)
{
  return sub_1AD8F03F4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1AD87B16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, void *a10)
{
  if (a2)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1AD87B1E0()
{
  if (!qword_1E9A49250)
  {
    sub_1AD841CE0();
    unint64_t v0 = sub_1AD9E0290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49250);
    }
  }
}

uint64_t sub_1AD87B238()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD87B270(void *a1, void *a2)
{
  sub_1AD878D34(a1, a2, v2);
}

void destroy for ConfirmationFeatureViewModel.IconViewModel(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for ConfirmationFeatureViewModel.IconViewModel(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  long long v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(a2 + 24);
  id v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

uint64_t assignWithCopy for ConfirmationFeatureViewModel.IconViewModel(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void **)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  id v7 = *(void **)(a2 + 24);
  id v8 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 32);
  id v11 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v10;
  id v12 = v10;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ConfirmationFeatureViewModel.IconViewModel(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  id v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationFeatureViewModel.IconViewModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationFeatureViewModel.IconViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationFeatureViewModel.IconViewModel()
{
  return &type metadata for ConfirmationFeatureViewModel.IconViewModel;
}

id Result<>.init(summaries:error:)(uint64_t a1, id a2)
{
  id v2 = a2;
  if (a1)
  {

    return (id)a1;
  }
  else if (!a2)
  {
    type metadata accessor for HKError(0);
    sub_1AD87B550(MEMORY[0x1E4FBC860]);
    sub_1AD87B678();
    sub_1AD9DCAF0();
    return (id)v5;
  }
  return v2;
}

unint64_t sub_1AD87B550(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    long long v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1AD87B6D0();
  uint64_t v2 = sub_1AD9E01C0();
  long long v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1AD87B7B4(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1AD87B73C(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    id v11 = (uint64_t *)(v3[6] + 16 * result);
    *id v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1AD867734(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AD87B678()
{
  unint64_t result = qword_1E9A49688;
  if (!qword_1E9A49688)
  {
    type metadata accessor for HKError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49688);
  }
  return result;
}

void sub_1AD87B6D0()
{
  if (!qword_1E9A49DF0)
  {
    unint64_t v0 = sub_1AD9E01D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49DF0);
    }
  }
}

unint64_t sub_1AD87B73C(uint64_t a1, uint64_t a2)
{
  sub_1AD9E03A0();
  sub_1AD9DF760();
  uint64_t v4 = sub_1AD9E03E0();
  return sub_1AD87B884(a1, a2, v4);
}

uint64_t sub_1AD87B7B4(uint64_t a1, uint64_t a2)
{
  sub_1AD87B818();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1AD87B818()
{
  if (!qword_1E9A49DF8)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A49DF8);
    }
  }
}

unint64_t sub_1AD87B884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_1AD9E02D0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_1AD9E02D0() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (sub_1AD9E02D0()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

void *initializeBufferWithCopyOfBuffer for LockScreenBedtimeView(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

void destroy for LockScreenBedtimeView(uint64_t a1)
{
}

void *assignWithCopy for LockScreenBedtimeView(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)a2[1];
  id v4 = (void *)a1[1];
  a1[1] = v3;
  id v5 = v3;

  return a1;
}

void *assignWithTake for LockScreenBedtimeView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  id v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for LockScreenBedtimeView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LockScreenBedtimeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LockScreenBedtimeView()
{
  return &type metadata for LockScreenBedtimeView;
}

uint64_t sub_1AD87BB0C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD87BB28(uint64_t a1, void *a2)
{
  type metadata accessor for LockScreenContentModel();
  sub_1AD87BF48(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
  id v3 = a2;
  sub_1AD9DDF30();
  id v5 = v4;
  sub_1AD9DF040();
  sub_1AD87BC2C();
  sub_1AD9DED30();

  return swift_release();
}

uint64_t sub_1AD87BC24(uint64_t a1)
{
  return sub_1AD87BB28(a1, *(void **)(v1 + 8));
}

unint64_t sub_1AD87BC2C()
{
  unint64_t result = qword_1E9A4A0B8;
  if (!qword_1E9A4A0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A0B8);
  }
  return result;
}

uint64_t destroy for AlarmButton(uint64_t a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for AlarmButton(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v4 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AlarmButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  id v4 = *(void **)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AlarmButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AlarmButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlarmButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmButton()
{
  return &type metadata for AlarmButton;
}

uint64_t sub_1AD87BE58()
{
  return sub_1AD87D688(&qword_1E9A4A0C0, (void (*)(uint64_t))sub_1AD87BEB4, (void (*)(void))sub_1AD87BC2C, (void (*)(void))sub_1AD87BF14);
}

void sub_1AD87BEB4()
{
  if (!qword_1E9A4A0C8)
  {
    sub_1AD9DE6E0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A0C8);
    }
  }
}

uint64_t sub_1AD87BF14()
{
  return sub_1AD87BF48(&qword_1E9A49F80, MEMORY[0x1E4F3DF60]);
}

uint64_t sub_1AD87BF48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD87BF90()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD87BFAC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v58 = a5;
  uint64_t v57 = sub_1AD9DE020() - 8;
  MEMORY[0x1F4188790](v57, v9);
  unint64_t v55 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87D184();
  uint64_t v53 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87DB40(0);
  uint64_t v17 = v16 - 8;
  MEMORY[0x1F4188790](v16, v18);
  uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87DC98(0);
  uint64_t v54 = v21;
  MEMORY[0x1F4188790](v21, v22);
  unint64_t v51 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = swift_allocObject();
  uint64_t v56 = a1;
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = a2;
  *(unsigned char *)(v24 + 32) = a3;
  *(void *)(v24 + 40) = a4;
  uint64_t v59 = a1;
  uint64_t v60 = a2;
  char v61 = a3;
  int v50 = a3;
  uint64_t v62 = a4;
  sub_1AD87D22C();
  sub_1AD87D688(&qword_1E9A4A138, (void (*)(uint64_t))sub_1AD87D22C, (void (*)(void))sub_1AD87D714, (void (*)(void))sub_1AD87DAC4);
  id v52 = a2;
  uint64_t v49 = a4;
  swift_retain();
  sub_1AD9DF090();
  char v63 = a3;
  uint64_t v64 = a4;
  sub_1AD87F080(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
  sub_1AD9DF070();
  uint64_t v25 = v65;
  uint64_t v26 = v66;
  LOBYTE(a1) = v67;
  uint64_t v27 = sub_1AD9DF320();
  uint64_t v29 = v28;
  uint64_t v30 = v53;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v20, v15, v53);
  uint64_t v31 = &v20[*(int *)(v17 + 44)];
  *(void *)uint64_t v31 = v25;
  *((void *)v31 + 1) = v26;
  v31[16] = a1;
  *((void *)v31 + 3) = v27;
  *((void *)v31 + 4) = v29;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v30);
  uint64_t v32 = v55;
  Swift::OpaquePointer v33 = &v55[*(int *)(v57 + 28)];
  uint64_t v34 = *MEMORY[0x1E4F3D4A0];
  uint64_t v35 = sub_1AD9DE2D0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v33, v34, v35);
  __asm { FMOV            V0.2D, #24.0 }
  uint64_t v41 = (uint64_t)v32;
  *uint64_t v32 = _Q0;
  uint64_t v42 = (uint64_t)v51;
  uint64_t v43 = (uint64_t)&v51[*(int *)(v54 + 36)];
  sub_1AD87DD84(v41, v43, MEMORY[0x1E4F3CDB8]);
  sub_1AD87DCCC();
  *(_WORD *)(v43 + *(int *)(v44 + 36)) = 256;
  sub_1AD87DD84((uint64_t)v20, v42, (uint64_t (*)(void))sub_1AD87DB40);
  sub_1AD87DDEC(v41, MEMORY[0x1E4F3CDB8]);
  sub_1AD87DDEC((uint64_t)v20, (uint64_t (*)(void))sub_1AD87DB40);
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = v52;
  *(void *)(v45 + 16) = v56;
  *(void *)(v45 + 24) = v46;
  *(unsigned char *)(v45 + 32) = v50;
  *(void *)(v45 + 40) = v49;
  sub_1AD87D688(&qword_1E9A4A1C8, sub_1AD87DC98, (void (*)(void))sub_1AD87DF04, (void (*)(void))sub_1AD87DFB4);
  id v47 = v46;
  swift_retain();
  sub_1AD9DECE0();
  swift_release();
  return sub_1AD87DDEC(v42, (uint64_t (*)(void))sub_1AD87DC98);
}

uint64_t sub_1AD87C4E8(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = a2;
  return sub_1AD9DDBD0();
}

uint64_t sub_1AD87C558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v101 = a3;
  uint64_t v100 = a2;
  uint64_t v114 = a5;
  uint64_t v7 = sub_1AD9DE940();
  uint64_t v112 = *(void *)(v7 - 8);
  uint64_t v113 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v111 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87D514();
  uint64_t v102 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87D4F4(0);
  uint64_t v16 = v15 - 8;
  MEMORY[0x1F4188790](v15, v17);
  uint64_t v19 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87D4D4(0);
  uint64_t v21 = v20 - 8;
  MEMORY[0x1F4188790](v20, v22);
  uint64_t v24 = (char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87D458(0);
  uint64_t v26 = v25 - 8;
  MEMORY[0x1F4188790](v25, v27);
  uint64_t v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87D438(0);
  uint64_t v103 = v30 - 8;
  MEMORY[0x1F4188790](v30 - 8, v31);
  uint64_t v104 = (uint64_t)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87D3B8();
  uint64_t v107 = v33 - 8;
  MEMORY[0x1F4188790](v33 - 8, v34);
  uint64_t v105 = (uint64_t)&v99 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87D338();
  uint64_t v109 = v36 - 8;
  MEMORY[0x1F4188790](v36 - 8, v37);
  uint64_t v106 = (uint64_t)&v99 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87D2B8();
  uint64_t v110 = v39 - 8;
  MEMORY[0x1F4188790](v39 - 8, v40);
  uint64_t v108 = (uint64_t)&v99 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = a1;
  uint64_t v120 = v100;
  char v121 = v101;
  uint64_t v122 = a4;
  uint64_t v115 = a1;
  uint64_t v116 = v100;
  char v117 = v101;
  uint64_t v118 = a4;
  sub_1AD862B90(0);
  sub_1AD862C9C();
  sub_1AD9DEFC0();
  LOBYTE(a4) = sub_1AD9DE790();
  sub_1AD9DDCC0();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v50 = v102;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v19, v14, v102);
  unint64_t v51 = &v19[*(int *)(v16 + 44)];
  char *v51 = a4;
  *((void *)v51 + 1) = v43;
  *((void *)v51 + 2) = v45;
  *((void *)v51 + 3) = v47;
  *((void *)v51 + 4) = v49;
  v51[40] = 0;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v50);
  LOBYTE(v16) = sub_1AD9DE7A0();
  sub_1AD9DDCC0();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  sub_1AD87DD84((uint64_t)v19, (uint64_t)v24, (uint64_t (*)(void))sub_1AD87D4F4);
  uint64_t v60 = &v24[*(int *)(v21 + 44)];
  *uint64_t v60 = v16;
  *((void *)v60 + 1) = v53;
  *((void *)v60 + 2) = v55;
  *((void *)v60 + 3) = v57;
  *((void *)v60 + 4) = v59;
  v60[40] = 0;
  sub_1AD87DDEC((uint64_t)v19, (uint64_t (*)(void))sub_1AD87D4F4);
  LOBYTE(v21) = sub_1AD9DE7B0();
  sub_1AD9DDCC0();
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  sub_1AD87DD84((uint64_t)v24, (uint64_t)v29, (uint64_t (*)(void))sub_1AD87D4D4);
  uint64_t v69 = &v29[*(int *)(v26 + 44)];
  *uint64_t v69 = v21;
  *((void *)v69 + 1) = v62;
  *((void *)v69 + 2) = v64;
  *((void *)v69 + 3) = v66;
  *((void *)v69 + 4) = v68;
  v69[40] = 0;
  sub_1AD87DDEC((uint64_t)v24, (uint64_t (*)(void))sub_1AD87D4D4);
  LOBYTE(v24) = sub_1AD9DE7D0();
  sub_1AD9DDCC0();
  uint64_t v71 = v70;
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  uint64_t v78 = v104;
  sub_1AD87DD84((uint64_t)v29, v104, (uint64_t (*)(void))sub_1AD87D458);
  uint64_t v79 = v78 + *(int *)(v103 + 44);
  *(unsigned char *)uint64_t v79 = (_BYTE)v24;
  *(void *)(v79 + 8) = v71;
  *(void *)(v79 + 16) = v73;
  *(void *)(v79 + 24) = v75;
  *(void *)(v79 + 32) = v77;
  *(unsigned char *)(v79 + 40) = 0;
  sub_1AD87DDEC((uint64_t)v29, (uint64_t (*)(void))sub_1AD87D458);
  sub_1AD9DE950();
  uint64_t v81 = v111;
  uint64_t v80 = v112;
  uint64_t v82 = v113;
  (*(void (**)(char *, void, uint64_t))(v112 + 104))(v111, *MEMORY[0x1E4F3E0F8], v113);
  uint64_t v83 = sub_1AD9DE970();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v82);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v85 = v105;
  sub_1AD87DD84(v78, v105, (uint64_t (*)(void))sub_1AD87D438);
  uint64_t v86 = (uint64_t *)(v85 + *(int *)(v107 + 44));
  *uint64_t v86 = KeyPath;
  v86[1] = v83;
  sub_1AD87DDEC(v78, (uint64_t (*)(void))sub_1AD87D438);
  uint64_t v87 = sub_1AD9DEEC0();
  uint64_t v88 = swift_getKeyPath();
  uint64_t v89 = v106;
  sub_1AD87DD84(v85, v106, (uint64_t (*)(void))sub_1AD87D3B8);
  uint64_t v90 = (uint64_t *)(v89 + *(int *)(v109 + 44));
  *uint64_t v90 = v88;
  v90[1] = v87;
  sub_1AD87DDEC(v85, (uint64_t (*)(void))sub_1AD87D3B8);
  uint64_t v91 = swift_getKeyPath();
  uint64_t v92 = v108;
  sub_1AD87DD84(v89, v108, (uint64_t (*)(void))sub_1AD87D338);
  uint64_t v93 = v92 + *(int *)(v110 + 44);
  *(void *)uint64_t v93 = v91;
  *(void *)(v93 + 8) = 1;
  *(unsigned char *)(v93 + 16) = 0;
  sub_1AD87DDEC(v89, (uint64_t (*)(void))sub_1AD87D338);
  uint64_t v94 = swift_getKeyPath();
  uint64_t v95 = v114;
  sub_1AD87DD84(v92, v114, (uint64_t (*)(void))sub_1AD87D2B8);
  sub_1AD87D22C();
  uint64_t v97 = (uint64_t *)(v95 + *(int *)(v96 + 36));
  *uint64_t v97 = v94;
  v97[1] = 0x3FE0000000000000;
  return sub_1AD87DDEC(v92, (uint64_t (*)(void))sub_1AD87D2B8);
}

uint64_t sub_1AD87CD70@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  sub_1AD87E438(0, &qword_1E9A49C80, MEMORY[0x1E4F3EC78], MEMORY[0x1E4F3DF18]);
  uint64_t v33 = v3;
  MEMORY[0x1F4188790](v3, v4);
  id v6 = (uint64_t *)((char *)&v32 - v5);
  uint64_t v34 = sub_1AD9DEF90();
  uint64_t v7 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34, v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD87E438(0, (unint64_t *)&unk_1E9A4ACC0, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v14 = (char *)&v32 - v13;
  sub_1AD862B90(0);
  uint64_t v16 = v15;
  uint64_t result = MEMORY[0x1F4188790](v15, v17);
  uint64_t v20 = (uint64_t *)((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void *)(a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider);
  if (v21)
  {
    uint64_t v22 = v21 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
    swift_beginAccess();
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
    sub_1AD87E4A4(v22, (uint64_t)v14, (unint64_t *)&unk_1E9A4ACC0, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, MEMORY[0x1E4FBB718]);
    uint64_t v24 = type metadata accessor for Alarm();
    LODWORD(v22) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24);
    sub_1AD87E514((uint64_t)v14, (unint64_t *)&unk_1E9A4ACC0, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, v23);
    if (v22 == 1) {
      __int16 v25 = 4096;
    }
    else {
      __int16 v25 = 4097;
    }
    __int16 v36 = v25;
    Symbol.systemName.getter();
    uint64_t v26 = sub_1AD9DEF70();
    uint64_t v27 = v34;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E4F3EC60], v34);
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v6 + *(int *)(v33 + 28), v10, v27);
    *id v6 = KeyPath;
    uint64_t v29 = (uint64_t)v20 + *(int *)(v16 + 36);
    uint64_t v30 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3EC78];
    uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3DF18];
    sub_1AD87E4A4((uint64_t)v6, v29, &qword_1E9A49C80, MEMORY[0x1E4F3EC78], MEMORY[0x1E4F3DF18]);
    *uint64_t v20 = v26;
    swift_retain();
    sub_1AD87E514((uint64_t)v6, &qword_1E9A49C80, v30, v31);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v27);
    swift_release();
    return sub_1AD87E8D0((uint64_t)v20, v35, (uint64_t (*)(void))sub_1AD862B90);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD87D174@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD87BFAC(*(void *)v1, *(void **)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_1AD87D184()
{
  if (!qword_1E9A4A0D0)
  {
    sub_1AD87D22C();
    sub_1AD87D688(&qword_1E9A4A138, (void (*)(uint64_t))sub_1AD87D22C, (void (*)(void))sub_1AD87D714, (void (*)(void))sub_1AD87DAC4);
    unint64_t v0 = sub_1AD9DF0C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A0D0);
    }
  }
}

void sub_1AD87D22C()
{
  if (!qword_1E9A4A0D8)
  {
    sub_1AD87D2B8();
    sub_1AD87F080(255, &qword_1E9A4A130, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A0D8);
    }
  }
}

void sub_1AD87D2B8()
{
  if (!qword_1E9A4A0E0)
  {
    sub_1AD87D338();
    sub_1AD87D61C(255, (unint64_t *)&qword_1E9A4A120, &qword_1E9A4A128, MEMORY[0x1E4FBB550]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A0E0);
    }
  }
}

void sub_1AD87D338()
{
  if (!qword_1E9A4A0E8)
  {
    sub_1AD87D3B8();
    sub_1AD87D61C(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A0E8);
    }
  }
}

void sub_1AD87D3B8()
{
  if (!qword_1E9A4A0F0)
  {
    sub_1AD87D438(255);
    sub_1AD87D61C(255, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A0F0);
    }
  }
}

void sub_1AD87D438(uint64_t a1)
{
}

void sub_1AD87D458(uint64_t a1)
{
}

void sub_1AD87D478(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD87D4D4(uint64_t a1)
{
}

void sub_1AD87D4F4(uint64_t a1)
{
}

void sub_1AD87D514()
{
  if (!qword_1E9A4A118)
  {
    sub_1AD862B90(255);
    sub_1AD862C9C();
    unint64_t v0 = sub_1AD9DEFD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A118);
    }
  }
}

unint64_t sub_1AD87D594()
{
  unint64_t result = qword_1E9A49C98;
  if (!qword_1E9A49C98)
  {
    sub_1AD87E438(255, &qword_1E9A49C80, MEMORY[0x1E4F3EC78], MEMORY[0x1E4F3DF18]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49C98);
  }
  return result;
}

void sub_1AD87D61C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_1AD87F080(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = sub_1AD9DE6D0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD87D688(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD87D714()
{
  return sub_1AD87D688(&qword_1E9A4A140, (void (*)(uint64_t))sub_1AD87D2B8, (void (*)(void))sub_1AD87D75C, (void (*)(void))sub_1AD87DA54);
}

uint64_t sub_1AD87D75C()
{
  return sub_1AD87D688(&qword_1E9A4A148, (void (*)(uint64_t))sub_1AD87D338, (void (*)(void))sub_1AD87D7A4, (void (*)(void))sub_1AD87D9E4);
}

uint64_t sub_1AD87D7A4()
{
  return sub_1AD87D688(&qword_1E9A4A150, (void (*)(uint64_t))sub_1AD87D3B8, (void (*)(void))sub_1AD87D7EC, (void (*)(void))sub_1AD87D974);
}

uint64_t sub_1AD87D7EC()
{
  return sub_1AD87D854(&qword_1E9A4A158, sub_1AD87D438, (void (*)(void))sub_1AD87D820);
}

uint64_t sub_1AD87D820()
{
  return sub_1AD87D854(&qword_1E9A4A160, sub_1AD87D458, (void (*)(void))sub_1AD87D8D8);
}

uint64_t sub_1AD87D854(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD87D8D8()
{
  return sub_1AD87D854(&qword_1E9A4A168, sub_1AD87D4D4, (void (*)(void))sub_1AD87D90C);
}

uint64_t sub_1AD87D90C()
{
  return sub_1AD87D854(&qword_1E9A4A170, sub_1AD87D4F4, (void (*)(void))sub_1AD87D940);
}

uint64_t sub_1AD87D940()
{
  return sub_1AD87BF48(&qword_1E9A4A178, (void (*)(uint64_t))sub_1AD87D514);
}

unint64_t sub_1AD87D974()
{
  unint64_t result = qword_1E9A49D48;
  if (!qword_1E9A49D48)
  {
    sub_1AD87D61C(255, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49D48);
  }
  return result;
}

unint64_t sub_1AD87D9E4()
{
  unint64_t result = qword_1EB725C78;
  if (!qword_1EB725C78)
  {
    sub_1AD87D61C(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725C78);
  }
  return result;
}

unint64_t sub_1AD87DA54()
{
  unint64_t result = qword_1E9A4A180;
  if (!qword_1E9A4A180)
  {
    sub_1AD87D61C(255, (unint64_t *)&qword_1E9A4A120, &qword_1E9A4A128, MEMORY[0x1E4FBB550]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A180);
  }
  return result;
}

unint64_t sub_1AD87DAC4()
{
  unint64_t result = qword_1E9A4A188;
  if (!qword_1E9A4A188)
  {
    sub_1AD87F080(255, &qword_1E9A4A130, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3DF18]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A188);
  }
  return result;
}

void sub_1AD87DB40(uint64_t a1)
{
}

void sub_1AD87DB74(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_1AD9DDFC0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD87DBE8()
{
  if (!qword_1E9A4A198)
  {
    sub_1AD87DC44();
    unint64_t v0 = sub_1AD9DE450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A198);
    }
  }
}

unint64_t sub_1AD87DC44()
{
  unint64_t result = qword_1E9A4A1A0;
  if (!qword_1E9A4A1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A1A0);
  }
  return result;
}

void sub_1AD87DC98(uint64_t a1)
{
}

void sub_1AD87DCCC()
{
  if (!qword_1E9A4A1B0)
  {
    sub_1AD9DE020();
    sub_1AD87BF48(&qword_1E9A4A1B8, MEMORY[0x1E4F3CDB8]);
    unint64_t v0 = sub_1AD9DDD50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A1B0);
    }
  }
}

uint64_t sub_1AD87DD64()
{
  return sub_1AD87C4E8(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1AD87DD74@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD87C558(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_1AD87DD84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD87DDEC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD87DE90()
{
  return sub_1AD9DF060();
}

uint64_t sub_1AD87DF04()
{
  return sub_1AD87D688(&qword_1E9A4A1D0, sub_1AD87DB40, (void (*)(void))sub_1AD87DF4C, (void (*)(void))sub_1AD87DF80);
}

uint64_t sub_1AD87DF4C()
{
  return sub_1AD87BF48(&qword_1E9A4A1D8, (void (*)(uint64_t))sub_1AD87D184);
}

uint64_t sub_1AD87DF80()
{
  return sub_1AD87BF48(&qword_1E9A4A1E0, (void (*)(uint64_t))sub_1AD87DBE8);
}

uint64_t sub_1AD87DFB4()
{
  return sub_1AD87BF48(&qword_1E9A4A1E8, (void (*)(uint64_t))sub_1AD87DCCC);
}

void sub_1AD87DFE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v9 = objc_msgSend(a1, sel_viewWithTag_, 1);
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = objc_msgSend(a1, sel_contentView);
    objc_msgSend(v11, sel_bounds);
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;
    double v19 = v18;

    objc_msgSend(v10, sel_setFrame_, v13, v15, v17, v19);
    uint64_t v20 = self;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v10;
    *(void *)(v21 + 24) = a3;
    *(void *)(v21 + 32) = a4;
    *(unsigned char *)(v21 + 40) = a5 & 1;
    v24[4] = sub_1AD87EC64;
    v24[5] = v21;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 1107296256;
    id v24[2] = sub_1AD8D34D8;
    v24[3] = &block_descriptor_2;
    uint64_t v22 = _Block_copy(v24);
    swift_retain();
    swift_retain();
    id v23 = v10;
    swift_release();
    objc_msgSend(v20, sel_animateWithDuration_animations_, v22, 0.2);
    _Block_release(v22);
  }
}

id sub_1AD87E19C(void *a1)
{
  sub_1AD87F080(0, (unint64_t *)&qword_1E9A4A1F8, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3EE18]);
  MEMORY[0x1B3E6B160](&v4);
  double v2 = 0.2;
  if (!(_BYTE)v4) {
    double v2 = 0.0;
  }
  return objc_msgSend(a1, sel_setAlpha_, v2);
}

void sub_1AD87E230(void *a1, uint64_t a2)
{
  sub_1AD87DFE8(a1, a2, *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
}

uint64_t sub_1AD87E24C()
{
  return sub_1AD9DE3A0();
}

uint64_t sub_1AD87E290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD87EBC8();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t sub_1AD87E2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1AD87EBC8();
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void sub_1AD87E358()
{
}

void sub_1AD87E380(uint64_t a1@<X8>)
{
  sub_1AD87E570(*(void *)(v1 + 24));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBC860];
}

uint64_t sub_1AD87E3BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD87CD70(*(void *)(v1 + 24), a1);
}

uint64_t sub_1AD87E3E4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1AD9DE160();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD87E410()
{
  return sub_1AD9DE170();
}

void sub_1AD87E438(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD87E4A4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_1AD87E438(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1AD87E514(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_1AD87E438(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_1AD87E570(uint64_t a1)
{
  sub_1AD87E438(0, (unint64_t *)&unk_1E9A4ACC0, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v18 - v4;
  uint64_t v6 = type metadata accessor for Alarm();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider);
  if (!v11)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v12 = v11 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
  swift_beginAccess();
  sub_1AD87E4A4(v12, (uint64_t)v5, (unint64_t *)&unk_1E9A4ACC0, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, MEMORY[0x1E4FBB718]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    sub_1AD87E8D0((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Alarm);
    id v14 = objc_msgSend(self, sel_sharedInstance);
    if (v14)
    {
      double v15 = v14;
      double v16 = (void *)sub_1AD9DCBB0();
      id v17 = objc_msgSend(v15, sel_formatDateAsTimeStyle_, v16);

      if (v17)
      {
        sub_1AD9DF710();

        sub_1AD87DDEC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Alarm);
        return;
      }
      goto LABEL_11;
    }
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  sub_1AD87E514((uint64_t)v5, (unint64_t *)&unk_1E9A4ACC0, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, MEMORY[0x1E4FBB718]);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v13 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
}

uint64_t sub_1AD87E8D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for AlarmButtonBlur()
{
  swift_release();
  return swift_release();
}

uint64_t _s13SleepHealthUI15AlarmButtonBlurVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AlarmButtonBlur(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AlarmButtonBlur(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlarmButtonBlur(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlarmButtonBlur(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmButtonBlur()
{
  return &type metadata for AlarmButtonBlur;
}

uint64_t sub_1AD87EB1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD87EBBC()
{
  return MEMORY[0x1E4F3F158];
}

unint64_t sub_1AD87EBC8()
{
  unint64_t result = qword_1E9A4A1F0;
  if (!qword_1E9A4A1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A1F0);
  }
  return result;
}

uint64_t sub_1AD87EC1C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

id sub_1AD87EC64()
{
  return sub_1AD87E19C(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void sub_1AD87EC8C()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_init);
  objc_msgSend(v0, sel_setAutoresizingMask_, 18);
  id v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v1, sel_setAllowsHitTesting_, 0);

  objc_msgSend(v0, sel_setUserInteractionEnabled_, 0);
  sub_1AD87F080(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1AD9E5A40;
  id v3 = objc_msgSend(self, sel_effectWithBlurRadius_, 30.0);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(void *)(v2 + 32) = v3;
  id v4 = objc_msgSend(self, sel_blackColor);
  id v5 = objc_msgSend(self, sel_effectCompositingColor_withMode_alpha_, v4, 1010, 0.12);

  if (!v5)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(void *)(v2 + 40) = v5;
  uint64_t v6 = self;
  uint64_t v7 = (void *)sub_1AD9DF6D0();
  id v8 = objc_msgSend(v6, sel_kitImageNamed_, v7);

  if (v8)
  {
    uint64_t v9 = self;
    id v10 = objc_msgSend(v9, sel_colorEffectLuminanceMap_blendingAmount_, v8, 0.7);

    *(void *)(v2 + 48) = v10;
    *(void *)(v2 + 56) = objc_msgSend(v9, sel_colorEffectSaturate_, 2.8);
    *(void *)(v2 + 64) = objc_msgSend(v9, sel_colorEffectBrightness_, -0.13);
    sub_1AD9DF870();
    sub_1AD87F0CC();
    uint64_t v11 = (void *)sub_1AD9DF850();
    swift_bridgeObjectRelease();
    objc_msgSend(v0, sel_setBackgroundEffects_, v11);

    id v12 = objc_msgSend(v0, sel_contentView);
    objc_msgSend(v12, sel_bounds);
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    double v20 = v19;

    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_initWithFrame_, v14, v16, v18, v20);
    objc_msgSend(v21, sel_setAutoresizingMask_, 18);
    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.03125, 0.03125, 0.03125, 1.0);
    objc_msgSend(v21, sel_setBackgroundColor_, v22);

    objc_msgSend(v21, sel_setAlpha_, 0.0);
    objc_msgSend(v21, sel_setUserInteractionEnabled_, 0);
    objc_msgSend(v21, sel_setTag_, 1);
    id v23 = objc_msgSend(v0, sel_contentView);
    objc_msgSend(v23, sel_addSubview_, v21);

    return;
  }
LABEL_7:
  __break(1u);
}

void sub_1AD87F080(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1AD87F0CC()
{
  unint64_t result = qword_1E9A4A200;
  if (!qword_1E9A4A200)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A200);
  }
  return result;
}

uint64_t SleepActivityConfigurationSectionLayout.hash(into:)()
{
  return sub_1AD9E03B0();
}

BOOL static SleepActivityConfigurationSectionLayout.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepActivityConfigurationSectionLayout.hashValue.getter()
{
  return sub_1AD9E03E0();
}

unint64_t sub_1AD87F19C()
{
  unint64_t result = qword_1E9A4A208;
  if (!qword_1E9A4A208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A208);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SleepStage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SleepActivityConfigurationSectionLayout(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD87F34CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepActivityConfigurationSectionLayout()
{
  return &type metadata for SleepActivityConfigurationSectionLayout;
}

uint64_t sub_1AD87F384@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  unsigned int v6 = objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior], sel_isDeviceSupported);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v7 = (id)qword_1EB727930;
  uint64_t v33 = sub_1AD9DCA70();
  uint64_t v34 = v8;

  swift_bridgeObjectRelease();
  switch(v5)
  {
    case 1:
      sub_1AD87F8F8(0, &qword_1E9A4A210);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1AD9E3070;
      sub_1AD957D30((uint64_t)v38);
      long long v31 = v38[1];
      long long v32 = v38[0];
      uint64_t v15 = v39;
      char v16 = v40;
      sub_1AD87F8F8(0, &qword_1E9A4A218);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1AD9E3070;
      *(_OWORD *)(v14 + 32) = v32;
      *(_OWORD *)(v14 + 48) = v31;
      *(void *)(v14 + 64) = v15;
      *(unsigned char *)(v14 + 72) = v16;
      *(unsigned char *)(v14 + 73) = 0;
      goto LABEL_6;
    case 2:
      sub_1AD87F8F8(0, &qword_1E9A4A210);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1AD9E3070;
      sub_1AD87F8F8(0, &qword_1E9A4A218);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1AD9E3070;
      sub_1AD9C488C((uint64_t *)&v35);
      uint64_t v22 = *(void *)v36;
      *(_OWORD *)(v21 + 32) = v35;
      *(void *)(v21 + 48) = v22;
      *(_OWORD *)(v21 + 56) = *(_OWORD *)&v36[8];
      *(_WORD *)(v21 + 72) = 768;
      if (v6) {
        uint64_t v23 = 0xD000000000000036;
      }
      else {
        uint64_t v23 = 0xD000000000000029;
      }
      if (v6) {
        uint64_t v24 = 0x80000001AD9F0D30;
      }
      else {
        uint64_t v24 = 0x80000001AD9F0CD0;
      }
      if (v6) {
        char v25 = 0;
      }
      else {
        char v25 = 3;
      }
      uint64_t v26 = (uint64_t *)(v9 + 32);
      uint64_t v27 = v21;
      goto LABEL_38;
    case 3:
      sub_1AD87F8F8(0, &qword_1E9A4A210);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1AD9E3070;
      sub_1AD87F8F8(0, &qword_1E9A4A218);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1AD9E3070;
      *(void *)(v28 + 32) = a1;
      *(void *)(v28 + 40) = 3;
      *(void *)(v28 + 56) = 0;
      *(void *)(v28 + 64) = 0;
      *(_WORD *)(v28 + 72) = 1024;
      *(void *)(v28 + 48) = 0;
      uint64_t v29 = a1;
      if (v6) {
        uint64_t v23 = 0xD000000000000025;
      }
      else {
        uint64_t v23 = 0xD000000000000029;
      }
      if (v6) {
        uint64_t v24 = 0x80000001AD9F0D00;
      }
      else {
        uint64_t v24 = 0x80000001AD9F0CD0;
      }
      if (v6) {
        char v25 = 0;
      }
      else {
        char v25 = 3;
      }
      uint64_t v26 = (uint64_t *)(v9 + 32);
      goto LABEL_37;
    case 4:
      sub_1AD87F8F8(0, &qword_1E9A4A210);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1AD9E3070;
      sub_1AD87F8F8(0, &qword_1E9A4A218);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1AD9E3070;
      *(void *)(v28 + 32) = a1;
      *(void *)(v28 + 40) = 4;
      *(void *)(v28 + 56) = 0;
      *(void *)(v28 + 64) = 0;
      *(_WORD *)(v28 + 72) = 1024;
      *(void *)(v28 + 48) = 0;
      uint64_t v30 = a1;
      if (v6) {
        uint64_t v23 = 0xD000000000000025;
      }
      else {
        uint64_t v23 = 0xD000000000000029;
      }
      if (v6) {
        uint64_t v24 = 0x80000001AD9F0D00;
      }
      else {
        uint64_t v24 = 0x80000001AD9F0CD0;
      }
      if (v6) {
        char v25 = 0;
      }
      else {
        char v25 = 3;
      }
      uint64_t v26 = (uint64_t *)(v9 + 32);
LABEL_37:
      uint64_t v27 = v28;
LABEL_38:
      uint64_t result = sub_1AD8C0174(v27, v33, v34, v23, v24, v25, v26);
      break;
    default:
      sub_1AD87F8F8(0, &qword_1E9A4A210);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1AD9E3070;
      id v10 = (id)qword_1EB727930;
      uint64_t v11 = sub_1AD9DCA70();
      uint64_t v13 = v12;

      swift_bridgeObjectRelease();
      sub_1AD87F8F8(0, &qword_1E9A4A218);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1AD9E3070;
      *(_OWORD *)(v14 + 32) = xmmword_1AD9E5D40;
      *(void *)(v14 + 48) = v11;
      *(void *)(v14 + 56) = v13;
      *(void *)(v14 + 64) = 0;
      *(_WORD *)(v14 + 72) = 3;
LABEL_6:
      uint64_t result = sub_1AD8BFEA8(v14, v33, v34, 0, 0, (uint64_t *)&v35);
      uint64_t v18 = v37;
      long long v19 = *(_OWORD *)v36;
      long long v20 = *(_OWORD *)&v36[16];
      *(_OWORD *)(v9 + 32) = v35;
      *(_OWORD *)(v9 + 48) = v19;
      *(_OWORD *)(v9 + 64) = v20;
      *(void *)(v9 + 80) = v18;
      break;
  }
  *a2 = v9;
  return result;
}

void sub_1AD87F8F8(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1AD9E0290();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t type metadata accessor for ConfirmationOnboardingSection()
{
  uint64_t result = qword_1E9A4A220;
  if (!qword_1E9A4A220) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD87F98C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1AD87F9CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DCCB0();
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v62 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v60 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1AD9DD390();
  uint64_t v64 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v63 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v69 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v11 = (id *)(a1 + 40);
  swift_beginAccess();
  objc_msgSend(*(id *)(a1 + 40), sel_sleepDurationGoal);
  double v13 = v12;
  uint64_t v14 = 0;
  if (v12 > 0.0)
  {
    objc_msgSend(*v11, sel_sleepDurationGoal);
    uint64_t v14 = v15;
  }
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1AD9E53A0;
  *(void *)(v16 + 32) = sub_1AD9DF710();
  *(void *)(v16 + 40) = v17;
  *(void *)(v16 + 48) = 0x7065656C53;
  *(void *)(v16 + 56) = 0xE500000000000000;
  *(void *)(v16 + 64) = 0x696472616F626E4FLL;
  *(void *)(v16 + 72) = 0xEA0000000000676ELL;
  *(void *)&long long v66 = v16;
  sub_1AD86C2F8((uint64_t)&unk_1F0469EE8);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v18 = sub_1AD9DF690();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  uint64_t v67 = &type metadata for ConfirmationGoalItem;
  unint64_t v68 = sub_1AD881D10();
  uint64_t v21 = swift_allocObject();
  *(void *)&long long v66 = v21;
  *(void *)(v21 + 16) = v14;
  *(unsigned char *)(v21 + 24) = v13 <= 0.0;
  *(void *)(v21 + 32) = v18;
  *(void *)(v21 + 40) = v20;
  uint64_t v22 = v69;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v22 = sub_1AD99A828(0, v22[2] + 1, 1, v22);
    uint64_t v69 = v22;
  }
  unint64_t v24 = v22[2];
  unint64_t v23 = v22[3];
  if (v24 >= v23 >> 1) {
    uint64_t v69 = sub_1AD99A828((void *)(v23 > 1), v24 + 1, 1, v22);
  }
  char v25 = v67;
  uint64_t v26 = v68;
  uint64_t v27 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v66, (uint64_t)v67);
  uint64_t v28 = &v59;
  double v29 = MEMORY[0x1F4188790](v27, v27);
  long long v31 = (char *)&v59 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v32 + 16))(v31, v29);
  sub_1AD881D9C(v24, (uint64_t)v31, (uint64_t *)&v69, (uint64_t)v25, v26);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v66);
  uint64_t v33 = (long long *)objc_msgSend(*v11, sel_occurrences);
  sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
  uint64_t v34 = sub_1AD9DF860();

  *(void *)&long long v66 = v10;
  if ((unint64_t)v34 >> 62)
  {
    if (v34 < 0) {
      LOBYTE(v33) = v34;
    }
    else {
      LOBYTE(v33) = v34 & 0xF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    uint64_t v65 = a1;
    if (v35)
    {
LABEL_9:
      if (v35 < 1)
      {
        __break(1u);
        goto LABEL_50;
      }
      for (uint64_t i = 0; i != v35; ++i)
      {
        if ((v34 & 0xC000000000000001) != 0) {
          uint64_t v37 = (ValueMetadata *)MEMORY[0x1B3E6BFF0](i, v34);
        }
        else {
          uint64_t v37 = (ValueMetadata *)*(id *)(v34 + 8 * i + 32);
        }
        char v25 = v37;
        if ([(ValueMetadata *)v37 isSingleDayOverride])
        {
        }
        else
        {
          sub_1AD9E0080();
          uint64_t v28 = *(uint64_t **)(v66 + 16);
          sub_1AD9E00C0();
          sub_1AD9E00D0();
          sub_1AD9E0090();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = v66;
      a1 = v65;
      uint64_t v10 = MEMORY[0x1E4FBC860];
      if ((v66 & 0x8000000000000000) != 0) {
        goto LABEL_34;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v65 = a1;
    if (v35) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = MEMORY[0x1E4FBC860];
  if ((MEMORY[0x1E4FBC860] & 0x8000000000000000) != 0) {
    goto LABEL_34;
  }
LABEL_25:
  if ((v34 & 0x4000000000000000) != 0)
  {
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_1AD9E0190();
    swift_release();
    if (!v38) {
      goto LABEL_35;
    }
    goto LABEL_27;
  }
  uint64_t v38 = *(void *)(v34 + 16);
  if (!v38)
  {
LABEL_35:
    swift_release();
    uint64_t v33 = (long long *)MEMORY[0x1E4FBC860];
    goto LABEL_36;
  }
LABEL_27:
  *(void *)&long long v66 = v10;
  uint64_t v33 = &v66;
  sub_1AD9E00B0();
  if (v38 < 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    uint64_t v34 = (uint64_t)sub_1AD99A828(0, *(void *)(v34 + 16) + 1, 1, (void *)v34);
    goto LABEL_38;
  }
  uint64_t v39 = 0;
  do
  {
    if ((v34 & 0xC000000000000001) != 0) {
      MEMORY[0x1B3E6BFF0](v39, v34);
    }
    else {
      id v40 = *(id *)(v34 + 8 * v39 + 32);
    }
    ++v39;
    sub_1AD9E0080();
    sub_1AD9E00C0();
    sub_1AD9E00D0();
    sub_1AD9E0090();
  }
  while (v38 != v39);
  uint64_t v33 = (long long *)v66;
  swift_release();
LABEL_36:
  uint64_t v41 = sub_1AD880334((uint64_t)v33);
  swift_bridgeObjectRelease();
  sub_1AD86C5F4(v41);
  uint64_t v42 = (void *)swift_retain_n();
  LOBYTE(v33) = sub_1AD880430(v42, 0);
  char v43 = sub_1AD880430((void *)a1, 1);
  uint64_t v34 = (uint64_t)v69;
  char v25 = &type metadata for ConfirmationFeaturesItem;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
  LOBYTE(v28) = 1;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_51;
  }
LABEL_38:
  char v44 = v28 & ~(_BYTE)v33;
  unint64_t v46 = *(void *)(v34 + 16);
  unint64_t v45 = *(void *)(v34 + 24);
  if (v46 >= v45 >> 1) {
    uint64_t v34 = (uint64_t)sub_1AD99A828((void *)(v45 > 1), v46 + 1, 1, (void *)v34);
  }
  uint64_t v67 = v25;
  unint64_t v68 = sub_1AD881E8C();
  *(void *)&long long v66 = a1;
  BYTE8(v66) = 1;
  BYTE9(v66) = v44;
  *(void *)(v34 + 16) = v46 + 1;
  sub_1AD843F30(&v66, v34 + 40 * v46 + 32);
  uint64_t v69 = (void *)v34;
LABEL_41:
  char v47 = sub_1AD880430((void *)a1, 0);
  uint64_t v59 = v2;
  if (v47)
  {
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v34 = (uint64_t)sub_1AD99A828(0, *(void *)(v34 + 16) + 1, 1, (void *)v34);
    }
    unint64_t v49 = *(void *)(v34 + 16);
    unint64_t v48 = *(void *)(v34 + 24);
    if (v49 >= v48 >> 1) {
      uint64_t v34 = (uint64_t)sub_1AD99A828((void *)(v48 > 1), v49 + 1, 1, (void *)v34);
    }
    uint64_t v50 = v7;
    uint64_t v67 = v25;
    unint64_t v68 = sub_1AD881E8C();
    *(void *)&long long v66 = a1;
    WORD4(v66) = 256;
    *(void *)(v34 + 16) = v49 + 1;
    sub_1AD843F30(&v66, v34 + 40 * v49 + 32);
    uint64_t v69 = (void *)v34;
  }
  else
  {
    uint64_t v50 = v7;
  }
  swift_bridgeObjectRetain();
  unint64_t v51 = v60;
  sub_1AD9DCCA0();
  sub_1AD9DCC80();
  uint64_t v52 = v62;
  uint64_t v61 = *(void *)(v61 + 8);
  ((void (*)(char *, uint64_t))v61)(v51, v62);
  uint64_t v53 = v63;
  sub_1AD9DD380();
  sub_1AD881E34();
  uint64_t v54 = v64;
  unint64_t v55 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_1AD9E3070;
  (*(void (**)(unint64_t, char *, uint64_t))(v54 + 16))(v56 + v55, v53, v50);
  *(void *)&long long v66 = 0;
  *((void *)&v66 + 1) = 0xE000000000000000;
  sub_1AD9E0030();
  swift_bridgeObjectRelease();
  strcpy((char *)&v66, "MutableArray<");
  HIWORD(v66) = -4864;
  sub_1AD9DCCA0();
  sub_1AD9DCC80();
  ((void (*)(char *, uint64_t))v61)(v51, v52);
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD9DF790();
  uint64_t v57 = sub_1AD9DD3A0();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v50);
  swift_bridgeObjectRelease();
  return v57;
}

uint64_t sub_1AD880334(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    sub_1AD8A26B8(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v13 = v2;
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v7 = *(void *)(v2 + 24);
      id v8 = v5;
      if (v6 >= v7 >> 1)
      {
        sub_1AD8A26B8(v7 > 1, v6 + 1, 1);
        uint64_t v2 = v13;
      }
      uint64_t v11 = &type metadata for ConfirmationScheduleItem;
      unint64_t v12 = sub_1AD881EE0();
      *(void *)&long long v10 = v8;
      *(void *)(v2 + 16) = v6 + 1;
      sub_1AD843F30(&v10, v2 + 40 * v6 + 32);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1AD880430(void *a1, char a2)
{
  if (a2)
  {
    sub_1AD880D64((uint64_t)v46);
    int v24 = v47;
    char v25 = v48;
    uint64_t v26 = v49;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24 != 1)
    {
      sub_1AD881018((uint64_t)a1, (uint64_t)v42);
      char v27 = v42[32];
      uint64_t v28 = v43;
      double v29 = v44;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        sub_1AD8812A8((uint64_t)a1, (uint64_t)v46);
        int v30 = v47;
        long long v31 = v48;
        uint64_t v32 = v49;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v30 != 1
          || (uint64_t v33 = a1[14],
              uint64_t v34 = a1[15],
              __swift_project_boxed_opaque_existential_1Tm(a1 + 11, v33),
              ((*(uint64_t (**)(uint64_t, uint64_t))(v34 + 96))(v33, v34) & 1) == 0))
        {
          sub_1AD881534((uint64_t)a1, (uint64_t)v46);
          unsigned __int8 v35 = v47;
          __int16 v36 = v48;
          uint64_t v37 = v49;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v35 & 1) == 0)
          {
            sub_1AD881894((uint64_t)v46);
            int v39 = v47;
            id v40 = v48;
            uint64_t v41 = v49;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v39 == 1) {
              goto LABEL_8;
            }
LABEL_17:
            char v23 = 0;
            return v23 & 1;
          }
        }
      }
    }
LABEL_14:
    char v23 = 1;
    return v23 & 1;
  }
  sub_1AD880D64((uint64_t)v46);
  int v3 = v47;
  uint64_t v4 = v48;
  uint64_t v5 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3 != 1) {
    goto LABEL_14;
  }
  sub_1AD881018((uint64_t)a1, (uint64_t)v46);
  int v6 = v47;
  unint64_t v7 = v48;
  id v8 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6 != 1) {
    goto LABEL_14;
  }
  sub_1AD8812A8((uint64_t)a1, (uint64_t)v46);
  unsigned __int8 v9 = v47;
  long long v10 = v48;
  uint64_t v11 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    uint64_t v12 = a1[14];
    uint64_t v13 = a1[15];
    __swift_project_boxed_opaque_existential_1Tm(a1 + 11, v12);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13)) {
      goto LABEL_14;
    }
  }
  sub_1AD881534((uint64_t)a1, (uint64_t)v46);
  int v14 = v47;
  uint64_t v15 = v48;
  uint64_t v16 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 != 1) {
    goto LABEL_14;
  }
  sub_1AD881894((uint64_t)v46);
  unsigned __int8 v17 = v47;
  uint64_t v18 = v48;
  uint64_t v19 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17) {
    goto LABEL_17;
  }
LABEL_8:
  uint64_t v20 = a1 + 11;
  uint64_t v22 = a1[14];
  uint64_t v21 = a1[15];
  __swift_project_boxed_opaque_existential_1Tm(v20, v22);
  char v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 136))(v22, v21);
  return v23 & 1;
}

void sub_1AD880824()
{
}

uint64_t sub_1AD880854()
{
  sub_1AD9DD400();
  return swift_deallocClassInstance();
}

uint64_t sub_1AD880884()
{
  return type metadata accessor for ConfirmationOnboardingSection();
}

uint64_t sub_1AD88088C()
{
  return sub_1AD9DFB40();
}

uint64_t sub_1AD88099C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD8809E4()
{
  return sub_1AD9DD280();
}

uint64_t sub_1AD880A4C()
{
  return sub_1AD9DF730();
}

uint64_t sub_1AD880A80()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD880AB0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*sub_1AD880AE8())()
{
  return nullsub_1;
}

uint64_t sub_1AD880B08()
{
  return sub_1AD9DD280();
}

uint64_t sub_1AD880B70()
{
  objc_msgSend(*v0, sel_weekdays);
  id v1 = (id)HKSPIdentifierStringForWeekdays();
  uint64_t v2 = sub_1AD9DF710();

  return v2;
}

void sub_1AD880BCC(uint64_t a1@<X8>)
{
  int v3 = *v1;
  id v4 = v3;
  static ScheduleOccurrenceViewModel.ViewStyle.sleepOnboardingReceiptStyle.getter((uint64_t)v5);
  ScheduleOccurrenceViewModel.init(scheduleOccurrence:windDownTimeInterval:viewStyle:)(v3, 0, 1, v5, a1);
}

uint64_t sub_1AD880C1C()
{
  id v1 = *v0;
  sub_1AD9E03A0();
  id v2 = v1;
  sub_1AD9DFE10();

  return sub_1AD9E03E0();
}

void sub_1AD880C6C()
{
  id v1 = *v0;
  sub_1AD9DFE10();
}

uint64_t sub_1AD880CC4()
{
  id v1 = *v0;
  sub_1AD9E03A0();
  id v2 = v1;
  sub_1AD9DFE10();

  return sub_1AD9E03E0();
}

uint64_t sub_1AD880D10()
{
  return sub_1AD9DFE00() & 1;
}

uint64_t sub_1AD880D64@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1EB727930;
  uint64_t v3 = sub_1AD9DCA70();
  uint64_t v20 = v4;
  uint64_t v21 = v3;

  id v5 = (id)qword_1EB727930;
  uint64_t v6 = sub_1AD9DCA70();
  uint64_t v8 = v7;

  unsigned __int8 v9 = (void *)*MEMORY[0x1E4FB2998];
  long long v10 = self;
  id v11 = v9;
  id v12 = objc_msgSend(v10, sel_hk_sleepKeyColor, 0xE000000000000000);
  id v13 = objc_msgSend(v10, sel_tertiaryLabelColor);
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1AD9E53A0;
  *(void *)(v14 + 32) = sub_1AD9DF710();
  *(void *)(v14 + 40) = v15;
  *(void *)(v14 + 48) = 0x7065656C53;
  *(void *)(v14 + 56) = 0xE500000000000000;
  *(void *)(v14 + 64) = 0x696472616F626E4FLL;
  *(void *)(v14 + 72) = 0xEA0000000000676ELL;
  sub_1AD86C2F8((uint64_t)&unk_1F0469DA8);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v16 = sub_1AD9DF690();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t result = swift_arrayDestroy();
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v18;
  return result;
}

uint64_t sub_1AD881018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v4 = (id)qword_1EB727930;
  uint64_t v18 = sub_1AD9DCA70();
  uint64_t v6 = v5;

  swift_beginAccess();
  LOBYTE(v4) = objc_msgSend(*(id *)(a1 + 48), sel_scheduledSleepMode, 0xE000000000000000);
  uint64_t v7 = (void *)*MEMORY[0x1E4FB2990];
  uint64_t v8 = self;
  id v9 = v7;
  id v10 = objc_msgSend(v8, sel_hk_sleepKeyColor);
  id v11 = objc_msgSend(v8, sel_tertiaryLabelColor);
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1AD9E53A0;
  *(void *)(v12 + 32) = sub_1AD9DF710();
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = 0x7065656C53;
  *(void *)(v12 + 56) = 0xE500000000000000;
  *(void *)(v12 + 64) = 0x696472616F626E4FLL;
  *(void *)(v12 + 72) = 0xEA0000000000676ELL;
  sub_1AD86C2F8((uint64_t)&unk_1F0469DE8);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v14 = sub_1AD9DF690();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t result = swift_arrayDestroy();
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = (_BYTE)v4;
  *(_WORD *)(a2 + 40) = -32512;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v10;
  *(void *)(a2 + 72) = v11;
  *(unsigned char *)(a2 + 80) = 1;
  *(void *)(a2 + 88) = v14;
  *(void *)(a2 + 96) = v16;
  return result;
}

uint64_t sub_1AD8812A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v4 = (id)qword_1EB727930;
  uint64_t v18 = sub_1AD9DCA70();
  uint64_t v6 = v5;

  swift_beginAccess();
  LOBYTE(v4) = objc_msgSend(*(id *)(a1 + 48), sel_sleepTracking, 0xE000000000000000);
  uint64_t v7 = (void *)*MEMORY[0x1E4FB2990];
  uint64_t v8 = self;
  id v9 = v7;
  id v10 = objc_msgSend(v8, sel_hk_sleepKeyColor);
  id v11 = objc_msgSend(v8, sel_tertiaryLabelColor);
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1AD9E53A0;
  *(void *)(v12 + 32) = sub_1AD9DF710();
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = 0x7065656C53;
  *(void *)(v12 + 56) = 0xE500000000000000;
  *(void *)(v12 + 64) = 0x696472616F626E4FLL;
  *(void *)(v12 + 72) = 0xEA0000000000676ELL;
  sub_1AD86C2F8((uint64_t)&unk_1F0469E28);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v14 = sub_1AD9DF690();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t result = swift_arrayDestroy();
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = (_BYTE)v4;
  *(_WORD *)(a2 + 40) = -32766;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v10;
  *(void *)(a2 + 72) = v11;
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = v14;
  *(void *)(a2 + 96) = v16;
  return result;
}

uint64_t sub_1AD881534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = (id *)(a1 + 40);
  swift_beginAccess();
  objc_msgSend(*(id *)(a1 + 40), sel_windDownTime);
  double v6 = v5;
  uint64_t v7 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
  v34.receiver = v8;
  v34.super_class = v7;
  id v9 = objc_msgSendSuper2(&v34, sel_init);
  id v10 = objc_msgSend(v9, sel_stringFromTimeInterval_, v6);

  if (v10)
  {
    uint64_t v11 = sub_1AD9DF710();
    unint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v14 = (id)qword_1EB727930;
  uint64_t v15 = sub_1AD9DCA70();
  uint64_t v32 = v16;
  uint64_t v33 = v15;

  objc_msgSend(*v4, sel_windDownTime, 0xE000000000000000);
  if (v17 <= 0.0)
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = 0;
    unint64_t v13 = 0;
  }
  else
  {
    uint64_t v31 = v11;
  }
  objc_msgSend(*v4, sel_windDownTime);
  BOOL v19 = v18 > 0.0;
  uint64_t v20 = (void *)*MEMORY[0x1E4FB2998];
  uint64_t v21 = self;
  id v22 = v20;
  id v23 = objc_msgSend(v21, sel_hk_sleepKeyColor);
  id v24 = objc_msgSend(v21, sel_tertiaryLabelColor);
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1AD9E53A0;
  *(void *)(v25 + 32) = sub_1AD9DF710();
  *(void *)(v25 + 40) = v26;
  *(void *)(v25 + 48) = 0x7065656C53;
  *(void *)(v25 + 56) = 0xE500000000000000;
  *(void *)(v25 + 64) = 0x696472616F626E4FLL;
  *(void *)(v25 + 72) = 0xEA0000000000676ELL;
  sub_1AD86C2F8((uint64_t)&unk_1F0469E68);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v27 = sub_1AD9DF690();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t result = swift_arrayDestroy();
  *(void *)a2 = v33;
  *(void *)(a2 + 8) = v32;
  *(void *)(a2 + 16) = v31;
  *(void *)(a2 + 24) = v13;
  *(unsigned char *)(a2 + 32) = v19;
  *(_WORD *)(a2 + 40) = 0x8000;
  *(void *)(a2 + 48) = 0xC000000000000000;
  *(void *)(a2 + 56) = v22;
  *(void *)(a2 + 64) = v23;
  *(void *)(a2 + 72) = v24;
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = v27;
  *(void *)(a2 + 96) = v29;
  return result;
}

uint64_t sub_1AD881894@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1EB727930;
  uint64_t v3 = sub_1AD9DCA70();
  uint64_t v20 = v4;
  uint64_t v21 = v3;

  swift_bridgeObjectRelease();
  sub_1AD9E0030();
  swift_bridgeObjectRelease();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  id v5 = (id)qword_1EB727930;
  uint64_t v6 = sub_1AD9DCA70();
  uint64_t v8 = v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v9 = (void *)*MEMORY[0x1E4FB2998];
  id v10 = self;
  id v11 = v9;
  id v12 = objc_msgSend(v10, sel_hk_sleepKeyColor, 0xE000000000000000);
  id v13 = objc_msgSend(v10, sel_tertiaryLabelColor);
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1AD9E53A0;
  *(void *)(v14 + 32) = sub_1AD9DF710();
  *(void *)(v14 + 40) = v15;
  *(void *)(v14 + 48) = 0x7065656C53;
  *(void *)(v14 + 56) = 0xE500000000000000;
  *(void *)(v14 + 64) = 0x696472616F626E4FLL;
  *(void *)(v14 + 72) = 0xEA0000000000676ELL;
  sub_1AD86C2F8((uint64_t)&unk_1F0469EA8);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v16 = sub_1AD9DF690();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t result = swift_arrayDestroy();
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 40) = -32510;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v18;
  return result;
}

uint64_t sub_1AD881C08()
{
  return sub_1AD9DD280();
}

uint64_t sub_1AD881C70()
{
  sub_1AD8825E4();
  uint64_t v1 = sub_1AD9DF730();
  sub_1AD9DF790();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_1AD881D10()
{
  unint64_t result = qword_1E9A4A248;
  if (!qword_1E9A4A248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A248);
  }
  return result;
}

uint64_t sub_1AD881D64()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AD881D9C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_1AD843F30(&v12, v10 + 40 * a1 + 32);
}

void sub_1AD881E34()
{
  if (!qword_1E9A4A250)
  {
    sub_1AD9DD390();
    unint64_t v0 = sub_1AD9E0290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A250);
    }
  }
}

unint64_t sub_1AD881E8C()
{
  unint64_t result = qword_1E9A4A258;
  if (!qword_1E9A4A258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A258);
  }
  return result;
}

unint64_t sub_1AD881EE0()
{
  unint64_t result = qword_1E9A4A260;
  if (!qword_1E9A4A260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A260);
  }
  return result;
}

uint64_t sub_1AD881F34(uint64_t a1, char a2)
{
  if (a2)
  {
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v6 = (id)qword_1EB727930;
    uint64_t v7 = sub_1AD9DCA70();
  }
  else
  {
    uint64_t v3 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
    uint64_t v4 = (char *)objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
    v10.receiver = v4;
    v10.super_class = v3;
    id v5 = objc_msgSendSuper2(&v10, sel_init);
    id v6 = objc_msgSend(v5, sel_stringFromTimeInterval_, *(double *)&a1);

    if (!v6) {
      return 0;
    }
    uint64_t v7 = sub_1AD9DF710();
  }
  uint64_t v8 = v7;

  return v8;
}

uint64_t sub_1AD882078(char a1)
{
  if (a1)
  {
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
  }
  else if (qword_1EB724E38 != -1)
  {
    swift_once();
  }
  id v1 = (id)qword_1EB727930;
  uint64_t v2 = sub_1AD9DCA70();

  return v2;
}

ValueMetadata *type metadata accessor for ConfirmationScheduleItem()
{
  return &type metadata for ConfirmationScheduleItem;
}

uint64_t destroy for ConfirmationGoalItem()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConfirmationGoalItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationGoalItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ConfirmationGoalItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationGoalItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationGoalItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationGoalItem()
{
  return &type metadata for ConfirmationGoalItem;
}

uint64_t destroy for ConfirmationFeaturesItem()
{
  return swift_release();
}

uint64_t _s13SleepHealthUI24ConfirmationFeaturesItemVwCP_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationFeaturesItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ConfirmationFeaturesItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationFeaturesItem(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 10)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationFeaturesItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 10) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationFeaturesItem()
{
  return &type metadata for ConfirmationFeaturesItem;
}

unint64_t sub_1AD8824D4(uint64_t a1)
{
  unint64_t result = sub_1AD8824FC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AD8824FC()
{
  unint64_t result = qword_1E9A4A268;
  if (!qword_1E9A4A268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A268);
  }
  return result;
}

unint64_t sub_1AD882554()
{
  unint64_t result = qword_1E9A4A270;
  if (!qword_1E9A4A270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A270);
  }
  return result;
}

unint64_t sub_1AD8825A8()
{
  unint64_t result = qword_1E9A4A278;
  if (!qword_1E9A4A278)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A278);
  }
  return result;
}

unint64_t sub_1AD8825E4()
{
  unint64_t result = qword_1E9A4A280;
  if (!qword_1E9A4A280)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A280);
  }
  return result;
}

id sub_1AD882620()
{
  id result = objc_msgSend(self, sel_currentDevice);
  if (result)
  {
    id v1 = result;
    sub_1AD9D4024(MEMORY[0x1E4FBC860]);
    sub_1AD9DFE70();
    uint64_t v3 = v2;

    id result = (id)swift_bridgeObjectRelease();
    qword_1E9A4A288 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t OneWeekDiagram.results.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD882D94(v1, a1, (uint64_t (*)(void))type metadata accessor for OneWeekResults);
}

uint64_t OneWeekDiagram.init(results:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD882E58(a1, a2, (uint64_t (*)(void))type metadata accessor for OneWeekResults);
}

uint64_t OneWeekDiagram.body.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t v42 = type metadata accessor for WeekDiagram(0);
  uint64_t v4 = MEMORY[0x1F4188790](v42, v3);
  id v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v7);
  id v9 = (char *)&v41 - v8;
  sub_1AD882A54();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v1 + *(int *)(type metadata accessor for OneWeekResults() + 36);
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(void *)(*(void *)v15 + 16);
  if (!v17)
  {
    BOOL v20 = 0;
    goto LABEL_11;
  }
  if (v17 == 1)
  {
    uint64_t v18 = 0;
    double v19 = 0.0;
  }
  else
  {
    uint64_t v18 = v17 & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v21 = (double *)(v16 + 72);
    double v19 = 0.0;
    uint64_t v22 = v17 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      double v23 = *(v21 - 4);
      double v24 = *v21;
      v21 += 8;
      double v19 = v19 + v23 + v24;
      v22 -= 2;
    }
    while (v22);
    if (v17 == v18) {
      goto LABEL_10;
    }
  }
  uint64_t v25 = v17 - v18;
  uint64_t v26 = (double *)(v16 + 32 * v18 + 40);
  do
  {
    double v27 = *v26;
    v26 += 4;
    double v19 = v19 + v27;
    --v25;
  }
  while (v25);
LABEL_10:
  BOOL v20 = v19 > 0.0;
LABEL_11:
  *a1 = v20;
  sub_1AD882BA8();
  uint64_t v29 = *(int *)(v28 + 52);
  if (qword_1E9A48F50 != -1) {
    swift_once();
  }
  int v30 = (void *)qword_1E9A4C618;
  *(void *)uint64_t v14 = swift_getKeyPath();
  v14[8] = 0;
  id v31 = v30;
  uint64_t v32 = sub_1AD9DCA70();
  uint64_t v34 = v33;

  swift_bridgeObjectRelease();
  *((void *)v14 + 2) = v32;
  *((void *)v14 + 3) = v34;
  uint64_t v35 = *(int *)(v11 + 40);
  if (qword_1E9A48DC0 != -1) {
    swift_once();
  }
  __int16 v36 = &v14[v35];
  uint64_t v37 = (uint64_t)&a1[v29];
  uint64_t v38 = qword_1E9A4A288;
  sub_1AD882D94(v15, (uint64_t)v9, type metadata accessor for WeekResults);
  *(void *)&v9[*(int *)(v42 + 20)] = 59;
  sub_1AD882D94((uint64_t)v9, (uint64_t)v6, type metadata accessor for WeekDiagram);
  *(void *)__int16 v36 = v38;
  v36[8] = 0;
  sub_1AD882B40();
  sub_1AD882D94((uint64_t)v6, (uint64_t)&v36[*(int *)(v39 + 48)], type metadata accessor for WeekDiagram);
  sub_1AD882DFC((uint64_t)v9);
  sub_1AD882DFC((uint64_t)v6);
  return sub_1AD882E58((uint64_t)v14, v37, (uint64_t (*)(void))sub_1AD882A54);
}

void sub_1AD882A54()
{
  if (!qword_1E9A4A290)
  {
    sub_1AD882AE8();
    sub_1AD883C1C(&qword_1E9A4A2A8, (void (*)(uint64_t))sub_1AD882AE8);
    unint64_t v0 = type metadata accessor for DiagramHeader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A290);
    }
  }
}

void sub_1AD882AE8()
{
  if (!qword_1E9A4A298)
  {
    sub_1AD882B40();
    unint64_t v0 = sub_1AD9DF350();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A298);
    }
  }
}

void sub_1AD882B40()
{
  if (!qword_1E9A4A2A0)
  {
    type metadata accessor for WeekDiagram(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4A2A0);
    }
  }
}

void sub_1AD882BA8()
{
  if (!qword_1E9A4A2B0)
  {
    sub_1AD882A54();
    sub_1AD883C1C(&qword_1E9A4A2B8, (void (*)(uint64_t))sub_1AD882A54);
    unint64_t v0 = type metadata accessor for OptionalContentGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A2B0);
    }
  }
}

uint64_t sub_1AD882C5C@<X0>(unsigned char *a1@<X8>)
{
  sub_1AD883C64();
  uint64_t result = sub_1AD9DE270();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD882CAC@<X0>(unsigned char *a1@<X8>)
{
  sub_1AD883C64();
  uint64_t result = sub_1AD9DE270();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD882CFC()
{
  return sub_1AD9DE280();
}

uint64_t sub_1AD882D48()
{
  return sub_1AD9DE280();
}

uint64_t sub_1AD882D94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD882DFC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WeekDiagram(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD882E58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD882EC0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for OneWeekDiagram(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for OneWeekResults();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    id v6 = (int *)v4;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = *(int *)(v4 + 24);
    uint64_t v8 = (char *)a1 + v7;
    id v9 = (char *)a2 + v7;
    uint64_t v42 = sub_1AD9DCE40();
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
    swift_bridgeObjectRetain();
    v41(v8, v9, v42);
    uint64_t v10 = v6[7];
    uint64_t v11 = *(void **)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = (uint64_t)v11;
    uint64_t v12 = v6[8];
    uint64_t v13 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
    uint64_t v14 = v6[9];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v14);
    uint64_t v17 = *(uint64_t *)((char *)a2 + v14 + 8);
    *(void *)uint64_t v15 = v18;
    *((void *)v15 + 1) = v17;
    v15[16] = v16[16];
    double v19 = (int *)type metadata accessor for WeekResults(0);
    uint64_t v20 = v19[6];
    uint64_t v39 = &v16[v20];
    id v40 = &v15[v20];
    uint64_t v21 = sub_1AD9DC7C0();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
    id v23 = v11;
    id v24 = v13;
    swift_bridgeObjectRetain();
    v22(v40, v39, v21);
    *(void *)&v15[v19[7]] = *(void *)&v16[v19[7]];
    uint64_t v25 = v19[8];
    uint64_t v26 = &v15[v25];
    double v27 = &v16[v25];
    v26[8] = v27[8];
    *(void *)uint64_t v26 = *(void *)v27;
    *(void *)&v15[v19[9]] = *(void *)&v16[v19[9]];
    v41(&v15[v19[10]], &v16[v19[10]], v42);
    uint64_t v28 = v19[11];
    uint64_t v29 = *(void **)&v16[v28];
    *(void *)&v15[v28] = v29;
    uint64_t v30 = v19[12];
    id v31 = *(void **)&v16[v30];
    *(void *)&v15[v30] = v31;
    uint64_t v32 = v19[13];
    uint64_t v33 = *(void **)&v16[v32];
    *(void *)&v15[v32] = v33;
    id v34 = v29;
    id v35 = v31;
    id v36 = v33;
  }
  return a1;
}

void destroy for OneWeekDiagram(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = (int *)type metadata accessor for OneWeekResults();
  uint64_t v3 = a1 + v2[6];
  uint64_t v4 = sub_1AD9DCE40();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);

  uint64_t v6 = a1 + v2[9];
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v8 = v6 + v7[6];
  uint64_t v9 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  v5(v6 + v7[10], v4);

  uint64_t v10 = *(void **)(v6 + v7[13]);
}

uint64_t initializeWithCopy for OneWeekDiagram(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = (int *)type metadata accessor for OneWeekResults();
  uint64_t v5 = v4[6];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v39 = sub_1AD9DCE40();
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16);
  swift_bridgeObjectRetain();
  v38(v6, v7, v39);
  uint64_t v8 = v4[7];
  uint64_t v9 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v9;
  uint64_t v10 = v4[8];
  uint64_t v11 = *(void **)(a2 + v10);
  *(void *)(a1 + v10) = v11;
  uint64_t v12 = v4[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v16 = *(void *)(a2 + v12);
  uint64_t v15 = *(void *)(a2 + v12 + 8);
  *(void *)uint64_t v13 = v16;
  *(void *)(v13 + 8) = v15;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  uint64_t v17 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v18 = v17[6];
  uint64_t v36 = v14 + v18;
  uint64_t v37 = v13 + v18;
  uint64_t v19 = sub_1AD9DC7C0();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
  id v21 = v9;
  id v22 = v11;
  swift_bridgeObjectRetain();
  v20(v37, v36, v19);
  *(void *)(v13 + v17[7]) = *(void *)(v14 + v17[7]);
  uint64_t v23 = v17[8];
  uint64_t v24 = v13 + v23;
  uint64_t v25 = v14 + v23;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  *(void *)(v13 + v17[9]) = *(void *)(v14 + v17[9]);
  v38(v13 + v17[10], v14 + v17[10], v39);
  uint64_t v26 = v17[11];
  double v27 = *(void **)(v14 + v26);
  *(void *)(v13 + v26) = v27;
  uint64_t v28 = v17[12];
  uint64_t v29 = *(void **)(v14 + v28);
  *(void *)(v13 + v28) = v29;
  uint64_t v30 = v17[13];
  id v31 = *(void **)(v14 + v30);
  *(void *)(v13 + v30) = v31;
  id v32 = v27;
  id v33 = v29;
  id v34 = v31;
  return a1;
}

void *assignWithCopy for OneWeekDiagram(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for OneWeekResults();
  uint64_t v5 = v4[6];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1AD9DCE40();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24);
  v9(v6, v7, v8);
  uint64_t v10 = v4[7];
  uint64_t v11 = *(void **)((char *)a2 + v10);
  uint64_t v12 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = v11;
  id v13 = v11;

  uint64_t v14 = v4[8];
  uint64_t v15 = *(void **)((char *)a2 + v14);
  uint64_t v16 = *(void **)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = v15;
  id v17 = v15;

  uint64_t v18 = v4[9];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = *((void *)v20 + 1);
  v19[16] = v20[16];
  *((void *)v19 + 1) = v21;
  id v22 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v23 = v22[6];
  uint64_t v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = sub_1AD9DC7C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24))(v24, v25, v26);
  *(void *)&v19[v22[7]] = *(void *)&v20[v22[7]];
  uint64_t v27 = v22[8];
  uint64_t v28 = &v19[v27];
  uint64_t v29 = &v20[v27];
  char v30 = v29[8];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v30;
  *(void *)&v19[v22[9]] = *(void *)&v20[v22[9]];
  v9(&v19[v22[10]], &v20[v22[10]], v8);
  uint64_t v31 = v22[11];
  id v32 = *(void **)&v20[v31];
  id v33 = *(void **)&v19[v31];
  *(void *)&v19[v31] = v32;
  id v34 = v32;

  uint64_t v35 = v22[12];
  uint64_t v36 = *(void **)&v20[v35];
  uint64_t v37 = *(void **)&v19[v35];
  *(void *)&v19[v35] = v36;
  id v38 = v36;

  uint64_t v39 = v22[13];
  id v40 = *(void **)&v20[v39];
  uint64_t v41 = *(void **)&v19[v39];
  *(void *)&v19[v39] = v40;
  id v42 = v40;

  return a1;
}

uint64_t initializeWithTake for OneWeekDiagram(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = (int *)type metadata accessor for OneWeekResults();
  uint64_t v5 = v4[6];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_1AD9DCE40();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  *(void *)(a1 + v4[7]) = *(void *)(a2 + v4[7]);
  *(void *)(a1 + v4[8]) = *(void *)(a2 + v4[8]);
  uint64_t v10 = v4[9];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)(a2 + v10 + 8);
  *(void *)uint64_t v11 = *(void *)(a2 + v10);
  *(void *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(a2 + v10 + 16);
  uint64_t v14 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v15 = v14[6];
  uint64_t v16 = v11 + v15;
  uint64_t v17 = v12 + v15;
  uint64_t v18 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(void *)(v11 + v14[7]) = *(void *)(v12 + v14[7]);
  uint64_t v19 = v14[8];
  uint64_t v20 = v11 + v19;
  uint64_t v21 = v12 + v19;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(void *)(v11 + v14[9]) = *(void *)(v12 + v14[9]);
  v9(v11 + v14[10], v12 + v14[10], v8);
  *(void *)(v11 + v14[11]) = *(void *)(v12 + v14[11]);
  *(void *)(v11 + v14[12]) = *(void *)(v12 + v14[12]);
  *(void *)(v11 + v14[13]) = *(void *)(v12 + v14[13]);
  return a1;
}

uint64_t assignWithTake for OneWeekDiagram(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for OneWeekResults();
  uint64_t v5 = v4[6];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_1AD9DCE40();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 40);
  v9(v6, v7, v8);
  uint64_t v10 = v4[7];
  uint64_t v11 = *(void **)(a1 + v10);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);

  uint64_t v12 = v4[8];
  uint64_t v13 = *(void **)(a1 + v12);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);

  uint64_t v14 = v4[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_bridgeObjectRelease();
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  uint64_t v17 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v18 = v17[6];
  uint64_t v19 = v15 + v18;
  uint64_t v20 = v16 + v18;
  uint64_t v21 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  *(void *)(v15 + v17[7]) = *(void *)(v16 + v17[7]);
  uint64_t v22 = v17[8];
  uint64_t v23 = v15 + v22;
  uint64_t v24 = v16 + v22;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  *(void *)uint64_t v23 = *(void *)v24;
  *(void *)(v15 + v17[9]) = *(void *)(v16 + v17[9]);
  v9(v15 + v17[10], v16 + v17[10], v8);
  uint64_t v25 = v17[11];
  uint64_t v26 = *(void **)(v15 + v25);
  *(void *)(v15 + v25) = *(void *)(v16 + v25);

  uint64_t v27 = v17[12];
  uint64_t v28 = *(void **)(v15 + v27);
  *(void *)(v15 + v27) = *(void *)(v16 + v27);

  uint64_t v29 = v17[13];
  char v30 = *(void **)(v15 + v29);
  *(void *)(v15 + v29) = *(void *)(v16 + v29);

  return a1;
}

uint64_t getEnumTagSinglePayload for OneWeekDiagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD883A0C);
}

uint64_t sub_1AD883A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OneWeekResults();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OneWeekDiagram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD883A8C);
}

uint64_t sub_1AD883A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OneWeekResults();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for OneWeekDiagram()
{
  uint64_t result = qword_1E9A4A2C0;
  if (!qword_1E9A4A2C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD883B48()
{
  uint64_t result = type metadata accessor for OneWeekResults();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AD883BD4()
{
  return sub_1AD883C1C(&qword_1E9A4A2D0, (void (*)(uint64_t))sub_1AD882BA8);
}

uint64_t sub_1AD883C1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD883C64()
{
  unint64_t result = qword_1E9A4A2D8;
  if (!qword_1E9A4A2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A2D8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SleepDataUnavailable(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD883D84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepDataUnavailable()
{
  return &type metadata for SleepDataUnavailable;
}

uint64_t sub_1AD883DBC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD883DD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v73 = a1;
  sub_1AD8844D4();
  uint64_t v64 = *(void *)(v1 - 8);
  uint64_t v65 = v1;
  MEMORY[0x1F4188790](v1, v2);
  unsigned int v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD884794();
  uint64_t v62 = v5;
  uint64_t v7 = MEMORY[0x1F4188790](v5, v6);
  uint64_t v68 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  uint64_t v66 = (uint64_t)&v61 - v11;
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v67 = (char *)&v61 - v13;
  sub_1AD8848CC();
  uint64_t v16 = MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v72 = (uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16, v18);
  uint64_t v70 = (uint64_t)&v61 - v20;
  MEMORY[0x1F4188790](v19, v21);
  uint64_t v23 = (char *)&v61 - v22;
  sub_1AD884A3C();
  uint64_t v71 = v24;
  MEMORY[0x1F4188790](v24, v25);
  uint64_t v63 = (uint64_t *)((char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1AD884B78();
  MEMORY[0x1F4188790](v27 - 8, v28);
  uint64_t v69 = (char *)&v61 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v30 = (id)qword_1EB727930;
  uint64_t v31 = sub_1AD9DCA70();
  uint64_t v33 = v32;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = sub_1AD9DE990();
  uint64_t v36 = swift_getKeyPath();
  uint64_t v74 = v31;
  uint64_t v75 = v33;
  char v76 = 0;
  uint64_t v77 = MEMORY[0x1E4FBC860];
  uint64_t v78 = KeyPath;
  char v79 = 1;
  uint64_t v80 = v36;
  uint64_t v81 = v35;
  sub_1AD9DE8B0();
  sub_1AD88459C();
  sub_1AD884EC0(&qword_1E9A4A2F8, (void (*)(uint64_t))sub_1AD88459C, (void (*)(void))sub_1AD8846A0, (void (*)(void))sub_1AD87D974);
  sub_1AD9DEBF0();
  sub_1AD861548(v31, v33, 0);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v37 = sub_1AD9DEF10();
  uint64_t v38 = swift_getKeyPath();
  uint64_t v40 = v64;
  uint64_t v39 = v65;
  uint64_t v41 = (uint64_t)v67;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v67, v4, v65);
  id v42 = (uint64_t *)(v41 + *(int *)(v62 + 36));
  *id v42 = v38;
  v42[1] = v37;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v39);
  *(void *)uint64_t v23 = sub_1AD9DE2B0();
  *((void *)v23 + 1) = 0;
  v23[16] = 0;
  sub_1AD884C98(0, &qword_1E9A4A358, sub_1AD884960);
  char v44 = &v23[*(int *)(v43 + 44)];
  uint64_t v45 = v66;
  sub_1AD884D04(v41, v66, (uint64_t (*)(void))sub_1AD884794);
  uint64_t v46 = v68;
  sub_1AD884D04(v45, v68, (uint64_t (*)(void))sub_1AD884794);
  *(void *)char v44 = 0;
  v44[8] = 0;
  sub_1AD8849D4(0);
  uint64_t v48 = v47;
  sub_1AD884D04(v46, (uint64_t)&v44[*(int *)(v47 + 48)], (uint64_t (*)(void))sub_1AD884794);
  unint64_t v49 = &v44[*(int *)(v48 + 64)];
  *(void *)unint64_t v49 = 0;
  v49[8] = 0;
  sub_1AD884D6C(v45, (uint64_t (*)(void))sub_1AD884794);
  sub_1AD884D6C(v46, (uint64_t (*)(void))sub_1AD884794);
  sub_1AD884D6C(v41, (uint64_t (*)(void))sub_1AD884794);
  uint64_t v50 = sub_1AD9DE330();
  uint64_t v51 = (uint64_t)v63;
  *uint64_t v63 = v50;
  *(void *)(v51 + 8) = 0;
  *(unsigned char *)(v51 + 16) = 0;
  sub_1AD884C98(0, &qword_1E9A4A360, sub_1AD884AD0);
  uint64_t v53 = v51 + *(int *)(v52 + 44);
  uint64_t v54 = v70;
  sub_1AD884D04((uint64_t)v23, v70, (uint64_t (*)(void))sub_1AD8848CC);
  uint64_t v55 = v72;
  sub_1AD884D04(v54, v72, (uint64_t (*)(void))sub_1AD8848CC);
  *(void *)uint64_t v53 = 0;
  *(unsigned char *)(v53 + 8) = 0;
  sub_1AD884AF0(0);
  uint64_t v57 = v56;
  sub_1AD884D04(v55, v53 + *(int *)(v56 + 48), (uint64_t (*)(void))sub_1AD8848CC);
  uint64_t v58 = v53 + *(int *)(v57 + 64);
  *(void *)uint64_t v58 = 0;
  *(unsigned char *)(v58 + 8) = 0;
  sub_1AD884D6C(v54, (uint64_t (*)(void))sub_1AD8848CC);
  sub_1AD884D6C(v55, (uint64_t (*)(void))sub_1AD8848CC);
  sub_1AD884D6C((uint64_t)v23, (uint64_t (*)(void))sub_1AD8848CC);
  sub_1AD884DCC();
  uint64_t v59 = (uint64_t)v69;
  sub_1AD9DED30();
  sub_1AD884D6C(v51, (uint64_t (*)(void))sub_1AD884A3C);
  return sub_1AD884E00(v59, v73);
}

uint64_t sub_1AD8844CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD883DD8(a1);
}

void sub_1AD8844D4()
{
  if (!qword_1E9A4A2E0)
  {
    sub_1AD88459C();
    sub_1AD884EC0(&qword_1E9A4A2F8, (void (*)(uint64_t))sub_1AD88459C, (void (*)(void))sub_1AD8846A0, (void (*)(void))sub_1AD87D974);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4A2E0);
    }
  }
}

void sub_1AD88459C()
{
  if (!qword_1E9A4A2E8)
  {
    sub_1AD88461C();
    sub_1AD884814(255, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A2E8);
    }
  }
}

void sub_1AD88461C()
{
  if (!qword_1E9A4A2F0)
  {
    sub_1AD884880(255, &qword_1EB725368, MEMORY[0x1E4F3C870], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A2F0);
    }
  }
}

unint64_t sub_1AD8846A0()
{
  unint64_t result = qword_1E9A4A300;
  if (!qword_1E9A4A300)
  {
    sub_1AD88461C();
    sub_1AD884718();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A300);
  }
  return result;
}

unint64_t sub_1AD884718()
{
  unint64_t result = qword_1EB725360;
  if (!qword_1EB725360)
  {
    sub_1AD884880(255, &qword_1EB725368, MEMORY[0x1E4F3C870], MEMORY[0x1E4F3DF18]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB725360);
  }
  return result;
}

void sub_1AD884794()
{
  if (!qword_1E9A4A308)
  {
    sub_1AD8844D4();
    sub_1AD884814(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A308);
    }
  }
}

void sub_1AD884814(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_1AD884880(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = sub_1AD9DE6D0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD884880(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD8848CC()
{
  if (!qword_1E9A4A310)
  {
    sub_1AD884960(255);
    sub_1AD8849F4(&qword_1E9A4A328, sub_1AD884960);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A310);
    }
  }
}

void sub_1AD884960(uint64_t a1)
{
}

void sub_1AD884980(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DF350();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD8849D4(uint64_t a1)
{
}

uint64_t sub_1AD8849F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD884A3C()
{
  if (!qword_1E9A4A330)
  {
    sub_1AD884AD0(255);
    sub_1AD8849F4(&qword_1E9A4A348, sub_1AD884AD0);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A330);
    }
  }
}

void sub_1AD884AD0(uint64_t a1)
{
}

void sub_1AD884AF0(uint64_t a1)
{
}

void sub_1AD884B10(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5) {
      atomic_store(TupleTypeMetadata3, a2);
    }
  }
}

void sub_1AD884B78()
{
  if (!qword_1E9A4A350)
  {
    sub_1AD884A3C();
    sub_1AD9DE6E0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A350);
    }
  }
}

uint64_t sub_1AD884BE0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1AD9DE1A0();
  *a1 = result;
  return result;
}

uint64_t sub_1AD884C0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1AD9DE1A0();
  *a1 = result;
  return result;
}

uint64_t sub_1AD884C38()
{
  return sub_1AD9DE1B0();
}

uint64_t sub_1AD884C60()
{
  return sub_1AD9DE1B0();
}

void sub_1AD884C98(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDEA0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD884D04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD884D6C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD884DCC()
{
  return sub_1AD8849F4(&qword_1E9A4A368, (void (*)(uint64_t))sub_1AD884A3C);
}

uint64_t sub_1AD884E00(uint64_t a1, uint64_t a2)
{
  sub_1AD884B78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD884E64()
{
  return sub_1AD884EC0(&qword_1E9A4A370, (void (*)(uint64_t))sub_1AD884B78, (void (*)(void))sub_1AD884DCC, (void (*)(void))sub_1AD87BF14);
}

uint64_t sub_1AD884EC0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1AD884F4C()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B0B8]), sel_init);
  uint64_t v1 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v0, sel_setSourceBundleIdentifier_, v1);

  id result = objc_msgSend(v0, sel_resume);
  qword_1E9A5A6B0 = (uint64_t)v0;
  return result;
}

uint64_t static String.sleepAccessibilityIdentifier(_:)()
{
  strcpy((char *)v1, "UIA.NanoSleep.");
  sub_1AD9DF790();
  return v1[0];
}

uint64_t static String.healthAccessibilityIdentifier(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1AD88550C(a1, a2, 0x7065656C53, 0xE500000000000000);
}

uint64_t static String.healthAccessibilityIdentifierWithoutBase(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1AD8852D0(a1, a2, 0x7065656C53, 0xE500000000000000);
}

SleepHealthUI::SleepAccessibilityCategory_optional __swiftcall SleepAccessibilityCategory.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1AD9E0210();
  result.value = swift_bridgeObjectRelease();
  char v5 = 9;
  if (v3 < 9) {
    char v5 = v3;
  }
  char *v2 = v5;
  return result;
}

unint64_t SleepAccessibilityCategory.rawValue.getter()
{
  unint64_t result = 0x696472616F626E4FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x736E6F6974704FLL;
      break;
    case 2:
      unint64_t result = 0x656C756465686353;
      break;
    case 3:
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x6F6F527065656C53;
      break;
    case 5:
      unint64_t result = 0x746567646957;
      break;
    case 6:
      unint64_t result = 0x73676E6974746553;
      break;
    case 8:
      unint64_t result = 0xD000000000000021;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1AD8851D8(unsigned __int8 *a1, char *a2)
{
  return sub_1AD902360(*a1, *a2);
}

uint64_t sub_1AD8851E4()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD88522C()
{
  return sub_1AD9936E8();
}

uint64_t sub_1AD885234()
{
  return sub_1AD9E03E0();
}

SleepHealthUI::SleepAccessibilityCategory_optional sub_1AD885278(Swift::String *a1)
{
  return SleepAccessibilityCategory.init(rawValue:)(*a1);
}

unint64_t sub_1AD885284@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SleepAccessibilityCategory.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t static String.sleepAccessibilityIdentifierWithCategory(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1AD8852D0(a1, a2, 0x6F6E614E2E414955, 0xED00007065656C53);
}

uint64_t sub_1AD8852D0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1AD9E3080;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  unint64_t v8 = 0xEA0000000000676ELL;
  unint64_t v9 = 0x696472616F626E4FLL;
  switch(v6)
  {
    case 1:
      unint64_t v8 = 0xE700000000000000;
      unint64_t v9 = 0x736E6F6974704FLL;
      break;
    case 2:
      unint64_t v8 = 0xEE00726F74696445;
      unint64_t v9 = 0x656C756465686353;
      break;
    case 3:
      uint64_t v10 = "ScheduleOccurrence";
      goto LABEL_9;
    case 4:
      unint64_t v8 = 0xE90000000000006DLL;
      unint64_t v9 = 0x6F6F527065656C53;
      break;
    case 5:
      unint64_t v8 = 0xE600000000000000;
      unint64_t v9 = 0x746567646957;
      break;
    case 6:
      unint64_t v8 = 0xE800000000000000;
      unint64_t v9 = 0x73676E6974746553;
      break;
    case 7:
      uint64_t v10 = "NotificationDetail";
LABEL_9:
      unint64_t v8 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      unint64_t v9 = 0xD000000000000012;
      break;
    case 8:
      unint64_t v9 = 0xD000000000000021;
      unint64_t v8 = 0x80000001AD9EF760;
      break;
    default:
      break;
  }
  *(void *)(v7 + 48) = v9;
  *(void *)(v7 + 56) = v8;
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_1AD86C2F8(v11);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v12 = sub_1AD9DF690();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t static String.healthSleepApneaAccessibilityIdentifier(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1AD88550C(a1, a2, 0x6E70417065656C53, 0xEA00000000006165);
}

uint64_t sub_1AD88550C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1AD9E53A0;
  *(void *)(v7 + 32) = sub_1AD9DF710();
  *(void *)(v7 + 40) = v8;
  *(void *)(v7 + 48) = a3;
  *(void *)(v7 + 56) = a4;
  unint64_t v9 = 0xEA0000000000676ELL;
  unint64_t v10 = 0x696472616F626E4FLL;
  switch(v6)
  {
    case 1:
      unint64_t v9 = 0xE700000000000000;
      unint64_t v10 = 0x736E6F6974704FLL;
      break;
    case 2:
      unint64_t v9 = 0xEE00726F74696445;
      unint64_t v10 = 0x656C756465686353;
      break;
    case 3:
      uint64_t v11 = "ScheduleOccurrence";
      goto LABEL_9;
    case 4:
      unint64_t v9 = 0xE90000000000006DLL;
      unint64_t v10 = 0x6F6F527065656C53;
      break;
    case 5:
      unint64_t v9 = 0xE600000000000000;
      unint64_t v10 = 0x746567646957;
      break;
    case 6:
      unint64_t v9 = 0xE800000000000000;
      unint64_t v10 = 0x73676E6974746553;
      break;
    case 7:
      uint64_t v11 = "NotificationDetail";
LABEL_9:
      unint64_t v9 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      unint64_t v10 = 0xD000000000000012;
      break;
    case 8:
      unint64_t v10 = 0xD000000000000021;
      unint64_t v9 = 0x80000001AD9EF760;
      break;
    default:
      break;
  }
  *(void *)(v7 + 64) = v10;
  *(void *)(v7 + 72) = v9;
  uint64_t v12 = swift_bridgeObjectRetain();
  sub_1AD86C2F8(v12);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v13 = sub_1AD9DF690();
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t sub_1AD885750()
{
  unint64_t result = qword_1E9A4A378;
  if (!qword_1E9A4A378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A378);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SleepAccessibilityCategory(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SleepAccessibilityCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD885900);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepAccessibilityCategory()
{
  return &type metadata for SleepAccessibilityCategory;
}

id SleepTableWelcomeController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7)
{
  v7[OBJC_IVAR____TtC13SleepHealthUI27SleepTableWelcomeController_hasSystemMargins] = a7;
  uint64_t v11 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    uint64_t v12 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  v23.receiver = v7;
  v23.super_class = (Class)type metadata accessor for SleepTableWelcomeController();
  id v13 = objc_msgSendSuper2(&v23, sel_initWithTitle_detailText_icon_adoptTableViewScrollView_, v11, v12, a5, 1);

  id v14 = objc_allocWithZone(MEMORY[0x1E4FB1D00]);
  id v15 = v13;
  id v16 = objc_msgSend(v14, sel_initWithFrame_style_, a6, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v15, sel_setTableView_, v16);

  id result = objc_msgSend(v15, sel_tableView);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v18 = result;
  id v19 = objc_msgSend(self, sel_systemBackgroundColor);
  objc_msgSend(v18, sel_setBackgroundColor_, v19);

  id result = objc_msgSend(v15, sel_tableView);
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v20 = result;
  objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id result = objc_msgSend(v15, sel_tableView);
  if (result)
  {
    uint64_t v21 = result;
    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_initWithFrame_, 0.0, 0.0, 0.0, 2.22507386e-308);
    objc_msgSend(v21, sel_setTableHeaderView_, v22);

    return v15;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SleepTableWelcomeController()
{
  return self;
}

void sub_1AD885B90()
{
  id v1 = objc_msgSend(v0, sel_navigationController);
  if (!v1) {
    return;
  }
  int v2 = v1;
  id v3 = objc_msgSend(v1, sel_view);

  if (!v3)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v3, sel_directionalLayoutMargins);
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;

  if (*((unsigned char *)v0 + OBJC_IVAR____TtC13SleepHealthUI27SleepTableWelcomeController_hasSystemMargins) != 1) {
    return;
  }
  id v12 = objc_msgSend(v0, sel_tableView);
  if (!v12) {
    goto LABEL_21;
  }
  id v13 = v12;
  objc_msgSend(v12, sel_directionalLayoutMargins);
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;

  if (v15 != v5 || v17 != v7 || v19 != v9 || v21 != v11)
  {
    id v25 = objc_msgSend(v0, sel_headerView);
    objc_msgSend(v25, sel_setDirectionalLayoutMargins_, v5, v7, v9, v11);

    id v26 = objc_msgSend(v0, sel_tableView);
    if (v26)
    {
      id v27 = v26;
      objc_msgSend(v26, sel_setDirectionalLayoutMargins_, v5, v7, v9, v11);

      return;
    }
LABEL_22:
    __break(1u);
  }
}

id SleepTableWelcomeController.__allocating_init(title:detailText:icon:tableViewStyle:hasSystemMargins:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7)
{
  id v15 = objc_allocWithZone(v7);
  return SleepTableWelcomeController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)(a1, a2, a3, a4, a5, a6, a7);
}

id SleepTableWelcomeController.__allocating_init(title:detailText:symbolName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v9 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    double v10 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    double v11 = 0;
    goto LABEL_6;
  }
  double v10 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  double v11 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
LABEL_6:
  id v12 = objc_msgSend(objc_allocWithZone(v6), sel_initWithTitle_detailText_symbolName_, v9, v10, v11);

  return v12;
}

void SleepTableWelcomeController.init(title:detailText:symbolName:)()
{
}

id SleepTableWelcomeController.__allocating_init(title:detailText:icon:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  double v6 = v5;
  double v9 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    double v10 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    double v10 = 0;
  }
  id v11 = objc_msgSend(objc_allocWithZone(v6), sel_initWithTitle_detailText_icon_, v9, v10, a5);

  return v11;
}

void SleepTableWelcomeController.init(title:detailText:icon:)()
{
}

id SleepTableWelcomeController.__allocating_init(title:detailText:symbolName:adoptTableViewScrollView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  double v8 = v7;
  id v12 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    id v13 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    double v14 = 0;
    goto LABEL_6;
  }
  id v13 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  double v14 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
LABEL_6:
  id v15 = objc_msgSend(objc_allocWithZone(v8), sel_initWithTitle_detailText_symbolName_adoptTableViewScrollView_, v12, v13, v14, a7 & 1);

  return v15;
}

void SleepTableWelcomeController.init(title:detailText:symbolName:adoptTableViewScrollView:)()
{
}

id SleepTableWelcomeController.__allocating_init(title:detailText:icon:adoptTableViewScrollView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  double v7 = v6;
  id v11 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    id v12 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v12 = 0;
  }
  id v13 = objc_msgSend(objc_allocWithZone(v7), sel_initWithTitle_detailText_icon_adoptTableViewScrollView_, v11, v12, a5, a6 & 1);

  return v13;
}

void SleepTableWelcomeController.init(title:detailText:icon:adoptTableViewScrollView:)()
{
}

id SleepTableWelcomeController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepTableWelcomeController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t dispatch thunk of TableViewAnimating.isAnimating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for SleepTableWelcomeController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepTableWelcomeController);
}

uint64_t dispatch thunk of SleepTableWelcomeController.__allocating_init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

id sub_1AD886384()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell____lazy_storage___timePicker;
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell____lazy_storage___timePicker);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell____lazy_storage___timePicker);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = sub_1AD9D5428();
    double v7 = v6;
    double v9 = v8;
    uint64_t v10 = v5;
    char v12 = v11 & 1;
    id v13 = objc_allocWithZone((Class)type metadata accessor for TimeIntervalPickerView());
    id v14 = sub_1AD900FF0(v10, v12, v7, v9);
    id v15 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v14;
    id v3 = v14;

    objc_super v2 = 0;
  }
  id v16 = v2;
  return v3;
}

uint64_t sub_1AD8865C8()
{
  return 0;
}

void sub_1AD88669C(void *a1, uint64_t a2, const char **a3)
{
  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for TimePickerCollectionViewCell();
  uint64_t v4 = *a3;
  id v5 = v6.receiver;
  objc_msgSendSuper2(&v6, v4);
  sub_1AD886B74();
}

id sub_1AD8866F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimePickerCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TimePickerCollectionViewCell()
{
  return self;
}

uint64_t sub_1AD886794@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell_item;
  swift_beginAccess();
  return sub_1AD886B10(v3, a1);
}

uint64_t sub_1AD8867E8(uint64_t a1)
{
  uint64_t v3 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell_item;
  swift_beginAccess();
  sub_1AD8869F8(a1, v3);
  uint64_t v4 = swift_endAccess();
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90))(v4);
  return sub_1AD886AB4(a1);
}

uint64_t (*sub_1AD886888(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1AD8868E8;
}

uint64_t sub_1AD8868E8(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(a1 + 24)) + 0x90))(result);
  }
  return result;
}

uint64_t sub_1AD88694C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1AD8869B4(&qword_1E9A4A3A8);
  uint64_t result = sub_1AD8869B4(&qword_1E9A4A3B0);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AD8869B4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TimePickerCollectionViewCell();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD8869F8(uint64_t a1, uint64_t a2)
{
  sub_1AD886A5C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_1AD886A5C()
{
  if (!qword_1E9A4A3B8)
  {
    sub_1AD86E54C();
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A3B8);
    }
  }
}

uint64_t sub_1AD886AB4(uint64_t a1)
{
  sub_1AD886A5C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD886B10(uint64_t a1, uint64_t a2)
{
  sub_1AD886A5C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1AD886B74()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AD9DD270();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  double v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v15 - v9;
  id v11 = objc_msgSend(v0, sel_viewController);
  if (v11)
  {
    char v12 = v11;
    sub_1AD9DFC60();

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v7, v2);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v10, *MEMORY[0x1E4F66250], v2);
  }
  id v13 = (void *)sub_1AD9DD260();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  objc_msgSend(v1, sel_setBackgroundColor_, v13);
  id v14 = objc_msgSend(v1, sel_selectedBackgroundView);
  objc_msgSend(v14, sel_setBackgroundColor_, v13);
}

unint64_t sub_1AD886D20()
{
  unint64_t result = qword_1E9A4A3C8;
  if (!qword_1E9A4A3C8)
  {
    type metadata accessor for TimePickerCollectionViewCell();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A3C8);
  }
  return result;
}

uint64_t sub_1AD886D58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = (int *)type metadata accessor for WeekResults(0);
    uint64_t v9 = v8[6];
    uint64_t v10 = v7 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_1AD9DC7C0();
    id v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    *(void *)(v7 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
    uint64_t v14 = v8[8];
    uint64_t v15 = v7 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
    *(void *)uint64_t v15 = *(void *)v16;
    *(void *)(v7 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
    uint64_t v17 = v8[10];
    uint64_t v18 = v7 + v17;
    uint64_t v19 = (uint64_t)a2 + v17;
    uint64_t v20 = sub_1AD9DCE40();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = v8[11];
    id v22 = *(void **)((char *)a2 + v21);
    *(void *)(v7 + v21) = v22;
    uint64_t v23 = v8[12];
    uint64_t v24 = *(void **)((char *)a2 + v23);
    *(void *)(v7 + v23) = v24;
    uint64_t v25 = v8[13];
    id v26 = *(void **)((char *)a2 + v25);
    *(void *)(v7 + v25) = v26;
    *(void *)(v7 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    id v27 = v22;
    id v28 = v24;
    id v29 = v26;
  }
  return v7;
}

uint64_t sub_1AD886F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1AD9DC7C0();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  uint64_t v13 = v7[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  uint64_t v16 = v7[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = v7[11];
  uint64_t v21 = *(void **)(a2 + v20);
  *(void *)(a1 + v20) = v21;
  uint64_t v22 = v7[12];
  uint64_t v23 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v23;
  uint64_t v24 = v7[13];
  uint64_t v25 = *(void **)(a2 + v24);
  *(void *)(a1 + v24) = v25;
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  id v26 = v21;
  id v27 = v23;
  id v28 = v25;
  return a1;
}

uint64_t sub_1AD887098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  uint64_t v12 = v7[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  char v15 = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = v15;
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  uint64_t v16 = v7[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = v7[11];
  uint64_t v21 = *(void **)(a2 + v20);
  uint64_t v22 = *(void **)(a1 + v20);
  *(void *)(a1 + v20) = v21;
  id v23 = v21;

  uint64_t v24 = v7[12];
  uint64_t v25 = *(void **)(a2 + v24);
  id v26 = *(void **)(a1 + v24);
  *(void *)(a1 + v24) = v25;
  id v27 = v25;

  uint64_t v28 = v7[13];
  id v29 = *(void **)(a2 + v28);
  id v30 = *(void **)(a1 + v28);
  *(void *)(a1 + v28) = v29;
  id v31 = v29;

  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1AD887220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  uint64_t v12 = v7[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  uint64_t v15 = v7[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1AD88736C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v7 = v6[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
  uint64_t v11 = v6[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
  uint64_t v14 = v6[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = v6[11];
  uint64_t v19 = *(void **)(a1 + v18);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);

  uint64_t v20 = v6[12];
  uint64_t v21 = *(void **)(a1 + v20);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);

  uint64_t v22 = v6[13];
  id v23 = *(void **)(a1 + v22);
  *(void *)(a1 + v22) = *(void *)(a2 + v22);

  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1AD8874E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD8874F4);
}

uint64_t sub_1AD8874F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WeekResults(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_1AD887560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD887574);
}

uint64_t sub_1AD887574(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WeekResults(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for WeekDiagram(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4A490);
}

uint64_t sub_1AD887604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD88F980(a1, a2, a3, type metadata accessor for WeekResults);
}

uint64_t sub_1AD887628()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_1AD887644(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A3D0);
}

id sub_1AD887670(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A3D8);
}

id sub_1AD88769C(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A3E0);
}

id sub_1AD8876C8(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A3E8);
}

id sub_1AD8876F4(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A3F0);
}

id sub_1AD887720(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A3F8);
}

id sub_1AD88774C(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A400);
}

id sub_1AD887778(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A408);
}

id sub_1AD8877A4(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A410);
}

id sub_1AD8877D0(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A418);
}

id sub_1AD8877FC(uint64_t a1)
{
  return sub_1AD887854(a1, (uint64_t)&unk_1F046A048, (void (*)(uint64_t))sub_1AD866410, &qword_1E9A4A420);
}

id sub_1AD887828(uint64_t a1)
{
  return sub_1AD887854(a1, MEMORY[0x1E4FBC860], (void (*)(uint64_t))sub_1AD9D4024, &qword_1E9A4A428);
}

id sub_1AD887854(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void *a4)
{
  id result = objc_msgSend(self, sel_currentDevice);
  if (result)
  {
    uint64_t v8 = result;
    a3(a2);
    sub_1AD9DFE70();
    uint64_t v10 = v9;

    id result = (id)swift_bridgeObjectRelease();
    *a4 = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AD8878EC(uint64_t a1)
{
  return sub_1AD887910(a1, &qword_1E9A4A430);
}

uint64_t sub_1AD8878F8(uint64_t a1)
{
  return sub_1AD887910(a1, &qword_1E9A4A438);
}

uint64_t sub_1AD887904(uint64_t a1)
{
  return sub_1AD887910(a1, &qword_1E9A4A440);
}

uint64_t sub_1AD887910(uint64_t a1, uint64_t *a2)
{
  sub_1AD9DEE70();
  uint64_t v3 = sub_1AD9DEEF0();
  uint64_t result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t sub_1AD887958(uint64_t a1)
{
  return sub_1AD887970(a1, &qword_1E9A4A448);
}

uint64_t sub_1AD887964(uint64_t a1)
{
  return sub_1AD887970(a1, &qword_1E9A4A450);
}

uint64_t sub_1AD887970(uint64_t a1, void *a2)
{
  if (qword_1EB7255E0 != -1) {
    swift_once();
  }
  *a2 = qword_1EB725608;
  return swift_retain();
}

uint64_t sub_1AD8879DC(uint64_t a1)
{
  return sub_1AD887A14(0.388235294, 0.4, a1, &qword_1E9A4A458);
}

uint64_t sub_1AD8879F8(uint64_t a1)
{
  return sub_1AD887A14(0.57254902, 0.596078431, a1, &qword_1E9A4A460);
}

uint64_t sub_1AD887A14(double a1, double a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_1AD9DEE30();
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v11 + 104))(v10, *MEMORY[0x1E4F3EB10]);
  uint64_t result = MEMORY[0x1B3E6AEC0](v10, a1, a1, a2, 1.0);
  *a4 = result;
  return result;
}

double sub_1AD887AFC()
{
  if (qword_1E9A48DF8 != -1) {
    swift_once();
  }
  sub_1AD88FC34(0, &qword_1EB725BB0, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1AD9E3080;
  if (qword_1E9A48E00 != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = qword_1E9A4A400;
  if (qword_1E9A48E08 != -1) {
    swift_once();
  }
  *(void *)(v0 + 40) = qword_1E9A4A408;
  sub_1AD9DDD40();
  double result = *(double *)&v2;
  xmmword_1E9A4A468 = v2;
  *(_OWORD *)&qword_1E9A4A478 = v3;
  qword_1E9A4A488 = v4;
  return result;
}

uint64_t sub_1AD887C5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AD841878();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1AD887C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v76 = a2;
  sub_1AD8892C8(0, (unint64_t *)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v74 - v5;
  sub_1AD889214();
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD889430(0, &qword_1E9A4A4B8, (void (*)(uint64_t))sub_1AD889214);
  uint64_t v12 = v11;
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v75 = (uint64_t)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v19 = (char *)&v74 - v18;
  MEMORY[0x1F4188790](v17, v20);
  uint64_t v77 = (uint64_t)&v74 - v21;
  *(void *)uint64_t v10 = sub_1AD9DE340();
  *((void *)v10 + 1) = 0;
  v10[16] = 0;
  sub_1AD889798(0, &qword_1E9A4A538, &qword_1E9A4A4C8, (uint64_t (*)(uint64_t))sub_1AD88932C);
  sub_1AD888570(a1, (uint64_t)&v10[*(int *)(v22 + 44)]);
  if (qword_1E9A48F68 != -1) {
    swift_once();
  }
  uint64_t v23 = *(int *)(type metadata accessor for WeekDiagram(0) + 20);
  unint64_t v24 = 0x1E9A48000uLL;
  if ((*(unsigned char *)(a1 + v23) & 1) == 0)
  {
    if (qword_1E9A490F8 != -1)
    {
      swift_once();
      unint64_t v24 = 0x1E9A48000;
    }
    if (*(void *)(v24 + 3616) != -1) {
      swift_once();
    }
  }
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  sub_1AD88C660((uint64_t)v10, (uint64_t)v19, (uint64_t (*)(void))sub_1AD889214);
  uint64_t v25 = &v19[*(int *)(v12 + 36)];
  long long v26 = v111;
  *(_OWORD *)uint64_t v25 = v110;
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = v112;
  sub_1AD88C6C8((uint64_t)v10, (uint64_t (*)(void))sub_1AD889214);
  sub_1AD88F024((uint64_t)v19, v77, (uint64_t)&qword_1E9A4A4B8, (uint64_t)sub_1AD889214, MEMORY[0x1E4F3C7D8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD889430);
  if (*(unsigned char *)(a1 + v23))
  {
    sub_1AD88C5AC((uint64_t)v87);
  }
  else
  {
    id v27 = *(void **)(a1 + *(int *)(type metadata accessor for WeekResults(0) + 44));
    uint64_t v28 = (void *)sub_1AD9DC720();
    id v29 = objc_msgSend(v27, sel_stringFromDateInterval_, v28);

    if (v29)
    {
      uint64_t v30 = sub_1AD9DF710();
      uint64_t v32 = v31;

      v109[0] = v30;
      v109[1] = v32;
      sub_1AD85F688();
      sub_1AD9DFEE0();
      swift_bridgeObjectRelease();
    }
    if (qword_1E9A490F8 != -1) {
      swift_once();
    }
    uint64_t v33 = sub_1AD9DE890();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v6, 1, 1, v33);
    sub_1AD9DE8D0();
    sub_1AD88F10C((uint64_t)v6, (uint64_t)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD8892C8);
    uint64_t v34 = sub_1AD9DEAB0();
    uint64_t v36 = v35;
    char v38 = v37;
    swift_release();
    char v39 = v38 & 1;
    uint64_t v40 = sub_1AD9DEAC0();
    uint64_t v42 = v41;
    char v44 = v43;
    sub_1AD861548(v34, v36, v39);
    swift_bridgeObjectRelease();
    if (qword_1E9A49100 != -1) {
      swift_once();
    }
    char v45 = v44 & 1;
    uint64_t v46 = sub_1AD9DEA70();
    uint64_t v48 = v47;
    char v50 = v49;
    uint64_t v52 = v51;
    sub_1AD861548(v40, v42, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v53 = sub_1AD9DE790();
    if (qword_1E9A48E20 != -1) {
      swift_once();
    }
    sub_1AD9DDCC0();
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    uint64_t v59 = v58;
    uint64_t v61 = v60;
    char v62 = sub_1AD9DE7A0();
    if (qword_1E9A48E28 != -1) {
      swift_once();
    }
    sub_1AD9DDCC0();
    char v86 = v50 & 1;
    char v83 = 0;
    char v80 = 0;
    v87[0] = v46;
    v87[1] = v48;
    char v88 = v50 & 1;
    *(_DWORD *)uint64_t v89 = *(_DWORD *)v79;
    *(_DWORD *)&v89[3] = *(_DWORD *)&v79[3];
    uint64_t v90 = v52;
    __int16 v91 = 256;
    __int16 v93 = v85;
    int v92 = v84;
    char v94 = v53;
    *(_DWORD *)&v95[3] = *(_DWORD *)&v78[3];
    *(_DWORD *)uint64_t v95 = *(_DWORD *)v78;
    uint64_t v96 = v55;
    uint64_t v97 = v57;
    uint64_t v98 = v59;
    uint64_t v99 = v61;
    char v100 = 0;
    *(_DWORD *)&v101[3] = *(_DWORD *)&v82[3];
    *(_DWORD *)int v101 = *(_DWORD *)v82;
    char v102 = v62;
    *(_DWORD *)&v103[3] = *(_DWORD *)&v81[3];
    *(_DWORD *)uint64_t v103 = *(_DWORD *)v81;
    uint64_t v104 = v63;
    uint64_t v105 = v64;
    uint64_t v106 = v65;
    uint64_t v107 = v66;
    char v108 = 0;
    nullsub_1(v87);
  }
  sub_1AD8907C4((uint64_t)v87, (uint64_t)v109, (uint64_t (*)(void))sub_1AD8896AC);
  uint64_t v67 = MEMORY[0x1E4F3C7D8];
  uint64_t v68 = v77;
  uint64_t v69 = v75;
  sub_1AD88F098(v77, v75, (uint64_t)&qword_1E9A4A4B8, (uint64_t)sub_1AD889214, MEMORY[0x1E4F3C7D8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD889430);
  sub_1AD8907C4((uint64_t)v109, (uint64_t)v78, (uint64_t (*)(void))sub_1AD8896AC);
  uint64_t v70 = v76;
  sub_1AD88F098(v69, v76, (uint64_t)&qword_1E9A4A4B8, (uint64_t)sub_1AD889214, v67, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD889430);
  sub_1AD889180();
  uint64_t v72 = v70 + *(int *)(v71 + 48);
  sub_1AD8907C4((uint64_t)v78, (uint64_t)v79, (uint64_t (*)(void))sub_1AD8896AC);
  sub_1AD8907C4((uint64_t)v79, v72, (uint64_t (*)(void))sub_1AD8896AC);
  sub_1AD88C540((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1AD8622CC);
  sub_1AD88F10C(v68, (uint64_t)&qword_1E9A4A4B8, (uint64_t)sub_1AD889214, v67, (uint64_t (*)(void))sub_1AD889430);
  sub_1AD8907C4((uint64_t)v78, (uint64_t)v87, (uint64_t (*)(void))sub_1AD8896AC);
  sub_1AD88C540((uint64_t)v87, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1AD862384);
  return sub_1AD88F10C(v69, (uint64_t)&qword_1E9A4A4B8, (uint64_t)sub_1AD889214, v67, (uint64_t (*)(void))sub_1AD889430);
}

uint64_t sub_1AD888570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD889494();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (uint64_t *)((char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1AD889430(0, &qword_1E9A4A4E0, (void (*)(uint64_t))sub_1AD889494);
  uint64_t v93 = v8;
  uint64_t v10 = MEMORY[0x1F4188790](v8, v9);
  uint64_t v94 = (uint64_t)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  uint64_t v15 = (char *)&v84 - v14;
  MEMORY[0x1F4188790](v13, v16);
  uint64_t v97 = (uint64_t)&v84 - v17;
  sub_1AD8892C8(0, &qword_1E9A4A540, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v21 = (char *)&v84 - v20;
  uint64_t v22 = sub_1AD9DCA50();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v24);
  long long v26 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for WeekDiagram(0);
  uint64_t v98 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v95 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v92 = *(int *)(v27 + 20);
  if ((*(unsigned char *)(a1 + v92) & 4) == 0) {
    goto LABEL_14;
  }
  char v35 = *(unsigned char *)(a1 + 16);
  int v84 = v15;
  __int16 v85 = v7;
  if (v35)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
  }
  else
  {
    id v36 = objc_msgSend(*(id *)(a1 + *(int *)(type metadata accessor for WeekResults(0) + 52)), sel_stringFromTimeInterval_, round(*(double *)(a1 + 8) / 60.0) * 60.0);
    if (v36)
    {
      char v37 = v36;
      sub_1AD9DF710();
    }
    sub_1AD9DF7B0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v26, v21, v22);
      goto LABEL_9;
    }
  }
  sub_1AD9DC9C0();
  sub_1AD88F10C((uint64_t)v21, (uint64_t)&qword_1E9A4A540, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD8892C8);
LABEL_9:
  uint64_t v38 = sub_1AD9DEAE0();
  uint64_t v40 = v39;
  char v42 = v41;
  if (qword_1E9A48E50 != -1) {
    swift_once();
  }
  uint64_t v96 = a1;
  uint64_t v43 = sub_1AD9DEA70();
  uint64_t v45 = v44;
  char v47 = v46 & 1;
  sub_1AD861548(v38, v40, v42 & 1);
  swift_bridgeObjectRelease();
  sub_1AD9DE9B0();
  uint64_t v98 = sub_1AD9DEAB0();
  uint64_t v28 = v48;
  char v50 = v49;
  uint64_t v95 = v51;
  swift_release();
  uint64_t v29 = v50 & 1;
  sub_1AD861548(v43, v45, v47);
  swift_bridgeObjectRelease();
  unsigned __int8 v52 = sub_1AD9DE790();
  if (qword_1E9A48E18 != -1) {
    swift_once();
  }
  sub_1AD9DDCC0();
  uint64_t v31 = v53;
  uint64_t v32 = v54;
  uint64_t v33 = v55;
  uint64_t v34 = v56;
  uint64_t v30 = v52;
  uint64_t v15 = v84;
  uint64_t v7 = v85;
  a1 = v96;
LABEL_14:
  uint64_t v89 = v34;
  uint64_t v90 = v31;
  uint64_t v57 = v30;
  uint64_t v96 = v33;
  uint64_t v91 = v32;
  *uint64_t v7 = sub_1AD9DF320();
  v7[1] = v58;
  sub_1AD88C5C8();
  sub_1AD888D48(a1, (uint64_t)v7 + *(int *)(v59 + 44));
  char v60 = sub_1AD9DE7A0();
  if ((*(unsigned char *)(a1 + v92) & 1) != 0 && qword_1E9A490F8 != -1) {
    swift_once();
  }
  sub_1AD9DDCC0();
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  sub_1AD88C660((uint64_t)v7, (uint64_t)v15, (uint64_t (*)(void))sub_1AD889494);
  uint64_t v69 = &v15[*(int *)(v93 + 36)];
  *uint64_t v69 = v60;
  *((void *)v69 + 1) = v62;
  *((void *)v69 + 2) = v64;
  *((void *)v69 + 3) = v66;
  *((void *)v69 + 4) = v68;
  v69[40] = 0;
  sub_1AD88C6C8((uint64_t)v7, (uint64_t (*)(void))sub_1AD889494);
  uint64_t v70 = (uint64_t)v15;
  uint64_t v71 = v97;
  uint64_t v72 = MEMORY[0x1E4F3CAB0];
  sub_1AD88F024(v70, v97, (uint64_t)&qword_1E9A4A4E0, (uint64_t)sub_1AD889494, MEMORY[0x1E4F3CAB0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD889430);
  uint64_t v73 = v71;
  uint64_t v74 = v94;
  sub_1AD88F098(v73, v94, (uint64_t)&qword_1E9A4A4E0, (uint64_t)sub_1AD889494, v72, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD889430);
  uint64_t v75 = v98;
  *(void *)a2 = v98;
  *(void *)(a2 + 8) = v28;
  uint64_t v98 = v75;
  uint64_t v86 = v28;
  uint64_t v87 = v57;
  uint64_t v88 = v29;
  uint64_t v77 = v95;
  uint64_t v76 = v96;
  *(void *)(a2 + 16) = v29;
  *(void *)(a2 + 24) = v77;
  *(void *)(a2 + 32) = v57;
  uint64_t v78 = v91;
  *(void *)(a2 + 40) = v90;
  *(void *)(a2 + 48) = v78;
  uint64_t v79 = v89;
  *(void *)(a2 + 56) = v76;
  *(void *)(a2 + 64) = v79;
  *(unsigned char *)(a2 + 72) = 0;
  sub_1AD88932C();
  sub_1AD88F098(v74, a2 + *(int *)(v80 + 48), (uint64_t)&qword_1E9A4A4E0, (uint64_t)sub_1AD889494, MEMORY[0x1E4F3CAB0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD889430);
  uint64_t v81 = v75;
  uint64_t v82 = v86;
  sub_1AD8622CC(v81, v86, v29, v77);
  sub_1AD88F10C(v97, (uint64_t)&qword_1E9A4A4E0, (uint64_t)sub_1AD889494, MEMORY[0x1E4F3CAB0], (uint64_t (*)(void))sub_1AD889430);
  sub_1AD88F10C(v74, (uint64_t)&qword_1E9A4A4E0, (uint64_t)sub_1AD889494, MEMORY[0x1E4F3CAB0], (uint64_t (*)(void))sub_1AD889430);
  return sub_1AD862384(v98, v82, v88, v77);
}

uint64_t sub_1AD888D48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WeekResults(0);
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for WeekBarChart(0);
  uint64_t v10 = MEMORY[0x1F4188790](v8, v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v10, v13);
  uint64_t v16 = (char *)&v34 - v15;
  MEMORY[0x1F4188790](v14, v17);
  uint64_t v19 = (char *)&v34 - v18;
  sub_1AD88C660(a1, (uint64_t)v7, type metadata accessor for WeekResults);
  uint64_t v20 = *(void *)(a1 + *(int *)(type metadata accessor for WeekDiagram(0) + 20));
  uint64_t v21 = 0;
  if ((v20 & 8) != 0)
  {
    if (qword_1E9A48DE0 != -1) {
      swift_once();
    }
    uint64_t v21 = qword_1E9A4A3E0;
  }
  sub_1AD8907C4((uint64_t)v7, (uint64_t)v16, type metadata accessor for WeekResults);
  v16[v8[5]] = v20 & 1;
  v16[v8[6]] = (v20 & 2) != 0;
  v16[v8[7]] = (v20 & 0x10) != 0;
  v16[v8[8]] = (v20 & 0x20) != 0;
  *(void *)&v16[v8[9]] = v21;
  sub_1AD8907C4((uint64_t)v16, (uint64_t)v19, type metadata accessor for WeekBarChart);
  if ((v20 & 4) != 0 && (*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    double v26 = *(double *)(a1 + *(int *)(v4 + 28));
    double v27 = round(*(double *)(a1 + 8) / 60.0) * 60.0;
    id v28 = objc_msgSend(*(id *)(a1 + *(int *)(v4 + 52)), sel_stringFromTimeInterval_, v27);
    if (v28)
    {
      uint64_t v29 = v28;
      sub_1AD9DF710();
    }
    if (v26 <= 0.0) {
      double v30 = 0.0;
    }
    else {
      double v30 = v27 / v26;
    }
    if (qword_1E9A48DF0 != -1) {
      swift_once();
    }
    uint64_t v23 = qword_1E9A4A3F0;
    if (qword_1E9A48E48 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_1E9A4A448;
    uint64_t KeyPath = swift_getKeyPath();
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)&v30;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t KeyPath = 0;
    uint64_t v25 = 0;
  }
  sub_1AD88C660((uint64_t)v19, (uint64_t)v12, type metadata accessor for WeekBarChart);
  sub_1AD88C660((uint64_t)v12, a2, type metadata accessor for WeekBarChart);
  sub_1AD889548();
  uint64_t v32 = (uint64_t *)(a2 + *(int *)(v31 + 48));
  *uint64_t v32 = v22;
  v32[1] = v23;
  v32[2] = KeyPath;
  uint64_t v32[3] = v25;
  sub_1AD88C728(v22, v23, KeyPath);
  sub_1AD88C6C8((uint64_t)v19, type metadata accessor for WeekBarChart);
  sub_1AD88C76C(v22, v23, KeyPath);
  return sub_1AD88C6C8((uint64_t)v12, type metadata accessor for WeekBarChart);
}

uint64_t sub_1AD889118@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_1AD9DE340();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  sub_1AD889798(0, &qword_1E9A4A4A0, &qword_1E9A4A4A8, (uint64_t (*)(uint64_t))sub_1AD889180);
  return sub_1AD887C9C(v1, a1 + *(int *)(v3 + 44));
}

void sub_1AD889180()
{
  if (!qword_1E9A4A4B0)
  {
    sub_1AD889430(255, &qword_1E9A4A4B8, (void (*)(uint64_t))sub_1AD889214);
    sub_1AD8896AC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4A4B0);
    }
  }
}

void sub_1AD889214()
{
  if (!qword_1E9A4A4C0)
  {
    sub_1AD8892C8(255, &qword_1E9A4A4C8, (uint64_t (*)(uint64_t))sub_1AD88932C, MEMORY[0x1E4F3F108]);
    sub_1AD890490(&qword_1E9A4A518, &qword_1E9A4A4C8, (uint64_t (*)(uint64_t))sub_1AD88932C);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A4C0);
    }
  }
}

void sub_1AD8892C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD88932C()
{
  if (!qword_1E9A4A4D0)
  {
    sub_1AD8893C0();
    sub_1AD889430(255, &qword_1E9A4A4E0, (void (*)(uint64_t))sub_1AD889494);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4A4D0);
    }
  }
}

void sub_1AD8893C0()
{
  if (!qword_1E9A4A4D8)
  {
    sub_1AD890B18(255, &qword_1EB725A30);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A4D8);
    }
  }
}

void sub_1AD889430(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD889494()
{
  if (!qword_1E9A4A4E8)
  {
    sub_1AD8892C8(255, &qword_1E9A4A4F0, (uint64_t (*)(uint64_t))sub_1AD889548, MEMORY[0x1E4F3F108]);
    sub_1AD890490(&qword_1E9A4A510, &qword_1E9A4A4F0, (uint64_t (*)(uint64_t))sub_1AD889548);
    unint64_t v0 = sub_1AD9DF1A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A4E8);
    }
  }
}

void sub_1AD889548()
{
  if (!qword_1E9A4A4F8)
  {
    type metadata accessor for WeekBarChart(255);
    sub_1AD8895D8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4A4F8);
    }
  }
}

uint64_t type metadata accessor for WeekBarChart(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4A550);
}

void sub_1AD8895D8()
{
  if (!qword_1E9A4A500)
  {
    sub_1AD890418(255, &qword_1E9A4A508);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A500);
    }
  }
}

void sub_1AD889640(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_1AD88FC34(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = sub_1AD9DE6D0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD8896AC()
{
  if (!qword_1E9A4A520)
  {
    sub_1AD8905B4(255, &qword_1E9A4A528, (unint64_t *)&qword_1E9A4A530);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A520);
    }
  }
}

void sub_1AD889720(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_1AD890B18(255, (unint64_t *)&qword_1E9A49A78);
    unint64_t v3 = sub_1AD9DDFC0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_1AD889798(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_1AD8892C8(255, a3, a4, MEMORY[0x1E4F3F108]);
    unint64_t v5 = sub_1AD9DDEA0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

int *sub_1AD889814@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WeekBarChartBars(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4, v6);
  unint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD88E9C4(0, &qword_1E9A4A5B0, (void (*)(uint64_t))type metadata accessor for WeekBarChartBars, (void (*)(uint64_t))sub_1AD88D5FC);
  uint64_t v10 = v9;
  uint64_t v12 = MEMORY[0x1F4188790](v9, v11);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v12, v15);
  uint64_t v18 = (char *)&v53 - v17;
  MEMORY[0x1F4188790](v16, v19);
  uint64_t v58 = (uint64_t)&v53 - v20;
  uint64_t v21 = *a1;
  char v60 = a1;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1AD9C5584((uint64_t)sub_1AD88D6AC, (uint64_t)v59, v21);
  swift_bridgeObjectRelease();
  uint64_t v23 = (int *)type metadata accessor for WeekBarChart(0);
  uint64_t v24 = *(uint64_t *)((char *)a1 + v23[9]);
  char v25 = *((unsigned char *)a1 + v23[5]);
  char v26 = *((unsigned char *)a1 + v23[8]);
  *(void *)unint64_t v8 = v22;
  *((void *)v8 + 1) = v24;
  v8[16] = v25;
  v8[17] = v26;
  double v27 = (uint64_t *)&v8[*(int *)(v5 + 40)];
  *double v27 = swift_getKeyPath();
  sub_1AD8892C8(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  swift_storeEnumTagMultiPayload();
  uint64_t result = (int *)type metadata accessor for WeekResults(0);
  uint64_t v29 = result[7];
  double v30 = *(double *)((char *)a1 + v29);
  double v31 = *(double *)((char *)a1 + result[9]);
  double v32 = v30 / v31;
  if ((~COERCE__INT64(v30 / v31) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v32 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v33 = (uint64_t)v18;
  uint64_t v56 = v14;
  uint64_t v57 = a2;
  int v34 = *((unsigned __int8 *)a1 + v23[7]);
  uint64_t v54 = v29;
  uint64_t v55 = result;
  uint64_t v35 = v10;
  if (v34 == 1)
  {
    id v36 = (char *)a1 + result[8];
    uint64_t v37 = *(void *)v36;
    char v38 = v36[8];
  }
  else
  {
    uint64_t v37 = 0;
    char v38 = 1;
  }
  uint64_t v39 = (uint64_t)v32;
  uint64_t v40 = sub_1AD9DF320();
  uint64_t v42 = v41;
  sub_1AD88C660((uint64_t)v8, v33, type metadata accessor for WeekBarChartBars);
  uint64_t v43 = v33 + *(int *)(v35 + 36);
  *(void *)uint64_t v43 = v39;
  *(double *)(v43 + 8) = v31;
  *(double *)(v43 + 16) = v30;
  *(void *)(v43 + 24) = v37;
  *(unsigned char *)(v43 + 32) = v38;
  *(void *)(v43 + 40) = v40;
  *(void *)(v43 + 48) = v42;
  sub_1AD88C6C8((uint64_t)v8, type metadata accessor for WeekBarChartBars);
  uint64_t v44 = v58;
  sub_1AD88F024(v33, v58, (uint64_t)&qword_1E9A4A5B0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1AD88D5FC, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88E9C4);
  if (*((unsigned char *)a1 + v23[6]) == 1)
  {
    uint64_t v45 = *(uint64_t *)((char *)a1 + v54);
    char v46 = *(void **)((char *)a1 + v55[12]);
    id v47 = v46;
  }
  else
  {
    uint64_t v45 = 0;
    char v46 = 0;
  }
  uint64_t v49 = (uint64_t)v56;
  uint64_t v48 = v57;
  sub_1AD88F098(v44, (uint64_t)v56, (uint64_t)&qword_1E9A4A5B0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1AD88D5FC, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88E9C4);
  sub_1AD88F098(v49, v48, (uint64_t)&qword_1E9A4A5B0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1AD88D5FC, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88E9C4);
  sub_1AD88D518();
  uint64_t v51 = (void *)(v48 + *(int *)(v50 + 48));
  void *v51 = v45;
  v51[1] = 0;
  v51[2] = v46;
  id v52 = v46;
  sub_1AD88F10C(v44, (uint64_t)&qword_1E9A4A5B0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1AD88D5FC, (uint64_t (*)(void))sub_1AD88E9C4);

  return (int *)sub_1AD88F10C(v49, (uint64_t)&qword_1E9A4A5B0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1AD88D5FC, (uint64_t (*)(void))sub_1AD88E9C4);
}

int *sub_1AD889CB4@<X0>(uint64_t a1@<X8>)
{
  if (qword_1E9A48E10 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1E9A4A410;
  *(void *)a1 = sub_1AD9DE2B0();
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 0;
  sub_1AD88D480();
  return sub_1AD889814(v1, a1 + *(int *)(v4 + 44));
}

uint64_t sub_1AD889D38(char a1)
{
  uint64_t v3 = sub_1AD9DE320();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v3, v5);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v18 - v10;
  if (*(unsigned char *)(v1 + 17) != 1 || (a1 & 1) == 0)
  {
    type metadata accessor for WeekBarChartBars(0);
    sub_1AD96667C((uint64_t)v11);
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x1E4F3D540], v3);
    char v15 = sub_1AD9DDD10();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v8, v3);
    v16(v11, v3);
    if (v15)
    {
      if (qword_1E9A48E60 == -1) {
        goto LABEL_12;
      }
    }
    else if (qword_1E9A48E58 == -1)
    {
LABEL_12:
      uint64_t v19 = swift_retain();
      return sub_1AD9DDDD0();
    }
    swift_once();
    goto LABEL_12;
  }
  sub_1AD88FC34(0, &qword_1EB725BB8, MEMORY[0x1E4F3EB98], MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1AD9E3080;
  if (qword_1E9A48EE8 != -1) {
    swift_once();
  }
  *(void *)(v12 + 32) = qword_1E9A4AE38;
  uint64_t v13 = qword_1EB7255E0;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  *(void *)(v12 + 40) = qword_1EB725608;
  uint64_t v19 = v12;
  sub_1AD9DF870();
  uint64_t v14 = v19;
  swift_retain();
  MEMORY[0x1B3E6B280](v14);
  sub_1AD9DF390();
  sub_1AD9DF3A0();
  sub_1AD9DDF00();
  return sub_1AD9DDDD0();
}

double sub_1AD88A060@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WeekBarChartBars(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4 - 8, v7);
  sub_1AD88C660(a1, (uint64_t)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WeekBarChartBars);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  sub_1AD8907C4((uint64_t)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, type metadata accessor for WeekBarChartBars);
  char v10 = sub_1AD9DE770();
  sub_1AD9DDCC0();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  if (qword_1E9A48E30 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_1E9A4A430;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = qword_1E9A48DF8;
  swift_retain();
  if (v21 != -1) {
    swift_once();
  }
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  uint64_t v22 = v27[1];
  char v23 = v28;
  uint64_t v24 = v29;
  char v25 = v30;
  *(void *)a2 = sub_1AD88E720;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v14;
  *(void *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = v18;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = KeyPath;
  *(void *)(a2 + 72) = v19;
  *(void *)(a2 + 80) = v22;
  *(unsigned char *)(a2 + 88) = v23;
  *(void *)(a2 + 96) = v24;
  *(unsigned char *)(a2 + 104) = v25;
  double result = *(double *)&v31;
  *(_OWORD *)(a2 + 112) = v31;
  return result;
}

uint64_t sub_1AD88A2A8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for WeekBarChartBars(0);
  v18[0] = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v18[0] + 64);
  MEMORY[0x1F4188790](v6 - 8, v8);
  uint64_t v9 = sub_1AD9DDDF0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v13 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a3 = sub_1AD9DE2B0();
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  sub_1AD88E7A0();
  v18[1] = *a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  sub_1AD88C660((uint64_t)a2, (uint64_t)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WeekBarChartBars);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v15 = (v11 + *(unsigned __int8 *)(v18[0] + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v18[0] + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v16 + v14, v13, v9);
  sub_1AD8907C4((uint64_t)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for WeekBarChartBars);
  sub_1AD8892C8(0, &qword_1E9A4A608, type metadata accessor for DayRelativeDuration, MEMORY[0x1E4FBB320]);
  sub_1AD8892C8(0, &qword_1E9A4A610, (uint64_t (*)(uint64_t))sub_1AD88E900, MEMORY[0x1E4F3F108]);
  sub_1AD88ECC0();
  sub_1AD88EFFC();
  sub_1AD88E2D4(&qword_1E9A4A688, (void (*)(uint64_t))type metadata accessor for DayRelativeDuration);
  swift_bridgeObjectRetain();
  return sub_1AD9DF260();
}

uint64_t sub_1AD88A5C8@<X0>(double *a1@<X0>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v91 = a3;
  sub_1AD88EC38(0);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v90 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_1AD9DE610();
  uint64_t v8 = *(void *)(v92 - 8);
  MEMORY[0x1F4188790](v92, v9);
  uint64_t v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD88EA6C();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD88EA38(0);
  uint64_t v19 = v18;
  uint64_t v21 = MEMORY[0x1F4188790](v18, v20);
  uint64_t v93 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v21, v23);
  char v26 = (char *)&v82 - v25;
  MEMORY[0x1F4188790](v24, v27);
  uint64_t v87 = (char *)&v82 - v28;
  sub_1AD88E9C4(0, &qword_1E9A4A620, sub_1AD88EA38, (void (*)(uint64_t))sub_1AD88EB90);
  uint64_t v85 = v29;
  uint64_t v31 = MEMORY[0x1F4188790](v29, v30);
  uint64_t v89 = (uint64_t)&v82 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v31, v33);
  uint64_t v86 = (char *)&v82 - v35;
  MEMORY[0x1F4188790](v34, v36);
  uint64_t v88 = (uint64_t)&v82 - v37;
  sub_1AD9DDDE0();
  double v39 = v38;
  double v40 = a1[4];
  double v41 = 0.0;
  if (v40 > 0.0) {
    double v41 = a1[1] / v40;
  }
  uint64_t v84 = v19;
  if (qword_1E9A48DD0 != -1) {
    swift_once();
  }
  char v83 = v26;
  uint64_t v42 = qword_1E9A4A3D0;
  double v43 = v39 * v41;
  uint64_t v44 = sub_1AD889D38((a1[2] - *MEMORY[0x1E4FA5578] <= a1[1]) & ~*((unsigned char *)a1 + 24));
  uint64_t v45 = a2;
  if (qword_1E9A48DD8 != -1) {
    swift_once();
  }
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  double v95 = v43;
  uint64_t v96 = v42;
  uint64_t v97 = v44;
  uint64_t v98 = v103;
  char v99 = v104;
  uint64_t v100 = v105;
  char v101 = v106;
  long long v102 = v107;
  sub_1AD9DE5F0();
  sub_1AD890B18(0, &qword_1E9A4A638);
  double v47 = v46;
  uint64_t v48 = sub_1AD890C28(&qword_1E9A4A640, &qword_1E9A4A638, (uint64_t)&type metadata for VerticalBar, (void (*)(void))sub_1AD88EB3C);
  sub_1AD9DED00();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v92);
  uint64_t result = swift_release();
  if (__OFSUB__(*(void *)(*(void *)v45 + 16), *(void *)a1))
  {
    __break(1u);
  }
  else
  {
    double v95 = v47;
    uint64_t v96 = v48;
    swift_getOpaqueTypeConformance2();
    sub_1AD9DEC40();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    uint64_t v50 = self;
    uint64_t v51 = *(void *)a1;
    type metadata accessor for DayRelativeDuration(0);
    id v52 = (void *)sub_1AD9DCDA0();
    id v53 = objc_msgSend(v50, sel_hk_noonWithDayIndex_calendar_, v51, v52);

    id v54 = (id)HKDateFormatterFromTemplate();
    if (v54)
    {
      uint64_t v55 = v54;
      id v56 = objc_msgSend(v54, sel_stringFromDate_, v53);
      sub_1AD9DF710();
    }
    else
    {
    }
    uint64_t v57 = (uint64_t)v83;
    uint64_t v58 = (uint64_t)v93;
    sub_1AD9DDF80();
    swift_bridgeObjectRelease();
    sub_1AD88C6C8(v58, (uint64_t (*)(void))sub_1AD88EA38);
    double v59 = a1[1];
    char v60 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
    uint64_t v61 = (char *)objc_allocWithZone(v60);
    *(void *)&v61[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
    v94.receiver = v61;
    v94.super_class = v60;
    id v62 = objc_msgSendSuper2(&v94, sel_init);
    id v63 = objc_msgSend(v62, sel_stringFromTimeInterval_, v59);

    if (v63)
    {
      sub_1AD9DF710();
    }
    uint64_t v64 = (uint64_t)v90;
    uint64_t v65 = (uint64_t)v87;
    sub_1AD9DDF90();
    swift_bridgeObjectRelease();
    sub_1AD88C6C8(v57, (uint64_t (*)(void))sub_1AD88EA38);
    if (v45[16] == 1)
    {
      sub_1AD88C660((uint64_t)a1, v64, type metadata accessor for DayRelativeDuration);
      BOOL v66 = sub_1AD88AFB4((uint64_t *)a1);
      uint64_t v67 = type metadata accessor for XAxisBarLabel(0);
      *(unsigned char *)(v64 + *(int *)(v67 + 20)) = v66;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v64, 0, 1, v67);
    }
    else
    {
      uint64_t v68 = type metadata accessor for XAxisBarLabel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v64, 1, 1, v68);
    }
    uint64_t v69 = sub_1AD9DF310();
    uint64_t v71 = v70;
    uint64_t v72 = (uint64_t)v86;
    uint64_t v73 = (uint64_t)&v86[*(int *)(v85 + 36)];
    sub_1AD88C660(v64, v73, (uint64_t (*)(void))sub_1AD88EC38);
    sub_1AD88EB90();
    uint64_t v75 = (uint64_t *)(v73 + *(int *)(v74 + 36));
    uint64_t *v75 = v69;
    v75[1] = v71;
    sub_1AD88C660(v65, v72, (uint64_t (*)(void))sub_1AD88EA38);
    sub_1AD88C6C8(v64, (uint64_t (*)(void))sub_1AD88EC38);
    sub_1AD88C6C8(v65, (uint64_t (*)(void))sub_1AD88EA38);
    uint64_t v76 = v72;
    uint64_t v77 = v88;
    sub_1AD88F024(v76, v88, (uint64_t)&qword_1E9A4A620, (uint64_t)sub_1AD88EA38, (uint64_t)sub_1AD88EB90, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88E9C4);
    LOBYTE(v71) = sub_1AD88AFB4((uint64_t *)a1);
    uint64_t v78 = v89;
    sub_1AD88F098(v77, v89, (uint64_t)&qword_1E9A4A620, (uint64_t)sub_1AD88EA38, (uint64_t)sub_1AD88EB90, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88E9C4);
    uint64_t v79 = v91;
    sub_1AD88F098(v78, v91, (uint64_t)&qword_1E9A4A620, (uint64_t)sub_1AD88EA38, (uint64_t)sub_1AD88EB90, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88E9C4);
    sub_1AD88E900();
    uint64_t v81 = v79 + *(int *)(v80 + 48);
    *(void *)uint64_t v81 = 0;
    *(unsigned char *)(v81 + 8) = 0;
    *(unsigned char *)(v81 + 9) = v71 & 1;
    sub_1AD88F10C(v77, (uint64_t)&qword_1E9A4A620, (uint64_t)sub_1AD88EA38, (uint64_t)sub_1AD88EB90, (uint64_t (*)(void))sub_1AD88E9C4);
    return sub_1AD88F10C(v78, (uint64_t)&qword_1E9A4A620, (uint64_t)sub_1AD88EA38, (uint64_t)sub_1AD88EB90, (uint64_t (*)(void))sub_1AD88E9C4);
  }
  return result;
}

BOOL sub_1AD88AFB4(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for DayRelativeDuration(0) - 8;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *v1;
  uint64_t v9 = *(void *)(*v1 + 16);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *a1;
  sub_1AD88C660(v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * (v9 - 1), (uint64_t)v7, type metadata accessor for DayRelativeDuration);
  uint64_t v11 = *v7;
  sub_1AD88C6C8((uint64_t)v7, type metadata accessor for DayRelativeDuration);
  return v10 == v11;
}

double sub_1AD88B0C8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1AD9DE330();
  sub_1AD88A060(v1, (uint64_t)v9);
  *(_OWORD *)&v10[71] = v9[4];
  *(_OWORD *)&v10[87] = v9[5];
  *(_OWORD *)&v10[103] = v9[6];
  *(_OWORD *)&v10[119] = v9[7];
  *(_OWORD *)&v10[7] = v9[0];
  *(_OWORD *)&v10[23] = v9[1];
  *(_OWORD *)&v10[39] = v9[2];
  *(_OWORD *)&v10[55] = v9[3];
  long long v4 = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = *(_OWORD *)&v10[80];
  long long v5 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v5;
  long long v6 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v10[16];
  double result = *(double *)&v10[32];
  long long v8 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_OWORD *)(a1 + 65) = v8;
  *(_OWORD *)(a1 + 81) = v4;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 144) = *(void *)&v10[127];
  *(_OWORD *)(a1 + 17) = v6;
  return result;
}

uint64_t sub_1AD88B1A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v47 = a1;
  sub_1AD8892C8(0, (unint64_t *)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  long long v5 = (char *)&v43 - v4;
  sub_1AD89052C();
  MEMORY[0x1F4188790](v6 - 8, v7);
  double v46 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = self;
  uint64_t v10 = *v1;
  uint64_t v44 = (char *)v1 + *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  uint64_t v11 = (void *)sub_1AD9DCDA0();
  id v45 = v9;
  id v12 = objc_msgSend(v9, sel_hk_noonWithDayIndex_calendar_, v10, v11);

  id v13 = (id)HKDateFormatterFromTemplate();
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = objc_msgSend(v13, sel_stringFromDate_, v12);
    sub_1AD9DF710();
  }
  else
  {
  }
  if (qword_1E9A490F8 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_1AD9DE890();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v5, 1, 1, v16);
  sub_1AD9DE8D0();
  sub_1AD88F10C((uint64_t)v5, (uint64_t)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD8892C8);
  uint64_t v17 = sub_1AD9DEAB0();
  uint64_t v19 = v18;
  char v21 = v20;
  swift_bridgeObjectRelease();
  swift_release();
  if (*((unsigned char *)v1 + *(int *)(type metadata accessor for XAxisBarLabel(0) + 20)) == 1)
  {
    sub_1AD9DEF00();
  }
  else
  {
    if (qword_1E9A49100 != -1) {
      swift_once();
    }
    swift_retain();
  }
  char v22 = v21 & 1;
  uint64_t v23 = sub_1AD9DEA70();
  uint64_t v25 = v24;
  char v27 = v26;
  uint64_t v29 = v28;
  swift_release();
  sub_1AD861548(v17, v19, v22);
  swift_bridgeObjectRelease();
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  uint64_t v30 = v60;
  char v31 = v61;
  uint64_t v32 = v62;
  char v33 = v63;
  long long v34 = v64;
  if (qword_1E9A48DE8 != -1)
  {
    long long v43 = v64;
    swift_once();
    long long v34 = v43;
  }
  uint64_t v48 = v23;
  uint64_t v49 = v25;
  char v50 = v27 & 1;
  uint64_t v51 = v29;
  __int16 v52 = 257;
  uint64_t v53 = v30;
  char v54 = v31;
  uint64_t v55 = v32;
  char v56 = v33;
  long long v57 = v34;
  uint64_t v58 = 0;
  double v59 = *(double *)&qword_1E9A4A3E8 + *(double *)&qword_1E9A5AAA0;
  uint64_t v35 = *v1;
  uint64_t v36 = (void *)sub_1AD9DCDA0();
  id v37 = objc_msgSend(v45, sel_hk_noonWithDayIndex_calendar_, v35, v36);

  id v38 = (id)HKDateFormatterFromTemplate();
  if (v38)
  {
    double v39 = v38;
    id v40 = objc_msgSend(v38, sel_stringFromDate_, v37);
    sub_1AD9DF710();
  }
  else
  {
  }
  sub_1AD8905B4(0, &qword_1E9A4A790, &qword_1E9A4A798);
  sub_1AD89061C();
  uint64_t v41 = (uint64_t)v46;
  sub_1AD9DEC50();
  swift_bridgeObjectRelease();
  sub_1AD861548(v23, v25, v27 & 1);
  swift_bridgeObjectRelease();
  return sub_1AD8907C4(v41, v47, (uint64_t (*)(void))sub_1AD89052C);
}

uint64_t sub_1AD88B75C@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D1>)
{
  sub_1AD8892C8(0, (unint64_t *)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = sub_1AD9DE330();
  sub_1AD88BAB4(a1, (uint64_t)v23, a3);
  *(_OWORD *)((char *)&v25[4] + 7) = v23[4];
  *(_OWORD *)((char *)&v25[3] + 7) = v23[3];
  *(_OWORD *)((char *)&v25[7] + 7) = v23[7];
  *(_OWORD *)((char *)&v25[8] + 7) = v23[8];
  *(_OWORD *)((char *)&v25[9] + 7) = v24[0];
  v25[10] = *(_OWORD *)((char *)v24 + 9);
  *(_OWORD *)((char *)&v25[5] + 7) = v23[5];
  *(_OWORD *)((char *)&v25[6] + 7) = v23[6];
  *(_OWORD *)((char *)v25 + 7) = v23[0];
  char v26 = 1;
  *(_OWORD *)((char *)&v25[1] + 7) = v23[1];
  *(_OWORD *)((char *)&v25[2] + 7) = v23[2];
  long long v35 = v25[8];
  long long v36 = v25[9];
  long long v37 = *(_OWORD *)((char *)v24 + 9);
  long long v31 = v25[4];
  long long v32 = v25[5];
  long long v33 = v25[6];
  long long v34 = v25[7];
  long long v27 = v25[0];
  long long v28 = v25[1];
  long long v29 = v25[2];
  long long v30 = v25[3];
  if (qword_1E9A490F8 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_1AD9DE890();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  uint64_t v12 = sub_1AD9DE8D0();
  sub_1AD88F10C((uint64_t)v9, (uint64_t)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD8892C8);
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1E9A49100 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1E9A5AAA8;
  uint64_t v15 = swift_getKeyPath();
  long long v16 = v33;
  *(_OWORD *)(a2 + 129) = v34;
  long long v17 = v36;
  *(_OWORD *)(a2 + 145) = v35;
  *(_OWORD *)(a2 + 161) = v17;
  *(_OWORD *)(a2 + 177) = v37;
  long long v18 = v29;
  *(_OWORD *)(a2 + 65) = v30;
  long long v19 = v32;
  *(_OWORD *)(a2 + 81) = v31;
  *(_OWORD *)(a2 + 97) = v19;
  *(_OWORD *)(a2 + 113) = v16;
  long long v20 = v28;
  *(_OWORD *)(a2 + 17) = v27;
  *(_OWORD *)(a2 + 33) = v20;
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(_OWORD *)(a2 + 49) = v18;
  *(_DWORD *)(a2 + 193) = *(_DWORD *)v38;
  *(_DWORD *)(a2 + 196) = *(_DWORD *)&v38[3];
  *(void *)(a2 + 200) = KeyPath;
  *(void *)(a2 + 208) = v12;
  *(void *)(a2 + 216) = v15;
  *(void *)(a2 + 224) = v14;
  return swift_retain();
}

uint64_t sub_1AD88BAB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D1>)
{
  id v6 = objc_msgSend(a1, sel_stringFromTimeInterval_);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = sub_1AD9DF710();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0xE000000000000000;
  }
  char v11 = sub_1AD9DE790();
  if (qword_1E9A490F8 != -1) {
    swift_once();
  }
  sub_1AD9DDCC0();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  id v20 = objc_msgSend(a1, sel_stringFromTimeInterval_, a3);
  if (v20)
  {
    char v21 = v20;
    uint64_t v22 = sub_1AD9DF710();
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v24 = 0xE000000000000000;
  }
  char v25 = sub_1AD9DE7A0();
  sub_1AD9DDCC0();
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v26 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 24) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = v13;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v17;
  *(void *)(a2 + 64) = v19;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 88) = 1;
  *(void *)(a2 + 96) = v22;
  *(void *)(a2 + 104) = v24;
  *(unsigned char *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = v26;
  *(unsigned char *)(a2 + 128) = v25;
  *(void *)(a2 + 136) = v27;
  *(void *)(a2 + 144) = v28;
  *(void *)(a2 + 152) = v29;
  *(void *)(a2 + 160) = v30;
  *(unsigned char *)(a2 + 168) = 0;
  sub_1AD861558(v8, v10, 0);
  swift_bridgeObjectRetain();
  sub_1AD861558(v22, v24, 0);
  swift_bridgeObjectRetain();
  sub_1AD861548(v22, v24, 0);
  swift_bridgeObjectRelease();
  sub_1AD861548(v8, v10, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD88BCCC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD88B75C(*(void **)(v1 + 16), a1, *(double *)(v1 + 8));
}

uint64_t sub_1AD88BCD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1AD8892C8(0, (unint64_t *)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v36 - v6;
  if (*a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v48 = *a1;
    if (qword_1E9A48E68 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v8 = xmmword_1E9A4A468;
  unsigned int v46 = HIDWORD(xmmword_1E9A4A468);
  unsigned int v47 = DWORD2(xmmword_1E9A4A468);
  uint64_t v9 = qword_1E9A4A478;
  uint64_t v10 = qword_1E9A4A480;
  uint64_t v11 = qword_1E9A4A488;
  uint64_t v12 = swift_allocObject();
  long long v13 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 32) = v13;
  char v14 = *((unsigned char *)a1 + 32);
  uint64_t v44 = v12;
  *(unsigned char *)(v12 + 48) = v14;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = qword_1E9A48E40;
  uint64_t v45 = v10;
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1E9A4A440;
  uint64_t v17 = swift_getKeyPath();
  uint64_t v18 = qword_1E9A490F8;
  uint64_t v42 = v16;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_1AD9DE890();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v7, 1, 1, v19);
  uint64_t v41 = sub_1AD9DE8D0();
  sub_1AD88F10C((uint64_t)v7, (uint64_t)&qword_1EB725AB0, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1AD8892C8);
  uint64_t v20 = swift_getKeyPath();
  unsigned __int8 v76 = 0;
  uint64_t v21 = MEMORY[0x1E4FBB3D0];
  uint64_t v22 = MEMORY[0x1E4FBB718];
  sub_1AD88F024((uint64_t)(a1 + 3), (uint64_t)v72, (uint64_t)&qword_1EB725080, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88FC34);
  sub_1AD88F024((uint64_t)v72, (uint64_t)&v73, (uint64_t)&qword_1EB725080, v21, v22, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88FC34);
  if (v74)
  {
    uint64_t v23 = 0;
    uint64_t v40 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 255;
  }
  else
  {
    uint64_t v40 = v73;
    uint64_t v24 = a1[2];
    uint64_t v23 = swift_getKeyPath();
    uint64_t v25 = 0;
  }
  int v37 = v76;
  *(void *)&long long v49 = 0;
  *((void *)&v49 + 1) = v48;
  *(void *)&long long v50 = 1;
  *((void *)&v50 + 1) = v8;
  *(void *)&long long v51 = __PAIR64__(v46, v47);
  *((void *)&v51 + 1) = v9;
  uint64_t v26 = v44;
  *(void *)&long long v52 = v45;
  *((void *)&v52 + 1) = v11;
  long long v36 = sub_1AD88E434;
  *(void *)&long long v53 = sub_1AD88E434;
  *((void *)&v53 + 1) = v44;
  uint64_t v27 = KeyPath;
  *(void *)&long long v54 = KeyPath;
  BYTE8(v54) = v76;
  *(_DWORD *)((char *)&v54 + 9) = *(_DWORD *)v75;
  HIDWORD(v54) = *(_DWORD *)&v75[3];
  *(void *)&long long v55 = v17;
  uint64_t v38 = v20;
  uint64_t v39 = v17;
  uint64_t v28 = v42;
  *((void *)&v55 + 1) = v42;
  *(void *)&long long v56 = v20;
  uint64_t v29 = v40;
  uint64_t v30 = v41;
  *((void *)&v56 + 1) = v41;
  long long v31 = v52;
  *(_OWORD *)(a2 + 32) = v51;
  *(_OWORD *)(a2 + 48) = v31;
  long long v32 = v54;
  *(_OWORD *)(a2 + 64) = v53;
  *(_OWORD *)(a2 + 80) = v32;
  long long v33 = v50;
  *(_OWORD *)a2 = v49;
  *(_OWORD *)(a2 + 16) = v33;
  long long v34 = v56;
  *(_OWORD *)(a2 + 96) = v55;
  *(_OWORD *)(a2 + 112) = v34;
  *(void *)(a2 + 128) = v23;
  *(void *)(a2 + 136) = v25;
  *(void *)(a2 + 144) = v29;
  *(void *)(a2 + 152) = v24;
  sub_1AD88E498((uint64_t)&v49);
  sub_1AD88E520(v23, v25);
  sub_1AD88E538(v23, v25);
  v57[0] = 0;
  v57[1] = v48;
  v57[2] = 1;
  void v57[3] = v8;
  unsigned int v58 = v47;
  unsigned int v59 = v46;
  uint64_t v60 = v9;
  uint64_t v61 = v45;
  uint64_t v62 = v11;
  char v63 = v36;
  uint64_t v64 = v26;
  uint64_t v65 = v27;
  char v66 = v37;
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v75;
  *(_DWORD *)&v67[3] = *(_DWORD *)&v75[3];
  uint64_t v68 = v39;
  uint64_t v69 = v28;
  uint64_t v70 = v38;
  uint64_t v71 = v30;
  return sub_1AD88E550((uint64_t)v57);
}

BOOL sub_1AD88C194(BOOL result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = MEMORY[0x1E4FBB3D0];
    uint64_t v5 = MEMORY[0x1E4FBB718];
    sub_1AD88F024(a2 + 24, (uint64_t)v6, (uint64_t)&qword_1EB725080, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88FC34);
    sub_1AD88F024((uint64_t)v6, (uint64_t)&v7, (uint64_t)&qword_1EB725080, v4, v5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1AD88FC34);
    return (v8 & 1) != 0 || *(double *)(a2 + 8) * (double)v3 != v7;
  }
  return result;
}

double sub_1AD88C274@<D0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v3;
  char v14 = *(unsigned char *)(v1 + 32);
  uint64_t v4 = sub_1AD9DF320();
  uint64_t v6 = v5;
  sub_1AD88BCD8((uint64_t *)v13, (uint64_t)v15);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  long long v7 = v15[7];
  *(_OWORD *)(a1 + 112) = v15[6];
  *(_OWORD *)(a1 + 128) = v7;
  long long v8 = v15[9];
  *(_OWORD *)(a1 + 144) = v15[8];
  *(_OWORD *)(a1 + 160) = v8;
  long long v9 = v15[3];
  *(_OWORD *)(a1 + 48) = v15[2];
  *(_OWORD *)(a1 + 64) = v9;
  long long v10 = v15[5];
  *(_OWORD *)(a1 + 80) = v15[4];
  *(_OWORD *)(a1 + 96) = v10;
  double result = *(double *)v15;
  long long v12 = v15[1];
  *(_OWORD *)(a1 + 16) = v15[0];
  *(_OWORD *)(a1 + 32) = v12;
  return result;
}

double sub_1AD88C2F8@<D0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  sub_1AD9DDDE0();
  if (qword_1E9A48DF8 != -1) {
    swift_once();
  }
  sub_1AD9DF320();
  sub_1AD9DDDC0();
  if (qword_1E9A48E38 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1E9A4A438;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  sub_1AD9DDDE0();
  double v13 = v12 * 0.5;
  char v14 = a2 & 1;
  sub_1AD861F90(a1, v14);
  double v15 = sub_1AD966C28(a1, v14);
  sub_1AD862078(a1, v14);
  sub_1AD9DDDE0();
  *(void *)a3 = v18;
  double result = (a5 - a4) / a5 * v16 + -1.0 / v15 * 0.5;
  *(unsigned char *)(a3 + 8) = v19;
  *(void *)(a3 + 16) = v20;
  *(unsigned char *)(a3 + 24) = v21;
  *(void *)(a3 + 32) = v22;
  *(void *)(a3 + 40) = v23;
  *(void *)(a3 + 48) = KeyPath;
  *(void *)(a3 + 56) = v10;
  *(double *)(a3 + 64) = v13;
  *(double *)(a3 + 72) = result;
  return result;
}

uint64_t sub_1AD88C4B8@<X0>(double (**a1)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(unsigned char *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v5;
  *(void *)(v7 + 40) = v6;
  *a1 = sub_1AD890868;
  a1[1] = (double (*)@<D0>(uint64_t@<X8>))v7;
  return sub_1AD861F90(v3, v4);
}

uint64_t sub_1AD88C540(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 128);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), v4);
  return a1;
}

double sub_1AD88C5AC(uint64_t a1)
{
  *(unsigned char *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_1AD88C5C8()
{
  if (!qword_1E9A4A548)
  {
    sub_1AD8892C8(255, &qword_1E9A4A4F0, (uint64_t (*)(uint64_t))sub_1AD889548, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A548);
    }
  }
}

uint64_t sub_1AD88C660(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD88C6C8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD88C728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1AD88C76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD88C7B8(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    long long v8 = (int *)type metadata accessor for WeekResults(0);
    uint64_t v9 = v8[6];
    uint64_t v10 = v7 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_1AD9DC7C0();
    double v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    *(void *)(v7 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
    uint64_t v14 = v8[8];
    uint64_t v15 = v7 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
    *(void *)uint64_t v15 = *(void *)v16;
    *(void *)(v7 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
    uint64_t v17 = v8[10];
    uint64_t v18 = v7 + v17;
    uint64_t v19 = (uint64_t)a2 + v17;
    uint64_t v20 = sub_1AD9DCE40();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = v8[11];
    uint64_t v22 = *(void **)((char *)a2 + v21);
    *(void *)(v7 + v21) = v22;
    uint64_t v23 = v8[12];
    uint64_t v24 = *(void **)((char *)a2 + v23);
    *(void *)(v7 + v23) = v24;
    uint64_t v25 = v8[13];
    uint64_t v26 = *(void **)((char *)a2 + v25);
    *(void *)(v7 + v25) = v26;
    uint64_t v27 = a3[6];
    *(unsigned char *)(v7 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(unsigned char *)(v7 + v27) = *((unsigned char *)a2 + v27);
    uint64_t v28 = a3[8];
    *(unsigned char *)(v7 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *(unsigned char *)(v7 + v28) = *((unsigned char *)a2 + v28);
    *(void *)(v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    id v29 = v22;
    id v30 = v24;
    id v31 = v26;
  }
  return v7;
}

void sub_1AD88C9A8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v3 = a1 + v2[6];
  uint64_t v4 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = a1 + v2[10];
  uint64_t v6 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  uint64_t v7 = *(void **)(a1 + v2[13]);
}

uint64_t sub_1AD88CA94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1AD9DC7C0();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  uint64_t v13 = v7[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  uint64_t v16 = v7[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = v7[11];
  uint64_t v21 = *(void **)(a2 + v20);
  *(void *)(a1 + v20) = v21;
  uint64_t v22 = v7[12];
  uint64_t v23 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v23;
  uint64_t v24 = v7[13];
  uint64_t v25 = *(void **)(a2 + v24);
  *(void *)(a1 + v24) = v25;
  uint64_t v26 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v26) = *(unsigned char *)(a2 + v26);
  uint64_t v27 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v27) = *(unsigned char *)(a2 + v27);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  id v28 = v21;
  id v29 = v23;
  id v30 = v25;
  return a1;
}

uint64_t sub_1AD88CC30(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  uint64_t v12 = v7[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  char v15 = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = v15;
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  uint64_t v16 = v7[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = v7[11];
  uint64_t v21 = *(void **)(a2 + v20);
  uint64_t v22 = *(void **)(a1 + v20);
  *(void *)(a1 + v20) = v21;
  id v23 = v21;

  uint64_t v24 = v7[12];
  uint64_t v25 = *(void **)(a2 + v24);
  uint64_t v26 = *(void **)(a1 + v24);
  *(void *)(a1 + v24) = v25;
  id v27 = v25;

  uint64_t v28 = v7[13];
  id v29 = *(void **)(a2 + v28);
  id v30 = *(void **)(a1 + v28);
  *(void *)(a1 + v28) = v29;
  id v31 = v29;

  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1AD88CDE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  uint64_t v12 = v7[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  uint64_t v15 = v7[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  uint64_t v19 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1AD88CF5C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = (int *)type metadata accessor for WeekResults(0);
  uint64_t v7 = v6[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DC7C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
  uint64_t v11 = v6[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(a1 + v6[9]) = *(void *)(a2 + v6[9]);
  uint64_t v14 = v6[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = v6[11];
  uint64_t v19 = *(void **)(a1 + v18);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);

  uint64_t v20 = v6[12];
  uint64_t v21 = *(void **)(a1 + v20);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);

  uint64_t v22 = v6[13];
  id v23 = *(void **)(a1 + v22);
  *(void *)(a1 + v22) = *(void *)(a2 + v22);

  uint64_t v24 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  uint64_t v25 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1AD88D0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD88D10C);
}

uint64_t sub_1AD88D10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_2Tm(a1, a2, a3, type metadata accessor for WeekResults);
}

uint64_t sub_1AD88D124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD88D138);
}

uint64_t sub_1AD88D138(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3Tm(a1, a2, a3, a4, type metadata accessor for WeekResults);
}

uint64_t sub_1AD88D150()
{
  uint64_t result = type metadata accessor for WeekResults(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for WeekDiagram.Options()
{
  return &type metadata for WeekDiagram.Options;
}

uint64_t sub_1AD88D208()
{
  return sub_1AD88E2D4(&qword_1E9A4A560, (void (*)(uint64_t))sub_1AD88D250);
}

void sub_1AD88D250()
{
  if (!qword_1E9A4A568)
  {
    sub_1AD8892C8(255, &qword_1E9A4A4A8, (uint64_t (*)(uint64_t))sub_1AD889180, MEMORY[0x1E4F3F108]);
    sub_1AD890490(&qword_1E9A4A570, &qword_1E9A4A4A8, (uint64_t (*)(uint64_t))sub_1AD889180);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A568);
    }
  }
}

unint64_t sub_1AD88D308()
{
  unint64_t result = qword_1E9A4A578;
  if (!qword_1E9A4A578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A578);
  }
  return result;
}

unint64_t sub_1AD88D360()
{
  unint64_t result = qword_1E9A4A580;
  if (!qword_1E9A4A580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A580);
  }
  return result;
}

unint64_t sub_1AD88D3B8()
{
  unint64_t result = qword_1E9A4A588;
  if (!qword_1E9A4A588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A588);
  }
  return result;
}

unint64_t sub_1AD88D410()
{
  unint64_t result = qword_1E9A4A590;
  if (!qword_1E9A4A590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A590);
  }
  return result;
}

uint64_t sub_1AD88D464()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD88D480()
{
  if (!qword_1E9A4A598)
  {
    sub_1AD8892C8(255, &qword_1E9A4A5A0, (uint64_t (*)(uint64_t))sub_1AD88D518, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A598);
    }
  }
}

void sub_1AD88D518()
{
  if (!qword_1E9A4A5A8)
  {
    sub_1AD88E9C4(255, &qword_1E9A4A5B0, (void (*)(uint64_t))type metadata accessor for WeekBarChartBars, (void (*)(uint64_t))sub_1AD88D5FC);
    sub_1AD88FC34(255, &qword_1E9A4A5C8, (uint64_t)&type metadata for YAxisLabels, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4A5A8);
    }
  }
}

uint64_t type metadata accessor for WeekBarChartBars(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4A5D0);
}

void sub_1AD88D5FC()
{
  if (!qword_1E9A4A5B8)
  {
    sub_1AD88D658();
    unint64_t v0 = sub_1AD9DE450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A5B8);
    }
  }
}

unint64_t sub_1AD88D658()
{
  unint64_t result = qword_1E9A4A5C0;
  if (!qword_1E9A4A5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A5C0);
  }
  return result;
}

uint64_t sub_1AD88D6AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AD96E964(a1, *(void *)(v2 + 16), a2);
}

uint64_t initializeBufferWithCopyOfBuffer for YAxisLabels(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  id v4 = v3;
  return a1;
}

void destroy for YAxisLabels(uint64_t a1)
{
}

void *assignWithCopy for YAxisLabels(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = (void *)a2[2];
  id v4 = (void *)a1[2];
  a1[2] = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for YAxisLabels(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for YAxisLabels(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for YAxisLabels(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for YAxisLabels()
{
  return &type metadata for YAxisLabels;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for GridLines(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GridLines(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GridLines()
{
  return &type metadata for GridLines;
}

uint64_t sub_1AD88D8A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    sub_1AD8892C8(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = sub_1AD9DE320();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v5;
}

uint64_t sub_1AD88DA04(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  sub_1AD8892C8(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1AD9DE320();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_1AD88DAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  sub_1AD8892C8(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_1AD9DE320();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1AD88DBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3D548];
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD88F10C(a1 + v6, (uint64_t)&qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD8892C8);
    sub_1AD8892C8(0, &qword_1EB724E28, v9, v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_1AD9DE320();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1AD88DD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  sub_1AD8892C8(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  uint64_t v8 = v7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_1AD9DE320();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v5, v6, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1AD88DE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3D548];
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1AD88F10C(a1 + v6, (uint64_t)&qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648], (uint64_t (*)(void))sub_1AD8892C8);
    sub_1AD8892C8(0, &qword_1EB724E28, v9, v10);
    uint64_t v12 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_1AD9DE320();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1AD88DFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD88DFDC);
}

uint64_t sub_1AD88DFDC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1AD8892C8(0, &qword_1E9A49B60, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C658]);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1AD88E0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD88E0D0);
}

void *sub_1AD88E0D0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *__n128 result = (a2 - 1);
  }
  else
  {
    sub_1AD8892C8(0, &qword_1E9A49B60, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C658]);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1AD88E1A8()
{
  sub_1AD8892C8(319, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1AD88E28C()
{
  return sub_1AD88E2D4(&qword_1E9A4A5E0, (void (*)(uint64_t))sub_1AD88E31C);
}

uint64_t sub_1AD88E2D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD88E31C()
{
  if (!qword_1E9A4A5E8)
  {
    sub_1AD8892C8(255, &qword_1E9A4A5A0, (uint64_t (*)(uint64_t))sub_1AD88D518, MEMORY[0x1E4F3F108]);
    sub_1AD890490(&qword_1E9A4A5F0, &qword_1E9A4A5A0, (uint64_t (*)(uint64_t))sub_1AD88D518);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A5E8);
    }
  }
}

uint64_t sub_1AD88E3D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD88E3EC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD88E408()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD88E424()
{
  return swift_deallocObject();
}

BOOL sub_1AD88E434(BOOL a1)
{
  return sub_1AD88C194(a1, v1 + 16);
}

uint64_t sub_1AD88E43C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1AD9DE0D0();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD88E468()
{
  return sub_1AD9DE0E0();
}

uint64_t sub_1AD88E498(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  char v3 = *(unsigned char *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1AD861F90(v2, v3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1AD88E520(uint64_t result, char a2)
{
  if (a2 != -1) {
    return sub_1AD861F90(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1AD88E538(uint64_t result, char a2)
{
  if (a2 != -1) {
    return sub_1AD862078(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1AD88E550(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  char v3 = *(unsigned char *)(a1 + 88);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1AD862078(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1AD88E5DC()
{
  uint64_t v1 = (int *)(type metadata accessor for WeekBarChartBars(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  swift_bridgeObjectRelease();
  unint64_t v3 = v0 + v2 + v1[10];
  sub_1AD8892C8(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1AD9DE320();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1AD88E720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for WeekBarChartBars(0) - 8);
  uint64_t v6 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  return sub_1AD88A2A8(a1, v6, a2);
}

void sub_1AD88E7A0()
{
  if (!qword_1E9A4A5F8)
  {
    sub_1AD88E808();
    unint64_t v0 = sub_1AD9DDEA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A5F8);
    }
  }
}

void sub_1AD88E808()
{
  if (!qword_1E9A4A600)
  {
    sub_1AD8892C8(255, &qword_1E9A4A608, type metadata accessor for DayRelativeDuration, MEMORY[0x1E4FBB320]);
    sub_1AD8892C8(255, &qword_1E9A4A610, (uint64_t (*)(uint64_t))sub_1AD88E900, MEMORY[0x1E4F3F108]);
    sub_1AD88ECC0();
    unint64_t v0 = sub_1AD9DF270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A600);
    }
  }
}

void sub_1AD88E900()
{
  if (!qword_1E9A4A618)
  {
    sub_1AD88E9C4(255, &qword_1E9A4A620, sub_1AD88EA38, (void (*)(uint64_t))sub_1AD88EB90);
    sub_1AD88FC34(255, &qword_1E9A4A670, MEMORY[0x1E4F3EDA0], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4A618);
    }
  }
}

void sub_1AD88E9C4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_1AD9DDFC0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD88EA38(uint64_t a1)
{
}

void sub_1AD88EA6C()
{
  if (!qword_1E9A4A630)
  {
    sub_1AD890B18(255, &qword_1E9A4A638);
    sub_1AD890C28(&qword_1E9A4A640, &qword_1E9A4A638, (uint64_t)&type metadata for VerticalBar, (void (*)(void))sub_1AD88EB3C);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4A630);
    }
  }
}

unint64_t sub_1AD88EB3C()
{
  unint64_t result = qword_1E9A4A648;
  if (!qword_1E9A4A648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A648);
  }
  return result;
}

void sub_1AD88EB90()
{
  if (!qword_1E9A4A650)
  {
    sub_1AD88EC38(255);
    sub_1AD890338(&qword_1E9A4A660, sub_1AD88EC38, (void (*)(void))sub_1AD88EC8C);
    unint64_t v0 = sub_1AD9DE050();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A650);
    }
  }
}

void sub_1AD88EC38(uint64_t a1)
{
}

uint64_t type metadata accessor for XAxisBarLabel(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4A690);
}

uint64_t sub_1AD88EC8C()
{
  return sub_1AD88E2D4(&qword_1E9A4A668, (void (*)(uint64_t))type metadata accessor for XAxisBarLabel);
}

unint64_t sub_1AD88ECC0()
{
  unint64_t result = qword_1E9A4A678;
  if (!qword_1E9A4A678)
  {
    sub_1AD8892C8(255, &qword_1E9A4A608, type metadata accessor for DayRelativeDuration, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A678);
  }
  return result;
}

uint64_t sub_1AD88ED48()
{
  uint64_t v1 = sub_1AD9DDDF0();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = (int *)(type metadata accessor for WeekBarChartBars(0) - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(*(void *)v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  unint64_t v7 = v0 + v6 + v5[10];
  sub_1AD8892C8(0, &qword_1EB724E28, MEMORY[0x1E4F3D548], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_1AD9DE320();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1AD88EF18@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_1AD9DDDF0() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for WeekBarChartBars(0) - 8);
  uint64_t v9 = (unsigned char *)(v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
  return sub_1AD88A5C8(a1, v9, a2);
}

uint64_t sub_1AD88EFFC()
{
  return sub_1AD890490(&qword_1E9A4A680, &qword_1E9A4A610, (uint64_t (*)(uint64_t))sub_1AD88E900);
}

uint64_t sub_1AD88F024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t sub_1AD88F098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_1AD88F10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t destroy for GoalLine(uint64_t a1)
{
  return sub_1AD862078(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t initializeWithCopy for GoalLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_1AD861F90(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for GoalLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_1AD861F90(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_1AD862078(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for GoalLine(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_1AD862078(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for GoalLine(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GoalLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GoalLine()
{
  return &type metadata for GoalLine;
}

void *sub_1AD88F320(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v4 = *a2;
    int v4 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
    *(void *)(a1 + 32) = a2[4];
    uint64_t v7 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
    uint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = sub_1AD9DCE40();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *((unsigned char *)v4 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return v4;
}

uint64_t sub_1AD88F420(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  uint64_t v2 = sub_1AD9DCE40();
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(v1, v2);
}

uint64_t sub_1AD88F494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1AD88F544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1AD88F604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1AD88F6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1AD88F774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD88F788);
}

uint64_t sub_1AD88F788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_2Tm(a1, a2, a3, type metadata accessor for DayRelativeDuration);
}

uint64_t __swift_get_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    unsigned int v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v11 >= 2) {
      return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1AD88F874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD88F888);
}

uint64_t sub_1AD88F888(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3Tm(a1, a2, a3, a4, type metadata accessor for DayRelativeDuration);
}

uint64_t __swift_store_extra_inhabitant_index_3Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t sub_1AD88F960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD88F980(a1, a2, a3, type metadata accessor for DayRelativeDuration);
}

uint64_t sub_1AD88F980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AD88FA14()
{
  return sub_1AD88E2D4(&qword_1E9A4A6A0, (void (*)(uint64_t))sub_1AD88FA5C);
}

void sub_1AD88FA5C()
{
  if (!qword_1E9A4A6A8)
  {
    sub_1AD8892C8(255, &qword_1E9A4A6B0, (uint64_t (*)(uint64_t))sub_1AD88FB10, MEMORY[0x1E4F3F108]);
    sub_1AD890490(&qword_1E9A4A6D8, &qword_1E9A4A6B0, (uint64_t (*)(uint64_t))sub_1AD88FB10);
    unint64_t v0 = sub_1AD9DF1A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A6A8);
    }
  }
}

void sub_1AD88FB10()
{
  if (!qword_1E9A4A6B8)
  {
    sub_1AD88FBA4();
    sub_1AD88FC34(255, &qword_1E9A4A6D0, (uint64_t)&type metadata for GoalLine, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4A6B8);
    }
  }
}

void sub_1AD88FBA4()
{
  if (!qword_1E9A4A6C0)
  {
    sub_1AD890418(255, &qword_1E9A4A6C8);
    sub_1AD889640(255, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A6C0);
    }
  }
}

void sub_1AD88FC34(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1AD88FC84()
{
  unint64_t result = qword_1E9A4A6E0;
  if (!qword_1E9A4A6E0)
  {
    sub_1AD88FD1C();
    sub_1AD88FF54();
    sub_1AD89001C((unint64_t *)&qword_1EB725C78, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A6E0);
  }
  return result;
}

void sub_1AD88FD1C()
{
  if (!qword_1E9A4A6E8)
  {
    sub_1AD88FD9C();
    sub_1AD889640(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A6E8);
    }
  }
}

void sub_1AD88FD9C()
{
  if (!qword_1E9A4A6F0)
  {
    sub_1AD88FE1C();
    sub_1AD889640(255, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A6F0);
    }
  }
}

void sub_1AD88FE1C()
{
  if (!qword_1E9A4A6F8)
  {
    sub_1AD8892C8(255, &qword_1E9A4A700, (uint64_t (*)(uint64_t))sub_1AD88FED0, MEMORY[0x1E4F3F108]);
    sub_1AD890490(&qword_1E9A4A710, &qword_1E9A4A700, (uint64_t (*)(uint64_t))sub_1AD88FED0);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A6F8);
    }
  }
}

void sub_1AD88FED0()
{
  if (!qword_1E9A4A708)
  {
    sub_1AD890B18(255, &qword_1EB725A30);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1E9A4A708);
    }
  }
}

unint64_t sub_1AD88FF54()
{
  unint64_t result = qword_1E9A4A718;
  if (!qword_1E9A4A718)
  {
    sub_1AD88FD9C();
    sub_1AD88E2D4(&qword_1E9A4A720, (void (*)(uint64_t))sub_1AD88FE1C);
    sub_1AD89001C((unint64_t *)&qword_1E9A49D48, &qword_1E9A49CC8, &qword_1E9A49CD0, MEMORY[0x1E4F3E1B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A718);
  }
  return result;
}

uint64_t sub_1AD89001C(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD889640(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD89006C()
{
  return sub_1AD88E2D4(&qword_1E9A4A728, (void (*)(uint64_t))sub_1AD8900B4);
}

void sub_1AD8900B4()
{
  if (!qword_1E9A4A730)
  {
    sub_1AD8892C8(255, &qword_1E9A4A738, (uint64_t (*)(uint64_t))sub_1AD890168, MEMORY[0x1E4F3F108]);
    sub_1AD890490(&qword_1E9A4A780, &qword_1E9A4A738, (uint64_t (*)(uint64_t))sub_1AD890168);
    unint64_t v0 = sub_1AD9DF180();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A730);
    }
  }
}

void sub_1AD890168()
{
  if (!qword_1E9A4A740)
  {
    sub_1AD889430(255, &qword_1E9A4A748, (void (*)(uint64_t))sub_1AD8901FC);
    sub_1AD8903A8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4A740);
    }
  }
}

void sub_1AD8901FC()
{
  if (!qword_1E9A4A750)
  {
    sub_1AD890290();
    sub_1AD88E2D4(&qword_1E9A4A768, (void (*)(uint64_t))sub_1AD890290);
    unint64_t v0 = sub_1AD9DDEE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A750);
    }
  }
}

void sub_1AD890290()
{
  if (!qword_1E9A4A758)
  {
    sub_1AD88E808();
    sub_1AD890338(&qword_1E9A4A760, (void (*)(uint64_t))sub_1AD88E808, (void (*)(void))sub_1AD88EFFC);
    unint64_t v0 = sub_1AD9DF0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A758);
    }
  }
}

uint64_t sub_1AD890338(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8903A8()
{
  if (!qword_1E9A4A770)
  {
    sub_1AD890418(255, &qword_1E9A4A778);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A770);
    }
  }
}

void sub_1AD890418(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_1AD889640(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t v3 = sub_1AD9DDFC0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_1AD890490(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8892C8(255, a2, a3, MEMORY[0x1E4F3F108]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD8904F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD890510()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD89052C()
{
  if (!qword_1E9A4A788)
  {
    sub_1AD8905B4(255, &qword_1E9A4A790, &qword_1E9A4A798);
    sub_1AD9DE6E0();
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A788);
    }
  }
}

void sub_1AD8905B4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1AD889720(255, a3);
    unint64_t v4 = sub_1AD9DDFC0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1AD89061C()
{
  unint64_t result = qword_1E9A4A7A0;
  if (!qword_1E9A4A7A0)
  {
    sub_1AD8905B4(255, &qword_1E9A4A790, &qword_1E9A4A798);
    sub_1AD8906B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A7A0);
  }
  return result;
}

unint64_t sub_1AD8906B4()
{
  unint64_t result = qword_1E9A4A7A8;
  if (!qword_1E9A4A7A8)
  {
    sub_1AD889720(255, &qword_1E9A4A798);
    sub_1AD89073C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A7A8);
  }
  return result;
}

unint64_t sub_1AD89073C()
{
  unint64_t result = qword_1E9A49CE8;
  if (!qword_1E9A49CE8)
  {
    sub_1AD890B18(255, (unint64_t *)&qword_1E9A49A78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49CE8);
  }
  return result;
}

uint64_t sub_1AD8907C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD89082C()
{
  sub_1AD862078(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  return swift_deallocObject();
}

double sub_1AD890868@<D0>(uint64_t a1@<X8>)
{
  return sub_1AD88C2F8(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_1AD890880()
{
  return sub_1AD8908DC(&qword_1E9A4A7B0, (void (*)(uint64_t))sub_1AD89052C, (void (*)(void))sub_1AD89061C, (void (*)(void))sub_1AD87BF14);
}

uint64_t sub_1AD8908DC(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD890968()
{
  return sub_1AD88E2D4(&qword_1E9A4A7B8, (void (*)(uint64_t))sub_1AD8909B0);
}

void sub_1AD8909B0()
{
  if (!qword_1E9A4A7C0)
  {
    sub_1AD890A58(255);
    sub_1AD8908DC(&qword_1E9A4A7E0, sub_1AD890A58, (void (*)(void))sub_1AD890B64, (void (*)(void))sub_1AD8589C4);
    unint64_t v0 = sub_1AD9DDEE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A7C0);
    }
  }
}

void sub_1AD890A58(uint64_t a1)
{
}

void sub_1AD890A80()
{
  if (!qword_1E9A4A7D0)
  {
    sub_1AD890B18(255, (unint64_t *)&qword_1E9A4A7D8);
    sub_1AD889640(255, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A7D0);
    }
  }
}

void sub_1AD890B18(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1AD9DDFC0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t sub_1AD890B64()
{
  unint64_t result = qword_1E9A4A7E8;
  if (!qword_1E9A4A7E8)
  {
    sub_1AD890A80();
    sub_1AD890C28((unint64_t *)&qword_1E9A4A7F0, (unint64_t *)&qword_1E9A4A7D8, MEMORY[0x1E4F3F0D0], (void (*)(void))sub_1AD890CB0);
    sub_1AD89001C((unint64_t *)&qword_1EB725C78, (unint64_t *)&qword_1EB725C80, &qword_1EB725C88, MEMORY[0x1E4F3EB98]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A7E8);
  }
  return result;
}

uint64_t sub_1AD890C28(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD890B18(255, a2);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD890CB0()
{
  unint64_t result = qword_1E9A4A7F8;
  if (!qword_1E9A4A7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A7F8);
  }
  return result;
}

Swift::Double __swiftcall Double.init(hours:)(Swift::Double hours)
{
  return hours * 60.0 * 60.0;
}

Swift::Double __swiftcall Double.init(minutes:)(Swift::Double minutes)
{
  return minutes * 60.0;
}

Swift::Double __swiftcall Double.init(hours:)(Swift::Int hours)
{
  return (double)hours * 60.0 * 60.0;
}

Swift::Double __swiftcall Double.init(minutes:)(Swift::Int minutes)
{
  return (double)minutes * 60.0;
}

double static Double.hours(_:)(double a1)
{
  return a1 * 60.0 * 60.0;
}

double static Double.minutes(_:)(double a1)
{
  return a1 * 60.0;
}

double static Double.minutes(_:)(uint64_t a1)
{
  return (double)a1 * 60.0;
}

Swift::Double __swiftcall Double.init(hours:minutes:)(Swift::Int hours, Swift::Int minutes)
{
  Swift::Int v2 = 60 * hours;
  if ((unsigned __int128)(hours * (__int128)60) >> 64 == (60 * hours) >> 63)
  {
    BOOL v3 = __OFADD__(v2, minutes);
    uint64_t v4 = v2 + minutes;
    if (!v3) {
      return (double)v4 * 60.0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double Double.minutes.getter(double a1)
{
  return a1 / 60.0;
}

double Double.hours.getter(double a1)
{
  return a1 / 60.0 / 60.0;
}

uint64_t Double.hoursAndMinutes.getter(double a1)
{
  if (a1 >= 9.22337204e18 || a1 <= -9.22337204e18) {
    return 0;
  }
  if ((~*(void *)&a1 & 0x7FF0000000000000) != 0)
  {
    if (a1 > -9.22337204e18) {
      return (uint64_t)a1 / 3600;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Double __swiftcall Double.roundToNearestMinute()()
{
  return round(v0 / 60.0) * 60.0;
}

uint64_t ScheduleOccurrenceEditModel.__allocating_init(occurrence:isAdding:isSingleDayOverride:weekdaysWithExistingOccurrences:sleepDurationGoalPublisher:sleepSchedulePublisher:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  swift_allocObject();
  uint64_t v16 = sub_1AD8945FC(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_release();
  swift_release();
  return v16;
}

uint64_t ScheduleOccurrenceEditModel.showsAddButtonTitle.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ScheduleOccurrenceEditModel.validScheduleRangeDidChange.getter()
{
  return sub_1AD9DDBF0();
}

id ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  id v2 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  objc_msgSend(v2, sel_copy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
  swift_dynamicCast();
  objc_msgSend(v5, sel_mutableCopy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&unk_1E9A4D9E0);
  swift_dynamicCast();
  BOOL v3 = *(void **)(v0 + v1);
  *(void *)(v0 + v1) = v5;

  return v2;
}

void ScheduleOccurrenceEditModel.alarmEnabled.setter(char a1)
{
}

uint64_t ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  objc_msgSend(a1, sel_copy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
  swift_dynamicCast();
  swift_beginAccess();
  uint64_t v6 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = v16;

  uint64_t v7 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  *(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence) = a1;
  id v9 = a1;

  unint64_t v10 = a2 & ~(unint64_t)objc_msgSend(v9, sel_weekdays);
  swift_beginAccess();
  *(void *)(v3 + 56) = v10;
  id v11 = objc_msgSend(*(id *)(v3 + v7), sel_alarmConfiguration);
  objc_msgSend(v11, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  sub_1AD9DDAC0();

  sub_1AD9DDB00();
  if (v15)
  {
    id v12 = *(id *)(v3 + v7);
    uint64_t v13 = (void *)sub_1AD9DCDA0();
    objc_msgSend(v15, sel_allowableRangeForModifiedOccurrence_gregorianCalendar_, v12, v13);
  }
  return sub_1AD9DDB10();
}

uint64_t ScheduleOccurrenceEditModel.isValid.getter()
{
  if (!sub_1AD893D20()) {
    goto LABEL_8;
  }
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  if (*(unsigned char *)(v0 + 49) == 1)
  {
    if ((objc_msgSend(v2, sel_isSingleDayOverride) & 1) == 0)
    {
LABEL_8:
      char v4 = 0;
      return v4 & 1;
    }
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_weekdays);
    if (v3 == (id)*MEMORY[0x1E4FA5490] || !objc_msgSend(*(id *)(v0 + v1), sel_weekdays)) {
      goto LABEL_8;
    }
  }
  sub_1AD893F90((uint64_t)&v6);
  char v4 = v7 | (v6 == 0);
  return v4 & 1;
}

uint64_t ScheduleOccurrenceEditModel.alarmConfiguration.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v1, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  return v3;
}

uint64_t ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 49);
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  id v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  char v4 = (void *)sub_1AD9DC8B0();
  if (v1 == 1)
  {
    id v5 = (id)sub_1AD9DC8B0();
    uint64_t v6 = (void *)sub_1AD9DCDA0();
    objc_msgSend(v3, sel_applyHourAndMinuteFromBedtimeComponents_wakeUpComponents_gregorianCalendar_, v4, v5, v6);
  }
  else
  {
    objc_msgSend(v3, sel_setBedtimeComponents_, v4);

    id v5 = *(id *)(v0 + v2);
    uint64_t v6 = (void *)sub_1AD9DC8B0();
    objc_msgSend(v5, sel_setWakeUpComponents_, v6);
  }

  return sub_1AD9DDAC0();
}

uint64_t ScheduleOccurrenceEditModel.weekdays.setter(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_setWeekdays_, a1);
  sub_1AD9DDB00();
  if (v6)
  {
    id v3 = *(id *)(v1 + v2);
    char v4 = (void *)sub_1AD9DCDA0();
    objc_msgSend(v6, sel_allowableRangeForModifiedOccurrence_gregorianCalendar_, v3, v4);
  }
  sub_1AD9DDB10();
  return sub_1AD9DDAC0();
}

uint64_t ScheduleOccurrenceEditModel.isValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:)(uint64_t a1, double a2, double a3, double a4)
{
  return ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(a1, 1, a2, a3, a4);
}

void ScheduleOccurrenceEditModel.isValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:)(char *a1, double a2, double a3, double a4)
{
}

uint64_t ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(uint64_t a1, int a2, double a3, double a4, double a5)
{
  int v87 = a2;
  sub_1AD894944(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68]);
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v86 = (char *)&v82 - v11;
  sub_1AD894944(0, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v12 - 8, v13);
  char v83 = (char *)&v82 - v14;
  uint64_t v15 = sub_1AD9DC990();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15, v17);
  uint64_t v85 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v18, v20);
  uint64_t v84 = (char *)&v82 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21, v23);
  uint64_t v88 = (char *)&v82 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24, v26);
  id v29 = (char *)&v82 - v28;
  uint64_t v31 = MEMORY[0x1F4188790](v27, v30);
  long long v33 = (char *)&v82 - v32;
  uint64_t v35 = MEMORY[0x1F4188790](v31, v34);
  int v37 = (char *)&v82 - v36;
  MEMORY[0x1F4188790](v35, v38);
  uint64_t v40 = (char *)&v82 - v39;
  sub_1AD9DC8F0();
  char v42 = v41;
  long long v43 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v43(v40, a1, v15);
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v40, v15);
    return 0;
  }
  sub_1AD9DC940();
  char v45 = v44;
  unsigned int v46 = v40;
  unsigned int v47 = *(void (**)(char *, uint64_t))(v16 + 8);
  v47(v46, v15);
  if (v45) {
    return 0;
  }
  uint64_t v82 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  id v48 = objc_msgSend(*(id *)(v89 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_wakeUpComponents);
  sub_1AD9DC8C0();

  sub_1AD9DC8F0();
  LOBYTE(v48) = v49;
  v43(v33, (uint64_t)v37, v15);
  if (v48)
  {
    v47(v33, v15);
    v47(v37, v15);
    return 0;
  }
  sub_1AD9DC940();
  char v51 = v50;
  v47(v33, v15);
  v47(v37, v15);
  if (v51) {
    return 0;
  }
  v43(v29, a1, v15);
  uint64_t v52 = sub_1AD9DC8F0();
  char v54 = v53;
  double v55 = (double)v52;
  uint64_t v56 = sub_1AD9DC940();
  long long v57 = v47;
  char v59 = v58;
  v57(v29, v15);
  double v60 = v55 * 60.0 * 60.0;
  if (v54) {
    double v60 = 0.0;
  }
  double v61 = (double)v56 * 60.0;
  if (v59) {
    double v61 = 0.0;
  }
  sub_1AD95398C(v90, round((v60 + v61) / a5) * a5);
  uint64_t v63 = v90[0];
  uint64_t v62 = v90[1];
  id v64 = objc_msgSend(*(id *)(v89 + v82), sel_wakeUpComponents);
  uint64_t v65 = v88;
  sub_1AD9DC8C0();

  uint64_t v66 = sub_1AD9DC8F0();
  if (v67) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = v66;
  }
  uint64_t v69 = sub_1AD9DC940();
  char v71 = v70;
  v57(v65, v15);
  if (v71) {
    uint64_t v72 = 0;
  }
  else {
    uint64_t v72 = v69;
  }
  uint64_t result = sub_1AD8943E4(v63, v62, v68, v72);
  BOOL v75 = v74 > a4;
  if (v74 < a3) {
    BOOL v75 = 1;
  }
  uint64_t v76 = !v75;
  if (v75 || (v87 & 1) != 0) {
    return v76;
  }
  if (v62 != 60 || !__OFADD__(v63, 1))
  {
    uint64_t v77 = sub_1AD9DCE40();
    uint64_t v76 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v83, 1, 1, v77);
    uint64_t v78 = sub_1AD9DCEB0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v86, 1, 1, v78);
    uint64_t v79 = v84;
    sub_1AD9DC970();
    id v80 = objc_msgSend(*(id *)(v89 + v82), sel_wakeUpComponents);
    uint64_t v81 = v85;
    sub_1AD9DC8C0();

    ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)();
    v57(v81, v15);
    v57(v79, v15);
    return v76;
  }
  __break(1u);
  return result;
}

void ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(char *a1, int a2, double a3, double a4, double a5)
{
  int v86 = a2;
  uint64_t v90 = a1;
  sub_1AD894944(0, &qword_1E9A49F50, MEMORY[0x1E4F27D68]);
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v84 = (char *)v81 - v11;
  sub_1AD894944(0, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v12 - 8, v13);
  char v83 = (char *)v81 - v14;
  uint64_t v15 = sub_1AD9DC990();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15, v17);
  uint64_t v82 = (char *)v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v18, v20);
  uint64_t v85 = (char *)v81 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21, v23);
  uint64_t v88 = (char *)v81 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24, v26);
  id v29 = (char *)v81 - v28;
  uint64_t v31 = MEMORY[0x1F4188790](v27, v30);
  long long v33 = (char *)v81 - v32;
  uint64_t v35 = MEMORY[0x1F4188790](v31, v34);
  int v37 = (char *)v81 - v36;
  MEMORY[0x1F4188790](v35, v38);
  uint64_t v40 = (char *)v81 - v39;
  uint64_t v89 = v5;
  uint64_t v87 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  id v41 = objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_bedtimeComponents);
  sub_1AD9DC8C0();

  sub_1AD9DC8F0();
  LOBYTE(v41) = v42;
  long long v43 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v43(v37, v40, v15);
  if (v41)
  {
    BOOL v45 = 0;
  }
  else
  {
    sub_1AD9DC940();
    BOOL v45 = (v44 & 1) == 0;
  }
  unsigned int v46 = *(void (**)(char *, uint64_t))(v16 + 8);
  v46(v37, v15);
  v46(v40, v15);
  if (v45)
  {
    unsigned int v47 = v90;
    sub_1AD9DC8F0();
    int v49 = v48 & 1;
    BOOL v50 = v49 == 0;
    v43(v33, v47, v15);
    if (v49)
    {
      uint64_t v77 = v33;
LABEL_26:
      v46(v77, v15);
      return;
    }
    sub_1AD9DC940();
    char v52 = v51;
    v46(v33, v15);
    if ((v52 & 1) == 0)
    {
      v81[1] = v50;
      v43(v29, v47, v15);
      uint64_t v53 = sub_1AD9DC8F0();
      char v55 = v54;
      double v56 = (double)v53;
      uint64_t v57 = sub_1AD9DC940();
      char v59 = v58;
      v46(v29, v15);
      double v60 = v56 * 60.0 * 60.0;
      if (v55) {
        double v60 = 0.0;
      }
      double v61 = (double)v57 * 60.0;
      if (v59) {
        double v61 = 0.0;
      }
      sub_1AD95398C(v91, round((v60 + v61) / a5) * a5);
      uint64_t v62 = v91[0];
      uint64_t v63 = v91[1];
      uint64_t v64 = v87;
      id v65 = objc_msgSend(*(id *)(v89 + v87), sel_bedtimeComponents);
      uint64_t v66 = v88;
      sub_1AD9DC8C0();

      uint64_t v67 = sub_1AD9DC8F0();
      uint64_t v69 = (v68 & 1) != 0 ? 0 : v67;
      uint64_t v70 = sub_1AD9DC940();
      char v72 = v71;
      v46(v66, v15);
      uint64_t v73 = (v72 & 1) != 0 ? 0 : v70;
      sub_1AD8943E4(v69, v73, v62, v63);
      BOOL v75 = v74 > a4;
      if (v74 < a3) {
        BOOL v75 = 1;
      }
      if (!v75 && (v86 & 1) == 0)
      {
        id v76 = objc_msgSend(*(id *)(v89 + v64), sel_bedtimeComponents);
        uint64_t v77 = v85;
        sub_1AD9DC8C0();

        if (v63 == 60 && __OFADD__(v62, 1))
        {
          __break(1u);
          return;
        }
        uint64_t v78 = sub_1AD9DCE40();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v83, 1, 1, v78);
        uint64_t v79 = sub_1AD9DCEB0();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v84, 1, 1, v79);
        id v80 = v82;
        sub_1AD9DC970();
        ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)();
        v46(v80, v15);
        goto LABEL_26;
      }
    }
  }
}

void ScheduleOccurrenceEditModel.alarmVolume.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  id v5 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v5, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v6 = objc_msgSend(v13, sel_soundVolume);

  if (!v6 || (objc_msgSend(v6, sel_floatValue), float v8 = v7, v6, v8 != a1))
  {
    id v9 = objc_msgSend(*(id *)(v2 + v4), sel_alarmConfiguration);
    objc_msgSend(v9, sel_mutableCopy);

    sub_1AD9DFF20();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    id v10 = objc_allocWithZone(NSNumber);
    *(float *)&double v11 = a1;
    id v12 = objc_msgSend(v10, sel_initWithFloat_, v11);
    objc_msgSend(v13, sel_setSoundVolume_, v12);

    objc_msgSend(*(id *)(v2 + v4), sel_setAlarmConfiguration_, v13);
    sub_1AD9DDAC0();
    sub_1AD9DDAC0();
  }
}

void ScheduleOccurrenceEditModel.allowsSnooze.setter(char a1)
{
}

void sub_1AD892574(char a1, SEL *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  id v7 = objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v7, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  objc_msgSend(v8, *a2, a1 & 1);
  objc_msgSend(*(id *)(v4 + v6), sel_setAlarmConfiguration_, v8);
  sub_1AD9DDAC0();
  sub_1AD9DDAC0();
}

void ScheduleOccurrenceEditModel.toneIdentifier.setter(uint64_t a1, uint64_t a2)
{
}

void ScheduleOccurrenceEditModel.vibrationIdentifier.setter(uint64_t a1, uint64_t a2)
{
}

void sub_1AD89269C(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  id v8 = objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v8, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  if (a2)
  {
    id v9 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = 0;
  }
  objc_msgSend(v10, *a3, v9);

  objc_msgSend(*(id *)(v5 + v7), sel_setAlarmConfiguration_, v10);
  sub_1AD9DDAC0();
  sub_1AD9DDAC0();
}

uint64_t ScheduleOccurrenceEditModel.hasChanges.getter()
{
  if (*(unsigned char *)(v0 + 48)) {
    return 1;
  }
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  swift_beginAccess();
  return objc_msgSend(v2, sel_isEqual_, *(void *)(v0 + 40)) ^ 1;
}

uint64_t ScheduleOccurrenceEditModel.hasUpcomingSingleDayOverride.getter()
{
  uint64_t v1 = sub_1AD9DC990();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD894944(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  id v9 = (char *)&v24 - v8;
  uint64_t v10 = sub_1AD9DCC70();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v16);
  uint64_t v18 = (char *)&v24 - v17;
  if ((*(unsigned char *)(v0 + 49) & 1) == 0)
  {
    sub_1AD9DDB00();
    id v19 = v27;
    if (!v27) {
      return v19 & 1;
    }
    uint64_t v25 = v2;
    id v20 = objc_msgSend(v27, sel_overrideOccurrence);

    id v26 = v20;
    if (v20)
    {
      id v21 = objc_msgSend(v26, sel_wakeUpComponents);
      sub_1AD9DC8C0();

      sub_1AD9DCDC0();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v9, v10);
        sub_1AD9DCC60();
        LOBYTE(v19) = sub_1AD9DCBC0();

        uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
        v22(v15, v10);
        v22(v18, v10);
        return v19 & 1;
      }

      sub_1AD894998((uint64_t)v9);
    }
  }
  LOBYTE(v19) = 0;
  return v19 & 1;
}

BOOL ScheduleOccurrenceEditModel.scheduleConflictsWithOverride.getter()
{
  uint64_t v1 = sub_1AD9DCC70();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 49)) {
    return 0;
  }
  sub_1AD9DDB00();
  uint64_t v6 = v15;
  if (!v15) {
    return 0;
  }
  id v7 = objc_msgSend(self, sel_templateModelForSchedule_, v15);
  id v8 = objc_msgSend(v7, sel_modelByApplyingChangesFromOccurrence_, *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence));
  sub_1AD9DCC60();
  id v9 = (void *)sub_1AD9DCBB0();
  id v10 = objc_msgSend(self, sel_builderWithSleepScheduleModel_date_, v8, v9);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v11 = objc_msgSend(v10, sel_buildTimelineWithOptions_, 2);
  id v12 = objc_msgSend(v11, sel_sleepScheduleInvalidReason);

  return v12 == (id)3;
}

id ScheduleOccurrenceEditModel.alarmEnabled.getter()
{
  return sub_1AD893630((SEL *)&selRef_isEnabled);
}

BOOL ScheduleOccurrenceEditModel.allowsDaySelection.getter()
{
  return (*(unsigned char *)(v0 + 49) & 1) == 0;
}

uint64_t ScheduleOccurrenceEditModel.alarmConfigurationDidChange.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceEditModel.modelWasEdited.getter()
{
  return swift_retain();
}

void sub_1AD892D5C(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  id v5 = v2;
}

id sub_1AD892DB4()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 40);
  return v1;
}

uint64_t ScheduleOccurrenceEditModel.isSingleDayOverride.getter()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t sub_1AD892E00()
{
  swift_beginAccess();
  return *(void *)(v0 + 56);
}

uint64_t ScheduleOccurrenceEditModel.sleepDurationGoalPublisher.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceEditModel.sleepSchedulePublisher.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceEditModel.pairedWatchSupportsSleep.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t ScheduleOccurrenceEditModel.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar;
  uint64_t v4 = sub_1AD9DCE40();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

void sub_1AD892EC0()
{
  qword_1E9A4A800 = 0x4072C00000000000;
}

double static ScheduleOccurrenceEditModel.editingIncrement.getter()
{
  return sub_1AD892F68(&qword_1E9A48E70, (uint64_t)&qword_1E9A4A800);
}

void sub_1AD892EF8()
{
  qword_1E9A4A808 = 0x40AC200000000000;
}

double static ScheduleOccurrenceEditModel.minimumTimeInBed.getter()
{
  return sub_1AD892F68(&qword_1E9A48E78, (uint64_t)&qword_1E9A4A808);
}

void sub_1AD892F30()
{
  qword_1E9A4A810 = 0x40F1940000000000;
}

double static ScheduleOccurrenceEditModel.maximumTimeInBed.getter()
{
  return sub_1AD892F68(&qword_1E9A48E80, (uint64_t)&qword_1E9A4A810);
}

double sub_1AD892F68(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

uint64_t ScheduleOccurrenceEditModel.init(occurrence:isAdding:isSingleDayOverride:weekdaysWithExistingOccurrences:sleepDurationGoalPublisher:sleepSchedulePublisher:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = sub_1AD8945FC(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_release();
  swift_release();
  return v9;
}

uint64_t ScheduleOccurrenceEditModel.deinit()
{
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar;
  uint64_t v2 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t ScheduleOccurrenceEditModel.__deallocating_deinit()
{
  ScheduleOccurrenceEditModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t ScheduleOccurrenceEditModel.ChangeSet.rawValue.getter()
{
  return *(void *)v0;
}

SleepHealthUI::ScheduleOccurrenceEditModel::ChangeSet __swiftcall ScheduleOccurrenceEditModel.ChangeSet.init(rawValue:)(SleepHealthUI::ScheduleOccurrenceEditModel::ChangeSet rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ScheduleOccurrenceEditModel.ChangeSet.bedtime.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static ScheduleOccurrenceEditModel.ChangeSet.wakeup.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static ScheduleOccurrenceEditModel.ChangeSet.alarm.getter(void *a1@<X8>)
{
  *a1 = 4;
}

BOOL ScheduleOccurrenceEditModel.ChangeSet.hasOnlyBedtimeChanges.getter()
{
  return *v0 == 1;
}

uint64_t ScheduleOccurrenceEditModel.ChangeSet.hasAnyAlarmChanges.getter()
{
  return (*v0 >> 2) & 1;
}

uint64_t sub_1AD893140(void *a1)
{
  id v1 = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v1, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  return swift_dynamicCast();
}

void sub_1AD8931F8(id *a1, void *a2)
{
  uint64_t v2 = *(void **)(*a2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  id v3 = *a1;
  objc_msgSend(v2, sel_setAlarmConfiguration_, v3);
  sub_1AD9DDAC0();
  sub_1AD9DDAC0();
}

void (*ScheduleOccurrenceEditModel.alarmEnabled.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  id v4 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v4, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v5 = (void *)v3[4];
  unsigned __int8 v6 = objc_msgSend(v5, sel_isEnabled);

  *((unsigned char *)v3 + 48) = v6;
  return sub_1AD893380;
}

void sub_1AD893380(uint64_t a1, uint64_t a2)
{
}

float ScheduleOccurrenceEditModel.alarmVolume.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v1, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v2 = objc_msgSend(v6, sel_soundVolume);

  if (!v2) {
    return *MEMORY[0x1E4FA5300];
  }
  objc_msgSend(v2, sel_floatValue);
  float v4 = v3;

  return v4;
}

void (*ScheduleOccurrenceEditModel.alarmVolume.modify(void *a1))(uint64_t a1)
{
  float v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  float v4 = v3 + 48;
  *((void *)v3 + 5) = v1;
  id v5 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v5, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v6 = (void *)*((void *)v3 + 4);
  id v7 = objc_msgSend(v6, sel_soundVolume);

  if (v7)
  {
    objc_msgSend(v7, sel_floatValue);
    int v9 = v8;
  }
  else
  {
    int v9 = *MEMORY[0x1E4FA5300];
  }
  *float v4 = v9;
  return sub_1AD8935E4;
}

void sub_1AD8935E4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  ScheduleOccurrenceEditModel.alarmVolume.setter(*(float *)(*(void *)a1 + 48));
  free(v1);
}

id ScheduleOccurrenceEditModel.allowsSnooze.getter()
{
  return sub_1AD893630((SEL *)&selRef_allowsSnooze);
}

id sub_1AD893630(SEL *a1)
{
  id v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v3, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v4 = [v6 *a1];

  return v4;
}

void (*ScheduleOccurrenceEditModel.allowsSnooze.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  id v4 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v4, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v5 = (void *)v3[4];
  unsigned __int8 v6 = objc_msgSend(v5, sel_allowsSnooze);

  *((unsigned char *)v3 + 48) = v6;
  return sub_1AD893808;
}

void sub_1AD893808(uint64_t a1, uint64_t a2)
{
}

void sub_1AD893820(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  id v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 48));
  free(v3);
}

id ScheduleOccurrenceEditModel.toneIdentifier.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  id v2 = objc_msgSend(v1, sel_toneIdentifier);

  if (v2) {
    goto LABEL_4;
  }
  id result = objc_msgSend(self, sel_sharedToneManager);
  if (result)
  {
    id v4 = result;
    id v2 = objc_msgSend(result, sel_defaultToneIdentifierForAlertType_topic_, 13, *MEMORY[0x1E4FAF610]);

    if (!v2) {
      return 0;
    }
LABEL_4:
    uint64_t v5 = sub_1AD9DF710();

    return (id)v5;
  }
  __break(1u);
  return result;
}

void (*ScheduleOccurrenceEditModel.toneIdentifier.modify(id *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = ScheduleOccurrenceEditModel.toneIdentifier.getter();
  a1[1] = v3;
  return sub_1AD893998;
}

void sub_1AD893998(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    ScheduleOccurrenceEditModel.toneIdentifier.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    ScheduleOccurrenceEditModel.toneIdentifier.setter(*a1, v2);
  }
}

uint64_t ScheduleOccurrenceEditModel.vibrationIdentifier.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  id v2 = objc_msgSend(v1, sel_vibrationIdentifier);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = sub_1AD9DF710();

  return v3;
}

void sub_1AD893A9C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  id v4 = objc_msgSend(v3, sel_vibrationIdentifier);

  if (v4)
  {
    uint64_t v5 = sub_1AD9DF710();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void (*ScheduleOccurrenceEditModel.vibrationIdentifier.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  id v4 = objc_msgSend(v3, sel_vibrationIdentifier);

  if (v4)
  {
    uint64_t v5 = sub_1AD9DF710();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_1AD893BE0;
}

void sub_1AD893BE0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    ScheduleOccurrenceEditModel.vibrationIdentifier.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    ScheduleOccurrenceEditModel.vibrationIdentifier.setter(*a1, v2);
  }
}

uint64_t ScheduleOccurrenceEditModel.validScheduleRange.getter()
{
  sub_1AD9DDB00();
  return v1;
}

id ScheduleOccurrenceEditModel.weekdays.getter()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_weekdays);
}

uint64_t (*ScheduleOccurrenceEditModel.weekdays.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_weekdays);
  return sub_1AD893CFC;
}

uint64_t sub_1AD893CFC(uint64_t *a1)
{
  return ScheduleOccurrenceEditModel.weekdays.setter(*a1);
}

BOOL sub_1AD893D20()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AD9DC990();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  long long v33 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  id v10 = (char *)&v32 - v9;
  uint64_t v12 = MEMORY[0x1F4188790](v8, v11);
  uint64_t v14 = (char *)&v32 - v13;
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v18 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  id v19 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_bedtimeComponents);
  sub_1AD9DC8C0();

  sub_1AD9DC8F0();
  LOBYTE(v19) = v20;
  id v21 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v21(v14, v17, v2);
  uint64_t v32 = v10;
  uint64_t v22 = v1;
  if (v19)
  {
    BOOL v24 = 0;
  }
  else
  {
    sub_1AD9DC940();
    BOOL v24 = (v23 & 1) == 0;
  }
  uint64_t v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  v25(v14, v2);
  v25(v17, v2);
  if (v24)
  {
    id v26 = objc_msgSend(*(id *)(v22 + v18), sel_wakeUpComponents);
    id v27 = v32;
    sub_1AD9DC8C0();

    sub_1AD9DC8F0();
    LOBYTE(v26) = v28;
    id v29 = v33;
    v21(v33, v27, v2);
    if (v26)
    {
      BOOL v24 = 0;
    }
    else
    {
      sub_1AD9DC940();
      BOOL v24 = (v30 & 1) == 0;
    }
    v25(v29, v2);
    v25(v27, v2);
  }
  return v24;
}

uint64_t sub_1AD893F90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v74 = sub_1AD9DC990();
  uint64_t v4 = *(void *)(v74 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v74, v5);
  uint64_t v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v6, v9);
  uint64_t v12 = (char *)&v64 - v11;
  uint64_t v14 = MEMORY[0x1F4188790](v10, v13);
  uint64_t v16 = (char *)&v64 - v15;
  uint64_t v18 = MEMORY[0x1F4188790](v14, v17);
  char v20 = (char *)&v64 - v19;
  uint64_t v22 = MEMORY[0x1F4188790](v18, v21);
  BOOL v24 = (char *)&v64 - v23;
  MEMORY[0x1F4188790](v22, v25);
  id v27 = (char *)&v64 - v26;
  uint64_t result = sub_1AD9DDB00();
  id v29 = v75;
  if (v75)
  {
    uint64_t v70 = v75;
    char v71 = v12;
    char v72 = v8;
    uint64_t v73 = a1;
    uint64_t v68 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
    uint64_t v69 = v2;
    id v30 = *(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    id v31 = objc_msgSend(v30, sel_bedtimeComponents);
    sub_1AD9DC8C0();

    id v65 = v30;
    id v32 = objc_msgSend(v30, sel_wakeUpComponents);
    sub_1AD9DC8C0();

    long long v33 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v66 = v27;
    uint64_t v34 = v27;
    uint64_t v35 = v74;
    v33(v20, v34, v74);
    uint64_t v36 = sub_1AD9DC8F0();
    if (v37) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = v36;
    }
    uint64_t v64 = v38;
    uint64_t v39 = sub_1AD9DC940();
    char v41 = v40;
    char v42 = *(void (**)(char *, uint64_t))(v4 + 8);
    v42(v20, v35);
    if (v41) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = v39;
    }
    uint64_t v67 = v24;
    v33(v16, v24, v35);
    uint64_t v44 = sub_1AD9DC8F0();
    if (v45) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = v44;
    }
    uint64_t v47 = sub_1AD9DC940();
    char v49 = v48;
    v42(v16, v35);
    if (v49) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = v47;
    }
    sub_1AD8943E4(v64, v43, v46, v50);
    double v52 = v51;
    if (qword_1E9A49118 != -1) {
      swift_once();
    }
    uint64_t v53 = 8 * (*(double *)&qword_1E9A4D900 < v52);
    char v54 = v72;
    id v29 = v70;
    if (qword_1E9A49110 != -1) {
      swift_once();
    }
    if (v52 < *(double *)&qword_1E9A4D8F8) {
      uint64_t v55 = v53 | 4;
    }
    else {
      uint64_t v55 = v53;
    }
    v42(v67, v35);
    v42(v66, v35);

    uint64_t v57 = v68;
    uint64_t v56 = v69;
    id v58 = objc_msgSend(*(id *)(v69 + v68), sel_bedtimeComponents);
    char v59 = v71;
    sub_1AD9DC8C0();

    id v60 = objc_msgSend(*(id *)(v56 + v57), sel_wakeUpComponents);
    sub_1AD9DC8C0();

    char v61 = sub_1AD935200();
    LOBYTE(v57) = sub_1AD935434();

    if (v57) {
      uint64_t v62 = v61 & 1 | 2;
    }
    else {
      uint64_t v62 = v61 & 1;
    }
    v42(v54, v35);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v42)(v59, v35);
    uint64_t v63 = v62 | v55;
    a1 = v73;
  }
  else
  {
    uint64_t v63 = 0;
  }
  *(void *)a1 = v63;
  *(unsigned char *)(a1 + 8) = v29 == 0;
  return result;
}

uint64_t sub_1AD8943E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
LABEL_16:
    __break(1u);
    return result;
  }
  if (v5 < 0)
  {
    uint64_t v6 = -60;
    if (v5 > -60) {
      uint64_t v6 = a4 - a2;
    }
    uint64_t v7 = v6 + a2;
    if (v7 == a4) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = a4 + 1;
    }
    unint64_t v9 = (v7 - v8) / 0x3CuLL;
    if (v7 != a4) {
      ++v9;
    }
    while ((a3 ^ 0x8000000000000000) - result > v9)
    {
      --v4;
      BOOL v10 = v5 < -60;
      v5 += 60;
      if (!v10) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

void sub_1AD8944E8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 - *v0;
  if (__OFSUB__(v1, *v0))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  uint64_t v5 = v4 - v3;
  if (__OFSUB__(v4, v3))
  {
LABEL_17:
    __break(1u);
    return;
  }
  if (v5 < 0)
  {
    uint64_t v6 = -60;
    if (v5 > -60) {
      uint64_t v6 = v4 - v3;
    }
    uint64_t v7 = v3 + v6;
    if (v7 == v4) {
      uint64_t v8 = v0[3];
    }
    else {
      uint64_t v8 = v4 + 1;
    }
    BOOL v9 = v7 == v4;
    unint64_t v10 = v1 ^ 0x8000000000000000;
    unint64_t v11 = (v7 - v8) / 0x3CuLL;
    if (!v9) {
      ++v11;
    }
    unint64_t v12 = v10 - *v0;
    while (v12 > v11)
    {
      --v2;
      BOOL v13 = v5 < -60;
      v5 += 60;
      if (!v13) {
        return;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
}

uint64_t sub_1AD8945FC(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = v8;
  sub_1AD8418F4();
  swift_allocObject();
  *(void *)(v8 + 16) = sub_1AD9DDAD0();
  sub_1AD895018(0, (unint64_t *)&qword_1E9A491B0, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceEditModel, MEMORY[0x1E4F1AB88]);
  swift_allocObject();
  *(void *)(v8 + 24) = sub_1AD9DDAD0();
  sub_1AD895018(0, &qword_1E9A491F8, (uint64_t (*)(uint64_t))sub_1AD8948DC, MEMORY[0x1E4F1ABB0]);
  swift_allocObject();
  *(void *)(v8 + 32) = sub_1AD9DDB30();
  objc_msgSend(a1, sel_copy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
  swift_dynamicCast();
  *(void *)(v8 + 40) = v23;
  *(void *)(v8 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence) = a1;
  *(unsigned char *)(v8 + 48) = a2;
  uint64_t v17 = a8;
  *(unsigned char *)(v8 + 49) = a3;
  *(void *)(v8 + 56) = a4 & ~(unint64_t)objc_msgSend(a1, sel_weekdays);
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 72) = a6;
  *(unsigned char *)(v8 + 80) = a7;
  uint64_t v18 = v8 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar;
  uint64_t v19 = sub_1AD9DCE40();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v17, v19);
  swift_retain();
  swift_retain();
  sub_1AD9DDB00();
  sub_1AD9DDB10();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v17, v19);
  return v9;
}

void sub_1AD8948DC()
{
  if (!qword_1E9A49200)
  {
    sub_1AD837214(255, &qword_1E9A49208);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A49200);
    }
  }
}

void sub_1AD894944(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD894998(uint64_t a1)
{
  sub_1AD894944(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1AD894A14()
{
  unint64_t result = qword_1E9A4A820;
  if (!qword_1E9A4A820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A820);
  }
  return result;
}

unint64_t sub_1AD894A6C()
{
  unint64_t result = qword_1E9A4A828;
  if (!qword_1E9A4A828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A828);
  }
  return result;
}

unint64_t sub_1AD894AC4()
{
  unint64_t result = qword_1E9A4A830;
  if (!qword_1E9A4A830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A830);
  }
  return result;
}

unint64_t sub_1AD894B1C()
{
  unint64_t result = qword_1E9A4A838;
  if (!qword_1E9A4A838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A838);
  }
  return result;
}

id sub_1AD894B70@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  unint64_t v4 = *(void **)(v3 + 40);
  *a2 = v4;
  return v4;
}

uint64_t sub_1AD894BCC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 56);
  return result;
}

uint64_t sub_1AD894C14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 56) = v2;
  return result;
}

id sub_1AD894C60@<X0>(unsigned char *a1@<X8>)
{
  id result = ScheduleOccurrenceEditModel.alarmEnabled.getter();
  *a1 = result & 1;
  return result;
}

void sub_1AD894C90(char *a1)
{
}

void sub_1AD894CB8(float *a1@<X8>)
{
  *a1 = ScheduleOccurrenceEditModel.alarmVolume.getter();
}

void sub_1AD894CE4(float *a1)
{
}

id sub_1AD894D0C@<X0>(unsigned char *a1@<X8>)
{
  id result = ScheduleOccurrenceEditModel.allowsSnooze.getter();
  *a1 = result & 1;
  return result;
}

void sub_1AD894D3C(char *a1)
{
}

id sub_1AD894D64@<X0>(void *a1@<X8>)
{
  id result = ScheduleOccurrenceEditModel.toneIdentifier.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1AD894D90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_14Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))ScheduleOccurrenceEditModel.toneIdentifier.setter);
}

uint64_t sub_1AD894DAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_14Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))ScheduleOccurrenceEditModel.vibrationIdentifier.setter);
}

uint64_t keypath_set_14Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

id sub_1AD894E0C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_weekdays);
  *a2 = result;
  return result;
}

uint64_t sub_1AD894E4C(uint64_t *a1)
{
  return ScheduleOccurrenceEditModel.weekdays.setter(*a1);
}

uint64_t sub_1AD894E74()
{
  return type metadata accessor for ScheduleOccurrenceEditModel();
}

uint64_t type metadata accessor for ScheduleOccurrenceEditModel()
{
  uint64_t result = qword_1E9A4A840;
  if (!qword_1E9A4A840) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD894EC8()
{
  uint64_t result = sub_1AD9DCE40();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for ScheduleOccurrenceEditModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScheduleOccurrenceEditModel);
}

uint64_t dispatch thunk of ScheduleOccurrenceEditModel.originalOccurrence.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ScheduleOccurrenceEditModel.otherOccurrenceDays.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ScheduleOccurrenceEditModel.__allocating_init(occurrence:isAdding:isSingleDayOverride:weekdaysWithExistingOccurrences:sleepDurationGoalPublisher:sleepSchedulePublisher:pairedWatchSupportsSleep:gregorianCalendar:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceEditModel.ChangeSet()
{
  return &type metadata for ScheduleOccurrenceEditModel.ChangeSet;
}

void sub_1AD895018(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, void, void))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD895090()
{
  qword_1E9A4A850 = 0x4034000000000000;
}

void sub_1AD8950A0()
{
  qword_1E9A4A858 = 0x4028000000000000;
}

void sub_1AD8950B0()
{
  qword_1E9A4A860 = 0x4028000000000000;
}

void sub_1AD8950C0()
{
  qword_1E9A4A868 = 0x4000000000000000;
}

void sub_1AD8950D0()
{
  qword_1E9A4A870 = 0x4034000000000000;
}

uint64_t sub_1AD8950E0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3E6D270](v1);
}

uint64_t sub_1AD89512C()
{
  return swift_unknownObjectRelease();
}

void (*sub_1AD895188(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1B3E6D270](v5);
  return sub_1AD89520C;
}

void sub_1AD89520C(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

void sub_1AD89528C(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  *(unsigned char *)(v3 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32)) = v2;
  sub_1AD936990();
  swift_endAccess();
  sub_1AD896DC4();
}

uint64_t sub_1AD895304()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32));
}

void sub_1AD895358(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  *(unsigned char *)(v4 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32)) = a1;
  sub_1AD936990();
  swift_endAccess();
  sub_1AD896DC4();
}

void (*sub_1AD8953D4(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x50uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  v3[6] = v1;
  v3[7] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for SleepScheduleComponentsViewModel();
  v3[8] = v6;
  *((unsigned char *)v3 + 72) = *(unsigned char *)(v5 + *(int *)(v6 + 32));
  return sub_1AD895464;
}

void sub_1AD895464(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 72);
  uint64_t v3 = *(void *)(*(void *)a1 + 64);
  uint64_t v4 = *(void *)(*(void *)a1 + 48) + *(void *)(*(void *)a1 + 56);
  swift_beginAccess();
  *(unsigned char *)(v4 + *(int *)(v3 + 32)) = v2;
  sub_1AD936990();
  swift_endAccess();
  sub_1AD896DC4();
  free(v1);
}

id sub_1AD8954EC()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter;
  char v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter);
  }
  else
  {
    uint64_t v4 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
    uint64_t v5 = (char *)objc_allocWithZone(v4);
    *(void *)&v5[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
    v10.receiver = v5;
    v10.super_class = v4;
    id v6 = objc_msgSendSuper2(&v10, sel_init);
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    char v2 = 0;
  }
  id v8 = v2;
  return v3;
}

void sub_1AD895588(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1B3E6D270](v4);
  if (v5)
  {
    id v6 = (void *)v5;
    sub_1AD89878C(a2);
  }
}

void sub_1AD89560C(void *a1)
{
  char v2 = v1;
  v91.receiver = v1;
  v91.super_class = (Class)type metadata accessor for SleepScheduleComponentsEditView();
  objc_msgSendSuper2(&v91, sel_willMoveToWindow_, a1);
  if (a1)
  {
    uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clock];
    id v75 = a1;
    objc_msgSend(v75, sel_bounds);
    if (CGRectGetWidth(v92) <= 320.0)
    {
      if (qword_1E9A49050 != -1) {
        swift_once();
      }
      uint64_t v5 = &unk_1E9A5A908;
    }
    else
    {
      if (qword_1E9A49048 != -1) {
        swift_once();
      }
      uint64_t v5 = &unk_1E9A5A780;
    }
    memcpy(__dst, v5, 0x188uLL);
    uint64_t v74 = *(void *)&__dst[12];
    long long v73 = __dst[11];
    long long v72 = __dst[10];
    long long v71 = __dst[9];
    long long v69 = __dst[8];
    uint64_t v68 = *((void *)&__dst[7] + 1);
    uint64_t v67 = *(void *)&__dst[7];
    long long v66 = __dst[6];
    uint64_t v65 = *((void *)&__dst[5] + 1);
    uint64_t v63 = *(void *)&__dst[5];
    uint64_t v61 = *((void *)&__dst[4] + 1);
    int v6 = __dst[4];
    long long v7 = __dst[3];
    long long v58 = __dst[1];
    long long v59 = __dst[2];
    uint64_t v70 = *(void *)&__dst[24];
    long long v8 = __dst[23];
    uint64_t v64 = *((void *)&__dst[21] + 1);
    long long v62 = __dst[22];
    uint64_t v60 = *(void *)&__dst[21];
    uint64_t v9 = *((void *)&__dst[20] + 1);
    uint64_t v10 = *(void *)&__dst[20];
    uint64_t v11 = *((void *)&__dst[19] + 1);
    uint64_t v12 = *(void *)&__dst[19];
    long long v56 = __dst[18];
    long long v57 = __dst[0];
    uint64_t v13 = *((void *)&__dst[17] + 1);
    uint64_t v14 = *(void *)&__dst[17];
    uint64_t v15 = *((void *)&__dst[16] + 1);
    uint64_t v16 = *(void *)&__dst[16];
    uint64_t v17 = *((void *)&__dst[15] + 1);
    uint64_t v18 = *(void *)&__dst[15];
    uint64_t v19 = *((void *)&__dst[14] + 1);
    int v20 = __dst[14];
    uint64_t v21 = *((void *)&__dst[13] + 1);
    long long v55 = *(_OWORD *)((char *)&__dst[12] + 8);
    sub_1AD897340((uint64_t)__dst);
    __src[0] = v57;
    __src[1] = v58;
    void __src[2] = v59;
    __src[3] = v7;
    LODWORD(__src[4]) = v6;
    *((void *)&__src[4] + 1) = v61;
    *(void *)&__src[5] = v63;
    *((void *)&__src[5] + 1) = v65;
    __src[6] = v66;
    *(void *)&__src[7] = v67;
    *((void *)&__src[7] + 1) = v68;
    __src[8] = v69;
    __src[9] = v71;
    __src[10] = v72;
    __src[11] = v73;
    *(void *)&__src[12] = v74;
    *(_OWORD *)((char *)&__src[12] + 8) = v55;
    *((void *)&__src[13] + 1) = v21;
    LODWORD(__src[14]) = v20;
    *((void *)&__src[14] + 1) = v19;
    *(void *)&__src[15] = v18;
    *((void *)&__src[15] + 1) = v17;
    *(void *)&__src[16] = v16;
    *((void *)&__src[16] + 1) = v15;
    *(void *)&__src[17] = v14;
    *((void *)&__src[17] + 1) = v13;
    __src[18] = v56;
    *(void *)&__src[19] = v12;
    *((void *)&__src[19] + 1) = v11;
    *(void *)&__src[20] = v10;
    *((void *)&__src[20] + 1) = v9;
    *(void *)&__src[21] = v60;
    *((void *)&__src[21] + 1) = v64;
    __src[22] = v62;
    __src[23] = v8;
    uint64_t v22 = v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
    *(void *)&__src[24] = v70;
    memcpy(__dst, (const void *)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration), 0x188uLL);
    memcpy((void *)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration), __src, 0x188uLL);
    sub_1AD897340((uint64_t)__src);
    sub_1AD89742C((uint64_t)__dst);
    sub_1AD8F41A0();
    uint64_t v23 = *(char **)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dial);
    long long v24 = *(_OWORD *)(v22 + 216);
    long long v25 = *(_OWORD *)(v22 + 248);
    long long v26 = *(_OWORD *)(v22 + 200);
    long long v79 = *(_OWORD *)(v22 + 232);
    long long v80 = v25;
    long long v77 = v26;
    long long v78 = v24;
    long long v27 = *(_OWORD *)(v22 + 312);
    long long v29 = *(_OWORD *)(v22 + 264);
    long long v28 = *(_OWORD *)(v22 + 280);
    long long v83 = *(_OWORD *)(v22 + 296);
    long long v84 = v27;
    long long v81 = v29;
    long long v82 = v28;
    long long v30 = *(_OWORD *)(v22 + 376);
    long long v32 = *(_OWORD *)(v22 + 328);
    long long v31 = *(_OWORD *)(v22 + 344);
    long long v87 = *(_OWORD *)(v22 + 360);
    long long v88 = v30;
    long long v85 = v32;
    long long v86 = v31;
    long long v33 = &v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    long long v34 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 160];
    long long v36 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 128];
    long long v35 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 144];
    v89[11] = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 176];
    v89[9] = v35;
    v89[10] = v34;
    v89[8] = v36;
    long long v37 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 112];
    long long v39 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 64];
    long long v38 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 80];
    v89[6] = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 96];
    unsigned char v89[7] = v37;
    v89[4] = v39;
    v89[5] = v38;
    long long v40 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
    long long v42 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    long long v41 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
    v89[2] = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32];
    v89[3] = v40;
    v89[0] = v42;
    v89[1] = v41;
    long long v43 = v77;
    long long v44 = v78;
    long long v45 = v80;
    *((_OWORD *)v33 + 2) = v79;
    *((_OWORD *)v33 + 3) = v45;
    *(_OWORD *)long long v33 = v43;
    *((_OWORD *)v33 + 1) = v44;
    long long v46 = v81;
    long long v47 = v82;
    long long v48 = v84;
    *((_OWORD *)v33 + 6) = v83;
    *((_OWORD *)v33 + 7) = v48;
    *((_OWORD *)v33 + 4) = v46;
    *((_OWORD *)v33 + 5) = v47;
    long long v49 = v85;
    long long v50 = v86;
    long long v51 = v88;
    *((_OWORD *)v33 + 10) = v87;
    *((_OWORD *)v33 + 11) = v51;
    *((_OWORD *)v33 + 8) = v49;
    *((_OWORD *)v33 + 9) = v50;
    sub_1AD897520((uint64_t)&v77);
    sub_1AD897520((uint64_t)&v77);
    sub_1AD8975C0((uint64_t)v89);
    objc_msgSend(v23, sel_setNeedsDisplay);
    sub_1AD8975C0((uint64_t)&v77);
    sub_1AD89742C((uint64_t)__src);
    double v52 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint];
    if (v52)
    {
      double v53 = *(double *)(v22 + 72);
      id v54 = v52;
      objc_msgSend(v54, sel_setConstant_, v53);
    }
  }
}

id sub_1AD895B28()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for SleepScheduleComponentsEditView();
  objc_msgSendSuper2(&v16, sel_layoutSubviews);
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725018);
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v15 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    uint64_t v14 = sub_1AD838978(v7, v8, &v15);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Layout subviews", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption], sel_layoutIfNeeded);
  uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed];
  objc_msgSend(v9, sel_sizeToFit);
  objc_msgSend(v1, sel_bounds);
  CGRectGetWidth(v17);
  objc_msgSend(v1, sel_directionalLayoutMargins);
  objc_msgSend(v1, sel_directionalLayoutMargins);
  objc_msgSend(v9, sel_frame);
  objc_msgSend(v9, sel_setFrame_);
  objc_msgSend(v1, sel_bounds);
  double MinX = CGRectGetMinX(v18);
  objc_msgSend(v1, sel_directionalLayoutMargins);
  double v12 = MinX + v11;
  objc_msgSend(v9, sel_frame);
  objc_msgSend(v9, sel_setFrame_, v12);
  sub_1AD8B2BF8();
  objc_msgSend(v9, sel_frame);
  CGRectGetHeight(v19);
  if (qword_1E9A48EA0 != -1) {
    swift_once();
  }
  objc_msgSend(v9, sel_frame, v14, v15);
  return objc_msgSend(v9, sel_setFrame_);
}

void sub_1AD895E70(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, char *, uint64_t), char a4, void *a5, int a6, int a7)
{
  uint64_t v8 = v7;
  LODWORD(v91) = a7;
  uint64_t v90 = a3;
  int v13 = a4 & 1;
  sub_1AD898DA4(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  CGRect v17 = (char *)v89 - v16;
  uint64_t v18 = sub_1AD9DC990();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v95 = v18;
  uint64_t v96 = v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18, v20);
  objc_super v94 = (char *)v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v21, v23);
  CGRect v92 = (char *)v89 - v25;
  MEMORY[0x1F4188790](v24, v26);
  long long v28 = (char *)v89 - v27;
  uint64_t v29 = *(void *)(v8 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clock);
  double v30 = *(double *)(v29 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152);
  double v31 = *(double *)(v29 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160);
  uint64_t v93 = v29 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  long long v32 = (long long *)(v29 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  sub_1AD94B814(v33, a2, (uint64_t)v90, v13, a6, (int)v91, v30, v31);
  swift_endAccess();
  sub_1AD8F3DFC();
  v89[1] = v8;
  long long v35 = (unsigned char *)(v8 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model);
  swift_beginAccess();
  *long long v35 = a6;
  long long v36 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v37 = v36[7];
  long long v38 = *(void **)&v35[v37];
  *(void *)&v35[v37] = a5;
  id v39 = a5;

  if (!a5)
  {
    uint64_t v46 = v36[15];
    v89[0] = v36 + 15;
    *(void *)&v35[v46] = 0;
LABEL_9:
    char v45 = 0;
    BOOL v44 = 0;
    goto LABEL_10;
  }
  char v40 = sub_1AD935200();
  char v41 = sub_1AD935434();
  uint64_t v42 = v36[15];
  v89[0] = v36 + 15;
  if (v41) {
    uint64_t v43 = v40 & 1 | 2;
  }
  else {
    uint64_t v43 = v40 & 1;
  }
  *(void *)&v35[v42] = v43;
  BOOL v44 = (v43 & 1) == 0;
  char v45 = v43 & 1;
  if ((v43 & 1) == 0 && (v41 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  v35[v36[13]] = v45;
  v35[v36[14]] = v44;

  uint64_t v47 = v95;
  uint64_t v48 = v96;
  (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v28, v34, v95);
  long long v49 = *(void (**)(unsigned char *, char *, uint64_t))(v48 + 24);
  v49(&v35[v36[11]], v28, v47);
  sub_1AD936990();
  long long v50 = *(void (**)(char *, uint64_t))(v48 + 8);
  uint64_t v96 = v48 + 8;
  objc_super v91 = v50;
  v50(v28, v47);
  swift_endAccess();
  uint64_t v51 = *((void *)v32 + 4);
  char v52 = *((unsigned char *)v32 + 40);
  char v53 = *((unsigned char *)v32 + 41);
  char v54 = *((unsigned char *)v32 + 42);
  long long v97 = *v32;
  long long v98 = v32[1];
  uint64_t v99 = v51;
  char v100 = v52;
  char v101 = v53;
  char v102 = v54;
  long long v55 = v92;
  sub_1AD94B060(*(double *)(v93 + 144));
  swift_beginAccess();
  v49(&v35[v36[9]], v55, v47);
  uint64_t v56 = *(void *)&v35[v36[7]];
  uint64_t v90 = v49;
  if (!v56)
  {
    *(void *)&v35[*(_DWORD *)v89[0]] = 0;
LABEL_18:
    char v60 = 0;
    BOOL v61 = 0;
    goto LABEL_19;
  }
  char v57 = sub_1AD935200();
  char v58 = sub_1AD935434();
  if (v58) {
    uint64_t v59 = v57 & 1 | 2;
  }
  else {
    uint64_t v59 = v57 & 1;
  }
  *(void *)&v35[v36[15]] = v59;
  char v60 = v59 & 1;
  BOOL v61 = (v59 & 1) == 0;
  if ((v59 & 1) == 0 && (v58 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_19:
  v35[v36[13]] = v60;
  v35[v36[14]] = v61;
  sub_1AD9DCDC0();
  uint64_t v62 = sub_1AD9385E0((uint64_t)v17, (uint64_t)v35);
  uint64_t v64 = v63;
  sub_1AD894998((uint64_t)v17);
  uint64_t v65 = (uint64_t *)&v35[v36[18]];
  swift_bridgeObjectRelease();
  *uint64_t v65 = v62;
  v65[1] = v64;
  sub_1AD9DCDC0();
  uint64_t v66 = sub_1AD9385E0((uint64_t)v17, (uint64_t)v35);
  uint64_t v68 = v67;
  sub_1AD894998((uint64_t)v17);
  long long v69 = (uint64_t *)&v35[v36[19]];
  swift_bridgeObjectRelease();
  *long long v69 = v66;
  v69[1] = v68;
  sub_1AD936990();
  uint64_t v70 = v95;
  v91(v92, v95);
  swift_endAccess();
  uint64_t v71 = *((void *)v32 + 4);
  char v72 = *((unsigned char *)v32 + 40);
  char v73 = *((unsigned char *)v32 + 41);
  char v74 = *((unsigned char *)v32 + 42);
  long long v97 = *v32;
  long long v98 = v32[1];
  uint64_t v99 = v71;
  char v100 = v72;
  char v101 = v73;
  char v102 = v74;
  id v75 = v94;
  sub_1AD94B2E4(*(double *)(v93 + 144));
  swift_beginAccess();
  v90(&v35[v36[10]], v75, v70);
  if (!*(void *)&v35[v36[7]])
  {
    *(void *)&v35[*(_DWORD *)v89[0]] = 0;
LABEL_27:
    char v79 = 0;
    BOOL v80 = 0;
    goto LABEL_28;
  }
  char v76 = sub_1AD935200();
  char v77 = sub_1AD935434();
  if (v77) {
    uint64_t v78 = v76 & 1 | 2;
  }
  else {
    uint64_t v78 = v76 & 1;
  }
  *(void *)&v35[v36[15]] = v78;
  char v79 = v78 & 1;
  BOOL v80 = (v78 & 1) == 0;
  if ((v78 & 1) == 0 && (v77 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_28:
  v35[v36[13]] = v79;
  v35[v36[14]] = v80;
  sub_1AD9DCDC0();
  uint64_t v81 = sub_1AD9385E0((uint64_t)v17, (uint64_t)v35);
  uint64_t v83 = v82;
  sub_1AD894998((uint64_t)v17);
  long long v84 = (uint64_t *)&v35[v36[18]];
  swift_bridgeObjectRelease();
  *long long v84 = v81;
  v84[1] = v83;
  sub_1AD9DCDC0();
  uint64_t v85 = sub_1AD9385E0((uint64_t)v17, (uint64_t)v35);
  uint64_t v87 = v86;
  sub_1AD894998((uint64_t)v17);
  long long v88 = (uint64_t *)&v35[v36[19]];
  swift_bridgeObjectRelease();
  *long long v88 = v85;
  v88[1] = v87;
  sub_1AD936990();
  v91(v94, v95);
  swift_endAccess();
  sub_1AD896DC4();
}

void sub_1AD896578(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1AD898DA4(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)v65 - v6;
  uint64_t v8 = sub_1AD9DC990();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  long long v69 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)v65 - v14;
  uint64_t v16 = (long long *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  uint64_t v17 = *((void *)v16 + 4);
  char v18 = *((unsigned char *)v16 + 40);
  char v19 = *((unsigned char *)v16 + 41);
  char v20 = *((unsigned char *)v16 + 42);
  long long v21 = v16[1];
  long long v72 = *v16;
  long long v73 = v21;
  uint64_t v74 = v17;
  char v75 = v18;
  char v76 = v19;
  char v77 = v20;
  uint64_t v67 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  sub_1AD94B060(*(double *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
  uint64_t v22 = v2 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  uint64_t v23 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v24 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 24);
  uint64_t v25 = v22 + v23[9];
  uint64_t v68 = (void (*)(void, void))v15;
  uint64_t v70 = v8;
  v65[2] = v9 + 24;
  uint64_t v66 = v24;
  v24(v25, v15, v8);
  uint64_t v26 = *(void *)(v22 + v23[7]);
  v65[1] = v2;
  uint64_t v71 = v9;
  if (!v26)
  {
    uint64_t v33 = v23[15];
    v65[0] = v23 + 15;
    *(void *)(v22 + v33) = 0;
LABEL_9:
    char v31 = 0;
    BOOL v32 = 0;
    goto LABEL_10;
  }
  char v27 = sub_1AD935200();
  char v28 = sub_1AD935434();
  if (v28) {
    uint64_t v29 = v27 & 1 | 2;
  }
  else {
    uint64_t v29 = v27 & 1;
  }
  uint64_t v30 = v23[15];
  v65[0] = v23 + 15;
  *(void *)(v22 + v30) = v29;
  char v31 = v29 & 1;
  BOOL v32 = (v29 & 1) == 0;
  if ((v29 & 1) == 0 && (v28 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  *(unsigned char *)(v22 + v23[13]) = v31;
  *(unsigned char *)(v22 + v23[14]) = v32;
  sub_1AD9DCDC0();
  uint64_t v34 = sub_1AD9385E0((uint64_t)v7, v22);
  uint64_t v36 = v35;
  sub_1AD894998((uint64_t)v7);
  uint64_t v37 = (uint64_t *)(v22 + v23[18]);
  swift_bridgeObjectRelease();
  *uint64_t v37 = v34;
  v37[1] = v36;
  sub_1AD9DCDC0();
  uint64_t v38 = sub_1AD9385E0((uint64_t)v7, v22);
  uint64_t v40 = v39;
  sub_1AD894998((uint64_t)v7);
  char v41 = (uint64_t *)(v22 + v23[19]);
  swift_bridgeObjectRelease();
  *char v41 = v38;
  v41[1] = v40;
  sub_1AD936990();
  uint64_t v42 = v70;
  uint64_t v43 = v71 + 8;
  BOOL v44 = v68;
  uint64_t v68 = *(void (**)(void, void))(v71 + 8);
  v68(v44, v70);
  swift_endAccess();
  uint64_t v45 = *((void *)v16 + 4);
  char v46 = *((unsigned char *)v16 + 40);
  char v47 = *((unsigned char *)v16 + 41);
  char v48 = *((unsigned char *)v16 + 42);
  long long v49 = v16[1];
  long long v72 = *v16;
  long long v73 = v49;
  uint64_t v74 = v45;
  char v75 = v46;
  char v76 = v47;
  char v77 = v48;
  long long v50 = v69;
  sub_1AD94B2E4(*(double *)(v67 + 144));
  swift_beginAccess();
  v66(v22 + v23[10], v50, v42);
  uint64_t v51 = *(void *)(v22 + v23[7]);
  uint64_t v71 = v43;
  if (!v51)
  {
    *(void *)(v22 + *(int *)v65[0]) = 0;
LABEL_18:
    char v55 = 0;
    BOOL v56 = 0;
    goto LABEL_19;
  }
  char v52 = sub_1AD935200();
  char v53 = sub_1AD935434();
  if (v53) {
    uint64_t v54 = v52 & 1 | 2;
  }
  else {
    uint64_t v54 = v52 & 1;
  }
  *(void *)(v22 + v23[15]) = v54;
  char v55 = v54 & 1;
  BOOL v56 = (v54 & 1) == 0;
  if ((v54 & 1) == 0 && (v53 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_19:
  *(unsigned char *)(v22 + v23[13]) = v55;
  *(unsigned char *)(v22 + v23[14]) = v56;
  sub_1AD9DCDC0();
  uint64_t v57 = sub_1AD9385E0((uint64_t)v7, v22);
  uint64_t v59 = v58;
  sub_1AD894998((uint64_t)v7);
  char v60 = (uint64_t *)(v22 + v23[18]);
  swift_bridgeObjectRelease();
  *char v60 = v57;
  v60[1] = v59;
  sub_1AD9DCDC0();
  uint64_t v61 = sub_1AD9385E0((uint64_t)v7, v22);
  uint64_t v63 = v62;
  sub_1AD894998((uint64_t)v7);
  uint64_t v64 = (uint64_t *)(v22 + v23[19]);
  swift_bridgeObjectRelease();
  *uint64_t v64 = v61;
  v64[1] = v63;
  sub_1AD936990();
  v68(v69, v70);
  swift_endAccess();
  sub_1AD896DC4();
}

void *sub_1AD896B58(char *a1, uint64_t a2, void *a3, SEL *a4)
{
  uint64_t v7 = &a1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_delegate];
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x1B3E6D270](v7);
  if (result)
  {
    uint64_t v9 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a4))
    {
      id v10 = a3;
      uint64_t v11 = a1;
      objc_msgSend(v9, *a4, v10);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void sub_1AD896C04()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x1E4FBB1A0];
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1AD9E3080;
  *(void *)(v3 + 32) = 0x7065656C53;
  *(void *)(v3 + 40) = 0xE500000000000000;
  strcpy((char *)(v3 + 48), "ScheduleEditor");
  *(unsigned char *)(v3 + 63) = -18;
  uint64_t v4 = (char *)sub_1AD99A70C((void *)1, 3, 1, (void *)v3);
  *((void *)v4 + 2) = 3;
  strcpy(v4 + 64, "ScheduleClock");
  *((_WORD *)v4 + 39) = -4864;
  sub_1AD898D58(0, &qword_1EB725B60, v2, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v5 = sub_1AD9DF690();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed);
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setAccessibilityIdentifier_, v9, v5, v7);
}

void sub_1AD896DC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  uint64_t v4 = MEMORY[0x1F4188790](v2, v3);
  uint64_t v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = &v31[-v8];
  uint64_t v10 = *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader];
  if (v10)
  {
    uint64_t v11 = (uint64_t)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model];
    swift_beginAccess();
    sub_1AD898CF4(v11, (uint64_t)v9);
    uint64_t v12 = v10 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model;
    swift_beginAccess();
    sub_1AD898CF4(v12, (uint64_t)v6);
    swift_beginAccess();
    sub_1AD898E48((uint64_t)v9, v12);
    swift_endAccess();
    sub_1AD92B08C(v6);
    sub_1AD898C98((uint64_t)v9);
    sub_1AD898C98((uint64_t)v6);
  }
  uint64_t v13 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed];
  id v14 = sub_1AD8954EC();
  uint64_t v15 = *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clock];
  uint64_t v16 = (long long *)(v15 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  *(_OWORD *)&v35[11] = *(long long *)((char *)v16 + 27);
  long long v34 = *v16;
  *(_OWORD *)uint64_t v35 = v16[1];
  uint64_t v17 = v15 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  double v18 = *(double *)(v15 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144);
  if (v35[26]) {
    sub_1AD8F956C();
  }
  else {
    sub_1AD8944E8();
  }
  id v20 = objc_msgSend(v14, sel_stringFromTimeInterval_, v18 * round(v19 / v18));

  objc_msgSend(v13, sel_setText_, v20);
  long long v21 = &v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model];
  swift_beginAccess();
  uint64_t v22 = *(void *)&v21[*(int *)(v2 + 60)];
  if (v22)
  {
    int v25 = 2;
  }
  else if ((v22 & 2) != 0)
  {
    int v25 = 3;
  }
  else
  {
    *(_OWORD *)&v33[11] = *(long long *)((char *)v16 + 27);
    long long v23 = v16[1];
    long long v32 = *v16;
    *(_OWORD *)uint64_t v33 = v23;
    if (v33[24])
    {
      uint64_t v24 = *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption];
      if (*(unsigned char *)(v24 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message) == 6) {
        return;
      }
      *(unsigned char *)(v24 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message) = 6;
      goto LABEL_20;
    }
    double v26 = *(double *)(v17 + 144);
    double v27 = *(double *)&v33[16];
    if (v33[26]) {
      sub_1AD8F956C();
    }
    else {
      sub_1AD8944E8();
    }
    int v25 = v27 > v26 * round(v28 / v26);
  }
  uint64_t v29 = *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption];
  int v30 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message);
  if (v30 == 6 || v30 != v25)
  {
    *(unsigned char *)(v29 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message) = v25;
LABEL_20:
    sub_1AD8B2D90();
    objc_msgSend(v1, sel_setNeedsLayout);
  }
}

id SleepScheduleComponentsEditView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleComponentsEditView.init(frame:)()
{
}

id SleepScheduleComponentsEditView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleComponentsEditView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SleepScheduleComponentsEditView()
{
  uint64_t result = qword_1E9A4A8B0;
  if (!qword_1E9A4A8B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD897340(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 200);
  uint64_t v8 = *(void **)(a1 + 208);
  id v9 = *(void **)(a1 + 280);
  uint64_t v10 = *(void **)(a1 + 288);
  double v27 = *(void **)(a1 + 296);
  double v28 = *(void **)(a1 + 312);
  uint64_t v29 = *(void **)(a1 + 320);
  int v30 = *(void **)(a1 + 360);
  char v31 = *(void **)(a1 + 384);
  id v11 = *(id *)a1;
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v6;
  id v16 = v5;
  id v17 = v7;
  id v18 = v8;
  id v19 = v9;
  id v20 = v10;
  id v21 = v27;
  id v22 = v28;
  id v23 = v29;
  swift_bridgeObjectRetain();
  id v24 = v30;
  swift_bridgeObjectRetain();
  id v25 = v31;
  return a1;
}

uint64_t sub_1AD89742C(uint64_t a1)
{
  id v15 = *(void **)(a1 + 8);
  id v16 = *(void **)a1;
  id v13 = *(void **)(a1 + 24);
  id v14 = *(void **)(a1 + 16);
  id v11 = *(void **)(a1 + 40);
  id v12 = *(void **)(a1 + 32);
  objc_super v2 = *(void **)(a1 + 208);
  uint64_t v10 = *(void **)(a1 + 200);
  uint64_t v3 = *(void **)(a1 + 280);
  uint64_t v4 = *(void **)(a1 + 288);
  uint64_t v5 = *(void **)(a1 + 296);
  uint64_t v6 = *(void **)(a1 + 312);
  uint64_t v7 = *(void **)(a1 + 320);
  uint64_t v8 = *(void **)(a1 + 360);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1AD897520(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 80);
  uint64_t v4 = *(void **)(a1 + 88);
  uint64_t v5 = *(void **)(a1 + 96);
  uint64_t v6 = *(void **)(a1 + 112);
  uint64_t v7 = *(void **)(a1 + 120);
  uint64_t v8 = *(void **)(a1 + 160);
  id v19 = *(void **)(a1 + 184);
  id v9 = *(id *)a1;
  id v10 = v2;
  id v11 = v3;
  id v12 = v4;
  id v13 = v5;
  id v14 = v6;
  id v15 = v7;
  swift_bridgeObjectRetain();
  id v16 = v8;
  swift_bridgeObjectRetain();
  id v17 = v19;
  return a1;
}

uint64_t sub_1AD8975C0(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 8);
  id v10 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 80);
  uint64_t v4 = *(void **)(a1 + 88);
  uint64_t v5 = *(void **)(a1 + 96);
  uint64_t v6 = *(void **)(a1 + 112);
  uint64_t v7 = *(void **)(a1 + 120);
  uint64_t v8 = *(void **)(a1 + 160);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1AD897660@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1AD8976B8()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1AD897710@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  uint64_t result = type metadata accessor for SleepScheduleComponentsViewModel();
  *a2 = *(unsigned char *)(v3 + *(int *)(result + 32));
  return result;
}

uint64_t sub_1AD897774()
{
  return type metadata accessor for SleepScheduleComponentsEditView();
}

uint64_t sub_1AD89777C()
{
  uint64_t result = type metadata accessor for SleepScheduleComponentsViewModel();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SleepScheduleComponentsEditView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepScheduleComponentsEditView);
}

uint64_t dispatch thunk of SleepScheduleComponentsEditView.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SleepScheduleComponentsEditView.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SleepScheduleComponentsEditView.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SleepScheduleComponentsEditView.includeDayLabelsInHeader.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SleepScheduleComponentsEditView.includeDayLabelsInHeader.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SleepScheduleComponentsEditView.includeDayLabelsInHeader.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

void sub_1AD897988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7 = v6;
  LODWORD(v116) = a6;
  uint64_t v114 = a4;
  uint64_t v115 = a5;
  uint64_t v11 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v110 = (uint64_t)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  uint64_t v14 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed;
  id v15 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v16 = v7;
  id v17 = objc_msgSend(v15, sel_init);
  id v18 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v17, sel_setTextColor_, v18);

  objc_msgSend(v17, sel_setNumberOfLines_, 1);
  objc_msgSend(v17, sel_setAdjustsFontSizeToFitWidth_, 1);
  uint64_t v19 = sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  uint64_t v20 = *MEMORY[0x1E4FB09E0];
  uint64_t v111 = *MEMORY[0x1E4FB2998];
  uint64_t v112 = v20;
  uint64_t v113 = v19;
  id v21 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(v111, 0, 1, 0, 0, 0, 1, v20, 0);
  objc_msgSend(v17, sel_setFont_, v21);

  *(void *)&v7[v14] = v17;
  *(void *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint] = 0;
  *(void *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint] = 0;
  *(void *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter] = 0;
  *(void *)&long long v118 = a1;
  *((void *)&v118 + 1) = a2;
  uint64_t v119 = a3;
  uint64_t v120 = v114;
  uint64_t v121 = 0;
  char v122 = 1;
  __int16 v123 = 1;
  if (qword_1E9A49048 != -1) {
    swift_once();
  }
  memcpy(v124, &unk_1E9A5A780, 0x188uLL);
  id v22 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleClock());
  sub_1AD897340((uint64_t)v124);
  id v23 = sub_1AD8F448C(&v118, (uint64_t)v124);
  *(void *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clock] = v23;
  uint64_t v24 = v115;
  sub_1AD898CF4(v115, (uint64_t)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model]);
  objc_allocWithZone((Class)type metadata accessor for SleepScheduleClockCaption());
  id v25 = (char *)v23;
  double v26 = sub_1AD8B22B4(0);
  double v27 = 0;
  *(void *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption] = v26;
  if (v116)
  {
    uint64_t v28 = v24;
    uint64_t v29 = v110;
    sub_1AD898CF4(v28, v110);
    id v30 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsHeader());
    double v27 = sub_1AD92C9BC(v29);
  }
  *(void *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader] = v27;

  char v31 = (objc_class *)type metadata accessor for SleepScheduleComponentsEditView();
  v117.receiver = v16;
  v117.super_class = v31;
  long long v32 = (char *)objc_msgSendSuper2(&v117, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1AD896DC4();
  uint64_t v33 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader;
  long long v34 = *(void **)&v32[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader];
  if (v34) {
    objc_msgSend(v32, sel_addSubview_, *(void *)&v32[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader]);
  }
  objc_msgSend(v32, sel_addSubview_, v25);
  uint64_t v110 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed;
  objc_msgSend(v32, sel_addSubview_, *(void *)&v32[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed]);
  uint64_t v116 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption;
  uint64_t v35 = *(void **)&v32[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption];
  objc_msgSend(v32, sel_addSubview_, v35);
  if (v34) {
    objc_msgSend(v34, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  }
  objc_msgSend(v25, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v35, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v36 = objc_msgSend(v25, sel_widthAnchor);
  id v37 = objc_msgSend(v36, sel_constraintEqualToConstant_, *(double *)&v25[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72]);

  uint64_t v38 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint;
  uint64_t v39 = *(void **)&v32[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint];
  *(void *)&v32[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint] = v37;

  id v40 = objc_msgSend(*(id *)&v32[v116], sel_topAnchor);
  id v41 = objc_msgSend(v25, sel_bottomAnchor);
  id v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v41);

  uint64_t v43 = *(void **)&v32[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint];
  uint64_t v114 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint;
  *(void *)&v32[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint] = v42;

  BOOL v44 = *(void **)&v32[v33];
  uint64_t v45 = MEMORY[0x1E4FBC838];
  if (v44)
  {
    id v109 = self;
    sub_1AD898D58(0, (unint64_t *)&qword_1EB725350, v45 + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_1AD9E6BB0;
    id v47 = v44;
    id v48 = objc_msgSend(v47, sel_leadingAnchor);
    id v49 = objc_msgSend(v32, sel_leadingAnchor);
    id v50 = objc_msgSend(v48, (SEL)&selRef_copySafeAreaHeight + 6, v49);

    *(void *)(v46 + 32) = v50;
    id v51 = objc_msgSend(v47, sel_topAnchor);
    id v52 = objc_msgSend(v32, sel_topAnchor);
    if (qword_1E9A48E88 != -1) {
      swift_once();
    }
    id v53 = objc_msgSend(v51, sel_constraintEqualToAnchor_constant_, v52, *(double *)&qword_1E9A4A850);

    *(void *)(v46 + 40) = v53;
    id v54 = objc_msgSend(v32, sel_trailingAnchor);
    id v55 = objc_msgSend(v47, sel_trailingAnchor);
    id v56 = objc_msgSend(v54, sel_constraintEqualToAnchor_, v55);

    *(void *)(v46 + 48) = v56;
    *(void *)&long long v118 = v46;
    sub_1AD9DF870();
    sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
    uint64_t v57 = (void *)sub_1AD9DF850();
    swift_bridgeObjectRelease();
    objc_msgSend(v109, sel_activateConstraints_, v57);

    id v58 = objc_msgSend(v47, sel_bottomAnchor);
    uint64_t v45 = MEMORY[0x1E4FBC838];
  }
  else
  {
    id v58 = objc_msgSend(v32, sel_topAnchor);
  }
  sub_1AD898D58(0, (unint64_t *)&qword_1EB725350, v45 + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_1AD9E6BC0;
  id v60 = objc_msgSend(v25, sel_widthAnchor);
  id v61 = objc_msgSend(v25, sel_heightAnchor);
  id v62 = objc_msgSend(v60, sel_constraintEqualToAnchor_, v61);

  *(void *)(v59 + 32) = v62;
  uint64_t v63 = *(void **)&v32[v38];
  if (!v63)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  *(void *)(v59 + 40) = v63;
  id v64 = v63;
  id v65 = objc_msgSend(v25, sel_topAnchor);
  uint64_t v66 = qword_1E9A48E90;
  id v67 = v58;
  if (v66 != -1) {
    swift_once();
  }
  id v68 = objc_msgSend(v65, sel_constraintEqualToAnchor_constant_, v67, *(double *)&qword_1E9A4A858);

  id v109 = v67;
  *(void *)(v59 + 48) = v68;
  id v69 = objc_msgSend(v25, sel_centerXAnchor);
  id v70 = objc_msgSend(v32, sel_centerXAnchor);
  id v71 = objc_msgSend(v69, sel_constraintEqualToAnchor_, v70);

  *(void *)(v59 + 56) = v71;
  long long v72 = *(void **)&v32[v114];
  if (!v72) {
    goto LABEL_32;
  }
  id v108 = self;
  *(void *)(v59 + 64) = v72;
  uint64_t v73 = v116;
  uint64_t v74 = *(void **)&v32[v116];
  id v75 = v72;
  id v76 = objc_msgSend(v74, sel_leadingAnchor);
  id v77 = objc_msgSend(v32, sel_layoutMarginsGuide);
  id v78 = objc_msgSend(v77, sel_leadingAnchor);

  id v79 = objc_msgSend(v76, sel_constraintEqualToAnchor_, v78);
  *(void *)(v59 + 72) = v79;
  id v80 = objc_msgSend(v32, sel_layoutMarginsGuide);
  id v81 = objc_msgSend(v80, sel_trailingAnchor);

  id v82 = objc_msgSend(*(id *)&v32[v73], sel_trailingAnchor);
  id v83 = objc_msgSend(v81, sel_constraintEqualToAnchor_, v82);

  *(void *)(v59 + 80) = v83;
  id v84 = objc_msgSend(v32, sel_bottomAnchor);
  id v85 = objc_msgSend(*(id *)&v32[v73], sel_bottomAnchor);
  if (qword_1E9A48EA8 != -1) {
    swift_once();
  }
  id v86 = objc_msgSend(v84, sel_constraintEqualToAnchor_constant_, v85, *(double *)&qword_1E9A4A870);

  *(void *)(v59 + 88) = v86;
  *(void *)&long long v118 = v59;
  sub_1AD9DF870();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  uint64_t v87 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v108, sel_activateConstraints_, v87);

  long long v88 = *(void **)&v32[v110];
  id v89 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(v111, 0, 1, 0, 0, 0, 1, v112, 0);
  objc_msgSend(v88, sel_setFont_, v89);

  id v90 = objc_msgSend(v32, sel_traitCollection);
  id v91 = objc_msgSend(v90, sel_preferredContentSizeCategory);

  LOBYTE(v90) = sub_1AD9DFD50();
  if (v90) {
    uint64_t v92 = 4;
  }
  else {
    uint64_t v92 = 1;
  }
  objc_msgSend(v88, sel_setTextAlignment_, v92);
  uint64_t v93 = *(void **)&v32[v114];
  id v94 = v109;
  if (!v93) {
    goto LABEL_30;
  }
  id v95 = v93;
  id v96 = objc_msgSend(v88, sel_font);
  if (v96)
  {
    long long v97 = v96;
    objc_msgSend(v96, sel_lineHeight);
    double v99 = v98;

    if (qword_1E9A48E98 != -1) {
      swift_once();
    }
    double v100 = v99 + *(double *)&qword_1E9A4A860;
    if (qword_1E9A48EA0 != -1) {
      swift_once();
    }
    objc_msgSend(v95, sel_setConstant_, v100 + *(double *)&qword_1E9A4A868);

LABEL_30:
    objc_msgSend(v32, sel_invalidateIntrinsicContentSize);
    objc_msgSend(v32, sel_setNeedsLayout);
    sub_1AD896C04();
    objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v32, sel_clockDidChange_, 0x20000);
    objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v32, sel_editingDidChange_, 0x20000);
    objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v32, sel_editingDidEnd_, 0x40000);
    sub_1AD898DA4(0, (unint64_t *)&qword_1E9A49250, (uint64_t (*)(uint64_t))sub_1AD841CE0, MEMORY[0x1E4FBBE00]);
    uint64_t v101 = swift_allocObject();
    *(_OWORD *)(v101 + 16) = xmmword_1AD9E3080;
    uint64_t v102 = sub_1AD9DD6D0();
    uint64_t v103 = MEMORY[0x1E4FB1138];
    *(void *)(v101 + 32) = v102;
    *(void *)(v101 + 40) = v103;
    uint64_t v104 = sub_1AD9DD570();
    uint64_t v105 = MEMORY[0x1E4FB0EF0];
    *(void *)(v101 + 48) = v104;
    *(void *)(v101 + 56) = v105;
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1AD841D34();
    char v106 = v32;
    sub_1AD9DFD90();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    sub_1AD898C98(v115);
    return;
  }
LABEL_33:
  __break(1u);
}

id sub_1AD89878C(void *a1)
{
  objc_super v2 = v1;
  id v4 = objc_msgSend(v2, sel_traitCollection);
  id v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

  if (!a1)
  {

    goto LABEL_11;
  }
  id v6 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  uint64_t v7 = sub_1AD9DF710();
  uint64_t v9 = v8;
  if (v7 == sub_1AD9DF710() && v9 == v10)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = sub_1AD9E02D0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      goto LABEL_11;
    }
  }
  id v13 = objc_msgSend(v2, sel_traitCollection);
  id v14 = objc_msgSend(v13, sel_legibilityWeight);

  id result = objc_msgSend(a1, sel_legibilityWeight);
  if (v14 == result) {
    return result;
  }
LABEL_11:
  id v16 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed];
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v17 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E4FB2998], 0, 1, 0, 0, 0, 1, *MEMORY[0x1E4FB09E0], 0);
  objc_msgSend(v16, sel_setFont_, v17);

  id v18 = objc_msgSend(v2, sel_traitCollection);
  id v19 = objc_msgSend(v18, sel_preferredContentSizeCategory);

  LOBYTE(v18) = sub_1AD9DFD50();
  if (v18) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 1;
  }
  objc_msgSend(v16, sel_setTextAlignment_, v20);
  id v21 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint];
  if (v21)
  {
    id v22 = v21;
    id result = objc_msgSend(v16, sel_font);
    if (!result)
    {
      __break(1u);
      return result;
    }
    id v23 = result;
    objc_msgSend(result, sel_lineHeight);
    double v25 = v24;

    if (qword_1E9A48E98 != -1) {
      swift_once();
    }
    double v26 = v25 + *(double *)&qword_1E9A4A860;
    if (qword_1E9A48EA0 != -1) {
      swift_once();
    }
    objc_msgSend(v22, sel_setConstant_, v26 + *(double *)&qword_1E9A4A868);
  }
  objc_msgSend(v2, sel_invalidateIntrinsicContentSize);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

void sub_1AD898AF8()
{
  unint64_t v1 = v0;
  swift_unknownObjectWeakInit();
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  id v4 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v3, sel_setTextColor_, v4);

  objc_msgSend(v3, sel_setNumberOfLines_, 1);
  objc_msgSend(v3, sel_setAdjustsFontSizeToFitWidth_, 1);
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v5 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E4FB2998], 0, 1, 0, 0, 0, 1, *MEMORY[0x1E4FB09E0], 0);
  objc_msgSend(v3, sel_setFont_, v5);

  *(void *)&v1[v2] = v3;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter] = 0;

  sub_1AD9E0140();
  __break(1u);
}

uint64_t sub_1AD898C98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD898CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1AD898D58(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD898DA4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD898E08()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD898E40(uint64_t a1, void *a2)
{
  sub_1AD895588(a1, a2, v2);
}

uint64_t sub_1AD898E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD898EB0()
{
  return MEMORY[0x1E4FBB560];
}

uint64_t CurrentWeatherModel.currentWeather.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1AD9DCFC0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t CurrentWeatherModel.hourlyForecast.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CurrentWeatherModel(0) + 20);
  sub_1AD898FBC();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for CurrentWeatherModel(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4A988);
}

void sub_1AD898FBC()
{
  if (!qword_1E9A4A8C8)
  {
    sub_1AD9DCF50();
    uint64_t v0 = (void (*)(uint64_t))MEMORY[0x1E4F45E68];
    sub_1AD8990C0(&qword_1E9A4A8D0, MEMORY[0x1E4F45E68]);
    sub_1AD8990C0(&qword_1E9A4A8D8, v0);
    sub_1AD8990C0(&qword_1E9A4A8E0, v0);
    unint64_t v1 = sub_1AD9DD0B0();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_1E9A4A8C8);
    }
  }
}

uint64_t sub_1AD8990C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CurrentWeatherModel.dailyForecast.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CurrentWeatherModel(0) + 24);
  sub_1AD899180();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

void sub_1AD899180()
{
  if (!qword_1E9A4A8E8)
  {
    sub_1AD9DCF40();
    uint64_t v0 = (void (*)(uint64_t))MEMORY[0x1E4F45E40];
    sub_1AD8990C0(&qword_1E9A4A8F0, MEMORY[0x1E4F45E40]);
    sub_1AD8990C0(&qword_1E9A4A8F8, v0);
    sub_1AD8990C0(&qword_1E9A4A900, v0);
    unint64_t v1 = sub_1AD9DD0B0();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_1E9A4A8E8);
    }
  }
}

uint64_t sub_1AD899284()
{
  swift_getObjectType();
  uint64_t v1 = sub_1AD9E04F0();
  sub_1AD9DF790();
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1AD89930C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD899388(uint64_t a1, void **a2)
{
  sub_1AD89961C(0);
  uint64_t v6 = MEMORY[0x1F4188790](v4 - 8, v5);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v15 - v10;
  sub_1AD89E43C(a1, (uint64_t)&v15 - v10, (uint64_t (*)(void))sub_1AD89961C);
  char v12 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD89E43C((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))sub_1AD89961C);
  id v13 = v12;
  sub_1AD9DDBD0();
  return sub_1AD89E394((uint64_t)v11, (uint64_t (*)(void))sub_1AD89961C);
}

uint64_t sub_1AD8994B0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD899530(uint64_t a1)
{
  sub_1AD89961C(0);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD89E43C(a1, (uint64_t)v6, (uint64_t (*)(void))sub_1AD89961C);
  id v7 = v1;
  sub_1AD9DDBD0();
  return sub_1AD89E394(a1, (uint64_t (*)(void))sub_1AD89961C);
}

void sub_1AD89961C(uint64_t a1)
{
}

void (*sub_1AD899650(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1AD9DDBB0();
  return sub_1AD867F38;
}

uint64_t sub_1AD8996DC()
{
  return swift_endAccess();
}

uint64_t sub_1AD899770(uint64_t a1)
{
  sub_1AD8999CC(0, (unint64_t *)&unk_1E9A4AC50, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC60]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v2, v5);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v14 - v10;
  char v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1AD8999CC(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1AD89993C()
{
  return swift_endAccess();
}

void sub_1AD8999CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD899A30(uint64_t a1)
{
  sub_1AD8999CC(0, (unint64_t *)&unk_1E9A4AC50, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC60]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - v6, a1, v3);
  swift_beginAccess();
  sub_1AD8999CC(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*sub_1AD899BA4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1AD8999CC(0, (unint64_t *)&unk_1E9A4AC50, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC60]);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC13SleepHealthUI12WeatherModel__currentWeatherModel;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1AD8999CC(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  v3[16] = v9;
  sub_1AD9DDB90();
  swift_endAccess();
  return sub_1AD868574;
}

id WeatherModel.locationModel.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_locationModel);
}

id WeatherModel.__allocating_init(debugIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)type metadata accessor for LocationModel());
  swift_bridgeObjectRetain();
  id v5 = LocationModel.init(debugIdentifier:)(a1, a2);
  id v6 = objc_allocWithZone((Class)type metadata accessor for WeatherModel(0));
  id v7 = sub_1AD89DF50(v5, a1, a2);

  return v7;
}

id WeatherModel.__allocating_init(locationModel:debugIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  id v8 = sub_1AD89DF50(a1, a2, a3);

  return v8;
}

id WeatherModel.init(locationModel:debugIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = sub_1AD89DF50(a1, a2, a3);

  return v4;
}

void sub_1AD899E20()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  sub_1AD86E5A4();
  MEMORY[0x1F4188790](v2 - 8, v3);
  id v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD89E308(0, &qword_1E9A4D760, MEMORY[0x1E4F1AC60]);
  uint64_t v7 = v6;
  uint64_t v35 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)v27 - v9;
  sub_1AD89E1DC();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v33 = v11;
  uint64_t v34 = v12;
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService;
  if (!*(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService])
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_1AD9DD550();
    __swift_project_value_buffer(v17, (uint64_t)qword_1E9A4D288);
    id v18 = v0;
    id v19 = sub_1AD9DD530();
    os_log_type_t v20 = sub_1AD9DFBE0();
    int v32 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      os_log_t v30 = v19;
      id v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v36 = v29;
      *(_DWORD *)id v21 = 136446210;
      v27[1] = v21 + 12;
      uint64_t v28 = v21;
      v27[0] = v21 + 4;
      id v37 = (id)sub_1AD9E04F0();
      unint64_t v38 = v22;
      sub_1AD9DF790();
      char v31 = v5;
      swift_bridgeObjectRetain();
      sub_1AD9DF790();
      id v5 = v31;
      swift_bridgeObjectRelease();
      id v37 = (id)sub_1AD838978((uint64_t)v37, v38, &v36);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      id v19 = v30;
      id v23 = v28;
      _os_log_impl(&dword_1AD834000, v30, (os_log_type_t)v32, "[%{public}s] starting", v28, 0xCu);
      uint64_t v24 = v29;
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v24, -1, -1);
      MEMORY[0x1B3E6D1A0](v23, -1, -1);
    }
    else
    {
    }
    sub_1AD9DD020();
    *(void *)&v1[v16] = sub_1AD9DD010();
    swift_release();
    sub_1AD9A6A6C();
    swift_beginAccess();
    sub_1AD89E308(0, &qword_1E9A4A938, MEMORY[0x1E4F1AC70]);
    sub_1AD9DDB90();
    swift_endAccess();
    sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
    id v37 = (id)sub_1AD9DFCA0();
    uint64_t v25 = sub_1AD9DFC90();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v5, 1, 1, v25);
    sub_1AD89E294();
    sub_1AD841810();
    sub_1AD9DDC20();
    sub_1AD89E394((uint64_t)v5, (uint64_t (*)(void))sub_1AD86E5A4);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v7);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1AD8990C0(&qword_1E9A4A940, (void (*)(uint64_t))sub_1AD89E1DC);
    uint64_t v26 = v33;
    sub_1AD9DDC40();
    swift_release();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v26);
    swift_beginAccess();
    sub_1AD9DDA80();
    swift_endAccess();
    swift_release();
    sub_1AD9A64BC();
  }
}

void sub_1AD89A3DC(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    id v5 = (char *)v4;
    if (v2)
    {
      uint64_t v6 = v2;
      sub_1AD89A6A4(v6);
      id v7 = *(id *)&v5[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_locationModel];
      sub_1AD9A680C();

      id v5 = v6;
    }
  }
}

uint64_t sub_1AD89A470()
{
  uint64_t result = swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService;
  if (*(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService])
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_1AD9DD550();
    __swift_project_value_buffer(v3, (uint64_t)qword_1E9A4D288);
    uint64_t v4 = v0;
    id v5 = sub_1AD9DD530();
    os_log_type_t v6 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v12 = v9;
      *(_DWORD *)id v7 = 136446210;
      uint64_t v10 = sub_1AD9E04F0();
      unint64_t v11 = v8;
      sub_1AD9DF790();
      swift_bridgeObjectRetain();
      sub_1AD9DF790();
      swift_bridgeObjectRelease();
      sub_1AD838978(v10, v11, &v12);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v5, v6, "[%{public}s] stopping", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v9, -1, -1);
      MEMORY[0x1B3E6D1A0](v7, -1, -1);
    }
    else
    {
    }
    sub_1AD9A680C();
    *(void *)&v0[v2] = 0;
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD89A6A4(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  sub_1AD8999CC(0, &qword_1E9A4A9B0, MEMORY[0x1E4FBCFE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  id v7 = (char *)&v31 - v6;
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1E9A4D288);
  id v9 = v2;
  id v10 = a1;
  id v11 = v9;
  id v12 = v10;
  uint64_t v13 = sub_1AD9DD530();
  os_log_type_t v14 = sub_1AD9DFBE0();
  int v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v36 = v32;
    *(_DWORD *)uint64_t v16 = 136446467;
    uint64_t v34 = sub_1AD9E04F0();
    unint64_t v35 = v17;
    uint64_t v33 = v7;
    sub_1AD9DF790();
    HIDWORD(v31) = v15;
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_1AD838978(v34, v35, &v36);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    *(_WORD *)(v16 + 12) = 2081;
    id v18 = v12;
    id v19 = objc_msgSend(v18, sel_description);
    uint64_t v20 = sub_1AD9DF710();
    unint64_t v22 = v21;

    uint64_t v34 = sub_1AD838978(v20, v22, &v36);
    sub_1AD9DFEA0();
    id v7 = v33;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v13, BYTE4(v31), "[%{public}s] fetching current weather for location: %{private}s", (uint8_t *)v16, 0x16u);
    uint64_t v23 = v32;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v23, -1, -1);
    MEMORY[0x1B3E6D1A0](v16, -1, -1);
  }
  else
  {
  }
  uint64_t v24 = sub_1AD9DF950();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  sub_1AD9DF930();
  id v25 = v11;
  id v26 = v12;
  uint64_t v27 = sub_1AD9DF920();
  uint64_t v28 = (void *)swift_allocObject();
  uint64_t v29 = MEMORY[0x1E4FBCFD8];
  void v28[2] = v27;
  uint64_t v28[3] = v29;
  v28[4] = v25;
  v28[5] = v26;
  sub_1AD991598((uint64_t)v7, (uint64_t)&unk_1E9A4A9C0, (uint64_t)v28);
  return swift_release();
}

uint64_t sub_1AD89AA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[19] = a4;
  v5[20] = a5;
  sub_1AD89961C(0);
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F45F18];
  sub_1AD8999CC(0, &qword_1E9A4A9C8, (uint64_t (*)(uint64_t))sub_1AD899180, MEMORY[0x1E4F45F18]);
  v5[23] = v7;
  v5[24] = *(void *)(v7 - 8);
  v5[25] = swift_task_alloc();
  sub_1AD8999CC(0, &qword_1E9A4A9D0, (uint64_t (*)(uint64_t))sub_1AD898FBC, v6);
  v5[26] = v8;
  v5[27] = *(void *)(v8 - 8);
  v5[28] = swift_task_alloc();
  sub_1AD8999CC(0, &qword_1E9A4A9D8, MEMORY[0x1E4F45EB0], v6);
  v5[29] = v9;
  v5[30] = *(void *)(v9 - 8);
  v5[31] = swift_task_alloc();
  sub_1AD899180();
  v5[32] = v10;
  v5[33] = *(void *)(v10 - 8);
  v5[34] = swift_task_alloc();
  sub_1AD898FBC();
  v5[35] = v11;
  v5[36] = *(void *)(v11 - 8);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  uint64_t v12 = sub_1AD9DCFC0();
  v5[40] = v12;
  v5[41] = *(void *)(v12 - 8);
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  v5[45] = swift_task_alloc();
  sub_1AD9DF930();
  v5[46] = sub_1AD9DF920();
  uint64_t v14 = sub_1AD9DF910();
  v5[47] = v14;
  v5[48] = v13;
  return MEMORY[0x1F4188298](sub_1AD89AE14, v14, v13);
}

uint64_t sub_1AD89AE14()
{
  id v26 = v0;
  uint64_t v1 = *(void *)(v0[19] + OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService);
  v0[49] = v1;
  if (v1)
  {
    uint64_t v2 = v0[39];
    uint64_t v3 = v0[40];
    uint64_t v4 = v0[34];
    uint64_t v5 = v0[35];
    uint64_t v7 = v0[31];
    uint64_t v6 = v0[32];
    uint64_t v8 = v0[28];
    uint64_t v9 = v0[25];
    v0[5] = v0[45];
    v0[6] = v2;
    v0[7] = v4;
    swift_retain();
    sub_1AD9DCFF0();
    v0[8] = v7;
    sub_1AD9DCFE0();
    v0[9] = v8;
    sub_1AD9DCFD0();
    v0[10] = v9;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[2] = v3;
    v0[50] = v10;
    v0[3] = v5;
    v0[4] = v6;
    *uint64_t v10 = v0;
    v10[1] = sub_1AD89B198;
    uint64_t v11 = v0[20];
    return MEMORY[0x1F4103960](v0 + 5, v11, v0 + 8, 3, v0 + 2);
  }
  else
  {
    swift_release();
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v12 = (void *)v0[19];
    uint64_t v13 = sub_1AD9DD550();
    __swift_project_value_buffer(v13, (uint64_t)qword_1E9A4D288);
    id v14 = v12;
    int v15 = sub_1AD9DD530();
    os_log_type_t v16 = sub_1AD9DFBC0();
    BOOL v17 = os_log_type_enabled(v15, v16);
    id v18 = (void *)v0[19];
    if (v17)
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v25 = v20;
      *(_DWORD *)id v19 = 136446210;
      uint64_t v21 = sub_1AD899284();
      v0[11] = sub_1AD838978(v21, v22, &v25);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v15, v16, "[%{public}s] weatherService is nil", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
      MEMORY[0x1B3E6D1A0](v19, -1, -1);
    }
    else
    {
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
}

uint64_t sub_1AD89B198()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[47];
    uint64_t v4 = v2[48];
    uint64_t v5 = sub_1AD89BA08;
  }
  else
  {
    uint64_t v7 = v2[30];
    uint64_t v6 = v2[31];
    uint64_t v9 = v2[28];
    uint64_t v8 = v2[29];
    uint64_t v10 = v2[26];
    uint64_t v11 = v2[27];
    (*(void (**)(void, void))(v2[24] + 8))(v2[25], v2[23]);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v3 = v2[47];
    uint64_t v4 = v2[48];
    uint64_t v5 = sub_1AD89B318;
  }
  return MEMORY[0x1F4188298](v5, v3, v4);
}

uint64_t sub_1AD89B318()
{
  uint64_t v66 = v0;
  swift_release();
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  id v60 = (void *)v0[19];
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[41];
  uint64_t v5 = v0[38];
  uint64_t v63 = v0[39];
  uint64_t v64 = v0[43];
  uint64_t v7 = v0[35];
  uint64_t v6 = v0[36];
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1E9A4D288);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v1, v2, v3);
  id v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v62(v5, v63, v7);
  v9(v64, v2, v3);
  uint64_t v10 = v9;
  id v11 = v60;
  uint64_t v12 = sub_1AD9DD530();
  os_log_type_t v13 = sub_1AD9DFBE0();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = v0[44];
  uint64_t v58 = v0[43];
  if (v14)
  {
    uint64_t v46 = v9;
    uint64_t v52 = v0[42];
    uint64_t v53 = v0[41];
    uint64_t v45 = v0[40];
    uint64_t v48 = v0[38];
    uint64_t v55 = v0[37];
    uint64_t v56 = v0[36];
    uint64_t v47 = v0[35];
    os_log_type_t type = v13;
    os_log_type_t v16 = (void *)v0[19];
    uint64_t v17 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    uint64_t v65 = v49;
    *(_DWORD *)uint64_t v17 = 136446979;
    uint64_t v18 = sub_1AD899284();
    v0[15] = sub_1AD838978(v18, v19, &v65);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2081;
    v10(v52, v15, v45);
    uint64_t v20 = sub_1AD9DF730();
    v0[16] = sub_1AD838978(v20, v21, &v65);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    id v61 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v61(v15, v45);
    *(_WORD *)(v17 + 22) = 2081;
    v62(v55, v48, v47);
    uint64_t v22 = sub_1AD9DF730();
    v0[17] = sub_1AD838978(v22, v23, &v65);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    v57(v48, v47);
    *(_WORD *)(v17 + 32) = 2081;
    uint64_t v10 = v46;
    v46(v52, v58, v45);
    uint64_t v24 = sub_1AD9DF730();
    v0[18] = sub_1AD838978(v24, v25, &v65);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    v61(v58, v45);
    _os_log_impl(&dword_1AD834000, v12, type, "[%{public}s] fetched current weather: %{private}s, hourly forecast: %{private}s, daily forecast: %{private}s", (uint8_t *)v17, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v49, -1, -1);
    MEMORY[0x1B3E6D1A0](v17, -1, -1);
  }
  else
  {
    uint64_t v26 = v0[40];
    uint64_t v27 = v0[41];
    uint64_t v28 = v0[38];
    uint64_t v29 = v0[35];
    uint64_t v30 = v0[36];
    uint64_t v31 = (void *)v0[19];

    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v32(v15, v26);
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v57(v28, v29);
    id v61 = v32;
    v32(v58, v26);
  }
  uint64_t v33 = (void (*)(uint64_t))v10;
  uint64_t v54 = v0[45];
  uint64_t v34 = v0[39];
  uint64_t v59 = v0[40];
  uint64_t v36 = v0[34];
  uint64_t v35 = v0[35];
  uint64_t v38 = v0[32];
  uint64_t v37 = v0[33];
  uint64_t v40 = v0[21];
  uint64_t v39 = v0[22];
  os_log_t log = (os_log_t)v0[19];
  v33(v39);
  uint64_t v41 = type metadata accessor for CurrentWeatherModel(0);
  v62(v39 + *(int *)(v41 + 20), v34, v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v39 + *(int *)(v41 + 24), v36, v38);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v39, 0, 1, v41);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD89E43C(v39, v40, (uint64_t (*)(void))sub_1AD89961C);
  id v42 = log;
  sub_1AD9DDBD0();
  sub_1AD89E394(v39, (uint64_t (*)(void))sub_1AD89961C);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  v57(v34, v35);
  v61(v54, v59);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = (uint64_t (*)(void))v0[1];
  return v43();
}

uint64_t sub_1AD89BA08()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0[30];
  uint64_t v31 = v0[31];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[27];
  uint64_t v6 = v0[24];
  uint64_t v7 = v0[25];
  uint64_t v8 = v0[23];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v31, v2);
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)v0[51];
  uint64_t v10 = (void *)v0[19];
  uint64_t v11 = sub_1AD9DD550();
  __swift_project_value_buffer(v11, (uint64_t)qword_1E9A4D288);
  id v12 = v10;
  id v13 = v9;
  id v14 = v12;
  id v15 = v9;
  os_log_type_t v16 = sub_1AD9DD530();
  os_log_type_t v17 = sub_1AD9DFBC0();
  BOOL v18 = os_log_type_enabled(v16, v17);
  unint64_t v19 = (void *)v0[51];
  uint64_t v20 = (void *)v0[19];
  if (v18)
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v32 = v22;
    *(_DWORD *)uint64_t v21 = 136446466;
    uint64_t v23 = sub_1AD899284();
    v0[12] = sub_1AD838978(v23, v24, &v32);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    *(_WORD *)(v21 + 12) = 2082;
    v0[13] = v19;
    id v25 = v19;
    sub_1AD843E70(0, (unint64_t *)&qword_1E9A4D810);
    uint64_t v26 = sub_1AD9DF730();
    v0[14] = sub_1AD838978(v26, v27, &v32);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v16, v17, "[%{public}s] error fetching current weather: %{public}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v22, -1, -1);
    MEMORY[0x1B3E6D1A0](v21, -1, -1);
  }
  else
  {
  }
  uint64_t v28 = (void *)v0[51];
  sub_1AD89A470();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_1AD89BDA4()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI12WeatherModel____lazy_storage___gradientManager;
  if (*(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI12WeatherModel____lazy_storage___gradientManager))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI12WeatherModel____lazy_storage___gradientManager);
  }
  else
  {
    uint64_t v3 = v0;
    sub_1AD9DF550();
    swift_allocObject();
    uint64_t v2 = sub_1AD9DF540();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1AD89BE20()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v1 = sub_1AD9DF5A0();
  uint64_t v99 = *(void *)(v1 - 8);
  uint64_t v100 = v1;
  MEMORY[0x1F4188790](v1, v2);
  double v98 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1AD9DD090();
  uint64_t v96 = *(void *)(v4 - 8);
  uint64_t v97 = v4;
  MEMORY[0x1F4188790](v4, v5);
  id v95 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1AD9DF580();
  MEMORY[0x1F4188790](v7 - 8, v8);
  id v94 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_1AD9DF510();
  uint64_t v86 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87, v10);
  id v91 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1AD9DD050();
  MEMORY[0x1F4188790](v12 - 8, v13);
  id v89 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1AD9DF520();
  uint64_t v92 = *(void *)(v15 - 8);
  uint64_t v93 = v15;
  MEMORY[0x1F4188790](v15, v16);
  id v90 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_1AD9DCC70();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81, v18);
  id v79 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_1AD9DF5E0();
  uint64_t v88 = *(void *)(v104 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v104, v20);
  id v84 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21, v23);
  id v85 = (char *)&v73 - v24;
  sub_1AD8999CC(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v25 - 8, v26);
  id v78 = (char *)&v73 - v27;
  uint64_t v28 = sub_1AD9DCEB0();
  MEMORY[0x1F4188790](v28 - 8, v29);
  id v77 = (char *)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_1AD9DD0F0();
  uint64_t v82 = *(void *)(v83 - 8);
  MEMORY[0x1F4188790](v83, v31);
  uint64_t v103 = (char *)&v73 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for CurrentWeatherModel(0);
  uint64_t v34 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33, v35);
  uint64_t v37 = (char *)&v73 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD89961C(0);
  MEMORY[0x1F4188790](v38 - 8, v39);
  uint64_t v41 = (char *)&v73 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_1AD9DCFC0();
  uint64_t v101 = *(void *)(v42 - 8);
  uint64_t v102 = v42;
  uint64_t v44 = MEMORY[0x1F4188790](v42, v43);
  uint64_t v46 = (char *)&v73 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v44, v47);
  uint64_t v49 = (char *)&v73 - v48;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  id v50 = v105;
  if (!v105) {
    return 0;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v41, 1, v33))
  {
    sub_1AD89E394((uint64_t)v41, (uint64_t (*)(void))sub_1AD89961C);

    return 0;
  }
  sub_1AD89E43C((uint64_t)v41, (uint64_t)v37, type metadata accessor for CurrentWeatherModel);
  sub_1AD89E394((uint64_t)v41, (uint64_t (*)(void))sub_1AD89961C);
  uint64_t v53 = v101;
  uint64_t v52 = v102;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v46, v37, v102);
  sub_1AD89E394((uint64_t)v37, type metadata accessor for CurrentWeatherModel);
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v49, v46, v52);
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v54 = sub_1AD9DD550();
  __swift_project_value_buffer(v54, (uint64_t)qword_1E9A4D288);
  id v55 = v0;
  uint64_t v56 = sub_1AD9DD530();
  os_log_type_t v57 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    uint64_t v107 = v74;
    *(_DWORD *)uint64_t v58 = 136446210;
    uint64_t v73 = v58 + 4;
    uint64_t v105 = (void *)sub_1AD9E04F0();
    unint64_t v106 = v59;
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    uint64_t v105 = (void *)sub_1AD838978((uint64_t)v105, v106, &v107);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v56, v57, "[%{public}s] loading gradient for current weather", v58, 0xCu);
    uint64_t v60 = v74;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v60, -1, -1);
    MEMORY[0x1B3E6D1A0](v58, -1, -1);
  }
  else
  {
  }
  id v75 = v55;
  swift_bridgeObjectRetain();
  sub_1AD9DCEA0();
  objc_msgSend(v50, sel_coordinate);
  uint64_t v61 = v80;
  uint64_t v62 = v81;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v78, 1, 1, v81);
  sub_1AD9DD0E0();
  uint64_t v63 = v79;
  sub_1AD9DCC50();
  uint64_t v64 = v85;
  sub_1AD9DF560();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v62);
  sub_1AD9DCFB0();
  uint64_t v65 = v88;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v84, v64, v104);
  sub_1AD9DCF70();
  uint64_t v66 = *MEMORY[0x1E4FB6020];
  uint64_t v67 = sub_1AD9DF500();
  id v68 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 104))(v91, v66, v67);
  (*(void (**)(char *, void, uint64_t))(v86 + 104))(v68, *MEMORY[0x1E4FB6028], v87);
  sub_1AD9DCF60();
  id v69 = v95;
  sub_1AD9DCF90();
  sub_1AD9DD060();
  sub_1AD9DD080();
  sub_1AD9DD070();
  sub_1AD9DF570();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v69, v97);
  id v70 = v90;
  sub_1AD9DF4F0();
  sub_1AD89BDA4();
  id v71 = v98;
  sub_1AD9DF530();
  swift_release();
  uint64_t v51 = sub_1AD9DF590();

  (*(void (**)(char *, uint64_t))(v99 + 8))(v71, v100);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v70, v93);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v104);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v103, v83);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v49, v102);
  return v51;
}

uint64_t CurrentWeather.predominateCloudAltitudeKind.getter()
{
  uint64_t v0 = sub_1AD9DD090();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCF90();
  sub_1AD9DD060();
  sub_1AD9DD080();
  sub_1AD9DD070();
  sub_1AD9DF570();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

id WeatherModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void WeatherModel.init()()
{
}

id WeatherModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeatherModel(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD89CDF0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for WeatherModel(0);
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

uint64_t CurrentWeatherModel.naturalLanguageDescription.getter()
{
  sub_1AD9DF5D0();
  swift_allocObject();
  sub_1AD9DF5C0();
  type metadata accessor for CurrentWeatherModel(0);
  uint64_t v0 = sub_1AD9DF5B0();
  uint64_t v2 = v1;
  swift_release();
  if (v2) {
    return v0;
  }
  else {
    return 0;
  }
}

uint64_t CurrentWeatherModel.todaysWeather.getter()
{
  uint64_t v0 = sub_1AD9DCEB0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AD9DCC70();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CurrentWeatherModel(0);
  sub_1AD9DCFA0();
  sub_1AD9DCEA0();
  sub_1AD9DD0A0();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t CurrentWeather.conditionsIcon.getter()
{
  uint64_t v0 = sub_1AD9DD050();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCFB0();
  sub_1AD9DCF70();
  sub_1AD9DD030();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t CurrentWeather.conditionsImageTemplate.getter()
{
  return sub_1AD89D14C(MEMORY[0x1E4F3EC20]);
}

uint64_t CurrentWeather.conditionsImage.getter()
{
  return sub_1AD89D14C(MEMORY[0x1E4F3EC08]);
}

uint64_t sub_1AD89D14C(unsigned int *a1)
{
  sub_1AD89E4A4(0);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1AD9DD050();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AD9DF4D0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCFB0();
  sub_1AD9DCF70();
  sub_1AD9DD030();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_1AD9DF4C0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  sub_1AD9DEF40();
  uint64_t v16 = *a1;
  uint64_t v17 = sub_1AD9DEF80();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v5, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v5, 0, 1, v17);
  uint64_t v19 = sub_1AD9DEF60();
  swift_release();
  sub_1AD89E394((uint64_t)v5, (uint64_t (*)(void))sub_1AD89E4A4);
  return v19;
}

uint64_t CurrentWeather.accessibilityDescription.getter()
{
  uint64_t v0 = sub_1AD9DD050();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCFB0();
  uint64_t v5 = sub_1AD9DD040();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5;
}

uint64_t CurrentWeather.temperatureText.getter()
{
  uint64_t v0 = sub_1AD9DF4E0();
  uint64_t v17 = v0;
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AD9DFC80();
  uint64_t v18 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD89E4D8(0, &qword_1E9A4A960, (unint64_t *)&qword_1E9A4A968, 0x1E4F29218, MEMORY[0x1E4F26DB0]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)&v17 - v13;
  sub_1AD9DCF80();
  sub_1AD9DF4B0();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4FB6018], v0);
  sub_1AD9DD0D0();
  sub_1AD9DD0C0();
  sub_1AD8990C0(&qword_1E9A4A970, MEMORY[0x1E4FB6040]);
  uint64_t v15 = sub_1AD9DC6C0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v17);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v15;
}

double CurrentWeather.currentTemperature.getter()
{
  return sub_1AD89D7F8(MEMORY[0x1E4F45E90]);
}

double DayWeather.currentHighTemperature.getter()
{
  return sub_1AD89D7F8(MEMORY[0x1E4F45E30]);
}

double DayWeather.currentLowTemperature.getter()
{
  return sub_1AD89D7F8(MEMORY[0x1E4F45E28]);
}

double sub_1AD89D7F8(void (*a1)(uint64_t))
{
  sub_1AD89E4D8(0, &qword_1E9A4A960, (unint64_t *)&qword_1E9A4A968, 0x1E4F29218, MEMORY[0x1E4F26DB0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v2, v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v6, v9);
  uint64_t v12 = (char *)&v17 - v11;
  a1(v10);
  sub_1AD9DC6D0();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v12, v3);
  sub_1AD9DC6B0();
  double v15 = v14;
  v13(v8, v3);
  return v15;
}

uint64_t DayWeather.shortNaturalLanguageDescription.getter()
{
  uint64_t v0 = sub_1AD9DF4E0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_1AD9DFC80();
  uint64_t v42 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38, v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD89E4D8(0, &qword_1E9A4A960, (unint64_t *)&qword_1E9A4A968, 0x1E4F29218, MEMORY[0x1E4F26DB0]);
  uint64_t v9 = v8;
  uint64_t v41 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v30 - v11;
  sub_1AD9DCF30();
  sub_1AD9DF4B0();
  unsigned int v37 = *MEMORY[0x1E4FB6018];
  uint64_t v36 = *(void (**)(char *))(v1 + 104);
  v36(v4);
  uint64_t v35 = sub_1AD9DD0D0();
  sub_1AD9DD0C0();
  uint64_t v34 = sub_1AD8990C0(&qword_1E9A4A970, MEMORY[0x1E4FB6040]);
  uint64_t v13 = v38;
  uint64_t v14 = sub_1AD9DC6C0();
  uint64_t v39 = v15;
  uint64_t v40 = v14;
  swift_release();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v1 + 8);
  uint64_t v32 = v1 + 8;
  uint64_t v33 = v16;
  uint64_t v17 = v0;
  v16(v4, v0);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v42 + 8);
  v42 += 8;
  uint64_t v31 = v18;
  v18(v7, v13);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v41 + 8);
  v41 += 8;
  v19(v12, v9);
  sub_1AD9DCF20();
  sub_1AD9DF4B0();
  ((void (*)(char *, void, uint64_t))v36)(v4, v37, v17);
  sub_1AD9DD0C0();
  uint64_t v20 = sub_1AD9DC6C0();
  uint64_t v22 = v21;
  swift_release();
  v33(v4, v17);
  v31(v7, v13);
  v19(v12, v9);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v23 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  sub_1AD89E540();
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1AD9E3080;
  uint64_t v25 = MEMORY[0x1E4FBB1A0];
  *(void *)(v24 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v26 = sub_1AD89E5A8();
  uint64_t v27 = v39;
  *(void *)(v24 + 32) = v40;
  *(void *)(v24 + 40) = v27;
  *(void *)(v24 + 96) = v25;
  *(void *)(v24 + 104) = v26;
  *(void *)(v24 + 64) = v26;
  *(void *)(v24 + 72) = v20;
  *(void *)(v24 + 80) = v22;
  uint64_t v28 = sub_1AD9DF720();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_1AD89DE3C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD89DEBC(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = v2;
  id v5 = v3;
  return sub_1AD9DDBD0();
}

uint64_t type metadata accessor for WeatherModel(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4A9A0);
}

id sub_1AD89DF50(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  sub_1AD8999CC(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v28 - v10;
  sub_1AD89961C(0);
  uint64_t v14 = MEMORY[0x1F4188790](v12, v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v17);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = &v3[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel__currentWeatherModel];
  uint64_t v21 = type metadata accessor for CurrentWeatherModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  sub_1AD89E43C((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))sub_1AD89961C);
  uint64_t v22 = v3;
  sub_1AD9DDB80();
  sub_1AD89E394((uint64_t)v19, (uint64_t (*)(void))sub_1AD89961C);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v20, v11, v7);
  *(void *)&v22[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService] = 0;
  *(void *)&v22[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_cancellables] = MEMORY[0x1E4FBC870];
  *(void *)&v22[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel____lazy_storage___gradientManager] = 0;
  id v23 = &v22[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_debugIdentifier];
  uint64_t v24 = v29;
  *(void *)id v23 = a2;
  *((void *)v23 + 1) = v24;
  *(void *)&v22[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_locationModel] = a1;
  id v25 = a1;

  unint64_t v26 = (objc_class *)type metadata accessor for WeatherModel(0);
  v30.receiver = v22;
  v30.super_class = v26;
  return objc_msgSendSuper2(&v30, sel_init);
}

void sub_1AD89E1DC()
{
  if (!qword_1E9A4A920)
  {
    sub_1AD89E308(255, &qword_1E9A4D760, MEMORY[0x1E4F1AC60]);
    sub_1AD837214(255, (unint64_t *)&qword_1EB724D50);
    sub_1AD89E294();
    sub_1AD841810();
    unint64_t v0 = sub_1AD9DDA50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A920);
    }
  }
}

unint64_t sub_1AD89E294()
{
  unint64_t result = qword_1E9A4A928;
  if (!qword_1E9A4A928)
  {
    sub_1AD89E308(255, &qword_1E9A4D760, MEMORY[0x1E4F1AC60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A928);
  }
  return result;
}

void sub_1AD89E308(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1AD89E4D8(255, (unint64_t *)&qword_1E9A4D750, &qword_1E9A4A918, 0x1E4F1E5F0, MEMORY[0x1E4FBB718]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1AD89E394(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD89E3F4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD89E42C(void **a1)
{
  sub_1AD89A3DC(a1, v1);
}

uint64_t sub_1AD89E43C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1AD89E4A4(uint64_t a1)
{
}

void sub_1AD89E4D8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_1AD837214(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_1AD89E540()
{
  if (!qword_1E9A4A978)
  {
    sub_1AD843E70(255, (unint64_t *)&qword_1E9A4BAE0);
    unint64_t v0 = sub_1AD9E0290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4A978);
    }
  }
}

unint64_t sub_1AD89E5A8()
{
  unint64_t result = qword_1E9A4A980;
  if (!qword_1E9A4A980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4A980);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CurrentWeatherModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AD9DCFC0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    sub_1AD898FBC();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    sub_1AD899180();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for CurrentWeatherModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DCFC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  sub_1AD898FBC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  sub_1AD899180();
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  return v9(v7, v8);
}

uint64_t initializeWithCopy for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCFC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_1AD898FBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  sub_1AD899180();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCFC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_1AD898FBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  sub_1AD899180();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCFC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_1AD898FBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  sub_1AD899180();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCFC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_1AD898FBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  sub_1AD899180();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD89EC80);
}

uint64_t sub_1AD89EC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCFC0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_1AD898FBC();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  sub_1AD899180();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD89EDE0);
}

uint64_t sub_1AD89EDE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1AD9DCFC0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  sub_1AD898FBC();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  sub_1AD899180();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

void sub_1AD89EF38()
{
  sub_1AD9DCFC0();
  if (v0 <= 0x3F)
  {
    sub_1AD898FBC();
    if (v1 <= 0x3F)
    {
      sub_1AD899180();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_1AD89F03C()
{
  return type metadata accessor for WeatherModel(0);
}

void sub_1AD89F044()
{
  sub_1AD8999CC(319, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for WeatherModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WeatherModel);
}

uint64_t dispatch thunk of WeatherModel.currentWeatherModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of WeatherModel.currentWeatherModel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of WeatherModel.currentWeatherModel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of WeatherModel.$currentWeatherModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of WeatherModel.$currentWeatherModel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of WeatherModel.$currentWeatherModel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of WeatherModel.__allocating_init(locationModel:debugIdentifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of WeatherModel.startIfNeeded()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of WeatherModel.stopIfNeeded()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of WeatherModel.loadGradient()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t sub_1AD89F340()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1AD89F388(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1AD89F448;
  return sub_1AD89AA60(a1, v4, v5, v7, v6);
}

uint64_t sub_1AD89F448()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1AD89F53C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD89F5BC(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_1AD9DDBD0();
}

uint64_t sub_1AD89F62C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD89F6AC()
{
  return swift_endAccess();
}

uint64_t sub_1AD89F72C(uint64_t a1)
{
  sub_1AD8A1C20(0, &qword_1E9A4AAD8, MEMORY[0x1E4F1AC60]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v2, v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v14 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1AD8A1C20(0, &qword_1E9A4A9E8, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1AD89F8D0()
{
  return swift_endAccess();
}

uint64_t sub_1AD89F94C@<X0>(void *a1@<X8>)
{
  return sub_1AD89FC9C(a1);
}

uint64_t sub_1AD89F960(void **a1, void **a2)
{
  return sub_1AD89FD2C(a1, a2);
}

uint64_t sub_1AD89F974()
{
  return sub_1AD89FDB0();
}

uint64_t sub_1AD89F990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  return swift_endAccess();
}

uint64_t sub_1AD89FA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t a7, unint64_t *a8)
{
  uint64_t v22 = a8;
  sub_1AD8A1BBC(0, a5, a6, MEMORY[0x1E4F1AC60]);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10, v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v17);
  uint64_t v19 = (char *)&v22 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)&v22 - v18, a1, v11);
  v20(v16, (uint64_t)v19, v11);
  swift_beginAccess();
  sub_1AD8A1BBC(0, v22, a6, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v11);
}

uint64_t sub_1AD89FBD8()
{
  return sub_1AD89FC00((uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__scheduleModel, &qword_1E9A4A9F8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel);
}

uint64_t sub_1AD89FC00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  return swift_endAccess();
}

uint64_t sub_1AD89FC88@<X0>(void *a1@<X8>)
{
  return sub_1AD89FC9C(a1);
}

uint64_t sub_1AD89FC9C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD89FD18(void **a1, void **a2)
{
  return sub_1AD89FD2C(a1, a2);
}

uint64_t sub_1AD89FD2C(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = v2;
  id v5 = v3;
  return sub_1AD9DDBD0();
}

uint64_t sub_1AD89FD9C()
{
  return sub_1AD89FDB0();
}

uint64_t sub_1AD89FDB0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1AD89FE24()
{
  return sub_1AD89FC00((uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__settingsModel, (unint64_t *)&unk_1E9A4AA08, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel);
}

uint64_t sub_1AD89FE4C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  uint64_t v0 = *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
  uint64_t v1 = *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32];
  __swift_project_boxed_opaque_existential_1Tm(&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider], v0);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);

  return v2;
}

id sub_1AD89FF04()
{
  uint64_t v0 = sub_1AD9DCC70();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  id v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  id v5 = v11;
  uint64_t v6 = *(void *)&v11[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
  uint64_t v7 = *(void *)&v11[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32];
  __swift_project_boxed_opaque_existential_1Tm(&v11[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider], v6);
  (*(void (**)(void))&v5[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_currentDateProvider])();
  id v8 = SleepScheduleProviding.upcomingResolvedOccurrence(forCurrentDate:)((uint64_t)v4, v6, v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);

  return v8;
}

uint64_t sub_1AD8A0070@<X0>(uint64_t *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  return sub_1AD87F384(v1, a1);
}

char *sub_1AD8A0100@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  uint64_t result = (char *)objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior], sel_isDeviceSupported);
  if (result && (uint64_t result = v3, v4 >= 2u))
  {
    *a1 = v3;
    return v3;
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

id SleepActivityConfigurationModel.watchAppInstalledProvider.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_watchAppInstalledProvider));
}

uint64_t SleepActivityConfigurationModel.__allocating_init(sleepScheduleProvider:sleepSettingsProvider:featureAvailability:watchAppInstalledProvider:behavior:currentDateProvider:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  return sub_1AD8A024C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, void *, uint64_t, uint64_t, void *))sub_1AD8A14DC);
}

uint64_t SleepActivityConfigurationModel.init(sleepScheduleProvider:sleepSettingsProvider:featureAvailability:watchAppInstalledProvider:behavior:currentDateProvider:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  return sub_1AD8A024C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, void *, uint64_t, uint64_t, void *))sub_1AD8A106C);
}

uint64_t sub_1AD8A024C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, void *, void *, uint64_t, uint64_t, void *))
{
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(a1, v13);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a2, v15);
  swift_getObjectType();
  uint64_t v17 = a9(v14, v16, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v17;
}

uint64_t sub_1AD8A0354()
{
  sub_1AD8A1BBC(0, (unint64_t *)&qword_1EB724D00, MEMORY[0x1E4FBCC28], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v3 = (char *)v17 - v2;
  sub_1AD86E970();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  uint64_t v10 = (void *)v17[0];
  type metadata accessor for SleepScheduleModel();
  sub_1AD8A1AF4(&qword_1E9A4AAB8, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
  uint64_t v11 = sub_1AD9DDAB0();

  v17[0] = v11;
  sub_1AD9DDB60();
  uint64_t v12 = sub_1AD9DDBF0();
  swift_release();
  v17[0] = v12;
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  id v18 = (id)sub_1AD9DFCA0();
  uint64_t v13 = sub_1AD9DFC90();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 1, 1, v13);
  sub_1AD86EA3C();
  sub_1AD8A1AF4(&qword_1E9A49F18, (void (*)(uint64_t))sub_1AD86EA3C);
  sub_1AD841810();
  sub_1AD9DDC20();
  sub_1AD86ED78((uint64_t)v3);

  swift_release();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1AD8A1B74;
  *(void *)(v15 + 24) = v14;
  sub_1AD8A1AF4(&qword_1E9A4AAC0, (void (*)(uint64_t))sub_1AD86E970);
  sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  return swift_release();
}

void sub_1AD8A0740(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1B3E6D270](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    sub_1AD8A0794();
  }
}

uint64_t sub_1AD8A0794()
{
  sub_1AD8A0858(&v5);
  int v1 = v5;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  if (v1 != v4)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v3 = v0;
    return sub_1AD9DDBD0();
  }
  return result;
}

void sub_1AD8A0858(unsigned char *a1@<X8>)
{
  id v3 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior);
  unsigned int v4 = objc_msgSend(v3, sel_hksp_supportsSleep);
  if (!v4) {
    goto LABEL_28;
  }
  uint64_t ObjectType = swift_getObjectType();
  if ((HKFeatureAvailabilityProviding.isFeatureOnboarded.getter(ObjectType) & 1) == 0)
  {
    LOBYTE(v4) = objc_msgSend(v3, sel_isDeviceSupported);
LABEL_28:
    *a1 = v4;
    return;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  uint64_t v6 = *(void **)&v16[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule];
  id v7 = v6;

  if (!v6)
  {
    LOBYTE(v4) = 3;
    goto LABEL_28;
  }
  if (!objc_msgSend(v7, sel_isEnabled))
  {

    LOBYTE(v4) = 2;
    goto LABEL_28;
  }
  id v8 = objc_msgSend(v7, sel_occurrences);
  sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
  unint64_t v9 = sub_1AD9DF860();

  uint64_t v17 = MEMORY[0x1E4FBC860];
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_7;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x1E4FBC860];
LABEL_22:
    if (v14 < 0 || (v14 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1AD9E0190();

      swift_release_n();
    }
    else
    {
      uint64_t v15 = *(void *)(v14 + 16);
      swift_release();
    }
    if (v15) {
      LOBYTE(v4) = 4;
    }
    else {
      LOBYTE(v4) = 3;
    }
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1AD9E0190();
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_21;
  }
LABEL_7:
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x1B3E6BFF0](i, v9);
      }
      else {
        id v12 = *(id *)(v9 + 8 * i + 32);
      }
      uint64_t v13 = v12;
      if (objc_msgSend(v12, sel_isSingleDayOverride))
      {
      }
      else
      {
        sub_1AD9E0080();
        sub_1AD9E00C0();
        sub_1AD9E00D0();
        sub_1AD9E0090();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = v17;
    goto LABEL_22;
  }
  __break(1u);
}

id SleepActivityConfigurationModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SleepActivityConfigurationModel.init()()
{
}

id SleepActivityConfigurationModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepActivityConfigurationModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD8A0DA8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SleepActivityConfigurationModel();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

uint64_t SleepActivityConfigurationModel.featureAvailabilityProvidingDidUpdateOnboardingCompletion(_:)()
{
  uint64_t v0 = sub_1AD9DF410();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  unsigned int v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  *unsigned int v4 = sub_1AD9DFCA0();
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4FBCBF0], v0);
  char v5 = sub_1AD9DF420();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v4, v0);
  if (v5) {
    return sub_1AD8A0794();
  }
  __break(1u);
  return result;
}

id sub_1AD8A106C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v58 = a5;
  id v59 = a8;
  uint64_t v54 = a7;
  uint64_t v55 = a6;
  uint64_t v56 = a3;
  os_log_type_t v57 = a4;
  uint64_t v49 = a2;
  uint64_t v50 = a14;
  uint64_t v51 = a10;
  uint64_t v52 = a1;
  uint64_t v14 = *(void *)(a10 - 8);
  uint64_t v53 = a13;
  uint64_t v15 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a12 - 8);
  MEMORY[0x1F4188790](v15, v19);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8A1C20(0, &qword_1E9A4A9E8, MEMORY[0x1E4F1AC70]);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v25);
  uint64_t v27 = (char *)&v49 - v26;
  uint64_t v28 = &a9[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__layout];
  char v62 = 0;
  uint64_t v29 = a9;
  sub_1AD9DDB80();
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v28, v27, v23);
  objc_super v30 = (uint64_t *)&v29[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_configUIVisitedKey];
  *objc_super v30 = sub_1AD9DF710();
  v30[1] = v31;
  *(void *)&v29[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_subscriptions] = MEMORY[0x1E4FBC870];
  uint64_t v32 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepSettingsModel());
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v49, a12);
  id v33 = sub_1AD8DAD10((uint64_t)v21, v32, a12, v50);
  swift_beginAccess();
  id v61 = v33;
  sub_1AD9DDB80();
  swift_endAccess();
  uint64_t v34 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepScheduleModel());
  uint64_t v35 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v52, v51);
  uint64_t v36 = v54;
  swift_retain();
  id v37 = sub_1AD8A703C((uint64_t)v17, v55, v36, v34, v35, v53);
  swift_beginAccess();
  id v61 = v37;
  sub_1AD9DDB80();
  swift_endAccess();
  uint64_t v39 = v56;
  uint64_t v38 = v57;
  *(void *)&v29[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_featureAvailability] = v56;
  *(void *)&v29[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_watchAppInstalledProvider] = v38;
  uint64_t v40 = v58;
  *(void *)&v29[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior] = v58;
  swift_unknownObjectRetain();
  id v41 = v38;
  id v42 = v40;

  uint64_t v43 = (objc_class *)type metadata accessor for SleepActivityConfigurationModel();
  v60.receiver = v29;
  v60.super_class = v43;
  id v44 = objc_msgSendSuper2(&v60, sel_init);
  swift_bridgeObjectRetain();
  uint64_t v45 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v59, sel_setBool_forKey_, 1, v45);

  sub_1AD8A0794();
  sub_1AD8A0354();
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  id v46 = v44;
  uint64_t v47 = (void *)sub_1AD9DFCA0();
  objc_msgSend(v39, sel_registerObserver_queue_, v46, v47);

  return v46;
}

id sub_1AD8A14DC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v24 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepActivityConfigurationModel());
  return sub_1AD8A106C(a1, a2, a3, a4, a5, a6, a7, a8, v24, a10, a11, a12, a13, a14);
}

uint64_t type metadata accessor for SleepActivityConfigurationModel()
{
  uint64_t result = qword_1E9A4AA38;
  if (!qword_1E9A4AA38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD8A15E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD89F990(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__scheduleModel, &qword_1E9A4A9F8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel);
}

uint64_t sub_1AD8A161C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AD89FA20(a1, a2, a3, a4, &qword_1E9A4AAD0, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__scheduleModel, &qword_1E9A4A9F8);
}

uint64_t sub_1AD8A1660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD89F990(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__settingsModel, (unint64_t *)&unk_1E9A4AA08, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel);
}

uint64_t sub_1AD8A169C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AD89FA20(a1, a2, a3, a4, &qword_1E9A4AAC8, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__settingsModel, (unint64_t *)&unk_1E9A4AA08);
}

uint64_t sub_1AD8A16E0()
{
  return type metadata accessor for SleepActivityConfigurationModel();
}

void sub_1AD8A16E8()
{
  sub_1AD8A1C20(319, &qword_1E9A4A9E8, MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F)
  {
    sub_1AD8A1BBC(319, &qword_1E9A4A9F8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, MEMORY[0x1E4F1AC70]);
    if (v1 <= 0x3F)
    {
      sub_1AD8A1BBC(319, (unint64_t *)&unk_1E9A4AA08, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, MEMORY[0x1E4F1AC70]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for SleepActivityConfigurationModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepActivityConfigurationModel);
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.layout.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.$layout.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.scheduleModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.$scheduleModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.settingsModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.$settingsModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.sleepStore.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.nextOccurrence.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.sectionsViewModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.sleepTreatmentRowViewProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.__allocating_init(sleepScheduleProvider:sleepSettingsProvider:featureAvailability:watchAppInstalledProvider:behavior:currentDateProvider:userDefaults:)()
{
  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t sub_1AD8A1AF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD8A1B3C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD8A1B74()
{
  sub_1AD8A0740(v0);
}

uint64_t sub_1AD8A1B7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD8A1BB4(uint64_t a1)
{
  return sub_1AD94F214(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_1AD8A1BBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD8A1C20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for SleepActivityConfigurationSectionLayout);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t Publisher.mapToVoid()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  sub_1AD9DDC00();
  return swift_release();
}

uint64_t sub_1AD8A1D0C()
{
  return swift_deallocObject();
}

uint64_t HKSPWeekdays.id.getter(uint64_t a1)
{
  return sub_1AD8A1D4C(a1, MEMORY[0x1E4FA5338]);
}

uint64_t HKSPWeekdays.description.getter(uint64_t a1)
{
  return sub_1AD8A1D4C(a1, MEMORY[0x1E4FA54C0]);
}

uint64_t sub_1AD8A1D4C(uint64_t a1, uint64_t (*a2)(void))
{
  id v2 = (id)a2();
  uint64_t v3 = sub_1AD9DF710();

  return v3;
}

uint64_t sub_1AD8A1D9C()
{
  id v0 = (id)NSStringFromHKSPWeekdays();
  uint64_t v1 = sub_1AD9DF710();

  return v1;
}

void sub_1AD8A1DEC(uint64_t *a1@<X8>)
{
  id v2 = (id)HKSPIdentifierStringForWeekdays();
  uint64_t v3 = sub_1AD9DF710();
  uint64_t v5 = v4;

  *a1 = v3;
  a1[1] = v5;
}

uint64_t sub_1AD8A1E40()
{
  return MEMORY[0x1E4FBB1B0];
}

unint64_t sub_1AD8A1E50()
{
  unint64_t result = qword_1E9A495F8;
  if (!qword_1E9A495F8)
  {
    type metadata accessor for HKSPWeekdays(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A495F8);
  }
  return result;
}

UIContentSizeCategory __swiftcall UIContentSizeCategory.sizeSmaller()()
{
  id v0 = (void *)sub_1AD8A3340();
  return (UIContentSizeCategory)v0;
}

void static UIContentSizeCategory.contentSizeCategoryFitting(startingAt:strings:size:)(void *a1, unint64_t a2, double a3, double a4)
{
  unint64_t v7 = a2 >> 62;
  if (a2 >> 62)
  {
    id v77 = a1;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1AD9E0190();
    if (!v8) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v9 = a1;
    swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_10;
    }
  }
  if (v8 < 1) {
    goto LABEL_79;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = 0;
    do
    {
      MEMORY[0x1B3E6BFF0](v10++, a2);
      id v11 = a1;
      sub_1AD9DFD70();
      swift_unknownObjectRelease();
    }
    while (v8 != v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void **)(a2 + 8 * v12++ + 32);
      id v14 = a1;
      id v15 = v13;
      sub_1AD9DFD70();
    }
    while (v8 != v12);
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v17 = MEMORY[0x1E4FBC860];
  if (!v16)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    uint64_t v24 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v24) {
      goto LABEL_29;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    if (a4 >= 0.0) {
      return;
    }
    goto LABEL_37;
  }
  uint64_t v80 = MEMORY[0x1E4FBC860];
  sub_1AD8A2728(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0) {
    goto LABEL_80;
  }
  uint64_t v18 = v80;
  if ((a2 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v16; ++i)
    {
      MEMORY[0x1B3E6BFF0](i, a2);
      sub_1AD9DFCD0();
      uint64_t v21 = v20;
      swift_unknownObjectRelease();
      unint64_t v23 = *(void *)(v80 + 16);
      unint64_t v22 = *(void *)(v80 + 24);
      if (v23 >= v22 >> 1) {
        sub_1AD8A2728(v22 > 1, v23 + 1, 1);
      }
      *(void *)(v80 + 16) = v23 + 1;
      *(void *)(v80 + 8 * v23 + 32) = v21;
    }
  }
  else
  {
    uint64_t v25 = (id *)(a2 + 32);
    uint64_t v26 = v16;
    do
    {
      id v27 = *v25;
      sub_1AD9DFCD0();
      uint64_t v29 = v28;

      unint64_t v31 = *(void *)(v80 + 16);
      unint64_t v30 = *(void *)(v80 + 24);
      if (v31 >= v30 >> 1) {
        sub_1AD8A2728(v30 > 1, v31 + 1, 1);
      }
      *(void *)(v80 + 16) = v31 + 1;
      *(void *)(v80 + 8 * v31 + 32) = v29;
      ++v25;
      --v26;
    }
    while (v26);
  }
  uint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v24 = *(void *)(v80 + 16);
  if (!v24) {
    goto LABEL_22;
  }
LABEL_29:
  if (v24 == 1)
  {
    uint64_t v32 = 0;
    double v33 = 0.0;
LABEL_34:
    uint64_t v36 = v24 - v32;
    id v37 = (double *)(v18 + 8 * v32 + 32);
    do
    {
      double v38 = *v37++;
      double v33 = v33 + v38;
      --v36;
    }
    while (v36);
    goto LABEL_36;
  }
  uint64_t v32 = v24 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v34 = (double *)(v18 + 40);
  double v33 = 0.0;
  uint64_t v35 = v24 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v33 = v33 + *(v34 - 1) + *v34;
    v34 += 2;
    v35 -= 2;
  }
  while (v35);
  if (v24 != v32) {
    goto LABEL_34;
  }
LABEL_36:
  swift_bridgeObjectRelease();
  if (v33 <= a4) {
    return;
  }
LABEL_37:
  id v39 = a1;
  id v40 = (id)sub_1AD8A3340();

  uint64_t v41 = sub_1AD9DF710();
  uint64_t v43 = v42;
  if (v41 == sub_1AD9DF710() && v43 == v44)
  {
LABEL_73:
    swift_bridgeObjectRelease_n();
    goto LABEL_74;
  }
  char v46 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v46)
  {
LABEL_74:

    return;
  }
  unint64_t v79 = a2 & 0xC000000000000001;
  uint64_t v47 = v16;
  int64_t v78 = v16 & ~(v16 >> 63);
  while (1)
  {
    id v49 = v40;

    if (!v8) {
      goto LABEL_49;
    }
    swift_bridgeObjectRetain();
    if (v79)
    {
      uint64_t v50 = 0;
      do
      {
        MEMORY[0x1B3E6BFF0](v50++, a2);
        id v51 = v49;
        sub_1AD9DFD70();
        swift_unknownObjectRelease();
      }
      while (v8 != v50);
      swift_bridgeObjectRelease();
LABEL_49:
      if (!v47) {
        goto LABEL_60;
      }
      goto LABEL_50;
    }
    uint64_t v58 = 0;
    do
    {
      id v59 = *(void **)(a2 + 8 * v58++ + 32);
      id v60 = v49;
      id v61 = v59;
      sub_1AD9DFD70();
    }
    while (v8 != v58);
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
    if (!v47)
    {
LABEL_60:
      uint64_t v52 = v17;
      uint64_t v62 = *(void *)(v17 + 16);
      if (!v62) {
        goto LABEL_61;
      }
      goto LABEL_68;
    }
LABEL_50:
    sub_1AD8A2728(0, v78, 0);
    if (v47 < 0) {
      break;
    }
    uint64_t v52 = v17;
    if (v79)
    {
      for (uint64_t j = 0; j != v47; ++j)
      {
        MEMORY[0x1B3E6BFF0](j, a2);
        sub_1AD9DFCD0();
        uint64_t v55 = v54;
        swift_unknownObjectRelease();
        unint64_t v57 = *(void *)(v52 + 16);
        unint64_t v56 = *(void *)(v52 + 24);
        if (v57 >= v56 >> 1) {
          sub_1AD8A2728(v56 > 1, v57 + 1, 1);
        }
        *(void *)(v52 + 16) = v57 + 1;
        *(void *)(v52 + 8 * v57 + 32) = v55;
      }
    }
    else
    {
      uint64_t v63 = (id *)(a2 + 32);
      uint64_t v64 = v47;
      do
      {
        id v65 = *v63;
        sub_1AD9DFCD0();
        uint64_t v67 = v66;

        unint64_t v69 = *(void *)(v52 + 16);
        unint64_t v68 = *(void *)(v52 + 24);
        if (v69 >= v68 >> 1) {
          sub_1AD8A2728(v68 > 1, v69 + 1, 1);
        }
        *(void *)(v52 + 16) = v69 + 1;
        *(void *)(v52 + 8 * v69 + 32) = v67;
        ++v63;
        --v64;
      }
      while (v64);
    }
    uint64_t v17 = MEMORY[0x1E4FBC860];
    uint64_t v62 = *(void *)(v52 + 16);
    if (!v62)
    {
LABEL_61:
      swift_bridgeObjectRelease();

      if (a4 >= 0.0) {
        return;
      }
      goto LABEL_71;
    }
LABEL_68:
    uint64_t v70 = 0;
    double v71 = 0.0;
    do
    {
      double v72 = *(double *)(v52 + 8 * v70++ + 32);
      double v71 = v71 + v72;
    }
    while (v62 != v70);
    swift_bridgeObjectRelease();

    if (v71 <= a4) {
      return;
    }
LABEL_71:
    id v39 = v49;
    id v40 = (id)sub_1AD8A3340();

    uint64_t v73 = sub_1AD9DF710();
    uint64_t v75 = v74;
    if (v73 == sub_1AD9DF710() && v75 == v76) {
      goto LABEL_73;
    }
    char v48 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v48) {
      goto LABEL_74;
    }
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
}

uint64_t sub_1AD8A2568(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2808(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1AD8A2588(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2AEC(a1, a2, a3, (void *)*v3, (unint64_t *)&qword_1E9A4A250, MEMORY[0x1E4F66468], MEMORY[0x1E4F66468]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1AD8A25D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2980(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1AD8A25F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2AEC(a1, a2, a3, (void *)*v3, &qword_1EB725D40, (void (*)(uint64_t))type metadata accessor for SleepStageSegment, type metadata accessor for SleepStageSegment);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1AD8A2648(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2AEC(a1, a2, a3, (void *)*v3, (unint64_t *)&unk_1EB7250E0, MEMORY[0x1E4F26E60], MEMORY[0x1E4F26E60]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1AD8A2698(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2D3C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1AD8A26B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2EA4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1AD8A26D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2AEC(a1, a2, a3, (void *)*v3, (unint64_t *)&unk_1E9A4AB00, (void (*)(uint64_t))type metadata accessor for DayRelativeDuration, type metadata accessor for DayRelativeDuration);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1AD8A2728(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A305C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1AD8A2748(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2AEC(a1, a2, a3, (void *)*v3, &qword_1E9A4AAF0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel, (uint64_t (*)(void))type metadata accessor for ScheduleOccurrenceViewModel);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1AD8A2798(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A31C8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1AD8A27B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1AD8A2AEC(a1, a2, a3, (void *)*v3, &qword_1E9A4AAE0, MEMORY[0x1E4F26EA0], MEMORY[0x1E4F26EA0]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1AD8A2808(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1AD87F8F8(0, (unint64_t *)&qword_1EB725BD0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD8A2980(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1AD87F8F8(0, (unint64_t *)&qword_1EB725D48);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD8A2AEC(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, void (*a6)(uint64_t), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (!v13)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1AD8A38CC(0, a5, a6);
  uint64_t v14 = *(void *)(a7(0) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  size_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v18 - v16 == 0x8000000000000000 && v15 == -1) {
    goto LABEL_34;
  }
  id v17[2] = v12;
  void v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_19:
  uint64_t v20 = *(void *)(a7(0) - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v22 = (char *)v17 + v21;
  unint64_t v23 = (char *)a4 + v21;
  if (a1)
  {
    if (v17 < a4 || v22 >= &v23[*(void *)(v20 + 72) * v12])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v24 = *(void *)(v20 + 72) * v12;
  uint64_t v25 = &v22[v24];
  unint64_t v26 = (unint64_t)&v23[v24];
  if (v23 >= v25 || (unint64_t)v22 >= v26)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v17;
  }
LABEL_36:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD8A2D3C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1AD87F8F8(0, &qword_1E9A4AAF8);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 32 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD8A2EA4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1AD8A38CC(0, &qword_1E9A49FC8, (void (*)(uint64_t))sub_1AD86E54C);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_1AD86E54C();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD8A305C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1AD87F8F8(0, &qword_1EB725BB0);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD8A31C8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1AD8A38CC(0, &qword_1E9A4AAE8, type metadata accessor for HKCategoryValueSleepAnalysis);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1AD9E01E0();
  __break(1u);
  return result;
}

uint64_t sub_1AD8A3340()
{
  uint64_t v0 = sub_1AD9DF710();
  uint64_t v2 = v1;
  if (v0 == sub_1AD9DF710() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v6 = MEMORY[0x1E4FB2780];
  }
  else
  {
    char v5 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x1E4FB2780];
    if ((v5 & 1) == 0)
    {
      uint64_t v7 = sub_1AD9DF710();
      uint64_t v9 = v8;
      if (v7 == sub_1AD9DF710() && v9 == v10)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v6 = MEMORY[0x1E4FB2788];
      }
      else
      {
        char v12 = sub_1AD9E02D0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v6 = MEMORY[0x1E4FB2788];
        if ((v12 & 1) == 0)
        {
          uint64_t v13 = sub_1AD9DF710();
          uint64_t v15 = v14;
          if (v13 == sub_1AD9DF710() && v15 == v16)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v6 = MEMORY[0x1E4FB2790];
          }
          else
          {
            char v18 = sub_1AD9E02D0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v6 = MEMORY[0x1E4FB2790];
            if ((v18 & 1) == 0)
            {
              uint64_t v19 = sub_1AD9DF710();
              uint64_t v21 = v20;
              if (v19 == sub_1AD9DF710() && v21 == v22)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v6 = MEMORY[0x1E4FB2798];
              }
              else
              {
                char v23 = sub_1AD9E02D0();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v6 = MEMORY[0x1E4FB2798];
                if ((v23 & 1) == 0)
                {
                  uint64_t v24 = sub_1AD9DF710();
                  uint64_t v26 = v25;
                  if (v24 == sub_1AD9DF710() && v26 == v27)
                  {
                    swift_bridgeObjectRelease_n();
                    uint64_t v6 = MEMORY[0x1E4FB27B0];
                  }
                  else
                  {
                    char v28 = sub_1AD9E02D0();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v6 = MEMORY[0x1E4FB27B0];
                    if ((v28 & 1) == 0)
                    {
                      uint64_t v29 = sub_1AD9DF710();
                      uint64_t v31 = v30;
                      if (v29 == sub_1AD9DF710() && v31 == v32)
                      {
                        swift_bridgeObjectRelease_n();
                        uint64_t v6 = MEMORY[0x1E4FB27B8];
                      }
                      else
                      {
                        char v33 = sub_1AD9E02D0();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v6 = MEMORY[0x1E4FB27B8];
                        if ((v33 & 1) == 0)
                        {
                          uint64_t v34 = sub_1AD9DF710();
                          uint64_t v36 = v35;
                          if (v34 == sub_1AD9DF710() && v36 == v37)
                          {
                            swift_bridgeObjectRelease_n();
                            uint64_t v6 = MEMORY[0x1E4FB27C0];
                          }
                          else
                          {
                            char v38 = sub_1AD9E02D0();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            uint64_t v6 = MEMORY[0x1E4FB27C0];
                            if ((v38 & 1) == 0)
                            {
                              uint64_t v39 = sub_1AD9DF710();
                              uint64_t v41 = v40;
                              if (v39 == sub_1AD9DF710() && v41 == v42)
                              {
                                swift_bridgeObjectRelease_n();
                                uint64_t v6 = MEMORY[0x1E4FB27D0];
                              }
                              else
                              {
                                char v43 = sub_1AD9E02D0();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                uint64_t v6 = MEMORY[0x1E4FB27D0];
                                if ((v43 & 1) == 0)
                                {
                                  uint64_t v44 = sub_1AD9DF710();
                                  uint64_t v46 = v45;
                                  if (v44 == sub_1AD9DF710() && v46 == v47)
                                  {
                                    swift_bridgeObjectRelease_n();
                                    uint64_t v6 = MEMORY[0x1E4FB27D8];
                                  }
                                  else
                                  {
                                    char v48 = sub_1AD9E02D0();
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    uint64_t v6 = MEMORY[0x1E4FB27D8];
                                    if ((v48 & 1) == 0)
                                    {
                                      uint64_t v49 = sub_1AD9DF710();
                                      uint64_t v51 = v50;
                                      if (v49 == sub_1AD9DF710() && v51 == v52)
                                      {
                                        swift_bridgeObjectRelease_n();
                                        uint64_t v6 = MEMORY[0x1E4FB27E8];
                                      }
                                      else
                                      {
                                        char v53 = sub_1AD9E02D0();
                                        swift_bridgeObjectRelease();
                                        swift_bridgeObjectRelease();
                                        uint64_t v6 = MEMORY[0x1E4FB27E8];
                                        if ((v53 & 1) == 0)
                                        {
                                          uint64_t v54 = sub_1AD9DF710();
                                          uint64_t v56 = v55;
                                          if (v54 == sub_1AD9DF710() && v56 == v57)
                                          {
                                            swift_bridgeObjectRelease_n();
                                            uint64_t v6 = MEMORY[0x1E4FB27C8];
                                          }
                                          else
                                          {
                                            char v58 = sub_1AD9E02D0();
                                            swift_bridgeObjectRelease();
                                            swift_bridgeObjectRelease();
                                            uint64_t v6 = MEMORY[0x1E4FB27F0];
                                            if (v58) {
                                              uint64_t v6 = MEMORY[0x1E4FB27C8];
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return *(void *)v6;
}

void sub_1AD8A38CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9E0290();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t HKSPSleepSchedule.sleepDurationGoalIfSet.getter()
{
  objc_msgSend(v0, sel_sleepDurationGoal);
  if (v1 <= 0.0) {
    return 0;
  }
  objc_msgSend(v0, sel_sleepDurationGoal);
  return v3;
}

uint64_t SleepSettingsProviding.sleepSettings.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 16))();
  sub_1AD9DDB00();
  swift_release();
  return v3;
}

id SleepSettingsProviding.hasSleepFocus.getter(uint64_t a1, uint64_t a2)
{
  return sub_1AD8A39E8(a1, a2, (SEL *)&selRef_hasSleepFocusMode);
}

id SleepSettingsProviding.mirrorsSleepFocus.getter(uint64_t a1, uint64_t a2)
{
  return sub_1AD8A39E8(a1, a2, (SEL *)&selRef_mirrorsFocusModes);
}

id sub_1AD8A39E8(uint64_t a1, uint64_t a2, SEL *a3)
{
  (*(void (**)(void))(a2 + 24))();
  sub_1AD9DDB00();
  swift_release();
  if (!v6) {
    return 0;
  }
  id v4 = [v6 *a3];

  return v4;
}

id SleepSettingsProvider.sleepStore.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore);
}

uint64_t SleepSettingsProvider.currentSettingsPublisher.getter()
{
  return swift_retain();
}

uint64_t SleepSettingsProvider.currentSleepFocusConfigurationPublisher.getter()
{
  return swift_retain();
}

id SleepSettingsProvider.__allocating_init(sleepStore:sleepSettings:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, a2);
}

id SleepSettingsProvider.init(sleepStore:sleepSettings:)(void *a1, void *a2)
{
  *(void *)&v2[OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore] = a1;
  sub_1AD86E810();
  swift_allocObject();
  id v5 = v2;
  id v6 = a1;
  id v7 = a2;
  *(void *)&v5[OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_currentSettingsPublisher] = sub_1AD9DDB30();
  id v11 = objc_msgSend(v6, sel_sleepFocusConfiguration);
  sub_1AD8A3BF8();
  swift_allocObject();
  *(void *)&v5[OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_currentSleepFocusConfigurationPublisher] = sub_1AD9DDB30();

  v10.receiver = v5;
  v10.super_class = (Class)type metadata accessor for SleepSettingsProvider();
  id v8 = objc_msgSendSuper2(&v10, sel_init);
  objc_msgSend(v6, sel_addObserver_, v8);

  return v8;
}

void sub_1AD8A3BF8()
{
  if (!qword_1E9A4AB38)
  {
    sub_1AD8A4990(255, (unint64_t *)&qword_1E9A4AB40, &qword_1E9A4AB48);
    unint64_t v0 = sub_1AD9DDB20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4AB38);
    }
  }
}

uint64_t type metadata accessor for SleepSettingsProvider()
{
  return self;
}

id SleepSettingsProvider.__allocating_init(sleepStore:)(void *a1)
{
  id v2 = HKSPSleepStore.settings.getter();
  id v3 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  return SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, v2);
}

id SleepSettingsProvider.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore], sel_removeObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepSettingsProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id SleepSettingsProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SleepSettingsProvider.init()()
{
}

id sub_1AD8A3E84()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore);
}

uint64_t sub_1AD8A3E98()
{
  return swift_retain();
}

uint64_t sub_1AD8A3EAC()
{
  return swift_retain();
}

void SleepSettingsProvider.sleepStore(_:sleepSettingsDidChange:)(uint64_t a1, void *a2)
{
}

void SleepSettingsProvider.sleepStore(_:sleepFocusConfigurationDidUpdate:)(uint64_t a1, void *a2)
{
}

void sub_1AD8A3FC0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = sub_1AD9DF410();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  uint64_t *v9 = sub_1AD9DFCA0();
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4FBCBF0], v5);
  char v10 = sub_1AD9DF420();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    if (qword_1EB725030 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = sub_1AD9DD550();
  __swift_project_value_buffer(v11, (uint64_t)qword_1EB725018);
  id v12 = a1;
  uint64_t v13 = sub_1AD9DD530();
  os_log_type_t v14 = sub_1AD9DFBE0();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v33 = ObjectType;
  if (v15)
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v32 = v2;
    id v35 = (id)v31;
    *(_DWORD *)uint64_t v16 = 136446466;
    uint64_t v18 = sub_1AD9E04F0();
    uint64_t v34 = sub_1AD838978(v18, v19, (uint64_t *)&v35);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2114;
    uint64_t v34 = (uint64_t)v12;
    id v20 = v12;
    sub_1AD9DFEA0();
    *uint64_t v17 = v12;

    _os_log_impl(&dword_1AD834000, v13, v14, "[%{public}s] Settings did change: %{public}@", (uint8_t *)v16, 0x16u);
    sub_1AD8A4990(0, (unint64_t *)&qword_1EB724F40, (unint64_t *)&qword_1EB724F30);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v17, -1, -1);
    uint64_t v21 = v31;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v21, -1, -1);
    MEMORY[0x1B3E6D1A0](v16, -1, -1);
  }
  else
  {
  }
  sub_1AD9DDB00();
  uint64_t v22 = v35;
  sub_1AD837214(0, &qword_1E9A4AB30);
  char v23 = sub_1AD9DFE00();

  if (v23)
  {
    uint64_t v24 = sub_1AD9DD530();
    os_log_type_t v25 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      id v35 = (id)v27;
      *(_DWORD *)uint64_t v26 = 136446210;
      uint64_t v28 = sub_1AD9E04F0();
      uint64_t v34 = sub_1AD838978(v28, v29, (uint64_t *)&v35);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v24, v25, "[%{public}s] Updated settings matched previous settings. Not publishing.", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v27, -1, -1);
      MEMORY[0x1B3E6D1A0](v26, -1, -1);
    }
  }
  else
  {
    id v35 = v12;
    sub_1AD9DDAF0();
  }
}

void sub_1AD8A4464(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = sub_1AD9DF410();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  uint64_t *v9 = sub_1AD9DFCA0();
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4FBCBF0], v5);
  char v10 = sub_1AD9DF420();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    if (qword_1EB725030 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = sub_1AD9DD550();
  __swift_project_value_buffer(v11, (uint64_t)qword_1EB725018);
  id v12 = a1;
  uint64_t v13 = sub_1AD9DD530();
  os_log_type_t v14 = sub_1AD9DFBE0();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v35 = ObjectType;
  if (v15)
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = v2;
    id v37 = (id)v33;
    *(_DWORD *)uint64_t v16 = 136446466;
    uint64_t v18 = sub_1AD9E04F0();
    uint64_t v36 = sub_1AD838978(v18, v19, (uint64_t *)&v37);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2114;
    uint64_t v36 = (uint64_t)v12;
    id v20 = v12;
    sub_1AD9DFEA0();
    *uint64_t v17 = v12;

    _os_log_impl(&dword_1AD834000, v13, v14, "[%{public}s] Sleep focus did change: %{public}@", (uint8_t *)v16, 0x16u);
    sub_1AD8A4990(0, (unint64_t *)&qword_1EB724F40, (unint64_t *)&qword_1EB724F30);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v17, -1, -1);
    uint64_t v21 = v33;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v21, -1, -1);
    MEMORY[0x1B3E6D1A0](v16, -1, -1);
  }
  else
  {
  }
  sub_1AD9DDB00();
  uint64_t v22 = v37;
  if (v37
    && (sub_1AD837214(0, &qword_1E9A4AB48),
        id v23 = v12,
        char v24 = sub_1AD9DFE00(),
        v23,
        v23,
        v22,
        (v24 & 1) != 0))
  {
    os_log_type_t v25 = sub_1AD9DD530();
    os_log_type_t v26 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      id v37 = (id)v28;
      *(_DWORD *)uint64_t v27 = 136446210;
      uint64_t v29 = sub_1AD9E04F0();
      uint64_t v36 = sub_1AD838978(v29, v30, (uint64_t *)&v37);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v25, v26, "[%{public}s] Updated sleep focus config matched previous config. Not publishing.", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v28, -1, -1);
      MEMORY[0x1B3E6D1A0](v27, -1, -1);
    }
  }
  else
  {
    id v37 = v12;
    id v31 = v12;
    sub_1AD9DDAF0();
  }
}

uint64_t dispatch thunk of SleepSettingsProviding.sleepStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepSettingsProviding.currentSettingsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepSettingsProviding.currentSleepFocusConfigurationPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t method lookup function for SleepSettingsProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepSettingsProvider);
}

uint64_t dispatch thunk of SleepSettingsProvider.__allocating_init(sleepStore:sleepSettings:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_1AD8A4990(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1AD837214(255, a3);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD8A49E8()
{
  qword_1E9A5A6F0 = 0xBFF921FB54442D18;
}

void sub_1AD8A4A04()
{
  qword_1E9A5A6F8 = 0;
}

void sub_1AD8A4A10()
{
  qword_1E9A5A700 = 0x401921FB54442D18;
}

double sub_1AD8A4A2C(uint64_t a1, uint64_t a2)
{
  double v2 = ((double)a2 / 60.0 + (double)a1) / 24.0;
  if (qword_1E9A48EC0 != -1) {
    swift_once();
  }
  double v3 = v2 * *(double *)&qword_1E9A5A700;
  if (qword_1E9A48EB0 != -1) {
    swift_once();
  }
  double v4 = v3 + *(double *)&qword_1E9A5A6F0;
  if (qword_1E9A48EB8 != -1) {
    swift_once();
  }
  for (i = *(double *)&qword_1E9A5A700 - *(double *)&qword_1E9A5A6F8; v4 < *(double *)&qword_1E9A5A6F8; double v4 = i + v4)
    ;
  while (*(double *)&qword_1E9A5A700 <= v4)
    double v4 = v4 - i;
  return v4;
}

uint64_t CurrentValueSubject<>.updateValueIfDifferent(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*v2 + *MEMORY[0x1E4F1ABB8]);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v7 = (char *)&v10 - v6;
  sub_1AD9DDB00();
  char v8 = sub_1AD9DF6C0();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    return sub_1AD9DDB10();
  }
  return result;
}

id sub_1AD8A4C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for EditScheduleLinkTableViewCell();
  id v6 = objc_msgSendSuper2(&v16, sel_initWithStyle_reuseIdentifier_, a1, v5);

  uint64_t v7 = qword_1EB724E38;
  id v8 = v6;
  if (v7 != -1) {
    swift_once();
  }
  id v9 = (id)qword_1EB727930;
  uint64_t v10 = sub_1AD9DCA70();
  uint64_t v12 = v11;

  void v15[3] = &type metadata for EditScheduleLinkTableViewCell.Model;
  uint64_t v15[4] = &off_1F046C808;
  v15[0] = v10;
  v15[1] = v12;
  v15[2] = 0;
  uint64_t v13 = (uint64_t)v8 + OBJC_IVAR____TtC13SleepHealthUI17TextTableViewCell_model;
  swift_beginAccess();
  sub_1AD8A5044((uint64_t)v15, v13);
  swift_endAccess();
  sub_1AD980C60();
  sub_1AD8A5158((uint64_t)v15);
  sub_1AD8A4EC0();

  return v8;
}

void sub_1AD8A4EC0()
{
  id v1 = objc_msgSend(v0, sel_textLabel);
  if (v1)
  {
    double v2 = v1;
    objc_msgSend(v1, sel_setTextAlignment_, 1);
  }
  id v3 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  void v6[4] = sub_1AD8F05CC;
  v6[5] = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1107296256;
  v6[2] = sub_1AD8F0900;
  v6[3] = &block_descriptor_3;
  uint64_t v4 = _Block_copy(v6);
  id v5 = objc_msgSend(v3, sel_initWithDynamicProvider_, v4);
  _Block_release(v4);
  swift_release();
  objc_msgSend(v0, sel_setBackgroundColor_, v5);
}

id sub_1AD8A4FD4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EditScheduleLinkTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for EditScheduleLinkTableViewCell()
{
  return self;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1AD8A5044(uint64_t a1, uint64_t a2)
{
  sub_1AD8A50A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_1AD8A50A8()
{
  if (!qword_1E9A4ABB0)
  {
    sub_1AD8A5100();
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4ABB0);
    }
  }
}

unint64_t sub_1AD8A5100()
{
  unint64_t result = qword_1E9A4ABB8;
  if (!qword_1E9A4ABB8)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4ABB8);
  }
  return result;
}

uint64_t sub_1AD8A5158(uint64_t a1)
{
  sub_1AD8A50A8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void destroy for EditScheduleLinkTableViewCell.Model(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

void *_s13SleepHealthUI29EditScheduleLinkTableViewCellC5ModelVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for EditScheduleLinkTableViewCell.Model(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[2];
  id v5 = (void *)a2[2];
  a1[2] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for EditScheduleLinkTableViewCell.Model(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for EditScheduleLinkTableViewCell.Model(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditScheduleLinkTableViewCell.Model(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EditScheduleLinkTableViewCell.Model()
{
  return &type metadata for EditScheduleLinkTableViewCell.Model;
}

uint64_t sub_1AD8A5374(uint64_t a1, uint64_t a2)
{
  return SleepOnboardingAnalyticsTracking<>.analyticsManager.getter(a1, a2, (uint64_t)&protocol witness table for SleepOnboardingFlowController);
}

uint64_t SleepOnboardingAnalyticsTracking<>.analyticsManager.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a1, a3);
  sub_1AD841030(v3 + 88, (uint64_t)v8);
  swift_release();
  uint64_t v4 = v9;
  uint64_t v5 = v10;
  __swift_project_boxed_opaque_existential_1Tm(v8, v9);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v4);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v6;
}

uint64_t SleepOnboardingAnalyticsTracking<>.context.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  char v5 = *(unsigned char *)(v4 + 24);
  uint64_t v6 = *(void *)(v4 + 32);
  id v7 = *(id *)(v4 + 16);
  uint64_t result = swift_release();
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v6;
  return result;
}

void SleepOnboardingAnalyticsTracking<>.trackOnboardingStep(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 8);
  uint64_t v11 = *(unsigned __int8 *)(v10(a3, a5) + 24);
  swift_release();
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54D8]), sel_initWithStep_action_entryPoint_, a1, a2, v11);
  id v13 = *(id *)(v10(a3, a5) + 16);
  swift_release();
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54D0]), sel_initWithOnboardingInfo_provenanceInfo_, v12, v13);

  objc_msgSend(v9, sel_trackEvent_, v14);
}

void SleepOnboardingAnalyticsTracking<>.trackOnboardingPromotion(context:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned __int8 *)a1 + 8);
  char v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 8))(a2);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54D8]), sel_initWithStep_action_entryPoint_, 0, 0, v4);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54D0]), sel_initWithOnboardingInfo_provenanceInfo_, v6, v3);

  objc_msgSend(v5, sel_trackEvent_, v7);
}

uint64_t dispatch thunk of SleepOnboardingAnalyticsTracking.analyticsManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1AD8A56B4(uint64_t a1, uint64_t a2)
{
  return SleepOnboardingAnalyticsTracking<>.analyticsManager.getter(a1, a2, (uint64_t)&protocol witness table for SleepOnboardingFlowTableViewController);
}

uint64_t sub_1AD8A56C0()
{
  uint64_t v0 = sub_1AD9DD550();
  __swift_allocate_value_buffer(v0, qword_1E9A5A708);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E9A5A708);
  return sub_1AD9DD540();
}

id SleepScheduleModel.__allocating_init(sleepScheduleProvider:currentDateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  id v10 = sub_1AD8A7214(v9, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v10;
}

id SleepScheduleModel.__allocating_init(sleepStore:)(void *a1)
{
  type metadata accessor for SleepScheduleProvider();
  id v2 = a1;
  id v3 = SleepScheduleProvider.__allocating_init(sleepStore:)(v2);
  id v4 = (id)HKSPCurrentDateProvider();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  id v6 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepScheduleModel());
  id v7 = sub_1AD8A6E7C((uint64_t)v3, (uint64_t)sub_1AD838788, v5, v6);

  return v7;
}

id SleepScheduleModel.init(sleepScheduleProvider:currentDateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x1F4188790](v9, v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  id v13 = sub_1AD8A703C((uint64_t)v11, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v13;
}

void *sub_1AD8A5964()
{
  uint64_t result = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (result)
  {
    objc_msgSend(result, sel_windDownTime);
    return (void *)(v2 > 0.0);
  }
  return result;
}

double sub_1AD8A599C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (!v1) {
    return 0.0;
  }
  objc_msgSend(v1, sel_windDownTime);
  return result;
}

void sub_1AD8A59C0()
{
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule), sel_setWindDownTime_);
  sub_1AD8A65A4();
}

void (*sub_1AD8A59FC(void *a1))(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  a1[1] = v1;
  a1[2] = v3;
  id v4 = *(void **)(v1 + v3);
  if (v4) {
    objc_msgSend(v4, sel_windDownTime);
  }
  else {
    uint64_t v5 = 0;
  }
  *a1 = v5;
  return sub_1AD8A5A64;
}

void sub_1AD8A5A64(uint64_t a1)
{
}

uint64_t sub_1AD8A5A9C()
{
  uint64_t v1 = sub_1AD9DFD30();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v37 = v1;
  uint64_t v38 = v2;
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v35 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD841744();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  uint64_t v40 = v6;
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v36 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86E5A4();
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8A753C();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v16);
  uint64_t v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24);
  uint64_t v20 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32);
  __swift_project_boxed_opaque_existential_1Tm((void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider), v19);
  id v41 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, void, void))MEMORY[0x1E4F1ABB0];
  sub_1AD8A7628(0, (unint64_t *)&qword_1EB725060, MEMORY[0x1E4F1ABB0]);
  sub_1AD8A76B0((unint64_t *)&qword_1E9A4B030, (unint64_t *)&qword_1EB725060, v21);
  uint64_t v22 = (void *)sub_1AD9DDBF0();
  swift_release();
  id v41 = v22;
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  id v42 = (id)sub_1AD9DFCA0();
  uint64_t v23 = sub_1AD9DFC90();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v34 = v24 + 56;
  v33(v12, 1, 1, v23);
  os_log_type_t v25 = (uint64_t (*)(uint64_t, uint64_t, void, void))MEMORY[0x1E4F1AAE0];
  sub_1AD8A7628(0, &qword_1E9A4ABF8, MEMORY[0x1E4F1AAE0]);
  sub_1AD8A76B0(&qword_1E9A4AC00, &qword_1E9A4ABF8, v25);
  v32[1] = sub_1AD841810();
  sub_1AD9DDC20();
  sub_1AD86ED78((uint64_t)v12);

  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8A74F4(&qword_1E9A4AC08, 255, (void (*)(uint64_t))sub_1AD8A753C);
  sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  swift_release();
  id v26 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v27 = v35;
  sub_1AD9DFD40();

  id v41 = (id)sub_1AD9DFCA0();
  v33(v12, 1, 1, v23);
  sub_1AD8A74F4(&qword_1EB725B80, 255, MEMORY[0x1E4F27FC8]);
  uint64_t v29 = v36;
  uint64_t v28 = v37;
  sub_1AD9DDC20();
  sub_1AD86ED78((uint64_t)v12);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v28);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8A74F4((unint64_t *)&unk_1EB724CF0, 255, (void (*)(uint64_t))sub_1AD841744);
  uint64_t v30 = v39;
  sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v30);
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  return swift_release();
}

void sub_1AD8A610C(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    sub_1AD8A6214(v2);
  }
}

uint64_t sub_1AD8A6168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](v2);
  if (result)
  {
    uint64_t v4 = (void *)result;
    type metadata accessor for SleepScheduleModel();
    sub_1AD8A74F4(&qword_1E9A4AAB8, v5, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
    sub_1AD9DDAB0();

    sub_1AD9DDB50();
    return swift_release();
  }
  return result;
}

void sub_1AD8A6214(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  if (!a1)
  {
    uint64_t v5 = (void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
    uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
LABEL_10:
    if (!v6) {
      return;
    }
    id v4 = 0;
    goto LABEL_12;
  }
  objc_msgSend(a1, sel_mutableCopy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4ABE8);
  if (swift_dynamicCast()) {
    id v4 = (id)v24;
  }
  else {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5500]), sel_init);
  }
  uint64_t v5 = (void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (!v4) {
    goto LABEL_10;
  }
  if (!v6
    || (id v7 = v6,
        id v8 = v4,
        char v9 = sub_1AD9DFE00(),
        v8,
        v7,
        (v9 & 1) == 0))
  {
LABEL_12:
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_1AD9DD550();
    __swift_project_value_buffer(v10, (uint64_t)qword_1EB725018);
    id v11 = v4;
    uint64_t v12 = sub_1AD9DD530();
    os_log_type_t v13 = sub_1AD9DFBA0();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      uint64_t v15 = v23[0];
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v16 = sub_1AD9E04F0();
      uint64_t v24 = sub_1AD838978(v16, v17, v23);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      uint64_t v24 = (uint64_t)v4;
      sub_1AD8A4990(0, &qword_1E9A4ABE0, (unint64_t *)&qword_1E9A4ABE8);
      id v18 = v11;
      uint64_t v19 = sub_1AD9DF730();
      uint64_t v24 = sub_1AD838978(v19, v20, v23);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v12, v13, "[%{public}s] Updating sleep schedule: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v15, -1, -1);
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
    }
    else
    {
    }
    uint64_t v21 = *v5;
    *uint64_t v5 = v4;
    id v8 = v11;

    type metadata accessor for SleepScheduleModel();
    sub_1AD8A74F4(&qword_1E9A4AAB8, v22, (void (*)(uint64_t))type metadata accessor for SleepScheduleModel);
    sub_1AD9DDAB0();
    sub_1AD9DDB50();
    swift_release();
  }
}

void sub_1AD8A65A4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  id v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule];
  if (v4)
  {
    uint64_t v5 = ObjectType;
    uint64_t v6 = qword_1EB725030;
    id v7 = v4;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_1AD9DD550();
    __swift_project_value_buffer(v8, (uint64_t)qword_1EB725018);
    char v9 = v1;
    uint64_t v10 = sub_1AD9DD530();
    os_log_type_t v11 = sub_1AD9DFBA0();
    if (os_log_type_enabled(v10, v11))
    {
      id v28 = v7;
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      aBlock[0] = v13;
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v14 = sub_1AD9E04F0();
      sub_1AD838978(v14, v15, aBlock);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      uint64_t v16 = *(void **)&v1[v3];
      sub_1AD8A4990(0, &qword_1E9A4ABE0, (unint64_t *)&qword_1E9A4ABE8);
      id v17 = v16;
      uint64_t v18 = sub_1AD9DF730();
      sub_1AD838978(v18, v19, aBlock);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v10, v11, "[%{public}s] Saving sleep schedule: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v13, -1, -1);
      uint64_t v20 = v12;
      id v7 = v28;
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
    }
    else
    {
    }
    uint64_t v21 = &v9[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider];
    uint64_t v22 = *(void *)&v9[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
    uint64_t v23 = *((void *)v21 + 4);
    __swift_project_boxed_opaque_existential_1Tm(v21, v22);
    uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v5;
    aBlock[4] = (uint64_t)sub_1AD8A774C;
    aBlock[5] = v25;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1AD8A776C;
    aBlock[3] = (uint64_t)&block_descriptor_4;
    id v26 = _Block_copy(aBlock);
    id v27 = v7;
    swift_release();
    objc_msgSend(v24, sel_saveCurrentSleepSchedule_completion_, v27, v26);
    _Block_release(v26);
  }
}

void sub_1AD8A68E4(char a1, id a2)
{
  if (a1)
  {
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1AD9DD550();
    __swift_project_value_buffer(v2, (uint64_t)qword_1EB725018);
    osos_log_t log = sub_1AD9DD530();
    os_log_type_t v3 = sub_1AD9DFBA0();
    if (os_log_type_enabled(oslog, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v24 = (void *)v5;
      *(_DWORD *)id v4 = 136446210;
      uint64_t v6 = sub_1AD9E04F0();
      sub_1AD838978(v6, v7, (uint64_t *)&v24);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, oslog, v3, "[%{public}s] Successfully saved sleep schedule.", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v5, -1, -1);
      MEMORY[0x1B3E6D1A0](v4, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    if (a2)
    {
      id v9 = a2;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_1AD87B550(MEMORY[0x1E4FBC860]);
      sub_1AD8A74F4((unint64_t *)&qword_1E9A49688, 255, type metadata accessor for HKError);
      sub_1AD9DCAF0();
      id v9 = v24;
    }
    id v10 = a2;
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_1AD9DD550();
    __swift_project_value_buffer(v11, (uint64_t)qword_1EB725018);
    id v12 = v9;
    id v13 = v9;
    uint64_t v14 = sub_1AD9DD530();
    os_log_type_t v15 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v24 = (void *)v17;
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v18 = sub_1AD9E04F0();
      sub_1AD838978(v18, v19, (uint64_t *)&v24);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      id v20 = v9;
      sub_1AD869CF0();
      uint64_t v21 = sub_1AD9DF730();
      sub_1AD838978(v21, v22, (uint64_t *)&v24);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v14, v15, "[%{public}s] Error saving sleep schedule: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v17, -1, -1);
      MEMORY[0x1B3E6D1A0](v16, -1, -1);
    }
    else
    {
    }
  }
}

id SleepScheduleModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SleepScheduleModel.init()()
{
}

id SleepScheduleModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD8A6E40@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SleepScheduleModel();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

id sub_1AD8A6E7C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  v18[3] = type metadata accessor for SleepScheduleProvider();
  v18[4] = &protocol witness table for SleepScheduleProvider;
  v18[0] = a1;
  uint64_t v8 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  *(void *)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule] = 0;
  *(void *)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_subscriptions] = MEMORY[0x1E4FBC870];
  sub_1AD841030((uint64_t)v18, (uint64_t)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider]);
  id v9 = &a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_currentDateProvider];
  *(void *)id v9 = a2;
  *((void *)v9 + 1) = a3;
  id v10 = a4;
  swift_retain();
  swift_retain();
  sub_1AD9DDB00();
  swift_release();
  if (v16)
  {
    objc_msgSend(v16, sel_mutableCopy);
    sub_1AD9DFF20();
    swift_unknownObjectRelease();
    sub_1AD837214(0, (unint64_t *)&qword_1E9A4ABE8);
    if (swift_dynamicCast()) {
      id v11 = v15;
    }
    else {
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5500]), sel_init);
    }
  }
  else
  {
    id v11 = 0;
  }
  id v12 = *(void **)&a4[v8];
  *(void *)&a4[v8] = v11;

  v17.receiver = v10;
  v17.super_class = (Class)type metadata accessor for SleepScheduleModel();
  id v13 = objc_msgSendSuper2(&v17, sel_init);
  sub_1AD8A5A9C();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  return v13;
}

id sub_1AD8A703C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  v24[3] = a5;
  v24[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  uint64_t v13 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  *(void *)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule] = 0;
  *(void *)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_subscriptions] = MEMORY[0x1E4FBC870];
  sub_1AD841030((uint64_t)v24, (uint64_t)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider]);
  uint64_t v14 = &a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_currentDateProvider];
  *(void *)uint64_t v14 = a2;
  *((void *)v14 + 1) = a3;
  os_log_type_t v15 = a4;
  swift_retain();
  id v16 = (void *)SleepScheduleProviding.sleepSchedule.getter(a5, a6);
  objc_super v17 = v16;
  if (v16)
  {
    objc_msgSend(v16, sel_mutableCopy);
    sub_1AD9DFF20();
    swift_unknownObjectRelease();
    sub_1AD837214(0, (unint64_t *)&qword_1E9A4ABE8);
    if (swift_dynamicCast()) {
      id v18 = v22;
    }
    else {
      id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5500]), sel_init);
    }
  }
  else
  {
    id v18 = 0;
  }
  unint64_t v19 = *(void **)&a4[v13];
  *(void *)&a4[v13] = v18;

  v23.receiver = v15;
  v23.super_class = (Class)type metadata accessor for SleepScheduleModel();
  id v20 = objc_msgSendSuper2(&v23, sel_init);
  sub_1AD8A5A9C();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  return v20;
}

id sub_1AD8A7214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepScheduleModel());
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  return sub_1AD8A703C((uint64_t)v13, a2, a3, v14, a5, a6);
}

uint64_t sub_1AD8A7310()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t type metadata accessor for SleepScheduleModel()
{
  return self;
}

id sub_1AD8A736C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = *(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (result) {
    id result = objc_msgSend(result, sel_windDownTime);
  }
  else {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return result;
}

void sub_1AD8A73B8(double *a1, void *a2)
{
}

uint64_t method lookup function for SleepScheduleModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepScheduleModel);
}

uint64_t dispatch thunk of SleepScheduleModel.__allocating_init(sleepScheduleProvider:currentDateProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of SleepScheduleModel.hasWindDown.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepScheduleModel.windDownTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SleepScheduleModel.windDownTime.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SleepScheduleModel.windDownTime.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t sub_1AD8A74F4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8A753C()
{
  if (!qword_1E9A4ABF0)
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, void, void))MEMORY[0x1E4F1AAE0];
    sub_1AD8A7628(255, &qword_1E9A4ABF8, MEMORY[0x1E4F1AAE0]);
    sub_1AD837214(255, (unint64_t *)&qword_1EB724D50);
    sub_1AD8A76B0(&qword_1E9A4AC00, &qword_1E9A4ABF8, v0);
    sub_1AD841810();
    unint64_t v1 = sub_1AD9DDA50();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_1E9A4ABF0);
    }
  }
}

void sub_1AD8A7628(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void, void))
{
  if (!*a2)
  {
    sub_1AD8A4990(255, (unint64_t *)&qword_1EB7250A0, (unint64_t *)&qword_1EB725090);
    unint64_t v7 = a3(a1, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1AD8A76B0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8A7628(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD8A76F4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD8A772C(void **a1)
{
  sub_1AD8A610C(a1, v1);
}

uint64_t sub_1AD8A7734(uint64_t a1)
{
  return sub_1AD8A6168(a1, v1);
}

uint64_t sub_1AD8A773C()
{
  return swift_deallocObject();
}

void sub_1AD8A774C(char a1, id a2)
{
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void sub_1AD8A776C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1AD8A77E4()
{
  swift_getObjectType();
  uint64_t v1 = sub_1AD9E04F0();
  sub_1AD9DF790();
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t LockScreenContentModel.stateDidChange.getter()
{
  return swift_retain();
}

uint64_t sub_1AD8A787C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD8A78FC(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v2;
  sub_1AD9DDBD0();
  return sub_1AD8A7978();
}

uint64_t sub_1AD8A7978()
{
  swift_getObjectType();
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_1AD9DD550();
  __swift_project_value_buffer(v1, (uint64_t)qword_1E9A4D288);
  id v2 = v0;
  char v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = v6;
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v12 = sub_1AD9E04F0();
    unint64_t v13 = v7;
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    sub_1AD838978(v12, v13, &v14);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    *(_WORD *)(v5 + 12) = 2082;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1AD9DDBC0();
    swift_release();
    swift_release();
    uint64_t v8 = sub_1AD9DF730();
    char v11 = sub_1AD838978(v8, v9, &v14);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] updated state: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }
  else
  {
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  if (v11 == 3) {
    sub_1AD8DD85C();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  LOBYTE(v14) = v11;
  return sub_1AD9DDAC0();
}

uint64_t sub_1AD8A7CDC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD8A7D5C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  sub_1AD9DDBD0();
  return sub_1AD8A7978();
}

uint64_t (*sub_1AD8A7DD0(void *a1))(uint64_t a1)
{
  *a1 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  return sub_1AD8A7E68;
}

uint64_t sub_1AD8A7E68(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  char v3 = *(void **)a1;
  *(unsigned char *)(a1 + 9) = v2;
  id v4 = v3;
  sub_1AD9DDBD0();
  return sub_1AD8A7978();
}

uint64_t sub_1AD8A7EE0()
{
  return sub_1AD8A8544((uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state, &qword_1E9A4AC28, (uint64_t)&type metadata for LockScreenContentState);
}

uint64_t sub_1AD8A7EFC(uint64_t a1)
{
  return sub_1AD8A85F0(a1, &qword_1E9A4AC30, (uint64_t)&type metadata for LockScreenContentState, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state, &qword_1E9A4AC28);
}

void (*sub_1AD8A7F20(void *a1))(uint64_t, char)
{
  char v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1AD8ACE20(0, &qword_1E9A4AC30, (uint64_t)&type metadata for LockScreenContentState, MEMORY[0x1E4F1AC60]);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  unint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1AD8ACE20(0, &qword_1E9A4AC28, (uint64_t)&type metadata for LockScreenContentState, MEMORY[0x1E4F1AC70]);
  v3[16] = v9;
  sub_1AD9DDB90();
  swift_endAccess();
  return sub_1AD8A8078;
}

uint64_t sub_1AD8A807C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1AD8A80FC(uint64_t a1, void **a2)
{
  char v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_1AD9DDBD0();
}

uint64_t sub_1AD8A816C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1AD8A81E8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return sub_1AD9DDBD0();
}

void (*sub_1AD8A8254(void *a1))(void *a1)
{
  char v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1AD9DDBB0();
  return sub_1AD867F38;
}

uint64_t sub_1AD8A82E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  return swift_endAccess();
}

uint64_t sub_1AD8A8370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  unint64_t v22 = a8;
  sub_1AD8ACE20(0, a5, a6, MEMORY[0x1E4F1AC60]);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10, v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v17);
  unint64_t v19 = (char *)&v22 - v18;
  id v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)&v22 - v18, a1, v11);
  v20(v16, (uint64_t)v19, v11);
  swift_beginAccess();
  sub_1AD8ACE20(0, v22, a6, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v11);
}

uint64_t sub_1AD8A8528()
{
  return sub_1AD8A8544((uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4FBB390]);
}

uint64_t sub_1AD8A8544(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  return swift_endAccess();
}

uint64_t sub_1AD8A85CC(uint64_t a1)
{
  return sub_1AD8A85F0(a1, &qword_1E9A49E28, MEMORY[0x1E4FBB390], (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed, (unint64_t *)&qword_1E9A4AC40);
}

uint64_t sub_1AD8A85F0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  sub_1AD8ACE20(0, a2, a3, MEMORY[0x1E4F1AC60]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v14 - v12, a1, v9);
  swift_beginAccess();
  sub_1AD8ACE20(0, a5, a3, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
}

void (*sub_1AD8A8750(void *a1))(uint64_t, char)
{
  id v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = MEMORY[0x1E4FBB390];
  sub_1AD8ACE20(0, &qword_1E9A49E28, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC60]);
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[11] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[12] = malloc(v7);
  v3[13] = malloc(v7);
  uint64_t v8 = malloc(v7);
  uint64_t v9 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed;
  v3[14] = v8;
  v3[15] = v9;
  swift_beginAccess();
  sub_1AD8ACE20(0, (unint64_t *)&qword_1E9A4AC40, v4, MEMORY[0x1E4F1AC70]);
  v3[16] = v10;
  sub_1AD9DDB90();
  swift_endAccess();
  return sub_1AD8A8078;
}

uint64_t sub_1AD8A88A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1AD9DCD30();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  size_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1AD8AD950(0);
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10, v13);
  uint64_t v15 = &v20[-v14];
  uint64_t v16 = v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel____lazy_storage___gregorianCalendar;
  swift_beginAccess();
  sub_1AD8ADBDC(v16, (uint64_t)v15, (uint64_t (*)(void))sub_1AD8AD950);
  uint64_t v17 = sub_1AD9DCE40();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v18 + 32))(a1, v15, v17);
  }
  sub_1AD8AD984((uint64_t)v15, (uint64_t (*)(void))sub_1AD8AD950);
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E4F27B20], v3);
  sub_1AD9DCD40();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v18 + 16))(v12, a1, v17);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
  swift_beginAccess();
  sub_1AD8AD9E4((uint64_t)v12, v16);
  return swift_endAccess();
}

void LockScreenContentModel.__allocating_init(debugIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  LockScreenContentModel.init(debugIdentifier:)(a1, a2);
}

void LockScreenContentModel.init(debugIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v79 = a1;
  uint64_t v80 = a2;
  sub_1AD8A9680(0);
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v76 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBB390];
  sub_1AD8ACE20(0, &qword_1E9A49E28, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC60]);
  uint64_t v83 = *(void *)(v8 - 8);
  uint64_t v84 = v8;
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v82 = (char *)&v75 - v10;
  uint64_t v11 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F1AC70];
  sub_1AD8ACE20(0, (unint64_t *)&qword_1E9A4AC40, v7, MEMORY[0x1E4F1AC70]);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = (char *)&v75 - v16;
  sub_1AD8ACE20(0, &qword_1E9A4AC28, (uint64_t)&type metadata for LockScreenContentState, v11);
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18, v21);
  objc_super v23 = (char *)&v75 - v22;
  uint64_t v24 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_stateDidChange;
  sub_1AD8A96B4();
  swift_allocObject();
  uint64_t v25 = v3;
  *(void *)&v3[v24] = sub_1AD9DDAD0();
  id v26 = &v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state];
  LOBYTE(aBlock[0]) = 0;
  sub_1AD9DDB80();
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v26, v23, v19);
  id v27 = &v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed];
  LOBYTE(aBlock[0]) = 0;
  sub_1AD9DDB80();
  id v28 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v81 = v13;
  v28(v27, v17, v13);
  uint64_t v29 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore;
  if (qword_1E9A48DC8 != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)qword_1E9A5A6B0;
  id v31 = objc_allocWithZone(MEMORY[0x1E4FA5570]);
  id v32 = v30;
  uint64_t v33 = (void *)sub_1AD9DF6D0();
  id v34 = objc_msgSend(v31, sel_initWithIdentifier_healthStore_, v33, v32);

  *(void *)&v25[v29] = v34;
  *(void *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider] = 0;
  uint64_t v35 = &v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel____lazy_storage___gregorianCalendar];
  uint64_t v36 = sub_1AD9DCE40();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  *(void *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_cancellables] = MEMORY[0x1E4FBC870];
  v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible] = 0;
  uint64_t v37 = &v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState];
  *(void *)uint64_t v37 = 0;
  v37[8] = 1;
  *(void *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel] = 0;
  v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState] = 4;
  uint64_t v38 = (uint64_t *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_debugIdentifier];
  uint64_t v40 = v79;
  uint64_t v39 = v80;
  uint64_t *v38 = v79;
  v38[1] = v39;
  id v41 = objc_allocWithZone((Class)type metadata accessor for LocationModel());
  swift_bridgeObjectRetain_n();
  id v42 = LocationModel.init(debugIdentifier:)(v40, v39);
  id v43 = objc_allocWithZone((Class)type metadata accessor for WeatherModel(0));
  id v44 = sub_1AD89DF50(v42, v40, v39);

  id v45 = objc_allocWithZone((Class)type metadata accessor for WeatherPrefetchScheduler());
  id v46 = WeatherPrefetchScheduler.init(sleepStore:)(v34);
  type metadata accessor for WeatherPrefetcher();
  swift_allocObject();
  id v47 = v44;
  id v75 = v46;
  char v48 = sub_1AD8DE5A0(v47, v46);

  *(void *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_weatherPrefetcher] = v48;
  type metadata accessor for ContentAppearenceProvider();
  swift_allocObject();
  *(void *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_contentAppearanceProvider] = sub_1AD91B1DC(v40, v39);

  uint64_t v49 = (objc_class *)type metadata accessor for LockScreenContentModel();
  v87.receiver = v25;
  v87.super_class = v49;
  id v50 = objc_msgSendSuper2(&v87, sel_init);
  uint64_t v51 = qword_1E9A49078;
  id v52 = v50;
  if (v51 != -1) {
    swift_once();
  }
  uint64_t v53 = sub_1AD9DD550();
  __swift_project_value_buffer(v53, (uint64_t)qword_1E9A4D2B8);
  uint64_t v54 = (char *)v52;
  uint64_t v55 = sub_1AD9DD530();
  os_log_type_t v56 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    aBlock[0] = v58;
    *(_DWORD *)uint64_t v57 = 136446210;
    uint64_t v59 = sub_1AD8A77E4();
    uint64_t v85 = sub_1AD838978(v59, v60, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v55, v56, "[%{public}s] init", v57, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v58, -1, -1);
    MEMORY[0x1B3E6D1A0](v57, -1, -1);
  }
  else
  {
  }
  uint64_t v62 = v83;
  uint64_t v61 = v84;
  uint64_t v63 = v82;
  uint64_t v64 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for AlarmProvider();
  swift_allocObject();
  uint64_t v65 = sub_1AD994930((uint64_t)sub_1AD8AC9A0, v64);
  uint64_t v66 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider;
  *(void *)&v54[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider] = v65;
  swift_release();
  swift_beginAccess();
  sub_1AD9DDB90();
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8AC9B0();
  sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v61);
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  swift_release();
  uint64_t v67 = *(void **)&v54[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore];
  objc_msgSend(v67, sel_addObserver_, v54);
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = v54;
  aBlock[4] = (uint64_t)sub_1AD8ACA64;
  aBlock[5] = v68;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1AD86F738;
  aBlock[3] = (uint64_t)&block_descriptor_5;
  unint64_t v69 = _Block_copy(aBlock);
  uint64_t v70 = v54;
  swift_release();
  objc_msgSend(v67, sel_sleepScheduleModelWithCompletion_, v69);
  _Block_release(v69);
  if (*(void *)&v54[v66])
  {
    swift_retain();
    sub_1AD9955D4();
    swift_release();
    swift_beginAccess();
    sub_1AD8ADAC4(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
    double v71 = v76;
    sub_1AD9DDB90();
    swift_endAccess();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1AD8ADB28(&qword_1E9A4ACB8, sub_1AD8A9680);
    uint64_t v72 = v78;
    sub_1AD9DDC40();
    swift_release();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v71, v72);
    swift_beginAccess();
    sub_1AD9DDA80();
    swift_endAccess();
    swift_release();
    char v73 = byte_1E9A4AC10;

    uint64_t v74 = &v70[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState];
    swift_beginAccess();
    char *v74 = v73;
  }
  else
  {
    __break(1u);
  }
}

void sub_1AD8A9680(uint64_t a1)
{
}

void sub_1AD8A96B4()
{
  if (!qword_1E9A4AC60)
  {
    unint64_t v0 = sub_1AD9DDAE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4AC60);
    }
  }
}

void sub_1AD8A971C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Alarm();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  uint64_t v12 = (char *)v39 - v11;
  sub_1AD8ACA8C(0);
  uint64_t v15 = MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v15, v18);
  uint64_t v21 = (char *)v39 - v20;
  MEMORY[0x1F4188790](v19, v22);
  uint64_t v24 = (char *)v39 - v23;
  swift_beginAccess();
  uint64_t v25 = MEMORY[0x1B3E6D270](a2 + 16);
  if (v25)
  {
    id v26 = (void *)v25;
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_1AD9DD550();
    __swift_project_value_buffer(v27, (uint64_t)qword_1E9A4D288);
    sub_1AD8ADBDC(a1, (uint64_t)v24, (uint64_t (*)(void))sub_1AD8ACA8C);
    id v28 = v26;
    uint64_t v29 = sub_1AD9DD530();
    int v30 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      int v41 = v30;
      v39[0] = (uint64_t)v9;
      os_log_t v42 = v29;
      uint64_t v31 = v5;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v44 = v40;
      *(_DWORD *)uint64_t v32 = 136446466;
      uint64_t v33 = sub_1AD8A77E4();
      uint64_t v43 = sub_1AD838978(v33, v34, &v44);
      v39[1] = (uint64_t)&v44;
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      *(_WORD *)(v32 + 12) = 2082;
      sub_1AD8ADBDC((uint64_t)v24, (uint64_t)v21, (uint64_t (*)(void))sub_1AD8ACA8C);
      sub_1AD8ADBDC((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(void))sub_1AD8ACA8C);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v17, 1, v4) == 1)
      {
        unint64_t v35 = 0xE300000000000000;
        uint64_t v36 = 7104878;
      }
      else
      {
        sub_1AD8ADB78((uint64_t)v17, (uint64_t)v12);
        sub_1AD8ADBDC((uint64_t)v12, v39[0], (uint64_t (*)(void))type metadata accessor for Alarm);
        uint64_t v36 = sub_1AD9DF730();
        unint64_t v35 = v37;
        sub_1AD8AD984((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Alarm);
      }
      sub_1AD8AD984((uint64_t)v21, (uint64_t (*)(void))sub_1AD8ACA8C);
      uint64_t v43 = sub_1AD838978(v36, v35, &v44);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      sub_1AD8AD984((uint64_t)v24, (uint64_t (*)(void))sub_1AD8ACA8C);
      uint64_t v29 = v42;
      _os_log_impl(&dword_1AD834000, v42, (os_log_type_t)v41, "[%{public}s] updated alarm: %{public}s", (uint8_t *)v32, 0x16u);
      uint64_t v38 = v40;
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v38, -1, -1);
      MEMORY[0x1B3E6D1A0](v32, -1, -1);
    }
    else
    {

      sub_1AD8AD984((uint64_t)v24, (uint64_t (*)(void))sub_1AD8ACA8C);
    }

    swift_getKeyPath();
    swift_getKeyPath();
    sub_1AD9DDBC0();
    swift_release();
    swift_release();
    if ((_BYTE)v44)
    {
      if (v44 != 3)
      {
        type metadata accessor for LockScreenContentModel();
        sub_1AD8ADB28(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
        sub_1AD9DDAB0();
        sub_1AD9DDB50();
        swift_release();
      }
    }
  }
}

void sub_1AD8A9C48(char *a1, uint64_t a2)
{
  char v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    *(unsigned char *)(v4 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible) = v2;
    sub_1AD8AA19C();
  }
}

void sub_1AD8A9CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1AD9DDBC0();
    swift_release();
    swift_release();
    if (v5 == 3)
    {
      type metadata accessor for LockScreenContentModel();
      sub_1AD8ADB28(qword_1E9A4AD70, (void (*)(uint64_t))type metadata accessor for LockScreenContentModel);
      sub_1AD9DDAB0();
      sub_1AD9DDB50();
      swift_release();
    }
  }
}

id LockScreenContentModel.__deallocating_deinit()
{
  swift_getObjectType();
  if (qword_1E9A49078 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_1AD9DD550();
  __swift_project_value_buffer(v1, (uint64_t)qword_1E9A4D2B8);
  id v2 = v0;
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = v6;
    *(_DWORD *)char v5 = 136446210;
    uint64_t v10 = sub_1AD9E04F0();
    unint64_t v11 = v7;
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    sub_1AD838978(v10, v11, &v12);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v8 = (objc_class *)type metadata accessor for LockScreenContentModel();
  v13.receiver = v2;
  v13.super_class = v8;
  return objc_msgSendSuper2(&v13, sel_dealloc);
}

void sub_1AD8AA19C()
{
  swift_getObjectType();
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_1AD9DD550();
  __swift_project_value_buffer(v1, (uint64_t)qword_1E9A4D288);
  id v2 = v0;
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = v6;
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v10 = sub_1AD9E04F0();
    unint64_t v11 = v7;
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    sub_1AD838978(v10, v11, &v12);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    *(_WORD *)(v5 + 12) = 2082;
    if (*((unsigned char *)v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible)) {
      uint64_t v8 = 1702195828;
    }
    else {
      uint64_t v8 = 0x65736C6166;
    }
    if (*((unsigned char *)v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible)) {
      unint64_t v9 = 0xE400000000000000;
    }
    else {
      unint64_t v9 = 0xE500000000000000;
    }
    sub_1AD838978(v8, v9, &v12);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] updated visible: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }
  else
  {
  }
  if (*((unsigned char *)v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible) == 1) {
    sub_1AD8AAD74();
  }
}

id sub_1AD8AA430()
{
  id result = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel);
  if (result)
  {
    id result = objc_msgSend(result, sel_sleepSettings);
    if (result)
    {
      id v2 = result;
      unint64_t v3 = (unint64_t)objc_msgSend(result, sel_sleepModeOptions);

      return (id)((v3 >> 3) & 1);
    }
  }
  return result;
}

uint64_t sub_1AD8AA490@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider);
  if (v3)
  {
    uint64_t v4 = v3 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
    swift_beginAccess();
    return sub_1AD8ADBDC(v4, a1, (uint64_t (*)(void))sub_1AD8ACA8C);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1AD8AA510(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1AD9DD550();
  __swift_project_value_buffer(v4, (uint64_t)qword_1E9A4D288);
  uint64_t v5 = sub_1AD9DD530();
  os_log_type_t v6 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v11 = v8;
    *(_DWORD *)unint64_t v7 = 136446210;
    uint64_t v9 = sub_1AD9E04F0();
    sub_1AD838978(v9, v10, &v11);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v5, v6, "[%{public}s] dismiss active alarm", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
  }

  if (*(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider))
  {
    swift_retain();
    sub_1AD99506C(a1);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void sub_1AD8AA6D4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_1AD9DCC70();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1E9A4D288);
  uint64_t v9 = sub_1AD9DD530();
  os_log_type_t v10 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v22 = v1;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v23 = v3;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    aBlock[0] = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v14 = sub_1AD9E04F0();
    uint64_t v24 = sub_1AD838978(v14, v15, aBlock);
    sub_1AD9DFEA0();
    uint64_t v1 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] skip upcoming alarm", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v13, -1, -1);
    uint64_t v16 = v12;
    uint64_t v3 = v23;
    MEMORY[0x1B3E6D1A0](v16, -1, -1);
  }

  uint64_t v17 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore);
  sub_1AD9DCC60();
  uint64_t v18 = (void *)sub_1AD9DCBB0();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = ObjectType;
  aBlock[4] = (uint64_t)sub_1AD8ACAD0;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1AD8A776C;
  aBlock[3] = (uint64_t)&block_descriptor_19;
  uint64_t v20 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v17, sel_skipUpcomingWakeUpAlarmForDate_completion_, v18, v20);
  _Block_release(v20);
}

void sub_1AD8AA9D8(char a1, void *a2)
{
  if ((a1 & 1) == 0)
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_1AD9DD550();
    __swift_project_value_buffer(v3, (uint64_t)qword_1E9A4D288);
    id v4 = a2;
    id v5 = a2;
    osos_log_t log = sub_1AD9DD530();
    os_log_type_t v6 = sub_1AD9DFBC0();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v16 = v8;
      *(_DWORD *)uint64_t v7 = 136446466;
      uint64_t v9 = sub_1AD9E04F0();
      sub_1AD838978(v9, v10, &v16);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2082;
      if (a2)
      {
        id v11 = a2;
        sub_1AD869CF0();
        uint64_t v12 = sub_1AD9DF730();
        unint64_t v14 = v13;
      }
      else
      {
        unint64_t v14 = 0xE300000000000000;
        uint64_t v12 = 7104878;
      }
      sub_1AD838978(v12, v14, &v16);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, oslog, v6, "[%{public}s] failed to skip upcoming alarm: %{public}s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v8, -1, -1);
      MEMORY[0x1B3E6D1A0](v7, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t sub_1AD8AAC30()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1AD8AAC7C(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState;
  swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  return sub_1AD8AAD74();
}

uint64_t (*sub_1AD8AACE0(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1AD8AAD40;
}

uint64_t sub_1AD8AAD40(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1AD8AAD74();
  }
  return result;
}

uint64_t sub_1AD8AAD74()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState];
  swift_beginAccess();
  if (*v1 == 4)
  {
    uint64_t v2 = &v0[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState];
    swift_beginAccess();
    if ((v2[8] & 1) == 0)
    {
      switch(*(void *)v2)
      {
        case 0:
        case 1:
        case 2:
        case 3:
          break;
        default:
          sub_1AD9E0140();
          __break(1u);
          JUMPOUT(0x1AD8AAF54);
      }
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v3 = v0;
  sub_1AD9DDBD0();
  return sub_1AD8A7978();
}

void sub_1AD8AAF64()
{
}

void sub_1AD8AAF94(char a1, void *a2, void *a3)
{
}

void sub_1AD8AAFA8()
{
}

void sub_1AD8AAFD8(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v8 = *(void **)&v4[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v4;
  v12[4] = a2;
  v12[5] = v9;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  long long v12[2] = sub_1AD8A776C;
  uint64_t v12[3] = a3;
  unint64_t v10 = _Block_copy(v12);
  id v11 = v4;
  swift_release();
  objc_msgSend(v8, *a4, v10);
  _Block_release(v10);
}

void sub_1AD8AB0A8(char a1, void *a2, void *a3, const char *a4, const char *a5)
{
  swift_getObjectType();
  if (a1)
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_1AD9DD550();
    __swift_project_value_buffer(v10, (uint64_t)qword_1E9A4D288);
    uint64_t v29 = a3;
    id v11 = sub_1AD9DD530();
    os_log_type_t v12 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v34 = v14;
      *(_DWORD *)unint64_t v13 = 136446210;
      uint64_t v30 = sub_1AD9E04F0();
      unint64_t v32 = v15;
      sub_1AD9DF790();
      swift_bridgeObjectRetain();
      sub_1AD9DF790();
      swift_bridgeObjectRelease();
      sub_1AD838978(v30, v32, &v34);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v11, v12, a4, v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
      MEMORY[0x1B3E6D1A0](v13, -1, -1);

      return;
    }

    goto LABEL_13;
  }
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_1AD9DD550();
  __swift_project_value_buffer(v16, (uint64_t)qword_1E9A4D288);
  id v17 = a3;
  id v18 = a2;
  id v19 = v17;
  id v20 = a2;
  uint64_t v29 = sub_1AD9DD530();
  os_log_type_t v21 = sub_1AD9DFBC0();
  if (!os_log_type_enabled(v29, v21))
  {

LABEL_13:

    return;
  }
  uint64_t v22 = swift_slowAlloc();
  uint64_t v23 = swift_slowAlloc();
  uint64_t v34 = v23;
  *(_DWORD *)uint64_t v22 = 136446466;
  uint64_t v31 = sub_1AD9E04F0();
  unint64_t v33 = v24;
  sub_1AD9DF790();
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD838978(v31, v33, &v34);
  sub_1AD9DFEA0();

  swift_bridgeObjectRelease();
  *(_WORD *)(v22 + 12) = 2082;
  if (a2)
  {
    id v25 = a2;
    sub_1AD869CF0();
    uint64_t v26 = sub_1AD9DF730();
    unint64_t v28 = v27;
  }
  else
  {
    unint64_t v28 = 0xE300000000000000;
    uint64_t v26 = 7104878;
  }
  sub_1AD838978(v26, v28, &v34);
  sub_1AD9DFEA0();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1AD834000, v29, v21, a5, (uint8_t *)v22, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1B3E6D1A0](v23, -1, -1);
  MEMORY[0x1B3E6D1A0](v22, -1, -1);
}

void sub_1AD8AB53C(void *a1, void *a2, void *a3)
{
  swift_getObjectType();
  uint64_t v6 = sub_1AD9DF3D0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AD9DF400();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    unint64_t v37 = v14;
    sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
    id v17 = a1;
    id v18 = (void *)sub_1AD9DFCA0();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a3;
    *(void *)(v19 + 24) = v17;
    os_log_t v42 = sub_1AD8ADB70;
    uint64_t v43 = v19;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    unint64_t v39 = 1107296256;
    uint64_t v40 = sub_1AD8D34D8;
    int v41 = &block_descriptor_71;
    id v20 = _Block_copy(&aBlock);
    id v21 = a3;
    id v22 = v17;
    swift_release();
    sub_1AD9DF3F0();
    uint64_t aBlock = MEMORY[0x1E4FBC860];
    sub_1AD8ADB28((unint64_t *)&qword_1E9A4AD50, MEMORY[0x1E4FBCB00]);
    sub_1AD8ADA90(0);
    sub_1AD8ADB28((unint64_t *)&qword_1E9A4AD60, sub_1AD8ADA90);
    sub_1AD9DFF40();
    MEMORY[0x1B3E6BC50](0, v16, v10, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(char *, NSObject *))(v12 + 8))(v16, v37);
  }
  else
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_1AD9DD550();
    __swift_project_value_buffer(v23, (uint64_t)qword_1E9A4D288);
    id v24 = a3;
    id v25 = a2;
    id v26 = v24;
    id v27 = a2;
    unint64_t v37 = sub_1AD9DD530();
    os_log_type_t v28 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v37, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v44 = v30;
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t aBlock = sub_1AD9E04F0();
      unint64_t v39 = v31;
      sub_1AD9DF790();
      swift_bridgeObjectRetain();
      sub_1AD9DF790();
      swift_bridgeObjectRelease();
      uint64_t aBlock = sub_1AD838978(aBlock, v39, &v44);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      *(_WORD *)(v29 + 12) = 2082;
      if (a2)
      {
        uint64_t aBlock = (uint64_t)a2;
        id v32 = a2;
        sub_1AD869CF0();
        uint64_t v33 = sub_1AD9DF730();
        unint64_t v35 = v34;
      }
      else
      {
        unint64_t v35 = 0xE300000000000000;
        uint64_t v33 = 7104878;
      }
      uint64_t aBlock = sub_1AD838978(v33, v35, &v44);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v37, v28, "[%{public}s] failed to retrieve sleep schedule model: %{public}s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v30, -1, -1);
      MEMORY[0x1B3E6D1A0](v29, -1, -1);
    }
    else
    {

      uint64_t v36 = v37;
    }
  }
}

void sub_1AD8ABAD0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel);
  *(void *)(a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel) = a2;
  id v3 = a2;

  sub_1AD8AAD74();
}

uint64_t sub_1AD8ABB30(uint64_t a1, void *a2)
{
  return sub_1AD8ACB30(a2);
}

void sub_1AD8ABB38(void *a1, void *a2)
{
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1AD9DD550();
  __swift_project_value_buffer(v4, (uint64_t)qword_1E9A4D288);
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = (char *)v5;
  id v8 = v6;
  uint64_t v9 = sub_1AD9DD530();
  os_log_type_t v10 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = v21;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v12 = sub_1AD8A77E4();
    sub_1AD838978(v12, v13, &v22);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2082;
    id v14 = v8;
    id v15 = objc_msgSend(v14, sel_description);
    uint64_t v16 = sub_1AD9DF710();
    unint64_t v18 = v17;

    sub_1AD838978(v16, v18, &v22);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] updated sleep schedule model: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v21, -1, -1);
    MEMORY[0x1B3E6D1A0](v11, -1, -1);
  }
  else
  {
  }
  uint64_t v19 = *(void **)&v7[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel];
  *(void *)&v7[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel] = v8;
  id v20 = v8;

  sub_1AD8AAD74();
}

uint64_t sub_1AD8ABE10()
{
  swift_getObjectType();
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_1AD9DD550();
  __swift_project_value_buffer(v1, (uint64_t)qword_1E9A4D288);
  uint64_t v2 = v0;
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = v6;
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v15 = sub_1AD9E04F0();
    unint64_t v16 = v7;
    sub_1AD9DF790();
    swift_bridgeObjectRetain();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_1AD838978(v15, v16, &v14);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    *(_WORD *)(v5 + 12) = 2082;
    id v8 = &v2[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState];
    swift_beginAccess();
    if (*v8 == 4)
    {
      unint64_t v9 = 0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    else
    {
      LOBYTE(v15) = *v8;
      uint64_t v10 = sub_1AD9DF730();
      unint64_t v9 = v11;
    }
    uint64_t v15 = sub_1AD838978(v10, v9, &v14);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] updated demo state: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }
  else
  {
  }
  sub_1AD8AAD74();
  uint64_t v12 = &v2[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState];
  uint64_t result = swift_beginAccess();
  byte_1E9A4AC10 = *v12;
  return result;
}

uint64_t sub_1AD8AC0DC@<X0>(unsigned char *a1@<X8>)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t sub_1AD8AC12C(char *a1)
{
  char v2 = *a1;
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  swift_beginAccess();
  *id v3 = v2;
  return sub_1AD8ABE10();
}

uint64_t (*sub_1AD8AC184(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1AD8AC1E4;
}

uint64_t sub_1AD8AC1E4(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1AD8ABE10();
  }
  return result;
}

uint64_t sub_1AD8AC218()
{
  uint64_t v1 = (char *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  swift_beginAccess();
  if (*v1 == 4)
  {
    *uint64_t v1 = 0;
    uint64_t result = sub_1AD8ABE10();
    char v3 = 2;
    switch(*v1)
    {
      case 1:
        goto LABEL_5;
      case 2:
        char v3 = 3;
        goto LABEL_5;
      case 4:
        return result;
      default:
        char v3 = 1;
        goto LABEL_5;
    }
  }
  else
  {
    char v3 = 4;
LABEL_5:
    *uint64_t v1 = v3;
    return sub_1AD8ABE10();
  }
}

uint64_t sub_1AD8AC2C8()
{
  uint64_t v1 = (char *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  char v2 = 1;
  uint64_t result = swift_beginAccess();
  switch(*v1)
  {
    case 1:
      char v2 = 2;
      goto LABEL_4;
    case 2:
      char v2 = 3;
      goto LABEL_4;
    case 4:
      return result;
    default:
LABEL_4:
      *uint64_t v1 = v2;
      return sub_1AD8ABE10();
  }
}

uint64_t sub_1AD8AC364()
{
  uint64_t v1 = (char *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  uint64_t result = swift_beginAccess();
  char v3 = 2;
  switch(*v1)
  {
    case 1:
      char v3 = 3;
      goto LABEL_4;
    case 2:
      char v3 = 1;
      goto LABEL_4;
    case 4:
      return result;
    default:
LABEL_4:
      *uint64_t v1 = v3;
      return sub_1AD8ABE10();
  }
}

void sub_1AD8AC3F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AD9DCE40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  id v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AD9DCCB0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  unint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8ACA8C(0);
  MEMORY[0x1F4188790](v14 - 8, v15);
  unint64_t v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8ADBDC(a1, (uint64_t)v17, (uint64_t (*)(void))sub_1AD8ACA8C);
  uint64_t v18 = type metadata accessor for Alarm();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18) == 1)
  {
    sub_1AD8AD984((uint64_t)v17, (uint64_t (*)(void))sub_1AD8ACA8C);
  }
  else
  {
    id v19 = *(id *)&v17[*(int *)(v18 + 20)];
    sub_1AD8AD984((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Alarm);
    id v20 = objc_msgSend(v19, sel_alarmID);

    sub_1AD9DCC90();
    sub_1AD9DCC80();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_init);
  sub_1AD8A88A8((uint64_t)v8);
  uint64_t v22 = (void *)sub_1AD9DCDA0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  id v23 = objc_msgSend(v21, sel_hk_morningIndexWithCalendar_, v22);

  id v24 = objc_allocWithZone(MEMORY[0x1E4FA54E0]);
  id v25 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(v24, sel_initWithWindDownAction_wasUsed_identifier_, 3, 1, v25);

  id v27 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore), sel_analyticsManager);
  id v28 = objc_msgSend(v27, sel_analyticsStore);

  sub_1AD8ACE20(0, (unint64_t *)&qword_1EB725350, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1AD9E71F0;
  *(void *)(v29 + 32) = v26;
  v32[1] = v29;
  sub_1AD9DF870();
  sub_1AD837214(0, (unint64_t *)&unk_1E9A4ACD0);
  id v30 = v26;
  unint64_t v31 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v28, sel_updateWindDownActions_onMorningIndex_, v31, v23);
}

id LockScreenContentModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void LockScreenContentModel.init()()
{
}

uint64_t sub_1AD8AC8DC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for LockScreenContentModel();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for LockScreenContentModel()
{
  uint64_t result = qword_1E9A4AD40;
  if (!qword_1E9A4AD40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD8AC968()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD8AC9A0(uint64_t a1)
{
  sub_1AD8A971C(a1, v1);
}

void sub_1AD8AC9A8(char *a1)
{
  sub_1AD8A9C48(a1, v1);
}

unint64_t sub_1AD8AC9B0()
{
  unint64_t result = qword_1E9A4ACA8;
  if (!qword_1E9A4ACA8)
  {
    sub_1AD8ACE20(255, &qword_1E9A49E28, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4ACA8);
  }
  return result;
}

uint64_t sub_1AD8ACA2C()
{
  return swift_deallocObject();
}

void sub_1AD8ACA64(void *a1, void *a2)
{
  sub_1AD8AB53C(a1, a2, *(void **)(v2 + 16));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void sub_1AD8ACA84(uint64_t a1)
{
  sub_1AD8A9CB4(a1, v1);
}

void sub_1AD8ACA8C(uint64_t a1)
{
}

uint64_t sub_1AD8ACAC0()
{
  return swift_deallocObject();
}

void sub_1AD8ACAD0(char a1, void *a2)
{
}

void sub_1AD8ACAD8(char a1, void *a2)
{
  sub_1AD8AB0A8(a1, a2, *(void **)(v2 + 16), "[%{public}s] dismissed wake up greeting", "[%{public}s] failed to dismiss wake up greeting: %{public}s");
}

void sub_1AD8ACB04(char a1, void *a2)
{
  sub_1AD8AB0A8(a1, a2, *(void **)(v2 + 16), "[%{public}s] dismissed sleep lock", "[%{public}s] failed to dismiss sleep lock: %{public}s");
}

uint64_t sub_1AD8ACB30(void *a1)
{
  uint64_t v3 = sub_1AD9DF3D0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1AD9DF400();
  uint64_t v8 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  uint64_t v12 = (void *)sub_1AD9DFCA0();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v1;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_1AD8ADA88;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AD8D34D8;
  aBlock[3] = &block_descriptor_65;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v1;
  id v16 = a1;
  swift_release();
  sub_1AD9DF3F0();
  aBlock[0] = MEMORY[0x1E4FBC860];
  sub_1AD8ADB28((unint64_t *)&qword_1E9A4AD50, MEMORY[0x1E4FBCB00]);
  sub_1AD8ADA90(0);
  sub_1AD8ADB28((unint64_t *)&qword_1E9A4AD60, sub_1AD8ADA90);
  sub_1AD9DFF40();
  MEMORY[0x1B3E6BC50](0, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v19);
}

void sub_1AD8ACE20(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD8ACE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD8A82E0(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state, &qword_1E9A4AC28, (uint64_t)&type metadata for LockScreenContentState);
}

uint64_t sub_1AD8ACE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AD8A8370(a1, a2, a3, a4, &qword_1E9A4AC30, (uint64_t)&type metadata for LockScreenContentState, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state, &qword_1E9A4AC28);
}

uint64_t sub_1AD8ACED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AD8A82E0(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4FBB390]);
}

uint64_t sub_1AD8ACF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AD8A8370(a1, a2, a3, a4, &qword_1E9A49E28, MEMORY[0x1E4FBB390], (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed, (unint64_t *)&qword_1E9A4AC40);
}

uint64_t sub_1AD8ACF3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 8);
  *(void *)a2 = *(void *)v3;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1AD8ACF98(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *a2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState;
  swift_beginAccess();
  *(void *)uint64_t v4 = v2;
  *(unsigned char *)(v4 + 8) = v3;
  return sub_1AD8AAD74();
}

uint64_t sub_1AD8ACFFC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1AD8AD050(char *a1, void *a2)
{
  char v2 = *a1;
  char v3 = (unsigned char *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  swift_beginAccess();
  *char v3 = v2;
  return sub_1AD8ABE10();
}

uint64_t sub_1AD8AD0AC()
{
  return type metadata accessor for LockScreenContentModel();
}

void sub_1AD8AD0B4()
{
  sub_1AD8ACE20(319, &qword_1E9A4AC28, (uint64_t)&type metadata for LockScreenContentState, MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F)
  {
    sub_1AD8ACE20(319, (unint64_t *)&qword_1E9A4AC40, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
    if (v1 <= 0x3F)
    {
      sub_1AD8AD950(319);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for LockScreenContentModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LockScreenContentModel);
}

uint64_t dispatch thunk of LockScreenContentModel.state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of LockScreenContentModel.state.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of LockScreenContentModel.state.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of LockScreenContentModel.$state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of LockScreenContentModel.$state.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of LockScreenContentModel.$state.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of LockScreenContentModel.alarmButtonPressed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of LockScreenContentModel.alarmButtonPressed.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of LockScreenContentModel.alarmButtonPressed.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of LockScreenContentModel.$alarmButtonPressed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of LockScreenContentModel.$alarmButtonPressed.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of LockScreenContentModel.$alarmButtonPressed.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of LockScreenContentModel.__allocating_init(debugIdentifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t dispatch thunk of LockScreenContentModel.hideTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of LockScreenContentModel.alarm.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of LockScreenContentModel.dismissActiveAlarm(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of LockScreenContentModel.skipUpcomingOccurrenceAlarm()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of LockScreenContentModel.lockScreenState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of LockScreenContentModel.lockScreenState.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1C0))(a1, a2 & 1);
}

uint64_t dispatch thunk of LockScreenContentModel.lockScreenState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of LockScreenContentModel.dismissWakeUpGreeting()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of LockScreenContentModel.dismissSleepLock()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of LockScreenContentModel.sleepStore(_:sleepScheduleModelDidChange:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of LockScreenContentModel.demoState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of LockScreenContentModel.demoState.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of LockScreenContentModel.demoState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of LockScreenContentModel.toggleDemoMode()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of LockScreenContentModel.moveDemoStateForward()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of LockScreenContentModel.moveDemoStateBackward()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of LockScreenContentModel.didInteractWithAlarm(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x250))();
}

void sub_1AD8AD950(uint64_t a1)
{
}

uint64_t sub_1AD8AD984(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD8AD9E4(uint64_t a1, uint64_t a2)
{
  sub_1AD8AD950(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8ADA48()
{
  return swift_deallocObject();
}

void sub_1AD8ADA88()
{
  sub_1AD8ABB38(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1AD8ADA90(uint64_t a1)
{
}

void sub_1AD8ADAC4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD8ADB28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8ADB70()
{
  sub_1AD8ABAD0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1AD8ADB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Alarm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8ADBDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t OptionalContentGroup<>.init(showContent:content:)@<X0>(char a1@<W0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, unsigned char *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = type metadata accessor for OptionalContentGroup();
  return a2(v4, v5, v6, v7);
}

uint64_t type metadata accessor for OptionalContentGroup()
{
  return swift_getGenericMetadata();
}

uint64_t OptionalContentGroup.init(showContent:content:elseContent:)@<X0>(char a1@<W0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t (*a3)(uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  *a4 = a1;
  uint64_t v6 = type metadata accessor for OptionalContentGroup();
  uint64_t v10 = a2(v6, v7, v8, v9);
  return a3(v10);
}

uint64_t OptionalContentGroup.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v7, v10);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = *(void *)(v11 + 16);
  uint64_t v36 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v11, v15);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v19);
  id v21 = (char *)&v36 - v20;
  uint64_t v22 = sub_1AD9DE480();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v37 = v22;
  uint64_t v38 = v23;
  MEMORY[0x1F4188790](v22, v24);
  id v26 = (char *)&v36 - v25;
  if (*v3 == 1)
  {
    uint64_t v27 = *(void *)(a1 + 32);
    sub_1AD90C5E8(&v3[*(int *)(a1 + 52)], v14, v27);
    sub_1AD90C5E8(v21, v14, v27);
    uint64_t v28 = *(void *)(a1 + 40);
    sub_1AD90C624((uint64_t)v18, v14);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v36 + 8);
    v29(v18, v14);
    v29(v21, v14);
  }
  else
  {
    id v30 = &v3[*(int *)(a1 + 56)];
    uint64_t v28 = *(void *)(a1 + 40);
    sub_1AD90C5E8(v30, v5, v28);
    sub_1AD90C5E8(v13, v5, v28);
    uint64_t v31 = v6;
    uint64_t v27 = *(void *)(a1 + 32);
    sub_1AD90C71C((uint64_t)v9, v14, v5);
    id v32 = *(void (**)(char *, uint64_t))(v31 + 8);
    v32(v9, v5);
    v32(v13, v5);
  }
  uint64_t v40 = v27;
  uint64_t v41 = v28;
  uint64_t v33 = v37;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1AD90C5E8(v26, v33, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v26, v33);
}

uint64_t sub_1AD8AE0E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8AE128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t sub_1AD8AE130()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1AD8AE20C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  if ((v9 | v5) > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || ((v6 + v9 + ((v5 + 1) & ~v5)) & ~v9) + *(void *)(v8 + 64) > 0x18)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + (((v9 | v5) + 16) & ~(v9 | v5)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = ~v9;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v15 = ((unint64_t)a1 + v5 + 1) & ~v5;
    uint64_t v16 = ((unint64_t)a2 + v5 + 1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v15 + v10) & v14, (v16 + v10) & v14, v7);
  }
  return v3;
}

uint64_t sub_1AD8AE3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v5);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (v5 + *(void *)(v4 + 56) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return v7(v8);
}

unsigned char *sub_1AD8AE454(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unsigned char *sub_1AD8AE528(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unsigned char *sub_1AD8AE5FC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unsigned char *sub_1AD8AE6D0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_1AD8AE7A4(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v13 = 254;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  int v14 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v10 + v11 + ((v9 + 1) & ~v9)) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)&a1[v15];
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)&a1[v15];
      if (!*(_WORD *)&a1[v15]) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if (v12 > 0xFE)
      {
        uint64_t v26 = (unint64_t)&a1[v9 + 1] & ~v9;
        if (v5 == v13) {
          return (*(uint64_t (**)(uint64_t))(v4 + 48))(v26);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v26 + v10 + v11) & ~v11, v8, v6);
        }
      }
      else
      {
        unsigned int v23 = *a1;
        BOOL v24 = v23 >= 2;
        int v25 = (v23 + 2147483646) & 0x7FFFFFFF;
        if (v24) {
          return (v25 + 1);
        }
        else {
          return 0;
        }
      }
    }
  }
  int v17 = a1[v15];
  if (!a1[v15]) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *(unsigned __int16 *)a1;
        break;
      case 3:
        int v22 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v13 + (v22 | v20) + 1;
}

void sub_1AD8AE9EC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0xFE) {
    unsigned int v14 = 254;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((v11 + v12 + ((v10 + 1) & ~v10)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v16 = a3 >= v14;
  unsigned int v17 = a3 - v14;
  if (v17 != 0 && v16)
  {
    if (v15 <= 3)
    {
      unsigned int v21 = ((v17 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
      if (HIWORD(v21))
      {
        int v18 = 4;
      }
      else if (v21 >= 0x100)
      {
        int v18 = 2;
      }
      else
      {
        int v18 = v21 > 1;
      }
    }
    else
    {
      int v18 = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v19 = ~v14 + a2;
    if (v15 < 4)
    {
      int v20 = (v19 >> (8 * v15)) + 1;
      if (v15)
      {
        int v22 = v19 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v15] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v20;
        return;
      case 3:
        goto LABEL_46;
      case 4:
        *(_DWORD *)&a1[v15] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x1AD8AECFCLL);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v13 > 0xFE)
        {
          unint64_t v23 = (unint64_t)&a1[v10 + 1] & ~v10;
          if (v7 == v14)
          {
            BOOL v24 = *(void (**)(unint64_t))(v6 + 56);
            v24(v23);
          }
          else
          {
            unint64_t v25 = (v23 + v11 + v12) & ~v12;
            uint64_t v26 = *(void (**)(unint64_t))(v9 + 56);
            v26(v25);
          }
        }
        else
        {
          *a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t sub_1AD8AED24()
{
  return swift_getWitnessTable();
}

id ScheduleOccurrenceAlarmSnoozeTableViewCell.apply(_:)(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v2, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD8AEE54();
  swift_dynamicCast();
  id v3 = objc_msgSend(v5, sel_allowsSnooze);

  return objc_msgSend(v1, sel_setOn_animated_, v3, 1);
}

unint64_t sub_1AD8AEE54()
{
  unint64_t result = qword_1E9A492B0;
  if (!qword_1E9A492B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A492B0);
  }
  return result;
}

unint64_t static ScheduleOccurrenceAlarmSnoozeTableViewCell.defaultReuseIdentifier.getter()
{
  return 0xD00000000000002ALL;
}

void sub_1AD8AEFA0()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  id v2 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_setDisplayText_, v2, 0xE000000000000000);

  id v3 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  aBlock[4] = sub_1AD8F05CC;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AD8F0900;
  aBlock[3] = &block_descriptor_6;
  uint64_t v4 = _Block_copy(aBlock);
  id v5 = objc_msgSend(v3, sel_initWithDynamicProvider_, v4);
  _Block_release(v4);
  swift_release();
  objc_msgSend(v0, sel_setBackgroundColor_, v5);
}

id ScheduleOccurrenceAlarmSnoozeTableViewCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell()
{
  return self;
}

id sub_1AD8AF194(uint64_t a1)
{
  return ScheduleOccurrenceAlarmSnoozeTableViewCell.apply(_:)(a1);
}

uint64_t method lookup function for ScheduleOccurrenceAlarmSnoozeTableViewCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScheduleOccurrenceAlarmSnoozeTableViewCell);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

char *sub_1AD8AF1E8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background;
  id v8 = objc_allocWithZone(MEMORY[0x1E4F39C88]);
  uint64_t v9 = v3;
  *(void *)&v3[v7] = objc_msgSend(v8, sel_init);
  uint64_t v10 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel;
  *(void *)&v9[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v11 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator;
  *(void *)&v9[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  v9[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_isSelectedElsewhere] = 0;
  *(void *)&v9[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_day] = a1;
  uint64_t v12 = &v9[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration];
  long long v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
  *((_OWORD *)v12 + 1) = v13;
  long long v15 = *(_OWORD *)(a3 + 48);
  long long v14 = *(_OWORD *)(a3 + 64);
  long long v16 = *(_OWORD *)(a3 + 32);
  *((void *)v12 + 10) = *(void *)(a3 + 80);
  *((_OWORD *)v12 + 3) = v15;
  *((_OWORD *)v12 + 4) = v14;
  *((_OWORD *)v12 + 2) = v16;
  sub_1AD8B0A08((void *)a3);

  v37.receiver = v9;
  v37.super_class = (Class)type metadata accessor for SleepScheduleDayPickerDay();
  unsigned int v17 = (char *)objc_msgSendSuper2(&v37, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v36 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel;
  int v18 = *(void **)&v17[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel];
  unsigned int v19 = v17;
  id v20 = v18;
  unint64_t result = (char *)objc_msgSend(a2, sel_veryShortStandaloneWeekdaySymbols);
  if (!result) {
    goto LABEL_22;
  }
  int v22 = result;
  uint64_t v23 = sub_1AD9DF860();

  unint64_t result = (char *)NSGregorianCalendarDayForHKSPDay();
  if (!result)
  {
    unint64_t v25 = 0;
    goto LABEL_8;
  }
  BOOL v24 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  if (((unint64_t)v24 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((unint64_t)v24 >= *(void *)(v23 + 16))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v25 = (void *)sub_1AD9DF6D0();
LABEL_8:
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setText_, v25);

  uint64_t v26 = v19;
  unint64_t result = (char *)objc_msgSend(a2, sel_standaloneWeekdaySymbols);
  if (result)
  {
    uint64_t v27 = result;
    uint64_t v28 = sub_1AD9DF860();

    unint64_t result = (char *)NSGregorianCalendarDayForHKSPDay();
    if (!result)
    {
      id v30 = 0;
      goto LABEL_15;
    }
    uint64_t v29 = result - 1;
    if (!__OFSUB__(result, 1))
    {
      if (((unint64_t)v29 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)v29 < *(void *)(v28 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          id v30 = (void *)sub_1AD9DF6D0();
LABEL_15:
          swift_bridgeObjectRelease();
          objc_msgSend(v26, sel_setLargeContentTitle_, v30);

          id v31 = objc_msgSend(v26, sel_layer);
          objc_msgSend(v31, sel_addSublayer_, *(void *)&v26[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background]);

          objc_msgSend(v26, sel_addSubview_, *(void *)&v17[v36]);
          objc_msgSend(v26, sel_addSubview_, *(void *)&v26[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator]);
          sub_1AD8AF614();
          sub_1AD8AF77C();
          sub_1AD87B1E0();
          uint64_t v32 = swift_allocObject();
          *(_OWORD *)(v32 + 16) = xmmword_1AD9E3070;
          uint64_t v33 = sub_1AD9DD6D0();
          uint64_t v34 = MEMORY[0x1E4FB1138];
          *(void *)(v32 + 32) = v33;
          *(void *)(v32 + 40) = v34;
          swift_allocObject();
          swift_unknownObjectWeakInit();
          sub_1AD841D34();
          unint64_t v35 = v26;
          sub_1AD9DFD90();
          sub_1AD8B0AB4(a3);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();

          return v35;
        }
        goto LABEL_21;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    goto LABEL_18;
  }
LABEL_23:
  __break(1u);
  return result;
}

id sub_1AD8AF614()
{
  id v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel];
  id v3 = (double *)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration];
  uint64_t v4 = (void *)(*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration])();
  objc_msgSend(v2, sel_setFont_, v4);

  double v5 = v3[7];
  uint64_t v6 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator];
  objc_msgSend(v6, sel_setBackgroundColor_, *((void *)v3 + 6));
  objc_msgSend(v6, sel_setBounds_, 0.0, 0.0, v5, v5);
  id v7 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v7, sel_setCornerRadius_, v5 * 0.5);

  objc_msgSend(v1, sel_setShowsLargeContentViewer_, 1);
  objc_msgSend(v1, sel_setScalesLargeContentImage_, 1);
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1938]), sel_init);
  objc_msgSend(v1, sel_addInteraction_, v8);

  sub_1AD8AFF00();
  return objc_msgSend(v1, sel_setNeedsLayout);
}

void sub_1AD8AF77C()
{
  id v1 = v0;
  sub_1AD86E220(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD9E3080;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x80000001AD9F1DD0;
  id v3 = (id)NSStringForHKSPDay();
  uint64_t v4 = sub_1AD9DF710();
  uint64_t v6 = v5;

  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v6;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1AD9E53A0;
  *(void *)(v7 + 32) = sub_1AD9DF710();
  *(void *)(v7 + 40) = v8;
  *(void *)(v7 + 48) = 0x7065656C53;
  *(void *)(v7 + 56) = 0xE500000000000000;
  strcpy((char *)(v7 + 64), "ScheduleEditor");
  *(unsigned char *)(v7 + 79) = -18;
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_1AD86C2F8(v9);
  sub_1AD86E220(0, &qword_1EB725B60, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  sub_1AD9DF690();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v10 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v1, sel_setAccessibilityIdentifier_, v10);

  uint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel];
  swift_bridgeObjectRetain();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setAccessibilityIdentifier_, v12);
}

void sub_1AD8AFA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    sub_1AD8AF614();
  }
}

id sub_1AD8AFA80()
{
  id v1 = v0;
  swift_getObjectType();
  v42.receiver = v0;
  v42.super_class = (Class)type metadata accessor for SleepScheduleDayPickerDay();
  objc_msgSendSuper2(&v42, sel_layoutSubviews);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v41 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v41);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Layout subviews", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17A8]), sel_initForTextStyle_, *MEMORY[0x1E4FB2950]);
  uint64_t v10 = (double *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration];
  double v11 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration + 72];
  id v12 = objc_msgSend(v1, sel_traitCollection);
  objc_msgSend(v9, sel_scaledValueForValue_compatibleWithTraitCollection_, v12, v11);
  double v14 = v13;

  objc_msgSend(v1, sel_bounds);
  double Height = CGRectGetHeight(v43);
  double v16 = v10[10];
  objc_msgSend(v1, sel_bounds);
  double Width = CGRectGetWidth(v44);
  if (v14 > v11) {
    double v18 = v14;
  }
  else {
    double v18 = v11;
  }
  double v19 = Width - v16;
  if (v19 >= Height - v16) {
    double v19 = Height - v16;
  }
  if (v18 >= v19) {
    double v20 = v19;
  }
  else {
    double v20 = v18;
  }
  unsigned int v21 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background];
  v45.origin.CGFloat x = 0.0;
  v45.origin.CGFloat y = 0.0;
  v45.size.CGFloat width = v20;
  v45.size.CGFloat height = v20;
  CGPathRef v22 = CGPathCreateWithEllipseInRect(v45, 0);
  objc_msgSend(v21, sel_setPath_, v22);

  id v23 = objc_msgSend(v21, sel_path);
  objc_msgSend(v21, sel_setShadowPath_, v23);

  objc_msgSend(v21, sel_setFrame_, 0.0, 0.0, v20, v20);
  objc_msgSend(v1, sel_bounds);
  CGFloat x = v46.origin.x;
  CGFloat y = v46.origin.y;
  CGFloat v26 = v46.size.width;
  CGFloat v27 = v46.size.height;
  double MidX = CGRectGetMidX(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = v26;
  v47.size.CGFloat height = v27;
  double MidY = CGRectGetMidY(v47);
  objc_msgSend(v21, sel_frame);
  objc_msgSend(v21, sel_setFrame_, MidX - v30 * 0.5, MidY - v31 * 0.5);
  uint64_t v32 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel];
  objc_msgSend(v32, sel_sizeToFit);
  objc_msgSend(v1, sel_bounds);
  CGFloat v33 = v48.origin.x;
  CGFloat v34 = v48.origin.y;
  CGFloat v35 = v48.size.width;
  CGFloat v36 = v48.size.height;
  double v37 = CGRectGetMidX(v48);
  v49.origin.CGFloat x = v33;
  v49.origin.CGFloat y = v34;
  v49.size.CGFloat width = v35;
  v49.size.CGFloat height = v36;
  objc_msgSend(v32, sel_setCenter_, v37, CGRectGetMidY(v49));
  uint64_t v38 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator];
  objc_msgSend(v1, sel_bounds);
  double v39 = CGRectGetMidX(v50);
  objc_msgSend(v1, sel_bounds);
  return objc_msgSend(v38, sel_setCenter_, v39, CGRectGetMaxY(v51) + 3.0);
}

void sub_1AD8AFF00()
{
  id v1 = v0;
  swift_getObjectType();
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v29 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    uint64_t v28 = sub_1AD838978(v7, v8, &v29);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Updating style", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  if (!objc_msgSend(v1, sel_isSelected))
  {
    unsigned int v17 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background];
    double v18 = &v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration];
    if (v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_isSelectedElsewhere] == 1)
    {
      double v19 = (void *)*((void *)v18 + 4);
      id v20 = objc_msgSend(v1, sel_traitCollection);
      id v21 = objc_msgSend(v19, sel_resolvedColorWithTraitCollection_, v20);
      id v22 = objc_msgSend(v21, sel_CGColor);

      objc_msgSend(v17, sel_setFillColor_, v22);
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel], sel_setTextColor_, *((void *)v18 + 5));
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator], sel_setHidden_, 0, v28, v29);
    }
    else
    {
      BOOL v24 = (void *)*((void *)v18 + 2);
      id v25 = objc_msgSend(v1, sel_traitCollection);
      id v26 = objc_msgSend(v24, sel_resolvedColorWithTraitCollection_, v25);
      id v27 = objc_msgSend(v26, sel_CGColor);

      objc_msgSend(v17, sel_setFillColor_, v27);
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel], sel_setTextColor_, *((void *)v18 + 3));
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator], sel_setHidden_, 1, v28, v29);
    }
    LOWORD(v29) = 28672;
    v23.value.super.Class isa = 0;
    Class isa = Symbol.uiImage(configuration:)(v23).super.isa;
    goto LABEL_12;
  }
  id v9 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background];
  id v10 = objc_msgSend(v1, sel_tintColor);
  if (v10)
  {
    double v11 = v10;
    id v12 = objc_msgSend(v1, sel_traitCollection);
    id v13 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v12);
    id v14 = objc_msgSend(v13, sel_CGColor);

    objc_msgSend(v9, sel_setFillColor_, v14);
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel], sel_setTextColor_, *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration + 64]);
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator], sel_setHidden_, 1);
    long long v15 = (void *)sub_1AD9DF6D0();
    Class isa = (Class)objc_msgSend(self, sel_systemImageNamed_, v15);

LABEL_12:
    objc_msgSend(v1, sel_setLargeContentImage_, isa, v28);

    return;
  }
  __break(1u);
}

id sub_1AD8B057C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleDayPickerDay();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SleepScheduleDayPickerDay()
{
  return self;
}

void destroy for SleepScheduleDayPickerDay.Configuration(uint64_t a1)
{
  swift_release();

  objc_super v2 = *(void **)(a1 + 64);
}

uint64_t initializeWithCopy for SleepScheduleDayPickerDay.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  os_log_type_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void **)(a2 + 32);
  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  id v9 = *(void **)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v8;
  id v10 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  id v11 = v4;
  id v12 = v5;
  id v13 = v6;
  id v14 = v7;
  id v15 = v9;
  id v16 = v10;
  return a1;
}

void *assignWithCopy for SleepScheduleDayPickerDay.Configuration(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = (void *)a2[2];
  uint64_t v6 = (void *)a1[2];
  a1[2] = v5;
  id v7 = v5;

  uint64_t v8 = (void *)a2[3];
  id v9 = (void *)a1[3];
  a1[3] = v8;
  id v10 = v8;

  id v11 = (void *)a2[4];
  id v12 = (void *)a1[4];
  a1[4] = v11;
  id v13 = v11;

  id v14 = (void *)a2[5];
  id v15 = (void *)a1[5];
  a1[5] = v14;
  id v16 = v14;

  unsigned int v17 = (void *)a2[6];
  double v18 = (void *)a1[6];
  a1[6] = v17;
  id v19 = v17;

  a1[7] = a2[7];
  id v20 = (void *)a2[8];
  id v21 = (void *)a1[8];
  a1[8] = v20;
  id v22 = v20;

  a1[9] = a2[9];
  a1[10] = a2[10];
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SleepScheduleDayPickerDay.Configuration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();

  long long v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  long long v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  uint64_t v6 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  id v7 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepScheduleDayPickerDay.Configuration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepScheduleDayPickerDay.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepScheduleDayPickerDay.Configuration()
{
  return &type metadata for SleepScheduleDayPickerDay.Configuration;
}

id sub_1AD8B09B0()
{
  id result = objc_msgSend(self, sel__preferredFontForTextStyle_variant_maximumContentSizeCategory_, *MEMORY[0x1E4FB28C8], 1024, *MEMORY[0x1E4FB2798]);
  if (!result) {
    __break(1u);
  }
  return result;
}

void *sub_1AD8B0A08(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = (void *)a1[3];
  long long v4 = (void *)a1[4];
  long long v5 = (void *)a1[5];
  uint64_t v6 = (void *)a1[6];
  id v7 = (void *)a1[8];
  swift_retain();
  id v8 = v2;
  id v9 = v3;
  id v10 = v4;
  id v11 = v5;
  id v12 = v6;
  id v13 = v7;
  return a1;
}

uint64_t sub_1AD8B0A74()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD8B0AAC(uint64_t a1, uint64_t a2)
{
  sub_1AD8AFA04(a1, a2, v2);
}

uint64_t sub_1AD8B0AB4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  long long v4 = *(void **)(a1 + 32);
  long long v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);

  swift_release();
  return a1;
}

void sub_1AD8B0B20()
{
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F39C88]), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_isSelectedElsewhere] = 0;

  sub_1AD9E0140();
  __break(1u);
}

id sub_1AD8B0BF8(uint64_t a1)
{
  return sub_1AD8B0C44(a1, (SEL *)&selRef_hk_sleepKeyColor, &qword_1EB7255E8);
}

id static UIColor.primarySleep.getter()
{
  return sub_1AD8B0CAC(&qword_1EB725630, (void **)&qword_1EB7255E8);
}

id sub_1AD8B0C30(uint64_t a1)
{
  return sub_1AD8B0C44(a1, (SEL *)&selRef_hk_sleepSecondaryColor, &qword_1E9A4AE30);
}

id sub_1AD8B0C44(uint64_t a1, SEL *a2, void *a3)
{
  id result = [self *a2];
  *a3 = result;
  return result;
}

id static UIColor.secondarySleep.getter()
{
  return sub_1AD8B0CAC(qword_1E9A48ED8, (void **)&qword_1E9A4AE30);
}

id sub_1AD8B0CAC(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  return v3;
}

uint64_t sub_1AD8B0CF8(uint64_t a1)
{
  return sub_1AD8B0D74(a1, &qword_1EB725630, (id *)&qword_1EB7255E8, &qword_1EB725608);
}

uint64_t static Color.primarySleep.getter()
{
  return sub_1AD8B1018(&qword_1EB7255E0);
}

uint64_t sub_1AD8B0D48(uint64_t a1)
{
  return sub_1AD8B0D74(a1, qword_1E9A48ED8, (id *)&qword_1E9A4AE30, &qword_1E9A4AE38);
}

uint64_t sub_1AD8B0D74(uint64_t a1, void *a2, id *a3, uint64_t *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t result = MEMORY[0x1B3E6ADC0](*a3);
  *a4 = result;
  return result;
}

uint64_t static Color.secondarySleep.getter()
{
  return sub_1AD8B1018(&qword_1E9A48EE8);
}

uint64_t sub_1AD8B0DE8()
{
  uint64_t v0 = sub_1AD9DEE30();
  MEMORY[0x1F4188790](v0, v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v4 + 104))(v3, *MEMORY[0x1E4F3EB10]);
  uint64_t result = MEMORY[0x1B3E6AEC0](v3, 0.258823529, 0.71372549, 0.921568627, 1.0);
  qword_1E9A4AE40 = result;
  return result;
}

uint64_t static Color.intermediateSleep.getter()
{
  return sub_1AD8B1018(&qword_1E9A48EF0);
}

uint64_t sub_1AD8B0EF0(uint64_t a1)
{
  return sub_1AD8B0FAC(a1, (SEL *)&selRef_tintColor, &qword_1E9A4AE48);
}

uint64_t static Color.tint.getter()
{
  return sub_1AD8B1018(&qword_1E9A48EF8);
}

uint64_t sub_1AD8B0F28(uint64_t a1)
{
  return sub_1AD8B0FAC(a1, (SEL *)&selRef_labelColor, &qword_1E9A4AE50);
}

uint64_t static Color.label.getter()
{
  return sub_1AD8B1018(&qword_1E9A48F00);
}

uint64_t sub_1AD8B0F60(uint64_t a1)
{
  return sub_1AD8B0FAC(a1, (SEL *)&selRef_secondaryLabelColor, &qword_1E9A4AE58);
}

uint64_t static Color.secondaryLabel.getter()
{
  return sub_1AD8B1018(&qword_1E9A48F08);
}

uint64_t sub_1AD8B0F98(uint64_t a1)
{
  return sub_1AD8B0FAC(a1, (SEL *)&selRef_tertiaryLabelColor, &qword_1E9A4AE60);
}

uint64_t sub_1AD8B0FAC(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4 = [self *a2];
  uint64_t result = MEMORY[0x1B3E6ADC0](v4);
  *a3 = result;
  return result;
}

uint64_t static Color.tertiaryLabel.getter()
{
  return sub_1AD8B1018(qword_1E9A48F10);
}

uint64_t sub_1AD8B1018(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_retain();
}

double Color.computeContrastRatio(with:)()
{
  Color.linearRGB.getter();
  double v3 = v2 * 0.0722 + v0 * 0.2126 + v1 * 0.7152;
  Color.linearRGB.getter();
  double v7 = v6 * 0.0722 + v4 * 0.2126 + v5 * 0.7152;
  if (v3 > v7) {
    double v8 = v3;
  }
  else {
    double v8 = v7;
  }
  if (v7 >= v3) {
    double v7 = v3;
  }
  return (v8 + 0.05) / (v7 + 0.05);
}

double Color.relativeLuminance.getter()
{
  Color.linearRGB.getter();
  return v2 * 0.0722 + v0 * 0.2126 + v1 * 0.7152;
}

void Color.linearRGB.getter()
{
  sub_1AD8B139C();
  swift_retain();
  double v0 = (void *)sub_1AD9DFDD0();
  id v1 = objc_msgSend(v0, sel_CGColor);

  uint64_t v2 = sub_1AD9DFAD0();
  if (!v2) {
    goto LABEL_15;
  }
  unint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v3 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v3 < 3)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  double v4 = *(double *)(v2 + 32);
  double v5 = *(double *)(v2 + 40);
  double v6 = *(double *)(v2 + 48);
  swift_bridgeObjectRelease();
  if (v4 <= 0.03928)
  {
    if (v5 <= 0.03928)
    {
LABEL_7:
      if (v6 <= 0.03928) {
        return;
      }
LABEL_11:
      pow((v6 + 0.055) / 1.055, 2.4);
      return;
    }
  }
  else
  {
    pow((v4 + 0.055) / 1.055, 2.4);
    if (v5 <= 0.03928) {
      goto LABEL_7;
    }
  }
  pow((v5 + 0.055) / 1.055, 2.4);
  if (v6 > 0.03928) {
    goto LABEL_11;
  }
}

void Color.rgb.getter()
{
  sub_1AD8B139C();
  swift_retain();
  double v0 = (void *)sub_1AD9DFDD0();
  id v1 = objc_msgSend(v0, sel_CGColor);

  uint64_t v2 = sub_1AD9DFAD0();
  if (!v2) {
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    if (v3 != 1)
    {
      if (v3 >= 3)
      {
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
}

unint64_t sub_1AD8B139C()
{
  unint64_t result = qword_1E9A4B050;
  if (!qword_1E9A4B050)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B050);
  }
  return result;
}

uint64_t dispatch thunk of SleepOnboardingViewControllerDelegate.didDismissOnboarding()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepOnboardingViewControllerDelegate.didCompleteOnboarding(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

Swift::Void __swiftcall UITextView.adjustContentInsetForLineFragmentPadding()()
{
  id v1 = objc_msgSend(v0, sel_textContainer);
  objc_msgSend(v1, sel_lineFragmentPadding);
  double v3 = v2;

  objc_msgSend(v0, sel_setContentInset_, 0.0, -v3, 0.0, -v3);
}

id sub_1AD8B1484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = v3;
  double v6 = &v3[OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item];
  *(_OWORD *)double v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((void *)v6 + 4) = 0;
  uint64_t v7 = OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel;
  double v8 = (void *)*MEMORY[0x1E4FB28C8];
  id v9 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v10 = v4;
  id v11 = v8;
  id v12 = objc_msgSend(v9, sel_init);
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v13 = v12;
  id v14 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v11, 2, 0, 0, 0, 0, 0, 0, 1);
  objc_msgSend(v13, sel_setFont_, v14);

  objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v13, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v13, sel_setLineBreakMode_, 0);
  objc_msgSend(v13, sel_setNumberOfLines_, 0);
  *(void *)&v4[v7] = v13;
  id v15 = (void *)*MEMORY[0x1E4FB2950];
  id v16 = objc_msgSend(self, sel_secondaryLabelColor);
  id v17 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v18 = v15;
  id v19 = v16;
  id v20 = objc_msgSend(v17, sel_init);
  id v21 = v20;
  if (v19) {
    objc_msgSend(v20, sel_setTextColor_, v19);
  }
  uint64_t v22 = OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel;
  id v23 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v18, 0, 0, 0, 0, 0, 0, 0, 1);
  objc_msgSend(v21, sel_setFont_, v23);

  objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v21, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v21, sel_setLineBreakMode_, 0);
  objc_msgSend(v21, sel_setNumberOfLines_, 0);

  *(void *)&v10[v22] = v21;
  if (a3)
  {
    BOOL v24 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    BOOL v24 = 0;
  }
  v29.receiver = v10;
  v29.super_class = (Class)type metadata accessor for AddScheduleTableViewCell();
  id v25 = objc_msgSendSuper2(&v29, sel_initWithStyle_reuseIdentifier_, a1, v24);

  id v26 = v25;
  objc_msgSend(v26, sel_setAccessoryType_, 0);
  objc_msgSend(v26, sel_setSelectionStyle_, 0);
  sub_1AD8B1820();

  return v26;
}

void sub_1AD8B1820()
{
  id v1 = v0;
  sub_1AD870B1C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD9E5930;
  double v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel];
  *(void *)(inited + 32) = v3;
  double v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel];
  *(void *)(inited + 40) = v4;
  unint64_t v16 = inited;
  sub_1AD9DF870();
  id v5 = v3;
  id v6 = v4;
  id v7 = objc_msgSend(v0, sel_contentView);
  UIView.addSubviews(_:useAutoLayout:)((Swift::OpaquePointer)v16, 1);

  id v8 = objc_msgSend(v1, sel_contentView);
  uint64_t v9 = UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(v16, 4.0, 11.0, 16.0, 11.0, 16.0);

  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v1, sel_contentView);
  id v11 = objc_msgSend(v10, sel_heightAnchor);

  id v12 = objc_msgSend(v11, sel_constraintGreaterThanOrEqualToConstant_, 25.0);
  id v13 = v12;
  MEMORY[0x1B3E6B7E0]();
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1AD9DF880();
  }
  sub_1AD9DF8B0();
  sub_1AD9DF870();
  id v14 = self;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
  id v15 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, v15);
}

id sub_1AD8B1A30()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item;
  swift_beginAccess();
  sub_1AD886B10(v2, (uint64_t)v14);
  if (!v15)
  {
    sub_1AD8B1F34((uint64_t)v14, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v18 = 0;
    goto LABEL_8;
  }
  sub_1AD843E70(0, (unint64_t *)&qword_1E9A4A3C0);
  sub_1AD843E70(0, &qword_1E9A4AE88);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    goto LABEL_8;
  }
  if (!*((void *)&v17 + 1))
  {
LABEL_8:
    sub_1AD8B1F34((uint64_t)&v16, &qword_1E9A4AE80, &qword_1E9A4AE88);
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel), sel_setText_, 0);
    return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel), sel_setText_, 0);
  }
  sub_1AD843F30(&v16, (uint64_t)v19);
  double v3 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel);
  uint64_t v4 = v20;
  uint64_t v5 = v21;
  __swift_project_boxed_opaque_existential_1Tm(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (v6)
  {
    id v7 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v7 = 0;
  }
  objc_msgSend(v3, sel_setText_, v7);

  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel);
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  __swift_project_boxed_opaque_existential_1Tm(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  if (v12)
  {
    id v13 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v13 = 0;
  }
  objc_msgSend(v9, sel_setText_, v13);

  return (id)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
}

id sub_1AD8B1C80()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AddScheduleTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AddScheduleTableViewCell()
{
  return self;
}

uint64_t sub_1AD8B1D4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item;
  swift_beginAccess();
  return sub_1AD886B10(v3, a1);
}

uint64_t sub_1AD8B1DA0(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item;
  swift_beginAccess();
  sub_1AD8869F8(a1, v3);
  swift_endAccess();
  sub_1AD8B1A30();
  return sub_1AD8B1F34(a1, (unint64_t *)&qword_1E9A4A3B8, (unint64_t *)&qword_1E9A4A3C0);
}

id (*sub_1AD8B1E28(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1AD8B1E88;
}

id sub_1AD8B1E88(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1AD8B1A30();
  }
  return result;
}

uint64_t sub_1AD8B1EBC()
{
  return sub_1AD9DD310();
}

uint64_t sub_1AD8B1F34(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_1AD8B1F90(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_1AD8B1F90(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1AD843E70(255, a3);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1AD8B1FE8()
{
  uint64_t v1 = v0;
  objc_super v2 = &v0[OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item];
  *(_OWORD *)objc_super v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((void *)v2 + 4) = 0;
  uint64_t v3 = OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel;
  unint64_t v4 = (void *)*MEMORY[0x1E4FB28C8];
  id v5 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v6 = v4;
  id v7 = objc_msgSend(v5, sel_init);
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4A8C0);
  id v8 = v7;
  id v9 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v6, 2, 0, 0, 0, 0, 0, 0, 1);
  objc_msgSend(v8, sel_setFont_, v9);

  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v8, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v8, sel_setLineBreakMode_, 0);
  objc_msgSend(v8, sel_setNumberOfLines_, 0);
  *(void *)&v1[v3] = v8;
  uint64_t v10 = (void *)*MEMORY[0x1E4FB2950];
  id v11 = objc_msgSend(self, sel_secondaryLabelColor);
  id v12 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v13 = v10;
  id v14 = v11;
  id v15 = objc_msgSend(v12, sel_init);
  long long v16 = v15;
  if (v14) {
    objc_msgSend(v15, sel_setTextColor_, v14);
  }
  uint64_t v17 = OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel;
  id v18 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v13, 0, 0, 0, 0, 0, 0, 0, 1);
  objc_msgSend(v16, sel_setFont_, v18);

  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v16, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v16, sel_setLineBreakMode_, 0);
  objc_msgSend(v16, sel_setNumberOfLines_, 0);

  *(void *)&v1[v17] = v16;
  sub_1AD9E0140();
  __break(1u);
}

void sub_1AD8B22A4(void *a1@<X8>)
{
  *a1 = &unk_1F046A0F8;
}

char *sub_1AD8B22B4(char a1)
{
  sub_1AD8B3B18(0, &qword_1E9A4C420, MEMORY[0x1E4F67900], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  id v6 = (char *)&v54 - v5;
  v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message] = a1;
  uint64_t v61 = MEMORY[0x1E4FBC860];
  uint64_t v59 = v1;
  sub_1AD9E00B0();
  id v7 = self;
  uint64_t v8 = 0;
  do
  {
    int v12 = byte_1F0469D20[v8 + 32];
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
    id v14 = objc_msgSend(v7, sel_secondaryLabelColor);
    objc_msgSend(v13, sel_setTextColor_, v14);

    objc_msgSend(v13, sel_setNumberOfLines_, 0);
    objc_msgSend(v13, sel_setLineBreakMode_, 0);
    objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id result = (char *)objc_msgSend(v13, sel_font);
    if (!result) {
      goto LABEL_19;
    }
    long long v16 = result;
    id result = (char *)objc_msgSend(v13, sel_textColor);
    if (!result) {
      goto LABEL_20;
    }
    uint64_t v17 = result;
    if (v12)
    {
      sub_1AD837214(0, (unint64_t *)&unk_1E9A4AEC0);
      id v18 = objc_msgSend(v7, sel_systemOrangeColor);
      uint64_t v19 = sub_1AD9DFD00();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v6, 1, 1, v19);
      sub_1AD8B33D4(v12);
      id v11 = (id)sub_1AD9DFCF0();
    }
    else
    {
      sub_1AD8B33D4(0);
      id v9 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
      uint64_t v10 = (void *)sub_1AD9DF6D0();
      swift_bridgeObjectRelease();
      id v11 = objc_msgSend(v9, sel_initWithString_, v10);
    }
    ++v8;
    objc_msgSend(v13, sel_setAttributedText_, v11);

    sub_1AD9E0080();
    sub_1AD9E00C0();
    sub_1AD9E00D0();
    sub_1AD9E0090();
  }
  while (v8 != 6);
  id v20 = v59;
  *(void *)&v59[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels] = v61;

  uint64_t v21 = (objc_class *)type metadata accessor for SleepScheduleClockCaption();
  v60.receiver = v20;
  v60.super_class = v21;
  uint64_t v22 = (char *)objc_msgSendSuper2(&v60, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1AD8B2D90();
  sub_1AD8B2F44();
  unint64_t v23 = *(void *)&v22[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels];
  if (!(v23 >> 62))
  {
    uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24) {
      goto LABEL_10;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    LODWORD(v47) = 1148846080;
    objc_msgSend(v22, sel_setContentHuggingPriority_forAxis_, 1, v47);
    sub_1AD8B3B18(0, (unint64_t *)&qword_1E9A49250, (uint64_t (*)(uint64_t))sub_1AD841CE0, MEMORY[0x1E4FBBE00]);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_1AD9E3080;
    uint64_t v49 = sub_1AD9DD6D0();
    uint64_t v50 = MEMORY[0x1E4FB1138];
    *(void *)(v48 + 32) = v49;
    *(void *)(v48 + 40) = v50;
    uint64_t v51 = sub_1AD9DD570();
    uint64_t v52 = MEMORY[0x1E4FB0EF0];
    *(void *)(v48 + 48) = v51;
    *(void *)(v48 + 56) = v52;
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1AD841D34();
    uint64_t v53 = v22;
    sub_1AD9DFD90();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    return v53;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1AD9E0190();
  if (!v24) {
    goto LABEL_17;
  }
LABEL_10:
  id result = (char *)self;
  uint64_t v59 = result;
  if (v24 >= 1)
  {
    uint64_t v25 = 0;
    unint64_t v58 = v23 & 0xC000000000000001;
    uint64_t v57 = MEMORY[0x1E4FBC838] + 8;
    long long v56 = xmmword_1AD9E5A40;
    uint64_t v55 = v24;
    do
    {
      if (v58) {
        id v26 = (id)MEMORY[0x1B3E6BFF0](v25, v23);
      }
      else {
        id v26 = *(id *)(v23 + 8 * v25 + 32);
      }
      id v27 = v26;
      ++v25;
      objc_msgSend(v22, sel_addSubview_, v26);
      sub_1AD8B3ACC(0, (unint64_t *)&qword_1EB725350, v57, MEMORY[0x1E4FBBE00]);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = v56;
      id v29 = objc_msgSend(v27, sel_leadingAnchor);
      id v30 = objc_msgSend(v22, sel_leadingAnchor);
      id v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

      *(void *)(v28 + 32) = v31;
      id v32 = objc_msgSend(v27, sel_topAnchor);
      id v33 = objc_msgSend(v22, sel_topAnchor);
      id v34 = objc_msgSend(v32, sel_constraintGreaterThanOrEqualToAnchor_, v33);

      *(void *)(v28 + 40) = v34;
      id v35 = objc_msgSend(v22, sel_trailingAnchor);
      id v36 = objc_msgSend(v27, sel_trailingAnchor);
      id v37 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v36);

      *(void *)(v28 + 48) = v37;
      id v38 = objc_msgSend(v22, sel_bottomAnchor);
      id v39 = objc_msgSend(v27, sel_bottomAnchor);
      id v40 = objc_msgSend(v38, sel_constraintGreaterThanOrEqualToAnchor_, v39);

      *(void *)(v28 + 56) = v40;
      id v41 = objc_msgSend(v22, sel_centerYAnchor);
      id v42 = objc_msgSend(v27, sel_centerYAnchor);
      id v43 = objc_msgSend(v41, sel_constraintEqualToAnchor_, v42);

      *(void *)(v28 + 64) = v43;
      uint64_t v61 = v28;
      sub_1AD9DF870();
      sub_1AD837214(0, (unint64_t *)&qword_1E9A4A090);
      CGRect v44 = (void *)sub_1AD9DF850();
      swift_bridgeObjectRelease();
      objc_msgSend(v59, sel_activateConstraints_, v44);

      LODWORD(v45) = 1148846080;
      objc_msgSend(v27, sel_setContentHuggingPriority_forAxis_, 1, v45);
      LODWORD(v46) = 1132068864;
      objc_msgSend(v27, sel_setContentHuggingPriority_forAxis_, 0, v46);
    }
    while (v55 != v25);
    goto LABEL_17;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void sub_1AD8B2B20(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1B3E6D270](v4);
  if (v5)
  {
    id v6 = (void *)v5;
    sub_1AD8B3BBC(a2);
  }
}

double sub_1AD8B2BF8()
{
  unint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels];
  if (v1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; uint64_t v2 = sub_1AD9E0190())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1B3E6BFF0](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      if (!objc_msgSend(v4, sel_isHidden))
      {
        swift_bridgeObjectRelease_n();
        objc_msgSend(v5, sel_frame);
        CGFloat v9 = v8;
        CGFloat v11 = v10;
        CGFloat v13 = v12;
        CGFloat v15 = v14;

        v20.origin.CGFloat x = v9;
        v20.origin.CGFloat y = v11;
        v20.size.CGFloat width = v13;
        v20.size.CGFloat height = v15;
        double MinY = CGRectGetMinY(v20);
        goto LABEL_12;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  double MinY = 0.0;
LABEL_12:
  id v16 = objc_msgSend(v0, sel_superview);
  objc_msgSend(v0, sel_convertPoint_toView_, v16, 0.0, MinY);
  double v18 = v17;

  return v18;
}

void sub_1AD8B2D90()
{
  unint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1AD9E0190();
    uint64_t v2 = v3;
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v3 = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_10;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_25;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v5 = (id)MEMORY[0x1B3E6BFF0](i, v1);
    }
    else {
      id v5 = *(id *)(v1 + 8 * i + 32);
    }
    uint64_t v6 = v5;
    objc_msgSend(v5, sel_setHidden_, 1);
  }
LABEL_10:
  swift_bridgeObjectRelease();
  int v7 = v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message];
  if (v7 != 6 && qword_1F0469900)
  {
    if (byte_1F0469910 != v7)
    {
      uint64_t v3 = 0;
      while (qword_1F0469900 - 1 != v3)
      {
        int v8 = *((unsigned __int8 *)&unk_1F04698F0 + v3++ + 33);
        if (v8 == v7) {
          goto LABEL_17;
        }
      }
      goto LABEL_21;
    }
    uint64_t v3 = 0;
LABEL_17:
    if ((v1 & 0xC000000000000001) == 0)
    {
      if (v3 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v9 = *(id *)(v1 + 8 * v3 + 32);
      goto LABEL_20;
    }
LABEL_25:
    id v9 = (id)MEMORY[0x1B3E6BFF0](v3, v1);
LABEL_20:
    double v10 = v9;
    objc_msgSend(v9, sel_setHidden_, 0);
  }
LABEL_21:
  objc_msgSend(v0, sel_setNeedsLayout);
  sub_1AD8B3104();
}

void sub_1AD8B2F44()
{
  id v9 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2950]);
  id v1 = objc_msgSend(v0, sel_traitCollection);
  id v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);

  LOBYTE(v1) = sub_1AD9DFD50();
  if (v1) {
    uint64_t v3 = 4;
  }
  else {
    uint64_t v3 = 1;
  }
  unint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1AD9E0190();
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v6 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x1B3E6BFF0](v6, v4);
    }
    else {
      id v7 = *(id *)(v4 + 8 * v6 + 32);
    }
    int v8 = v7;
    ++v6;
    objc_msgSend(v7, sel_setFont_, v9);
    objc_msgSend(v8, sel_setTextAlignment_, v3);
  }
  while (v5 != v6);
LABEL_13:
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_invalidateIntrinsicContentSize);
  objc_msgSend(v0, sel_setNeedsLayout);
}

void sub_1AD8B3104()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels);
  if (v1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; uint64_t v2 = sub_1AD9E0190())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1B3E6BFF0](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      if (!objc_msgSend(v4, sel_isHidden))
      {
        swift_bridgeObjectRelease_n();
        uint64_t v7 = MEMORY[0x1E4FBB1A0];
        sub_1AD8B3ACC(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
        uint64_t v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_1AD9E53A0;
        *(void *)(v8 + 32) = sub_1AD9DF710();
        *(void *)(v8 + 40) = v9;
        *(void *)(v8 + 48) = 0x7065656C53;
        *(void *)(v8 + 56) = 0xE500000000000000;
        strcpy((char *)(v8 + 64), "ScheduleEditor");
        *(unsigned char *)(v8 + 79) = -18;
        sub_1AD86C2F8((uint64_t)&unk_1F04698C0);
        sub_1AD8B3ACC(0, &qword_1EB725B60, v7, MEMORY[0x1E4FBB320]);
        sub_1AD8B3A74((unint64_t *)&qword_1EB725610, &qword_1EB725B60, v7);
        uint64_t v10 = sub_1AD9DF690();
        uint64_t v12 = v11;
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        uint64_t v15 = v10;
        swift_bridgeObjectRetain();
        sub_1AD9DF790();
        id v13 = v5;
        swift_bridgeObjectRelease();
        double v14 = (void *)sub_1AD9DF6D0();
        swift_bridgeObjectRelease();
        objc_msgSend(v13, sel_setAccessibilityIdentifier_, v14, v15, v12);

        return;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1AD8B33D4(char a1)
{
  switch(a1)
  {
    case 1:
      if (qword_1EB724E38 != -1) {
        goto LABEL_14;
      }
      break;
    case 2:
      if (qword_1EB724E38 != -1) {
        goto LABEL_14;
      }
      break;
    case 3:
      if (qword_1EB724E38 != -1) {
        goto LABEL_14;
      }
      break;
    case 4:
      if (qword_1EB724E38 != -1) {
        goto LABEL_14;
      }
      break;
    case 5:
      if (qword_1EB724E38 != -1) {
        goto LABEL_14;
      }
      break;
    default:
      if (qword_1EB724E38 != -1) {
LABEL_14:
      }
        swift_once();
      break;
  }
  id v1 = (id)qword_1EB727930;
  uint64_t v2 = sub_1AD9DCA70();

  return v2;
}

id SleepScheduleClockCaption.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleClockCaption.init(frame:)()
{
}

id SleepScheduleClockCaption.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleClockCaption();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SleepScheduleClockCaption()
{
  return self;
}

uint64_t method lookup function for SleepScheduleClockCaption(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepScheduleClockCaption);
}

uint64_t getEnumTagSinglePayload for SleepScheduleClockCaption.Message(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SleepScheduleClockCaption.Message(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *id result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD8B39A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepScheduleClockCaption.Message()
{
  return &type metadata for SleepScheduleClockCaption.Message;
}

uint64_t sub_1AD8B39D8()
{
  return sub_1AD8B3A74(&qword_1E9A4AEA8, &qword_1E9A4AEB0, (uint64_t)&type metadata for SleepScheduleClockCaption.Message);
}

unint64_t sub_1AD8B3A20()
{
  unint64_t result = qword_1E9A4AEB8;
  if (!qword_1E9A4AEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4AEB8);
  }
  return result;
}

uint64_t sub_1AD8B3A74(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8B3ACC(255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8B3ACC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD8B3B18(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD8B3B7C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD8B3BB4(uint64_t a1, void *a2)
{
  sub_1AD8B2B20(a1, a2, v2);
}

void sub_1AD8B3BBC(void *a1)
{
  id v3 = objc_msgSend(v1, sel_traitCollection);
  id v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

  if (a1)
  {
    id v5 = objc_msgSend(a1, sel_preferredContentSizeCategory);
    uint64_t v6 = sub_1AD9DF710();
    uint64_t v8 = v7;
    if (v6 == sub_1AD9DF710() && v8 == v9)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v11 = sub_1AD9E02D0();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0) {
        goto LABEL_11;
      }
    }
    id v12 = objc_msgSend(v1, sel_traitCollection);
    id v13 = objc_msgSend(v12, sel_legibilityWeight);

    if (v13 == objc_msgSend(a1, sel_legibilityWeight)) {
      return;
    }
    goto LABEL_11;
  }

LABEL_11:
  sub_1AD8B2F44();
}

void sub_1AD8B3D30(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  id v5 = &selRef_animateWithDuration_animations_;
  if ((objc_msgSend(a1, sel_isFiring) & 1) != 0 || objc_msgSend(a1, sel_isSnoozed))
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_1AD9DD550();
    __swift_project_value_buffer(v6, (uint64_t)qword_1E9A4D288);
    id v7 = a1;
    uint64_t v8 = sub_1AD9DD530();
    os_log_type_t v9 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      char v11 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      aBlock[0] = v31;
      *(_DWORD *)uint64_t v10 = 136446466;
      uint64_t v12 = sub_1AD9E04F0();
      uint64_t v34 = sub_1AD838978(v12, v13, aBlock);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2114;
      uint64_t v34 = (uint64_t)v7;
      double v14 = v2;
      id v15 = v7;
      sub_1AD9DFEA0();
      *char v11 = v7;

      uint64_t v2 = v14;
      id v5 = &selRef_animateWithDuration_animations_;
      _os_log_impl(&dword_1AD834000, v8, v9, "[%{public}s] dismissing active alarm: %{public}@", (uint8_t *)v10, 0x16u);
      sub_1AD8B473C();
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v11, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v31, -1, -1);
      MEMORY[0x1B3E6D1A0](v10, -1, -1);
    }
    else
    {
    }
    id v16 = objc_msgSend(v7, sel_alarmIDString);
    if (!v16)
    {
      sub_1AD9DF710();
      id v16 = (id)sub_1AD9DF6D0();
      swift_bridgeObjectRelease();
    }
    if ([v7 v5[147]])
    {
      uint64_t v17 = 6;
    }
    else if (objc_msgSend(v7, sel_isSleepAlarm))
    {
      uint64_t v17 = 5;
    }
    else
    {
      uint64_t v17 = 0;
    }
    double v18 = objc_msgSend(v2, sel_dismissAlarmWithIdentifier_dismissAction_, v16, v17);

    if (v18)
    {
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v7;
      *(void *)(v19 + 24) = ObjectType;
      aBlock[4] = (uint64_t)sub_1AD8B480C;
      aBlock[5] = v19;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1AD86F738;
      aBlock[3] = (uint64_t)&block_descriptor_7;
      CGRect v20 = _Block_copy(aBlock);
      id v21 = v7;
      swift_release();
      id v22 = [v18 addCompletionBlock:v20];
      _Block_release(v20);

LABEL_21:
    }
  }
  else
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_1AD9DD550();
    __swift_project_value_buffer(v23, (uint64_t)qword_1E9A4D288);
    id v32 = a1;
    double v18 = sub_1AD9DD530();
    os_log_type_t v24 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v18, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      id v26 = (void *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      aBlock[0] = v27;
      *(_DWORD *)uint64_t v25 = 136446466;
      uint64_t v28 = sub_1AD9E04F0();
      uint64_t v34 = sub_1AD838978(v28, v29, aBlock);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2114;
      uint64_t v34 = (uint64_t)v32;
      id v30 = v32;
      sub_1AD9DFEA0();
      *id v26 = v32;

      _os_log_impl(&dword_1AD834000, v18, v24, "[%{public}s] attempting to dismiss inactive alarm: %{public}@", (uint8_t *)v25, 0x16u);
      sub_1AD8B473C();
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v26, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v27, -1, -1);
      MEMORY[0x1B3E6D1A0](v25, -1, -1);
      goto LABEL_21;
    }
  }
}

void sub_1AD8B42F4(int a1, id a2, void *a3)
{
  if (a2)
  {
    id v4 = a2;
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1AD9DD550();
    __swift_project_value_buffer(v5, (uint64_t)qword_1E9A4D288);
    id v6 = a2;
    id v7 = a2;
    osos_log_t log = sub_1AD9DD530();
    os_log_type_t v8 = sub_1AD9DFBC0();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v27 = v10;
      *(_DWORD *)uint64_t v9 = 136446466;
      uint64_t v11 = sub_1AD9E04F0();
      sub_1AD838978(v11, v12, &v27);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2082;
      id v13 = a2;
      sub_1AD869CF0();
      uint64_t v14 = sub_1AD9DF730();
      sub_1AD838978(v14, v15, &v27);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, oslog, v8, "[%{public}s] failed to dismiss active alarm with error: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v10, -1, -1);
      MEMORY[0x1B3E6D1A0](v9, -1, -1);

      return;
    }
  }
  else
  {
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_1AD9DD550();
    __swift_project_value_buffer(v17, (uint64_t)qword_1E9A4D288);
    osos_log_t log = a3;
    double v18 = sub_1AD9DD530();
    os_log_type_t v19 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      id v21 = (void *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v27 = v22;
      *(_DWORD *)uint64_t v20 = 136446466;
      uint64_t v23 = sub_1AD9E04F0();
      sub_1AD838978(v23, v24, &v27);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2114;
      uint64_t v25 = oslog;
      sub_1AD9DFEA0();
      *id v21 = oslog;

      _os_log_impl(&dword_1AD834000, v18, v19, "[%{public}s] dismissed active alarm: %{public}@", (uint8_t *)v20, 0x16u);
      sub_1AD8B473C();
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v21, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v22, -1, -1);
      MEMORY[0x1B3E6D1A0](v20, -1, -1);

      return;
    }
  }
}

void sub_1AD8B473C()
{
  if (!qword_1EB724F40)
  {
    sub_1AD8B4794();
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB724F40);
    }
  }
}

unint64_t sub_1AD8B4794()
{
  unint64_t result = qword_1EB724F30;
  if (!qword_1EB724F30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB724F30);
  }
  return result;
}

uint64_t sub_1AD8B47D4()
{
  return swift_deallocObject();
}

void sub_1AD8B480C(int a1, void *a2)
{
  sub_1AD8B42F4(a1, a2, *(void **)(v2 + 16));
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

id sub_1AD8B4854()
{
  uint64_t v1 = v0;
  sub_1AD8BEC74(0, (unint64_t *)&qword_1EB724D00, MEMORY[0x1E4FBCC28], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v100 = (char *)v90 - v4;
  uint64_t v103 = sub_1AD9DFD30();
  uint64_t v101 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103, v5);
  uint64_t v99 = (char *)v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD841744();
  uint64_t v104 = *(void *)(v7 - 8);
  uint64_t v105 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v102 = (char *)v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8BEE80();
  uint64_t v97 = *(v10 - 1);
  id v98 = v10;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v96 = (char *)v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8BEF60();
  uint64_t v94 = *(v13 - 1);
  id v95 = (void (*)(void, void, void, void))v13;
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v93 = (char *)v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(v0, sel_tableView);
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v17 = result;
  uint64_t v18 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model;
  uint64_t v19 = *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model];
  uint64_t v92 = (uint64_t (*)(uint64_t))&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider];
  sub_1AD841030((uint64_t)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider], (uint64_t)v108);
  uint64_t v20 = v109;
  uint64_t v21 = v110;
  __swift_project_boxed_opaque_existential_1Tm(v108, v109);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 24);
  swift_retain();
  uint64_t v23 = v22(v20, v21);
  id v24 = objc_msgSend(v1, sel_traitCollection);
  id v25 = objc_msgSend(v24, sel_preferredContentSizeCategory);

  LOBYTE(v24) = sub_1AD9DFD50();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v1;
  objc_allocWithZone((Class)type metadata accessor for QuickScheduleOverrideViewController.DataSource());
  uint64_t v27 = v1;
  uint64_t v28 = sub_1AD8BC4E0(v17, v19, v23, v24 & 1, (uint64_t)sub_1AD8BF094, v26, v27);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v108);
  unint64_t v29 = *(void **)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource];
  *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource] = v28;

  id v30 = (objc_class *)type metadata accessor for QuickScheduleOverrideViewController();
  v107.receiver = v27;
  v107.super_class = v30;
  objc_msgSendSuper2(&v107, sel_viewDidLoad);
  id result = objc_msgSend(v27, sel_tableView);
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v31 = result;
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4B050);
  id v32 = static UIColor.invertedGroupedTableViewBackground.getter();
  objc_msgSend(v31, sel_setBackgroundColor_, v32);

  id result = objc_msgSend(v27, sel_tableView);
  if (!result)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  id v33 = result;
  type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v35 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v33, sel_registerClass_forHeaderFooterViewReuseIdentifier_, ObjCClassFromMetadata, v35);

  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v36 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  id v37 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_setTitle_, v37);

  id v38 = objc_msgSend(v27, sel_navigationItem);
  id v39 = objc_msgSend(v27, sel_title);
  objc_msgSend(v38, sel_setTitle_, v39);

  id v40 = objc_msgSend(v27, sel_navigationItem);
  id v41 = objc_msgSend(v27, sel_title);
  objc_msgSend(v40, sel_setBackButtonTitle_, v41);

  id v42 = objc_msgSend(v27, sel_navigationController);
  if (v42)
  {
    id v43 = v42;
    id v44 = objc_msgSend(v42, sel_navigationBar);

    id v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1818]), sel_init);
    objc_msgSend(v44, sel_setShadowImage_, v45);
  }
  if ((_UIBarsApplyChromelessEverywhere() & 1) == 0)
  {
    id v46 = objc_msgSend(v27, sel_navigationController);
    if (v46)
    {
      double v47 = v46;
      id v48 = objc_msgSend(v46, sel_navigationBar);

      objc_msgSend(v48, sel_setTranslucent_, 0);
    }
  }
  id v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB19D8]), sel_init);
  id v50 = static UIColor.invertedGroupedTableViewBackground.getter();
  objc_msgSend(v49, sel_setBackgroundColor_, v50);

  id v51 = objc_msgSend(v27, sel_navigationController);
  if (v51)
  {
    uint64_t v52 = v51;
    id v53 = objc_msgSend(v51, sel_navigationBar);

    objc_msgSend(v53, sel_setStandardAppearance_, v49);
  }
  id v91 = v49;
  id v54 = objc_msgSend(v27, sel_navigationItem);
  id v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14A8]), sel_initWithBarButtonSystemItem_target_action_, 1, v27, sel_cancelButtonPressed);
  objc_msgSend(v54, sel_setLeftBarButtonItem_, v55);

  id v56 = objc_msgSend(v27, sel_navigationItem);
  id v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14A8]), sel_initWithBarButtonSystemItem_target_action_, 0, v27, sel_saveButtonPressed);
  objc_msgSend(v56, sel_setRightBarButtonItem_, v57);

  id v58 = objc_msgSend(v27, sel_navigationItem);
  id v59 = objc_msgSend(v58, sel_rightBarButtonItem);

  if (v59)
  {
    swift_retain();
    char v60 = ScheduleOccurrenceEditModel.isValid.getter();
    swift_release();
    objc_msgSend(v59, sel_setEnabled_, v60 & 1);
  }
  v108[0] = *(id *)(*(void *)&v1[v18] + 16);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8418F4();
  sub_1AD8BF1F4((unint64_t *)&qword_1E9A491A0, (void (*)(uint64_t))sub_1AD8418F4);
  swift_retain();
  uint64_t v61 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_alarmConfigurationObserver] = v61;
  swift_release();
  v108[0] = *(id *)(*(void *)&v1[v18] + 24);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8419BC();
  sub_1AD8BF1F4(&qword_1E9A491B8, (void (*)(uint64_t))sub_1AD8419BC);
  swift_retain();
  uint64_t v62 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelEditObserver] = v62;
  swift_release();
  uint64_t v63 = v92;
  sub_1AD841030((uint64_t)v92, (uint64_t)v108);
  uint64_t v64 = v109;
  uint64_t v65 = v110;
  __swift_project_boxed_opaque_existential_1Tm(v108, v109);
  uint64_t v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 32))(v64, v65);
  sub_1AD837C9C(0, &qword_1EB725070, &qword_1EB7250C8, (uint64_t)&qword_1EB7250C0, 0x1E4FA5520);
  sub_1AD8BEFE4();
  uint64_t v66 = v93;
  sub_1AD9DDC30();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v108);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8BF1F4(&qword_1E9A4B070, (void (*)(uint64_t))sub_1AD8BEF60);
  uint64_t v67 = v95;
  uint64_t v68 = sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, void (*)(void, void, void, void)))(v94 + 8))(v66, v67);
  *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver] = v68;
  swift_release();
  sub_1AD841030((uint64_t)v63, (uint64_t)v108);
  uint64_t v69 = v109;
  uint64_t v70 = v110;
  __swift_project_boxed_opaque_existential_1Tm(v108, v109);
  uint64_t v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 24))(v69, v70);
  sub_1AD837C9C(0, (unint64_t *)&qword_1EB725060, (unint64_t *)&qword_1EB7250A0, (uint64_t)&qword_1EB725090, 0x1E4FA5540);
  sub_1AD841D94();
  double v71 = v96;
  sub_1AD9DDC30();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v108);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8BF1F4(&qword_1E9A4B078, (void (*)(uint64_t))sub_1AD8BEE80);
  id v72 = v98;
  uint64_t v73 = sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, id))(v97 + 8))(v71, v72);
  *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver] = v73;
  swift_release();
  v108[0] = *(id *)(*(void *)&v1[v18] + 64);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8387F8();
  sub_1AD8BF1F4((unint64_t *)&qword_1E9A4B080, (void (*)(uint64_t))sub_1AD8387F8);
  swift_retain();
  uint64_t v74 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepDurationGoalObserver] = v74;
  swift_release();
  v108[0] = *(id *)(*(void *)&v1[v18] + 32);
  sub_1AD837C9C(0, &qword_1E9A491F8, (unint64_t *)&qword_1E9A49200, (uint64_t)&qword_1E9A49208, 0x1E4FA5558);
  sub_1AD841B18();
  v108[0] = (id)sub_1AD9DDBF0();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD841B98();
  sub_1AD8BF1F4(&qword_1E9A49220, (void (*)(uint64_t))sub_1AD841B98);
  uint64_t v75 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_validScheduleRangeObserver] = v75;
  swift_release();
  id v98 = self;
  id v76 = objc_msgSend(v98, sel_defaultCenter);
  uint64_t v77 = v99;
  sub_1AD9DFD40();

  v90[0] = sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  v108[0] = (id)sub_1AD9DFCA0();
  uint64_t v96 = (char *)sub_1AD9DFC90();
  uint64_t v78 = *((void *)v96 - 1);
  id v95 = *(void (**)(void, void, void, void))(v78 + 56);
  uint64_t v97 = v78 + 56;
  uint64_t v79 = (uint64_t)v100;
  v95(v100, 1, 1, v96);
  uint64_t v94 = sub_1AD8BF1F4(&qword_1EB725B80, MEMORY[0x1E4F27FC8]);
  uint64_t v93 = (char *)sub_1AD841810();
  uint64_t v80 = v102;
  uint64_t v81 = v103;
  sub_1AD9DDC20();
  uint64_t v92 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FBCC28];
  sub_1AD8BF17C(v79, (unint64_t *)&qword_1EB724D00, MEMORY[0x1E4FBCC28]);

  uint64_t v101 = *(void *)(v101 + 8);
  ((void (*)(char *, uint64_t))v101)(v77, v81);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v90[1] = sub_1AD8BF1F4((unint64_t *)&unk_1EB724CF0, (void (*)(uint64_t))sub_1AD841744);
  uint64_t v82 = v105;
  uint64_t v83 = sub_1AD9DDC40();
  swift_release();
  uint64_t v84 = *(void (**)(char *, uint64_t))(v104 + 8);
  v84(v80, v82);
  *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_significantTimeChangeObserver] = v83;
  swift_release();
  id v85 = objc_msgSend(v98, sel_defaultCenter);
  sub_1AD9DFD40();

  v108[0] = (id)sub_1AD9DFCA0();
  v95(v79, 1, 1, v96);
  sub_1AD9DDC20();
  sub_1AD8BF17C(v79, (unint64_t *)&qword_1EB724D00, v92);

  ((void (*)(char *, uint64_t))v101)(v77, v81);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v86 = sub_1AD9DDC40();
  swift_release();
  v84(v80, v82);
  *(void *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_willResignActiveObserver] = v86;
  swift_release();
  sub_1AD8BEC74(0, (unint64_t *)&qword_1E9A49250, (uint64_t (*)(uint64_t))sub_1AD841CE0, MEMORY[0x1E4FBBE00]);
  uint64_t v87 = swift_allocObject();
  *(_OWORD *)(v87 + 16) = xmmword_1AD9E3070;
  uint64_t v88 = sub_1AD9DD6D0();
  uint64_t v89 = MEMORY[0x1E4FB1138];
  *(void *)(v87 + 32) = v88;
  *(void *)(v87 + 40) = v89;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD841D34();
  sub_1AD9DFC70();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return (id)swift_release();
}

void sub_1AD8B5B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_tableView);
    if (!v5) {
      goto LABEL_18;
    }
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v5, sel_visibleCells);

    uint64_t v8 = sub_1AD837214(0, (unint64_t *)&unk_1E9A49700);
    unint64_t v9 = sub_1AD9DF860();

    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_1AD9E0190();
      swift_bridgeObjectRelease();
      if (v10) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v10)
      {
LABEL_5:
        if (v10 >= 1)
        {
          uint64_t v11 = 0;
          unint64_t v12 = v9 & 0xC000000000000001;
          id v13 = (unint64_t *)&qword_1E9A4AFD0;
          unint64_t v23 = v9;
          uint64_t v21 = v10;
          unint64_t v22 = v9 & 0xC000000000000001;
          do
          {
            if (v12) {
              id v14 = (id)MEMORY[0x1B3E6BFF0](v11, v9);
            }
            else {
              id v14 = *(id *)(v9 + 8 * v11 + 32);
            }
            id v26 = v14;
            sub_1AD843E70(0, v13);
            if (swift_dynamicCast())
            {
              sub_1AD843F30(v24, (uint64_t)v27);
              uint64_t v16 = v28;
              uint64_t v15 = v29;
              __swift_project_boxed_opaque_existential_1Tm(v27, v28);
              uint64_t v17 = v13;
              uint64_t v18 = v8;
              uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 8);
              uint64_t v20 = swift_retain();
              v19(v20, v16, v15);
              uint64_t v10 = v21;
              unint64_t v12 = v22;
              uint64_t v8 = v18;
              id v13 = v17;
              unint64_t v9 = v23;
              swift_release();
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
            }
            else
            {
              uint64_t v25 = 0;
              memset(v24, 0, sizeof(v24));
              sub_1AD8BD91C((uint64_t)v24);
            }
            ++v11;
          }
          while (v10 != v11);
          goto LABEL_15;
        }
        __break(1u);
LABEL_18:
        __break(1u);
        return;
      }
    }
LABEL_15:

    swift_bridgeObjectRelease();
  }
}

void sub_1AD8B5DE8()
{
  v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelHasChanged] = 1;
  if (*(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver])
  {
    swift_retain();
    sub_1AD9DDA90();
    swift_release();
  }
  if (*(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver])
  {
    swift_retain();
    sub_1AD9DDA90();
    swift_release();
  }
  objc_msgSend(v0, sel_setModalInPresentation_, 1);
  id v1 = objc_msgSend(v0, sel_navigationItem);
  id v3 = objc_msgSend(v1, sel_rightBarButtonItem);

  if (v3)
  {
    swift_retain();
    char v2 = ScheduleOccurrenceEditModel.isValid.getter();
    swift_release();
    objc_msgSend(v3, sel_setEnabled_, v2 & 1);
  }
}

void sub_1AD8B5F18(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1B3E6D270](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    a3();
  }
}

uint64_t sub_1AD8B5F74()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725018);
  id v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v13[0] = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    unint64_t v12 = (void *)sub_1AD838978(v7, v8, v13);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Next occurrence did change while editing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  sub_1AD841030(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider, (uint64_t)v13);
  uint64_t v9 = v14;
  uint64_t v10 = v15;
  __swift_project_boxed_opaque_existential_1Tm(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
  sub_1AD9DDB00();
  swift_release();
  sub_1AD8B7B1C(v12);

  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
}

void sub_1AD8B6174(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    sub_1AD8B61D0(v2);
  }
}

void sub_1AD8B61D0(void *a1)
{
  swift_getObjectType();
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725018);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v9 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v9);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Sleep schedule did change while editing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  sub_1AD8B7B1C(a1);
}

void sub_1AD8B6374(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    os_log_type_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_navigationItem);
    id v6 = objc_msgSend(v5, sel_rightBarButtonItem);

    if (v6)
    {
      swift_retain();
      char v7 = ScheduleOccurrenceEditModel.isValid.getter();
      swift_release();
      objc_msgSend(v6, sel_setEnabled_, v7 & 1);

      os_log_type_t v4 = v6;
    }
  }
}

void sub_1AD8B6444(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    os_log_type_t v4 = v3;
    objc_msgSend(v3, sel_handleSignificantTimeChange);
  }
}

void sub_1AD8B64A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1B3E6D270](v2);
  if (v3)
  {
    os_log_type_t v4 = (void *)v3;
    sub_1AD8B67B0();
  }
}

void sub_1AD8B64F4(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1AD86C080(0, (unint64_t *)&qword_1E9A4AFF0, MEMORY[0x1E4FB0FF8]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v18 - v9;
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x1B3E6D270](a3 + 16);
  if (v11)
  {
    unint64_t v12 = (void *)v11;
    id v13 = *(void **)(v11 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
    uint64_t v14 = v13;

    if (v13)
    {
      id v15 = objc_msgSend(a1, sel_traitCollection);
      id v16 = objc_msgSend(v15, sel_preferredContentSizeCategory);

      LOBYTE(v15) = sub_1AD9DFD50();
      v14[qword_1E9A4AFA0] = v15 & 1;
      if ((v14[qword_1E9A4AF68] & 1) == 0)
      {
        v14[qword_1E9A4AF68] = 1;
        sub_1AD8BC214();
        *(void *)(swift_allocObject() + 16) = v14;
        uint64_t v17 = v14;
        sub_1AD9DD6A0();
        swift_release();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1AD8B67B0()
{
  swift_getObjectType();
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1AD9DD550();
  __swift_project_value_buffer(v0, (uint64_t)qword_1EB725958);
  uint64_t v1 = sub_1AD9DD530();
  os_log_type_t v2 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136446210;
    uint64_t v5 = sub_1AD9E04F0();
    sub_1AD838978(v5, v6, &v7);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v1, v2, "[%{public}s] App will resign active", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v4, -1, -1);
    MEMORY[0x1B3E6D1A0](v3, -1, -1);
  }

  sub_1AD98B9F4();
}

void sub_1AD8B6AAC(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    unint64_t v6 = *(void **)(*(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model)
                  + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    id v7 = a1;
    swift_retain();
    id v8 = objc_msgSend(v6, sel_alarmConfiguration);
    objc_msgSend(v8, sel_mutableCopy);

    sub_1AD9DFF20();
    swift_unknownObjectRelease();
    sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
    swift_dynamicCast();
    id v9 = v24[0];
    id v10 = objc_msgSend(v24[0], sel_isEnabled);
LABEL_5:
    id v14 = v10;

    objc_msgSend(v5, sel_setOn_animated_, v14, 1);
    swift_release();
    objc_msgSend(v5, sel_setDelegate_, v2);
LABEL_6:

    return;
  }
  type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  uint64_t v11 = swift_dynamicCastClass();
  if (v11)
  {
    uint64_t v5 = (void *)v11;
    unint64_t v12 = *(void **)(*(void *)(v2 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model)
                   + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    id v7 = a1;
    swift_retain();
    id v13 = objc_msgSend(v12, sel_alarmConfiguration);
    objc_msgSend(v13, sel_mutableCopy);

    sub_1AD9DFF20();
    swift_unknownObjectRelease();
    sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
    swift_dynamicCast();
    id v9 = v24[0];
    id v10 = objc_msgSend(v24[0], sel_allowsSnooze);
    goto LABEL_5;
  }
  type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = v15;
    id v7 = a1;
    uint64_t v17 = swift_retain();
    sub_1AD921068(v17);
    swift_release();
    uint64_t v18 = v16 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
    swift_beginAccess();
    *(void *)(v18 + 8) = &off_1F046CD38;
    swift_unknownObjectWeakAssign();
    goto LABEL_6;
  }
  id v28 = a1;
  sub_1AD837214(0, (unint64_t *)&unk_1E9A49700);
  sub_1AD843E70(0, (unint64_t *)&qword_1E9A4AFD0);
  id v19 = a1;
  if (swift_dynamicCast())
  {
    sub_1AD843F30(&v27, (uint64_t)v24);
    uint64_t v20 = v25;
    uint64_t v21 = v26;
    __swift_project_boxed_opaque_existential_1Tm(v24, v25);
    unint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 8);
    uint64_t v23 = swift_retain();
    v22(v23, v20, v21);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  }
}

void sub_1AD8B6E0C()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = *(void **)(*(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model]
                + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_alarmConfiguration);
  objc_msgSend(v3, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  swift_release();
  uint64_t v4 = self;
  id v5 = objc_msgSend(v15, sel_toneIdentifier);
  id v6 = objc_msgSend(v15, sel_vibrationIdentifier);
  id v7 = objc_msgSend(v4, sel_hksh_alarmPickerWithToneIdentifier_vibrationIdentifier_styleProvider_, v5, v6, *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_tonePickerStyleProvider]);

  objc_msgSend(v7, sel_setDelegate_, v1);
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EB725018);
  id v9 = sub_1AD9DD530();
  os_log_type_t v10 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v16[0] = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v13 = sub_1AD9E04F0();
    sub_1AD838978(v13, v14, v16);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] Presenting tone picker", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
    MEMORY[0x1B3E6D1A0](v11, -1, -1);
  }

  objc_msgSend(v1, sel_showViewController_sender_, v7, 0);
}

id sub_1AD8B72F4(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1AD9DCF10();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  os_log_type_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource;
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (v12)
  {
    sub_1AD8BF128(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1AD9E3080;
    *(void *)(v13 + 32) = a2;
    *(void *)(v13 + 40) = 0;
    id v14 = v12;
    MEMORY[0x1B3E68E60](v13);
    sub_1AD9DD680();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v16 = v31;
    uint64_t v15 = v32;
    if (v32
      && (v31 == 0xD00000000000002DLL && v32 == 0x80000001AD9EF4E0
       || (sub_1AD9E02D0() & 1) != 0
       || v16 == 0xD00000000000003ELL && v15 == 0x80000001AD9EF540
       || (sub_1AD9E02D0() & 1) != 0
       || v16 == 0xD000000000000029 && v15 == 0x80000001AD9EF600
       || (sub_1AD9E02D0() & 1) != 0))
    {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  type metadata accessor for EditScheduleLinkTableViewCell();
  uint64_t v31 = sub_1AD8BECD8(0);
  sub_1AD8BECF8(0, &qword_1E9A4B008, (void (*)(uint64_t))sub_1AD8BECD8);
  uint64_t v17 = sub_1AD9DF730();
  if (v15)
  {
    if (v17 == v16 && v15 == v18)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      swift_bridgeObjectRelease();
      return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D30]), sel_init);
    }
    char v20 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v20) {
      return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D30]), sel_init);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = *(void **)(v3 + v11);
  if (!v21) {
    return 0;
  }
  id v22 = v21;
  sub_1AD8BDE78(a2);
  uint64_t v24 = v23;

  if (!v24) {
    return 0;
  }
  uint64_t v25 = (void *)sub_1AD9DF6D0();
  id v26 = objc_msgSend(a1, sel_dequeueReusableHeaderFooterViewWithIdentifier_, v25);

  if (!v26)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  uint64_t v19 = swift_dynamicCastClass();
  if (v19)
  {
    id v27 = v26;
    id v28 = sub_1AD993D30();
    uint64_t v29 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_setText_, v29);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return (id)v19;
}

id sub_1AD8B79C4(uint64_t a1)
{
  return sub_1AD8BD818(a1, type metadata accessor for QuickScheduleOverrideViewController);
}

uint64_t type metadata accessor for QuickScheduleOverrideViewController()
{
  return self;
}

void sub_1AD8B7B1C(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = sub_1AD9DCC70();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelHasChanged))
  {
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_1AD9DD550();
    __swift_project_value_buffer(v9, (uint64_t)qword_1EB725018);
    uint64_t v32 = sub_1AD9DD530();
    os_log_type_t v10 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v32, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v34[0] = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v13 = sub_1AD9E04F0();
      uint64_t v33 = sub_1AD838978(v13, v14, v34);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v32, v10, "[%{public}s] Ignoring occurrence reset since the user has already edited the model.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v12, -1, -1);
      MEMORY[0x1B3E6D1A0](v11, -1, -1);
    }
    else
    {
      uint64_t v16 = v32;
    }
  }
  else
  {
    if (a1)
    {
      id v15 = a1;
    }
    else
    {
      if (qword_1EB725030 != -1) {
        swift_once();
      }
      uint64_t v17 = sub_1AD9DD550();
      __swift_project_value_buffer(v17, (uint64_t)qword_1EB725018);
      uint64_t v18 = sub_1AD9DD530();
      os_log_type_t v19 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v18, v19))
      {
        char v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        v34[0] = (uint64_t)v32;
        *(_DWORD *)char v20 = 136446210;
        uint64_t v31 = v20 + 4;
        uint64_t v21 = sub_1AD9E04F0();
        uint64_t v33 = sub_1AD838978(v21, v22, v34);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v18, v19, "[%{public}s] Sleep schedule is nil - creating empty schedule.", v20, 0xCu);
        uint64_t v23 = v32;
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v23, -1, -1);
        MEMORY[0x1B3E6D1A0](v20, -1, -1);
      }

      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5540]), sel_init);
    }
    id v24 = a1;
    sub_1AD9DCC60();
    sub_1AD841030(v2 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider, (uint64_t)v34);
    uint64_t v25 = v35;
    uint64_t v26 = v36;
    __swift_project_boxed_opaque_existential_1Tm(v34, v35);
    id v27 = SleepScheduleProviding.sleepScheduleModel.getter(v25, v26);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
    id v28 = (void *)sub_1AD9DCBB0();
    uint64_t v29 = (void *)sub_1AD9DCDA0();
    id v30 = objc_msgSend(v27, sel_generateOverrideOccurrenceForCurrentDate_gregorianCalendar_schedule_, v28, v29, v15);

    swift_retain();
    ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(v30, 0);

    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

void sub_1AD8B7FDC()
{
  swift_getObjectType();
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1AD9DD550();
  __swift_project_value_buffer(v0, (uint64_t)qword_1EB725018);
  uint64_t v1 = sub_1AD9DD530();
  os_log_type_t v2 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v25[0] = v4;
    *(_DWORD *)uint64_t v3 = 136446210;
    uint64_t v5 = sub_1AD9E04F0();
    *(void *)&v22[0] = sub_1AD838978(v5, v6, v25);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v1, v2, "[%{public}s] Significant time changed", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v4, -1, -1);
    MEMORY[0x1B3E6D1A0](v3, -1, -1);
  }

  id v7 = objc_msgSend(v21, sel_tableView);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_visibleCells);

  sub_1AD837214(0, (unint64_t *)&unk_1E9A49700);
  unint64_t v10 = sub_1AD9DF860();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_8;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v11) {
    goto LABEL_18;
  }
LABEL_8:
  if (v11 >= 1)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v10 & 0xC000000000000001;
    unint64_t v20 = v10 & 0xC000000000000001;
    do
    {
      if (v13) {
        id v14 = (id)MEMORY[0x1B3E6BFF0](v12, v10);
      }
      else {
        id v14 = *(id *)(v10 + 8 * v12 + 32);
      }
      id v24 = v14;
      sub_1AD843E70(0, (unint64_t *)&qword_1E9A4AFD0);
      if (swift_dynamicCast())
      {
        sub_1AD843F30(v22, (uint64_t)v25);
        uint64_t v16 = v26;
        uint64_t v15 = v27;
        __swift_project_boxed_opaque_existential_1Tm(v25, v26);
        unint64_t v17 = v10;
        uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 8);
        uint64_t v19 = swift_retain();
        v18(v19, v16, v15);
        unint64_t v10 = v17;
        unint64_t v13 = v20;
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      }
      else
      {
        uint64_t v23 = 0;
        memset(v22, 0, sizeof(v22));
        sub_1AD8BD91C((uint64_t)v22);
      }
      ++v12;
    }
    while (v11 != v12);
    goto LABEL_18;
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t sub_1AD8B8394()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_1AD9DCE40();
  uint64_t v56 = *(void *)(v3 - 8);
  uint64_t v57 = v3;
  MEMORY[0x1F4188790](v3, v4);
  unint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1AD9DD550();
  __swift_project_value_buffer(v7, (uint64_t)qword_1EB725018);
  uint64_t v8 = sub_1AD9DD530();
  os_log_type_t v9 = sub_1AD9DFBE0();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v58 = ObjectType;
  if (v10)
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v62[0] = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v13 = sub_1AD9E04F0();
    v60[0] = sub_1AD838978(v13, v14, v62);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v8, v9, "[%{public}s] Save button pressed", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
    MEMORY[0x1B3E6D1A0](v11, -1, -1);
  }

  uint64_t v15 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model;
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model);
  if ((*(unsigned char *)(v16 + 48) & 1) == 0)
  {
    unint64_t v17 = *(void **)(v16 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    swift_beginAccess();
    if (objc_msgSend(v17, sel_isEqual_, *(void *)(v16 + 40)))
    {
      uint64_t v18 = sub_1AD9DD530();
      os_log_type_t v19 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        v60[0] = v21;
        *(_DWORD *)unint64_t v20 = 136446210;
        uint64_t v22 = sub_1AD9E04F0();
        v59[0] = sub_1AD838978(v22, v23, v60);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v18, v19, "[%{public}s] save button pressed but no changes were made", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v21, -1, -1);
        MEMORY[0x1B3E6D1A0](v20, -1, -1);
      }

      uint64_t v24 = v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
      uint64_t result = MEMORY[0x1B3E6D270](v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate);
      if (result)
      {
        uint64_t v26 = (void *)result;
        if (*(void *)(v1
                       + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver))
        {
          swift_retain();
          sub_1AD9DDA90();
          swift_release();
        }
        if (*(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver))
        {
          swift_retain();
          sub_1AD9DDA90();
          swift_release();
        }
        objc_msgSend(v26, sel_cancelWithAnimated_, 1);
LABEL_35:
        *(void *)(v24 + 8) = 0;
        swift_unknownObjectWeakAssign();
        return swift_unknownObjectRelease();
      }
      return result;
    }
    uint64_t v16 = *(void *)(v1 + v15);
  }
  if (*(unsigned char *)(v16 + 49) == 1)
  {
    swift_retain();
    sub_1AD9DDB00();
    uint64_t v27 = (void *)v59[0];
    if (v59[0])
    {
      swift_beginAccess();
      id v28 = objc_msgSend(v27, sel_overridenOccurrenceForOverrideOccurrence_, *(void *)(v16 + 40));
      swift_release();

      if (v28)
      {
        uint64_t v29 = sub_1AD9DD530();
        os_log_type_t v30 = sub_1AD9DFBE0();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          v59[0] = v32;
          *(_DWORD *)uint64_t v31 = 136446210;
          id v55 = v31 + 4;
          uint64_t v33 = sub_1AD9E04F0();
          uint64_t v61 = sub_1AD838978(v33, v34, v59);
          sub_1AD9DFEA0();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1AD834000, v29, v30, "[%{public}s] overriding an existing occurrence, asking if we should save", v31, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3E6D1A0](v32, -1, -1);
          MEMORY[0x1B3E6D1A0](v31, -1, -1);
        }

        uint64_t v35 = *(void *)(v1 + v15);
        uint64_t v37 = v56;
        uint64_t v36 = v57;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v6, v35 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar, v57);
        id v38 = *(void **)(v35 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
        swift_beginAccess();
        uint64_t v39 = *(void *)(v35 + 40);
        id v40 = v38;
        swift_retain();
        id v41 = objc_msgSend(v40, sel_changesFromOccurrence_, v39);
        uint64_t v42 = objc_msgSend(v41, sel_hasChangeForPropertyIdentifier_, *MEMORY[0x1E4FA5328]);
        if (objc_msgSend(v41, sel_hasChangeForPropertyIdentifier_, *MEMORY[0x1E4FA5330])) {
          v42 |= 2uLL;
        }
        unsigned int v43 = objc_msgSend(v41, sel_hasChangeForPropertyIdentifier_, *MEMORY[0x1E4FA5320]);
        swift_release();

        uint64_t v44 = v42 | 4;
        if (!v43) {
          uint64_t v44 = v42;
        }
        uint64_t v61 = v44;
        uint64_t v45 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v46 = swift_allocObject();
        uint64_t v47 = v58;
        *(void *)(v46 + 16) = v45;
        *(void *)(v46 + 24) = v47;
        swift_retain();
        sub_1AD8B8FB0((uint64_t)v6, v40, v28, &v61, (uint64_t)sub_1AD8BEDA8, v46);

        swift_release();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v36);
        return swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
  id v48 = sub_1AD9DD530();
  os_log_type_t v49 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v48, v49))
  {
    id v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    v59[0] = v51;
    *(_DWORD *)id v50 = 136446210;
    uint64_t v52 = sub_1AD9E04F0();
    uint64_t v61 = sub_1AD838978(v52, v53, v59);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v48, v49, "[%{public}s] not overriding an existing occurrence, saving", v50, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v51, -1, -1);
    MEMORY[0x1B3E6D1A0](v50, -1, -1);
  }

  uint64_t v24 = v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
  uint64_t result = MEMORY[0x1B3E6D270](v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate);
  if (result)
  {
    if (*(void *)(v1
                   + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver))
    {
      swift_retain();
      sub_1AD9DDA90();
      swift_release();
    }
    if (*(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver))
    {
      swift_retain();
      sub_1AD9DDA90();
      swift_release();
    }
    swift_retain();
    id v54 = ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()();
    swift_release();
    sub_1AD9BFDAC(v54, 0);

    goto LABEL_35;
  }
  return result;
}

void sub_1AD8B8C40(int a1, uint64_t a2)
{
  uint64_t v4 = sub_1AD9DD550();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 16;
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x1B3E6D270](v9);
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v12 = __swift_project_value_buffer(v4, (uint64_t)qword_1EB725018);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v12, v4);

    uint64_t v13 = sub_1AD9DD530();
    os_log_type_t v14 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v25[0] = v16;
      *(_DWORD *)uint64_t v15 = 136446466;
      HIDWORD(v23) = a1;
      uint64_t v17 = sub_1AD9E04F0();
      uint64_t v24 = sub_1AD838978(v17, v18, v25);
      LOBYTE(a1) = BYTE4(v23);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 1026;
      LODWORD(v24) = a1 & 1;
      sub_1AD9DFEA0();
      _os_log_impl(&dword_1AD834000, v13, v14, "[%{public}s] saving (deleteOverride:%{BOOL,public}d)", (uint8_t *)v15, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v16, -1, -1);
      MEMORY[0x1B3E6D1A0](v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  swift_beginAccess();
  uint64_t v19 = MEMORY[0x1B3E6D270](v9);
  if (v19)
  {
    unint64_t v20 = (char *)v19;
    uint64_t v21 = v19 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
    if (MEMORY[0x1B3E6D270](v19 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate))
    {
      if (*(void *)&v20[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver])
      {
        swift_retain();
        sub_1AD9DDA90();
        swift_release();
      }
      if (*(void *)&v20[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver])
      {
        swift_retain();
        sub_1AD9DDA90();
        swift_release();
      }
      swift_retain();
      id v22 = ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()();
      swift_release();
      sub_1AD9BFDAC(v22, a1 & 1);

      *(void *)(v21 + 8) = 0;
      swift_unknownObjectWeakAssign();

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_1AD8B8FB0(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *a4;
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_1AD9DD550();
  __swift_project_value_buffer(v12, (uint64_t)qword_1EB725018);
  uint64_t v13 = sub_1AD9DD530();
  os_log_type_t v14 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v30 = v11;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v35 = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v17 = sub_1AD9E04F0();
    sub_1AD838978(v17, v18, &v35);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v13, v14, "[%{public}s] Presenting occurrence change alert", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v16, -1, -1);
    uint64_t v19 = v15;
    uint64_t v11 = v30;
    MEMORY[0x1B3E6D1A0](v19, -1, -1);
  }

  sub_1AD837214(0, (unint64_t *)&unk_1E9A4B010);
  id v29 = objc_msgSend(a3, sel_weekdays);
  uint64_t v35 = v11;
  uint64_t v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v20;
  v21[3] = a5;
  v21[4] = a6;
  v21[5] = ObjectType;
  uint64_t v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = v22;
  uint64_t v23[3] = a2;
  uint64_t v23[4] = a3;
  v23[5] = a5;
  v23[6] = a6;
  v23[7] = ObjectType;
  uint64_t v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = ObjectType;
  swift_retain_n();
  swift_retain();
  swift_retain();
  id v26 = a2;
  id v27 = a3;
  swift_retain();
  id v28 = static UIAlertController.createOccurrenceChangeAlert(calendar:occurrence:weekdays:changes:changeNextHandler:changeAllHandler:cancelHandler:)(a1, v26, (uint64_t)v29, &v35, (uint64_t)sub_1AD8BEDF0, (uint64_t)v21, (uint64_t)sub_1AD8BEE4C, (uint64_t)v23, (uint64_t)sub_1AD8BF2C8, v25);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  objc_msgSend(v7, sel_presentViewController_animated_completion_, v28, 1, 0);
}

uint64_t sub_1AD8B9398(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7 = sub_1AD9DD550();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x1B3E6D270](a2 + 16);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v14 = __swift_project_value_buffer(v7, (uint64_t)qword_1EB725018);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v14, v7);

    uint64_t v15 = sub_1AD9DD530();
    os_log_type_t v16 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v24 = a3;
      uint64_t v17 = swift_slowAlloc();
      v23[1] = a4;
      unint64_t v18 = (uint8_t *)v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v26 = v19;
      *(_DWORD *)unint64_t v18 = 136446210;
      uint64_t v20 = sub_1AD9E04F0();
      uint64_t v25 = sub_1AD838978(v20, v21, &v26);
      a3 = v24;
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v15, v16, "[%{public}s] change next wake up only", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v19, -1, -1);
      MEMORY[0x1B3E6D1A0](v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return a3(0);
}

void sub_1AD8B9620(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(BOOL), uint64_t a6)
{
  uint64_t v11 = sub_1AD9DD550();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a2 + 16;
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x1B3E6D270](a2 + 16);
  if (v17)
  {
    unint64_t v18 = (void *)v17;
    uint64_t v36 = a3;
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v19 = __swift_project_value_buffer(v11, (uint64_t)qword_1EB725018);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v19, v11);

    uint64_t v20 = sub_1AD9DD530();
    os_log_type_t v21 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      unint64_t v34 = a5;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v35 = a6;
      uint64_t v25 = v24;
      v38[0] = v24;
      uint64_t v33 = a4;
      *(_DWORD *)uint64_t v23 = 136446210;
      uint64_t v32 = v23 + 4;
      uint64_t v26 = sub_1AD9E04F0();
      uint64_t v37 = sub_1AD838978(v26, v27, v38);
      a4 = v33;
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v20, v21, "[%{public}s] change next and future wake ups", v23, 0xCu);
      swift_arrayDestroy();
      uint64_t v28 = v25;
      a6 = v35;
      MEMORY[0x1B3E6D1A0](v28, -1, -1);
      id v29 = v23;
      a5 = v34;
      MEMORY[0x1B3E6D1A0](v29, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    a3 = v36;
  }
  swift_beginAccess();
  uint64_t v30 = MEMORY[0x1B3E6D270](v16);
  if (v30)
  {
    uint64_t v31 = (void *)v30;
    sub_1AD8B98EC(a3, a4, a5, a6);
  }
}

void sub_1AD8B98EC(void *a1, uint64_t a2, void (*a3)(BOOL), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = sub_1AD9DC990();
  Class isa = v11[-1].isa;
  id v98 = v11;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v96 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8BEC74(0, &qword_1EB724D70, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = (char *)&v84 - v16;
  uint64_t v18 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v22 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model;
  if (*(unsigned char *)(*(void *)&v5[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model] + 48))
  {
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_1AD9DD550();
    __swift_project_value_buffer(v24, (uint64_t)qword_1EB725018);
    id v98 = sub_1AD9DD530();
    os_log_type_t v25 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v98, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v100 = v27;
      *(_DWORD *)uint64_t v26 = 136446210;
      uint64_t v28 = sub_1AD9E04F0();
      uint64_t v99 = sub_1AD838978(v28, v29, &v100);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v98, v25, "[%{public}s] isAdding unexpectedly true", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v27, -1, -1);
      MEMORY[0x1B3E6D1A0](v26, -1, -1);
    }
    else
    {
      uint64_t v57 = v98;
    }
    return;
  }
  uint64_t v94 = a1;
  uint64_t v95 = v20;
  uint64_t v88 = v17;
  uint64_t v93 = a4;
  sub_1AD841030((uint64_t)&v5[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider], (uint64_t)&v100);
  uint64_t v30 = v102;
  uint64_t v31 = v103;
  __swift_project_boxed_opaque_existential_1Tm(&v100, v102);
  (*(void (**)(uint64_t, uint64_t))(v31 + 24))(v30, v31);
  sub_1AD9DDB00();
  swift_release();
  uint64_t v32 = (void *)v99;
  if (v99)
  {
    uint64_t v87 = a3;
    uint64_t v91 = ObjectType;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v100);
    id v33 = objc_msgSend(v94, sel_convertToScheduledOccurrenceOnSameDaysAsOccurrence_, a2);
    id v92 = v32;
    id v34 = objc_msgSend(v32, sel_weekdaysWithOccurrences);
    uint64_t v35 = *(void *)&v5[v23];
    uint64_t v36 = *(void *)(v35 + 64);
    uint64_t v37 = *(void *)(v35 + 72);
    char v38 = *(unsigned char *)(v35 + 80);
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
    uint64_t v86 = v95 + 16;
    id v85 = v39;
    v39(v22, v35 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar, v18);
    type metadata accessor for ScheduleOccurrenceEditModel();
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v40 = sub_1AD8945FC(v33, 0, 0, (uint64_t)v34, v36, v37, v38, (uint64_t)v22);
    id v90 = v33;

    swift_release();
    swift_release();
    uint64_t v89 = v40;
    if (ScheduleOccurrenceEditModel.isValid.getter())
    {
      if (qword_1EB725030 != -1) {
        swift_once();
      }
      uint64_t v41 = sub_1AD9DD550();
      __swift_project_value_buffer(v41, (uint64_t)qword_1EB725018);
      uint64_t v42 = sub_1AD9DD530();
      os_log_type_t v43 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        uint64_t v100 = v45;
        *(_DWORD *)uint64_t v44 = 136446210;
        uint64_t v94 = v44 + 4;
        uint64_t v46 = sub_1AD9E04F0();
        uint64_t v99 = sub_1AD838978(v46, v47, &v100);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v42, v43, "[%{public}s] change is valid, updating the model and saving", v44, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v45, -1, -1);
        MEMORY[0x1B3E6D1A0](v44, -1, -1);
      }

      id v48 = v92;
      id v49 = objc_msgSend(v92, sel_overrideOccurrence);
      if (v49)
      {
        id v50 = v49;
        v85(v22, *(void *)&v5[v23] + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar, v18);
        id v51 = objc_msgSend(v50, sel_wakeUpComponents);
        uint64_t v52 = v96;
        sub_1AD9DC8C0();

        uint64_t v53 = (uint64_t)v88;
        sub_1AD9DCDC0();
        (*((void (**)(char *, NSObject *))isa + 1))(v52, v98);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v22, v18);
        uint64_t v54 = sub_1AD9DCC70();
        uint64_t v55 = *(void *)(v54 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54) != 1)
        {
          sub_1AD9DCBF0();
          double v82 = v81;

          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
          BOOL v56 = v82 > 0.0;
          goto LABEL_32;
        }

        sub_1AD8BF17C(v53, &qword_1EB724D70, MEMORY[0x1E4F27928]);
      }
      BOOL v56 = 0;
LABEL_32:
      id v83 = v90;
      *(void *)&v5[v23] = v89;
      swift_retain();
      swift_release();
      v87(v56);

      swift_release();
      return;
    }
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v65 = sub_1AD9DD550();
    __swift_project_value_buffer(v65, (uint64_t)qword_1EB725018);
    uint64_t v66 = sub_1AD9DD530();
    os_log_type_t v67 = sub_1AD9DFBE0();
    BOOL v68 = os_log_type_enabled(v66, v67);
    id v69 = v92;
    if (v68)
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      uint64_t v100 = v71;
      *(_DWORD *)uint64_t v70 = 136446210;
      uint64_t v72 = sub_1AD9E04F0();
      uint64_t v99 = sub_1AD838978(v72, v73, &v100);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v66, v67, "[%{public}s] change is invalid, not saving", v70, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v71, -1, -1);
      MEMORY[0x1B3E6D1A0](v70, -1, -1);
    }

    sub_1AD893F90((uint64_t)&v100);
    if (v101 != 1)
    {
      uint64_t v74 = v100;
      sub_1AD837214(0, (unint64_t *)&unk_1E9A4B010);
      uint64_t v100 = v74;
      uint64_t v75 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v76 = swift_allocObject();
      uint64_t v77 = v91;
      *(void *)(v76 + 16) = v75;
      *(void *)(v76 + 24) = v77;
      uint64_t v78 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v79 = swift_allocObject();
      *(void *)(v79 + 16) = v78;
      *(void *)(v79 + 24) = v77;
      swift_retain();
      swift_retain();
      id v80 = sub_1AD8C9DC8(&v100, v94, (uint64_t)sub_1AD8BEE5C, v76, (uint64_t)sub_1AD8BEE64, v79);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      objc_msgSend(v5, sel_presentViewController_animated_completion_, v80, 1, 0);
    }
    swift_release();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v100);
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v58 = sub_1AD9DD550();
    __swift_project_value_buffer(v58, (uint64_t)qword_1EB725018);
    id v59 = sub_1AD9DD530();
    os_log_type_t v60 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v100 = v62;
      *(_DWORD *)uint64_t v61 = 136446210;
      uint64_t v63 = sub_1AD9E04F0();
      uint64_t v99 = sub_1AD838978(v63, v64, &v100);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v59, v60, "[%{public}s] no current sleep schedule", v61, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v62, -1, -1);
      MEMORY[0x1B3E6D1A0](v61, -1, -1);
    }
  }
}

void sub_1AD8BA4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1AD9DD550();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 16;
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x1B3E6D270](v8);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v11 = __swift_project_value_buffer(v3, (uint64_t)qword_1EB725018);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v11, v3);

    uint64_t v12 = sub_1AD9DD530();
    os_log_type_t v13 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      v22[0] = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      v21[0] = v14 + 4;
      uint64_t v16 = sub_1AD9E04F0();
      v21[1] = sub_1AD838978(v16, v17, v22);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v12, v13, "[%{public}s] edit in health", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v15, -1, -1);
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  swift_beginAccess();
  uint64_t v18 = MEMORY[0x1B3E6D270](v8);
  if (v18)
  {
    uint64_t v19 = (char *)v18;
    uint64_t v20 = v18 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
    if (MEMORY[0x1B3E6D270](v18 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate))
    {
      if (*(void *)&v19[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver])
      {
        swift_retain();
        sub_1AD9DDA90();
        swift_release();
      }
      if (*(void *)&v19[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver])
      {
        swift_retain();
        sub_1AD9DDA90();
        swift_release();
      }
      sub_1AD9BFD98();
      *(void *)(v20 + 8) = 0;
      swift_unknownObjectWeakAssign();

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t sub_1AD8BA7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1AD9DD550();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](a2 + 16);
  if (result)
  {
    uint64_t v9 = (void *)result;
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v10 = __swift_project_value_buffer(v3, (uint64_t)qword_1EB725018);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v10, v3);

    uint64_t v11 = sub_1AD9DD530();
    os_log_type_t v12 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v18 = v14;
      *(_DWORD *)os_log_type_t v13 = 136446210;
      uint64_t v15 = sub_1AD9E04F0();
      v17[1] = sub_1AD838978(v15, v16, &v18);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v11, v12, "[%{public}s] cancel", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
      MEMORY[0x1B3E6D1A0](v13, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

id sub_1AD8BAAD0(id a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver))
  {
    swift_retain();
    sub_1AD9DDA90();
    swift_release();
  }
  if (*(void *)(a3 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver))
  {
    swift_retain();
    sub_1AD9DDA90();
    swift_release();
  }
  return objc_msgSend(a1, sel_cancelWithAnimated_, 1);
}

void sub_1AD8BAB64(uint64_t a1)
{
  uint64_t v35 = a1;
  sub_1AD8BEC74(0, (unint64_t *)&qword_1E9A49298, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v34 - v3;
  uint64_t v5 = sub_1AD9DCF10();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource;
  os_log_type_t v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v37 = (void (**)(char *, uint64_t))(v12 + 8);
  char v38 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v14 = &unk_1F046A000;
  uint64_t v15 = &unk_1F046A2B0;
  uint64_t v36 = v4;
  do
  {
    char v16 = v9;
    if (v10 >= v14[88])
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
    unint64_t v17 = *(void **)&v39[v11];
    if (!v17) {
      goto LABEL_17;
    }
    uint64_t v18 = v15[2 * v10 + 5];
    uint64_t v40 = v15[2 * v10 + 4];
    uint64_t v41 = v18;
    swift_bridgeObjectRetain();
    id v19 = v17;
    sub_1AD9DD6B0();
    swift_bridgeObjectRelease();

    if ((*v13)(v4, 1, v5) == 1)
    {
      sub_1AD8BF17C((uint64_t)v4, (unint64_t *)&qword_1E9A49298, MEMORY[0x1E4F27DE8]);
    }
    else
    {
      uint64_t v20 = v8;
      uint64_t v21 = v15;
      uint64_t v22 = v14;
      uint64_t v23 = v11;
      uint64_t v24 = v4;
      uint64_t v25 = v5;
      (*v38)(v20, v24, v5);
      id v26 = objc_msgSend(v39, sel_tableView);
      if (!v26) {
        goto LABEL_18;
      }
      uint64_t v27 = v26;
      uint64_t v28 = v20;
      unint64_t v29 = (void *)sub_1AD9DCED0();
      id v30 = objc_msgSend(v27, sel_cellForRowAtIndexPath_, v29);

      uint64_t v11 = v23;
      uint64_t v14 = v22;
      uint64_t v15 = v21;
      if (v30)
      {
        type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
        if (swift_dynamicCastClass()) {
          sub_1AD921864(v35);
        }
      }
      uint64_t v8 = v28;
      uint64_t v31 = v28;
      uint64_t v5 = v25;
      (*v37)(v31, v25);
      uint64_t v4 = v36;
    }
    char v9 = 1;
    unint64_t v10 = 1;
  }
  while ((v16 & 1) == 0);
  swift_arrayDestroy();
  id v32 = objc_msgSend(v39, sel_navigationItem);
  id v33 = objc_msgSend(v32, sel_rightBarButtonItem);

  if (v33)
  {
    objc_msgSend(v33, sel_setEnabled_, 0);
  }
}

uint64_t sub_1AD8BAF3C(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DC990();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = (long long *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  uint64_t v12 = *((void *)v11 + 4);
  char v13 = *((unsigned char *)v11 + 40);
  char v14 = *((unsigned char *)v11 + 41);
  char v15 = *((unsigned char *)v11 + 42);
  long long v16 = v11[1];
  long long v26 = *v11;
  long long v27 = v16;
  uint64_t v28 = v12;
  char v29 = v13;
  char v30 = v14;
  char v31 = v15;
  uint64_t v17 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  double v18 = *(double *)(v17 + 144);
  swift_retain();
  sub_1AD94B060(v18);
  uint64_t v19 = *((void *)v11 + 4);
  char v20 = *((unsigned char *)v11 + 40);
  char v21 = *((unsigned char *)v11 + 41);
  char v22 = *((unsigned char *)v11 + 42);
  long long v23 = v11[1];
  long long v26 = *v11;
  long long v27 = v23;
  uint64_t v28 = v19;
  char v29 = v20;
  char v30 = v21;
  char v31 = v22;
  sub_1AD94B2E4(*(double *)(v17 + 144));
  ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)();
  swift_release();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
  v24(v7, v2);
  return ((uint64_t (*)(char *, uint64_t))v24)(v10, v2);
}

uint64_t sub_1AD8BB180(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DC990();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *(unsigned char *)(a1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component);
  swift_retain();
  sub_1AD91F808(v6);
  if (v7)
  {
    if (qword_1E9A48E78 != -1) {
      swift_once();
    }
    double v8 = *(double *)&qword_1E9A4A808;
    if (qword_1E9A48E80 != -1) {
      swift_once();
    }
    double v9 = *(double *)&qword_1E9A4A810;
    if (qword_1E9A48E70 != -1) {
      swift_once();
    }
    ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(v6, 1, v8, v9, *(double *)&qword_1E9A4A800);
  }
  else
  {
    if (qword_1E9A48E78 != -1) {
      swift_once();
    }
    double v11 = *(double *)&qword_1E9A4A808;
    if (qword_1E9A48E80 != -1) {
      swift_once();
    }
    double v12 = *(double *)&qword_1E9A4A810;
    if (qword_1E9A48E70 != -1) {
      swift_once();
    }
    char v10 = ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)((uint64_t)v6, 1, v11, v12, *(double *)&qword_1E9A4A800);
  }
  char v13 = v10;
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v13 & 1;
}

id sub_1AD8BB410(void *a1)
{
  uint64_t v2 = v1;
  id v44 = v2;
  swift_getObjectType();
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  double v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_1AD9DD550();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EB725018);
  char v10 = a1;
  double v11 = sub_1AD9DD530();
  os_log_type_t v12 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    v48[0] = v42;
    *(_DWORD *)uint64_t v13 = 136446722;
    uint64_t v14 = sub_1AD9E04F0();
    *(void *)&v45[0] = sub_1AD838978(v14, v15, v48);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    uint64_t v43 = v5;
    uint64_t v16 = v4;
    *(_WORD *)(v13 + 12) = 2080;
    LOBYTE(v45[0]) = v10[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component];
    uint64_t v17 = sub_1AD9DF730();
    *(void *)&v45[0] = sub_1AD838978(v17, v18, v48);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 22) = 2080;
    sub_1AD91F808(v8);
    sub_1AD8BF1F4((unint64_t *)&unk_1E9A492A0, MEMORY[0x1E4F26F90]);
    uint64_t v19 = sub_1AD9E0280();
    unint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v16);
    *(void *)&v45[0] = sub_1AD838978(v19, v21, v48);
    sub_1AD9DFEA0();

    uint64_t v4 = v16;
    uint64_t v5 = v43;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v11, v12, "[%{public}s] AX %s changed to %s", (uint8_t *)v13, 0x20u);
    uint64_t v22 = v42;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v22, -1, -1);
    MEMORY[0x1B3E6D1A0](v13, -1, -1);
  }
  else
  {
  }
  char v23 = v10[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component];
  swift_retain();
  sub_1AD91F808(v8);
  if ((v23 & 1) == 0)
  {
    if (qword_1E9A48E78 != -1) {
      swift_once();
    }
    double v26 = *(double *)&qword_1E9A4A808;
    if (qword_1E9A48E80 != -1) {
      swift_once();
    }
    double v27 = *(double *)&qword_1E9A4A810;
    if (qword_1E9A48E70 != -1) {
      swift_once();
    }
    ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)((uint64_t)v8, 0, v26, v27, *(double *)&qword_1E9A4A800);
    goto LABEL_20;
  }
  if (qword_1E9A48E78 != -1) {
    goto LABEL_35;
  }
  while (1)
  {
    double v24 = *(double *)&qword_1E9A4A808;
    if (qword_1E9A48E80 != -1) {
      swift_once();
    }
    double v25 = *(double *)&qword_1E9A4A810;
    if (qword_1E9A48E70 != -1) {
      swift_once();
    }
    ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(v8, 0, v24, v25, *(double *)&qword_1E9A4A800);
LABEL_20:
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    id result = objc_msgSend(v44, sel_tableView);
    if (!result) {
      break;
    }
    char v29 = result;
    id v30 = objc_msgSend(result, sel_visibleCells);

    uint64_t v5 = sub_1AD837214(0, (unint64_t *)&unk_1E9A49700);
    unint64_t v31 = sub_1AD9DF860();

    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_1AD9E0190();
      swift_bridgeObjectRelease();
      if (!v32) {
        return (id)swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v32) {
        return (id)swift_bridgeObjectRelease();
      }
    }
    if (v32 >= 1)
    {
      uint64_t v33 = 0;
      uint64_t v43 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model;
      unint64_t v34 = v31 & 0xC000000000000001;
      uint64_t v41 = v5;
      uint64_t v42 = v31 & 0xC000000000000001;
      do
      {
        if (v34) {
          id v35 = (id)MEMORY[0x1B3E6BFF0](v33, v31);
        }
        else {
          id v35 = *(id *)(v31 + 8 * v33 + 32);
        }
        id v47 = v35;
        sub_1AD843E70(0, (unint64_t *)&qword_1E9A4AFD0);
        if (swift_dynamicCast())
        {
          sub_1AD843F30(v45, (uint64_t)v48);
          uint64_t v37 = v49;
          uint64_t v36 = v50;
          __swift_project_boxed_opaque_existential_1Tm(v48, v49);
          unint64_t v38 = v31;
          uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 8);
          uint64_t v40 = swift_retain();
          v39(v40, v37, v36);
          unint64_t v31 = v38;
          unint64_t v34 = v42;
          swift_release();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
        }
        else
        {
          uint64_t v46 = 0;
          memset(v45, 0, sizeof(v45));
          sub_1AD8BD91C((uint64_t)v45);
        }
        ++v33;
      }
      while (v32 != v33);
      return (id)swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_35:
    swift_once();
  }
  __break(1u);
  return result;
}

void sub_1AD8BBB38(void *a1)
{
  swift_getObjectType();
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725018);
  id v3 = a1;
  uint64_t v4 = sub_1AD9DD530();
  os_log_type_t v5 = sub_1AD9DFBB0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136446466;
    uint64_t v8 = sub_1AD9E04F0();
    uint64_t v13 = sub_1AD838978(v8, v9, &v14);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    objc_msgSend(v3, sel_value, v13, v14);
    uint64_t v10 = sub_1AD9DF9A0();
    sub_1AD838978(v10, v11, &v14);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v4, v5, "[%{public}s] Volume changed to %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
  }
  else
  {
  }
  swift_retain();
  objc_msgSend(v3, sel_value);
  ScheduleOccurrenceEditModel.alarmVolume.setter(v12);
  swift_release();
  sub_1AD98B5F8();
}

void sub_1AD8BBDE4(uint64_t a1, char a2)
{
  if (a1)
  {
    type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
    if (swift_dynamicCastClass())
    {
      swift_retain();
      ScheduleOccurrenceEditModel.alarmEnabled.setter(a2 & 1);
      swift_release();
      sub_1AD98B9F4();
    }
    else
    {
      type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
      if (swift_dynamicCastClass())
      {
        swift_retain();
        ScheduleOccurrenceEditModel.allowsSnooze.setter(a2 & 1);
        swift_release();
      }
    }
  }
}

uint64_t sub_1AD8BC050(void *a1, uint64_t a2, void *a3, uint64_t a4, char *a5, void (*a6)(uint64_t, uint64_t))
{
  if (a4)
  {
    uint64_t v10 = sub_1AD9DF710();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  id v13 = a3;
  id v14 = a1;
  sub_1AD8BE7B4(v10, v12, a5, a6);

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for QuickScheduleOverrideViewController.DataSource()
{
  uint64_t result = qword_1E9A4AFB8;
  if (!qword_1E9A4AFB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD8BC138()
{
  uint64_t result = sub_1AD9DCE40();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_1AD8BC214()
{
  sub_1AD9DD650();
  sub_1AD86C080(0, (unint64_t *)&qword_1E9A4AFF0, MEMORY[0x1E4FB0FF8]);
  sub_1AD9DD610();
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v2 = result;
    unsigned __int8 v3 = objc_msgSend(result, sel_healthAppHidden);

    if ((v3 & 1) == 0)
    {
      sub_1AD8BF128(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1AD9E3070;
      type metadata accessor for EditScheduleLinkTableViewCell();
      sub_1AD8BECD8(0);
      sub_1AD8BECF8(0, &qword_1E9A4B008, (void (*)(uint64_t))sub_1AD8BECD8);
      *(void *)(v4 + 32) = sub_1AD9DF730();
      *(void *)(v4 + 40) = v5;
      sub_1AD9DD610();
      swift_bridgeObjectRelease();
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1AD9E3070;
      *(void *)(v6 + 32) = sub_1AD9DF730();
      *(void *)(v6 + 40) = v7;
      sub_1AD9DD600();
      swift_bridgeObjectRelease();
    }
    sub_1AD9DD610();
    sub_1AD9DD600();
    id result = (id)sub_1AD9DD600();
    if (*(unsigned char *)(v0 + qword_1E9A4AF90) == 1)
    {
      sub_1AD9DD610();
      return (id)sub_1AD9DD600();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1AD8BC4E0(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v52 = a7;
  id v53 = a1;
  sub_1AD86C080(0, (unint64_t *)&qword_1E9A4AFF0, MEMORY[0x1E4FB0FF8]);
  uint64_t v58 = v13;
  uint64_t v56 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v55 = (char *)&v52 - v15;
  *(void *)&v7[qword_1E9A4AF58] = 0;
  *(void *)&v7[qword_1E9A4AF60] = 0;
  v7[qword_1E9A4AF68] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (uint64_t *)&v7[qword_1E9A4AF98];
  *uint64_t v16 = 0;
  v16[1] = 0;
  uint64_t v17 = *(void **)(a2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  unint64_t v18 = v7;
  id v19 = objc_msgSend(v17, sel_alarmConfiguration);
  objc_msgSend(v19, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A492B0);
  swift_dynamicCast();
  id v20 = v59;
  LOBYTE(v17) = objc_msgSend(v59, sel_isEnabled);

  v18[qword_1E9A4AF90] = (_BYTE)v17;
  uint64_t v54 = a3;
  *(void *)&v18[qword_1E9A4AF78] = a3;
  v18[qword_1E9A4AF80] = *(unsigned char *)(a2 + 80);
  uint64_t v21 = a2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar;
  uint64_t v22 = &v18[qword_1E9A4AF88];
  uint64_t v23 = sub_1AD9DCE40();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v22, v21, v23);
  v18[qword_1E9A4AFA0] = a4;
  uint64_t v24 = *v16;
  *uint64_t v16 = a5;
  v16[1] = a6;
  uint64_t v57 = a6;
  swift_retain();
  swift_retain();
  sub_1AD8BEC64(v24);
  double v25 = v52;
  swift_unknownObjectWeakAssign();

  id v26 = v53;
  id v27 = (id)sub_1AD9DD670();
  sub_1AD9DD690();
  type metadata accessor for ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  char v29 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v29);

  id v30 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v30);

  type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  uint64_t v31 = swift_getObjCClassFromMetadata();
  uint64_t v32 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v31, v32);

  uint64_t v33 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v31, v33);

  type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
  uint64_t v34 = swift_getObjCClassFromMetadata();
  id v35 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v34, v35);

  type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  uint64_t v36 = swift_getObjCClassFromMetadata();
  uint64_t v37 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v36, v37);

  type metadata accessor for ScheduleOccurrenceAlarmSoundTableViewCell();
  uint64_t v38 = swift_getObjCClassFromMetadata();
  uint64_t v39 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v38, v39);

  type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell();
  uint64_t v40 = swift_getObjCClassFromMetadata();
  uint64_t v41 = (void *)sub_1AD9DF6D0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v40, v41);

  type metadata accessor for EditScheduleLinkTableViewCell();
  uint64_t v42 = swift_getObjCClassFromMetadata();
  uint64_t v60 = sub_1AD8BECD8(0);
  sub_1AD8BECF8(0, &qword_1E9A4B008, (void (*)(uint64_t))sub_1AD8BECD8);
  sub_1AD9DF730();
  uint64_t v43 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v42, v43);

  id v44 = (char *)v27;
  uint64_t v45 = v55;
  sub_1AD8BC214();
  sub_1AD9DD6A0();

  (*(void (**)(char *, uint64_t))(v56 + 8))(v45, v58);
  uint64_t v60 = *(void *)(a2 + 16);
  uint64_t v46 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v47 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = v46;
  *(void *)(v48 + 24) = v47;
  sub_1AD8418F4();
  sub_1AD8BF1F4((unint64_t *)&qword_1E9A491A0, (void (*)(uint64_t))sub_1AD8418F4);
  swift_retain();
  uint64_t v49 = sub_1AD9DDC40();
  swift_release();
  swift_release();
  *(void *)&v44[qword_1E9A4AF58] = v49;
  swift_release();
  uint64_t v60 = v54;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD837C9C(0, (unint64_t *)&qword_1EB725060, (unint64_t *)&qword_1EB7250A0, (uint64_t)&qword_1EB725090, 0x1E4FA5540);
  sub_1AD841D94();
  uint64_t v50 = sub_1AD9DDC40();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  *(void *)&v44[qword_1E9A4AF60] = v50;
  swift_release();
  return v44;
}

void sub_1AD8BCC88(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3E6D270](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    swift_beginAccess();
    uint64_t v8 = (void *)MEMORY[0x1B3E6D270](a3 + 16);
    sub_1AD8BD430(v4, v8);
  }
}

uint64_t sub_1AD8BCD1C(uint64_t a1, uint64_t a2)
{
  sub_1AD86C080(0, (unint64_t *)&qword_1E9A4AFF0, MEMORY[0x1E4FB0FF8]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v11 - v7;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](a2 + 16);
  if (result)
  {
    uint64_t v10 = (void *)result;
    sub_1AD8BC214();
    sub_1AD9DD6A0();

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_1AD8BCE3C(uint64_t a1, uint64_t a2)
{
  return sub_1AD8BDE78(a2);
}

id sub_1AD8BCE44(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1AD8BCE7C(a1, a2, a3, a4, (void (*)(uint64_t))sub_1AD8BDE78);
}

uint64_t sub_1AD8BCE5C(uint64_t a1, uint64_t a2)
{
  return sub_1AD8BEA24(a2);
}

id sub_1AD8BCE64(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1AD8BCE7C(a1, a2, a3, a4, (void (*)(uint64_t))sub_1AD8BEA24);
}

id sub_1AD8BCE7C(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v8 = a3;
  id v9 = a1;
  a5(a4);
  uint64_t v11 = v10;

  if (v11)
  {
    uint64_t v12 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  return v12;
}

void *sub_1AD8BCF14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1AD9DCD30();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AD9DCE40();
  MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1F4188790](v15, v16);
  unint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86C080(0, (unint64_t *)&unk_1E9A4AFE0, MEMORY[0x1E4FB1030]);
  id v19 = (uint64_t (*)(uint64_t, uint64_t))sub_1AD9DD6C0();
  id v20 = (void *)v19(a1, a2);
  type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  uint64_t v21 = swift_dynamicCastClass();
  if (v21)
  {
    uint64_t v41 = v7;
    uint64_t v42 = v6;
    uint64_t v22 = (void **)(v21 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
    swift_beginAccess();
    uint64_t v23 = v3;
    uint64_t v24 = *v22;
    uint64_t v25 = (uint64_t)*v22 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
    swift_beginAccess();
    *(unsigned char *)(v25 + *(int *)(v15 + 32)) = 1;
    id v26 = v20;
    id v27 = v24;
    uint64_t v3 = v23;
    id v28 = v27;
    sub_1AD936990();
    swift_endAccess();
    sub_1AD896DC4();

    int v29 = *(unsigned __int8 *)(v23 + qword_1E9A4AFA0);
    if (((v29 ^ (*(void *)((char *)*v22
                            + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0)) & 1) == 0)
    {
      int v30 = v29 ^ 1;
      uint64_t v32 = v41;
      uint64_t v31 = v42;
      (*(void (**)(char *, void, uint64_t))(v41 + 104))(v10, *MEMORY[0x1E4F27B20], v42);
      sub_1AD9DCD40();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v31);
      SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v14, v18);
      id v33 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
      sub_1AD897988(22, 0, 7, 0, (uint64_t)v18, v30);
      uint64_t v34 = *v22;
      *uint64_t v22 = v35;
    }
    id v36 = (id)MEMORY[0x1B3E6D270](v3 + qword_1E9A4AF70);
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  else
  {
    type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
    uint64_t v37 = swift_dynamicCastClass();
    if (!v37) {
      goto LABEL_8;
    }
    uint64_t v38 = v37 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
    swift_beginAccess();
    *(unsigned char *)(v38 + *(int *)(v15 + 32)) = 1;
    id v36 = v20;
    sub_1AD936990();
    swift_endAccess();
  }

LABEL_8:
  uint64_t v39 = *(void (**)(void *))(v3 + qword_1E9A4AF98);
  if (v39)
  {
    swift_retain();
    v39(v20);
    sub_1AD8BEC64((uint64_t)v39);
  }
  return v20;
}

id sub_1AD8BD31C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_1AD9DCF10();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DCEE0();
  id v10 = a3;
  id v11 = a1;
  uint64_t v12 = sub_1AD8BCF14((uint64_t)v10, (uint64_t)v9);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v12;
}

id sub_1AD8BD430(void *a1, void *a2)
{
  uint64_t v24 = a2;
  sub_1AD8BEC74(0, (unint64_t *)&qword_1E9A49298, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v24 - v6;
  uint64_t v8 = sub_1AD9DCF10();
  uint64_t v25 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v9);
  id v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86C080(0, (unint64_t *)&qword_1E9A4AFF0, MEMORY[0x1E4FB0FF8]);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v18 = qword_1E9A4AF90;
  int v19 = *(unsigned __int8 *)(v2 + qword_1E9A4AF90);
  id result = objc_msgSend(a1, sel_isEnabled);
  *(unsigned char *)(v2 + v18) = (_BYTE)result;
  if (v19 != result)
  {
    sub_1AD8BC214();
    sub_1AD9DD6A0();
    id result = (id)(*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    if ((v19 & 1) == 0)
    {
      unint64_t v26 = 0xD00000000000002ALL;
      unint64_t v27 = 0x80000001AD9EF660;
      sub_1AD9DD6B0();
      uint64_t v21 = v25;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v7, 1, v8) == 1)
      {
        return (id)sub_1AD8BF17C((uint64_t)v7, (unint64_t *)&qword_1E9A49298, MEMORY[0x1E4F27DE8]);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v11, v7, v8);
        uint64_t v22 = v24;
        if (v24)
        {
          uint64_t v23 = (void *)sub_1AD9DCED0();
          objc_msgSend(v22, sel_scrollToRowAtIndexPath_atScrollPosition_animated_, v23, 0, 1);
        }
        return (id)(*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v11, v8);
      }
    }
  }
  return result;
}

uint64_t sub_1AD8BD73C()
{
  swift_release();
  swift_release();
  swift_unknownObjectWeakDestroy();
  swift_release();
  uint64_t v1 = v0 + qword_1E9A4AF88;
  uint64_t v2 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(void *)(v0 + qword_1E9A4AF98);
  return sub_1AD8BEC64(v3);
}

id sub_1AD8BD7FC()
{
  return sub_1AD8BD818(0, type metadata accessor for QuickScheduleOverrideViewController.DataSource);
}

id sub_1AD8BD818(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t sub_1AD8BD850(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_unknownObjectWeakDestroy();
  swift_release();
  uint64_t v2 = a1 + qword_1E9A4AF88;
  uint64_t v3 = sub_1AD9DCE40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = *(void *)(a1 + qword_1E9A4AF98);
  return sub_1AD8BEC64(v4);
}

uint64_t sub_1AD8BD914()
{
  return type metadata accessor for QuickScheduleOverrideViewController.DataSource();
}

uint64_t sub_1AD8BD91C(uint64_t a1)
{
  sub_1AD8BEF04(0, (unint64_t *)&unk_1E9A49710, (uint64_t)&qword_1E9A4AFD0, (uint64_t)&protocol descriptor for ScheduleOccurrenceEditModelConsuming, (void (*)(uint64_t, uint64_t, uint64_t))sub_1AD843E70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1AD8BD9A4()
{
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_alarmConfigurationObserver] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelEditObserver] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_significantTimeChangeObserver] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepDurationGoalObserver] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_validScheduleRangeObserver] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_willResignActiveObserver] = 0;
  v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelHasChanged] = 0;
  uint64_t v1 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_tonePickerStyleProvider;
  uint64_t v2 = (objc_class *)type metadata accessor for TonePickerStyleProvider();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_vibrationPickerStyleProvider;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource] = 0;

  sub_1AD9E0140();
  __break(1u);
}

void sub_1AD8BDAE0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (!v1)
  {
    __break(1u);
    return;
  }
  id v2 = v1;
  sub_1AD9DD680();

  if (v8 && (v7 == 0xD000000000000029 && v8 == 0x80000001AD9EF600 || (sub_1AD9E02D0() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    sub_1AD8B6E0C();
    return;
  }
  type metadata accessor for EditScheduleLinkTableViewCell();
  sub_1AD8BECD8(0);
  sub_1AD8BECF8(0, &qword_1E9A4B008, (void (*)(uint64_t))sub_1AD8BECD8);
  uint64_t v3 = sub_1AD9DF730();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (v3 == v7 && v8 == v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0) {
      return;
    }
  }
  uint64_t v6 = v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
  if (MEMORY[0x1B3E6D270](v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate))
  {
    if (*(void *)(v0
                   + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver))
    {
      swift_retain();
      sub_1AD9DDA90();
      swift_release();
    }
    if (*(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver))
    {
      swift_retain();
      sub_1AD9DDA90();
      swift_release();
    }
    sub_1AD9BFD98();
    *(void *)(v6 + 8) = 0;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
}

void sub_1AD8BDCD8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (v1)
  {
    id v2 = v1;
    sub_1AD9DD680();

    if (v6
      && (v5 == 0xD000000000000029 && v6 == 0x80000001AD9EF600
       || (sub_1AD9E02D0() & 1) != 0
       || v5 == 0xD000000000000025 && v6 == 0x80000001AD9EF690
       || (sub_1AD9E02D0() & 1) != 0))
    {
      goto LABEL_13;
    }
    type metadata accessor for EditScheduleLinkTableViewCell();
    sub_1AD8BECD8(0);
    sub_1AD8BECF8(0, &qword_1E9A4B008, (void (*)(uint64_t))sub_1AD8BECD8);
    uint64_t v3 = sub_1AD9DF730();
    if (!v6) {
      goto LABEL_13;
    }
    if (v3 == v5 && v6 == v4)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      swift_bridgeObjectRelease();
      return;
    }
    sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1AD8BDE78(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DCF10();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8BF128(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1AD9E3080;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = 0;
  MEMORY[0x1B3E68E60]();
  sub_1AD9DD680();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v8 = v13;
  if (v13)
  {
    if (v12 == 0xD00000000000002BLL && v13 == 0x80000001AD9EF510)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0) {
        return 0;
      }
    }
    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v10 = (id)qword_1EB727930;
    uint64_t v8 = sub_1AD9DCA70();
  }
  return v8;
}

id sub_1AD8BE0A4(uint64_t a1)
{
  uint64_t v3 = sub_1AD9DCF10();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (v8)
  {
    sub_1AD8BF128(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1AD9E3080;
    *(void *)(v9 + 32) = a1;
    *(void *)(v9 + 40) = 0;
    id v10 = v8;
    MEMORY[0x1B3E68E60](v9);
    sub_1AD9DD680();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v11 = v16;
    if (v16)
    {
      uint64_t v12 = v15;
      if (v15 == 0xD00000000000002DLL && v16 == 0x80000001AD9EF4E0
        || (sub_1AD9E02D0() & 1) != 0
        || v12 == 0xD00000000000003ELL && v11 == 0x80000001AD9EF540
        || (sub_1AD9E02D0() & 1) != 0
        || v12 == 0xD00000000000002BLL && v11 == 0x80000001AD9EF510)
      {
        swift_bridgeObjectRelease();
        return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D30]), sel_init);
      }
      char v14 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      if (v14) {
        return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D30]), sel_init);
      }
    }
  }
  return 0;
}

double sub_1AD8BE2FC(uint64_t a1)
{
  uint64_t v3 = sub_1AD9DCF10();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (v8)
  {
    sub_1AD8BF128(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1AD9E3080;
    *(void *)(v9 + 32) = a1;
    *(void *)(v9 + 40) = 0;
    id v10 = v8;
    MEMORY[0x1B3E68E60](v9);
    sub_1AD9DD680();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v12 = v17;
    uint64_t v11 = v18;
    if (v18 && (v17 == 0xD000000000000029 && v18 == 0x80000001AD9EF600 || (sub_1AD9E02D0() & 1) != 0)) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  type metadata accessor for EditScheduleLinkTableViewCell();
  uint64_t v17 = sub_1AD8BECD8(0);
  sub_1AD8BECF8(0, &qword_1E9A4B008, (void (*)(uint64_t))sub_1AD8BECD8);
  uint64_t v13 = sub_1AD9DF730();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return *MEMORY[0x1E4FB2F28];
  }
  if (v13 == v12 && v11 == v14)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    return 1.0;
  }
  char v16 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = 1.0;
  if ((v16 & 1) == 0) {
    return *MEMORY[0x1E4FB2F28];
  }
  return result;
}

double sub_1AD8BE564(uint64_t a1)
{
  uint64_t v3 = sub_1AD9DCF10();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (!v8) {
    return *MEMORY[0x1E4FB2F28];
  }
  sub_1AD8BF128(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1AD9E3080;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  id v10 = v8;
  MEMORY[0x1B3E68E60](v9);
  sub_1AD9DD680();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v11 = v16;
  if (!v16) {
    return *MEMORY[0x1E4FB2F28];
  }
  uint64_t v12 = v15;
  if (v15 == 0xD00000000000002BLL && v16 == 0x80000001AD9EF510
    || (sub_1AD9E02D0() & 1) != 0
    || v12 == 0xD00000000000002DLL && v11 == 0x80000001AD9EF4E0
    || (sub_1AD9E02D0() & 1) != 0
    || v12 == 0xD00000000000003ELL && v11 == 0x80000001AD9EF540)
  {
    swift_bridgeObjectRelease();
    return 9.0;
  }
  char v14 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  double result = 9.0;
  if ((v14 & 1) == 0) {
    return *MEMORY[0x1E4FB2F28];
  }
  return result;
}

uint64_t sub_1AD8BE7B4(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t, uint64_t))
{
  swift_getObjectType();
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1AD9DD550();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EB725018);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = sub_1AD9DD530();
  os_log_type_t v10 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v9, v10))
  {
    format = a3;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v13 = sub_1AD9E04F0();
    sub_1AD838978(v13, v14, &v20);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    if (a2)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1AD9DF730();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    sub_1AD838978(v15, v17, &v20);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v9, v10, format, (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
    MEMORY[0x1B3E6D1A0](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  a4(a1, a2);
  return swift_release();
}

uint64_t sub_1AD8BEA24(uint64_t a1)
{
  uint64_t v3 = sub_1AD9DCF10();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8BF128(0, (unint64_t *)&qword_1E9A49290, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1AD9E3080;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = 0;
  MEMORY[0x1B3E68E60]();
  sub_1AD9DD680();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v9 = v14;
  if (!v14) {
    return v9;
  }
  if (v13 == 0xD000000000000029 && v14 == 0x80000001AD9EF600)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0;
    }
  }
  if (*(unsigned char *)(v1 + qword_1E9A4AF80) != 1) {
    return 0;
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v11 = (id)qword_1EB727930;
  uint64_t v9 = sub_1AD9DCA70();

  return v9;
}

uint64_t sub_1AD8BEC64(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_1AD8BEC74(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1AD8BECD8(uint64_t a1)
{
  return sub_1AD8BECF8(a1, &qword_1E9A4B000, (void (*)(uint64_t))type metadata accessor for EditScheduleLinkTableViewCell);
}

uint64_t sub_1AD8BECF8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a2;
  if (!*a2)
  {
    a3(255);
    uint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1AD8BED38()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD8BED70()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1AD8BEDA8(int a1)
{
  sub_1AD8B8C40(a1, *(void *)(v1 + 16));
}

uint64_t sub_1AD8BEDB0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD8BEDF0(uint64_t a1)
{
  return sub_1AD8B9398(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1AD8BEDFC()
{
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_1AD8BEE4C(uint64_t a1)
{
  sub_1AD8B9620(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void (**)(BOOL))(v1 + 40), *(void *)(v1 + 48));
}

void sub_1AD8BEE5C(uint64_t a1)
{
  sub_1AD8BA4C0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1AD8BEE64(uint64_t a1)
{
  return sub_1AD8BA7D8(a1, *(void *)(v1 + 16));
}

void sub_1AD8BEE80()
{
  if (!qword_1E9A4B020)
  {
    sub_1AD837C9C(255, (unint64_t *)&qword_1EB725060, (unint64_t *)&qword_1EB7250A0, (uint64_t)&qword_1EB725090, 0x1E4FA5540);
    sub_1AD841D94();
    unint64_t v0 = sub_1AD9DDA10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B020);
    }
  }
}

void sub_1AD8BEF04(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = sub_1AD9DFE90();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1AD8BEF60()
{
  if (!qword_1E9A4B038)
  {
    sub_1AD837C9C(255, &qword_1EB725070, &qword_1EB7250C8, (uint64_t)&qword_1EB7250C0, 0x1E4FA5520);
    sub_1AD8BEFE4();
    unint64_t v0 = sub_1AD9DDA10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B038);
    }
  }
}

unint64_t sub_1AD8BEFE4()
{
  unint64_t result = qword_1E9A4B048;
  if (!qword_1E9A4B048)
  {
    sub_1AD837C9C(255, &qword_1EB725070, &qword_1EB7250C8, (uint64_t)&qword_1EB7250C0, 0x1E4FA5520);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B048);
  }
  return result;
}

uint64_t sub_1AD8BF05C()
{
  return swift_deallocObject();
}

void sub_1AD8BF094(void *a1)
{
}

void sub_1AD8BF0B8(uint64_t a1)
{
  sub_1AD8B5B90(a1, v1);
}

void sub_1AD8BF0C0(uint64_t a1)
{
  sub_1AD8B5F18(a1, v1, sub_1AD8B5DE8);
}

void sub_1AD8BF0F0(uint64_t a1)
{
  sub_1AD8B5F18(a1, v1, (void (*)(void))sub_1AD8B5F74);
}

void sub_1AD8BF120(void **a1)
{
  sub_1AD8B6174(a1, v1);
}

void sub_1AD8BF128(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1AD8BF174(uint64_t a1)
{
  sub_1AD8B6374(a1, v1);
}

uint64_t sub_1AD8BF17C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1AD8BEC74(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_1AD8BF1EC(uint64_t a1)
{
  sub_1AD8B6444(a1, v1);
}

uint64_t sub_1AD8BF1F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8BF23C(uint64_t a1)
{
  sub_1AD8B64A0(a1, v1);
}

void sub_1AD8BF244(void *a1, uint64_t a2)
{
  sub_1AD8B64F4(a1, a2, v2);
}

void sub_1AD8BF24C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + qword_1E9A4AF68) = 0;
}

uint64_t sub_1AD8BF260()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1AD8BF2A0(void **a1)
{
  sub_1AD8BCC88(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1AD8BF2A8(uint64_t a1)
{
  return sub_1AD8BCD1C(a1, v1);
}

uint64_t type metadata accessor for SleepDiffableTableViewDataSource()
{
  uint64_t result = qword_1E9A4B0F8;
  if (!qword_1E9A4B0F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1AD8BF318()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1AD8BF364(uint64_t a1, uint64_t a2)
{
  return sub_1AD8BF528(a2, MEMORY[0x1E4F66740]);
}

id sub_1AD8BF388(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1AD8BF3C4(a1, a2, a3, a4, MEMORY[0x1E4F66740]);
}

uint64_t sub_1AD8BF394(uint64_t a1, uint64_t a2)
{
  return sub_1AD8BF528(a2, MEMORY[0x1E4F66738]);
}

id sub_1AD8BF3B8(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1AD8BF3C4(a1, a2, a3, a4, MEMORY[0x1E4F66738]);
}

id sub_1AD8BF3C4(void *a1, uint64_t a2, void *a3, uint64_t a4, unsigned int *a5)
{
  id v8 = a3;
  id v9 = a1;
  sub_1AD8BF528(a4, a5);
  uint64_t v11 = v10;

  if (v11)
  {
    uint64_t v12 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  return v12;
}

uint64_t sub_1AD8BF45C()
{
  return sub_1AD843DF4(v0 + qword_1E9A4B0F0);
}

id sub_1AD8BF46C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepDiffableTableViewDataSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD8BF4A4(uint64_t a1)
{
  return sub_1AD843DF4(a1 + qword_1E9A4B0F0);
}

uint64_t sub_1AD8BF4B4()
{
  uint64_t v0 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepDiffableTableViewDataSource());
  *(void *)&v0[qword_1E9A4B0F0 + 8] = 0;
  swift_unknownObjectWeakInit();
  return sub_1AD9DD670();
}

uint64_t sub_1AD8BF520()
{
  return type metadata accessor for SleepDiffableTableViewDataSource();
}

uint64_t sub_1AD8BF528(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = v2;
  sub_1AD8BF9D4();
  MEMORY[0x1F4188790](v6 - 8, v7);
  id v35 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AD9DFB70();
  uint64_t v34 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v10);
  id v33 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1AD9DFB30();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  unint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1AD9DCF10();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1B3E68E90](0, a1);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, *a2, v12);
  sub_1AD9DFB20();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  uint64_t v22 = v4 + qword_1E9A4B0F0;
  uint64_t v23 = MEMORY[0x1B3E6D270](v22);
  if (!v23
    || (uint64_t v24 = *(void *)(v22 + 8),
        v39[0] = v23,
        v39[1] = v24,
        sub_1AD8BFA98(0, &qword_1E9A4D950),
        sub_1AD8BFA98(0, &qword_1E9A4C660),
        (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    goto LABEL_7;
  }
  if (!*((void *)&v37 + 1))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    sub_1AD8BFAE8((uint64_t)&v36, (uint64_t (*)(void))sub_1AD8BFA2C);
    return 0;
  }
  sub_1AD843F30(&v36, (uint64_t)v39);
  __swift_project_boxed_opaque_existential_1Tm(v39, v39[3]);
  sub_1AD9DD450();
  swift_bridgeObjectRelease();
  sub_1AD8BFA98(0, (unint64_t *)&qword_1E9A4A3C0);
  uint64_t v25 = (uint64_t)v35;
  char v26 = swift_dynamicCast();
  uint64_t v27 = v34;
  id v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  if ((v26 & 1) == 0)
  {
    v28(v25, 1, 1, v9);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    sub_1AD8BFAE8(v25, (uint64_t (*)(void))sub_1AD8BF9D4);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
    return 0;
  }
  v28(v25, 0, 1, v9);
  int v29 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v33, v25, v9);
  uint64_t v30 = sub_1AD9DFB60();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v9);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
  return v30;
}

void sub_1AD8BF9D4()
{
  if (!qword_1E9A4B108)
  {
    sub_1AD9DFB70();
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B108);
    }
  }
}

void sub_1AD8BFA2C()
{
  if (!qword_1E9A4B110)
  {
    sub_1AD8BFA98(255, &qword_1E9A4C660);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B110);
    }
  }
}

uint64_t sub_1AD8BFA98(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1AD8BFAE8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_1AD8BFB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v5 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = 0;
  }
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for GoalTimePickerTableViewCell();
  id v6 = objc_msgSendSuper2(&v16, sel_initWithStyle_reuseIdentifier_, a1, v5);

  id v7 = v6;
  uint64_t v8 = (char *)sub_1AD91DA40();

  uint64_t v9 = sub_1AD9D5428();
  uint64_t v11 = (double *)&v8[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  double v12 = *(double *)&v8[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
  *(void *)uint64_t v11 = v13;
  v11[1] = v14;
  *((void *)v11 + 2) = v9;
  *((unsigned char *)v11 + 24) = v10 & 1;
  if (v12 != v14)
  {
    objc_msgSend(v8, sel_reloadAllComponents);
    sub_1AD900888((char *)1);
  }

  return v7;
}

id sub_1AD8BFC7C(void *a1)
{
  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for GoalTimePickerTableViewCell();
  id v3 = objc_msgSendSuper2(&v14, sel_initWithCoder_, a1);
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    id v6 = (char *)sub_1AD91DA40();

    uint64_t v7 = sub_1AD9D5428();
    uint64_t v9 = (double *)&v6[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
    double v10 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
    *(void *)uint64_t v9 = v11;
    v9[1] = v12;
    *((void *)v9 + 2) = v7;
    *((unsigned char *)v9 + 24) = v8 & 1;
    if (v10 != v12)
    {
      objc_msgSend(v6, sel_reloadAllComponents);
      sub_1AD900888((char *)1);
    }
  }
  return v4;
}

id sub_1AD8BFD64()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GoalTimePickerTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GoalTimePickerTableViewCell()
{
  return self;
}

double SectionContent.init(item:headerText:footerText:)@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v18 = a1[1];
  long long v19 = *a1;
  uint64_t v11 = *((void *)a1 + 4);
  __int16 v12 = *((_WORD *)a1 + 20);
  sub_1AD8C8F00(0, &qword_1E9A4A218, (uint64_t)&type metadata for SectionItem, MEMORY[0x1E4FBBE00]);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1AD9E3070;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(void *)(v13 + 64) = v11;
  *(_WORD *)(v13 + 72) = v12;
  sub_1AD8BFEA8(v13, a2, a3, a4, a5, (uint64_t *)v20);
  uint64_t v14 = v21;
  double result = *(double *)v20;
  long long v16 = v20[1];
  long long v17 = v20[2];
  *(_OWORD *)a6 = v20[0];
  *(_OWORD *)(a6 + 16) = v16;
  *(_OWORD *)(a6 + 32) = v17;
  *(void *)(a6 + 48) = v14;
  return result;
}

uint64_t sub_1AD8BFEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  if (a3 == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (a5 != 1) {
      goto LABEL_3;
    }
LABEL_10:
    sub_1AD8C96C4(a2, a3);
    uint64_t result = swift_bridgeObjectRelease();
    a4 = 0;
    a5 = 0;
    uint64_t v16 = 0;
    goto LABEL_11;
  }
  if (a3)
  {
    sub_1AD8C96D8(a2, a3);
    sub_1AD8C96D8(a2, a3);
    sub_1AD8C96D8(a2, a3);
    sub_1AD8C96D8(a2, a3);
    sub_1AD85F688();
    swift_bridgeObjectRetain();
    sub_1AD9DEAF0();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v18 = MEMORY[0x1E4F3E2F8];
  sub_1AD8C8F00(0, &qword_1E9A4B218, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4FBB718]);
  sub_1AD8C80B0(&qword_1E9A4B210, &qword_1E9A4B218, v18);
  uint64_t v14 = sub_1AD9DF1B0();
  sub_1AD8C96C4(a2, a3);
  sub_1AD8C96C4(a2, a3);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  if (a5 == 1) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v19 = v14;
  if (a5)
  {
    sub_1AD8C96D8(a4, a5);
    sub_1AD85F688();
    swift_bridgeObjectRetain_n();
    sub_1AD9DEAF0();
  }
  uint64_t v15 = MEMORY[0x1E4F3E2F8];
  sub_1AD8C8F00(0, &qword_1E9A4B218, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4FBB718]);
  sub_1AD8C80B0(&qword_1E9A4B210, &qword_1E9A4B218, v15);
  uint64_t v16 = sub_1AD9DF1B0();
  sub_1AD8C96C4(a4, a5);
  sub_1AD8C96C4(a4, a5);
  sub_1AD8C96C4(a2, a3);
  sub_1AD8C96C4(a4, a5);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v14 = v19;
LABEL_11:
  *a6 = v12;
  a6[1] = v13;
  a6[2] = v14;
  a6[3] = a4;
  a6[4] = a5;
  a6[5] = v16;
  a6[6] = a1;
  return result;
}

uint64_t sub_1AD8C0174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  sub_1AD8C820C(0, &qword_1E9A4B228, (uint64_t (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3D750]);
  uint64_t v16 = MEMORY[0x1F4188790](v14, v15);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v37 = v16;
  if (a3 != 1)
  {
    uint64_t v36 = a4;
    if (a3)
    {
      uint64_t v40 = a2;
      uint64_t v41 = a3;
      sub_1AD8C96D8(a2, a3);
      sub_1AD8C96D8(a2, a3);
      sub_1AD8C96D8(a2, a3);
      sub_1AD8C96D8(a2, a3);
      sub_1AD85F688();
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_1AD9DEAF0();
      uint64_t v29 = v28 & 1;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v29 = 0;
      uint64_t v27 = 0;
    }
    uint64_t v40 = v25;
    uint64_t v41 = v26;
    uint64_t v42 = v29;
    uint64_t v43 = v27;
    uint64_t v33 = MEMORY[0x1E4F3E2F8];
    sub_1AD8C8F00(0, &qword_1E9A4B218, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4FBB718]);
    sub_1AD8C80B0(&qword_1E9A4B210, &qword_1E9A4B218, v33);
    uint64_t v19 = sub_1AD9DF1B0();
    sub_1AD8C96C4(a2, a3);
    sub_1AD8C96C4(a2, a3);
    uint64_t v38 = a3;
    uint64_t v39 = a2;
    a4 = v36;
    if (a5) {
      goto LABEL_3;
    }
LABEL_13:
    sub_1AD8C96C4(a2, a3);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v31 = 0;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v19 = 0;
  if (!a5) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  LOBYTE(v42) = a6;
  if (a6 == 3)
  {
    uint64_t v35 = v19;
    uint64_t v20 = qword_1EB724E38;
    swift_bridgeObjectRetain();
    if (v20 != -1) {
      swift_once();
    }
    id v21 = (id)qword_1EB727930;
    uint64_t v22 = sub_1AD9DCA70();
    uint64_t v24 = v23;

    swift_bridgeObjectRelease();
    uint64_t v19 = v35;
  }
  else
  {
    uint64_t v44 = a4;
    uint64_t v45 = a5;
    char v46 = a6;
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_1AD8C5140();
    uint64_t v24 = v30;
  }
  swift_bridgeObjectRetain();
  SleepDeepLinkTextProvider.text.getter((uint64_t)v18);
  sub_1AD8C812C();
  uint64_t v31 = sub_1AD9DF1B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AD8C96C4(a2, a3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v34 = v38;
  *a7 = v39;
  a7[1] = v34;
  a7[2] = v19;
  a7[3] = v22;
  a7[4] = v24;
  a7[5] = v31;
  a7[6] = a1;
  return result;
}

uint64_t SectionContent.init<A, B>(items:headerProvider:footerProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v63 = a7;
  uint64_t v65 = a6;
  uint64_t v69 = a3;
  uint64_t v13 = sub_1AD9DFE90();
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v71 = v13;
  uint64_t v15 = MEMORY[0x1F4188790](v13, v14);
  uint64_t v66 = (char *)&v60 - v16;
  uint64_t v68 = a5;
  uint64_t v17 = *(void *)(a5 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v15, v18);
  uint64_t v61 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v21);
  uint64_t v62 = (char *)&v60 - v22;
  uint64_t v23 = sub_1AD9DFE90();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v23, v25);
  char v28 = (char *)&v60 - v27;
  uint64_t v29 = *(void *)(a4 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v26, v30);
  uint64_t v33 = (char *)&v60 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31, v34);
  uint64_t v36 = (char *)&v60 - v35;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v72 = a2;
  uint64_t v38 = a2;
  uint64_t v40 = v39;
  v37(v28, v38, v39);
  int v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, a4);
  uint64_t v67 = v40;
  uint64_t v64 = a1;
  if (v41 == 1)
  {
    uint64_t v42 = *(void (**)(char *, uint64_t))(v24 + 8);
    swift_bridgeObjectRetain();
    v42(v28, v40);
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v65 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v36, v28, a4);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v33, v36, a4);
    swift_bridgeObjectRetain();
    sub_1AD8C2934((uint64_t)v33, a4, v65, &v73);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, a4);
    uint64_t v44 = v74;
    uint64_t v65 = v73;
    uint64_t v43 = v75;
    sub_1AD8C2B30(0, 0, 0);
  }
  uint64_t v46 = v69;
  uint64_t v45 = v70;
  uint64_t v47 = v66;
  uint64_t v48 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v66, v69, v71);
  uint64_t v49 = v68;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v47, 1, v68) == 1)
  {
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v50(v46, v48);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v72, v67);
    v50((uint64_t)v47, v48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v60 = v43;
    uint64_t v55 = v62;
    v54(v62, v47, v49);
    uint64_t v56 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v61, v55, v49);
    sub_1AD8C2934(v56, v49, v63, &v73);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v48);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v72, v67);
    uint64_t v57 = v55;
    uint64_t v43 = v60;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v57, v49);
    uint64_t v53 = v73;
    uint64_t v52 = v74;
    uint64_t v51 = v75;
    sub_1AD8C2B30(0, 0, 0);
  }
  uint64_t v58 = v65;
  sub_1AD8C2AEC(v65, v44, v43);
  sub_1AD8C2AEC(v53, v52, v51);
  *a8 = v58;
  a8[1] = v44;
  a8[2] = v43;
  a8[3] = v53;
  a8[4] = v52;
  a8[5] = v51;
  a8[6] = v64;
  sub_1AD8C2B30(v58, v44, v43);
  sub_1AD8C2B30(v53, v52, v51);
  return swift_bridgeObjectRelease();
}

SleepHealthUI::SectionsViewModel __swiftcall SectionsViewModel.init(sections:)(SleepHealthUI::SectionsViewModel sections)
{
  v1->sections._rawValue = sections.sections._rawValue;
  return sections;
}

uint64_t SectionsViewModel.sections.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static SectionsViewModel.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1AD8C0B4C(*a1, *a2);
}

uint64_t sub_1AD8C0A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6 != *(void *)(v5 + 16)) {
    return 0;
  }
  uint64_t v7 = 1;
  do
  {
    if (v6 && v4 != v5)
    {
      if (*(double *)(v4 + 32) != *(double *)(v5 + 32)) {
        return 0;
      }
      if (v6 != 1)
      {
        if (*(double *)(v4 + 40) != *(double *)(v5 + 40)) {
          return 0;
        }
        double v10 = (double *)(v4 + 48);
        uint64_t v11 = (double *)(v5 + 48);
        for (uint64_t i = v6 - 2; i; --i)
        {
          double v13 = *v10++;
          double v14 = v13;
          double v15 = *v11++;
          if (v14 != v15) {
            return 0;
          }
        }
      }
    }
    if (v7 == v2) {
      return 1;
    }
    uint64_t result = 0;
    uint64_t v9 = 8 * v7++;
    uint64_t v4 = *(void *)(v3 + v9);
    uint64_t v5 = *(void *)(a2 + 32 + v9);
    uint64_t v6 = *(void *)(v4 + 16);
  }
  while (v6 == *(void *)(v5 + 16));
  return result;
}

uint64_t sub_1AD8C0B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a2 + 32;
  uint64_t v184 = a1 + 32;
  uint64_t v185 = *(void *)(a1 + 16);
  uint64_t v183 = a2 + 32;
  while (1)
  {
    uint64_t v6 = (uint64_t *)(v4 + 56 * v3);
    uint64_t v7 = v6[6];
    char v8 = (uint64_t *)(v5 + 56 * v3);
    uint64_t v9 = v8[6];
    uint64_t v10 = *(void *)(v7 + 16);
    if (v10 != *(void *)(v9 + 16)) {
      return 0;
    }
    uint64_t v11 = *v6;
    uint64_t v12 = v6[1];
    uint64_t v13 = v6[2];
    uint64_t v14 = v6[3];
    uint64_t v16 = v6[4];
    uint64_t v15 = v6[5];
    uint64_t v17 = *v8;
    uint64_t v18 = v8[1];
    uint64_t v19 = v8[3];
    uint64_t v20 = v8[4];
    uint64_t v197 = v8[2];
    uint64_t v198 = v13;
    uint64_t v195 = *v6;
    uint64_t v196 = v12;
    uint64_t v193 = v15;
    uint64_t v191 = v14;
    uint64_t v192 = v16;
    uint64_t v194 = v19;
    uint64_t v201 = v8[5];
    uint64_t v189 = *v8;
    uint64_t v190 = v20;
    uint64_t v187 = v3;
    uint64_t v188 = v18;
    if (!v10)
    {
      uint64_t v127 = v8[4];
      uint64_t v128 = v8[3];
      uint64_t v129 = *v8;
      uint64_t v130 = v8[1];
      uint64_t v131 = v8[2];
      sub_1AD8C2AEC(v11, v12, v13);
      sub_1AD8C2AEC(v14, v16, v15);
      swift_bridgeObjectRetain();
      sub_1AD8C2AEC(v129, v130, v131);
      sub_1AD8C2AEC(v128, v127, v201);
      goto LABEL_77;
    }
    uint64_t v227 = *(void *)(v7 + 16);
    uint64_t v21 = v8[2];
    sub_1AD8C2AEC(v11, v12, v13);
    sub_1AD8C2AEC(v14, v16, v15);
    swift_bridgeObjectRetain();
    sub_1AD8C2AEC(v17, v18, v21);
    sub_1AD8C2AEC(v19, v20, v201);
    if (v7 != v9) {
      break;
    }
LABEL_77:
    swift_bridgeObjectRetain();
LABEL_78:
    if (!v198)
    {
      uint64_t v133 = v193;
      uint64_t v135 = v191;
      uint64_t v134 = v192;
      uint64_t v137 = v189;
      uint64_t v136 = v190;
      uint64_t v132 = v188;
      if (!v197) {
        goto LABEL_92;
      }
      swift_bridgeObjectRetain();
LABEL_87:
      if (v132) {
        goto LABEL_102;
      }
      goto LABEL_92;
    }
    swift_bridgeObjectRetain();
    if (v197)
    {
      uint64_t v132 = v188;
      swift_bridgeObjectRetain();
      uint64_t v133 = v193;
      uint64_t v135 = v191;
      uint64_t v134 = v192;
      uint64_t v137 = v189;
      uint64_t v136 = v190;
      if (v196)
      {
        if (!v188) {
          goto LABEL_102;
        }
        if (v195 == v189 && v196 == v188)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v138 = sub_1AD9E02D0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v138 & 1) == 0) {
            goto LABEL_127;
          }
        }
        goto LABEL_92;
      }
      goto LABEL_87;
    }
    uint64_t v133 = v193;
    uint64_t v135 = v191;
    uint64_t v134 = v192;
    uint64_t v137 = v189;
    uint64_t v136 = v190;
    uint64_t v132 = v188;
    if (v196) {
      goto LABEL_102;
    }
LABEL_92:
    if (!v133)
    {
      if (v201)
      {
        swift_bridgeObjectRetain();
LABEL_101:
        if (v136) {
          goto LABEL_102;
        }
      }
LABEL_104:
      sub_1AD8C2B30(v137, v132, v197);
      uint64_t v139 = v194;
      uint64_t v140 = v136;
      goto LABEL_105;
    }
    swift_bridgeObjectRetain();
    if (!v201)
    {
      if (v134)
      {
LABEL_102:
        swift_bridgeObjectRelease();
        goto LABEL_127;
      }
      goto LABEL_104;
    }
    swift_bridgeObjectRetain();
    if (!v134) {
      goto LABEL_101;
    }
    if (!v136) {
      goto LABEL_102;
    }
    if (v135 != v194 || v134 != v136)
    {
      char v142 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AD8C2B30(v137, v132, v197);
      sub_1AD8C2B30(v194, v136, v201);
      swift_bridgeObjectRelease();
      sub_1AD8C2B30(v195, v196, v198);
      sub_1AD8C2B30(v135, v134, v133);
      swift_bridgeObjectRelease();
      if ((v142 & 1) == 0) {
        return 0;
      }
      goto LABEL_106;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AD8C2B30(v137, v132, v197);
    uint64_t v139 = v135;
    uint64_t v140 = v134;
LABEL_105:
    sub_1AD8C2B30(v139, v140, v201);
    swift_bridgeObjectRelease();
    sub_1AD8C2B30(v195, v196, v198);
    sub_1AD8C2B30(v135, v134, v133);
    swift_bridgeObjectRelease();
LABEL_106:
    uint64_t v3 = v187 + 1;
    uint64_t result = 1;
    uint64_t v4 = v184;
    uint64_t v5 = v183;
    if (v187 + 1 == v185) {
      return result;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = (unsigned __int8 *)(v7 + 73);
  uint64_t v23 = (unsigned __int8 *)(v9 + 73);
  while (1)
  {
    uint64_t v37 = *(void **)(v22 - 41);
    uint64_t v38 = *(void *)(v22 - 33);
    uint64_t v39 = *(void *)(v22 - 25);
    uint64_t v40 = *(void *)(v22 - 17);
    uint64_t v41 = *(void *)(v22 - 9);
    uint64_t v42 = *(v22 - 1);
    unsigned int v44 = *v22;
    v22 += 48;
    uint64_t v43 = v44;
    uint64_t v45 = *(void **)(v23 - 41);
    uint64_t v46 = *(void *)(v23 - 33);
    uint64_t v47 = *(void *)(v23 - 25);
    uint64_t v48 = *(void *)(v23 - 17);
    uint64_t v228 = v48;
    uint64_t v229 = *(void *)(v23 - 9);
    unsigned int v230 = *(v23 - 1);
    int v50 = *v23;
    v23 += 48;
    int v49 = v50;
    switch(v43)
    {
      case 1:
        if (v49 != 1) {
          goto LABEL_115;
        }
        unint64_t v225 = v37;
        if ((_BYTE)v37)
        {
          if (v37 == 1) {
            uint64_t v71 = 0x696472616F626E6FLL;
          }
          else {
            uint64_t v71 = 0x63536567616E616DLL;
          }
          if (v37 == 1) {
            unint64_t v72 = 0xEA0000000000676ELL;
          }
          else {
            unint64_t v72 = 0xEE00656C75646568;
          }
          int v73 = v45;
          if ((_BYTE)v45) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v71 = 0x657078456E69616DLL;
          unint64_t v72 = 0xEE0065636E656972;
          int v73 = v45;
          if ((_BYTE)v45)
          {
LABEL_35:
            if (v73 == 1)
            {
              unint64_t v74 = 0xEA0000000000676ELL;
              if (v71 != 0x696472616F626E6FLL) {
                goto LABEL_64;
              }
              goto LABEL_63;
            }
            uint64_t v118 = 0x63536567616E616DLL;
            uint64_t v119 = 0x656C75646568;
LABEL_62:
            unint64_t v74 = v119 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v71 != v118)
            {
LABEL_64:
              uint64_t v120 = v38;
              uint64_t v121 = v39;
              uint64_t v222 = v47;
              uint64_t v209 = v46;
              uint64_t v122 = v40;
              uint64_t v123 = v41;
              id v124 = v45;
              char v186 = sub_1AD9E02D0();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1AD8C70FC(v225, v120, v121, v122, v123, v42, 1);
              uint64_t v94 = v124;
              uint64_t v95 = v209;
              uint64_t v96 = v222;
              uint64_t v97 = v228;
              uint64_t v98 = v229;
              uint64_t v99 = v230;
              char v100 = 1;
              goto LABEL_74;
            }
LABEL_63:
            if (v72 == v74)
            {
              uint64_t v24 = v38;
              uint64_t v25 = v40;
              uint64_t v26 = v41;
              uint64_t v27 = v45;
              uint64_t v28 = v47;
              uint64_t v29 = v39;
              swift_bridgeObjectRelease_n();
              sub_1AD8C70FC(v225, v24, v29, v25, v26, v42, 1);
              uint64_t v30 = v27;
              uint64_t v31 = v46;
              uint64_t v32 = v28;
              uint64_t v33 = v228;
              uint64_t v34 = v229;
              uint64_t v35 = v230;
              char v36 = 1;
              goto LABEL_10;
            }
            goto LABEL_64;
          }
        }
        uint64_t v118 = 0x657078456E69616DLL;
        uint64_t v119 = 0x65636E656972;
        goto LABEL_62;
      case 2:
        uint64_t v218 = v40;
        if (v49 != 2) {
          goto LABEL_111;
        }
        uint64_t v75 = v38;
        uint64_t v76 = v40;
        uint64_t v214 = v39;
        uint64_t v77 = v47;
        uint64_t v220 = v47;
        uint64_t v78 = v42;
        uint64_t v79 = v46;
        uint64_t v80 = v41;
        double v81 = v45;
        sub_1AD8C71B0(v37, v38, v39, v76, v41, v78, 2);
        sub_1AD8C71B0(v81, v79, v77, v48, v229, v230, 2);
        sub_1AD8C70FC(v37, v75, v214, v218, v80, v78, 2);
        uint64_t v30 = v81;
        uint64_t v31 = v79;
        uint64_t v32 = v220;
        uint64_t v33 = v48;
        uint64_t v34 = v229;
        uint64_t v35 = v230;
        char v36 = 2;
        goto LABEL_10;
      case 3:
        uint64_t v203 = v45;
        if (v49 != 3)
        {
          uint64_t v148 = v40;
          uint64_t v153 = v41;
          uint64_t v154 = v38;
          uint64_t v155 = v47;
          uint64_t v156 = v39;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v39 = v156;
          uint64_t v47 = v155;
          uint64_t v38 = v154;
          uint64_t v45 = v203;
          uint64_t v41 = v153;
          goto LABEL_114;
        }
        uint64_t v82 = v47;
        unsigned int v206 = v42;
        uint64_t v83 = v46;
        uint64_t v200 = v41;
        uint64_t v226 = v37;
        uint64_t v215 = v39;
        if (v37 != v45 || v38 != v46)
        {
          uint64_t v84 = v38;
          id v85 = v45;
          uint64_t v86 = v39;
          char v87 = sub_1AD9E02D0();
          uint64_t v39 = v86;
          uint64_t v38 = v84;
          uint64_t v45 = v85;
          if ((v87 & 1) == 0)
          {
            sub_1AD8C71B0(v226, v84, v86, v40, v200, v206, 3);
            sub_1AD8C71B0(v85, v46, v82, v48, v229, v230, 3);
            sub_1AD8C70FC(v226, v84, v215, v40, v200, v206, 3);
            v162 = v85;
            uint64_t v163 = v46;
            uint64_t v164 = v82;
            uint64_t v165 = v48;
            uint64_t v166 = v229;
            uint64_t v167 = v230;
            goto LABEL_122;
          }
        }
        uint64_t v212 = v38;
        uint64_t v88 = v40;
        if (v39 == v82 && v40 == v48
          || (v89 = v48, v90 = v45, v91 = v39, v92 = sub_1AD9E02D0(), uint64_t v39 = v91, v45 = v90, v48 = v89, (v92 & 1) != 0))
        {
          uint64_t v93 = v39;
          sub_1AD8C71B0(v45, v83, v82, v48, v229, v230, 3);
          sub_1AD8C71B0(v226, v212, v93, v88, v200, v206, 3);
          sub_1AD8C71B0(v226, v212, v93, v88, v200, v206, 3);
          sub_1AD8C71B0(v203, v83, v82, v228, v229, v230, 3);
          char v186 = sub_1AD9DEE40();
          sub_1AD8C70FC(v226, v212, v93, v88, v200, v206, 3);
          sub_1AD8C70FC(v203, v83, v82, v228, v229, v230, 3);
          sub_1AD8C70FC(v203, v83, v82, v228, v229, v230, 3);
          uint64_t v94 = v226;
          uint64_t v95 = v212;
          uint64_t v96 = v215;
          uint64_t v97 = v88;
          uint64_t v98 = v200;
          uint64_t v99 = v206;
          char v100 = 3;
          goto LABEL_74;
        }
        v182 = v45;
        sub_1AD8C71B0(v226, v212, v91, v40, v200, v206, 3);
        sub_1AD8C71B0(v182, v83, v82, v89, v229, v230, 3);
        sub_1AD8C70FC(v226, v212, v215, v40, v200, v206, 3);
        v162 = v182;
        uint64_t v163 = v83;
        uint64_t v164 = v82;
        uint64_t v165 = v89;
        uint64_t v166 = v229;
        uint64_t v167 = v230;
LABEL_122:
        char v168 = 3;
LABEL_125:
        sub_1AD8C70FC(v162, v163, v164, v165, v166, v167, v168);
LABEL_126:
        uint64_t v133 = v193;
        uint64_t v135 = v191;
        uint64_t v134 = v192;
        uint64_t v137 = v189;
        uint64_t v136 = v190;
        uint64_t v132 = v188;
LABEL_127:
        sub_1AD8C2B30(v137, v132, v197);
        sub_1AD8C2B30(v194, v136, v201);
        swift_bridgeObjectRelease();
        sub_1AD8C2B30(v195, v196, v198);
        sub_1AD8C2B30(v135, v134, v133);
        swift_bridgeObjectRelease();
        return 0;
      case 4:
        uint64_t v218 = v40;
        if (v49 == 4)
        {
          uint64_t v101 = v38;
          uint64_t v102 = v40;
          uint64_t v216 = v39;
          uint64_t v103 = v47;
          uint64_t v221 = v47;
          uint64_t v104 = v42;
          uint64_t v105 = v46;
          uint64_t v106 = v41;
          objc_super v107 = v45;
          sub_1AD8C71B0(v37, v38, v39, v102, v41, v104, 4);
          sub_1AD8C71B0(v107, v105, v103, v48, v229, v230, 4);
          sub_1AD8C70FC(v37, v101, v216, v218, v106, v104, 4);
          uint64_t v30 = v107;
          uint64_t v31 = v105;
          uint64_t v32 = v221;
          uint64_t v33 = v48;
          uint64_t v34 = v229;
          uint64_t v35 = v230;
          char v36 = 4;
LABEL_10:
          sub_1AD8C70FC(v30, v31, v32, v33, v34, v35, v36);
          goto LABEL_11;
        }
LABEL_111:
        uint64_t v143 = v41;
        uint64_t v144 = v45;
        uint64_t v145 = v38;
        uint64_t v146 = v47;
        int v207 = v42;
        uint64_t v42 = v39;
        id v147 = v37;
        uint64_t v39 = v42;
        LODWORD(v42) = v207;
        uint64_t v47 = v146;
        uint64_t v38 = v145;
        uint64_t v45 = v144;
        uint64_t v41 = v143;
        uint64_t v40 = v218;
        goto LABEL_115;
      default:
        uint64_t v199 = v41;
        if (v49)
        {
          uint64_t v148 = v40;
          v149 = v45;
          uint64_t v150 = v38;
          uint64_t v151 = v47;
          uint64_t v152 = v39;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v39 = v152;
          uint64_t v47 = v151;
          uint64_t v38 = v150;
          uint64_t v45 = v149;
          uint64_t v41 = v199;
LABEL_114:
          uint64_t v40 = v148;
          uint64_t v48 = v228;
LABEL_115:
          uint64_t v204 = v45;
          uint64_t v223 = v47;
          uint64_t v157 = v38;
          uint64_t v158 = v46;
          uint64_t v159 = v39;
          uint64_t v210 = v46;
          uint64_t v160 = v40;
          uint64_t v161 = v41;
          sub_1AD8C71B0(v45, v158, v47, v48, v229, v230, v49);
          sub_1AD8C70FC(v37, v157, v159, v160, v161, v42, v43);
          v162 = v204;
          uint64_t v163 = v210;
          uint64_t v164 = v223;
          uint64_t v165 = v48;
          uint64_t v166 = v229;
          uint64_t v167 = v230;
          char v168 = v49;
          goto LABEL_125;
        }
        v224 = v37;
        uint64_t v208 = v46;
        uint64_t v202 = v45;
        uint64_t v219 = v47;
        if (v37 != v45 || v38 != v46)
        {
          uint64_t v51 = v38;
          uint64_t v52 = v41;
          uint64_t v53 = v45;
          uint64_t v54 = v47;
          uint64_t v55 = v42;
          uint64_t v56 = v39;
          char v57 = sub_1AD9E02D0();
          uint64_t v39 = v56;
          uint64_t v42 = v55;
          uint64_t v46 = v208;
          uint64_t v47 = v54;
          uint64_t v38 = v51;
          uint64_t v45 = v53;
          uint64_t v41 = v52;
          if ((v57 & 1) == 0)
          {
            uint64_t v179 = v53;
            uint64_t v180 = v39;
            sub_1AD8C71B0(v179, v208, v54, v48, v229, v230, 0);
            sub_1AD8C71B0(v224, v51, v180, v40, v52, v42, 0);
            sub_1AD8C70FC(v224, v51, v180, v40, v52, v42, 0);
            v162 = v202;
            uint64_t v163 = v208;
            uint64_t v164 = v219;
            uint64_t v165 = v48;
            uint64_t v166 = v229;
            uint64_t v167 = v230;
            goto LABEL_124;
          }
        }
        uint64_t v58 = v229;
        uint64_t v217 = v40;
        uint64_t v211 = v38;
        if (v39 != v47 || v40 != v48)
        {
          uint64_t v59 = v41;
          uint64_t v60 = v45;
          uint64_t v61 = v47;
          uint64_t v62 = v39;
          char v63 = sub_1AD9E02D0();
          uint64_t v58 = v229;
          uint64_t v39 = v62;
          uint64_t v47 = v61;
          uint64_t v45 = v60;
          uint64_t v41 = v59;
          uint64_t v40 = v217;
          if ((v63 & 1) == 0)
          {
            uint64_t v181 = v41;
            sub_1AD8C71B0(v60, v46, v61, v48, v229, v230, 0);
            sub_1AD8C71B0(v224, v211, v62, v217, v181, v42, 0);
            sub_1AD8C70FC(v224, v211, v62, v217, v181, v42, 0);
            v162 = v202;
            uint64_t v163 = v46;
            uint64_t v164 = v219;
            uint64_t v165 = v48;
            uint64_t v166 = v229;
            uint64_t v167 = v230;
            goto LABEL_124;
          }
        }
        unsigned int v205 = v42;
        uint64_t v213 = v39;
        if (v41)
        {
          if (!v58)
          {
            uint64_t v169 = v39;
            uint64_t v170 = v230;
            uint64_t v229 = 0;
            uint64_t v171 = v41;
            goto LABEL_131;
          }
          uint64_t v64 = v39;
          uint64_t v65 = v48;
          uint64_t v66 = v41;
          uint64_t v67 = v58;
          sub_1AD8C71B0(v45, v208, v219, v48, v58, v230, 0);
          uint64_t v68 = v205;
          sub_1AD8C71B0(v224, v211, v64, v217, v66, v205, 0);
          uint64_t v69 = v230;
          sub_1AD8C71B0(v224, v211, v64, v217, v66, v205, 0);
          uint64_t v70 = v219;
          sub_1AD8C71B0(v202, v208, v219, v65, v67, v230, 0);
          swift_retain();
          swift_retain();
          LOBYTE(v65) = sub_1AD9DEE40();
          swift_release();
          swift_release();
          if ((v65 & 1) == 0)
          {
            uint64_t v172 = v199;
            uint64_t v134 = v192;
            uint64_t v133 = v193;
            uint64_t v135 = v191;
            uint64_t v173 = v228;
            uint64_t v174 = v213;
            uint64_t v175 = v217;
            v176 = v202;
            uint64_t v177 = v224;
            uint64_t v178 = v219;
            goto LABEL_132;
          }
          if (v205 == 3) {
            goto LABEL_24;
          }
        }
        else
        {
          if (v58)
          {
            uint64_t v169 = v39;
            uint64_t v170 = v230;
            uint64_t v171 = 0;
LABEL_131:
            uint64_t v134 = v192;
            uint64_t v133 = v193;
            uint64_t v135 = v191;
            uint64_t v173 = v48;
            sub_1AD8C71B0(v45, v208, v47, v48, v229, v170, 0);
            uint64_t v177 = v224;
            uint64_t v175 = v217;
            sub_1AD8C71B0(v224, v211, v169, v217, v171, v205, 0);
            uint64_t v178 = v219;
            sub_1AD8C71B0(v224, v211, v169, v217, v171, v205, 0);
            v176 = v202;
            sub_1AD8C71B0(v202, v208, v219, v173, v229, v230, 0);
            uint64_t v172 = v171;
            uint64_t v174 = v169;
LABEL_132:
            sub_1AD8C70FC(v177, v211, v174, v175, v172, v205, 0);
            sub_1AD8C70FC(v176, v208, v178, v173, v229, v230, 0);
            sub_1AD8C70FC(v176, v208, v178, v173, v229, v230, 0);
            sub_1AD8C70FC(v177, v211, v213, v217, v199, v205, 0);
            uint64_t v137 = v189;
            uint64_t v136 = v190;
            uint64_t v132 = v188;
            goto LABEL_127;
          }
          uint64_t v108 = v48;
          uint64_t v109 = v48;
          uint64_t v110 = v45;
          uint64_t v111 = v39;
          sub_1AD8C71B0(v45, v46, v47, v109, 0, v230, 0);
          sub_1AD8C71B0(v224, v211, v111, v40, 0, v42, 0);
          uint64_t v112 = v111;
          uint64_t v68 = v42;
          sub_1AD8C71B0(v224, v211, v112, v40, 0, v42, 0);
          uint64_t v113 = v110;
          uint64_t v69 = v230;
          uint64_t v70 = v219;
          sub_1AD8C71B0(v113, v46, v219, v108, 0, v230, 0);
          if (v42 == 3)
          {
LABEL_24:
            sub_1AD8C70FC(v224, v211, v213, v217, v199, 3, 0);
            sub_1AD8C70FC(v202, v208, v70, v228, v229, v69, 0);
            sub_1AD8C70FC(v202, v208, v70, v228, v229, v69, 0);
            sub_1AD8C70FC(v224, v211, v213, v217, v199, 3, 0);
            if (v69 != 3) {
              goto LABEL_126;
            }
            goto LABEL_11;
          }
        }
        uint64_t v114 = v68;
        if (v69 == 3)
        {
          sub_1AD8C70FC(v224, v211, v213, v217, v199, v68, 0);
          sub_1AD8C70FC(v202, v208, v70, v228, v229, 3, 0);
          sub_1AD8C70FC(v202, v208, v70, v228, v229, 3, 0);
          v162 = v224;
          uint64_t v163 = v211;
          uint64_t v164 = v213;
          uint64_t v165 = v217;
          uint64_t v166 = v199;
          uint64_t v167 = v205;
LABEL_124:
          char v168 = 0;
          goto LABEL_125;
        }
        if (v68)
        {
          if (v68 == 1)
          {
            uint64_t v115 = 0x696472616F626E6FLL;
            unint64_t v116 = 0xEA0000000000676ELL;
            if (!v69) {
              goto LABEL_68;
            }
          }
          else
          {
            uint64_t v115 = 0x63536567616E616DLL;
            unint64_t v116 = 0xEE00656C75646568;
            if (!v69)
            {
LABEL_68:
              uint64_t v125 = 0x657078456E69616DLL;
              uint64_t v126 = 0x65636E656972;
              goto LABEL_70;
            }
          }
        }
        else
        {
          uint64_t v115 = 0x657078456E69616DLL;
          unint64_t v116 = 0xEE0065636E656972;
          if (!v69) {
            goto LABEL_68;
          }
        }
        if (v69 == 1)
        {
          unint64_t v117 = 0xEA0000000000676ELL;
          if (v115 != 0x696472616F626E6FLL) {
            goto LABEL_73;
          }
          goto LABEL_71;
        }
        uint64_t v125 = 0x63536567616E616DLL;
        uint64_t v126 = 0x656C75646568;
LABEL_70:
        unint64_t v117 = v126 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        if (v115 != v125) {
          goto LABEL_73;
        }
LABEL_71:
        if (v116 == v117)
        {
          swift_bridgeObjectRelease_n();
          sub_1AD8C70FC(v224, v211, v213, v217, v199, v114, 0);
          sub_1AD8C70FC(v202, v208, v70, v228, v229, v69, 0);
          sub_1AD8C70FC(v202, v208, v70, v228, v229, v69, 0);
          uint64_t v30 = v224;
          uint64_t v31 = v211;
          uint64_t v32 = v213;
          uint64_t v33 = v217;
          uint64_t v34 = v199;
          uint64_t v35 = v205;
          char v36 = 0;
          goto LABEL_10;
        }
LABEL_73:
        char v186 = sub_1AD9E02D0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1AD8C70FC(v224, v211, v213, v217, v199, v114, 0);
        sub_1AD8C70FC(v202, v208, v70, v228, v229, v69, 0);
        sub_1AD8C70FC(v202, v208, v70, v228, v229, v69, 0);
        uint64_t v94 = v224;
        uint64_t v95 = v211;
        uint64_t v96 = v213;
        uint64_t v97 = v217;
        uint64_t v98 = v199;
        uint64_t v99 = v205;
        char v100 = 0;
LABEL_74:
        sub_1AD8C70FC(v94, v95, v96, v97, v98, v99, v100);
        if ((v186 & 1) == 0) {
          goto LABEL_126;
        }
LABEL_11:
        if (!--v227) {
          goto LABEL_78;
        }
        break;
    }
  }
}

uint64_t sub_1AD8C2100(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v12 = 1;
    }
    else
    {
      uint64_t v3 = v2 - 1;
      uint64_t v4 = a1 + 73;
      uint64_t v5 = a2 + 73;
      do
      {
        uint64_t v6 = *(void *)(v4 - 9);
        __int16 v7 = *(_WORD *)(v4 - 1);
        long long v8 = *(_OWORD *)(v4 - 25);
        v19[0] = *(_OWORD *)(v4 - 41);
        v19[1] = v8;
        uint64_t v20 = v6;
        __int16 v21 = v7;
        uint64_t v9 = *(void *)(v5 - 9);
        __int16 v10 = *(_WORD *)(v5 - 1);
        long long v11 = *(_OWORD *)(v5 - 25);
        v16[0] = *(_OWORD *)(v5 - 41);
        v16[1] = v11;
        uint64_t v17 = v9;
        __int16 v18 = v10;
        char v12 = _s13SleepHealthUI11SectionItemO2eeoiySbAC_ACtFZ_0((uint64_t)v19, (uint64_t)v16);
        BOOL v14 = v3-- != 0;
        if ((v12 & 1) == 0) {
          break;
        }
        v4 += 48;
        v5 += 48;
      }
      while (v14);
    }
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_1AD8C21C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepStageSegment(0);
  uint64_t v6 = MEMORY[0x1F4188790](v4, v5);
  long long v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  char v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 == *(void *)(a2 + 16))
  {
    if (v13 && a1 != a2)
    {
      unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v27 = *(void *)(v10 + 72);
      uint64_t v15 = v13 - 1;
      while (1)
      {
        sub_1AD8C9338(a1 + v14, (uint64_t)v12, type metadata accessor for SleepStageSegment);
        sub_1AD8C9338(a2 + v14, (uint64_t)v8, type metadata accessor for SleepStageSegment);
        unint64_t v16 = 0xE500000000000000;
        uint64_t v17 = 0x656B617761;
        switch(*v12)
        {
          case 1:
            unint64_t v16 = 0xE800000000000000;
            uint64_t v17 = 0x7065656C536D6572;
            break;
          case 2:
            unsigned int v18 = 1701998435;
            goto LABEL_9;
          case 3:
            unsigned int v18 = 1885693284;
LABEL_9:
            uint64_t v17 = v18 | 0x65656C5300000000;
            unint64_t v16 = 0xE900000000000070;
            break;
          case 4:
            uint64_t v17 = 0x6669636570736E75;
            unint64_t v16 = 0xEB00000000646569;
            break;
          default:
            break;
        }
        unint64_t v19 = 0xE500000000000000;
        uint64_t v20 = 0x656B617761;
        switch(*v8)
        {
          case 1:
            unint64_t v19 = 0xE800000000000000;
            if (v17 == 0x7065656C536D6572) {
              goto LABEL_18;
            }
            goto LABEL_21;
          case 2:
            unint64_t v19 = 0xE900000000000070;
            if (v17 != 0x65656C5365726F63) {
              goto LABEL_21;
            }
            goto LABEL_18;
          case 3:
            uint64_t v20 = 0x65656C5370656564;
            unint64_t v19 = 0xE900000000000070;
            goto LABEL_17;
          case 4:
            unint64_t v19 = 0xEB00000000646569;
            if (v17 != 0x6669636570736E75) {
              goto LABEL_21;
            }
            goto LABEL_18;
          default:
LABEL_17:
            if (v17 != v20) {
              goto LABEL_21;
            }
LABEL_18:
            if (v16 == v19)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
LABEL_21:
              char v21 = sub_1AD9E02D0();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v21 & 1) == 0)
              {
                sub_1AD8C949C((uint64_t)v8, type metadata accessor for SleepStageSegment);
                sub_1AD8C949C((uint64_t)v12, type metadata accessor for SleepStageSegment);
                char v22 = 0;
                return v22 & 1;
              }
            }
            char v22 = sub_1AD9DC730();
            sub_1AD8C949C((uint64_t)v8, type metadata accessor for SleepStageSegment);
            sub_1AD8C949C((uint64_t)v12, type metadata accessor for SleepStageSegment);
            BOOL v24 = v15-- != 0;
            if ((v22 & 1) == 0) {
              return v22 & 1;
            }
            v14 += v27;
            if (!v24) {
              return v22 & 1;
            }
            break;
        }
      }
    }
    char v22 = 1;
  }
  else
  {
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t sub_1AD8C2568(uint64_t *a1, uint64_t *a2)
{
  return sub_1AD8C0B4C(*a1, *a2);
}

__n128 SectionsViewModel.init(section:)@<Q0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v7 = a1[1];
  long long v8 = *a1;
  __n128 v6 = (__n128)a1[2];
  uint64_t v3 = *((void *)a1 + 6);
  sub_1AD8C8F00(0, &qword_1E9A4A210, (uint64_t)&type metadata for SectionContent, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1AD9E3070;
  *(_OWORD *)(v4 + 32) = v8;
  __n128 result = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(__n128 *)(v4 + 64) = v6;
  *(void *)(v4 + 80) = v3;
  *a2 = v4;
  return result;
}

double SectionsViewModel.init(sectionItem:headerText:footerText:)@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  long long v20 = a1[1];
  long long v21 = *a1;
  uint64_t v11 = *((void *)a1 + 4);
  __int16 v12 = *((_WORD *)a1 + 20);
  uint64_t v13 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBBE00];
  sub_1AD8C8F00(0, &qword_1E9A4A210, (uint64_t)&type metadata for SectionContent, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1AD9E3070;
  sub_1AD8C8F00(0, &qword_1E9A4A218, (uint64_t)&type metadata for SectionItem, v13);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1AD9E3070;
  *(_OWORD *)(v15 + 32) = v21;
  *(_OWORD *)(v15 + 48) = v20;
  *(void *)(v15 + 64) = v11;
  *(_WORD *)(v15 + 72) = v12;
  sub_1AD8BFEA8(v15, a2, a3, a4, a5, (uint64_t *)v22);
  uint64_t v16 = v23;
  double result = *(double *)v22;
  long long v18 = v22[1];
  long long v19 = v22[2];
  *(_OWORD *)(v14 + 32) = v22[0];
  *(_OWORD *)(v14 + 48) = v18;
  *(_OWORD *)(v14 + 64) = v19;
  *(void *)(v14 + 80) = v16;
  *a6 = v14;
  return result;
}

uint64_t SectionContent.view.getter()
{
  return sub_1AD9DF260();
}

uint64_t sub_1AD8C2858(long long *a1)
{
  sub_1AD8C93F8(a1, v2);
  sub_1AD8C9410((uint64_t)v2, (void (*)(void, void, void, void, void, void, void))sub_1AD8C71B0);
  sub_1AD8C58E0(v2);
  return sub_1AD8C9410((uint64_t)v2, (void (*)(void, void, void, void, void, void, void))sub_1AD8C70FC);
}

uint64_t SectionContent.header.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = *(void *)(v1 + 16);
  if (result) {
    uint64_t result = swift_retain();
  }
  *a1 = result;
  return result;
}

uint64_t SectionContent.footer.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = *(void *)(v1 + 40);
  if (result) {
    uint64_t result = swift_retain();
  }
  *a1 = result;
  return result;
}

uint64_t SectionContent.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AD8C2934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  uint64_t v12 = v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
  swift_bridgeObjectRetain();
  v13(a2, a3);
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = sub_1AD9DF1B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a4 = v10;
  a4[1] = v12;
  a4[2] = v14;
  return swift_bridgeObjectRelease();
}

double SectionContent.init(items:headerText:footerText:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_1AD8BFEA8(a1, a2, a3, a4, a5, (uint64_t *)v11);
  uint64_t v7 = v12;
  double result = *(double *)v11;
  long long v9 = v11[1];
  long long v10 = v11[2];
  *(_OWORD *)a6 = v11[0];
  *(_OWORD *)(a6 + 16) = v9;
  *(_OWORD *)(a6 + 32) = v10;
  *(void *)(a6 + 48) = v7;
  return result;
}

uint64_t sub_1AD8C2AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1AD8C2B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1AD8C2B74(uint64_t a1)
{
}

void sub_1AD8C2BBC()
{
  if (!qword_1E9A4B130)
  {
    unint64_t v0 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F3D750];
    sub_1AD8C8C70(255, &qword_1E9A4B138, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, MEMORY[0x1E4F3D750]);
    sub_1AD8C8C70(255, &qword_1E9A4B140, (uint64_t)&type metadata for EditScheduleButton, (uint64_t)&type metadata for TrailingDetailRow, v0);
    unint64_t v1 = sub_1AD9DE480();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_1E9A4B130);
    }
  }
}

void sub_1AD8C2C78()
{
  if (!qword_1E9A4B148)
  {
    sub_1AD8C2CD8(255);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B148);
    }
  }
}

void sub_1AD8C2CD8(uint64_t a1)
{
}

void sub_1AD8C2D0C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD8C2D70(uint64_t a1)
{
}

unint64_t sub_1AD8C2DA4()
{
  unint64_t result = qword_1E9A4B160;
  if (!qword_1E9A4B160)
  {
    sub_1AD8C8F00(255, &qword_1E9A4B118, (uint64_t)&type metadata for SectionItem, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B160);
  }
  return result;
}

unint64_t sub_1AD8C2E20()
{
  unint64_t result = qword_1E9A4B168;
  if (!qword_1E9A4B168)
  {
    sub_1AD8C2D0C(255, &qword_1E9A4B120, (uint64_t (*)(uint64_t))sub_1AD8C2B74, MEMORY[0x1E4F3EBC8]);
    sub_1AD8C2F4C(&qword_1E9A4B170, sub_1AD8C2B74, (void (*)(void))sub_1AD8C2F04, (void (*)(void))sub_1AD8C3270);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B168);
  }
  return result;
}

uint64_t sub_1AD8C2F04()
{
  return sub_1AD8C2F4C(&qword_1E9A4B178, (void (*)(uint64_t))sub_1AD8C2BBC, (void (*)(void))sub_1AD8C2FD8, (void (*)(void))sub_1AD8C3124);
}

uint64_t sub_1AD8C2F4C(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD8C2FD8()
{
  unint64_t result = qword_1E9A4B180;
  if (!qword_1E9A4B180)
  {
    sub_1AD8C8C70(255, &qword_1E9A4B138, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, MEMORY[0x1E4F3D750]);
    sub_1AD8C307C();
    sub_1AD8C30D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B180);
  }
  return result;
}

unint64_t sub_1AD8C307C()
{
  unint64_t result = qword_1E9A4B188;
  if (!qword_1E9A4B188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B188);
  }
  return result;
}

unint64_t sub_1AD8C30D0()
{
  unint64_t result = qword_1E9A4B190;
  if (!qword_1E9A4B190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B190);
  }
  return result;
}

unint64_t sub_1AD8C3124()
{
  unint64_t result = qword_1E9A4B198;
  if (!qword_1E9A4B198)
  {
    sub_1AD8C8C70(255, &qword_1E9A4B140, (uint64_t)&type metadata for EditScheduleButton, (uint64_t)&type metadata for TrailingDetailRow, MEMORY[0x1E4F3D750]);
    sub_1AD8C31C8();
    sub_1AD8C321C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B198);
  }
  return result;
}

unint64_t sub_1AD8C31C8()
{
  unint64_t result = qword_1E9A4B1A0;
  if (!qword_1E9A4B1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B1A0);
  }
  return result;
}

unint64_t sub_1AD8C321C()
{
  unint64_t result = qword_1E9A4B1A8;
  if (!qword_1E9A4B1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B1A8);
  }
  return result;
}

uint64_t sub_1AD8C3270()
{
  return sub_1AD8C32B8(&qword_1E9A4B1B0, (void (*)(uint64_t))sub_1AD8C2C78, (void (*)(void))sub_1AD8C3344, (void (*)(void))sub_1AD8C3398);
}

uint64_t sub_1AD8C32B8(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD8C3344()
{
  unint64_t result = qword_1E9A4B1B8;
  if (!qword_1E9A4B1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B1B8);
  }
  return result;
}

uint64_t sub_1AD8C3398()
{
  return sub_1AD8C9454(&qword_1E9A4B1C0, sub_1AD8C2CD8);
}

unint64_t sub_1AD8C33CC()
{
  unint64_t result = qword_1E9A4B1C8;
  if (!qword_1E9A4B1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B1C8);
  }
  return result;
}

uint64_t SectionContent.hash(into:)(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  swift_bridgeObjectRetain();
  sub_1AD8C60A0(a1, v7);
  swift_bridgeObjectRelease();
  if (v4) {
    BOOL v8 = v3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    sub_1AD9E03C0();
    swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_11;
    }
  }
  else
  {
    sub_1AD9E03C0();
    swift_bridgeObjectRetain();
    sub_1AD9DF760();
    swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_11;
    }
  }
  if (v5)
  {
    sub_1AD9E03C0();
    swift_bridgeObjectRetain();
    sub_1AD9DF760();
    goto LABEL_12;
  }
LABEL_11:
  sub_1AD9E03C0();
LABEL_12:
  return swift_bridgeObjectRelease();
}

uint64_t SectionContent.hashValue.getter()
{
  uint64_t v1 = *((void *)v0 + 6);
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  long long v7 = v0[2];
  uint64_t v8 = v1;
  sub_1AD9E03A0();
  SectionContent.hash(into:)((uint64_t)v4);
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8C3590()
{
  uint64_t v1 = *((void *)v0 + 6);
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  long long v7 = v0[2];
  uint64_t v8 = v1;
  sub_1AD9E03A0();
  SectionContent.hash(into:)((uint64_t)v4);
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8C35F0()
{
  uint64_t v1 = *((void *)v0 + 6);
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  long long v7 = v0[2];
  uint64_t v8 = v1;
  sub_1AD9E03A0();
  SectionContent.hash(into:)((uint64_t)v4);
  return sub_1AD9E03E0();
}

uint64_t SectionContent.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v3 = (unsigned __int8 *)(v1 + 73);
  do
  {
    uint64_t v4 = *(void **)(v3 - 41);
    uint64_t v5 = *(void *)(v3 - 33);
    uint64_t v6 = *(void *)(v3 - 25);
    uint64_t v7 = *(void *)(v3 - 17);
    uint64_t v8 = *(void *)(v3 - 9);
    uint64_t v9 = *(v3 - 1);
    int v11 = *v3;
    v3 += 48;
    char v10 = v11;
    switch(v11)
    {
      case 1:
        sub_1AD9E0030();
        swift_bridgeObjectRelease();
        sub_1AD9DF790();
        swift_bridgeObjectRelease();
        sub_1AD9DF790();
        goto LABEL_4;
      case 2:
      case 4:
        id v12 = v4;
        break;
      case 3:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      default:
        sub_1AD8C71B0(v4, v5, v6, v7, v8, v9, 0);
        swift_bridgeObjectRetain();
        sub_1AD9DF790();
LABEL_4:
        swift_bridgeObjectRelease();
        break;
    }
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    sub_1AD8C70FC(v4, v5, v6, v7, v8, v9, v10);
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease_n();
  return 0;
}

unint64_t SectionItem.id.getter()
{
  uint64_t v1 = *(void **)v0;
  unint64_t result = 0xD000000000000012;
  switch(*(unsigned char *)(v0 + 41))
  {
    case 1:
      sub_1AD9E0030();
      swift_bridgeObjectRelease();
      v8[0] = 0xD000000000000011;
      v8[1] = 0x80000001AD9F24D0;
      sub_1AD9DF790();
      swift_bridgeObjectRelease();
      sub_1AD9DF790();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2:
      return result;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      uint64_t v4 = *(void *)(v0 + 24);
      uint64_t v3 = *(void *)(v0 + 32);
      uint64_t v6 = *(void *)(v0 + 8);
      uint64_t v5 = *(void *)(v0 + 16);
      uint64_t v7 = *(unsigned __int8 *)(v0 + 40);
      strcpy((char *)v8, "promotion - ");
      BYTE5(v8[1]) = 0;
      HIWORD(v8[1]) = -5120;
      sub_1AD8C71B0(v1, v6, v5, v4, v3, v7, 0);
      swift_bridgeObjectRetain();
      sub_1AD9DF790();
      swift_bridgeObjectRelease();
      sub_1AD8C70FC(v1, v6, v5, v4, v3, v7, 0);
LABEL_6:
      unint64_t result = v8[0];
      break;
  }
  return result;
}

uint64_t sub_1AD8C3BA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SectionContent.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t AnyTextProvider.stringRepresentation.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyTextProvider.stringRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AnyTextProvider.stringRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t AnyTextProvider.text.getter()
{
  return swift_retain();
}

uint64_t AnyTextProvider.text.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AnyTextProvider.text.modify())()
{
  return nullsub_1;
}

uint64_t sub_1AD8C3CA8@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t sub_1AD8C3CB4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StaticTextProvider.text.getter@<X0>(uint64_t *a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    sub_1AD85F688();
    swift_bridgeObjectRetain();
    uint64_t result = sub_1AD9DEAF0();
    uint64_t v7 = v6 & 1;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v4 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
  }
  *a1 = result;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v5;
  return result;
}

uint64_t StaticTextProvider.stringRepresentation.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD8C3D98@<X0>(uint64_t *a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    sub_1AD85F688();
    swift_bridgeObjectRetain();
    uint64_t result = sub_1AD9DEAF0();
    uint64_t v7 = v6 & 1;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v4 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
  }
  *a1 = result;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v5;
  return result;
}

uint64_t sub_1AD8C3E1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v79 = a1;
  uint64_t v3 = sub_1AD9DE580();
  uint64_t v80 = *(void *)(v3 - 8);
  uint64_t v81 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v78 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1AD9DE300();
  uint64_t v76 = *(void *)(v6 - 8);
  uint64_t v77 = v6;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v75 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  uint64_t v10 = v9 - 8;
  uint64_t v71 = *(void *)(v9 - 8);
  uint64_t v70 = *(void *)(v71 + 64);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v68 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1AD9DDE50();
  uint64_t v72 = *(void *)(v13 - 8);
  uint64_t v73 = v13;
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v66 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1AD9DCA50();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v18);
  long long v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8C88A8();
  uint64_t v69 = v21;
  uint64_t v67 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21, v22);
  BOOL v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v24;
  sub_1AD8C8DB8(0);
  uint64_t v64 = v25;
  MEMORY[0x1F4188790](v25, v26);
  uint64_t v28 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8C8E34(0);
  uint64_t v74 = v29;
  MEMORY[0x1F4188790](v29, v30);
  uint64_t v65 = (char *)&v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v2, v16);
  uint64_t v32 = sub_1AD9DEAE0();
  uint64_t v34 = v33;
  char v36 = v35;
  int v38 = v37 & 1;
  uint64_t v39 = *(int *)(v10 + 32);
  char v40 = *(unsigned char *)(v2 + *(int *)(v10 + 28)) != 1;
  uint64_t v63 = v2;
  uint64_t v41 = *(void *)(v2 + v39 + 8);
  char v82 = *(unsigned char *)(v2 + v39);
  uint64_t v83 = v41;
  sub_1AD8C8F00(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
  sub_1AD9DF070();
  sub_1AD9812DC(v40, v84, v85, v86, v32, v34, v38, v36, (uint64_t)v24);
  swift_release();
  swift_release();
  sub_1AD861548(v32, v34, v38);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v62 = type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText;
  uint64_t v43 = v68;
  sub_1AD8C9338(v2, v68, (uint64_t (*)(void))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
  uint64_t v44 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v45 = (v44 + 16) & ~v44;
  uint64_t v46 = v70;
  uint64_t v70 = v44 | 7;
  uint64_t v71 = v45 + v46;
  uint64_t v47 = swift_allocObject();
  sub_1AD8C8F78(v43, v47 + v45);
  uint64_t v48 = v66;
  sub_1AD9DDE40();
  int v49 = (uint64_t *)&v28[*(int *)(v64 + 36)];
  sub_1AD8C8E00(0);
  uint64_t v52 = v72;
  uint64_t v51 = v73;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))((char *)v49 + *(int *)(v50 + 28), v48, v73);
  *int v49 = KeyPath;
  uint64_t v53 = v67;
  uint64_t v54 = v61;
  uint64_t v55 = v69;
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v28, v61, v69);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v51);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  uint64_t v56 = v75;
  sub_1AD9DE2F0();
  sub_1AD8C9060();
  uint64_t v57 = (uint64_t)v65;
  sub_1AD9DED20();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v56, v77);
  sub_1AD8C949C((uint64_t)v28, (uint64_t (*)(void))sub_1AD8C8DB8);
  sub_1AD8C9338(v63, v43, (uint64_t (*)(void))v62);
  uint64_t v58 = swift_allocObject();
  sub_1AD8C8F78(v43, v58 + v45);
  uint64_t v59 = v78;
  sub_1AD9DE570();
  sub_1AD9DDFA0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v81);
  return sub_1AD8C949C(v57, (uint64_t (*)(void))sub_1AD8C8E34);
}

uint64_t sub_1AD8C4530(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DDE50();
  MEMORY[0x1F4188790](v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_1AD9DE1F0();
}

void sub_1AD8C45F8(uint64_t a1)
{
  id v2 = objc_msgSend(self, sel_sharedBehavior);
  if (v2)
  {
    uint64_t v3 = v2;
    unsigned int v4 = objc_msgSend(v2, sel_healthAppHidden);

    if (v4)
    {
      type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
      sub_1AD8C8F00(0, (unint64_t *)&qword_1E9A4A1C0, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3ECC8]);
      sub_1AD9DF060();
    }
    else
    {
      DeepLinkOpener.open(url:completion:)(a1, 0, 0);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1AD8C46E4(uint64_t a1)
{
  sub_1AD8C72F8(0);
  uint64_t v4 = MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v22 - v8;
  uint64_t v10 = sub_1AD9DCB80();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  if (*(unsigned char *)(a1 + *(int *)(v15 + 20)))
  {
    uint64_t v16 = (id *)MEMORY[0x1E4FA53D8];
    if (*(unsigned char *)(a1 + *(int *)(v15 + 20)) == 1) {
      uint64_t v16 = (id *)MEMORY[0x1E4FA53E0];
    }
    id v17 = *v16;
  }
  else
  {
    id v17 = 0;
  }
  id v18 = (id)HKSPSleepURL();

  if (!v18)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v19(v6, 1, 1, v10);
LABEL_10:
    sub_1AD8C949C((uint64_t)v6, (uint64_t (*)(void))sub_1AD8C72F8);
    v19(v9, 1, 1, v10);
    return sub_1AD8C949C((uint64_t)v9, (uint64_t (*)(void))sub_1AD8C72F8);
  }
  sub_1AD9DCB60();

  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v19(v6, 0, 1, v10);
  long long v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v20(v6, 1, v10) == 1) {
    goto LABEL_10;
  }
  v22[1] = a1;
  sub_1AD9DCB30();
  v22[0] = *(void *)(v11 + 8);
  ((void (*)(char *, uint64_t))v22[0])(v6, v10);
  v19(v9, 0, 1, v10);
  if (v20(v9, 1, v10) == 1) {
    return sub_1AD8C949C((uint64_t)v9, (uint64_t (*)(void))sub_1AD8C72F8);
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  sub_1AD8C45F8((uint64_t)v14);
  return ((uint64_t (*)(char *, uint64_t))v22[0])(v14, v10);
}

uint64_t SleepDeepLinkTextProvider.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v59 = a1;
  sub_1AD8C820C(0, &qword_1E9A4B1D0, (uint64_t (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3D748]);
  uint64_t v57 = v2;
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v5 = (char *)v49 - v4;
  uint64_t v58 = type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  MEMORY[0x1F4188790](v58, v6);
  uint64_t v51 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1AD9DC9E0();
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v54 = v8;
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1AD9DC9F0();
  uint64_t v52 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1AD9DCA10();
  MEMORY[0x1F4188790](v16 - 8, v17);
  sub_1AD8C72F8(0);
  MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v21 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8C732C(0);
  MEMORY[0x1F4188790](v22 - 8, v23);
  uint64_t v25 = (char *)v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1AD9DCA50();
  uint64_t v55 = *(void *)(v26 - 8);
  uint64_t v56 = v26;
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v50 = (char *)v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)v1;
  uint64_t v60 = *(void *)(v1 + 8);
  int v30 = *(unsigned __int8 *)(v1 + 16);
  if (v30 != 3)
  {
    uint64_t v62 = v29;
    uint64_t v63 = v60;
    char v64 = v30;
    uint64_t v31 = sub_1AD8C5140();
    if (v32)
    {
      v49[1] = v31;
      uint64_t v33 = sub_1AD9DCB80();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v21, 1, 1, v33);
      (*(void (**)(char *, void, uint64_t))(v52 + 104))(v15, *MEMORY[0x1E4F27310], v12);
      (*(void (**)(char *, void, uint64_t))(v53 + 104))(v11, *MEMORY[0x1E4F272E8], v54);
      sub_1AD9DCA00();
      sub_1AD9DCA40();
      uint64_t v35 = v55;
      uint64_t v34 = v56;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v25, 0, 1, v56);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v25, 1, v34) != 1)
      {
        uint64_t v44 = v50;
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v50, v25, v34);
        uint64_t v45 = (uint64_t)v51;
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v51, v44, v34);
        uint64_t v46 = v58;
        uint64_t v47 = v45 + *(int *)(v58 + 24);
        char v61 = 0;
        sub_1AD9DF040();
        uint64_t v48 = v63;
        *(unsigned char *)uint64_t v47 = v62;
        *(void *)(v47 + 8) = v48;
        *(unsigned char *)(v45 + *(int *)(v46 + 20)) = v30;
        sub_1AD8C9338(v45, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
        swift_storeEnumTagMultiPayload();
        sub_1AD8C9454(&qword_1E9A4B1D8, (void (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
        sub_1AD9DE470();
        sub_1AD8C949C(v45, (uint64_t (*)(void))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v44, v34);
      }
      sub_1AD8C949C((uint64_t)v25, (uint64_t (*)(void))sub_1AD8C732C);
    }
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v36 = (id)qword_1EB727930;
  uint64_t v37 = sub_1AD9DCA70();
  uint64_t v39 = v38;

  swift_bridgeObjectRelease();
  uint64_t v62 = v37;
  uint64_t v63 = v39;
  sub_1AD85F688();
  *(void *)uint64_t v5 = sub_1AD9DEAF0();
  *((void *)v5 + 1) = v40;
  v5[16] = v41 & 1;
  *((void *)v5 + 3) = v42;
  swift_storeEnumTagMultiPayload();
  sub_1AD8C9454(&qword_1E9A4B1D8, (void (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
  return sub_1AD9DE470();
}

uint64_t sub_1AD8C5140()
{
  sub_1AD8C72F8(0);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AD9DCB80();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (id *)MEMORY[0x1E4FA53E0];
  id v11 = 0;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      goto LABEL_3;
    case 2:
      uint64_t v10 = (id *)MEMORY[0x1E4FA53D8];
LABEL_3:
      id v11 = *v10;
      goto LABEL_4;
    case 3:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
      swift_bridgeObjectRetain();
      goto LABEL_11;
    default:
LABEL_4:
      swift_bridgeObjectRetain();
      id v12 = (id)HKSPSleepURL();

      if (!v12)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
        goto LABEL_11;
      }
      sub_1AD9DCB60();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
LABEL_11:
        sub_1AD8C949C((uint64_t)v4, (uint64_t (*)(void))sub_1AD8C72F8);
        swift_bridgeObjectRelease();
        return 0;
      }
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
      uint64_t v13 = sub_1AD9DCB40();
      uint64_t v15 = v14;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      swift_bridgeObjectRelease();
      if (qword_1EB724E38 != -1) {
        swift_once();
      }
      id v16 = (id)qword_1EB727930;
      sub_1AD9DCA70();

      swift_bridgeObjectRelease();
      sub_1AD8C2D0C(0, (unint64_t *)&qword_1E9A4A978, (uint64_t (*)(uint64_t))sub_1AD8C93A0, MEMORY[0x1E4FBBE00]);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_1AD9E3070;
      *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v17 + 64) = sub_1AD89E5A8();
      *(void *)(v17 + 32) = v13;
      *(void *)(v17 + 40) = v15;
      uint64_t v18 = sub_1AD9DF6E0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
  }
}

uint64_t SleepDeepLinkTextProvider.stringRepresentation.getter()
{
  if (*(unsigned char *)(v0 + 16) != 3) {
    return sub_1AD8C5140();
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1EB727930;
  uint64_t v2 = sub_1AD9DCA70();

  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_1AD8C5628@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SectionItem.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t SectionItem.hash(into:)()
{
  SectionItem.id.getter();
  sub_1AD9DF760();
  return swift_bridgeObjectRelease();
}

uint64_t SectionItem.hashValue.getter()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8C5754()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8C57E0()
{
  SectionItem.id.getter();
  sub_1AD9DF760();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AD8C5854()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8C58E0(long long *a1)
{
  sub_1AD8C93F8(a1, &v28);
  uint64_t v2 = (void *)v28;
  sub_1AD8C93F8(a1, v29);
  switch(v32)
  {
    case 1:
      char v4 = v29[0];
      id v16 = &type metadata for DeepLinkOpener;
      uint64_t v17 = &protocol witness table for DeepLinkOpener;
      v20[0] = 0;
      sub_1AD9DF040();
      char v18 = v21;
      uint64_t v19 = *((void *)&v21 + 1);
      v15[0] = v4;
      sub_1AD8C94FC((uint64_t)v15, (uint64_t)&v21);
      char v25 = 1;
      sub_1AD8C307C();
      sub_1AD8C30D0();
      sub_1AD9DE470();
      sub_1AD8C9558((uint64_t)&v11, (uint64_t)&v21);
      char v26 = 0;
      uint64_t v5 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F3D750];
      sub_1AD8C8C70(0, &qword_1E9A4B138, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, MEMORY[0x1E4F3D750]);
      sub_1AD8C8C70(0, &qword_1E9A4B140, (uint64_t)&type metadata for EditScheduleButton, (uint64_t)&type metadata for TrailingDetailRow, v5);
      sub_1AD8C2FD8();
      sub_1AD8C3124();
      sub_1AD9DE470();
      sub_1AD8C95E8((uint64_t)&v11);
      sub_1AD8C9338((uint64_t)v20, (uint64_t)&v21, (uint64_t (*)(void))sub_1AD8C2BBC);
      char v27 = 0;
      sub_1AD8C2BBC();
      sub_1AD8C2C78();
      sub_1AD8C2F04();
      sub_1AD8C3270();
      sub_1AD9DE470();
      sub_1AD8C949C((uint64_t)v20, (uint64_t (*)(void))sub_1AD8C2BBC);
      uint64_t result = sub_1AD8C9670((uint64_t)v15);
      break;
    case 2:
      v20[0] = 0;
      id v7 = v2;
      sub_1AD9DF040();
      sub_1AD8C9410((uint64_t)a1, (void (*)(void, void, void, void, void, void, void))sub_1AD8C71B0);
      sub_1AD8C31C8();
      sub_1AD8C321C();
      swift_retain();
      sub_1AD9DE470();
      long long v21 = v11;
      long long v22 = v12;
      uint64_t v23 = v13;
      char v24 = v14;
      char v26 = 1;
      uint64_t v8 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F3D750];
      sub_1AD8C8C70(0, &qword_1E9A4B138, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, MEMORY[0x1E4F3D750]);
      sub_1AD8C8C70(0, &qword_1E9A4B140, (uint64_t)&type metadata for EditScheduleButton, (uint64_t)&type metadata for TrailingDetailRow, v8);
      sub_1AD8C2FD8();
      sub_1AD8C3124();
      sub_1AD9DE470();
      sub_1AD8C9338((uint64_t)v20, (uint64_t)&v21, (uint64_t (*)(void))sub_1AD8C2BBC);
      char v27 = 0;
      sub_1AD8C2BBC();
      sub_1AD8C2C78();
      sub_1AD8C2F04();
      sub_1AD8C3270();
      sub_1AD9DE470();
      sub_1AD8C9410((uint64_t)a1, (void (*)(void, void, void, void, void, void, void))sub_1AD8C70FC);
      sub_1AD8C949C((uint64_t)v20, (uint64_t (*)(void))sub_1AD8C2BBC);
      sub_1AD8C9410((uint64_t)a1, (void (*)(void, void, void, void, void, void, void))sub_1AD8C70FC);
      uint64_t result = swift_release();
      break;
    case 3:
      sub_1AD8C31C8();
      sub_1AD8C321C();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1AD9DE470();
      long long v21 = v11;
      long long v22 = v12;
      uint64_t v23 = v13;
      char v24 = v14;
      char v26 = 1;
      uint64_t v9 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F3D750];
      sub_1AD8C8C70(0, &qword_1E9A4B138, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, MEMORY[0x1E4F3D750]);
      sub_1AD8C8C70(0, &qword_1E9A4B140, (uint64_t)&type metadata for EditScheduleButton, (uint64_t)&type metadata for TrailingDetailRow, v9);
      sub_1AD8C2FD8();
      sub_1AD8C3124();
      sub_1AD9DE470();
      goto LABEL_6;
    case 4:
      type metadata accessor for SleepActivityConfigurationModel();
      sub_1AD8C9454(&qword_1E9A4B2C8, (void (*)(uint64_t))type metadata accessor for SleepActivityConfigurationModel);
      id v10 = v2;
      sub_1AD9DE090();
      sub_1AD9DDAA0();
      sub_1AD8C2BBC();
      sub_1AD8C2C78();
      sub_1AD8C2F04();
      sub_1AD8C3270();
      uint64_t result = sub_1AD9DE470();
      break;
    default:
      long long v21 = v29[0];
      long long v22 = v29[1];
      uint64_t v23 = v30;
      char v24 = v31;
      char v25 = 0;
      sub_1AD8C307C();
      sub_1AD8C30D0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1AD9DE470();
      sub_1AD8C9558((uint64_t)&v11, (uint64_t)&v21);
      char v26 = 0;
      unint64_t v3 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F3D750];
      sub_1AD8C8C70(0, &qword_1E9A4B138, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, MEMORY[0x1E4F3D750]);
      sub_1AD8C8C70(0, &qword_1E9A4B140, (uint64_t)&type metadata for EditScheduleButton, (uint64_t)&type metadata for TrailingDetailRow, v3);
      sub_1AD8C2FD8();
      sub_1AD8C3124();
      sub_1AD9DE470();
      sub_1AD8C95E8((uint64_t)&v11);
LABEL_6:
      sub_1AD8C9338((uint64_t)v20, (uint64_t)&v21, (uint64_t (*)(void))sub_1AD8C2BBC);
      char v27 = 0;
      sub_1AD8C2BBC();
      sub_1AD8C2C78();
      sub_1AD8C2F04();
      sub_1AD8C3270();
      sub_1AD9DE470();
      uint64_t result = sub_1AD8C949C((uint64_t)v20, (uint64_t (*)(void))sub_1AD8C2BBC);
      break;
  }
  return result;
}

void sub_1AD8C60A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  sub_1AD9E03B0();
  if (v3)
  {
    char v4 = (unsigned __int8 *)(a2 + 73);
    do
    {
      uint64_t v6 = *(void **)(v4 - 41);
      uint64_t v7 = *(void *)(v4 - 33);
      uint64_t v8 = *(void *)(v4 - 25);
      uint64_t v9 = *(void *)(v4 - 17);
      uint64_t v10 = *(void *)(v4 - 9);
      uint64_t v11 = *(v4 - 1);
      int v13 = *v4;
      v4 += 48;
      char v12 = v13;
      switch(v13)
      {
        case 1:
          sub_1AD9E0030();
          swift_bridgeObjectRelease();
          sub_1AD9DF790();
          swift_bridgeObjectRelease();
          sub_1AD9DF790();
          swift_bridgeObjectRelease();
          uint64_t v11 = v11;
          break;
        case 2:
        case 4:
          id v5 = v6;
          break;
        case 3:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        default:
          sub_1AD8C71B0(v6, v7, v8, v9, v10, v11, 0);
          swift_bridgeObjectRetain();
          sub_1AD9DF790();
          swift_bridgeObjectRelease();
          break;
      }
      sub_1AD9DF760();
      swift_bridgeObjectRelease();
      sub_1AD8C70FC(v6, v7, v8, v9, v10, v11, v12);
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1AD8C639C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SleepStageSegment(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t result = sub_1AD9E03B0();
  if (v8)
  {
    uint64_t v10 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v11 = *(void *)(v4 + 72);
    do
    {
      sub_1AD8C9338(v10, (uint64_t)v7, type metadata accessor for SleepStageSegment);
      sub_1AD9DF760();
      swift_bridgeObjectRelease();
      sub_1AD9DC7C0();
      sub_1AD8C9454(&qword_1EB725660, MEMORY[0x1E4F26E60]);
      sub_1AD9DF650();
      uint64_t result = sub_1AD8C949C((uint64_t)v7, type metadata accessor for SleepStageSegment);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t _s13SleepHealthUI11SectionItemO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 40);
  char v8 = *(unsigned char *)(a1 + 41);
  uint64_t v10 = *(void **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v89 = v3;
  uint64_t v90 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(unsigned __int8 *)(a2 + 40);
  int v14 = *(unsigned __int8 *)(a2 + 41);
  switch(v8)
  {
    case 1:
      uint64_t v88 = *(void **)a1;
      uint64_t v85 = *(void *)(a1 + 16);
      uint64_t v18 = *(void *)(a1 + 24);
      uint64_t v17 = *(void *)(a1 + 32);
      unsigned int v86 = *(unsigned __int8 *)(a2 + 40);
      unsigned int v87 = *(unsigned __int8 *)(a1 + 40);
      if (v14 != 1) {
        goto LABEL_37;
      }
      unint64_t v19 = 0xEE0065636E656972;
      uint64_t v20 = 0x657078456E69616DLL;
      if ((_BYTE)v2)
      {
        if (v2 == 1) {
          uint64_t v21 = 0x696472616F626E6FLL;
        }
        else {
          uint64_t v21 = 0x63536567616E616DLL;
        }
        if (v2 == 1) {
          unint64_t v22 = 0xEA0000000000676ELL;
        }
        else {
          unint64_t v22 = 0xEE00656C75646568;
        }
        int v23 = *(void *)a2;
        if (!*(void *)a2)
        {
LABEL_19:
          if (v21 == v20 && v22 == v19) {
            char v24 = 1;
          }
          else {
            char v24 = sub_1AD9E02D0();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1AD8C70FC(v88, v89, v85, v18, v17, v87, 1);
          sub_1AD8C70FC(v10, v9, v90, v11, v12, v13, 1);
          return v24 & 1;
        }
      }
      else
      {
        uint64_t v21 = 0x657078456E69616DLL;
        unint64_t v22 = 0xEE0065636E656972;
        int v23 = *(void *)a2;
        if (!*(void *)a2) {
          goto LABEL_19;
        }
      }
      if (v23 == 1) {
        uint64_t v20 = 0x696472616F626E6FLL;
      }
      else {
        uint64_t v20 = 0x63536567616E616DLL;
      }
      if (v23 == 1) {
        unint64_t v19 = 0xEA0000000000676ELL;
      }
      else {
        unint64_t v19 = 0xEE00656C75646568;
      }
      goto LABEL_19;
    case 2:
      if (v14 != 2) {
        goto LABEL_35;
      }
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v26 = *(void *)(a2 + 8);
      uint64_t v82 = *(void *)(a1 + 24);
      uint64_t v27 = *(void *)(a2 + 24);
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v29 = *(void **)a1;
      sub_1AD8C71B0(v2, *(void *)(a1 + 8), v4, v82, v6, v7, 2);
      sub_1AD8C71B0(v10, v26, v90, v27, v12, v13, 2);
      sub_1AD8C70FC(v29, v89, v25, v82, v28, v7, 2);
      uint64_t v30 = v10;
      uint64_t v31 = v26;
      uint64_t v32 = v90;
      uint64_t v33 = v27;
      uint64_t v34 = v12;
      uint64_t v35 = v13;
      char v36 = 2;
      goto LABEL_34;
    case 3:
      unsigned int v87 = *(unsigned __int8 *)(a1 + 40);
      if (v14 != 3)
      {
        uint64_t v88 = *(void **)a1;
        uint64_t v85 = *(void *)(a1 + 16);
        unsigned int v86 = *(unsigned __int8 *)(a2 + 40);
        uint64_t v54 = *(void *)(a2 + 24);
        uint64_t v55 = *(void *)(a1 + 32);
        swift_bridgeObjectRetain();
        uint64_t v18 = v5;
        swift_bridgeObjectRetain();
        uint64_t v17 = v55;
        uint64_t v11 = v54;
        swift_retain();
        goto LABEL_37;
      }
      uint64_t v37 = *(void *)(a2 + 8);
      uint64_t v38 = *(void *)(a1 + 24);
      uint64_t v39 = *(void *)(a2 + 24);
      uint64_t v81 = *(void *)(a1 + 32);
      if (v2 == v10 && v3 == v37
        || (v40 = *(void *)(a1 + 16), v41 = *(void **)a1, v42 = sub_1AD9E02D0(), v2 = v41, uint64_t v4 = v40, (v42 & 1) != 0))
      {
        uint64_t v43 = v2;
        if (v4 == v90 && v38 == v39 || (v44 = v4, v45 = sub_1AD9E02D0(), uint64_t v4 = v44, (v45 & 1) != 0))
        {
          uint64_t v46 = v4;
          sub_1AD8C71B0(v10, v37, v90, v39, v12, v13, 3);
          sub_1AD8C71B0(v43, v3, v46, v38, v81, v87, 3);
          sub_1AD8C71B0(v43, v3, v46, v38, v81, v87, 3);
          sub_1AD8C71B0(v10, v37, v90, v39, v12, v13, 3);
          char v77 = sub_1AD9DEE40();
          sub_1AD8C70FC(v43, v3, v46, v38, v81, v87, 3);
          sub_1AD8C70FC(v10, v37, v90, v39, v12, v13, 3);
          sub_1AD8C70FC(v10, v37, v90, v39, v12, v13, 3);
          sub_1AD8C70FC(v43, v3, v46, v38, v81, v87, 3);
          return v77 & 1;
        }
        sub_1AD8C71B0(v43, v3, v44, v38, v81, v87, 3);
        sub_1AD8C71B0(v10, v37, v90, v39, v12, v13, 3);
        sub_1AD8C70FC(v43, v3, v44, v38, v81, v87, 3);
        uint64_t v56 = v10;
        uint64_t v57 = v37;
        uint64_t v58 = v90;
        uint64_t v59 = v39;
      }
      else
      {
        sub_1AD8C71B0(v41, v3, v40, v38, v81, v7, 3);
        sub_1AD8C71B0(v10, v37, v90, v39, v12, v13, 3);
        sub_1AD8C70FC(v41, v3, v40, v38, v81, v7, 3);
        uint64_t v56 = v10;
        uint64_t v57 = v37;
        uint64_t v58 = v90;
        uint64_t v59 = v39;
      }
      uint64_t v60 = v12;
      uint64_t v61 = v13;
      char v62 = 3;
      goto LABEL_38;
    case 4:
      if (v14 != 4)
      {
LABEL_35:
        uint64_t v85 = *(void *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 24);
        uint64_t v17 = *(void *)(a1 + 32);
        unsigned int v86 = *(unsigned __int8 *)(a2 + 40);
        unsigned int v87 = *(unsigned __int8 *)(a1 + 40);
        uint64_t v88 = *(void **)a1;
        id v53 = v2;
        goto LABEL_37;
      }
      uint64_t v48 = *(void *)(a1 + 16);
      uint64_t v49 = *(void *)(a2 + 8);
      uint64_t v83 = *(void *)(a1 + 24);
      uint64_t v50 = *(void *)(a2 + 24);
      uint64_t v51 = *(void *)(a1 + 32);
      uint64_t v52 = *(void **)a1;
      sub_1AD8C71B0(v2, *(void *)(a1 + 8), v4, v83, v6, v7, 4);
      sub_1AD8C71B0(v10, v49, v90, v50, v12, v13, 4);
      sub_1AD8C70FC(v52, v89, v48, v83, v51, v7, 4);
      uint64_t v30 = v10;
      uint64_t v31 = v49;
      uint64_t v32 = v90;
      uint64_t v33 = v50;
      uint64_t v34 = v12;
      uint64_t v35 = v13;
      char v36 = 4;
LABEL_34:
      sub_1AD8C70FC(v30, v31, v32, v33, v34, v35, v36);
      char v24 = 1;
      return v24 & 1;
    default:
      unsigned int v86 = *(unsigned __int8 *)(a2 + 40);
      unsigned int v87 = *(unsigned __int8 *)(a1 + 40);
      uint64_t v85 = *(void *)(a1 + 16);
      uint64_t v88 = *(void **)a1;
      if (*(unsigned char *)(a2 + 41))
      {
        uint64_t v15 = *(void *)(a2 + 8);
        uint64_t v16 = *(void *)(a1 + 24);
        uint64_t v17 = *(void *)(a1 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v18 = v16;
        uint64_t v9 = v15;
        swift_bridgeObjectRetain();
LABEL_37:
        sub_1AD8C71B0(v10, v9, v90, v11, v12, v86, v14);
        sub_1AD8C70FC(v88, v89, v85, v18, v17, v87, v8);
        uint64_t v56 = v10;
        uint64_t v57 = v9;
        uint64_t v58 = v90;
        uint64_t v59 = v11;
        uint64_t v60 = v12;
        uint64_t v61 = v86;
        char v62 = v14;
LABEL_38:
        sub_1AD8C70FC(v56, v57, v58, v59, v60, v61, v62);
        char v24 = 0;
      }
      else
      {
        v93[0] = *(void *)a1;
        v93[1] = v3;
        v93[2] = v4;
        v93[3] = v5;
        void v93[4] = v6;
        char v94 = v7;
        v91[0] = v10;
        v91[1] = v9;
        uint64_t v91[2] = v90;
        v91[3] = v11;
        v91[4] = v12;
        char v92 = v13;
        uint64_t v63 = v9;
        uint64_t v64 = v4;
        uint64_t v65 = v11;
        uint64_t v78 = v9;
        uint64_t v66 = v5;
        uint64_t v84 = v5;
        uint64_t v79 = v12;
        uint64_t v80 = v11;
        uint64_t v67 = v6;
        uint64_t v68 = v12;
        uint64_t v69 = v12;
        uint64_t v70 = v13;
        uint64_t v71 = v13;
        uint64_t v72 = v2;
        sub_1AD8C71B0(v10, v63, v90, v65, v68, v70, 0);
        sub_1AD8C71B0(v72, v3, v64, v66, v67, v7, 0);
        uint64_t v73 = v72;
        uint64_t v74 = v3;
        uint64_t v75 = v3;
        uint64_t v76 = v64;
        sub_1AD8C71B0(v73, v74, v64, v66, v67, v7, 0);
        sub_1AD8C71B0(v10, v78, v90, v80, v69, v71, 0);
        char v24 = _s13SleepHealthUI18PromotionViewModelV2eeoiySbAC_ACtFZ_0((uint64_t)v93, (uint64_t)v91);
        sub_1AD8C70FC(v88, v75, v76, v84, v67, v7, 0);
        sub_1AD8C70FC(v10, v78, v90, v80, v79, v86, 0);
        sub_1AD8C70FC(v10, v78, v90, v80, v79, v86, 0);
        sub_1AD8C70FC(v88, v89, v85, v84, v67, v7, 0);
      }
      return v24 & 1;
  }
}

uint64_t _s13SleepHealthUI14SectionContentV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v20 = *a1;
  uint64_t v21 = a1[2];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  if ((sub_1AD8C2100(a1[6], a2[6]) & 1) == 0)
  {
    char v14 = 0;
    return v14 & 1;
  }
  uint64_t v18 = v3;
  uint64_t v19 = v4;
  if (!v21)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v5;
    if (!v8) {
      goto LABEL_17;
    }
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  if (!v8)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v5;
    if (!v2) {
      goto LABEL_17;
    }
LABEL_15:
    char v14 = 0;
LABEL_32:
    swift_bridgeObjectRelease();
    return v14 & 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = v10;
  uint64_t v13 = v5;
  if (!v2)
  {
LABEL_12:
    if (v7)
    {
LABEL_27:
      char v14 = 0;
      goto LABEL_32;
    }
    goto LABEL_17;
  }
  if (!v7) {
    goto LABEL_15;
  }
  if (v20 == v6 && v2 == v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  char v15 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v14 = 0;
  if (v15)
  {
LABEL_17:
    if (v13)
    {
      swift_bridgeObjectRetain();
      if (v12)
      {
        uint64_t v16 = v11;
        swift_bridgeObjectRetain();
        if (v19)
        {
          if (v11)
          {
            if (v18 == v9 && v19 == v11)
            {
              swift_bridgeObjectRelease();
              char v14 = 1;
            }
            else
            {
              char v14 = sub_1AD9E02D0();
              swift_bridgeObjectRelease();
            }
            goto LABEL_32;
          }
          goto LABEL_29;
        }
LABEL_26:
        if (v16) {
          goto LABEL_27;
        }
        goto LABEL_30;
      }
      if (v19)
      {
LABEL_29:
        char v14 = 0;
        goto LABEL_32;
      }
    }
    else if (v12)
    {
      uint64_t v16 = v11;
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
LABEL_30:
    char v14 = 1;
  }
  return v14 & 1;
}

void sub_1AD8C70FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 2:
    case 4:

      break;
    default:
      return;
  }
}

id sub_1AD8C71B0(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    case 2:
    case 4:
      uint64_t result = result;
      break;
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText()
{
  uint64_t result = qword_1E9A4B230;
  if (!qword_1E9A4B230) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1AD8C72F8(uint64_t a1)
{
}

void sub_1AD8C732C(uint64_t a1)
{
}

unint64_t sub_1AD8C7364()
{
  unint64_t result = qword_1E9A4B1E0;
  if (!qword_1E9A4B1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B1E0);
  }
  return result;
}

uint64_t sub_1AD8C73B8()
{
  return MEMORY[0x1E4F3EDF8];
}

uint64_t sub_1AD8C73C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8C73E0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1AD8C7400()
{
  unint64_t result = qword_1E9A4B1E8;
  if (!qword_1E9A4B1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B1E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionsViewModel()
{
  return &type metadata for SectionsViewModel;
}

uint64_t destroy for SectionContent(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 40))
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SectionContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRetain();
  swift_retain();
LABEL_6:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SectionContent(void *a1, void *a2)
{
  uint64_t v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_1AD8C7710((uint64_t)a1);
      uint64_t v5 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
  }
  uint64_t v7 = a1 + 3;
  uint64_t v8 = a2 + 3;
  uint64_t v9 = a2[5];
  if (a1[5])
  {
    if (v9)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[5] = a2[5];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_1AD8C7710((uint64_t)(a1 + 3));
      uint64_t v10 = a2[5];
      *uint64_t v7 = *v8;
      a1[5] = v10;
    }
  }
  else if (v9)
  {
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v11 = *v8;
    a1[5] = a2[5];
    *uint64_t v7 = v11;
  }
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AD8C7710(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for SectionContent(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = v4;
      swift_release();
      goto LABEL_6;
    }
    sub_1AD8C7710(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
LABEL_6:
  if (!*(void *)(a1 + 40))
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6)
  {
    sub_1AD8C7710(a1 + 24);
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v6;
  swift_release();
LABEL_11:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionContent()
{
  return &type metadata for SectionContent;
}

uint64_t destroy for AnyTextProvider()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

void *_s13SleepHealthUI15AnyTextProviderVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AnyTextProvider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnyTextProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AnyTextProvider()
{
  return &type metadata for AnyTextProvider;
}

uint64_t dispatch thunk of TextProvider.text.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TextProvider.stringRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void *initializeBufferWithCopyOfBuffer for StaticTextProvider(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for StaticTextProvider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for StaticTextProvider(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticTextProvider(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StaticTextProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticTextProvider()
{
  return &type metadata for StaticTextProvider;
}

uint64_t destroy for SleepDeepLinkTextProvider()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s13SleepHealthUI25SleepDeepLinkTextProviderVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SleepDeepLinkTextProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for SleepDeepLinkTextProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for SleepDeepLinkTextProvider()
{
  return &type metadata for SleepDeepLinkTextProvider;
}

void destroy for SectionItem(uint64_t a1)
{
}

uint64_t initializeWithCopy for SectionItem(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 41);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 40);
  sub_1AD8C71B0(*(id *)a2, v4, v5, v6, v7, v9, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 41) = v8;
  return a1;
}

uint64_t assignWithCopy for SectionItem(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 41);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 40);
  sub_1AD8C71B0(*(id *)a2, v4, v5, v6, v7, v9, v8);
  uint64_t v10 = *(void **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v15 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v9;
  char v16 = *(unsigned char *)(a1 + 41);
  *(unsigned char *)(a1 + 41) = v8;
  sub_1AD8C70FC(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SectionItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  __int16 v4 = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  char v11 = *(unsigned char *)(a1 + 41);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v4;
  sub_1AD8C70FC(v5, v7, v6, v8, v9, v12, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1AD8C7EC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

uint64_t sub_1AD8C7EC8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SectionItem()
{
  return &type metadata for SectionItem;
}

unint64_t sub_1AD8C7EE4()
{
  unint64_t result = qword_1E9A4B1F0;
  if (!qword_1E9A4B1F0)
  {
    sub_1AD8C7F54();
    sub_1AD8C2E20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B1F0);
  }
  return result;
}

void sub_1AD8C7F54()
{
  if (!qword_1E9A4B1F8)
  {
    sub_1AD8C8F00(255, &qword_1E9A4B118, (uint64_t)&type metadata for SectionItem, MEMORY[0x1E4FBB320]);
    sub_1AD8C2D0C(255, &qword_1E9A4B120, (uint64_t (*)(uint64_t))sub_1AD8C2B74, MEMORY[0x1E4F3EBC8]);
    sub_1AD8C2DA4();
    unint64_t v0 = sub_1AD9DF270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B1F8);
    }
  }
}

uint64_t sub_1AD8C8040()
{
  return sub_1AD8C80B0(&qword_1E9A4B200, &qword_1E9A4B208, MEMORY[0x1E4F3EE00]);
}

uint64_t sub_1AD8C8078()
{
  return sub_1AD8C80B0(&qword_1E9A4B210, &qword_1E9A4B218, MEMORY[0x1E4F3E2F8]);
}

uint64_t sub_1AD8C80B0(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1AD8C8F00(255, a2, a3, MEMORY[0x1E4FBB718]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AD8C812C()
{
  unint64_t result = qword_1E9A4B220;
  if (!qword_1E9A4B220)
  {
    sub_1AD8C820C(255, &qword_1E9A4B228, (uint64_t (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3D750]);
    sub_1AD8C9454(&qword_1E9A4B1D8, (void (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B220);
  }
  return result;
}

void sub_1AD8C820C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void *sub_1AD8C8278(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1AD9DCA50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    char *v9 = *v10;
    *((void *)v9 + 1) = *((void *)v10 + 1);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1AD8C835C(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DCA50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_1AD8C83D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_1AD8C846C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1AD8C8514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1AD8C8598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1AD8C8634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1AD8C8648);
}

uint64_t sub_1AD8C8648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AD9DCA50();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1AD8C8718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1AD8C872C);
}

uint64_t sub_1AD8C872C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1AD9DCA50();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  }
  return result;
}

uint64_t sub_1AD8C87EC()
{
  uint64_t result = sub_1AD9DCA50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AD8C888C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1AD8C88A8()
{
  if (!qword_1E9A4B240)
  {
    sub_1AD8C89D4(255);
    sub_1AD8C8C70(255, &qword_1E9A4B280, MEMORY[0x1E4F3E2F8], (uint64_t)&type metadata for ClearTextCaseFromEnvironment, MEMORY[0x1E4F3CC10]);
    sub_1AD85F688();
    sub_1AD8C9454((unint64_t *)&qword_1E9A4B288, sub_1AD8C89D4);
    sub_1AD8C8CC0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4B240);
    }
  }
}

void sub_1AD8C89D4(uint64_t a1)
{
}

void sub_1AD8C8A08()
{
  if (!qword_1E9A4B250)
  {
    sub_1AD8C820C(255, (unint64_t *)&qword_1E9A4B258, (uint64_t (*)(uint64_t))sub_1AD8C8AB0, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, MEMORY[0x1E4F3CC10]);
    sub_1AD8C8BE4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4B250);
    }
  }
}

void sub_1AD8C8AB0()
{
  if (!qword_1E9A4B260)
  {
    sub_1AD8C8C70(255, &qword_1E9A4B268, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F3ECD0]);
    sub_1AD8C8B60();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1E9A4B260);
    }
  }
}

unint64_t sub_1AD8C8B60()
{
  unint64_t result = qword_1E9A4B270;
  if (!qword_1E9A4B270)
  {
    sub_1AD8C8C70(255, &qword_1E9A4B268, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F3ECD0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B270);
  }
  return result;
}

void sub_1AD8C8BE4()
{
  if (!qword_1E9A4B278)
  {
    sub_1AD8C8C70(255, &qword_1E9A4B268, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F3ECD0]);
    unint64_t v0 = sub_1AD9DDFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B278);
    }
  }
}

void sub_1AD8C8C70(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_1AD8C8CC0()
{
  unint64_t result = qword_1E9A4B290;
  if (!qword_1E9A4B290)
  {
    sub_1AD8C8C70(255, &qword_1E9A4B280, MEMORY[0x1E4F3E2F8], (uint64_t)&type metadata for ClearTextCaseFromEnvironment, MEMORY[0x1E4F3CC10]);
    sub_1AD8C8D64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B290);
  }
  return result;
}

unint64_t sub_1AD8C8D64()
{
  unint64_t result = qword_1E9A4B298;
  if (!qword_1E9A4B298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B298);
  }
  return result;
}

void sub_1AD8C8DB8(uint64_t a1)
{
}

void sub_1AD8C8E00(uint64_t a1)
{
}

void sub_1AD8C8E34(uint64_t a1)
{
}

void sub_1AD8C8E7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_1AD8C8F00(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD8C8F4C()
{
  return sub_1AD9DE1E0();
}

uint64_t sub_1AD8C8F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8C8FDC(uint64_t a1)
{
  type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  sub_1AD8C45F8(a1);
  return MEMORY[0x1F40F8598]();
}

unint64_t sub_1AD8C9060()
{
  unint64_t result = qword_1E9A4B2B8;
  if (!qword_1E9A4B2B8)
  {
    sub_1AD8C8DB8(255);
    sub_1AD8C89D4(255);
    sub_1AD8C8C70(255, &qword_1E9A4B280, MEMORY[0x1E4F3E2F8], (uint64_t)&type metadata for ClearTextCaseFromEnvironment, MEMORY[0x1E4F3CC10]);
    sub_1AD85F688();
    sub_1AD8C9454((unint64_t *)&qword_1E9A4B288, sub_1AD8C89D4);
    sub_1AD8C8CC0();
    swift_getOpaqueTypeConformance2();
    sub_1AD8C9454(&qword_1E9A4B2C0, sub_1AD8C8E00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B2B8);
  }
  return result;
}

uint64_t objectdestroyTm_1()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText() - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  uint64_t v3 = sub_1AD9DCA50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD8C92D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return sub_1AD8C46E4(v2);
}

uint64_t sub_1AD8C9338(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1AD8C93A0()
{
  unint64_t result = qword_1E9A4BAE0;
  if (!qword_1E9A4BAE0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4BAE0);
  }
  return result;
}

_OWORD *sub_1AD8C93F8(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26) = *(long long *)((char *)a1 + 26);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_1AD8C9410(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1AD8C9454(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD8C949C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD8C94FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1AD8C9558(uint64_t a1, uint64_t a2)
{
  sub_1AD8C8C70(0, &qword_1E9A4B138, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, MEMORY[0x1E4F3D750]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8C95E8(uint64_t a1)
{
  sub_1AD8C8C70(0, &qword_1E9A4B138, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, MEMORY[0x1E4F3D750]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD8C9670(uint64_t a1)
{
  return a1;
}

uint64_t sub_1AD8C96C4(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1AD8C96D8(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AD8C96EC()
{
  return sub_1AD8C32B8(&qword_1E9A4B2D0, sub_1AD8C8E34, (void (*)(void))sub_1AD8C9060, (void (*)(void))sub_1AD87BF14);
}

id static UIAlertController.createOccurrenceChangeAlert(calendar:occurrence:weekdays:changes:changeNextHandler:changeAllHandler:cancelHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15 = *a4;
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_1AD9DD550();
  __swift_project_value_buffer(v16, (uint64_t)qword_1E9A4D288);
  id v17 = a2;
  uint64_t v18 = sub_1AD9DD530();
  os_log_type_t v19 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v46 = a5;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v44 = (void *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    uint64_t aBlock = v45;
    *(_DWORD *)uint64_t v20 = 136446466;
    uint64_t v21 = sub_1AD9E04F0();
    sub_1AD838978(v21, v22, &aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2114;
    os_log_type_t type = v19;
    uint64_t v23 = a3;
    uint64_t v24 = v15;
    uint64_t v25 = a6;
    id v26 = v17;
    sub_1AD9DFEA0();
    *uint64_t v44 = v17;

    a6 = v25;
    uint64_t v15 = v24;
    a3 = v23;
    _os_log_impl(&dword_1AD834000, v18, type, "[%{public}s] creating action sheet for occurrence: %{public}@", (uint8_t *)v20, 0x16u);
    sub_1AD8CB228(0, (unint64_t *)&qword_1EB724F40, (uint64_t (*)(uint64_t))sub_1AD8B4794, MEMORY[0x1E4FBB718]);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v44, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v45, -1, -1);
    uint64_t v27 = v20;
    a5 = v46;
    MEMORY[0x1B3E6D1A0](v27, -1, -1);
  }
  else
  {
  }
  uint64_t aBlock = v15;
  _sSo17UIAlertControllerC13SleepHealthUIE18changeAlertMessage8calendar10occurrence8weekdays7changesSS10Foundation8CalendarV_So27HKSPSleepScheduleOccurrenceCSo12HKSPWeekdaysVAC0pQ9EditModelC9ChangeSetVtFZ_0(a1, v17, a3, &aBlock);
  uint64_t v28 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(self, sel_alertControllerWithTitle_message_preferredStyle_, 0, v28, 0);

  uint64_t aBlock = v15;
  _sSo17UIAlertControllerC13SleepHealthUIE16changeNextAction10occurrence7changesSSSo27HKSPSleepScheduleOccurrenceC_AC0lM9EditModelC9ChangeSetVtFZ_0(v17, &aBlock);
  swift_retain();
  uint64_t v30 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v50 = 1107296256;
  uint64_t v51 = sub_1AD9199DC;
  uint64_t v52 = &block_descriptor_8;
  uint64_t v31 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v32 = self;
  id v33 = objc_msgSend(v32, sel_actionWithTitle_style_handler_, v30, 0, v31);
  _Block_release(v31);

  objc_msgSend(v29, sel_addAction_, v33);
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v34 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_retain();
  uint64_t v35 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  uint64_t v53 = a7;
  uint64_t v54 = a8;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v50 = 1107296256;
  uint64_t v51 = sub_1AD9199DC;
  uint64_t v52 = &block_descriptor_3;
  char v36 = _Block_copy(&aBlock);
  swift_release();
  id v37 = objc_msgSend(v32, sel_actionWithTitle_style_handler_, v35, 0, v36, 0xE000000000000000);
  _Block_release(v36);

  objc_msgSend(v29, sel_addAction_, v37);
  id v38 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  sub_1AD8CB060(a9);
  uint64_t v39 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (a9)
  {
    uint64_t v53 = a9;
    uint64_t v54 = a10;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v50 = 1107296256;
    uint64_t v51 = sub_1AD9199DC;
    uint64_t v52 = &block_descriptor_6;
    uint64_t v40 = _Block_copy(&aBlock);
    swift_release();
  }
  else
  {
    uint64_t v40 = 0;
  }
  id v41 = objc_msgSend(v32, (SEL)&selRef_setNeedsDisplay, v39, 1, v40, 0xE000000000000000);
  _Block_release(v40);

  objc_msgSend(v29, (SEL)&selRef_hk_appErrorColor + 3, v41);
  return v29;
}

id sub_1AD8C9DC8(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_1AD9DD550();
  __swift_project_value_buffer(v11, (uint64_t)qword_1E9A4D288);
  id v12 = a2;
  uint64_t v13 = sub_1AD9DD530();
  os_log_type_t v14 = sub_1AD9DFBE0();
  uint64_t v37 = a5;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v36 = a4;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = a3;
    uint64_t aBlock = v34;
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v17 = sub_1AD9E04F0();
    sub_1AD838978(v17, v18, &aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2114;
    uint64_t v19 = v10;
    id v20 = v12;
    sub_1AD9DFEA0();
    *uint64_t v16 = v12;

    uint64_t v10 = v19;
    _os_log_impl(&dword_1AD834000, v13, v14, "[%{public}s] creating issue alert occurrence: %{public}@", (uint8_t *)v15, 0x16u);
    sub_1AD8CB228(0, (unint64_t *)&qword_1EB724F40, (uint64_t (*)(uint64_t))sub_1AD8B4794, MEMORY[0x1E4FBB718]);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v16, -1, -1);
    swift_arrayDestroy();
    a3 = v35;
    MEMORY[0x1B3E6D1A0](v34, -1, -1);
    uint64_t v21 = v15;
    a4 = v36;
    MEMORY[0x1B3E6D1A0](v21, -1, -1);
  }
  else
  {
  }
  uint64_t aBlock = v10;
  sub_1AD8CB070(&aBlock);
  unint64_t v22 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v23 = objc_msgSend(self, sel_alertControllerWithTitle_message_preferredStyle_, 0, v22, 1);

  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v24 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  swift_retain();
  uint64_t v25 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v40 = 1107296256;
  id v41 = sub_1AD9199DC;
  char v42 = &block_descriptor_9_0;
  id v26 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v27 = self;
  id v28 = objc_msgSend(v27, sel_actionWithTitle_style_handler_, v25, 0, v26, 0xE000000000000000);
  _Block_release(v26);

  objc_msgSend(v23, sel_addAction_, v28);
  id v29 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  sub_1AD8CB060(v37);
  uint64_t v30 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  if (v37)
  {
    uint64_t v43 = v37;
    uint64_t v44 = a6;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v40 = 1107296256;
    id v41 = sub_1AD9199DC;
    char v42 = &block_descriptor_12;
    uint64_t v31 = _Block_copy(&aBlock);
    swift_release();
  }
  else
  {
    uint64_t v31 = 0;
  }
  id v32 = objc_msgSend(v27, sel_actionWithTitle_style_handler_, v30, 1, v31, 0xE000000000000000);
  _Block_release(v31);

  objc_msgSend(v23, sel_addAction_, v32);
  return v23;
}

uint64_t sub_1AD8CA330(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      if (qword_1EB724E38 != -1) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 2:
      if (qword_1EB724E38 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    case 3:
      if (qword_1EB724E38 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    case 4:
      if (qword_1EB724E38 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    case 5:
      if (qword_1EB724E38 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    case 6:
      if (qword_1EB724E38 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    case 7:
      if (qword_1EB724E38 == -1) {
        goto LABEL_16;
      }
LABEL_18:
      swift_once();
LABEL_16:
      id v2 = (id)qword_1EB727930;
      uint64_t v1 = sub_1AD9DCA70();

      break;
    default:
      uint64_t v1 = 0;
      break;
  }
  return v1;
}

uint64_t _sSo17UIAlertControllerC13SleepHealthUIE18changeAlertMessage8calendar10occurrence8weekdays7changesSS10Foundation8CalendarV_So27HKSPSleepScheduleOccurrenceCSo12HKSPWeekdaysVAC0pQ9EditModelC9ChangeSetVtFZ_0(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_1AD9DCE90();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  id v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a4;
  uint64_t v14 = a3;
  if (v13 == 1)
  {
    uint64_t v14 = a3;
    if (objc_msgSend(a2, sel_crossesDayBoundary)) {
      uint64_t v14 = HKSPWeekdaysShiftBackOneDay();
    }
  }
  if (v14 == *MEMORY[0x1E4FA5488])
  {
    if (qword_1EB724E38 == -1) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
  if (!HKSPWeekdaysIsSingleDay())
  {
    id v23 = (void *)sub_1AD9DCDA0();
    uint64_t v24 = HKSPWeekendDaysInCalendar();

    if (v14 == v24)
    {
      if (qword_1EB724E38 == -1) {
        goto LABEL_16;
      }
      goto LABEL_29;
    }
    uint64_t v25 = (void *)sub_1AD9DCDA0();
    uint64_t v26 = HKSPWeekdayDaysInCalendar();

    if (v14 == v26)
    {
      if (qword_1EB724E38 == -1)
      {
LABEL_16:
        id v27 = (id)qword_1EB727930;
        uint64_t v28 = sub_1AD9DCA70();

        return v28;
      }
LABEL_29:
      swift_once();
      goto LABEL_16;
    }
    id v29 = (void *)sub_1AD9DCDA0();
    id v30 = (id)HKSPDaysForWeekdaysInCalendar();

    sub_1AD9DCE50();
    if (sub_1AD9DCE70() != 2
      || (uint64_t v31 = sub_1AD9DCE80(), (v32 & 1) != 0)
      || (uint64_t v33 = v31, v34 = sub_1AD9DCE60(), (v35 & 1) != 0))
    {
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      char v42 = (void *)sub_1AD9DCDA0();
      int v43 = HKSPWeekdaysAreConsecutiveInCalendar();

      if (!v43)
      {
        if (qword_1EB724E38 != -1) {
          swift_once();
        }
        id v51 = (id)qword_1EB727930;
        sub_1AD9DCA70();

        sub_1AD8CB228(0, (unint64_t *)&qword_1E9A4A978, (uint64_t (*)(uint64_t))sub_1AD8C93A0, MEMORY[0x1E4FBBE00]);
        uint64_t v52 = swift_allocObject();
        *(_OWORD *)(v52 + 16) = xmmword_1AD9E3070;
        id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
        objc_msgSend(v53, sel_setFormattingContext_, 2);
        uint64_t v54 = NSDateFormatter.localizedCommaSeparatedList(using:calendar:useShortSymbols:)(v14, a1, 0);
        uint64_t v56 = v55;

        *(void *)(v52 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v52 + 64) = sub_1AD89E5A8();
        *(void *)(v52 + 32) = v54;
        *(void *)(v52 + 40) = v56;
        uint64_t v50 = sub_1AD9DF6E0();
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      uint64_t v57 = sub_1AD8CA330(v59);
      uint64_t v38 = v44;
      uint64_t v39 = sub_1AD8CA330(v58);
      uint64_t v41 = v45;
      if (qword_1EB724E38 == -1)
      {
LABEL_24:
        id v46 = (id)qword_1EB727930;
        sub_1AD9DCA70();

        sub_1AD8CB228(0, (unint64_t *)&qword_1E9A4A978, (uint64_t (*)(uint64_t))sub_1AD8C93A0, MEMORY[0x1E4FBBE00]);
        uint64_t v47 = swift_allocObject();
        *(_OWORD *)(v47 + 16) = xmmword_1AD9E3080;
        uint64_t v48 = MEMORY[0x1E4FBB1A0];
        *(void *)(v47 + 56) = MEMORY[0x1E4FBB1A0];
        unint64_t v49 = sub_1AD89E5A8();
        *(void *)(v47 + 32) = v57;
        *(void *)(v47 + 40) = v38;
        *(void *)(v47 + 96) = v48;
        *(void *)(v47 + 104) = v49;
        *(void *)(v47 + 64) = v49;
        *(void *)(v47 + 72) = v39;
        *(void *)(v47 + 80) = v41;
        uint64_t v50 = sub_1AD9DF6E0();
        swift_bridgeObjectRelease();
LABEL_28:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        return v50;
      }
    }
    else
    {
      uint64_t v36 = v34;
      uint64_t v57 = sub_1AD8CA330(v33);
      uint64_t v38 = v37;
      uint64_t v39 = sub_1AD8CA330(v36);
      uint64_t v41 = v40;
      if (qword_1EB724E38 == -1) {
        goto LABEL_24;
      }
    }
    swift_once();
    goto LABEL_24;
  }
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v15 = (id)qword_1EB727930;
  sub_1AD9DCA70();

  sub_1AD8CB228(0, (unint64_t *)&qword_1E9A4A978, (uint64_t (*)(uint64_t))sub_1AD8C93A0, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1AD9E3070;
  uint64_t v17 = HKSPDayForWeekdays();
  uint64_t v18 = sub_1AD8CA330(v17);
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v16 + 64) = sub_1AD89E5A8();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  uint64_t v21 = sub_1AD9DF6E0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t _sSo17UIAlertControllerC13SleepHealthUIE16changeNextAction10occurrence7changesSSSo27HKSPSleepScheduleOccurrenceC_AC0lM9EditModelC9ChangeSetVtFZ_0(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 == 1)
  {
    if (qword_1EB724E38 == -1) {
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  id v3 = objc_msgSend(a1, sel_alarmConfiguration);
  unsigned int v4 = objc_msgSend(v3, sel_isEnabled);

  if ((v2 & 4) == 0 && !v4)
  {
    if (qword_1EB724E38 == -1) {
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if (qword_1EB724E38 != -1) {
LABEL_10:
  }
    swift_once();
LABEL_9:
  id v5 = (id)qword_1EB727930;
  uint64_t v6 = sub_1AD9DCA70();

  return v6;
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_1AD8CB060(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1AD8CB070(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    char v3 = 2;
  }
  else if ((v1 & 2) != 0)
  {
    char v3 = 3;
  }
  else if ((v1 & 4) != 0)
  {
    char v3 = 4;
  }
  else
  {
    if ((v1 & 8) == 0) {
      return 0;
    }
    char v3 = 5;
  }
  sub_1AD8CB228(0, (unint64_t *)&qword_1E9A4A978, (uint64_t (*)(uint64_t))sub_1AD8C93A0, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1AD9E3080;
  uint64_t v5 = sub_1AD8B33D4(v3);
  uint64_t v7 = v6;
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  *(void *)(v4 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v9 = sub_1AD89E5A8();
  *(void *)(v4 + 64) = v9;
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v10 = (id)qword_1EB727930;
  uint64_t v11 = sub_1AD9DCA70();
  uint64_t v13 = v12;

  *(void *)(v4 + 96) = v8;
  *(void *)(v4 + 104) = v9;
  *(void *)(v4 + 72) = v11;
  *(void *)(v4 + 80) = v13;
  uint64_t v2 = sub_1AD9DF6E0();
  swift_bridgeObjectRelease();
  return v2;
}

void sub_1AD8CB228(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for ListRowBackgroundColor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

void *assignWithCopy for ListRowBackgroundColor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for ListRowBackgroundColor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRowBackgroundColor(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRowBackgroundColor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListRowBackgroundColor()
{
  return &type metadata for ListRowBackgroundColor;
}

uint64_t sub_1AD8CB414()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1AD8CB430(uint64_t a1, uint64_t a2)
{
  sub_1AD8CB784();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8CB87C(0, &qword_1E9A4B2E8, (uint64_t (*)(uint64_t))sub_1AD8CB834, (uint64_t (*)(uint64_t))sub_1AD8CB784, MEMORY[0x1E4F3D748]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)v22 - v12;
  sub_1AD8CB834(0);
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v22[1] = a2;
    swift_retain();
    uint64_t v19 = sub_1AD9DF1B0();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v18, a1, v5);
    *(void *)&v18[*(int *)(v15 + 36)] = v19;
    sub_1AD8CBAB4((uint64_t)v18, (uint64_t)v13);
    swift_storeEnumTagMultiPayload();
    sub_1AD8CB994();
    sub_1AD8CBA6C(&qword_1E9A4B310, (void (*)(uint64_t))sub_1AD8CB784);
    sub_1AD9DE470();
    return sub_1AD8CBB18((uint64_t)v18);
  }
  else
  {
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v21(v9, a1, v5);
    v21(v13, (uint64_t)v9, v5);
    swift_storeEnumTagMultiPayload();
    sub_1AD8CB994();
    sub_1AD8CBA6C(&qword_1E9A4B310, (void (*)(uint64_t))sub_1AD8CB784);
    sub_1AD9DE470();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_1AD8CB760()
{
  return sub_1AD9DDDA0();
}

uint64_t sub_1AD8CB77C(uint64_t a1)
{
  return sub_1AD8CB430(a1, *v1);
}

void sub_1AD8CB784()
{
  if (!qword_1E9A4B2D8)
  {
    sub_1AD8CB7E0();
    unint64_t v0 = sub_1AD9DE4F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B2D8);
    }
  }
}

unint64_t sub_1AD8CB7E0()
{
  unint64_t result = qword_1E9A4B2E0;
  if (!qword_1E9A4B2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B2E0);
  }
  return result;
}

void sub_1AD8CB834(uint64_t a1)
{
}

void sub_1AD8CB87C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_1AD8CB900()
{
  if (!qword_1E9A4B2F8)
  {
    sub_1AD9DE5D0();
    sub_1AD8CBA6C(&qword_1E9A4B300, MEMORY[0x1E4F3DC98]);
    unint64_t v0 = sub_1AD9DE4E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B2F8);
    }
  }
}

unint64_t sub_1AD8CB994()
{
  unint64_t result = qword_1E9A4B308;
  if (!qword_1E9A4B308)
  {
    sub_1AD8CB834(255);
    sub_1AD8CBA6C(&qword_1E9A4B310, (void (*)(uint64_t))sub_1AD8CB784);
    sub_1AD8CBA6C((unint64_t *)&qword_1E9A4B318, (void (*)(uint64_t))sub_1AD8CB900);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B308);
  }
  return result;
}

uint64_t sub_1AD8CBA6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD8CBAB4(uint64_t a1, uint64_t a2)
{
  sub_1AD8CB834(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8CBB18(uint64_t a1)
{
  sub_1AD8CB834(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1AD8CBB78()
{
  unint64_t result = qword_1E9A4B320;
  if (!qword_1E9A4B320)
  {
    sub_1AD8CB87C(255, &qword_1E9A4B328, (uint64_t (*)(uint64_t))sub_1AD8CB834, (uint64_t (*)(uint64_t))sub_1AD8CB784, MEMORY[0x1E4F3D750]);
    sub_1AD8CB994();
    sub_1AD8CBA6C(&qword_1E9A4B310, (void (*)(uint64_t))sub_1AD8CB784);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B320);
  }
  return result;
}

id HKSPSleepStore.settings.getter()
{
  v19[1] = *(id *)MEMORY[0x1E4F143B8];
  swift_getObjectType();
  v19[0] = 0;
  id v1 = objc_msgSend(v0, sel_currentSleepSettingsWithError_, v19);
  if (v1)
  {
    id v2 = v1;
    id v3 = v19[0];
  }
  else
  {
    id v4 = v19[0];
    uint64_t v5 = (void *)sub_1AD9DCB10();

    swift_willThrow();
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_1AD9DD550();
    __swift_project_value_buffer(v6, (uint64_t)qword_1EB725018);
    id v7 = v5;
    id v8 = v5;
    uint64_t v9 = sub_1AD9DD530();
    os_log_type_t v10 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      v19[0] = v12;
      *(_DWORD *)uint64_t v11 = 136446466;
      uint64_t v13 = sub_1AD9E04F0();
      sub_1AD838978(v13, v14, (uint64_t *)v19);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2082;
      id v15 = v5;
      sub_1AD869CF0();
      uint64_t v16 = sub_1AD9DF730();
      sub_1AD838978(v16, v17, (uint64_t *)v19);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v9, v10, "[%{public}s] Error retrieving current sleep settings: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v12, -1, -1);
      MEMORY[0x1B3E6D1A0](v11, -1, -1);
    }
    else
    {
    }
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5560]), sel_init);
  }
  return v2;
}

id HKSPSleepStore.schedule.getter()
{
  v21[1] = *(id *)MEMORY[0x1E4F143B8];
  swift_getObjectType();
  v21[0] = 0;
  id v1 = objc_msgSend(v0, sel_currentSleepScheduleWithError_, v21);
  id v2 = v21[0];
  if (v1)
  {
    id v3 = v21[0];
  }
  else if (v21[0])
  {
    uint64_t v5 = qword_1EB725030;
    id v6 = v21[0];
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_1AD9DD550();
    __swift_project_value_buffer(v7, (uint64_t)qword_1EB725018);
    id v8 = v6;
    uint64_t v9 = sub_1AD9DD530();
    os_log_type_t v10 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t type = v10;
      uint64_t v11 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      v21[0] = v20;
      *(_DWORD *)uint64_t v11 = 136446466;
      uint64_t v12 = sub_1AD9E04F0();
      sub_1AD838978(v12, v13, (uint64_t *)v21);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2082;
      id v14 = v8;
      id v15 = objc_msgSend(v14, sel_description);
      uint64_t v16 = sub_1AD9DF710();
      unint64_t v18 = v17;

      sub_1AD838978(v16, v18, (uint64_t *)v21);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v9, type, "[%{public}s] Error retrieving current sleep schedule: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v20, -1, -1);
      MEMORY[0x1B3E6D1A0](v11, -1, -1);
    }
    else
    {
    }
  }

  return v1;
}

void HKSPSleepStore.applySettingsModifications(settingsModifications:completion:)(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  id v10 = HKSPSleepStore.settings.getter();
  objc_msgSend(v10, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD8CC618();
  swift_dynamicCast();
  uint64_t v11 = v16;
  a1(v16);
  uint64_t v12 = (void *)swift_allocObject();
  long long v12[2] = a3;
  uint64_t v12[3] = a4;
  v12[4] = ObjectType;
  aBlock[4] = sub_1AD8CC698;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AD8A776C;
  aBlock[3] = &block_descriptor_9;
  unint64_t v13 = _Block_copy(aBlock);
  id v14 = v11;
  sub_1AD8CB060(a3);
  swift_release();
  objc_msgSend(v5, sel_saveCurrentSleepSettings_completion_, v14, v13);
  _Block_release(v13);
}

void sub_1AD8CC364(char a1, id a2, void (*a3)(id, uint64_t))
{
  if ((a1 & 1) == 0)
  {
    if (a2)
    {
      id v5 = a2;
    }
    else
    {
      sub_1AD8CC6BC();
      id v5 = (id)swift_allocError();
    }
    id v6 = a2;
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_1AD9DD550();
    __swift_project_value_buffer(v7, (uint64_t)qword_1EB725018);
    id v8 = v5;
    id v9 = v5;
    id v10 = sub_1AD9DD530();
    os_log_type_t v11 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v20 = v13;
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v14 = sub_1AD9E04F0();
      sub_1AD838978(v14, v15, &v20);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      id v16 = v5;
      sub_1AD869CF0();
      uint64_t v17 = sub_1AD9DF730();
      sub_1AD838978(v17, v18, &v20);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v10, v11, "[%{public}s] Error saving sleep settings: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v13, -1, -1);
      MEMORY[0x1B3E6D1A0](v12, -1, -1);

      if (!a3) {
        goto LABEL_14;
      }
    }
    else
    {

      if (!a3)
      {
LABEL_14:

        return;
      }
    }
    id v19 = v5;
    a3(v5, 1);

    goto LABEL_14;
  }
  if (a3) {
    a3(0, 0);
  }
}

unint64_t sub_1AD8CC618()
{
  unint64_t result = qword_1E9A4B330;
  if (!qword_1E9A4B330)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B330);
  }
  return result;
}

uint64_t sub_1AD8CC658()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_1AD8CC698(char a1, void *a2)
{
  sub_1AD8CC364(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

unint64_t sub_1AD8CC6BC()
{
  unint64_t result = qword_1E9A4B338;
  if (!qword_1E9A4B338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B338);
  }
  return result;
}

ValueMetadata *_s12UnknownErrorVMa()
{
  return &_s12UnknownErrorVN;
}

void DeepLinkOpener.open(url:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_msgSend(self, sel_defaultWorkspace);
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = (void *)sub_1AD9DCB50();
    id v8 = sub_1AD8CCBF4();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a2;
    *(void *)(v9 + 24) = a3;
    v11[4] = sub_1AD8CCD78;
    v11[5] = v9;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1107296256;
    void v11[2] = sub_1AD8CCB30;
    _OWORD v11[3] = &block_descriptor_10;
    id v10 = _Block_copy(v11);
    sub_1AD8CB060(a2);
    swift_release();
    objc_msgSend(v6, sel_openURL_configuration_completionHandler_, v7, v8, v10);
    _Block_release(v10);
  }
}

uint64_t sub_1AD8CC868(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1AD9DF3D0();
  uint64_t v21 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v8);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1AD9DF400();
  uint64_t v11 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8CCDBC();
  unint64_t v15 = (void *)sub_1AD9DFCA0();
  id v16 = (void *)swift_allocObject();
  _OWORD v16[2] = a3;
  v16[3] = a4;
  uint64_t v16[4] = a2;
  aBlock[4] = sub_1AD8CCE44;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AD8D34D8;
  aBlock[3] = &block_descriptor_6_0;
  uint64_t v17 = _Block_copy(aBlock);
  sub_1AD8CB060(a3);
  id v18 = a2;
  swift_release();
  sub_1AD9DF3F0();
  aBlock[0] = MEMORY[0x1E4FBC860];
  sub_1AD8CCE74();
  sub_1AD8CCF54(0, &qword_1E9A4C330, MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
  sub_1AD8CCECC();
  sub_1AD9DFF40();
  MEMORY[0x1B3E6BC50](0, v14, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v20);
}

uint64_t sub_1AD8CCB30(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = sub_1AD9DF600();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1AD8CCBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

id sub_1AD8CCBF4()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F224A0]), sel_init);
  sub_1AD8CCF54(0, &qword_1E9A4B340, (uint64_t (*)(uint64_t))sub_1AD87B818, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AD9E3080;
  *(void *)(inited + 32) = sub_1AD9DF710();
  *(void *)(inited + 40) = v2;
  uint64_t v3 = MEMORY[0x1E4FBB390];
  *(void *)(inited + 72) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 80) = sub_1AD9DF710();
  *(void *)(inited + 88) = v4;
  *(void *)(inited + 120) = v3;
  *(unsigned char *)(inited + 96) = 1;
  sub_1AD86409C(inited);
  uint64_t v5 = (void *)sub_1AD9DF5F0();
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_setFrontBoardOptions_, v5);

  objc_msgSend(v0, sel_setSensitive_, 1);
  return v0;
}

uint64_t sub_1AD8CCD38()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1AD8CCD78(uint64_t a1, void *a2)
{
  return sub_1AD8CC868(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t dispatch thunk of DeepLinkOpening.open(url:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for DeepLinkOpener()
{
  return &type metadata for DeepLinkOpener;
}

unint64_t sub_1AD8CCDBC()
{
  unint64_t result = qword_1EB724D50;
  if (!qword_1EB724D50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB724D50);
  }
  return result;
}

uint64_t sub_1AD8CCDFC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1AD8CCE44()
{
  id v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(*(void *)(v0 + 32));
  }
  return result;
}

unint64_t sub_1AD8CCE74()
{
  unint64_t result = qword_1E9A4AD50;
  if (!qword_1E9A4AD50)
  {
    sub_1AD9DF3D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4AD50);
  }
  return result;
}

unint64_t sub_1AD8CCECC()
{
  unint64_t result = qword_1E9A4AD60;
  if (!qword_1E9A4AD60)
  {
    sub_1AD8CCF54(255, &qword_1E9A4C330, MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4AD60);
  }
  return result;
}

void sub_1AD8CCF54(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t SleepOnboardingUserInfo.sleepDurationGoal.getter()
{
  swift_beginAccess();
  objc_msgSend(*(id *)(v0 + 40), sel_sleepDurationGoal);
  uint64_t result = 0;
  if (v2 > 0.0)
  {
    objc_msgSend(*(id *)(v0 + 40), sel_sleepDurationGoal);
    return v3;
  }
  return result;
}

id SleepOnboardingUserInfo.isSleepModeEnabled.getter()
{
  swift_beginAccess();
  return objc_msgSend(*(id *)(v0 + 48), sel_scheduledSleepMode);
}

id SleepOnboardingUserInfo.windDownDuration.getter()
{
  swift_beginAccess();
  return objc_msgSend(*(id *)(v0 + 40), sel_windDownTime);
}

BOOL SleepOnboardingUserInfo.isWindDownEnabled.getter()
{
  swift_beginAccess();
  objc_msgSend(*(id *)(v0 + 40), sel_windDownTime);
  return v1 > 0.0;
}

BOOL static SleepOnboardingUserInfo.SleepScheduleType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepOnboardingUserInfo.SleepScheduleType.hash(into:)()
{
  return sub_1AD9E03B0();
}

uint64_t SleepOnboardingUserInfo.SleepScheduleType.hashValue.getter()
{
  return sub_1AD9E03E0();
}

id SleepOnboardingUserInfo.context.getter@<X0>(uint64_t a1@<X8>)
{
  double v2 = *(void **)(v1 + 16);
  char v3 = *(unsigned char *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return v2;
}

void sub_1AD8CD1A8(uint64_t a1)
{
  swift_beginAccess();
  char v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = a1;
}

uint64_t (*sub_1AD8CD1F0())()
{
  return j_j__swift_endAccess;
}

void sub_1AD8CD244(void **a1, uint64_t *a2)
{
  double v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 48) = v2;
  id v5 = v2;
}

id sub_1AD8CD29C()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 48);
  return v1;
}

void sub_1AD8CD2E0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = a1;
}

uint64_t (*sub_1AD8CD328())()
{
  return j_j__swift_endAccess;
}

void sub_1AD8CD37C(void **a1, uint64_t *a2)
{
  double v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;
  id v5 = v2;
}

void *sub_1AD8CD3D4()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  return v1;
}

void sub_1AD8CD418(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 56);
  *(void *)(v1 + 56) = a1;
}

uint64_t (*sub_1AD8CD460())()
{
  return j__swift_endAccess;
}

uint64_t sub_1AD8CD4B4()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_1AD8CD4E8(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_1AD8CD528())()
{
  return j_j__swift_endAccess;
}

id SleepOnboardingUserInfo.gregorianCalendarCache.getter()
{
  return *(id *)(v0 + 72);
}

uint64_t sub_1AD8CD584@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 80);
  return result;
}

uint64_t sub_1AD8CD5C8(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 80) = v2;
  return result;
}

uint64_t (*sub_1AD8CD608())()
{
  return j_j__swift_endAccess;
}

uint64_t SleepOnboardingUserInfo.onboardingManager.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD841030(v1 + 88, a1);
}

uint64_t sub_1AD8CD668()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t sub_1AD8CD69C(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 128) = a1;
  return result;
}

uint64_t (*sub_1AD8CD6DC())()
{
  return j_j__swift_endAccess;
}

uint64_t SleepOnboardingUserInfo.__allocating_init(onboardingManager:onboardingContext:sleepSchedule:sleepScheduleType:sleepSettings:)(void *a1, uint64_t *a2, void *a3, char *a4, void *a5)
{
  swift_allocObject();
  uint64_t v10 = sub_1AD8CE2F4(a1, a2, a3, a4, a5);

  return v10;
}

uint64_t SleepOnboardingUserInfo.init(onboardingManager:onboardingContext:sleepSchedule:sleepScheduleType:sleepSettings:)(void *a1, uint64_t *a2, void *a3, char *a4, void *a5)
{
  uint64_t v6 = sub_1AD8CE2F4(a1, a2, a3, a4, a5);

  return v6;
}

id SleepOnboardingUserInfo.windDownDuration.setter(double a1)
{
  swift_beginAccess();
  return objc_msgSend(*(id *)(v1 + 40), sel_setWindDownTime_, a1);
}

BOOL sub_1AD8CD828()
{
  return (*(unsigned char *)(v0 + 24) & 1) == 0;
}

id *SleepOnboardingUserInfo.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 11));
  return v0;
}

uint64_t SleepOnboardingUserInfo.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 11));
  return swift_deallocClassInstance();
}

id sub_1AD8CD8E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (id *)(*a1 + 40);
  swift_beginAccess();
  id result = objc_msgSend(*(id *)(v3 + 40), sel_sleepDurationGoal);
  double v7 = v6;
  uint64_t v8 = 0;
  if (v7 > 0.0) {
    id result = objc_msgSend(*v4, sel_sleepDurationGoal, 0.0);
  }
  *(void *)a2 = v8;
  *(unsigned char *)(a2 + 8) = v7 <= 0.0;
  return result;
}

id SleepOnboardingUserInfo.sleepDurationGoal.setter(uint64_t a1, char a2)
{
  if (a2) {
    *(double *)&a1 = 0.0;
  }
  swift_beginAccess();
  return objc_msgSend(*(id *)(v2 + 40), sel_setSleepDurationGoal_, *(double *)&a1);
}

void (*SleepOnboardingUserInfo.sleepDurationGoal.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  objc_msgSend(*(id *)(v1 + 40), sel_sleepDurationGoal);
  double v5 = v4;
  uint64_t v6 = 0;
  if (v5 > 0.0) {
    objc_msgSend(*(id *)(v1 + 40), sel_sleepDurationGoal, 0.0);
  }
  v3[3] = v6;
  *((unsigned char *)v3 + 32) = v5 <= 0.0;
  return sub_1AD8CDA8C;
}

void sub_1AD8CDA8C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  double v2 = *(double *)(*(void *)a1 + 24);
  if (*(unsigned char *)(*(void *)a1 + 32)) {
    double v2 = 0.0;
  }
  objc_msgSend(*(id *)(*(void *)(*(void *)a1 + 40) + 40), sel_setSleepDurationGoal_, v2);
  free(v1);
}

void (*SleepOnboardingUserInfo.windDownDuration.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  objc_msgSend(*(id *)(v1 + 40), sel_windDownTime);
  v3[3] = v4;
  return sub_1AD8CDB68;
}

void sub_1AD8CDB68(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  objc_msgSend(*(id *)(*(void *)(*(void *)a1 + 32) + 40), sel_setWindDownTime_, *(double *)(*(void *)a1 + 24));
  free(v1);
}

id SleepOnboardingUserInfo.isWindDownEnabled.setter(char a1)
{
  double v2 = (id *)(v1 + 40);
  if (a1)
  {
    swift_beginAccess();
    id result = objc_msgSend(*v2, sel_windDownTime);
    if (v4 == 0.0) {
      return objc_msgSend(*v2, sel_setWindDownTime_, *MEMORY[0x1E4FA5498] * 60.0);
    }
  }
  else
  {
    swift_beginAccess();
    return objc_msgSend(*v2, sel_setWindDownTime_, 0.0);
  }
  return result;
}

void (*SleepOnboardingUserInfo.isWindDownEnabled.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  objc_msgSend(*(id *)(v1 + 40), sel_windDownTime);
  *((unsigned char *)v3 + 32) = v4 > 0.0;
  return sub_1AD8CDCE0;
}

void sub_1AD8CDCE0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int v2 = *(unsigned __int8 *)(*(void *)a1 + 32);
  uint64_t v3 = *(void **)(*(void *)(*(void *)a1 + 24) + 40);
  double v4 = 0.0;
  if (v2)
  {
    objc_msgSend(v3, sel_windDownTime, 0.0);
    if (v5 != 0.0) {
      goto LABEL_5;
    }
    uint64_t v3 = *(void **)(v1[3] + 40);
    double v4 = *MEMORY[0x1E4FA5498] * 60.0;
  }
  objc_msgSend(v3, sel_setWindDownTime_, v4);
LABEL_5:
  free(v1);
}

void SleepOnboardingUserInfo.isSleepModeEnabled.setter(char a1)
{
  swift_beginAccess();
  if (a1) {
    uint64_t v3 = 0x4000;
  }
  else {
    uint64_t v3 = 0;
  }
  objc_msgSend(*(id *)(v1 + 48), sel_setScheduledSleepMode_, a1 & 1);
  id v4 = *(id *)(v1 + 48);
  objc_msgSend(v4, sel_setSleepModeOptions_, (unint64_t)objc_msgSend(v4, sel_sleepModeOptions) & 0xFFFFFFFFFFFFBFFFLL | v3);
}

void (*SleepOnboardingUserInfo.isSleepModeEnabled.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = objc_msgSend(*(id *)(v1 + 48), sel_scheduledSleepMode);
  return sub_1AD8CDE7C;
}

void sub_1AD8CDE7C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  SleepOnboardingUserInfo.isSleepModeEnabled.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

uint64_t SleepOnboardingUserInfo.hasWatch.getter()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsSleepTracking.getter()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsSleepStages.getter()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 112))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsRespiratoryRate.getter()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsWristTemperature.getter()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 128))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsHealthStatus.getter()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 136))(v1, v2) & 1;
}

uint64_t sub_1AD8CE0CC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(*(void *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(v1, v2) & 1;
}

uint64_t sub_1AD8CE128()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(*(void *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v2) & 1;
}

uint64_t sub_1AD8CE184()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(*(void *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 112))(v1, v2) & 1;
}

uint64_t sub_1AD8CE1E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(*(void *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v1, v2) & 1;
}

uint64_t sub_1AD8CE23C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(*(void *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 128))(v1, v2) & 1;
}

uint64_t sub_1AD8CE298()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((void *)(*(void *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 136))(v1, v2) & 1;
}

uint64_t sub_1AD8CE2F4(void *a1, uint64_t *a2, void *a3, char *a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = *a2;
  char v11 = *((unsigned char *)a2 + 8);
  uint64_t v12 = a2[2];
  char v35 = *a4;
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 64) = 1;
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2AC98]), sel_init);
  *(unsigned char *)(v6 + 128) = 0;
  *(void *)(v6 + 72) = v13;
  *(void *)(v6 + 16) = v10;
  *(unsigned char *)(v6 + 24) = v11;
  *(void *)(v6 + 32) = v12;
  sub_1AD841030((uint64_t)a1, v6 + 88);
  if (a3) {
    id v14 = a3;
  }
  else {
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5540]), sel_init);
  }
  id v15 = a3;
  objc_msgSend(v14, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4ABE8);
  swift_dynamicCast();
  *(void *)(v6 + 40) = v36;
  id v16 = (id *)(v6 + 40);
  if (a5) {
    id v17 = a5;
  }
  else {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5560]), sel_init);
  }
  id v18 = a5;
  objc_msgSend(v17, sel_mutableCopy);

  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4B330);
  swift_dynamicCast();
  *(void *)(v6 + 48) = v36;
  if (a3)
  {
    id v19 = objc_msgSend(v15, sel_occurrences);
    sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
    unint64_t v20 = sub_1AD9DF860();

    if (v20 >> 62) {
      goto LABEL_23;
    }
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v21; uint64_t v21 = sub_1AD9E0190())
    {
      id v33 = v18;
      uint64_t v34 = v16;
      id v18 = (id)(v20 & 0xC000000000000001);
      uint64_t v22 = 4;
      id v16 = (id *)&selRef_animateWithDuration_animations_;
      while (1)
      {
        id v23 = v18 ? (id)MEMORY[0x1B3E6BFF0](v22 - 4, v20) : *(id *)(v20 + 8 * v22);
        uint64_t v24 = v23;
        uint64_t v25 = v22 - 3;
        if (__OFADD__(v22 - 4, 1)) {
          break;
        }
        if (objc_msgSend(v23, sel_isRepeating))
        {
          swift_bridgeObjectRelease_n();
          objc_msgSend(v24, sel_mutableCopy);

          sub_1AD9DFF20();
          swift_unknownObjectRelease();
          sub_1AD837214(0, (unint64_t *)&unk_1E9A4D9E0);
          if (swift_dynamicCast()) {
            uint64_t v26 = v36;
          }
          else {
            uint64_t v26 = 0;
          }
          goto LABEL_21;
        }

        ++v22;
        if (v25 == v21)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v26 = 0;
LABEL_21:
          id v18 = v33;
          id v16 = v34;
          goto LABEL_26;
        }
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = 0;
LABEL_26:
  swift_beginAccess();
  id v27 = *(void **)(v6 + 56);
  *(void *)(v6 + 56) = v26;

  *(unsigned char *)(v6 + 80) = v35;
  uint64_t v28 = a1[3];
  uint64_t v29 = a1[4];
  __swift_project_boxed_opaque_existential_1Tm(a1, v28);
  char v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 144))(v28, v29);
  swift_beginAccess();
  *(unsigned char *)(v6 + 128) = v30 & 1;
  if ((*(unsigned char *)(v6 + 24) & 1) == 0)
  {
    double v31 = *MEMORY[0x1E4FA5498] * 60.0;
    swift_beginAccess();
    objc_msgSend(*v16, sel_setWindDownTime_, v31);
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v6;
}

unint64_t sub_1AD8CE74C()
{
  unint64_t result = qword_1E9A4B348;
  if (!qword_1E9A4B348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B348);
  }
  return result;
}

id sub_1AD8CE7A0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  id v4 = *(void **)(v3 + 40);
  *a2 = v4;
  return v4;
}

id sub_1AD8CE7FC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  id v4 = *(void **)(v3 + 48);
  *a2 = v4;
  return v4;
}

id sub_1AD8CE858@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  id v4 = *(void **)(v3 + 56);
  *a2 = v4;
  return v4;
}

uint64_t sub_1AD8CE8B4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 64);
  return result;
}

uint64_t sub_1AD8CE8FC(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 64) = v2;
  return result;
}

uint64_t sub_1AD8CE940@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 80);
  return result;
}

uint64_t sub_1AD8CE988(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 80) = v2;
  return result;
}

uint64_t sub_1AD8CE9CC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 128);
  return result;
}

uint64_t sub_1AD8CEA14(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 128) = v2;
  return result;
}

id sub_1AD8CEA5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    double v3 = 0.0;
  }
  else {
    double v3 = *(double *)a1;
  }
  swift_beginAccess();
  return objc_msgSend(*(id *)(v2 + 40), sel_setSleepDurationGoal_, v3);
}

id sub_1AD8CEAC8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  id result = objc_msgSend(*(id *)(v3 + 40), sel_windDownTime);
  *a2 = v5;
  return result;
}

id sub_1AD8CEB1C(double *a1, uint64_t *a2)
{
  double v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return objc_msgSend(*(id *)(v3 + 40), sel_setWindDownTime_, v2);
}

id sub_1AD8CEB78@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  id result = objc_msgSend(*(id *)(v3 + 40), sel_windDownTime);
  *a2 = v5 > 0.0;
  return result;
}

id sub_1AD8CEBD4(char *a1)
{
  return SleepOnboardingUserInfo.isWindDownEnabled.setter(*a1);
}

id sub_1AD8CEBFC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  id result = objc_msgSend(*(id *)(v3 + 48), sel_scheduledSleepMode);
  *a2 = (_BYTE)result;
  return result;
}

void sub_1AD8CEC50(char *a1)
{
}

uint64_t type metadata accessor for SleepOnboardingUserInfo()
{
  return self;
}

uint64_t method lookup function for SleepOnboardingUserInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepOnboardingUserInfo);
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSchedule.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSchedule.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSchedule.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSettings.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSettings.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSettings.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.suggestedSleepScheduleOccurrence.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.suggestedSleepScheduleOccurrence.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.suggestedSleepScheduleOccurrence.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.requestNotificationAuthorization.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.requestNotificationAuthorization.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.requestNotificationAuthorization.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepScheduleType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepScheduleType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepScheduleType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.healthStatusEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.healthStatusEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.healthStatusEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.__allocating_init(onboardingManager:onboardingContext:sleepSchedule:sleepScheduleType:sleepSettings:)()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.isFullOnboardingFlow.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

unsigned char *storeEnumTagSinglePayload for SleepOnboardingUserInfo.SleepScheduleType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *id result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD8CF070);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepOnboardingUserInfo.SleepScheduleType()
{
  return &type metadata for SleepOnboardingUserInfo.SleepScheduleType;
}

id sub_1AD8CF0A8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v58 = a7;
  id v59 = a1;
  uint64_t v60 = a5;
  uint64_t v61 = a6;
  uint64_t v12 = sub_1AD9DCF10();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  id v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_1AD9DD550();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)qword_1EB725958);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
  swift_bridgeObjectRetain_n();
  id v19 = sub_1AD9DD530();
  os_log_type_t v20 = sub_1AD9DFBE0();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v57 = a8;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v55 = v18;
    uint64_t v23 = v22;
    uint64_t v54 = swift_slowAlloc();
    *(void *)&long long aBlock = v54;
    *(_DWORD *)uint64_t v23 = 136446722;
    uint64_t v24 = sub_1AD9E04F0();
    uint64_t v56 = a3;
    v68[0] = sub_1AD838978(v24, v25, (uint64_t *)&aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    sub_1AD8CFEE0();
    uint64_t v26 = sub_1AD9E0280();
    v68[0] = sub_1AD838978(v26, v27, (uint64_t *)&aBlock);
    a3 = v56;
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    *(_WORD *)(v23 + 22) = 2080;
    swift_bridgeObjectRetain();
    v68[0] = sub_1AD838978(a3, a4, (uint64_t *)&aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1AD834000, v19, v20, "[%{public}s] Cell provider called for indexPath %s itemIdentifier %s", (uint8_t *)v23, 0x20u);
    uint64_t v28 = v54;
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v28, -1, -1);
    MEMORY[0x1B3E6D1A0](v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);

    swift_bridgeObjectRelease_n();
  }
  swift_getObjectType();
  sub_1AD9DD2D0();
  if (v64)
  {
    sub_1AD843F30(&aBlock, (uint64_t)v68);
    __swift_project_boxed_opaque_existential_1Tm(v68, v68[3]);
    sub_1AD9DD230();
    uint64_t v29 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    id v30 = objc_msgSend(v59, sel_dequeueReusableCellWithIdentifier_, v29);

    if (v30)
    {
      swift_getObjectType();
      if (swift_conformsToProtocol2()) {
        id v31 = v30;
      }
      else {
        id v31 = 0;
      }
      if (v31)
      {
        swift_getObjectType();
        sub_1AD841030((uint64_t)v68, (uint64_t)&aBlock);
        uint64_t v32 = a3;
        id v33 = v30;
        sub_1AD9DD2F0();

        a3 = v32;
      }
      if (v58)
      {
        objc_msgSend(v30, sel_setBackgroundColor_);
      }
      else
      {
        if (objc_msgSend(v59, sel_style) == (id)2)
        {
          id v39 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
          uint64_t v65 = sub_1AD8F05CC;
          uint64_t v66 = 0;
          *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
          *((void *)&aBlock + 1) = 1107296256;
          uint64_t v63 = sub_1AD8F0900;
          uint64_t v64 = &block_descriptor_11;
          uint64_t v40 = _Block_copy(&aBlock);
          id v41 = v30;
          id v42 = objc_msgSend(v39, sel_initWithDynamicProvider_, v40);
          _Block_release(v40);
          swift_release();
          objc_msgSend(v41, sel_setBackgroundColor_, v42);
        }
        else
        {
          int v43 = self;
          id v44 = v30;
          id v42 = objc_msgSend(v43, sel_systemBackgroundColor);
          objc_msgSend(v44, sel_setBackgroundColor_, v42);
        }
      }
    }
    else if (!v58)
    {
      objc_msgSend(v59, sel_style);
    }
    swift_bridgeObjectRetain_n();
    uint64_t v45 = sub_1AD9DD530();
    os_log_type_t v46 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = a3;
      uint64_t v49 = swift_slowAlloc();
      *(void *)&long long aBlock = v49;
      *(_DWORD *)uint64_t v47 = 136446466;
      uint64_t v50 = sub_1AD9E04F0();
      uint64_t v67 = sub_1AD838978(v50, v51, (uint64_t *)&aBlock);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v67 = sub_1AD838978(v48, a4, (uint64_t *)&aBlock);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1AD834000, v45, v46, "[%{public}s] Returning cell for item %s", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v49, -1, -1);
      MEMORY[0x1B3E6D1A0](v47, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v68);
  }
  else
  {
    sub_1AD886AB4((uint64_t)&aBlock);
    swift_bridgeObjectRetain_n();
    uint64_t v34 = sub_1AD9DD530();
    os_log_type_t v35 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = a3;
      uint64_t v38 = swift_slowAlloc();
      *(void *)&long long aBlock = v38;
      *(_DWORD *)uint64_t v36 = 136446210;
      swift_bridgeObjectRetain();
      v68[0] = sub_1AD838978(v37, a4, (uint64_t *)&aBlock);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1AD834000, v34, v35, "The CellProvider block called us back with an item that no longer exists. Item Identifier: %{public}s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v38, -1, -1);
      MEMORY[0x1B3E6D1A0](v36, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D08]), sel_init);
  }
  return v30;
}

uint64_t sub_1AD8CF8FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1AD8CFF38();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((unsigned char *)v0 + 49) = 1;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_1AD9DD550();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EB725958);
  uint64_t v10 = sub_1AD9DD530();
  os_log_type_t v11 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = v4;
    uint64_t v14 = v13;
    uint64_t v23 = v13;
    uint64_t v20 = v5;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v15 = sub_1AD9E04F0();
    uint64_t v22 = sub_1AD838978(v15, v16, &v23);
    uint64_t v5 = v20;
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v10, v11, "[%{public}s] Applying diffable snapshot", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v17 = v14;
    uint64_t v4 = v21;
    MEMORY[0x1B3E6D1A0](v17, -1, -1);
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
  }

  *((unsigned char *)v1 + 50) = *((unsigned char *)v1 + 48);
  swift_getObjectType();
  sub_1AD9DD2E0();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v1;
  *(void *)(v18 + 24) = v2;
  swift_retain();
  sub_1AD9DD6A0();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1AD8CFBD4(uint64_t a1)
{
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v9 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, &v9);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Finished applying snapshot", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  *(unsigned char *)(a1 + 50) = 0;
}

uint64_t sub_1AD8CFD5C()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SleepDiffableTableViewAdaptor()
{
  return self;
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

unint64_t sub_1AD8CFEE0()
{
  unint64_t result = qword_1E9A4B350;
  if (!qword_1E9A4B350)
  {
    sub_1AD9DCF10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B350);
  }
  return result;
}

void sub_1AD8CFF38()
{
  if (!qword_1E9A4AFF0)
  {
    unint64_t v0 = sub_1AD9DD660();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4AFF0);
    }
  }
}

uint64_t sub_1AD8CFFA0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1AD8CFFD8()
{
  sub_1AD8CFBD4(*(void *)(v0 + 16));
}

uint64_t dispatch thunk of ScheduleOccurrenceEditModelConsuming.apply(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

id SleepOnboardingManager.analyticsManager.getter()
{
  return *(id *)(v0 + 16);
}

id SleepOnboardingManager.healthStore.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t SleepOnboardingManager.notificationManager.getter()
{
  return swift_retain();
}

uint64_t SleepOnboardingManager.sleepActionsStore.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SleepOnboardingManager.sleepCoachingStore.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SleepOnboardingManager.sleepTrackingStore.getter()
{
  return swift_unknownObjectRetain();
}

id SleepOnboardingManager.sleepStore.getter()
{
  return *(id *)(v0 + 64);
}

uint64_t SleepOnboardingManager.sleepScheduleProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD841030(v1 + 72, a1);
}

uint64_t SleepOnboardingManager.sleepSettingsProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD841030(v1 + 112, a1);
}

void *SleepOnboardingManager.__allocating_init(sleepStore:healthStore:)(void *a1, void *a2)
{
  type metadata accessor for HealthStatusFeatureProvider();
  os_log_type_t v4 = (void *)swift_allocObject();
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B068]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E4F29DC8], a2);
  uint64_t v6 = sub_1AD837214(0, (unint64_t *)&qword_1E9A4B360);
  uint64_t v7 = MEMORY[0x1E4F66930];
  v4[5] = v6;
  v4[6] = v7;
  v4[2] = v5;
  sub_1AD9DD1C0();
  v4[7] = sub_1AD9DD1B0();
  type metadata accessor for SleepOnboardingManager();
  unint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = sub_1AD8D5298(a1, a2, (uint64_t)v4, v8);

  return v9;
}

void *SleepOnboardingManager.__allocating_init(sleepStore:healthStore:healthStatusFeatureProvider:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  uint64_t v10 = sub_1AD8D5788(a1, a2, v9, v3, v7, v8);

  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  return v10;
}

void *SleepOnboardingManager.init(sleepStore:healthStore:healthStatusFeatureProvider:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  MEMORY[0x1F4188790](v9, v9);
  os_log_type_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = sub_1AD8D54FC(a1, a2, (uint64_t)v11, v3, v7, v8);

  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  return v13;
}

id sub_1AD8D02E4()
{
  return sub_1AD8D0BEC((SEL *)&selRef_hksp_hasActivePairedDevice);
}

id sub_1AD8D02F0()
{
  sub_1AD9DF710();
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  uint64_t v1 = (void *)sub_1AD9DF6D0();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2) {
    return 0;
  }
  id v3 = objc_msgSend(v2, sel_BOOLForKey_, *MEMORY[0x1E4F2BCD0]);

  return v3;
}

uint64_t sub_1AD8D03A4()
{
  v37[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(v0 + 56);
  v37[0] = 0;
  id v2 = objc_msgSend(v1, sel_isFeatureCapabilitySupportedOnActivePairedDeviceWithError_, v37);
  id v3 = v37[0];
  if (v2
    && (os_log_type_t v4 = v2,
        id v5 = v37[0],
        unsigned int v6 = objc_msgSend(v4, sel_BOOLValue),
        v4,
        v37[0] = 0,
        id v7 = objc_msgSend(v1, sel_isCurrentOnboardingVersionCompletedWithError_, v37),
        id v3 = v37[0],
        v7))
  {
    uint64_t v8 = v7;
    id v9 = v37[0];
    unsigned int v10 = objc_msgSend(v8, sel_BOOLValue);

    sub_1AD9DF710();
    id v11 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
    uint64_t v12 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initWithSuiteName_, v12);

    if (v13)
    {
      unsigned int v14 = objc_msgSend(v13, sel_BOOLForKey_, *MEMORY[0x1E4F2BCD0]);
    }
    else
    {
      unsigned int v14 = 0;
    }
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_1AD9DD550();
    __swift_project_value_buffer(v29, (uint64_t)qword_1EB725958);
    id v30 = sub_1AD9DD530();
    os_log_type_t v31 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      id v33 = (void *)swift_slowAlloc();
      v37[0] = v33;
      *(_DWORD *)uint64_t v32 = 136446978;
      uint64_t v34 = sub_1AD9E04F0();
      sub_1AD838978(v34, v35, (uint64_t *)v37);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 1026;
      sub_1AD9DFEA0();
      *(_WORD *)(v32 + 18) = 1026;
      sub_1AD9DFEA0();
      *(_WORD *)(v32 + 24) = 1026;
      sub_1AD9DFEA0();
      _os_log_impl(&dword_1AD834000, v30, v31, "[%{public}s] Watch onboarding check: isSupported:%{BOOL,public}d hasOnboarded:%{BOOL,public}d isWatchAgeGated:%{BOOL,public}d", (uint8_t *)v32, 0x1Eu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v33, -1, -1);
      MEMORY[0x1B3E6D1A0](v32, -1, -1);
    }

    if (v6) {
      return (v10 | v14) ^ 1;
    }
  }
  else
  {
    id v15 = v3;
    unint64_t v16 = (void *)sub_1AD9DCB10();

    swift_willThrow();
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_1AD9DD550();
    __swift_project_value_buffer(v17, (uint64_t)qword_1EB725958);
    id v18 = v16;
    id v19 = v16;
    uint64_t v20 = sub_1AD9DD530();
    os_log_type_t v21 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      v37[0] = v23;
      *(_DWORD *)uint64_t v22 = 136446466;
      uint64_t v24 = sub_1AD9E04F0();
      sub_1AD838978(v24, v25, (uint64_t *)v37);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2082;
      id v26 = v16;
      sub_1AD869CF0();
      uint64_t v27 = sub_1AD9DF730();
      sub_1AD838978(v27, v28, (uint64_t *)v37);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v20, v21, "[%{public}s] Error sleep tracking capability: %{public}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v23, -1, -1);
      MEMORY[0x1B3E6D1A0](v22, -1, -1);
    }
    else
    {
    }
  }
  return 0;
}

id sub_1AD8D0900()
{
  v21[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(v0 + 48);
  v21[0] = 0;
  id v2 = objc_msgSend(v1, sel_isFeatureCapabilitySupportedOnActivePairedDeviceWithError_, v21);
  if (v2)
  {
    id v3 = v2;
    id v4 = v21[0];
    id v5 = objc_msgSend(v3, sel_BOOLValue);
  }
  else
  {
    id v6 = v21[0];
    id v7 = (void *)sub_1AD9DCB10();

    swift_willThrow();
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_1AD9DD550();
    __swift_project_value_buffer(v8, (uint64_t)qword_1EB725958);
    id v9 = v7;
    id v10 = v7;
    id v11 = sub_1AD9DD530();
    os_log_type_t v12 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      unsigned int v14 = (void *)swift_slowAlloc();
      v21[0] = v14;
      *(_DWORD *)uint64_t v13 = 136446466;
      uint64_t v15 = sub_1AD9E04F0();
      sub_1AD838978(v15, v16, (uint64_t *)v21);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2082;
      id v17 = v7;
      sub_1AD869CF0();
      uint64_t v18 = sub_1AD9DF730();
      sub_1AD838978(v18, v19, (uint64_t *)v21);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v11, v12, "[%{public}s] Unable to fetch sleep coaching state with error %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
      MEMORY[0x1B3E6D1A0](v13, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  return v5;
}

id sub_1AD8D0BE0()
{
  return sub_1AD8D0BEC((SEL *)&selRef_hksp_activePairedDeviceSupportsSleepStages);
}

id sub_1AD8D0BEC(SEL *a1)
{
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    id v3 = result;
    id v4 = [result *a1];

    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1AD8D0C4C()
{
  uint64_t v1 = sub_1AD9DD4D0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  id v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm((void *)(v0 + 152), *(void *)(v0 + 176));
  sub_1AD9DD4F0();
  id v6 = (void *)sub_1AD9DD4E0();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v7 = objc_msgSend(v6, sel_areAllRequirementsSatisfied);

  return v7;
}

id sub_1AD8D0F84()
{
  uint64_t v1 = sub_1AD9DD4D0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  id v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm((void *)(v0 + 192), *(void *)(v0 + 216));
  sub_1AD9DD4F0();
  id v6 = (void *)sub_1AD9DD4E0();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v7 = objc_msgSend(v6, sel_areAllRequirementsSatisfied);

  return v7;
}

uint64_t sub_1AD8D12BC()
{
  swift_beginAccess();
  sub_1AD841030(v0 + 232, (uint64_t)v4);
  uint64_t v1 = v5;
  uint64_t v2 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v1 & 1;
}

uint64_t sub_1AD8D134C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1 + 232;
  swift_beginAccess();
  sub_1AD841030(v3, (uint64_t)v7);
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  __swift_project_boxed_opaque_existential_1Tm(v7, v8);
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  *a2 = v3 & 1;
  return result;
}

uint64_t sub_1AD8D13E8()
{
  swift_beginAccess();
  sub_1AD841030(v0 + 232, (uint64_t)v4);
  uint64_t v1 = v5;
  uint64_t v2 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v1 & 1;
}

uint64_t sub_1AD8D1478(char a1)
{
  uint64_t v2 = v1;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1AD9DD550();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EB725958);
  uint64_t v5 = sub_1AD9DD530();
  os_log_type_t v6 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v17[0] = v8;
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v9 = sub_1AD9E04F0();
    sub_1AD838978(v9, v10, v17);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    if (a1) {
      uint64_t v11 = 1702195828;
    }
    else {
      uint64_t v11 = 0x65736C6166;
    }
    if (a1) {
      unint64_t v12 = 0xE400000000000000;
    }
    else {
      unint64_t v12 = 0xE500000000000000;
    }
    sub_1AD838978(v11, v12, v17);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v5, v6, "[%{public}s] Updating health status features enabled: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
  }

  uint64_t v13 = v2 + 232;
  swift_beginAccess();
  uint64_t v15 = *(void *)(v2 + 256);
  uint64_t v14 = *(void *)(v2 + 264);
  __swift_mutable_project_boxed_opaque_existential_1(v13, v15);
  (*(void (**)(void, uint64_t, uint64_t))(v14 + 24))(a1 & 1, v15, v14);
  return swift_endAccess();
}

void (*sub_1AD8D16DC(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[8] = v1;
  swift_beginAccess();
  sub_1AD841030(v1 + 232, (uint64_t)v3);
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  __swift_project_boxed_opaque_existential_1Tm(v3, v4);
  char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  *((unsigned char *)v3 + 72) = v6 & 1;
  return sub_1AD8D17A4;
}

void sub_1AD8D17A4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  sub_1AD8D1478(*(unsigned char *)(*(void *)a1 + 72));
  free(v1);
}

id sub_1AD8D17E4()
{
  return HKSPSleepStore.settings.getter();
}

id sub_1AD8D1808()
{
  return HKSPSleepStore.schedule.getter();
}

void sub_1AD8D182C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1AD9DD550();
  __swift_project_value_buffer(v7, (uint64_t)qword_1EB725958);
  uint64_t v8 = sub_1AD9DD530();
  os_log_type_t v9 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = a2;
    uint64_t v11 = a1;
    uint64_t v12 = swift_slowAlloc();
    aBlock[0] = v12;
    *(_DWORD *)unint64_t v10 = 136446210;
    uint64_t v13 = sub_1AD9E04F0();
    sub_1AD838978(v13, v14, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v8, v9, "[%{public}s] Fetching suggested sleep schedule", v10, 0xCu);
    swift_arrayDestroy();
    uint64_t v15 = v12;
    a1 = v11;
    a2 = v21;
    MEMORY[0x1B3E6D1A0](v15, -1, -1);
    MEMORY[0x1B3E6D1A0](v10, -1, -1);
  }

  sub_1AD870B1C();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1AD9E5930;
  *(void *)(v16 + 32) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ProactiveSuggestionProvider()), sel_init);
  *(void *)(v16 + 40) = (id)HKSPDefaultScheduleProvider();
  aBlock[0] = v16;
  sub_1AD9DF870();
  id v17 = (void *)v3[8];
  sub_1AD8D588C();
  uint64_t v18 = (void *)sub_1AD9DF850();
  swift_bridgeObjectRelease();
  unint64_t v19 = (void *)swift_allocObject();
  id v19[2] = a1;
  void v19[3] = a2;
  v19[4] = v6;
  aBlock[4] = (uint64_t)sub_1AD8D591C;
  aBlock[5] = (uint64_t)v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1AD8D1D90;
  aBlock[3] = (uint64_t)&block_descriptor_12;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v17, sel_suggestedSleepScheduleWithProviders_completion_, v18, v20);
  _Block_release(v20);
}

uint64_t sub_1AD8D1B30(uint64_t a1, uint64_t a2, id a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (a3)
  {
    id v8 = a3;
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_1AD9DD550();
    __swift_project_value_buffer(v9, (uint64_t)qword_1EB725958);
    id v10 = a3;
    id v11 = a3;
    uint64_t v12 = sub_1AD9DD530();
    os_log_type_t v13 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v22 = v15;
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v16 = sub_1AD9E04F0();
      sub_1AD838978(v16, v17, &v22);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      id v18 = a3;
      sub_1AD869CF0();
      uint64_t v19 = sub_1AD9DF730();
      sub_1AD838978(v19, v20, &v22);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v12, v13, "[%{public}s] Unable to retrieve schedule with error %{public}s)", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v15, -1, -1);
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
    }
    else
    {
    }
  }
  return a4(a1, a2);
}

void sub_1AD8D1D90(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v9 = a2;
  swift_unknownObjectRetain();
  id v8 = a4;
  v7(a2, a3, a4);
  swift_release();

  swift_unknownObjectRelease();
}

id sub_1AD8D1E34(void *a1)
{
  uint64_t v2 = v1;
  v56[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1AD9DF710();
  uint64_t v6 = v5;
  if (v4 == sub_1AD9DF710() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      goto LABEL_15;
    }
  }
  id v10 = *(void **)(v2 + 24);
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v12 = result;
    unsigned int v13 = objc_msgSend(result, sel_hksp_supportsSleep);

    if (!v13
      || (id v14 = objc_msgSend(v10, sel_profileIdentifier),
          id v15 = objc_msgSend(v14, sel_type),
          v14,
          v15 == (id)3))
    {
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v16 = sub_1AD9DD550();
      __swift_project_value_buffer(v16, (uint64_t)qword_1EB725958);
      unint64_t v17 = sub_1AD9DD530();
      os_log_type_t v18 = sub_1AD9DFBC0();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        unint64_t v20 = (void *)swift_slowAlloc();
        v56[0] = v20;
        *(_DWORD *)uint64_t v19 = 136446210;
        uint64_t v21 = sub_1AD9E04F0();
        sub_1AD838978(v21, v22, (uint64_t *)v56);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v17, v18, "[%{public}s] Sleep coaching not supported", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v20, -1, -1);
        MEMORY[0x1B3E6D1A0](v19, -1, -1);
      }
      goto LABEL_25;
    }
LABEL_15:
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_1AD9DD550();
    __swift_project_value_buffer(v23, (uint64_t)qword_1EB725958);
    id v24 = a1;
    unint64_t v25 = sub_1AD9DD530();
    os_log_type_t v26 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v54 = (void *)swift_slowAlloc();
      v56[0] = v54;
      *(_DWORD *)uint64_t v27 = 136446466;
      uint64_t v28 = sub_1AD9E04F0();
      sub_1AD838978(v28, v29, (uint64_t *)v56);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2082;
      id v30 = v24;
      uint64_t v31 = sub_1AD9DFD20();
      unint64_t v33 = v32;

      sub_1AD838978(v31, v33, (uint64_t *)v56);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v25, v26, "[%{public}s] Fetching onboarded state for feature with identifier %{public}s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v54, -1, -1);
      MEMORY[0x1B3E6D1A0](v27, -1, -1);
    }
    else
    {
    }
    sub_1AD8D5940();
    v56[0] = 0;
    id v34 = objc_msgSend((id)swift_unknownObjectRetain(), sel_isCurrentOnboardingVersionCompletedWithError_, v56);
    if (v34)
    {
      id v35 = v56[0];
      id v36 = objc_msgSend(v34, sel_BOOLValue);

      swift_unknownObjectRelease();
      return v36;
    }
    id v37 = v56[0];
    uint64_t v38 = (void *)sub_1AD9DCB10();

    swift_willThrow();
    id v39 = v24;
    id v40 = v38;
    id v41 = v39;
    id v42 = v38;
    unint64_t v17 = sub_1AD9DD530();
    os_log_type_t v43 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v17, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v55 = (void *)swift_slowAlloc();
      v56[0] = v55;
      *(_DWORD *)uint64_t v44 = 136446722;
      uint64_t v45 = sub_1AD9E04F0();
      sub_1AD838978(v45, v46, (uint64_t *)v56);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2082;
      id v47 = v41;
      uint64_t v48 = sub_1AD9DFD20();
      unint64_t v50 = v49;

      sub_1AD838978(v48, v50, (uint64_t *)v56);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 22) = 2082;
      id v51 = v38;
      sub_1AD869CF0();
      uint64_t v52 = sub_1AD9DF730();
      sub_1AD838978(v52, v53, (uint64_t *)v56);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v17, v43, "[%{public}s] Error reading onboarding completion for feature identifier %{public}s: %{public}s", (uint8_t *)v44, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v55, -1, -1);
      MEMORY[0x1B3E6D1A0](v44, -1, -1);
      swift_unknownObjectRelease();

      return 0;
    }
    swift_unknownObjectRelease();

LABEL_25:
    return 0;
  }
  __break(1u);
  return result;
}

void sub_1AD8D258C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1AD9DD550();
  __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
  uint64_t v6 = sub_1AD9DD530();
  os_log_type_t v7 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    aBlock[0] = v9;
    *(_DWORD *)id v8 = 136446210;
    uint64_t v10 = sub_1AD9E04F0();
    uint64_t aBlock[6] = sub_1AD838978(v10, v11, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v6, v7, "[%{public}s] Onboarding did complete for sleep", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v9, -1, -1);
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
  }

  uint64_t v12 = (id *)(a1 + 48);
  if (*(unsigned char *)(a1 + 24))
  {
    swift_beginAccess();
    if (objc_msgSend(*v12, sel_sleepTracking))
    {
      id v13 = *v12;
      id v14 = sub_1AD9DD530();
      os_log_type_t v15 = sub_1AD9DFBE0();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        aBlock[0] = v17;
        *(_DWORD *)uint64_t v16 = 136446210;
        uint64_t v18 = sub_1AD9E04F0();
        sub_1AD838978(v18, v19, aBlock);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1AD834000, v14, v15, "[%{public}s] Saving sleep settings", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v17, -1, -1);
        MEMORY[0x1B3E6D1A0](v16, -1, -1);
      }

      unint64_t v20 = (void *)v2[8];
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v4;
      aBlock[4] = (uint64_t)sub_1AD8D5AEC;
      aBlock[5] = v21;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1AD8A776C;
      aBlock[3] = (uint64_t)&block_descriptor_6_1;
      unint64_t v22 = _Block_copy(aBlock);
      swift_release();
      objc_msgSend(v20, sel_saveCurrentSleepSettings_options_completion_, v13, 2, v22);
      _Block_release(v22);

      sub_1AD8D29F8(a1);
    }
  }
  else
  {
    swift_beginAccess();
    objc_msgSend(*(id *)(a1 + 48), sel_setTimeInBedTracking_, 1);
    objc_msgSend(*(id *)(a1 + 48), sel_setWakeUpResults_, 1);
    swift_beginAccess();
    objc_msgSend(*(id *)(a1 + 40), sel_setEnabled_, 1);
    objc_msgSend(*(id *)(a1 + 48), sel_setSpringBoardGreetingDisabled_, 1);
    sub_1AD8D351C(a1);
  }
}

uint64_t sub_1AD8D29F8(uint64_t a1)
{
  sub_1AD8D3974((void *)*MEMORY[0x1E4F29DC0]);
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a1 + 128) == 1)
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_1AD9DD550();
    __swift_project_value_buffer(v3, (uint64_t)qword_1EB725958);
    uint64_t v4 = sub_1AD9DD530();
    os_log_type_t v5 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v10 = v7;
      *(_DWORD *)uint64_t v6 = 136446210;
      uint64_t v8 = sub_1AD9E04F0();
      sub_1AD838978(v8, v9, &v10);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v4, v5, "[%{public}s] Enabling health status notifications", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v7, -1, -1);
      MEMORY[0x1B3E6D1A0](v6, -1, -1);
    }

    return sub_1AD8D1478(1);
  }
  return result;
}

void sub_1AD8D2BE0()
{
  uint64_t v1 = *v0;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    aBlock[0] = v6;
    *(_DWORD *)os_log_type_t v5 = 136446210;
    uint64_t v7 = sub_1AD9E04F0();
    sub_1AD838978(v7, v8, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Sending tips discoverability signal", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v1;
  aBlock[4] = (uint64_t)sub_1AD8D5B28;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1AD8D34D8;
  aBlock[3] = (uint64_t)&block_descriptor_12_0;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = objc_msgSend(self, sel_blockOperationWithBlock_, v10);
  _Block_release(v10);
  swift_release();
  sub_1AD837214(0, (unint64_t *)&unk_1E9A4B3D0);
  uint64_t v12 = (void *)sub_1AD9DFC40();
  objc_msgSend(v12, sel_addOperation_, v11);
}

void sub_1AD8D2E74(uint64_t a1)
{
  id v2 = objc_allocWithZone(MEMORY[0x1E4F661C8]);
  uint64_t v3 = (void *)sub_1AD9DF6D0();
  id v4 = objc_msgSend(v2, sel_initWithIdentifier_, v3);

  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = a1;
  v8[4] = sub_1AD8D60F0;
  v8[5] = v5;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  void v8[2] = sub_1AD8D346C;
  void v8[3] = &block_descriptor_42;
  uint64_t v6 = _Block_copy(v8);
  id v7 = v4;
  swift_release();
  objc_msgSend(v7, sel_donateSignalWithCompletion_, v6);
  _Block_release(v6);
}

void sub_1AD8D2FA0(void *a1, void *a2)
{
  if (a1)
  {
    id v4 = a1;
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1AD9DD550();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
    id v6 = a2;
    id v7 = a1;
    id v8 = v6;
    id v9 = a1;
    osos_log_t log = sub_1AD9DD530();
    os_log_type_t v10 = sub_1AD9DFBC0();
    if (os_log_type_enabled(oslog, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v34 = v12;
      *(_DWORD *)uint64_t v11 = 136446722;
      uint64_t v13 = sub_1AD9E04F0();
      sub_1AD838978(v13, v14, &v34);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2082;
      id v15 = objc_msgSend(v8, sel_identifier);
      uint64_t v16 = sub_1AD9DF710();
      unint64_t v18 = v17;

      sub_1AD838978(v16, v18, &v34);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2082;
      id v19 = a1;
      sub_1AD869CF0();
      uint64_t v20 = sub_1AD9DF730();
      sub_1AD838978(v20, v21, &v34);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, oslog, v10, "[%{public}s] failed to submit tip for id %{public}s with error: %{public}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v12, -1, -1);
      MEMORY[0x1B3E6D1A0](v11, -1, -1);

      return;
    }
  }
  else
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_1AD9DD550();
    __swift_project_value_buffer(v22, (uint64_t)qword_1EB725958);
    osos_log_t log = a2;
    uint64_t v23 = sub_1AD9DD530();
    os_log_type_t v24 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v34 = v26;
      *(_DWORD *)uint64_t v25 = 136446466;
      uint64_t v27 = sub_1AD9E04F0();
      sub_1AD838978(v27, v28, &v34);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2082;
      id v29 = [oslog identifier];
      uint64_t v30 = sub_1AD9DF710();
      unint64_t v32 = v31;

      sub_1AD838978(v30, v32, &v34);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v23, v24, "[%{public}s] Tip with id %{public}s submitted successfully", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v26, -1, -1);
      MEMORY[0x1B3E6D1A0](v25, -1, -1);

      return;
    }
  }
}

void sub_1AD8D346C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1AD8D34D8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1AD8D351C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1AD9DD550();
  __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
  id v6 = sub_1AD9DD530();
  os_log_type_t v7 = sub_1AD9DFBE0();
  uint64_t v30 = v4;
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    long long aBlock = (void *)v9;
    *(_DWORD *)id v8 = 136446210;
    uint64_t v10 = sub_1AD9E04F0();
    uint64_t v37 = sub_1AD838978(v10, v11, (uint64_t *)&aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v6, v7, "[%{public}s] Saving has completed sleep coaching onboarding", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v9, -1, -1);
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
  }

  sub_1AD8D4130();
  swift_beginAccess();
  char v13 = *(unsigned char *)(a1 + 24);
  id v15 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  unint64_t v14 = *(void **)(a1 + 40);
  long long aBlock = *(void **)(a1 + 16);
  uint64_t v12 = aBlock;
  LOBYTE(v32) = v13;
  unint64_t v33 = v15;
  id v16 = v14;
  id v17 = v12;
  sub_1AD8D43A4((uint64_t)v16);

  unint64_t v18 = (id *)(a1 + 48);
  swift_beginAccess();
  id v19 = *(id *)(a1 + 48);
  uint64_t v20 = sub_1AD9DD530();
  os_log_type_t v21 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    long long aBlock = (void *)v23;
    *(_DWORD *)uint64_t v22 = 136446210;
    uint64_t v24 = v30;
    uint64_t v25 = sub_1AD9E04F0();
    sub_1AD838978(v25, v26, (uint64_t *)&aBlock);
    sub_1AD9DFEA0();
    unint64_t v18 = (id *)(a1 + 48);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v20, v21, "[%{public}s] Saving sleep settings", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v23, -1, -1);
    MEMORY[0x1B3E6D1A0](v22, -1, -1);
  }
  else
  {

    uint64_t v24 = v30;
  }
  uint64_t v27 = (void *)v2[8];
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v24;
  id v35 = sub_1AD8D6108;
  uint64_t v36 = v28;
  long long aBlock = (void *)MEMORY[0x1E4F143A8];
  uint64_t v32 = 1107296256;
  unint64_t v33 = sub_1AD8A776C;
  uint64_t v34 = &block_descriptor_49;
  id v29 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v27, sel_saveCurrentSleepSettings_options_completion_, v19, 2, v29);
  _Block_release(v29);

  if (objc_msgSend(*v18, sel_sleepTracking)) {
    sub_1AD8D29F8(a1);
  }
  sub_1AD8D3974((void *)*MEMORY[0x1E4F29DB8]);
  sub_1AD8D4A2C();
}

uint64_t sub_1AD8D3974(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1AD9DD550();
  __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
  id v6 = a1;
  os_log_type_t v7 = sub_1AD9DD530();
  os_log_type_t v8 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t type = v8;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    aBlock[0] = v24;
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v10 = sub_1AD9E04F0();
    sub_1AD838978(v10, v11, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    id v12 = v6;
    uint64_t v13 = v4;
    uint64_t v14 = sub_1AD9DFD20();
    unint64_t v16 = v15;

    uint64_t v17 = v14;
    uint64_t v4 = v13;
    sub_1AD838978(v17, v16, aBlock);
    sub_1AD9DFEA0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v7, type, "[%{public}s] Saving has onboarded feature with identifier %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v24, -1, -1);
    MEMORY[0x1B3E6D1A0](v9, -1, -1);
  }
  else
  {
  }
  unint64_t v18 = (void *)sub_1AD8D5940();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v6;
  *(void *)(v19 + 24) = v4;
  aBlock[4] = (uint64_t)sub_1AD8D60E8;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1AD8A776C;
  aBlock[3] = (uint64_t)&block_descriptor_36;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v6;
  swift_unknownObjectRetain();
  swift_release();
  objc_msgSend(v18, sel_setCurrentOnboardingVersionCompletedForCountryCode_countryCodeProvenance_date_settings_completion_, 0, 0, 0, 0, v20);
  _Block_release(v20);
  return swift_unknownObjectRelease();
}

void sub_1AD8D3C90(int a1, id a2, void *a3)
{
  if (a2)
  {
    id v5 = a2;
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_1AD9DD550();
    __swift_project_value_buffer(v6, (uint64_t)qword_1EB725958);
    id v7 = a3;
    id v8 = a2;
    id v9 = v7;
    id v10 = a2;
    osos_log_t log = sub_1AD9DD530();
    os_log_type_t v11 = sub_1AD9DFBC0();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v35 = v13;
      *(_DWORD *)uint64_t v12 = 136446722;
      uint64_t v14 = sub_1AD9E04F0();
      sub_1AD838978(v14, v15, &v35);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      id v16 = v9;
      uint64_t v17 = sub_1AD9DFD20();
      unint64_t v19 = v18;

      sub_1AD838978(v17, v19, &v35);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2082;
      id v20 = a2;
      sub_1AD869CF0();
      uint64_t v21 = sub_1AD9DF730();
      sub_1AD838978(v21, v22, &v35);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, oslog, v11, "[%{public}s] Failed to save onboarding state for feature %{public}s with error: %{public}s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v13, -1, -1);
      MEMORY[0x1B3E6D1A0](v12, -1, -1);

      return;
    }
  }
  else
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_1AD9DD550();
    __swift_project_value_buffer(v23, (uint64_t)qword_1EB725958);
    osos_log_t log = a3;
    uint64_t v24 = sub_1AD9DD530();
    os_log_type_t v25 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v35 = v27;
      *(_DWORD *)uint64_t v26 = 136446466;
      uint64_t v28 = sub_1AD9E04F0();
      sub_1AD838978(v28, v29, &v35);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      uint64_t v30 = oslog;
      uint64_t v31 = sub_1AD9DFD20();
      unint64_t v33 = v32;

      sub_1AD838978(v31, v33, &v35);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v24, v25, "[%{public}s] Saved onboarding complete for feature %{public}s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v27, -1, -1);
      MEMORY[0x1B3E6D1A0](v26, -1, -1);

      return;
    }
  }
}

void sub_1AD8D4130()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_1AD9DD550();
  __swift_project_value_buffer(v3, (uint64_t)qword_1EB725958);
  uint64_t v4 = sub_1AD9DD530();
  os_log_type_t v5 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    aBlock[0] = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    uint64_t v8 = sub_1AD9E04F0();
    sub_1AD838978(v8, v9, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v4, v5, "[%{public}s] Creating sleep focus", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
  }

  id v10 = (void *)v1[8];
  id v11 = objc_msgSend(self, sel_defaultConfigurationState);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  aBlock[4] = (uint64_t)sub_1AD8D6084;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1AD8A776C;
  aBlock[3] = (uint64_t)&block_descriptor_30;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v10, sel_createSleepFocusInState_completion_, v11, v13);
  _Block_release(v13);
}

void sub_1AD8D43A4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1AD9DD550();
  __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
  uint64_t v6 = sub_1AD9DD530();
  os_log_type_t v7 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = a1;
    uint64_t v9 = swift_slowAlloc();
    aBlock[0] = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    uint64_t v10 = sub_1AD9E04F0();
    sub_1AD838978(v10, v11, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v6, v7, "[%{public}s] Saving sleep schedule", v8, 0xCu);
    swift_arrayDestroy();
    uint64_t v12 = v9;
    a1 = v18;
    MEMORY[0x1B3E6D1A0](v12, -1, -1);
    MEMORY[0x1B3E6D1A0](v8, -1, -1);
  }

  id v13 = (id)HKSPAnalyticsScheduleChangeContext();
  sub_1AD9DF600();

  uint64_t v14 = (void *)v2[8];
  unint64_t v15 = (void *)sub_1AD9DF5F0();
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v4;
  aBlock[4] = (uint64_t)sub_1AD8D6048;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1AD8A776C;
  aBlock[3] = (uint64_t)&block_descriptor_24;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v14, sel_saveCurrentSleepSchedule_options_context_completion_, a1, 3, v15, v17);
  _Block_release(v17);
}

void sub_1AD8D468C(int a1, id a2, uint64_t a3, const char *a4, const char *a5)
{
  if (a2)
  {
    id v7 = a2;
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_1AD9DD550();
    __swift_project_value_buffer(v8, (uint64_t)qword_1EB725958);
    id v9 = a2;
    id v10 = a2;
    osos_log_t log = sub_1AD9DD530();
    os_log_type_t v11 = sub_1AD9DFBC0();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v27 = v13;
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v14 = sub_1AD9E04F0();
      sub_1AD838978(v14, v15, &v27);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      id v16 = a2;
      sub_1AD869CF0();
      uint64_t v17 = sub_1AD9DF730();
      sub_1AD838978(v17, v18, &v27);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, oslog, v11, a4, (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v13, -1, -1);
      MEMORY[0x1B3E6D1A0](v12, -1, -1);

      return;
    }
  }
  else
  {
    if (qword_1EB725658 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_1AD9DD550();
    __swift_project_value_buffer(v20, (uint64_t)qword_1EB725958);
    osos_log_t log = sub_1AD9DD530();
    os_log_type_t v21 = sub_1AD9DFBE0();
    if (os_log_type_enabled(oslog, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v27 = v23;
      *(_DWORD *)unint64_t v22 = 136446210;
      uint64_t v24 = sub_1AD9E04F0();
      sub_1AD838978(v24, v25, &v27);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, oslog, v21, a5, v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v23, -1, -1);
      MEMORY[0x1B3E6D1A0](v22, -1, -1);

      return;
    }
  }
}

void sub_1AD8D4A2C()
{
  id v1 = objc_msgSend(self, sel_sharedInstanceForHealthStore_, *(void *)(v0 + 24));
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (void *)sub_1AD9DF9F0();
    id v4 = objc_msgSend(v2, sel_displayTypeWithIdentifier_, v3);

    if (v4)
    {
      sub_1AD9DD210();
      osos_log_t log = objc_msgSend(v4, sel_objectType);
      sub_1AD9DD200();
    }
    else
    {
      if (qword_1EB725658 != -1) {
        swift_once();
      }
      uint64_t v5 = sub_1AD9DD550();
      __swift_project_value_buffer(v5, (uint64_t)qword_1EB725958);
      osos_log_t log = sub_1AD9DD530();
      os_log_type_t v6 = sub_1AD9DFBC0();
      if (os_log_type_enabled(oslog, v6))
      {
        uint64_t v7 = swift_slowAlloc();
        uint64_t v8 = (void *)swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        uint64_t v14 = v9;
        *(_DWORD *)uint64_t v7 = 136446466;
        uint64_t v10 = sub_1AD9E04F0();
        sub_1AD838978(v10, v11, &v14);
        sub_1AD9DFEA0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v7 + 12) = 2114;
        uint64_t v13 = sub_1AD9DF9F0();
        sub_1AD9DFEA0();
        *uint64_t v8 = v13;
        _os_log_impl(&dword_1AD834000, oslog, v6, "[%{public}s] Unable to create display type from identifier %{public}@", (uint8_t *)v7, 0x16u);
        sub_1AD8B473C();
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v8, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v9, -1, -1);
        MEMORY[0x1B3E6D1A0](v7, -1, -1);

        return;
      }
    }
  }
  else
  {
    __break(1u);
  }
}

id *SleepOnboardingManager.deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 9));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 14));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 19));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 29));
  return v0;
}

uint64_t SleepOnboardingManager.__deallocating_deinit()
{
  SleepOnboardingManager.deinit();
  return swift_deallocClassInstance();
}

id sub_1AD8D4DC4()
{
  return *(id *)(*(void *)v0 + 24);
}

uint64_t sub_1AD8D4DD0()
{
  return swift_retain();
}

id sub_1AD8D4DDC()
{
  return *(id *)(*(void *)v0 + 64);
}

uint64_t sub_1AD8D4DE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD841030(*v1 + 112, a1);
}

uint64_t sub_1AD8D4E0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD841030(*v1 + 72, a1);
}

uint64_t sub_1AD8D4E30()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1AD8D4E3C()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1AD8D4E48()
{
  return swift_unknownObjectRetain();
}

id sub_1AD8D4E54(uint64_t a1, uint64_t a2)
{
  return sub_1AD8D4EBC(a1, a2, (SEL *)&selRef_hksp_hasActivePairedDevice);
}

uint64_t sub_1AD8D4E60()
{
  return sub_1AD8D03A4() & 1;
}

unint64_t sub_1AD8D4E88()
{
  return (unint64_t)sub_1AD8D0900() & 1;
}

id sub_1AD8D4EB0(uint64_t a1, uint64_t a2)
{
  return sub_1AD8D4EBC(a1, a2, (SEL *)&selRef_hksp_activePairedDeviceSupportsSleepStages);
}

id sub_1AD8D4EBC(uint64_t a1, uint64_t a2, SEL *a3)
{
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v5 = result;
    id v6 = [result *a3];

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1AD8D4F1C()
{
  return (unint64_t)sub_1AD8D0C4C() & 1;
}

unint64_t sub_1AD8D4F44()
{
  return (unint64_t)sub_1AD8D0F84() & 1;
}

uint64_t sub_1AD8D4F6C()
{
  uint64_t v1 = *v0 + 232;
  swift_beginAccess();
  sub_1AD841030(v1, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1Tm(v5, v6);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  return v2 & 1;
}

uint64_t sub_1AD8D5000()
{
  uint64_t v1 = *v0 + 232;
  swift_beginAccess();
  sub_1AD841030(v1, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1Tm(v5, v6);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  return v2 & 1;
}

uint64_t sub_1AD8D5094(char a1)
{
  return sub_1AD8D1478(a1);
}

void (*sub_1AD8D50B8(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x50uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[8] = *v1;
  uint64_t v5 = v4 + 232;
  swift_beginAccess();
  sub_1AD841030(v5, (uint64_t)v3);
  uint64_t v6 = v3[3];
  uint64_t v7 = v3[4];
  __swift_project_boxed_opaque_existential_1Tm(v3, v6);
  LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  *((unsigned char *)v3 + 72) = v5 & 1;
  return sub_1AD8D17A4;
}

id sub_1AD8D5184()
{
  return HKSPSleepStore.settings.getter();
}

id sub_1AD8D51AC()
{
  return HKSPSleepStore.schedule.getter();
}

void sub_1AD8D51D4(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1AD8D51F8(void *a1)
{
  return (unint64_t)sub_1AD8D1E34(a1) & 1;
}

void sub_1AD8D5220(uint64_t a1)
{
}

void sub_1AD8D5244()
{
}

id sub_1AD8D5268()
{
  return *(id *)(*(void *)v0 + 16);
}

uint64_t type metadata accessor for SleepOnboardingManager()
{
  return self;
}

void *sub_1AD8D5298(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v26 = type metadata accessor for HealthStatusFeatureProvider();
  uint64_t v27 = &protocol witness table for HealthStatusFeatureProvider;
  *(void *)&long long v25 = a3;
  a4[2] = objc_msgSend(a1, sel_analyticsManager);
  a4[3] = a2;
  uint64_t v8 = self;
  id v9 = a2;
  id v10 = objc_msgSend(v8, sel_hksp_healthNotificationCenter);
  type metadata accessor for SleepNotificationManager();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  a4[4] = v11;
  a4[8] = a1;
  uint64_t v12 = type metadata accessor for SleepScheduleProvider();
  id v13 = a1;
  id v14 = SleepScheduleProvider.__allocating_init(sleepStore:)(v13);
  a4[12] = v12;
  a4[13] = &protocol witness table for SleepScheduleProvider;
  a4[9] = v14;
  id v15 = v13;
  id v16 = HKSPSleepStore.settings.getter();
  uint64_t v17 = (objc_class *)type metadata accessor for SleepSettingsProvider();
  id v18 = objc_allocWithZone(v17);
  id v19 = SleepSettingsProvider.init(sleepStore:sleepSettings:)(v15, v16);
  a4[17] = v17;
  a4[18] = &protocol witness table for SleepSettingsProvider;
  a4[14] = v19;
  a4[5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54E8]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E4F29DB0], v15);
  a4[6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54E8]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E4F29DB8], v15);
  a4[7] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54E8]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E4F29DC0], v15);
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B068]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E4F29DA8], v9);
  uint64_t v21 = sub_1AD837214(0, (unint64_t *)&qword_1E9A4B360);
  uint64_t v22 = MEMORY[0x1E4F66930];
  a4[22] = v21;
  a4[23] = v22;
  a4[19] = v20;
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B068]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E4F29DD0], v9);
  a4[27] = v21;
  a4[28] = v22;
  a4[24] = v23;
  sub_1AD843F30(&v25, (uint64_t)(a4 + 29));
  return a4;
}

void *sub_1AD8D54FC(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  a4[2] = objc_msgSend(a1, sel_analyticsManager);
  a4[3] = a2;
  uint64_t v12 = self;
  id v13 = a2;
  id v14 = objc_msgSend(v12, sel_hksp_healthNotificationCenter);
  type metadata accessor for SleepNotificationManager();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  a4[4] = v15;
  a4[8] = a1;
  uint64_t v16 = type metadata accessor for SleepScheduleProvider();
  id v17 = a1;
  id v18 = SleepScheduleProvider.__allocating_init(sleepStore:)(v17);
  a4[12] = v16;
  a4[13] = &protocol witness table for SleepScheduleProvider;
  a4[9] = v18;
  id v19 = v17;
  id v20 = HKSPSleepStore.settings.getter();
  uint64_t v21 = (objc_class *)type metadata accessor for SleepSettingsProvider();
  id v22 = objc_allocWithZone(v21);
  id v23 = SleepSettingsProvider.init(sleepStore:sleepSettings:)(v19, v20);
  a4[17] = v21;
  a4[18] = &protocol witness table for SleepSettingsProvider;
  a4[14] = v23;
  a4[5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54E8]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E4F29DB0], v19);
  a4[6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54E8]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E4F29DB8], v19);
  a4[7] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA54E8]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E4F29DC0], v19);
  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B068]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E4F29DA8], v13);
  uint64_t v25 = sub_1AD837214(0, (unint64_t *)&qword_1E9A4B360);
  uint64_t v26 = MEMORY[0x1E4F66930];
  a4[22] = v25;
  a4[23] = v26;
  a4[19] = v24;
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B068]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E4F29DD0], v13);
  a4[27] = v25;
  a4[28] = v26;
  a4[24] = v27;
  sub_1AD843F30(&v29, (uint64_t)(a4 + 29));
  return a4;
}

void *sub_1AD8D5788(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1, a2);
  id v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepOnboardingManager();
  id v14 = (void *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  return sub_1AD8D54FC(a1, a2, (uint64_t)v13, v14, a5, a6);
}

unint64_t sub_1AD8D588C()
{
  unint64_t result = qword_1E9A4B368;
  if (!qword_1E9A4B368)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B368);
  }
  return result;
}

uint64_t sub_1AD8D58E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD8D591C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1AD8D1B30(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t sub_1AD8D5940()
{
  uint64_t v1 = sub_1AD9DF710();
  uint64_t v3 = v2;
  if (v1 == sub_1AD9DF710() && v3 == v4)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v6 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6)
  {
LABEL_15:
    uint64_t v17 = v0 + 40;
    return *(void *)v17;
  }
  uint64_t v7 = sub_1AD9DF710();
  uint64_t v9 = v8;
  if (v7 != sub_1AD9DF710() || v9 != v10)
  {
    char v12 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = sub_1AD9DF710();
      uint64_t v15 = v14;
      if (v13 == sub_1AD9DF710() && v15 == v16)
      {
        swift_bridgeObjectRelease_n();
LABEL_19:
        uint64_t v17 = v0 + 56;
        return *(void *)v17;
      }
      char v19 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_19;
      }
    }
    uint64_t v17 = v0 + 48;
    return *(void *)v17;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v0 + 48;
  return *(void *)v17;
}

uint64_t sub_1AD8D5ADC()
{
  return swift_deallocObject();
}

void sub_1AD8D5AEC(int a1, void *a2)
{
  sub_1AD8D468C(a1, a2, *(void *)(v2 + 16), "[%{public}s] Onboarding failed to save sleep settings with error: %{public}s", "[%{public}s] Onboarding successfully saved sleep settings");
}

uint64_t sub_1AD8D5B18()
{
  return swift_deallocObject();
}

void sub_1AD8D5B28()
{
  sub_1AD8D2E74(*(void *)(v0 + 16));
}

uint64_t sub_1AD8D5B34(char *a1)
{
  return sub_1AD8D1478(*a1);
}

uint64_t dispatch thunk of SleepOnboardingManaging.healthStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.notificationManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepSettingsProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepScheduleProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepActionsStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepCoachingStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepTrackingStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.hasPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isWatchAgeGated.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isSleepTrackingOnboardableOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isSleepCoachingSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isSleepStagesSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isRespiratoryRateSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isWristTemperatureSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isHealthStatusSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.areHealthStatusNotificationsEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.areHealthStatusNotificationsEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.areHealthStatusNotificationsEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.currentSleepSettings()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.currentSleepSchedule()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.suggestedSleepSchedule(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 184))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.hasOnboardedFeature(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.saveHasCompletedOnboarding(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sendTipsDiscoverabilitySignal()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t method lookup function for SleepOnboardingManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepOnboardingManager);
}

uint64_t dispatch thunk of SleepOnboardingManager.__allocating_init(sleepStore:healthStore:healthStatusFeatureProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of SleepOnboardingManager.hasPairedWatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isWatchAgeGated.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isSleepTrackingOnboardableOnPairedWatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isSleepCoachingSupportedOnPairedWatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isSleepStagesSupportedOnPairedWatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isRespiratoryRateSupportedOnPairedWatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isWristTemperatureSupportedOnPairedWatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isHealthStatusSupportedOnPairedWatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of SleepOnboardingManager.areHealthStatusNotificationsEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of SleepOnboardingManager.areHealthStatusNotificationsEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of SleepOnboardingManager.areHealthStatusNotificationsEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of SleepOnboardingManager.currentSleepSettings()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of SleepOnboardingManager.currentSleepSchedule()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of SleepOnboardingManager.suggestedSleepSchedule(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of SleepOnboardingManager.hasOnboardedFeature(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of SleepOnboardingManager.saveHasCompletedOnboarding(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of SleepOnboardingManager.sendTipsDiscoverabilitySignal()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t sub_1AD8D6038()
{
  return swift_deallocObject();
}

void sub_1AD8D6048(int a1, void *a2)
{
  sub_1AD8D468C(a1, a2, *(void *)(v2 + 16), "[%{public}s] Onboarding failed to save sleep schedule with error: %{public}s", "[%{public}s] Onboarding successfully saved sleep schedule");
}

uint64_t sub_1AD8D6074()
{
  return swift_deallocObject();
}

void sub_1AD8D6084(int a1, void *a2)
{
  sub_1AD8D468C(a1, a2, *(void *)(v2 + 16), "[%{public}s] Onboarding failed to create sleep focus with error: %{public}s", "[%{public}s] Onboarding successfully created sleep focus");
}

uint64_t sub_1AD8D60B0()
{
  return swift_deallocObject();
}

void sub_1AD8D60E8(int a1, void *a2)
{
  sub_1AD8D3C90(a1, a2, *(void **)(v2 + 16));
}

void sub_1AD8D60F0(void *a1)
{
  sub_1AD8D2FA0(a1, *(void **)(v1 + 16));
}

uint64_t sub_1AD8D60F8()
{
  return swift_deallocObject();
}

id static NSDateComponentsFormatter.abbreviated.getter()
{
  return sub_1AD8D670C(96);
}

uint64_t static NSDateComponentsFormatter.shorterDateString(from:)(double a1)
{
  return sub_1AD8D6408(type metadata accessor for ShorterDateComponentsFormatter, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options, a1);
}

id ShorterDateComponentsFormatter.__allocating_init(options:)(uint64_t a1)
{
  return sub_1AD8D64D0(a1, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options);
}

uint64_t static NSDateComponentsFormatter.forceDoubleZerosString(from:)(uint64_t a1)
{
  return sub_1AD8D65F0(a1, type metadata accessor for ForceDoubleZerosDateComponentsFormatter);
}

uint64_t static NSDateComponentsFormatter.briefOneHourIsSixtyMinString(from:)(double a1)
{
  return sub_1AD8D6540(type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter, a1);
}

uint64_t static NSDateComponentsFormatter.briefOneHourIsSixtyMinString(from:)(uint64_t a1)
{
  return sub_1AD8D65F0(a1, type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter);
}

uint64_t static NSDateComponentsFormatter.shorterDateString(from:)()
{
  uint64_t v0 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
  v7.receiver = v1;
  v7.super_class = v0;
  id v2 = objc_msgSendSuper2(&v7, sel_init);
  uint64_t v3 = (void *)sub_1AD9DC8B0();
  id v4 = objc_msgSend(v2, sel_stringFromDateComponents_, v3);

  if (!v4) {
    return 0;
  }
  uint64_t v5 = sub_1AD9DF710();

  return v5;
}

uint64_t static NSDateComponentsFormatter.shortHourString(from:)(double a1)
{
  id v2 = (objc_class *)type metadata accessor for ShortHourDateComponentsFormatter();
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = 4;
  v8.receiver = v3;
  v8.super_class = v2;
  id v4 = objc_msgSendSuper2(&v8, sel_init);
  objc_msgSend(v4, sel_setUnitsStyle_, 2);
  objc_msgSend(v4, sel_setAllowedUnits_, 32);
  id v5 = objc_msgSend(v4, sel_stringFromTimeInterval_, a1);

  if (!v5) {
    return 0;
  }
  uint64_t v6 = sub_1AD9DF710();

  return v6;
}

id ShortHourDateComponentsFormatter.__allocating_init(options:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = a1;
  v6.receiver = v3;
  v6.super_class = v1;
  id v4 = objc_msgSendSuper2(&v6, sel_init);
  objc_msgSend(v4, sel_setUnitsStyle_, 2);
  objc_msgSend(v4, sel_setAllowedUnits_, 32);

  return v4;
}

uint64_t static NSDateComponentsFormatter.shortMinuteString(from:)(double a1)
{
  return sub_1AD8D6408(type metadata accessor for ShortMinuteDateComponentsFormatter, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options, a1);
}

uint64_t sub_1AD8D6408(uint64_t (*a1)(void), void *a2, double a3)
{
  id v5 = (objc_class *)a1();
  objc_super v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[*a2] = 4;
  v11.receiver = v6;
  v11.super_class = v5;
  id v7 = objc_msgSendSuper2(&v11, sel_init);
  id v8 = objc_msgSend(v7, sel_stringFromTimeInterval_, a3);

  if (!v8) {
    return 0;
  }
  uint64_t v9 = sub_1AD9DF710();

  return v9;
}

id ShortMinuteDateComponentsFormatter.__allocating_init(options:)(uint64_t a1)
{
  return sub_1AD8D64D0(a1, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options);
}

id sub_1AD8D64D0(uint64_t a1, void *a2)
{
  id v5 = (char *)objc_allocWithZone(v2);
  *(void *)&v5[*a2] = a1;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t static NSDateComponentsFormatter.abbreviatedOneHourIsSixtyMinString(from:)(double a1)
{
  return sub_1AD8D6540(type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter, a1);
}

uint64_t sub_1AD8D6540(uint64_t (*a1)(void), double a2)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)a1()), sel_init);
  id v4 = objc_msgSend(v3, sel_stringFromTimeInterval_, a2);

  if (!v4) {
    return 0;
  }
  uint64_t v5 = sub_1AD9DF710();

  return v5;
}

uint64_t static NSDateComponentsFormatter.abbreviatedOneHourIsSixtyMinString(from:)(uint64_t a1)
{
  return sub_1AD8D65F0(a1, type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter);
}

uint64_t sub_1AD8D65F0(uint64_t a1, uint64_t (*a2)(void))
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)a2()), sel_init);
  id v3 = (void *)sub_1AD9DC8B0();
  id v4 = objc_msgSend(v2, sel_stringFromDateComponents_, v3);

  if (!v4) {
    return 0;
  }
  uint64_t v5 = sub_1AD9DF710();

  return v5;
}

id static NSDateComponentsFormatter.briefStandaloneDuration.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
  objc_msgSend(v0, sel_setAllowedUnits_, 96);
  objc_msgSend(v0, sel_setUnitsStyle_, 5);
  objc_msgSend(v0, sel_setFormattingContext_, 2);
  return v0;
}

id static NSDateComponentsFormatter.abbreviatedHours.getter()
{
  return sub_1AD8D670C(32);
}

id sub_1AD8D670C(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
  objc_msgSend(v2, sel_setAllowedUnits_, a1);
  objc_msgSend(v2, sel_setUnitsStyle_, 1);
  return v2;
}

id static NSDateComponentsFormatter.full.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
  objc_msgSend(v0, sel_setUnitsStyle_, 3);
  return v0;
}

void __swiftcall NSDateComponentsFormatter.spellOutFormatter()(NSDateComponentsFormatter *__return_ptr retstr)
{
  objc_msgSend(v1, sel_copy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD8D88F8();
  swift_dynamicCast();
  objc_msgSend(v2, sel_setUnitsStyle_, 4);
}

uint64_t sub_1AD8D6AD0@<X0>(uint64_t a1@<X8>)
{
  id v2 = v1;
  sub_1AD8D8D24(0, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  uint64_t v6 = MEMORY[0x1F4188790](v4 - 8, v5);
  id v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  objc_super v11 = (char *)&v23 - v10;
  sub_1AD8D8D24(0, (unint64_t *)&qword_1EB725600, MEMORY[0x1E4F27A78]);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v15 = (char *)&v23 - v14;
  id v16 = objc_msgSend(v2, sel_calendar);
  if (v16)
  {
    uint64_t v17 = v16;
    sub_1AD9DCDB0();

    uint64_t v18 = sub_1AD9DCE40();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 0, 1, v18);
  }
  else
  {
    uint64_t v18 = sub_1AD9DCE40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 1, 1, v18);
  }
  sub_1AD8D8D78((uint64_t)v8, (uint64_t)v11);
  sub_1AD9DCE40();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v11, 1, v18))
  {
    sub_1AD8D8DF8((uint64_t)v11, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
    uint64_t v19 = sub_1AD9DCD10();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v15, 1, 1, v19);
LABEL_7:
    sub_1AD9DCCF0();
    return sub_1AD8D8DF8((uint64_t)v15, (unint64_t *)&qword_1EB725600, MEMORY[0x1E4F27A78]);
  }
  sub_1AD9DCDF0();
  sub_1AD8D8DF8((uint64_t)v11, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  uint64_t v20 = sub_1AD9DCD10();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v20) == 1) {
    goto LABEL_7;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(a1, v15, v20);
}

uint64_t sub_1AD8D6E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = sub_1AD9DC710();
  uint64_t v4 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53, v5);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1AD9DCD10();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8D6AD0((uint64_t)v12);
  uint64_t v13 = sub_1AD9DCCC0();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v13 == 0x53555F6E65 && v15 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      return a1;
    }
  }
  uint64_t v19 = qword_1F046A310;
  uint64_t v18 = unk_1F046A318;
  uint64_t v20 = unk_1F046A328;
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  uint64_t v56 = qword_1F046A310;
  uint64_t v57 = unk_1F046A318;
  uint64_t v50 = qword_1F046A320;
  uint64_t v54 = qword_1F046A320;
  uint64_t v55 = unk_1F046A328;
  sub_1AD85F688();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_1AD9DFF00();
  uint64_t v23 = v22;
  uint64_t v58 = v19;
  uint64_t v59 = v18;
  sub_1AD9DC6E0();
  uint64_t v24 = sub_1AD9DFEF0();
  uint64_t v26 = v25;
  id v51 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v52 = v4 + 8;
  v51(v7, v53);
  swift_bridgeObjectRelease();
  if (v21 == v24 && v23 == v26)
  {
    uint64_t v27 = v50;
LABEL_11:
    uint64_t v28 = v51;
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v58 = v27;
    uint64_t v59 = v20;
    sub_1AD9DC6E0();
    a1 = sub_1AD9DFEF0();
    v28(v7, v53);
    swift_bridgeObjectRelease();
    return a1;
  }
  char v29 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  if (v29)
  {
    uint64_t v27 = v50;
    goto LABEL_15;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((unint64_t)qword_1F046A300 < 2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v31 = *(void *)a0min;
    uint64_t v32 = unk_1F046A338;
    uint64_t v20 = unk_1F046A348;
    uint64_t v58 = v21;
    uint64_t v59 = v23;
    uint64_t v56 = *(void *)a0min;
    uint64_t v57 = unk_1F046A338;
    uint64_t v33 = qword_1F046A340;
    uint64_t v54 = qword_1F046A340;
    uint64_t v55 = unk_1F046A348;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_1AD9DFF00();
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v58 = v31;
    uint64_t v59 = v32;
    uint64_t v37 = v36;
    sub_1AD9DC6E0();
    uint64_t v38 = sub_1AD9DFEF0();
    uint64_t v40 = v39;
    uint64_t v28 = v51;
    v51(v7, v53);
    swift_bridgeObjectRelease();
    if (v34 == v38 && v37 == v40)
    {
      uint64_t v27 = v33;
      goto LABEL_12;
    }
    char v41 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    if (v41)
    {
      uint64_t v27 = v33;
      goto LABEL_16;
    }
    uint64_t v42 = v37;
    uint64_t result = swift_bridgeObjectRelease();
    if ((unint64_t)qword_1F046A300 >= 3)
    {
      uint64_t v43 = unk_1F046A358;
      uint64_t v50 = *(void *)a0Min;
      uint64_t v27 = qword_1F046A360;
      uint64_t v20 = unk_1F046A368;
      uint64_t v58 = v34;
      uint64_t v59 = v42;
      uint64_t v56 = *(void *)a0Min;
      uint64_t v57 = unk_1F046A358;
      uint64_t v54 = qword_1F046A360;
      uint64_t v55 = unk_1F046A368;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1 = sub_1AD9DFF00();
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      uint64_t v58 = v50;
      uint64_t v59 = v43;
      sub_1AD9DC6E0();
      uint64_t v46 = sub_1AD9DFEF0();
      uint64_t v48 = v47;
      v51(v7, v53);
      swift_bridgeObjectRelease();
      if (a1 == v46 && v45 == v48) {
        goto LABEL_11;
      }
      char v49 = sub_1AD9E02D0();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_1AD8D8938();
        swift_arrayDestroy();
        return a1;
      }
LABEL_15:
      uint64_t v28 = v51;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

id ForceDoubleZerosDateComponentsFormatter.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ForceDoubleZerosDateComponentsFormatter();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ForceDoubleZerosDateComponentsFormatter.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ForceDoubleZerosDateComponentsFormatter();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id ForceDoubleZerosDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1AD8D87E8(type metadata accessor for ForceDoubleZerosDateComponentsFormatter);
}

id BriefOneHourIsSixtyMinDateComponentsFormatter.init()()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter();
  id v1 = objc_msgSendSuper2(&v3, sel_init);
  objc_msgSend(v1, sel_setZeroFormattingBehavior_, 0x10000);
  objc_msgSend(v1, sel_setUnitsStyle_, 5);

  return v1;
}

void BriefOneHourIsSixtyMinDateComponentsFormatter.init(coder:)()
{
}

uint64_t sub_1AD8D7784()
{
  id v1 = v0;
  uint64_t v2 = sub_1AD9DC940();
  if (v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v2;
  }
  uint64_t v5 = sub_1AD9DC8F0();
  if ((v6 & 1) == 0)
  {
    if (v5 == 1)
    {
      if (!v4) {
        goto LABEL_8;
      }
      goto LABEL_10;
    }
    if (v5) {
      goto LABEL_10;
    }
  }
  if (v4 <= 60)
  {
LABEL_8:
    uint64_t v7 = 64;
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v7 = 96;
LABEL_11:
  objc_msgSend(v0, sel_setAllowedUnits_, v7);
  uint64_t v8 = (void *)sub_1AD9DC8B0();
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter();
  id v9 = objc_msgSendSuper2(&v12, sel_stringFromDateComponents_, v8);

  if (!v9) {
    return 0;
  }
  uint64_t v10 = sub_1AD9DF710();

  return v10;
}

id BriefOneHourIsSixtyMinDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1AD8D87E8(type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter);
}

uint64_t sub_1AD8D7890()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1AD8D78D8(uint64_t a1)
{
  char v3 = (void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options);
  uint64_t result = swift_beginAccess();
  *char v3 = a1;
  return result;
}

uint64_t (*sub_1AD8D7924())()
{
  return j__swift_endAccess;
}

id ShorterDateComponentsFormatter.init(options:)(uint64_t a1)
{
  return sub_1AD8D838C(a1, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options, type metadata accessor for ShorterDateComponentsFormatter);
}

id ShorterDateComponentsFormatter.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ShorterDateComponentsFormatter.init(coder:)()
{
}

uint64_t sub_1AD8D7B98()
{
  uint64_t v1 = sub_1AD9DC8F0();
  if (v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v1;
  }
  uint64_t result = sub_1AD9DC940();
  uint64_t v6 = 60 * v3;
  if ((unsigned __int128)(v3 * (__int128)60) >> 64 != (60 * v3) >> 63)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = result;
  }
  BOOL v8 = __OFADD__(v6, v7);
  uint64_t v9 = v6 + v7;
  if (v8) {
    goto LABEL_14;
  }
  id v10 = objc_msgSend(v0, sel_stringFromTimeInterval_, (double)v9 * 60.0);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v10;
  uint64_t v12 = sub_1AD9DF710();

  return v12;
}

id sub_1AD8D7C70(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = sub_1AD9DC990();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  id v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD9DC8C0();
  id v11 = a1;
  a4(v10);
  uint64_t v13 = v12;

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v13)
  {
    uint64_t v14 = (void *)sub_1AD9DF6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = 0;
  }
  return v14;
}

id ShorterDateComponentsFormatter.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ShorterDateComponentsFormatter.init()()
{
}

id ShorterDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1AD8D87E8(type metadata accessor for ShorterDateComponentsFormatter);
}

uint64_t sub_1AD8D7E50()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1AD8D7E98(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1AD8D7EE4())()
{
  return j_j__swift_endAccess;
}

id ShortHourDateComponentsFormatter.init(options:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = a1;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ShortHourDateComponentsFormatter();
  id v2 = objc_msgSendSuper2(&v4, sel_init);
  objc_msgSend(v2, sel_setUnitsStyle_, 2);
  objc_msgSend(v2, sel_setAllowedUnits_, 32);

  return v2;
}

void ShortHourDateComponentsFormatter.init(coder:)()
{
}

uint64_t sub_1AD8D8074(double a1)
{
  if (a1 / 60.0 / 60.0 != 0.0)
  {
    id v5 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, a1);
    swift_beginAccess();
    id v3 = (id)HKTimePeriodString();

    if (v3) {
      goto LABEL_3;
    }
    return 0;
  }
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for ShortHourDateComponentsFormatter();
  id v3 = objc_msgSendSuper2(&v7, sel_stringFromTimeInterval_, a1);
  if (!v3) {
    return 0;
  }
LABEL_3:
  uint64_t v4 = sub_1AD9DF710();

  return v4;
}

void ShortHourDateComponentsFormatter.init()()
{
}

id ShortHourDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1AD8D87E8(type metadata accessor for ShortHourDateComponentsFormatter);
}

uint64_t sub_1AD8D827C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1AD8D82C4(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*sub_1AD8D8310())()
{
  return j_j__swift_endAccess;
}

id ShortMinuteDateComponentsFormatter.init(options:)(uint64_t a1)
{
  return sub_1AD8D838C(a1, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options, type metadata accessor for ShortMinuteDateComponentsFormatter);
}

id sub_1AD8D838C(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  *(void *)&v3[*a2] = a1;
  v5.receiver = v3;
  v5.super_class = (Class)a3();
  return objc_msgSendSuper2(&v5, sel_init);
}

void ShortMinuteDateComponentsFormatter.init(coder:)()
{
}

void ShortMinuteDateComponentsFormatter.init()()
{
}

id ShortMinuteDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1AD8D87E8(type metadata accessor for ShortMinuteDateComponentsFormatter);
}

id AbbreviatedOneHourIsSixtyMinDateComponentsFormatter.init()()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter();
  id v1 = objc_msgSendSuper2(&v3, sel_init);
  objc_msgSend(v1, sel_setUnitsStyle_, 1);
  objc_msgSend(v1, sel_setAllowedUnits_, 96);

  return v1;
}

id AbbreviatedOneHourIsSixtyMinDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1AD8D87E8(type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter);
}

id sub_1AD8D87E8(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for ShorterDateComponentsFormatter()
{
  return self;
}

uint64_t type metadata accessor for ForceDoubleZerosDateComponentsFormatter()
{
  return self;
}

uint64_t type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter()
{
  return self;
}

uint64_t type metadata accessor for ShortHourDateComponentsFormatter()
{
  return self;
}

uint64_t type metadata accessor for ShortMinuteDateComponentsFormatter()
{
  return self;
}

uint64_t type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter()
{
  return self;
}

unint64_t sub_1AD8D88F8()
{
  unint64_t result = qword_1E9A4B458;
  if (!qword_1E9A4B458)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B458);
  }
  return result;
}

void sub_1AD8D8938()
{
  if (!qword_1E9A4B460)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4B460);
    }
  }
}

uint64_t sub_1AD8D899C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options, a2);
}

uint64_t sub_1AD8D89A8(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options);
}

uint64_t sub_1AD8D89B4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options, a2);
}

uint64_t sub_1AD8D89C0(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options);
}

uint64_t sub_1AD8D89CC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options, a2);
}

uint64_t keypath_getTm@<X0>(void *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*a1 + *a2);
  uint64_t result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1AD8D8A28(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options);
}

uint64_t keypath_setTm(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)(*a2 + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v6 = v5;
  return result;
}

uint64_t method lookup function for ForceDoubleZerosDateComponentsFormatter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ForceDoubleZerosDateComponentsFormatter);
}

uint64_t dispatch thunk of ForceDoubleZerosDateComponentsFormatter.forcingDoubleZerosForEnglish(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t method lookup function for ShorterDateComponentsFormatter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ShorterDateComponentsFormatter);
}

uint64_t dispatch thunk of ShorterDateComponentsFormatter.options.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ShorterDateComponentsFormatter.options.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ShorterDateComponentsFormatter.options.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ShorterDateComponentsFormatter.__allocating_init(options:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for ShortHourDateComponentsFormatter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ShortHourDateComponentsFormatter);
}

uint64_t dispatch thunk of ShortHourDateComponentsFormatter.options.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ShortHourDateComponentsFormatter.options.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ShortHourDateComponentsFormatter.options.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ShortHourDateComponentsFormatter.__allocating_init(options:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for ShortMinuteDateComponentsFormatter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ShortMinuteDateComponentsFormatter);
}

uint64_t dispatch thunk of ShortMinuteDateComponentsFormatter.options.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ShortMinuteDateComponentsFormatter.options.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ShortMinuteDateComponentsFormatter.options.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ShortMinuteDateComponentsFormatter.__allocating_init(options:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

void sub_1AD8D8D24(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1AD8D8D78(uint64_t a1, uint64_t a2)
{
  sub_1AD8D8D24(0, &qword_1EB725690, MEMORY[0x1E4F27CA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8D8DF8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1AD8D8D24(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

id SleepSettingsModel.__allocating_init(sleepSettingsProvider:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  id v6 = sub_1AD8DAE9C(v5, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v6;
}

id SleepSettingsModel.__allocating_init(sleepStore:)(void *a1)
{
  id v1 = a1;
  id v2 = HKSPSleepStore.settings.getter();
  id v3 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  id v4 = SleepSettingsProvider.init(sleepStore:sleepSettings:)(v1, v2);
  uint64_t v5 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepSettingsModel());
  id v6 = v4;
  id v7 = sub_1AD8DABA0((uint64_t)v6, v5);

  return v7;
}

id SleepSettingsModel.init(sleepSettingsProvider:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1F4188790](v5, v5);
  id v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  id v9 = sub_1AD8DAD10((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v9;
}

id sub_1AD8D9040()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_scheduledSleepMode);
}

void sub_1AD8D906C(char a1)
{
}

void (*sub_1AD8D9078(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_scheduledSleepMode);
  return sub_1AD8D90D4;
}

void sub_1AD8D90D4(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1AD8D90E0()
{
  return ((unint64_t)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions) >> 14) & 1;
}

void sub_1AD8D9110(char a1)
{
  id v3 = *(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings);
  unint64_t v4 = (unint64_t)objc_msgSend(v3, sel_sleepModeOptions);
  uint64_t v5 = 0x4000;
  if ((a1 & 1) == 0) {
    uint64_t v5 = 0;
  }
  objc_msgSend(v3, sel_setSleepModeOptions_, v4 & 0xFFFFFFFFFFFFBFFFLL | v5);

  sub_1AD8DA2DC();
}

void (*sub_1AD8D9190(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = ((unsigned __int16)objc_msgSend(*(id *)(v1+ OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions) & 0x4000) != 0;
  return sub_1AD8D91F0;
}

void sub_1AD8D91F0(uint64_t a1)
{
}

id sub_1AD8D9218()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepTracking);
}

void sub_1AD8D9244(char a1)
{
}

void (*sub_1AD8D9250(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_sleepTracking);
  return sub_1AD8D92AC;
}

void sub_1AD8D92AC(uint64_t a1, uint64_t a2)
{
}

id sub_1AD8D92B8()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_timeInBedTracking);
}

void sub_1AD8D92E4(char a1)
{
}

void (*sub_1AD8D92F0(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_timeInBedTracking);
  return sub_1AD8D934C;
}

void sub_1AD8D934C(uint64_t a1, uint64_t a2)
{
}

id sub_1AD8D9358()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_bedtimeReminders);
}

void sub_1AD8D9384(char a1)
{
}

void (*sub_1AD8D9390(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_bedtimeReminders);
  return sub_1AD8D93EC;
}

void sub_1AD8D93EC(uint64_t a1, uint64_t a2)
{
}

id sub_1AD8D93F8()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_wakeUpResults);
}

void sub_1AD8D9424(char a1)
{
}

void (*sub_1AD8D9430(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_wakeUpResults);
  return sub_1AD8D948C;
}

void sub_1AD8D948C(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1AD8D9498()
{
  return ((unint64_t)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions) >> 3) & 1;
}

void sub_1AD8D94C8(char a1)
{
  id v3 = *(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings);
  unint64_t v4 = (unint64_t)objc_msgSend(v3, sel_sleepModeOptions);
  uint64_t v5 = 8;
  if ((a1 & 1) == 0) {
    uint64_t v5 = 0;
  }
  objc_msgSend(v3, sel_setSleepModeOptions_, v4 & 0xFFFFFFFFFFFFFFF7 | v5);

  sub_1AD8DA2DC();
}

void (*sub_1AD8D9548(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions) & 8) != 0;
  return sub_1AD8D95A8;
}

void sub_1AD8D95A8(uint64_t a1)
{
}

id sub_1AD8D95D0()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_chargingReminders);
}

void sub_1AD8D95FC(char a1)
{
}

void (*sub_1AD8D9608(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_chargingReminders);
  return sub_1AD8D9664;
}

void sub_1AD8D9664(uint64_t a1, uint64_t a2)
{
}

id sub_1AD8D9670()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_shareAcrossDevices);
}

void sub_1AD8D969C(char a1)
{
}

void (*sub_1AD8D96A8(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_shareAcrossDevices);
  return sub_1AD8D9704;
}

void sub_1AD8D9704(uint64_t a1, uint64_t a2)
{
}

id sub_1AD8D9710()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_watchSleepFeaturesEnabled);
}

void sub_1AD8D973C(char a1)
{
}

void sub_1AD8D9748(char a1, SEL *a2)
{
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), *a2, a1 & 1);
  sub_1AD8DA2DC();
}

void (*sub_1AD8D9788(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_watchSleepFeaturesEnabled);
  return sub_1AD8D97E4;
}

void sub_1AD8D97E4(uint64_t a1, uint64_t a2)
{
}

void sub_1AD8D97F0(uint64_t a1, uint64_t a2, SEL *a3)
{
}

uint64_t sub_1AD8D9828()
{
  return sub_1AD8D9858((uint64_t (*)(uint64_t, uint64_t))SleepSettingsProviding.hasSleepFocus.getter);
}

uint64_t sub_1AD8D9840()
{
  return sub_1AD8D9858((uint64_t (*)(uint64_t, uint64_t))SleepSettingsProviding.mirrorsSleepFocus.getter);
}

uint64_t sub_1AD8D9858(uint64_t (*a1)(uint64_t, uint64_t))
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 24);
  uint64_t v5 = v3[4];
  __swift_project_boxed_opaque_existential_1Tm(v3, v4);
  return a1(v4, v5) & 1;
}

uint64_t sub_1AD8D98B4()
{
  sub_1AD8DB900();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  uint64_t v34 = v2;
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v32 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD86E5A4();
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8DBA94();
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider);
  uint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 24);
  uint64_t v16 = *(void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 32);
  __swift_project_boxed_opaque_existential_1Tm((void *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider), v15);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  sub_1AD8DBB4C(0, (unint64_t *)&qword_1E9A49EE8, MEMORY[0x1E4F1ABB0]);
  sub_1AD8DBC40();
  uint64_t v17 = sub_1AD9DDBF0();
  swift_release();
  uint64_t v35 = v17;
  sub_1AD837214(0, (unint64_t *)&qword_1EB724D50);
  id v36 = (id)sub_1AD9DFCA0();
  uint64_t v18 = sub_1AD9DFC90();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  uint64_t v31 = v19 + 56;
  v30(v8, 1, 1, v18);
  sub_1AD8DBB4C(0, &qword_1E9A4B4A8, MEMORY[0x1E4F1AAE0]);
  sub_1AD8DBBCC();
  unint64_t v29 = sub_1AD841810();
  sub_1AD9DDC20();
  sub_1AD86ED78((uint64_t)v8);

  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v27 = MEMORY[0x1E4F1AAB8];
  sub_1AD8DBCF4(&qword_1E9A4B4B8, 255, (void (*)(uint64_t))sub_1AD8DBA94);
  uint64_t v20 = v28;
  sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v20);
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  swift_release();
  uint64_t v21 = v14[3];
  uint64_t v22 = v14[4];
  __swift_project_boxed_opaque_existential_1Tm(v14, v21);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
  sub_1AD8DBD3C(0, (unint64_t *)&qword_1E9A4AB38, MEMORY[0x1E4F1ABB0]);
  sub_1AD8DBDAC();
  uint64_t v23 = sub_1AD9DDBF0();
  swift_release();
  uint64_t v35 = v23;
  id v36 = (id)sub_1AD9DFCA0();
  v30(v8, 1, 1, v18);
  sub_1AD8DBD3C(0, &qword_1E9A4B490, MEMORY[0x1E4F1AAE0]);
  sub_1AD8DBA20();
  uint64_t v24 = v32;
  sub_1AD9DDC20();
  sub_1AD86ED78((uint64_t)v8);

  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1AD8DBCF4(&qword_1E9A4B4C8, 255, (void (*)(uint64_t))sub_1AD8DB900);
  uint64_t v25 = v33;
  sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v25);
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  return swift_release();
}

void sub_1AD8D9E74(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3E6D270](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    sub_1AD8D9F7C(v2);
  }
}

uint64_t sub_1AD8D9ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3E6D270](v2);
  if (result)
  {
    uint64_t v4 = (void *)result;
    type metadata accessor for SleepSettingsModel();
    sub_1AD8DBCF4(&qword_1E9A4B480, v5, (void (*)(uint64_t))type metadata accessor for SleepSettingsModel);
    sub_1AD9DDAB0();

    sub_1AD9DDB50();
    return swift_release();
  }
  return result;
}

void sub_1AD8D9F7C(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  objc_msgSend(a1, sel_mutableCopy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4B330);
  if (swift_dynamicCast()) {
    id v4 = v25;
  }
  else {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5510]), sel_init);
  }
  uint64_t v5 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  id v6 = *(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings);
  char v7 = sub_1AD9DFE00();

  if ((v7 & 1) == 0)
  {
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_1AD9DD550();
    __swift_project_value_buffer(v8, (uint64_t)qword_1EB725018);
    id v9 = v4;
    uint64_t v10 = sub_1AD9DD530();
    os_log_type_t v11 = sub_1AD9DFBA0();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v26[0] = v24;
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v13 = sub_1AD9E04F0();
      sub_1AD838978(v13, v14, v26);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      id v15 = v9;
      os_log_type_t type = v11;
      id v16 = objc_msgSend(v15, sel_description);
      uint64_t v17 = sub_1AD9DF710();
      unint64_t v19 = v18;

      sub_1AD838978(v17, v19, v26);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v10, type, "[%{public}s] Updating sleep settings: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v24, -1, -1);
      MEMORY[0x1B3E6D1A0](v12, -1, -1);
    }
    else
    {
    }
    uint64_t v20 = *(void **)(v2 + v5);
    *(void *)(v2 + v5) = v9;
    id v21 = v9;

    type metadata accessor for SleepSettingsModel();
    sub_1AD8DBCF4(&qword_1E9A4B480, v22, (void (*)(uint64_t))type metadata accessor for SleepSettingsModel);
    sub_1AD9DDAB0();
    sub_1AD9DDB50();
    swift_release();
  }
}

void sub_1AD8DA2DC()
{
  uint64_t ObjectType = swift_getObjectType();
  if (qword_1EB725030 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725018);
  uint64_t v3 = v0;
  id v4 = sub_1AD9DD530();
  os_log_type_t v5 = sub_1AD9DFBA0();
  id v6 = &qword_1E9A4B000;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    aBlock[0] = v23;
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = sub_1AD9E04F0();
    sub_1AD838978(v8, v9, aBlock);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    id v10 = *(id *)&v3[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings];
    id v11 = objc_msgSend(v10, sel_description);
    uint64_t v12 = sub_1AD9DF710();
    uint64_t v13 = ObjectType;
    unint64_t v15 = v14;

    id v6 = &qword_1E9A4B000;
    sub_1AD838978(v12, v15, aBlock);
    sub_1AD9DFEA0();

    uint64_t ObjectType = v13;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v4, v5, "[%{public}s] Saving sleep settings: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v23, -1, -1);
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
  }
  else
  {
  }
  uint64_t v16 = *(void *)&v3[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 24];
  uint64_t v17 = *(void *)&v3[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 32];
  __swift_project_boxed_opaque_existential_1Tm(&v3[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider], v16);
  unint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  unint64_t v19 = *(void **)&v3[v6[141]];
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = ObjectType;
  aBlock[4] = (uint64_t)sub_1AD8DBE38;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1AD8A776C;
  aBlock[3] = (uint64_t)&block_descriptor_13;
  id v21 = _Block_copy(aBlock);
  id v22 = v19;
  swift_release();
  objc_msgSend(v18, sel_saveCurrentSleepSettings_completion_, v22, v21);
  _Block_release(v21);
}

void sub_1AD8DA61C(char a1, id a2)
{
  if (a1)
  {
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1AD9DD550();
    __swift_project_value_buffer(v2, (uint64_t)qword_1EB725018);
    osos_log_t log = sub_1AD9DD530();
    os_log_type_t v3 = sub_1AD9DFBA0();
    if (os_log_type_enabled(oslog, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v24 = (void *)v5;
      *(_DWORD *)id v4 = 136446210;
      uint64_t v6 = sub_1AD9E04F0();
      sub_1AD838978(v6, v7, (uint64_t *)&v24);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, oslog, v3, "[%{public}s] Successfully saved sleep settings.", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v5, -1, -1);
      MEMORY[0x1B3E6D1A0](v4, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    if (a2)
    {
      id v9 = a2;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_1AD87B550(MEMORY[0x1E4FBC860]);
      sub_1AD8DBCF4((unint64_t *)&qword_1E9A49688, 255, type metadata accessor for HKError);
      sub_1AD9DCAF0();
      id v9 = v24;
    }
    id v10 = a2;
    if (qword_1EB725030 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_1AD9DD550();
    __swift_project_value_buffer(v11, (uint64_t)qword_1EB725018);
    id v12 = v9;
    id v13 = v9;
    unint64_t v14 = sub_1AD9DD530();
    os_log_type_t v15 = sub_1AD9DFBC0();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v24 = (void *)v17;
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v18 = sub_1AD9E04F0();
      sub_1AD838978(v18, v19, (uint64_t *)&v24);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      id v20 = v9;
      sub_1AD869CF0();
      uint64_t v21 = sub_1AD9DF730();
      sub_1AD838978(v21, v22, (uint64_t *)&v24);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1AD834000, v14, v15, "[%{public}s] Error saving sleep settings: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v17, -1, -1);
      MEMORY[0x1B3E6D1A0](v16, -1, -1);
    }
    else
    {
    }
  }
}

id SleepSettingsModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SleepSettingsModel.init()()
{
}

id SleepSettingsModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepSettingsModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AD8DAB64@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SleepSettingsModel();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

id sub_1AD8DABA0(uint64_t a1, char *a2)
{
  _OWORD v11[3] = type metadata accessor for SleepSettingsProvider();
  v11[4] = &protocol witness table for SleepSettingsProvider;
  v11[0] = a1;
  *(void *)&a2[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_subscriptions] = MEMORY[0x1E4FBC870];
  sub_1AD841030((uint64_t)v11, (uint64_t)&a2[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider]);
  id v4 = a2;
  swift_retain();
  sub_1AD9DDB00();
  swift_release();
  objc_msgSend(v10, sel_mutableCopy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4B330);
  if (swift_dynamicCast()) {
    id v5 = v9;
  }
  else {
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5510]), sel_init);
  }

  *(void *)&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings] = v5;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for SleepSettingsModel();
  id v6 = objc_msgSendSuper2(&v8, sel_init);
  sub_1AD8D98B4();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  return v6;
}

id sub_1AD8DAD10(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  v16[3] = a3;
  uint64_t v16[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  *(void *)&a2[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_subscriptions] = MEMORY[0x1E4FBC870];
  sub_1AD841030((uint64_t)v16, (uint64_t)&a2[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider]);
  id v9 = a2;
  id v10 = (void *)SleepSettingsProviding.sleepSettings.getter(a3, a4);
  objc_msgSend(v10, sel_mutableCopy);
  sub_1AD9DFF20();
  swift_unknownObjectRelease();
  sub_1AD837214(0, (unint64_t *)&qword_1E9A4B330);
  if (swift_dynamicCast()) {
    id v11 = v15;
  }
  else {
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA5510]), sel_init);
  }

  *(void *)&v9[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings] = v11;
  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for SleepSettingsModel();
  id v12 = objc_msgSendSuper2(&v14, sel_init);
  sub_1AD8D98B4();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  return v12;
}

id sub_1AD8DAE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1, a2);
  id v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepSettingsModel());
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return sub_1AD8DAD10((uint64_t)v9, v10, a3, a4);
}

uint64_t type metadata accessor for SleepSettingsModel()
{
  return self;
}

id sub_1AD8DAFA4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_scheduledSleepMode, a2);
}

void sub_1AD8DAFB0(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_1AD8DAFBC@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions);
  *a2 = ((unsigned __int16)result & 0x4000) != 0;
  return result;
}

void sub_1AD8DB000(char *a1)
{
}

id sub_1AD8DB028@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_sleepTracking, a2);
}

void sub_1AD8DB034(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_1AD8DB040@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_timeInBedTracking, a2);
}

void sub_1AD8DB04C(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_1AD8DB058@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_bedtimeReminders, a2);
}

void sub_1AD8DB064(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_1AD8DB070@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_wakeUpResults, a2);
}

void sub_1AD8DB07C(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_1AD8DB088@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions);
  *a2 = (result & 8) != 0;
  return result;
}

void sub_1AD8DB0CC(char *a1)
{
}

id sub_1AD8DB0F4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_chargingReminders, a2);
}

void sub_1AD8DB100(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_1AD8DB10C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_shareAcrossDevices, a2);
}

void sub_1AD8DB118(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_1AD8DB124@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_watchSleepFeaturesEnabled, a2);
}

id keypath_getTm_0@<X0>(void *a1@<X0>, SEL *a2@<X3>, unsigned char *a3@<X8>)
{
  id result = [*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings) *a2];
  *a3 = (_BYTE)result;
  return result;
}

void sub_1AD8DB16C(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void keypath_setTm_0(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4, SEL *a5)
{
}

uint64_t method lookup function for SleepSettingsModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SleepSettingsModel);
}

uint64_t dispatch thunk of SleepSettingsModel.__allocating_init(sleepSettingsProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of SleepSettingsModel.isScheduledSleepFocusEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isScheduledSleepFocusEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isScheduledSleepFocusEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isUseSleepScreenEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isUseSleepScreenEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isUseSleepScreenEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isSleepTrackingEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isSleepTrackingEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isSleepTrackingEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isTimeInBedTrackingEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isTimeInBedTrackingEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isTimeInBedTrackingEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isBedtimeRemindersEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SleepSettingsModel.isBedtimeRemindersEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SleepSettingsModel.isBedtimeRemindersEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SleepSettingsModel.isWakeUpResultsEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SleepSettingsModel.isWakeUpResultsEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SleepSettingsModel.isWakeUpResultsEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SleepSettingsModel.isHideTimeEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SleepSettingsModel.isHideTimeEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SleepSettingsModel.isHideTimeEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of SleepSettingsModel.isChargingRemindersEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of SleepSettingsModel.isChargingRemindersEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of SleepSettingsModel.isChargingRemindersEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of SleepSettingsModel.isShareAcrossDevicesEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of SleepSettingsModel.isShareAcrossDevicesEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of SleepSettingsModel.isShareAcrossDevicesEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of SleepSettingsModel.watchSleepFeaturesEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of SleepSettingsModel.watchSleepFeaturesEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of SleepSettingsModel.watchSleepFeaturesEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of SleepSettingsModel.hasSleepFocusMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of SleepSettingsModel.mirrorsSleepFocusMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

void sub_1AD8DB900()
{
  if (!qword_1E9A4B488)
  {
    sub_1AD8DBD3C(255, &qword_1E9A4B490, MEMORY[0x1E4F1AAE0]);
    sub_1AD837214(255, (unint64_t *)&qword_1EB724D50);
    sub_1AD8DBA20();
    sub_1AD841810();
    unint64_t v0 = sub_1AD9DDA50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B488);
    }
  }
}

void sub_1AD8DB9B8()
{
  if (!qword_1E9A4AB40)
  {
    sub_1AD837214(255, &qword_1E9A4AB48);
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4AB40);
    }
  }
}

unint64_t sub_1AD8DBA20()
{
  unint64_t result = qword_1E9A4B498;
  if (!qword_1E9A4B498)
  {
    sub_1AD8DBD3C(255, &qword_1E9A4B490, MEMORY[0x1E4F1AAE0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B498);
  }
  return result;
}

void sub_1AD8DBA94()
{
  if (!qword_1E9A4B4A0)
  {
    sub_1AD8DBB4C(255, &qword_1E9A4B4A8, MEMORY[0x1E4F1AAE0]);
    sub_1AD837214(255, (unint64_t *)&qword_1EB724D50);
    sub_1AD8DBBCC();
    sub_1AD841810();
    unint64_t v0 = sub_1AD9DDA50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B4A0);
    }
  }
}

void sub_1AD8DBB4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void, void))
{
  if (!*a2)
  {
    uint64_t v6 = sub_1AD837214(255, &qword_1E9A4AB30);
    unint64_t v7 = a3(a1, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1AD8DBBCC()
{
  unint64_t result = qword_1E9A4B4B0;
  if (!qword_1E9A4B4B0)
  {
    sub_1AD8DBB4C(255, &qword_1E9A4B4A8, MEMORY[0x1E4F1AAE0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B4B0);
  }
  return result;
}

unint64_t sub_1AD8DBC40()
{
  unint64_t result = qword_1E9A49EF0;
  if (!qword_1E9A49EF0)
  {
    sub_1AD8DBB4C(255, (unint64_t *)&qword_1E9A49EE8, MEMORY[0x1E4F1ABB0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A49EF0);
  }
  return result;
}

uint64_t sub_1AD8DBCB4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1AD8DBCEC(void **a1)
{
  sub_1AD8D9E74(a1, v1);
}

uint64_t sub_1AD8DBCF4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8DBD3C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void, void))
{
  if (!*a2)
  {
    sub_1AD8DB9B8();
    unint64_t v7 = a3(a1, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1AD8DBDAC()
{
  unint64_t result = qword_1E9A4B4C0;
  if (!qword_1E9A4B4C0)
  {
    sub_1AD8DBD3C(255, (unint64_t *)&qword_1E9A4AB38, MEMORY[0x1E4F1ABB0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B4C0);
  }
  return result;
}

uint64_t sub_1AD8DBE20(uint64_t a1)
{
  return sub_1AD8D9ED0(a1, v1);
}

uint64_t sub_1AD8DBE28()
{
  return swift_deallocObject();
}

void sub_1AD8DBE38(char a1, id a2)
{
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

void *WeatherPrefetcher.__allocating_init(model:scheduler:)(void *a1, void *a2)
{
  swift_allocObject();
  id v4 = sub_1AD8DE5A0(a1, a2);

  return v4;
}

id WeatherPrefetcher.model.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_1AD8DBEBC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD8DBF38(uint64_t a1)
{
  sub_1AD89961C(0);
  uint64_t v4 = MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v7);
  id v9 = (char *)&v11 - v8;
  sub_1AD8DEE88(a1, (uint64_t)&v11 - v8, (uint64_t (*)(void))sub_1AD89961C);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD8DEE88((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))sub_1AD89961C);
  swift_retain();
  sub_1AD9DDBD0();
  return sub_1AD8DEEF0((uint64_t)v9, (uint64_t (*)(void))sub_1AD89961C);
}

uint64_t sub_1AD8DC064()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD9DDBC0();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD8DC0DC(uint64_t a1)
{
  sub_1AD89961C(0);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1AD8DEE88(a1, (uint64_t)v5, (uint64_t (*)(void))sub_1AD89961C);
  swift_retain();
  sub_1AD9DDBD0();
  return sub_1AD8DEEF0(a1, (uint64_t (*)(void))sub_1AD89961C);
}

void (*sub_1AD8DC1CC(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1AD9DDBB0();
  return sub_1AD867F38;
}

uint64_t sub_1AD8DC258()
{
  return swift_endAccess();
}

uint64_t sub_1AD8DC2EC(uint64_t a1)
{
  sub_1AD8A9680(0);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v2, v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v14 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1AD8DED8C(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1AD8DC488()
{
  return swift_endAccess();
}

uint64_t sub_1AD8DC518(uint64_t a1)
{
  sub_1AD8A9680(0);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  swift_beginAccess();
  sub_1AD8DED8C(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  sub_1AD9DDBA0();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*sub_1AD8DC66C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1AD8A9680(0);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher__currentWeather;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1AD8DED8C(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  v3[16] = v9;
  sub_1AD9DDB90();
  swift_endAccess();
  return sub_1AD868574;
}

void *WeatherPrefetcher.init(model:scheduler:)(void *a1, void *a2)
{
  uint64_t v4 = sub_1AD8DE5A0(a1, a2);

  return v4;
}

uint64_t sub_1AD8DC7E4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v53 = a3;
  sub_1AD8DEDF0(0);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD89961C(0);
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v10, v13);
  uint64_t v16 = (char *)&v49 - v15;
  MEMORY[0x1F4188790](v14, v17);
  unint64_t v19 = (char *)&v49 - v18;
  uint64_t v20 = type metadata accessor for CurrentWeatherModel(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v25 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23, v26);
  uint64_t v28 = (char *)&v49 - v27;
  sub_1AD8DEE88(a1, (uint64_t)v19, (uint64_t (*)(void))sub_1AD89961C);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    unint64_t v29 = (uint64_t (*)(void))sub_1AD89961C;
    uint64_t v30 = (uint64_t)v19;
  }
  else
  {
    id v51 = v7;
    uint64_t v52 = v21;
    uint64_t v50 = v20;
    sub_1AD8DEE24((uint64_t)v19, (uint64_t)v28);
    if (qword_1E9A49060 != -1) {
      swift_once();
    }
    uint64_t v31 = sub_1AD9DD550();
    __swift_project_value_buffer(v31, (uint64_t)qword_1E9A4D288);
    sub_1AD8DEE88((uint64_t)v28, (uint64_t)v25, type metadata accessor for CurrentWeatherModel);
    uint64_t v32 = sub_1AD9DD530();
    os_log_type_t v33 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      v55[0] = v49;
      *(_DWORD *)uint64_t v34 = 136446466;
      uint64_t v35 = sub_1AD9E04F0();
      uint64_t v53 = v16;
      uint64_t v54 = sub_1AD838978(v35, v36, v55);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2082;
      uint64_t v37 = sub_1AD8DCDE8();
      uint64_t v54 = sub_1AD838978(v37, v38, v55);
      uint64_t v16 = v53;
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      sub_1AD8DEEF0((uint64_t)v25, type metadata accessor for CurrentWeatherModel);
      _os_log_impl(&dword_1AD834000, v32, v33, "[%{public}s] weather model updated: %{public}s", (uint8_t *)v34, 0x16u);
      uint64_t v39 = v49;
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v39, -1, -1);
      MEMORY[0x1B3E6D1A0](v34, -1, -1);
    }
    else
    {
      sub_1AD8DEEF0((uint64_t)v25, type metadata accessor for CurrentWeatherModel);
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v42 = (uint64_t)v51;
    uint64_t v41 = v52;
    if (Strong)
    {
      uint64_t v43 = Strong;
      sub_1AD9DCC50();
      uint64_t v44 = sub_1AD9DCC70();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v42, 0, 1, v44);
      uint64_t v45 = v43 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate;
      swift_beginAccess();
      sub_1AD8DF3BC(v42, v45);
      swift_endAccess();
      swift_release();
    }
    swift_beginAccess();
    uint64_t v46 = swift_weakLoadStrong();
    if (v46)
    {
      id v47 = *(id *)(v46 + 16);
      swift_release();
      sub_1AD89A470();
    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1AD8DEE88((uint64_t)v28, (uint64_t)v16, type metadata accessor for CurrentWeatherModel);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v16, 0, 1, v50);
      swift_getKeyPath();
      swift_getKeyPath();
      sub_1AD8DEE88((uint64_t)v16, (uint64_t)v12, (uint64_t (*)(void))sub_1AD89961C);
      swift_retain();
      sub_1AD9DDBD0();
      sub_1AD8DEEF0((uint64_t)v16, (uint64_t (*)(void))sub_1AD89961C);
      swift_release();
    }
    unint64_t v29 = type metadata accessor for CurrentWeatherModel;
    uint64_t v30 = (uint64_t)v28;
  }
  return sub_1AD8DEEF0(v30, v29);
}

uint64_t sub_1AD8DCDE8()
{
  sub_1AD8DF420(0);
  uint64_t v72 = v1;
  uint64_t v74 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1, v2);
  uint64_t v70 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v71 = (char *)&v63 - v6;
  uint64_t v67 = sub_1AD9DD050();
  uint64_t v73 = *(void (***)(char *, uint64_t))(v67 - 8);
  MEMORY[0x1F4188790](v67, v7);
  uint64_t v64 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_1AD9DCEB0();
  uint64_t v9 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63, v10);
  uint64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1AD9DCC70();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8DF494(0);
  uint64_t v20 = MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v66 = (uint64_t)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v65 = (uint64_t)&v63 - v24;
  MEMORY[0x1F4188790](v23, v25);
  uint64_t v27 = (void (**)(char *, uint64_t))((char *)&v63 - v26);
  uint64_t v28 = sub_1AD9DCFC0();
  MEMORY[0x1F4188790](v28, v29);
  uint64_t v31 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = v33;
  uint64_t v69 = v32;
  (*(void (**)(char *, uint64_t))(v33 + 16))(v31, v0);
  uint64_t v34 = type metadata accessor for CurrentWeatherModel(0);
  sub_1AD9DCFA0();
  sub_1AD9DCEA0();
  uint64_t v35 = v74;
  sub_1AD9DD0A0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v63);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v36 = v72;
  uint64_t v77 = 0;
  unint64_t v78 = 0xE000000000000000;
  sub_1AD9E0030();
  swift_bridgeObjectRelease();
  uint64_t v77 = 60;
  unint64_t v78 = 0xE100000000000000;
  uint64_t v75 = v34;
  sub_1AD8DF4C8();
  sub_1AD9DF730();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD9DF790();
  uint64_t v37 = v64;
  sub_1AD9DCFB0();
  sub_1AD8DF260(&qword_1E9A4B510, MEMORY[0x1E4F46088]);
  uint64_t v38 = v67;
  sub_1AD9E0280();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  v73[1](v37, v38);
  sub_1AD9DF790();
  uint64_t v39 = v71;
  uint64_t v67 = (uint64_t)v31;
  sub_1AD9DCF80();
  sub_1AD8DF260(&qword_1E9A4B518, sub_1AD8DF420);
  sub_1AD9E0280();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
  uint64_t v74 = v35 + 8;
  v40(v39, v36);
  sub_1AD9DF790();
  uint64_t v41 = v65;
  uint64_t v73 = v27;
  sub_1AD8DEE88((uint64_t)v27, v65, (uint64_t (*)(void))sub_1AD8DF494);
  uint64_t v42 = sub_1AD9DCF40();
  uint64_t v43 = *(char **)(v42 - 8);
  uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v43 + 6);
  int v45 = v44(v41, 1, v42);
  if (v45 == 1)
  {
    sub_1AD8DEEF0(v41, (uint64_t (*)(void))sub_1AD8DF494);
    uint64_t v46 = 0;
  }
  else
  {
    sub_1AD9DCF20();
    id v47 = v70;
    sub_1AD9DC6D0();
    uint64_t v64 = v43;
    uint64_t v48 = v44;
    uint64_t v49 = v40;
    uint64_t v50 = v72;
    v49(v39, v72);
    sub_1AD9DC6B0();
    uint64_t v46 = v51;
    uint64_t v52 = v50;
    uint64_t v40 = v49;
    uint64_t v44 = v48;
    uint64_t v43 = v64;
    v40(v47, v52);
    (*((void (**)(uint64_t, uint64_t))v43 + 1))(v41, v42);
  }
  uint64_t v75 = v46;
  BOOL v76 = v45 == 1;
  sub_1AD8DF504();
  sub_1AD9DF730();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD9DF790();
  uint64_t v53 = v66;
  sub_1AD8DEE88((uint64_t)v73, v66, (uint64_t (*)(void))sub_1AD8DF494);
  int v54 = v44(v53, 1, v42);
  if (v54 == 1)
  {
    sub_1AD8DEEF0(v53, (uint64_t (*)(void))sub_1AD8DF494);
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v56 = v71;
    sub_1AD9DCF30();
    uint64_t v57 = v70;
    sub_1AD9DC6D0();
    uint64_t v58 = v40;
    uint64_t v59 = v72;
    v58(v56, v72);
    sub_1AD9DC6B0();
    uint64_t v55 = v60;
    v58(v57, v59);
    (*((void (**)(uint64_t, uint64_t))v43 + 1))(v53, v42);
  }
  uint64_t v75 = v55;
  BOOL v76 = v54 == 1;
  sub_1AD9DF730();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD9DF790();
  uint64_t v61 = v77;
  sub_1AD8DEEF0((uint64_t)v73, (uint64_t (*)(void))sub_1AD8DF494);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
  return v61;
}

void sub_1AD8DD684(uint64_t a1, uint64_t a2, const char *a3, void (*a4)(uint64_t))
{
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_1AD9DD550();
  __swift_project_value_buffer(v6, (uint64_t)qword_1E9A4D288);
  uint64_t v7 = sub_1AD9DD530();
  os_log_type_t v8 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v16[0] = v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    uint64_t v11 = sub_1AD9E04F0();
    sub_1AD838978(v11, v12, v16);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v7, v8, a3, v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v10, -1, -1);
    MEMORY[0x1B3E6D1A0](v9, -1, -1);
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v14 = *(id *)(Strong + 16);
    uint64_t v15 = swift_release();
    a4(v15);
  }
}

void sub_1AD8DD85C()
{
  uint64_t v1 = v0;
  uint64_t v85 = *v0;
  sub_1AD8DEDF0(0);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v83 = (uint64_t)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AD9DCC70();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  uint64_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v77 - v12;
  sub_1AD89961C(0);
  uint64_t v16 = MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v81 = (uint64_t)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16, v18);
  uint64_t v82 = (uint64_t)&v77 - v20;
  MEMORY[0x1F4188790](v19, v21);
  unsigned int v86 = (char *)&v77 - v22;
  uint64_t v23 = type metadata accessor for CurrentWeatherModel(0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23, v25);
  uint64_t v27 = (char *)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v28 = sub_1AD9DD550();
  uint64_t v87 = __swift_project_value_buffer(v28, (uint64_t)qword_1E9A4D288);
  uint64_t v29 = sub_1AD9DD530();
  os_log_type_t v30 = sub_1AD9DFBE0();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v80 = v10;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v77 = v5;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v78 = v6;
    uint64_t v35 = v34;
    v88[0] = v34;
    uint64_t v79 = v13;
    *(_DWORD *)uint64_t v33 = 136446210;
    uint64_t v84 = v24;
    uint64_t v36 = sub_1AD9E04F0();
    uint64_t v90 = sub_1AD838978(v36, v37, v88);
    uint64_t v24 = v84;
    uint64_t v13 = v79;
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v29, v30, "[%{public}s] refreshing weather", v33, 0xCu);
    swift_arrayDestroy();
    uint64_t v38 = v35;
    uint64_t v6 = v78;
    MEMORY[0x1B3E6D1A0](v38, -1, -1);
    uint64_t v39 = v33;
    uint64_t v5 = v77;
    MEMORY[0x1B3E6D1A0](v39, -1, -1);
  }

  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v40 = (uint64_t)v86;
  sub_1AD9DDBC0();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v40, 1, v23) == 1)
  {
    uint64_t v41 = sub_1AD89961C;
    uint64_t v42 = v40;
LABEL_9:
    sub_1AD8DEEF0(v42, (uint64_t (*)(void))v41);
    uint64_t v46 = sub_1AD9DD530();
    os_log_type_t v47 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v90 = v49;
      *(_DWORD *)uint64_t v48 = 136446210;
      uint64_t v50 = sub_1AD9E04F0();
      uint64_t v89 = sub_1AD838978(v50, v51, &v90);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v46, v47, "[%{public}s] weather not prefetched, fetching now", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v49, -1, -1);
      MEMORY[0x1B3E6D1A0](v48, -1, -1);
    }

    sub_1AD899E20();
    return;
  }
  sub_1AD8DEE24(v40, (uint64_t)v27);
  uint64_t v43 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate;
  swift_beginAccess();
  uint64_t v44 = v43;
  uint64_t v45 = v83;
  sub_1AD8DEE88(v44, v83, (uint64_t (*)(void))sub_1AD8DEDF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v45, 1, v5) == 1)
  {
    sub_1AD8DEEF0((uint64_t)v27, type metadata accessor for CurrentWeatherModel);
    uint64_t v41 = sub_1AD8DEDF0;
    uint64_t v42 = v45;
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v13, v45, v5);
  sub_1AD9DCBF0();
  uint64_t v84 = v24;
  if (v52 <= -300.0)
  {
    unsigned int v86 = (char *)v23;
    uint64_t v63 = v80;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v80, v13, v5);
    uint64_t v64 = sub_1AD9DD530();
    os_log_type_t v65 = sub_1AD9DFBE0();
    int v66 = v65;
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v87 = (uint64_t)v27;
      uint64_t v68 = v67;
      uint64_t v83 = swift_slowAlloc();
      uint64_t v90 = v83;
      *(_DWORD *)uint64_t v68 = 136446466;
      uint64_t v69 = sub_1AD9E04F0();
      LODWORD(v85) = v66;
      uint64_t v89 = sub_1AD838978(v69, v70, &v90);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v68 + 12) = 2080;
      sub_1AD8DF260((unint64_t *)&qword_1EB725230, MEMORY[0x1E4F27928]);
      uint64_t v71 = sub_1AD9E0280();
      uint64_t v89 = sub_1AD838978(v71, v72, &v90);
      sub_1AD9DFEA0();
      swift_bridgeObjectRelease();
      uint64_t v73 = *(void (**)(char *, uint64_t))(v6 + 8);
      v73(v63, v5);
      _os_log_impl(&dword_1AD834000, v64, (os_log_type_t)v85, "[%{public}s] weather was prefetched at %s and is stale, fetching now", (uint8_t *)v68, 0x16u);
      uint64_t v74 = v83;
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v74, -1, -1);
      uint64_t v75 = v68;
      uint64_t v27 = (char *)v87;
      MEMORY[0x1B3E6D1A0](v75, -1, -1);
    }
    else
    {
      uint64_t v73 = *(void (**)(char *, uint64_t))(v6 + 8);
      v73(v63, v5);
    }

    uint64_t v76 = v82;
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v84 + 56))(v82, 1, 1, v86);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1AD8DEE88(v76, v81, (uint64_t (*)(void))sub_1AD89961C);
    swift_retain();
    sub_1AD9DDBD0();
    sub_1AD8DEEF0(v76, (uint64_t (*)(void))sub_1AD89961C);
    sub_1AD899E20();
    v73(v13, v5);
  }
  else
  {
    uint64_t v53 = sub_1AD9DD530();
    os_log_type_t v54 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v79 = v13;
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v78 = v6;
      uint64_t v57 = v56;
      uint64_t v90 = v56;
      *(_DWORD *)uint64_t v55 = 136446210;
      uint64_t v58 = sub_1AD9E04F0();
      unsigned int v86 = (char *)v23;
      uint64_t v89 = sub_1AD838978(v58, v59, &v90);
      uint64_t v13 = v79;
      sub_1AD9DFEA0();
      uint64_t v23 = (uint64_t)v86;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v53, v54, "[%{public}s] weather was prefetched, updating", v55, 0xCu);
      swift_arrayDestroy();
      uint64_t v60 = v57;
      uint64_t v6 = v78;
      MEMORY[0x1B3E6D1A0](v60, -1, -1);
      MEMORY[0x1B3E6D1A0](v55, -1, -1);
    }

    uint64_t v62 = v81;
    uint64_t v61 = v82;
    sub_1AD8DEE88((uint64_t)v27, v82, type metadata accessor for CurrentWeatherModel);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v61, 0, 1, v23);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1AD8DEE88(v61, v62, (uint64_t (*)(void))sub_1AD89961C);
    swift_retain();
    sub_1AD9DDBD0();
    sub_1AD8DEEF0(v61, (uint64_t (*)(void))sub_1AD89961C);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  sub_1AD8DEEF0((uint64_t)v27, type metadata accessor for CurrentWeatherModel);
}

uint64_t WeatherPrefetcher.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher__currentWeather;
  sub_1AD8DED8C(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1AD8DEEF0(v0 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate, (uint64_t (*)(void))sub_1AD8DEDF0);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t WeatherPrefetcher.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher__currentWeather;
  sub_1AD8DED8C(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1AD8DEEF0(v0 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate, (uint64_t (*)(void))sub_1AD8DEDF0);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1AD8DE560@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for WeatherPrefetcher();
  uint64_t result = sub_1AD9DDAB0();
  *a1 = result;
  return result;
}

void *sub_1AD8DE5A0(void *a1, void *a2)
{
  uint64_t v3 = v2;
  unint64_t v51 = a1;
  double v52 = a2;
  uint64_t v4 = *v2;
  sub_1AD8A9680(0);
  uint64_t v53 = *(void *)(v5 - 8);
  uint64_t v54 = v5;
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8DED8C(0, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)v50 - v13;
  sub_1AD89961C(0);
  uint64_t v17 = MEMORY[0x1F4188790](v15, v16);
  uint64_t v19 = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17, v20);
  uint64_t v22 = (char *)v50 - v21;
  uint64_t v23 = (char *)v3 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher__currentWeather;
  uint64_t v24 = type metadata accessor for CurrentWeatherModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v22, 1, 1, v24);
  sub_1AD8DEE88((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))sub_1AD89961C);
  sub_1AD9DDB80();
  sub_1AD8DEEF0((uint64_t)v22, (uint64_t (*)(void))sub_1AD89961C);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v23, v14, v10);
  uint64_t v25 = (char *)v3 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate;
  uint64_t v26 = sub_1AD9DCC70();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *(void *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_cancellables) = MEMORY[0x1E4FBC870];
  if (qword_1E9A49060 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_1AD9DD550();
  __swift_project_value_buffer(v27, (uint64_t)qword_1E9A4D288);
  uint64_t v28 = sub_1AD9DD530();
  os_log_type_t v29 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v28, v29))
  {
    os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    v56[0] = v31;
    *(_DWORD *)os_log_type_t v30 = 136446210;
    uint64_t v32 = sub_1AD9E04F0();
    v50[1] = v10;
    uint64_t v55 = sub_1AD838978(v32, v33, v56);
    sub_1AD9DFEA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AD834000, v28, v29, "[%{public}s] initializing...", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v31, -1, -1);
    uint64_t v34 = v30;
    uint64_t v35 = v4;
    MEMORY[0x1B3E6D1A0](v34, -1, -1);
  }
  else
  {

    uint64_t v35 = v4;
  }
  unint64_t v37 = v51;
  uint64_t v36 = v52;
  v3[2] = v51;
  v3[3] = v36;
  swift_beginAccess();
  id v38 = v37;
  uint64_t v39 = v36;
  sub_1AD9DDB90();
  swift_endAccess();
  uint64_t v40 = swift_allocObject();
  swift_weakInit();
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v40;
  *(void *)(v41 + 24) = v35;
  sub_1AD8DF260(&qword_1E9A4ACB8, sub_1AD8A9680);
  uint64_t v42 = v54;
  sub_1AD9DDC40();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v8, v42);
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  swift_release();
  v56[0] = *(void *)&v39[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_onShouldPrefetch];
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v43;
  *(void *)(v44 + 24) = v35;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_1AD8DF2A8;
  *(void *)(v45 + 24) = v44;
  sub_1AD8DF318();
  sub_1AD8DF260(&qword_1E9A4B4F8, (void (*)(uint64_t))sub_1AD8DF318);
  swift_retain();
  sub_1AD9DDC40();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  swift_release();
  v56[0] = *(void *)&v39[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_onShouldCancel];
  uint64_t v46 = swift_allocObject();
  swift_weakInit();
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v46;
  *(void *)(v47 + 24) = v35;
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = sub_1AD8DF384;
  *(void *)(v48 + 24) = v47;
  swift_retain();
  sub_1AD9DDC40();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_1AD9DDA80();
  swift_endAccess();
  swift_release();
  sub_1AD93A75C();
  return v3;
}

void sub_1AD8DED8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1AD8DEDF0(uint64_t a1)
{
}

uint64_t sub_1AD8DEE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CurrentWeatherModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AD8DEE88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AD8DEEF0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AD8DEF58()
{
  return type metadata accessor for WeatherPrefetcher();
}

uint64_t type metadata accessor for WeatherPrefetcher()
{
  uint64_t result = qword_1E9A4B4E8;
  if (!qword_1E9A4B4E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1AD8DEFAC()
{
  sub_1AD8DED8C(319, &qword_1E9A4ACB0, (uint64_t (*)(uint64_t))sub_1AD89961C, MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F)
  {
    sub_1AD8DEDF0(319);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for WeatherPrefetcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WeatherPrefetcher);
}

uint64_t dispatch thunk of WeatherPrefetcher.currentWeather.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of WeatherPrefetcher.currentWeather.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of WeatherPrefetcher.currentWeather.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of WeatherPrefetcher.$currentWeather.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of WeatherPrefetcher.$currentWeather.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of WeatherPrefetcher.$currentWeather.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of WeatherPrefetcher.__allocating_init(model:scheduler:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of WeatherPrefetcher.refreshWeather()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t sub_1AD8DF1E8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD8DF220()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AD8DF258(uint64_t a1)
{
  return sub_1AD8DC7E4(a1, *(void *)(v1 + 16), *(char **)(v1 + 24));
}

uint64_t sub_1AD8DF260(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8DF2A8()
{
  sub_1AD8DD684(*(void *)(v0 + 16), *(void *)(v0 + 24), "[%{public}s] prefetching weather", (void (*)(uint64_t))sub_1AD899E20);
}

uint64_t sub_1AD8DF2E0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1AD8DF318()
{
  if (!qword_1E9A4C700)
  {
    unint64_t v0 = sub_1AD9DDAE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4C700);
    }
  }
}

void sub_1AD8DF384()
{
  sub_1AD8DD684(*(void *)(v0 + 16), *(void *)(v0 + 24), "[%{public}s] cancelling weather", (void (*)(uint64_t))sub_1AD89A470);
}

uint64_t sub_1AD8DF3BC(uint64_t a1, uint64_t a2)
{
  sub_1AD8DEDF0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1AD8DF420(uint64_t a1)
{
}

unint64_t sub_1AD8DF454()
{
  unint64_t result = qword_1E9A4A968;
  if (!qword_1E9A4A968)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4A968);
  }
  return result;
}

void sub_1AD8DF494(uint64_t a1)
{
}

unint64_t sub_1AD8DF4C8()
{
  unint64_t result = qword_1E9A4B508;
  if (!qword_1E9A4B508)
  {
    type metadata accessor for CurrentWeatherModel(255);
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B508);
  }
  return result;
}

void sub_1AD8DF504()
{
  if (!qword_1EB725080)
  {
    unint64_t v0 = sub_1AD9DFE90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB725080);
    }
  }
}

void _s9DragStateVwxx(uint64_t a1)
{
}

uint64_t _s9DragStateVwcp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  id v4 = v3;
  return a1;
}

uint64_t _s9DragStateVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  id v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v3;
  id v5 = v3;

  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9DragStateVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  return a1;
}

uint64_t _s9DragStateVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s9DragStateVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s9DragStateVMa()
{
  return &_s9DragStateVN;
}

double sub_1AD8DF738(double a1, double a2)
{
  double v5 = CACurrentMediaTime();
  double v6 = *(double *)(v2 + 8);
  double v7 = a1 - v6;
  if (a1 - v6 > 3.14159265)
  {
    double v8 = a1 + -6.28318531;
    double v6 = 0.0 - v6;
LABEL_5:
    double v7 = v8 + v6;
    goto LABEL_6;
  }
  if (v7 < -3.14159265)
  {
    double v8 = 6.28318531 - a1;
    goto LABEL_5;
  }
LABEL_6:
  if ((*(unsigned char *)(v2 + 1) & 1) == 0 && fabs(v7) > 2.22044605e-16)
  {
    *(unsigned char *)(v2 + 1) = 1;
    double v7 = 0.0;
  }
  double v9 = v7 / (v5 - *(double *)(v2 + 16));
  *(double *)(v2 + 32) = v9;
  float v10 = a2;
  double v11 = 1.0;
  if (v10 < 0.15)
  {
    double v11 = 0.0;
    if (v10 > 0.0)
    {
      *(float *)&double v11 = v10 / 0.15;
      objc_msgSend(*(id *)(v2 + 40), sel__solveForInput_, v11);
      double v11 = v12;
    }
  }
  double v13 = fabs(v9) / 0.975;
  if (v13 <= 1.0) {
    double v14 = v13 * 0.75 + 0.25;
  }
  else {
    double v14 = 1.0;
  }
  double result = *(double *)(v2 + 24) + v7 * v14 * v11;
  *(double *)(v2 + 16) = v5;
  *(double *)(v2 + 24) = result;
  *(double *)(v2 + 8) = a1;
  return result;
}

unsigned char *_s9DragStateV12GestureStateOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD8DF954);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s9DragStateV12GestureStateOMa()
{
  return &_s9DragStateV12GestureStateON;
}

unsigned char *_s9DragStateV8MovementOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AD8DFA58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s9DragStateV8MovementOMa()
{
  return &_s9DragStateV8MovementON;
}

unint64_t sub_1AD8DFA94()
{
  unint64_t result = qword_1E9A4B520;
  if (!qword_1E9A4B520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B520);
  }
  return result;
}

unint64_t sub_1AD8DFAEC()
{
  unint64_t result = qword_1E9A4B528;
  if (!qword_1E9A4B528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B528);
  }
  return result;
}

uint64_t type metadata accessor for ScheduleOnboardingSection(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4B550);
}

uint64_t sub_1AD8DFB60()
{
  return swift_initClassMetadata2();
}

void sub_1AD8DFBC8()
{
  unint64_t v1 = v0;
  sub_1AD8CFF38();
  uint64_t v129 = v2;
  uint64_t v125 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v3);
  id v124 = (char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v126 = (char *)&v121 - v7;
  uint64_t v143 = sub_1AD9DD390();
  uint64_t v132 = *(void *)(v143 - 8);
  MEMORY[0x1F4188790](v143, v8);
  uint64_t v127 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (uint64_t)&v121 - v12;
  MEMORY[0x1F4188790](v14, v15);
  uint64_t v135 = (char *)&v121 - v16;
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v140 = (char *)&v121 - v19;
  MEMORY[0x1F4188790](v20, v21);
  uint64_t v130 = (char *)&v121 - v22;
  double v25 = MEMORY[0x1F4188790](v23, v24);
  uint64_t v27 = (uint64_t)&v121 - v26;
  uint64_t v28 = sub_1AD8E0A74(v25);
  LOBYTE(v144) = *(unsigned char *)(v28 + 96);
  uint64_t v30 = *(void *)(v28 + 32);
  uint64_t v29 = *(void *)(v28 + 40);
  uint64_t v31 = *(void **)(v28 + 48);
  swift_retain();
  sub_1AD875EEC(v29, v30, v31, v27);
  swift_release();
  swift_release();
  uint64_t v32 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v33 = sub_1AD99A978(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v35 = *(void *)(v33 + 16);
  unint64_t v34 = *(void *)(v33 + 24);
  uint64_t v36 = v35 + 1;
  if (v35 >= v34 >> 1) {
    goto LABEL_69;
  }
  while (2)
  {
    *(void *)(v33 + 16) = v36;
    unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v132 + 32);
    unint64_t v128 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
    uint64_t v38 = *(void *)(v132 + 72);
    unint64_t v141 = v37;
    uint64_t v142 = v38;
    uint64_t v138 = v132 + 32;
    v37((char *)(v33 + v128 + v38 * v35), (char *)v27, v143);
    uint64_t v148 = v33;
    sub_1AD9DDB00();
    id v39 = v144;
    id v40 = objc_msgSend(v144, sel_occurrences);

    sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
    unint64_t v41 = sub_1AD9DF860();

    id v144 = v32;
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_1AD9E0190();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v123 = v13;
    if (v42)
    {
      if (v42 < 1)
      {
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      for (uint64_t i = 0; i != v42; ++i)
      {
        if ((v41 & 0xC000000000000001) != 0) {
          id v44 = (id)MEMORY[0x1B3E6BFF0](i, v41);
        }
        else {
          id v44 = *(id *)(v41 + 8 * i + 32);
        }
        uint64_t v45 = v44;
        if (objc_msgSend(v44, sel_isSingleDayOverride))
        {
        }
        else
        {
          sub_1AD9E0080();
          sub_1AD9E00C0();
          sub_1AD9E00D0();
          sub_1AD9E0090();
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v46 = (unint64_t)v144;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v46 = MEMORY[0x1E4FBC860];
    }
    swift_retain();
    uint64_t v47 = sub_1AD8E24B0(v46, v1);
    swift_release();
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v139 = v47;
    sub_1AD86C450(v47);
    sub_1AD9DDB00();
    id v48 = v144;
    id v49 = objc_msgSend(v144, sel_weekdaysWithOccurrences);
    unint64_t v131 = v1;
    if (!v49)
    {
      uint64_t v50 = 1;
LABEL_21:
      char v51 = 1;
      goto LABEL_22;
    }
    if (!objc_msgSend(v48, sel_weekdaysWithoutOccurrences))
    {
      uint64_t v50 = 0;
      goto LABEL_21;
    }
    uint64_t v50 = (uint64_t)objc_msgSend(v48, sel_weekdaysWithOccurrences);
    char v51 = 0;
LABEL_22:

    uint64_t v52 = *(void *)(v131 + qword_1E9A4B540);
    uint64_t v53 = MEMORY[0x1E4FBB1A0];
    sub_1AD8E34B8(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
    uint64_t v122 = v54;
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_1AD9E53A0;
    *(void *)(v55 + 32) = sub_1AD9DF710();
    *(void *)(v55 + 40) = v56;
    *(void *)(v55 + 48) = 0x7065656C53;
    *(void *)(v55 + 56) = 0xE500000000000000;
    *(void *)(v55 + 64) = 0x696472616F626E4FLL;
    *(void *)(v55 + 72) = 0xEA0000000000676ELL;
    id v144 = (id)v55;
    sub_1AD86C2F8((uint64_t)&unk_1F04699A8);
    sub_1AD8E34B8(0, &qword_1EB725B60, v53, MEMORY[0x1E4FBB320]);
    sub_1AD86E270();
    uint64_t v57 = sub_1AD9DF690();
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    sub_1AD8E2E34(0, &qword_1E9A49FC8, (unint64_t *)&qword_1E9A4A3C0, MEMORY[0x1E4F66028], MEMORY[0x1E4FBBE00]);
    uint64_t v60 = swift_allocObject();
    long long v121 = xmmword_1AD9E3070;
    *(_OWORD *)(v60 + 16) = xmmword_1AD9E3070;
    *(void *)(v60 + 56) = &type metadata for AddSchedulePromptRow;
    *(void *)(v60 + 64) = sub_1AD8E3268();
    uint64_t v61 = swift_allocObject();
    *(void *)(v60 + 32) = v61;
    *(void *)(v61 + 16) = v50;
    *(unsigned char *)(v61 + 24) = v51;
    *(void *)(v61 + 32) = v52;
    *(void *)(v61 + 40) = v57;
    *(void *)(v61 + 48) = v59;
    id v144 = 0;
    unint64_t v145 = 0xE000000000000000;
    sub_1AD9E0030();
    swift_bridgeObjectRelease();
    id v144 = (id)0xD000000000000013;
    unint64_t v145 = 0x80000001AD9F31A0;
    sub_1AD9DDB00();
    id v62 = v146;
    if (objc_msgSend(v146, sel_weekdaysWithOccurrences))
    {
      id v63 = objc_msgSend(v62, sel_weekdaysWithoutOccurrences);
      uint64_t v32 = (char *)v128;
      uint64_t v64 = v140;
      if (v63)
      {
        uint64_t v27 = (uint64_t)objc_msgSend(v62, sel_weekdaysWithOccurrences);
        char v65 = 0;
      }
      else
      {
        uint64_t v27 = 0;
        char v65 = 1;
      }
    }
    else
    {
      uint64_t v27 = 1;
      char v65 = 1;
      uint64_t v32 = (char *)v128;
      uint64_t v64 = v140;
    }

    id v146 = (id)v27;
    char v147 = v65;
    sub_1AD9DF730();
    sub_1AD9DF790();
    swift_bridgeObjectRelease();
    int v66 = v130;
    sub_1AD9DD380();
    uint64_t v137 = *(void (**)(char *, char *, uint64_t))(v132 + 16);
    uint64_t v138 = v132 + 16;
    v137(v64, v66, v143);
    uint64_t v36 = v148;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v36 = sub_1AD99A978(0, *(void *)(v36 + 16) + 1, 1, v36);
    }
    unint64_t v35 = *(void *)(v36 + 16);
    unint64_t v67 = *(void *)(v36 + 24);
    if (v35 >= v67 >> 1) {
      uint64_t v36 = sub_1AD99A978(v67 > 1, v35 + 1, 1, v36);
    }
    *(void *)(v36 + 16) = v35 + 1;
    v141(&v32[v36 + v35 * v142], v64, v143);
    uint64_t v148 = v36;
    unint64_t v141 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
    if (!v141)
    {
      swift_bridgeObjectRelease();
      uint64_t v76 = 0;
      goto LABEL_65;
    }
    uint64_t v140 = *(char **)(v139 + 16);
    uint64_t v134 = &v32[v139];
    uint64_t v136 = (void (**)(char *, uint64_t))(v132 + 8);
    swift_bridgeObjectRetain();
    unint64_t v1 = 0;
    uint64_t v13 = 32;
    while (1)
    {
      unint64_t v33 = (unint64_t)&v32[v36];
      uint64_t v68 = sub_1AD9DD370();
      uint64_t v70 = v69;
      if (v140) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_34:
      ++v1;
      v13 += 16;
      v32 += v142;
      if (v141 == (void (*)(char *, char *, uint64_t))v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
    }
    unint64_t v34 = *(void *)(v139 + 16);
    if (!v34)
    {
      __break(1u);
LABEL_69:
      unint64_t v33 = sub_1AD99A978(v34 > 1, v36, 1, v33);
      continue;
    }
    break;
  }
  uint64_t v71 = v68;
  unint64_t v72 = v135;
  uint64_t v73 = v143;
  v137(v135, v134, v143);
  uint64_t v74 = sub_1AD9DD370();
  uint64_t v27 = v75;
  uint64_t v133 = *v136;
  v133(v72, v73);
  if (v71 != v74 || v70 != v27)
  {
    unint64_t v35 = sub_1AD9E02D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v35)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_44:
  uint64_t v77 = v125;
  uint64_t v78 = v126;
  sub_1AD9DD3F0();
  uint64_t v79 = v129;
  uint64_t v80 = sub_1AD9DD630();
  uint64_t v83 = *(void (**)(char *, uint64_t))(v77 + 8);
  uint64_t v82 = v77 + 8;
  uint64_t v81 = v83;
  v83(v78, v79);
  unint64_t v84 = *(void *)(v80 + 16);
  swift_bridgeObjectRelease();
  if (v1 >= v84 || v1 >= *(void *)(v148 + 16))
  {
LABEL_64:
    uint64_t v76 = 0;
    goto LABEL_65;
  }
  uint64_t v85 = v124;
  sub_1AD9DD3F0();
  uint64_t v86 = v129;
  uint64_t v87 = sub_1AD9DD630();
  v81(v85, v86);
  if (v1 >= *(void *)(v87 + 16)) {
    goto LABEL_72;
  }
  unint64_t v141 = (void (*)(char *, char *, uint64_t))v81;
  uint64_t v89 = *(void *)(v87 + v13);
  uint64_t v88 = *(void *)(v87 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v1 >= *(void *)(v148 + 16))
  {
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    return;
  }
  uint64_t v90 = &v32[v148];
  uint64_t v91 = v123;
  uint64_t v92 = v143;
  v137((char *)v123, v90, v143);
  uint64_t v93 = sub_1AD9DD370();
  uint64_t v95 = v94;
  v133((char *)v91, v92);
  if (v89 == v93 && v88 == v95)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_64;
  }
  char v96 = sub_1AD9E02D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v96) {
    goto LABEL_64;
  }
  uint64_t v97 = (char *)v148;
  int64_t v98 = *(void *)(v148 + 16);
  uint64_t v99 = (void *)MEMORY[0x1E4FBC860];
  if (v98)
  {
    uint64_t v125 = v82;
    id v144 = (id)MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1AD8A2568(0, v98, 0);
    uint64_t v140 = v97;
    char v100 = &v97[v128];
    do
    {
      uint64_t v101 = v127;
      uint64_t v102 = v143;
      v137(v127, v100, v143);
      uint64_t v103 = sub_1AD9DD370();
      uint64_t v105 = v104;
      v133(v101, v102);
      uint64_t v99 = v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AD8A2568(0, v99[2] + 1, 1);
        uint64_t v99 = v144;
      }
      unint64_t v107 = v99[2];
      unint64_t v106 = v99[3];
      if (v107 >= v106 >> 1)
      {
        sub_1AD8A2568(v106 > 1, v107 + 1, 1);
        uint64_t v99 = v144;
      }
      v99[2] = v107 + 1;
      uint64_t v108 = &v99[2 * v107];
      v108[4] = v103;
      v108[5] = v105;
      v100 += v142;
      --v98;
    }
    while (v98);
    swift_bridgeObjectRelease();
  }
  uint64_t v109 = v126;
  sub_1AD9DD3F0();
  uint64_t v110 = v129;
  uint64_t v111 = sub_1AD9DD630();
  uint64_t v112 = (void (*)(char *, uint64_t))v141;
  ((void (*)(char *, uint64_t))v141)(v109, v110);
  if (v1 >= *(void *)(v111 + 16)) {
    goto LABEL_74;
  }
  uint64_t v113 = *(void *)(v111 + v13);
  uint64_t v114 = *(void *)(v111 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  LOBYTE(v113) = sub_1AD8E1578(v113, v114, v99);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v113 & 1) == 0) {
    goto LABEL_64;
  }
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = v121;
  uint64_t v115 = v126;
  sub_1AD9DD3F0();
  uint64_t v116 = v129;
  uint64_t v117 = sub_1AD9DD630();
  v112(v115, v116);
  if (v1 >= *(void *)(v117 + 16)) {
    goto LABEL_75;
  }
  uint64_t v119 = *(void *)(v117 + v13);
  uint64_t v118 = *(void *)(v117 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v76 + 32) = v119;
  *(void *)(v76 + 40) = v118;
LABEL_65:
  swift_bridgeObjectRetain();
  sub_1AD9DD3C0();
  swift_bridgeObjectRelease();
  if (v76)
  {
    uint64_t v120 = (void (*)(id *, void))sub_1AD9DD3E0();
    sub_1AD9DD620();
    swift_bridgeObjectRelease();
    v120(&v144, 0);
    sub_1AD9DD3D0();
  }
  (*(void (**)(char *, uint64_t))(v132 + 8))(v130, v143);
  swift_bridgeObjectRelease();
}

uint64_t sub_1AD8E0A74()
{
  uint64_t v1 = qword_1E9A4B548;
  if (*(void *)(v0 + qword_1E9A4B548))
  {
    uint64_t v2 = *(void *)(v0 + qword_1E9A4B548);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = *(void *)(v0 + qword_1E9A4B540);
    char v8 = 1;
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for GoalSectionProvider();
    swift_allocObject();
    uint64_t v6 = swift_retain();
    uint64_t v2 = sub_1AD8772BC(v6, v4, &v8, (uint64_t)sub_1AD8E353C, v5);
    swift_release();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1AD8E0B80()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1AD8DFBC8();
    return swift_release();
  }
  return result;
}

uint64_t sub_1AD8E0BD8(void *a1, uint64_t a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1AD9DCCB0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + qword_1E9A4B548) = 0;
  v16[0] = a1;
  sub_1AD8E3440();
  swift_allocObject();
  swift_retain();
  id v13 = a1;
  *(void *)(v4 + qword_1E9A4B530) = sub_1AD9DDB30();
  *(double *)uint64_t v16 = a3;
  LOBYTE(v16[1]) = 0;
  sub_1AD8387F8();
  swift_allocObject();
  *(void *)(v4 + qword_1E9A4B538) = sub_1AD9DDB30();
  *(void *)(v4 + qword_1E9A4B540) = a2;
  swift_release();
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  sub_1AD9E0030();
  swift_bridgeObjectRelease();
  strcpy((char *)v16, "MutableArray<");
  HIWORD(v16[1]) = -4864;
  sub_1AD9DCCA0();
  sub_1AD9DCC80();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD9DF790();
  uint64_t v14 = sub_1AD9DD3A0();
  swift_retain();
  sub_1AD8DFBC8();
  swift_release();

  return v14;
}

void sub_1AD8E0E00()
{
}

uint64_t sub_1AD8E0E30()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1AD8E0E80()
{
  sub_1AD9DD400();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1AD8E0EF0()
{
  return type metadata accessor for ScheduleOnboardingSection(0);
}

uint64_t sub_1AD8E0EF8@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v47 = a3;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = type metadata accessor for ScheduleOccurrenceRow(0);
  MEMORY[0x1F4188790](v46, v4);
  uint64_t v48 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v44 = *a1;
  sub_1AD9DE810();
  *(void *)&long long v43 = sub_1AD9DE870();
  swift_release();
  if (qword_1EB7255E0 != -1) {
    swift_once();
  }
  uint64_t v42 = qword_1EB725608;
  swift_retain();
  sub_1AD9DE990();
  sub_1AD9DE8B0();
  uint64_t v41 = sub_1AD9DE920();
  swift_release();
  if (qword_1E9A48F08 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1E9A490B8;
  uint64_t v40 = qword_1E9A4AE58;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v39 = sub_1AD9DE870();
  if (qword_1E9A48F00 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1E9A4AE50;
  swift_retain();
  uint64_t v8 = sub_1AD9DE870();
  uint64_t v9 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE910();
  sub_1AD9DE8C0();
  uint64_t v10 = sub_1AD9DE920();
  swift_release();
  uint64_t v11 = qword_1E9A4AE58;
  swift_retain();
  sub_1AD9DE990();
  sub_1AD9DE8C0();
  uint64_t v12 = sub_1AD9DE920();
  swift_release();
  *(void *)&long long v49 = v43;
  BYTE8(v49) = 2;
  uint64_t v50 = v42;
  __int16 v51 = 0;
  uint64_t v52 = v41;
  char v53 = 2;
  uint64_t v54 = v40;
  __int16 v55 = 0;
  uint64_t v56 = v39;
  char v57 = 2;
  uint64_t v58 = v7;
  __int16 v59 = 0;
  uint64_t v60 = v8;
  char v61 = 2;
  uint64_t v62 = v9;
  __int16 v63 = 0;
  uint64_t v64 = v10;
  char v65 = 2;
  uint64_t v66 = v11;
  __int16 v67 = 0;
  uint64_t v68 = v12;
  char v69 = 2;
  uint64_t v70 = qword_1E9A4AE58;
  __int16 v71 = 0;
  uint64_t v72 = 0;
  swift_retain();
  id v13 = v44;
  ScheduleOccurrenceViewModel.init(scheduleOccurrence:windDownTimeInterval:viewStyle:)(v44, 0, 1, &v49, v48);
  uint64_t v14 = v45;
  uint64_t v15 = *(void *)(v45 + qword_1E9A4B530);
  swift_retain();
  id v16 = objc_msgSend(v13, sel_weekdays);
  uint64_t v17 = *(void *)(v14 + qword_1E9A4B540);
  id v44 = v16;
  uint64_t v45 = v17;
  uint64_t v18 = MEMORY[0x1E4FBB1A0];
  sub_1AD8E34B8(0, (unint64_t *)&qword_1EB725BD0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  long long v43 = xmmword_1AD9E3080;
  *(_OWORD *)(inited + 16) = xmmword_1AD9E3080;
  swift_retain();
  id v20 = (id)HKSPIdentifierStringForWeekdays();
  uint64_t v21 = sub_1AD9DF710();
  uint64_t v23 = v22;

  *(void *)(inited + 32) = v21;
  *(void *)(inited + 40) = v23;
  *(void *)(inited + 48) = 0xD000000000000010;
  *(void *)(inited + 56) = 0x80000001AD9F31C0;
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1AD9E53A0;
  *(void *)(v24 + 32) = sub_1AD9DF710();
  *(void *)(v24 + 40) = v25;
  *(void *)(v24 + 48) = 0x7065656C53;
  *(void *)(v24 + 56) = 0xE500000000000000;
  *(void *)(v24 + 64) = 0x696472616F626E4FLL;
  *(void *)(v24 + 72) = 0xEA0000000000676ELL;
  *(void *)&long long v49 = v24;
  uint64_t v26 = swift_bridgeObjectRetain();
  sub_1AD86C2F8(v26);
  sub_1AD8E34B8(0, &qword_1EB725B60, v18, MEMORY[0x1E4FBB320]);
  sub_1AD86E270();
  uint64_t v27 = sub_1AD9DF690();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_release();
  sub_1AD8E2E34(0, &qword_1E9A49FC8, (unint64_t *)&qword_1E9A4A3C0, MEMORY[0x1E4F66028], MEMORY[0x1E4FBBE00]);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = v43;
  uint64_t v31 = v46;
  *(void *)(v30 + 56) = v46;
  *(void *)(v30 + 64) = sub_1AD8E2400(&qword_1E9A4B5B0, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceRow);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v30 + 32));
  uint64_t v33 = v48;
  sub_1AD8E60F0(v48, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ScheduleOccurrenceRow);
  *(void *)(v30 + 96) = &type metadata for EditScheduleOccurrenceRow;
  *(void *)(v30 + 104) = sub_1AD8E3314();
  unint64_t v34 = (void *)swift_allocObject();
  *(void *)(v30 + 72) = v34;
  id v35 = v44;
  v34[2] = v15;
  uint64_t v34[3] = v35;
  v34[4] = v45;
  v34[5] = v27;
  v34[6] = v29;
  *(void *)&long long v49 = v31;
  sub_1AD8E33A8();
  swift_retain();
  swift_bridgeObjectRetain();
  *(void *)&long long v49 = sub_1AD9DF730();
  *((void *)&v49 + 1) = v36;
  sub_1AD9DF790();
  ScheduleOccurrenceViewModel.description.getter();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  sub_1AD9DD380();
  swift_bridgeObjectRelease();
  swift_release();
  return sub_1AD8E33E4(v33);
}

uint64_t sub_1AD8E1578(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = sub_1AD9E02D0();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1AD9E02D0() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD8E1640()
{
  return sub_1AD9DFB40();
}

uint64_t sub_1AD8E1768@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v32 = a1;
  sub_1AD8E2448();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AD8E3BDC(0, &qword_1E9A4B578, MEMORY[0x1E4F66758]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = sub_1AD9DFB30();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1AD9DFB10();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    uint64_t v16 = sub_1AD9DCF00();
    uint64_t v17 = *(int *)(v2 + 48);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v5, v14, v10);
    *(void *)&v5[v17] = v16;
    int v18 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v5, v10);
    if (v18 == *MEMORY[0x1E4F66740])
    {
      if (v16 == 1)
      {
        if (qword_1EB724E38 != -1) {
          swift_once();
        }
        id v19 = (id)qword_1EB727930;
        sub_1AD9DCA70();

        uint64_t v20 = sub_1AD9DFB70();
        uint64_t v21 = v32;
        uint64_t v32[3] = v20;
        v21[4] = sub_1AD8E2400(&qword_1E9A4B590, MEMORY[0x1E4F66768]);
        __swift_allocate_boxed_opaque_existential_1(v21);
        goto LABEL_24;
      }
      goto LABEL_20;
    }
    if (v18 == *MEMORY[0x1E4F66750])
    {
      if (v16 != 1)
      {
LABEL_21:
        uint64_t v28 = sub_1AD9DFB00();
        uint64_t v29 = v32;
        uint64_t v32[3] = v28;
        v29[4] = sub_1AD8E2400(&qword_1E9A4B588, MEMORY[0x1E4F66730]);
        __swift_allocate_boxed_opaque_existential_1(v29);
        sub_1AD9DFAF0();
        goto LABEL_25;
      }
LABEL_20:
      uint64_t v26 = sub_1AD9DFB90();
      uint64_t v27 = v32;
      uint64_t v32[3] = v26;
      v27[4] = sub_1AD8E2400(&qword_1E9A4B580, MEMORY[0x1E4F66778]);
      __swift_allocate_boxed_opaque_existential_1(v27);
      sub_1AD9DFB80();
LABEL_25:
      uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
      v31(v14, v10);
      return ((uint64_t (*)(char *, uint64_t))v31)(v5, v10);
    }
    if (v18 != *MEMORY[0x1E4F66738])
    {
      if (v18 == *MEMORY[0x1E4F66748])
      {
        uint64_t v25 = *(void *)(sub_1AD9DD3B0() + 16);
        swift_bridgeObjectRelease();
        if (v25 - 1 != v16) {
          goto LABEL_21;
        }
      }
      goto LABEL_20;
    }
    uint64_t v22 = *(void *)(sub_1AD9DD3B0() + 16);
    swift_bridgeObjectRelease();
    if (v22 - 1 != v16) {
      goto LABEL_20;
    }
    sub_1AD9DDB00();
    id v23 = v33;
    if (objc_msgSend(v33, sel_weekdaysWithOccurrences))
    {
      if (!objc_msgSend(v23, sel_weekdaysWithoutOccurrences))
      {

LABEL_23:
        uint64_t v30 = v32;
        v30[3] = sub_1AD9DFB70();
        v30[4] = sub_1AD8E2400(&qword_1E9A4B590, MEMORY[0x1E4F66768]);
        __swift_allocate_boxed_opaque_existential_1(v30);
LABEL_24:
        sub_1AD9DFB50();
        goto LABEL_25;
      }
      objc_msgSend(v23, sel_weekdaysWithOccurrences);
    }

    if (qword_1EB724E38 != -1) {
      swift_once();
    }
    id v24 = (id)qword_1EB727930;
    sub_1AD9DCA70();

    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AD8E1DFC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1AD8E1768(a1);
}

uint64_t sub_1AD8E1E20()
{
  return sub_1AD9DD280();
}

uint64_t sub_1AD8E1E88()
{
  sub_1AD8E33A8();
  uint64_t v1 = sub_1AD9DF730();
  sub_1AD9DF790();
  ScheduleOccurrenceViewModel.description.getter();
  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1AD8E1EFC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AD8E60F0(v1, a1, (uint64_t (*)(void))type metadata accessor for ScheduleOccurrenceViewModel);
}

uint64_t sub_1AD8E1F30()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8E1F74()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8E1FB4()
{
  sub_1AD8E60B4();
  uint64_t v2 = sub_1AD9DF730();
  sub_1AD9DF790();
  id v0 = (id)HKSPIdentifierStringForWeekdays();
  sub_1AD9DF710();

  sub_1AD9DF790();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1AD8E2050()
{
  if (qword_1EB724E38 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1EB727930;
  uint64_t v1 = sub_1AD9DCA70();

  return v1;
}

uint64_t (*sub_1AD8E211C())()
{
  return nullsub_1;
}

uint64_t sub_1AD8E213C()
{
  return sub_1AD9E03E0();
}

uint64_t sub_1AD8E2184()
{
  return sub_1AD9E03B0();
}

uint64_t sub_1AD8E21B0()
{
  return sub_1AD9E03E0();
}

BOOL sub_1AD8E21F4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

void sub_1AD8E2208(uint64_t a1, void *a2)
{
}

uint64_t sub_1AD8E2248()
{
  return sub_1AD9DF730();
}

uint64_t sub_1AD8E227C()
{
  return ScheduledDaysState.localizedPrompt.getter();
}

id sub_1AD8E22B8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    BOOL v2 = v1 == 2;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    id result = (id)HKHealthTintColor();
    if (result) {
      return result;
    }
    __break(1u);
  }
  if (v1 != 1)
  {
LABEL_12:
    id result = (id)sub_1AD9E02E0();
    __break(1u);
    return result;
  }
  id result = (id)BPSBridgeTintColor();
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1AD8E2338()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AD8E2368(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

void sub_1AD8E23A0(uint64_t a1, void *a2)
{
}

unint64_t sub_1AD8E23AC()
{
  unint64_t result = qword_1E9A4B560;
  if (!qword_1E9A4B560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B560);
  }
  return result;
}

uint64_t sub_1AD8E2400(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1AD8E2448()
{
  if (!qword_1E9A4B570)
  {
    sub_1AD9DFB30();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9A4B570);
    }
  }
}

uint64_t sub_1AD8E24B0(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v20 = a2;
  uint64_t v19 = sub_1AD9DD390();
  uint64_t v5 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v6);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    if (!v9) {
      return v10;
    }
    uint64_t v22 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_1AD8A2588(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0) {
      break;
    }
    uint64_t v12 = 0;
    uint64_t v10 = v22;
    v17[1] = v5 + 32;
    unint64_t v18 = a1 & 0xC000000000000001;
    while (v9 != v12)
    {
      if (v18) {
        id v13 = (id)MEMORY[0x1B3E6BFF0](v12, a1);
      }
      else {
        id v13 = *(id *)(a1 + 8 * v12 + 32);
      }
      uint64_t v14 = v13;
      id v21 = v13;
      sub_1AD8E0EF8(&v21, v20, (uint64_t)v8);
      if (v3)
      {
        swift_release();

        return v10;
      }
      uint64_t v3 = 0;

      uint64_t v22 = v10;
      unint64_t v16 = *(void *)(v10 + 16);
      unint64_t v15 = *(void *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1AD8A2588(v15 > 1, v16 + 1, 1);
        uint64_t v10 = v22;
      }
      ++v12;
      *(void *)(v10 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v16, v8, v19);
      if (v9 == v12) {
        return v10;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_1AD8E26E0(uint64_t a1, uint64_t a2)
{
  sub_1AD9DDB00();
  id v3 = objc_msgSend(v7, sel_occurrencesOnDays_, a2);

  sub_1AD837214(0, (unint64_t *)&qword_1E9A49720);
  unint64_t v4 = sub_1AD9DF860();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1AD9E0190();
    swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B3E6BFF0](0, v4);
    goto LABEL_6;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v5 = *(id *)(v4 + 32);
    goto LABEL_6;
  }
  __break(1u);
}

void sub_1AD8E27F4(void *a1)
{
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_1AD9DD550();
  __swift_project_value_buffer(v3, (uint64_t)qword_1EB725958);
  unint64_t v4 = sub_1AD9DD530();
  os_log_type_t v5 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v34[0] = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    *(void *)&v31[0] = sub_1AD838978(0xD000000000000040, 0x80000001AD9F3110, v34);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v4, v5, "[%{public}s] Edit schedule occurrence row tapped", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v7, -1, -1);
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
  }

  uint64_t v33 = (uint64_t)a1;
  sub_1AD837214(0, &qword_1E9A49270);
  sub_1AD843E70(0, &qword_1E9A4B598);
  id v8 = a1;
  if (swift_dynamicCast())
  {
    sub_1AD843F30(v31, (uint64_t)v34);
    sub_1AD8E26E0(*v1, v1[1]);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = v35;
      uint64_t v12 = v36;
      __swift_project_boxed_opaque_existential_1Tm(v34, v35);
      (*(void (**)(void *, uint64_t, uint64_t))(v12 + 16))(v10, v11, v12);
    }
    else
    {
      sub_1AD87877C((uint64_t)(v1 + 3), (uint64_t)v31);
      swift_retain();
      sub_1AD87887C((uint64_t)v31);
      swift_retain();
      sub_1AD87887C((uint64_t)v31);
      id v23 = sub_1AD9DD530();
      os_log_type_t v24 = sub_1AD9DFBC0();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        uint64_t v33 = v26;
        *(_DWORD *)uint64_t v25 = 136446466;
        sub_1AD838978(0xD000000000000040, 0x80000001AD9F3110, &v33);
        sub_1AD9DFEA0();
        *(_WORD *)(v25 + 12) = 2082;
        id v27 = (id)NSStringFromHKSPWeekdays();
        uint64_t v28 = sub_1AD9DF710();
        unint64_t v30 = v29;

        sub_1AD838978(v28, v30, &v33);
        sub_1AD9DFEA0();
        swift_release();
        swift_bridgeObjectRelease();
        sub_1AD8788D4((uint64_t)v31);
        swift_release();
        sub_1AD8788D4((uint64_t)v31);
        _os_log_impl(&dword_1AD834000, v23, v24, "[%{public}s] Unable to edit occurrence for identifier: %{public}s", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3E6D1A0](v26, -1, -1);
        MEMORY[0x1B3E6D1A0](v25, -1, -1);
      }
      else
      {
        swift_release();
        sub_1AD8788D4((uint64_t)v31);
        swift_release();
        sub_1AD8788D4((uint64_t)v31);
      }
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
  }
  else
  {
    uint64_t v32 = 0;
    memset(v31, 0, sizeof(v31));
    sub_1AD8E2DAC((uint64_t)v31);
    id v13 = v8;
    uint64_t v14 = sub_1AD9DD530();
    os_log_type_t v15 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v34[0] = v17;
      *(_DWORD *)uint64_t v16 = 136446466;
      *(void *)&v31[0] = sub_1AD838978(0xD000000000000040, 0x80000001AD9F3110, v34);
      sub_1AD9DFEA0();
      *(_WORD *)(v16 + 12) = 2082;
      id v18 = v13;
      id v19 = objc_msgSend(v18, sel_description);
      uint64_t v20 = sub_1AD9DF710();
      unint64_t v22 = v21;

      *(void *)&v31[0] = sub_1AD838978(v20, v22, v34);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v14, v15, "[%{public}s] Unable to present schedule edit on unknown view controller: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v17, -1, -1);
      MEMORY[0x1B3E6D1A0](v16, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t sub_1AD8E2DAC(uint64_t a1)
{
  sub_1AD8E2E34(0, &qword_1E9A4B5A0, &qword_1E9A4B598, (uint64_t)&protocol descriptor for ScheduleActionHandling, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1AD8E2E34(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_1AD843E70(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_1AD8E2E9C(void *a1)
{
  if (qword_1EB725658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1AD9DD550();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EB725958);
  uint64_t v3 = sub_1AD9DD530();
  os_log_type_t v4 = sub_1AD9DFBE0();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v23[0] = v6;
    *(_DWORD *)os_log_type_t v5 = 136446210;
    *(void *)&v20[0] = sub_1AD838978(0xD00000000000003BLL, 0x80000001AD9F3160, v23);
    sub_1AD9DFEA0();
    _os_log_impl(&dword_1AD834000, v3, v4, "[%{public}s] Add schedule occurrence prompt row tapped", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3E6D1A0](v6, -1, -1);
    MEMORY[0x1B3E6D1A0](v5, -1, -1);
  }

  unint64_t v22 = a1;
  sub_1AD837214(0, &qword_1E9A49270);
  sub_1AD843E70(0, &qword_1E9A4B598);
  id v7 = a1;
  if (swift_dynamicCast())
  {
    sub_1AD843F30(v20, (uint64_t)v23);
    uint64_t v8 = v24;
    uint64_t v9 = v25;
    __swift_project_boxed_opaque_existential_1Tm(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
  }
  else
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    sub_1AD8E2DAC((uint64_t)v20);
    id v10 = v7;
    uint64_t v11 = sub_1AD9DD530();
    os_log_type_t v12 = sub_1AD9DFBE0();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      v23[0] = v14;
      *(_DWORD *)uint64_t v13 = 136446466;
      *(void *)&v20[0] = sub_1AD838978(0xD00000000000003BLL, 0x80000001AD9F3160, v23);
      sub_1AD9DFEA0();
      *(_WORD *)(v13 + 12) = 2082;
      id v15 = v10;
      id v16 = objc_msgSend(v15, sel_description);
      uint64_t v17 = sub_1AD9DF710();
      unint64_t v19 = v18;

      *(void *)&v20[0] = sub_1AD838978(v17, v19, v23);
      sub_1AD9DFEA0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AD834000, v11, v12, "[%{public}s] Unable to present schedule compose on unknown view controller: %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3E6D1A0](v14, -1, -1);
      MEMORY[0x1B3E6D1A0](v13, -1, -1);
    }
    else
    {
    }
  }
}

unint64_t sub_1AD8E3268()
{
  unint64_t result = qword_1E9A4B5A8;
  if (!qword_1E9A4B5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B5A8);
  }
  return result;
}

uint64_t sub_1AD8E32BC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ScheduleOccurrenceRow(uint64_t a1)
{
  return sub_1AD8372AC(a1, (uint64_t *)&unk_1E9A4B5D0);
}

unint64_t sub_1AD8E3314()
{
  unint64_t result = qword_1E9A4B5B8;
  if (!qword_1E9A4B5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9A4B5B8);
  }
  return result;
}

uint64_t sub_1AD8E3368()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1AD8E33A8()
{
  unint64_t result = qword_1E9A4B5C0;
  if (!qword_1E9A4B5C0)
  {
    type metadata accessor for ScheduleOccurrenceRow(255);
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9A4B5C0);
  }
  return result;
}

uint64_t sub_1AD8E33E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ScheduleOccurrenceRow(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1AD8E3440()
{
  if (!qword_1E9A4B5C8)
  {
    sub_1AD837214(255, (unint64_t *)&qword_1E9A4ABE8);
    unint64_t v0 = sub_1AD9DDB20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9A4B5C8);
    }
  }
}

void sub_1AD8E34B8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1AD8E3504()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AD8E353C()
{
  return sub_1AD8E0B80();
}

uint64_t *sub_1AD8E3544(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = sub_1AD9DC990();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = v6[5];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    uint64_t v16 = v6[6];
    uint64_t v17 = (char *)a1 + v16;
    unint64_t v18 = (char *)a2 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    *(uint64_t *)((char *)a1 + v6[7]) = *(uint64_t *)((char *)a2 + v6[7]);
    *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
    *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    uint64_t v19 = v6[10];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    *((void *)v20 + 2) = *((void *)v21 + 2);
    unsigned char v20[24] = v21[24];
    v20[25] = v21[25];
    *((void *)v20 + 4) = *((void *)v21 + 4);
    v20[40] = v21[40];
    *((void *)v20 + 6) = *((void *)v21 + 6);
    v20[56] = v21[56];
    v20[57] = v21[57];
    *((void *)v20 + 8) = *((void *)v21 + 8);
    unsigned char v20[72] = v21[72];
    *((void *)v20 + 10) = *((void *)v21 + 10);
    v20[88] = v21[88];
    v20[89] = v21[89];
    *((void *)v20 + 12) = *((void *)v21 + 12);
    v20[104] = v21[104];
    *((void *)v20 + 14) = *((void *)v21 + 14);
    v20[120] = v21[120];
    v20[121] = v21[121];
    *((void *)v20 + 16) = *((void *)v21 + 16);
    v20[136] = v21[136];
    *((void *)v20 + 18) = *((void *)v21 + 18);
    v20[152] = v21[152];
    v20[153] = v21[153];
    *((void *)v20 + 20) = *((void *)v21 + 20);
    v20[168] = v21[168];
    *((void *)v20 + 22) = *((void *)v21 + 22);
    v20[184] = v21[184];
    v20[185] = v21[185];
    *((void *)v20 + 24) = *((void *)v21 + 24);
    uint64_t v22 = v6[11];
    __dst = (char *)a1 + v22;
    uint64_t v42 = v6;
    uint64_t v39 = (char *)a2 + v22;
    uint64_t v23 = sub_1AD9DCC70();
    uint64_t v40 = *(void *)(v23 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v24(v39, 1, v23))
    {
      sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
      memcpy(__dst, v39, *(void *)(*(void *)(v25 - 8) + 64));
      uint64_t v26 = v40;
    }
    else
    {
      uint64_t v26 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(__dst, v39, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v23);
    }
    uint64_t v27 = v42[12];
    uint64_t v28 = (char *)a1 + v27;
    unint64_t v29 = (char *)a2 + v27;
    if (v24((char *)a2 + v27, 1, v23))
    {
      sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v29, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v23);
    }
    uint64_t v31 = v42[13];
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    if (v24((char *)a2 + v31, 1, v23))
    {
      sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v32, v33, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v32, 0, 1, v23);
    }
    uint64_t v35 = v42[14];
    uint64_t v36 = *(void **)((char *)a2 + v35);
    *(uint64_t *)((char *)a1 + v35) = (uint64_t)v36;
    id v37 = v36;
  }
  return a1;
}

void sub_1AD8E3BDC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1AD9DFE90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s13SleepHealthUI22ScheduleOccurrenceViewVwxx_0(uint64_t a1)
{
  uint64_t v2 = sub_1AD9DC990();
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v4(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  uint64_t v5 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v6 = a1 + v5[5];
  if (!v4(v6, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = a1 + v5[11];
  uint64_t v8 = sub_1AD9DCC70();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v11 = a1 + v5[12];
  if (!v10(v11, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v12 = a1 + v5[13];
  if (!v10(v12, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  }
  uint64_t v13 = *(void **)(a1 + v5[14]);
}

char *sub_1AD8E3EB8(char *a1, char *a2)
{
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v6(a2, 1, v4))
  {
    sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  uint64_t v8 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (v6(&a2[v9], 1, v4))
  {
    sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v11, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  }
  uint64_t v13 = v8[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)&a1[v8[7]] = *(void *)&a2[v8[7]];
  a1[v8[8]] = a2[v8[8]];
  a1[v8[9]] = a2[v8[9]];
  uint64_t v16 = v8[10];
  uint64_t v17 = &a1[v16];
  unint64_t v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  *((void *)v17 + 2) = *((void *)v18 + 2);
  v17[24] = v18[24];
  v17[25] = v18[25];
  *((void *)v17 + 4) = *((void *)v18 + 4);
  v17[40] = v18[40];
  *((void *)v17 + 6) = *((void *)v18 + 6);
  v17[56] = v18[56];
  v17[57] = v18[57];
  *((void *)v17 + 8) = *((void *)v18 + 8);
  v17[72] = v18[72];
  *((void *)v17 + 10) = *((void *)v18 + 10);
  v17[88] = v18[88];
  v17[89] = v18[89];
  *((void *)v17 + 12) = *((void *)v18 + 12);
  v17[104] = v18[104];
  *((void *)v17 + 14) = *((void *)v18 + 14);
  v17[120] = v18[120];
  v17[121] = v18[121];
  *((void *)v17 + 16) = *((void *)v18 + 16);
  v17[136] = v18[136];
  *((void *)v17 + 18) = *((void *)v18 + 18);
  v17[152] = v18[152];
  v17[153] = v18[153];
  *((void *)v17 + 20) = *((void *)v18 + 20);
  v17[168] = v18[168];
  *((void *)v17 + 22) = *((void *)v18 + 22);
  v17[184] = v18[184];
  v17[185] = v18[185];
  *((void *)v17 + 24) = *((void *)v18 + 24);
  uint64_t v19 = v8[11];
  __dst = &a1[v19];
  uint64_t v36 = &a2[v19];
  uint64_t v20 = sub_1AD9DCC70();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v22(v36, 1, v20))
  {
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(__dst, v36, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v36, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
  }
  uint64_t v24 = v8[12];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  if (v22(&a2[v24], 1, v20))
  {
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v25, v26, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, v20);
  }
  uint64_t v28 = v8[13];
  unint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  if (v22(&a2[v28], 1, v20))
  {
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v29, v30, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v29, 0, 1, v20);
  }
  uint64_t v32 = v8[14];
  uint64_t v33 = *(void **)&a2[v32];
  *(void *)&a1[v32] = v33;
  id v34 = v33;
  return a1;
}

char *sub_1AD8E4514(char *a1, char *a2)
{
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
LABEL_6:
    sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 24))(a1, a2, v4);
LABEL_7:
  uint64_t v10 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v11 = v10[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = v6(&a1[v11], 1, v4);
  int v15 = v6(v13, 1, v4);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v12, v13, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
LABEL_12:
    sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 24))(v12, v13, v4);
LABEL_13:
  uint64_t v17 = v10[6];
  unint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)unint64_t v18 = v20;
  *(void *)&a1[v10[7]] = *(void *)&a2[v10[7]];
  a1[v10[8]] = a2[v10[8]];
  a1[v10[9]] = a2[v10[9]];
  uint64_t v21 = v10[10];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  swift_retain();
  swift_release();
  v22[8] = v23[8];
  *((void *)v22 + 2) = *((void *)v23 + 2);
  swift_retain();
  swift_release();
  v22[24] = v23[24];
  v22[25] = v23[25];
  *((void *)v22 + 4) = *((void *)v23 + 4);
  swift_retain();
  swift_release();
  v22[40] = v23[40];
  *((void *)v22 + 6) = *((void *)v23 + 6);
  swift_retain();
  swift_release();
  v22[56] = v23[56];
  v22[57] = v23[57];
  *((void *)v22 + 8) = *((void *)v23 + 8);
  swift_retain();
  swift_release();
  v22[72] = v23[72];
  *((void *)v22 + 10) = *((void *)v23 + 10);
  swift_retain();
  swift_release();
  v22[88] = v23[88];
  v22[89] = v23[89];
  *((void *)v22 + 12) = *((void *)v23 + 12);
  swift_retain();
  swift_release();
  v22[104] = v23[104];
  *((void *)v22 + 14) = *((void *)v23 + 14);
  swift_retain();
  swift_release();
  v22[120] = v23[120];
  v22[121] = v23[121];
  *((void *)v22 + 16) = *((void *)v23 + 16);
  swift_retain();
  swift_release();
  v22[136] = v23[136];
  *((void *)v22 + 18) = *((void *)v23 + 18);
  swift_retain();
  swift_release();
  v22[152] = v23[152];
  v22[153] = v23[153];
  *((void *)v22 + 20) = *((void *)v23 + 20);
  swift_retain();
  swift_release();
  v22[168] = v23[168];
  *((void *)v22 + 22) = *((void *)v23 + 22);
  swift_retain();
  swift_release();
  v22[184] = v23[184];
  v22[185] = v23[185];
  *((void *)v22 + 24) = *((void *)v23 + 24);
  uint64_t v24 = v10[11];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_1AD9DCC70();
  uint64_t v28 = *(void *)(v27 - 8);
  unint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_18:
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_19:
  uint64_t v33 = v10[12];
  id v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  int v36 = v29(&a1[v33], 1, v27);
  int v37 = v29(v35, 1, v27);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v34, v35, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v34, 0, 1, v27);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v27);
LABEL_24:
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v34, v35, v27);
LABEL_25:
  uint64_t v39 = v10[13];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  int v42 = v29(&a1[v39], 1, v27);
  int v43 = v29(v41, 1, v27);
  if (!v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v40, v41, v27);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v40, v27);
    goto LABEL_30;
  }
  if (v43)
  {
LABEL_30:
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v40, v41, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v40, 0, 1, v27);
LABEL_31:
  uint64_t v45 = v10[14];
  uint64_t v46 = *(void **)&a1[v45];
  uint64_t v47 = *(void **)&a2[v45];
  *(void *)&a1[v45] = v47;
  id v48 = v47;

  return a1;
}

char *sub_1AD8E4D60(char *a1, char *a2)
{
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v6(a2, 1, v4))
  {
    sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  int v8 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (v6(&a2[v9], 1, v4))
  {
    sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v11, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  }
  uint64_t v13 = v8[6];
  int v14 = &a1[v13];
  int v15 = &a2[v13];
  *(void *)int v14 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)&a1[v8[7]] = *(void *)&a2[v8[7]];
  a1[v8[8]] = a2[v8[8]];
  a1[v8[9]] = a2[v8[9]];
  uint64_t v16 = v8[10];
  uint64_t v17 = &a1[v16];
  unint64_t v18 = &a2[v16];
  long long v19 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v19;
  long long v20 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v20;
  long long v21 = *((_OWORD *)v18 + 7);
  *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
  *((_OWORD *)v17 + 7) = v21;
  long long v22 = *((_OWORD *)v18 + 5);
  *((_OWORD *)v17 + 4) = *((_OWORD *)v18 + 4);
  *((_OWORD *)v17 + 5) = v22;
  *((void *)v17 + 24) = *((void *)v18 + 24);
  long long v23 = *((_OWORD *)v18 + 11);
  *((_OWORD *)v17 + 10) = *((_OWORD *)v18 + 10);
  *((_OWORD *)v17 + 11) = v23;
  long long v24 = *((_OWORD *)v18 + 9);
  *((_OWORD *)v17 + 8) = *((_OWORD *)v18 + 8);
  *((_OWORD *)v17 + 9) = v24;
  uint64_t v25 = v8[11];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = sub_1AD9DCC70();
  uint64_t v29 = *(void *)(v28 - 8);
  int v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v30(v27, 1, v28))
  {
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  uint64_t v32 = v8[12];
  uint64_t v33 = &a1[v32];
  id v34 = &a2[v32];
  if (v30(&a2[v32], 1, v28))
  {
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v33, v34, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v28);
  }
  uint64_t v36 = v8[13];
  int v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  if (v30(&a2[v36], 1, v28))
  {
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v37, v38, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v37, 0, 1, v28);
  }
  *(void *)&a1[v8[14]] = *(void *)&a2[v8[14]];
  return a1;
}

char *sub_1AD8E5248(char *a1, char *a2)
{
  uint64_t v4 = sub_1AD9DC990();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
LABEL_6:
    sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(a1, a2, v4);
LABEL_7:
  uint64_t v10 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  uint64_t v11 = v10[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = v6(&a1[v11], 1, v4);
  int v15 = v6(v13, 1, v4);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v13, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
LABEL_12:
    sub_1AD8E3BDC(0, &qword_1E9A49F48, MEMORY[0x1E4F26F90]);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v12, v13, v4);
LABEL_13:
  uint64_t v17 = v10[6];
  unint64_t v18 = &a1[v17];
  long long v19 = &a2[v17];
  *(void *)unint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)&a1[v10[7]] = *(void *)&a2[v10[7]];
  a1[v10[8]] = a2[v10[8]];
  a1[v10[9]] = a2[v10[9]];
  uint64_t v20 = v10[10];
  long long v21 = &a1[v20];
  long long v22 = &a2[v20];
  *(void *)&a1[v20] = *(void *)&a2[v20];
  swift_release();
  v21[8] = v22[8];
  *((void *)v21 + 2) = *((void *)v22 + 2);
  swift_release();
  v21[24] = v22[24];
  v21[25] = v22[25];
  *((void *)v21 + 4) = *((void *)v22 + 4);
  swift_release();
  v21[40] = v22[40];
  *((void *)v21 + 6) = *((void *)v22 + 6);
  swift_release();
  v21[56] = v22[56];
  v21[57] = v22[57];
  *((void *)v21 + 8) = *((void *)v22 + 8);
  swift_release();
  v21[72] = v22[72];
  *((void *)v21 + 10) = *((void *)v22 + 10);
  swift_release();
  v21[88] = v22[88];
  v21[89] = v22[89];
  *((void *)v21 + 12) = *((void *)v22 + 12);
  swift_release();
  v21[104] = v22[104];
  *((void *)v21 + 14) = *((void *)v22 + 14);
  swift_release();
  v21[120] = v22[120];
  v21[121] = v22[121];
  *((void *)v21 + 16) = *((void *)v22 + 16);
  swift_release();
  v21[136] = v22[136];
  *((void *)v21 + 18) = *((void *)v22 + 18);
  swift_release();
  v21[152] = v22[152];
  v21[153] = v22[153];
  *((void *)v21 + 20) = *((void *)v22 + 20);
  swift_release();
  v21[168] = v22[168];
  *((void *)v21 + 22) = *((void *)v22 + 22);
  swift_release();
  v21[184] = v22[184];
  v21[185] = v22[185];
  *((void *)v21 + 24) = *((void *)v22 + 24);
  uint64_t v23 = v10[11];
  long long v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = sub_1AD9DCC70();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_18:
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
LABEL_19:
  uint64_t v32 = v10[12];
  uint64_t v33 = &a1[v32];
  id v34 = &a2[v32];
  int v35 = v28(&a1[v32], 1, v26);
  int v36 = v28(v34, 1, v26);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v33, v34, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v33, 0, 1, v26);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v26);
LABEL_24:
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v33, v34, v26);
LABEL_25:
  uint64_t v38 = v10[13];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  int v41 = v28(&a1[v38], 1, v26);
  int v42 = v28(v40, 1, v26);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v39, v40, v26);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v39, v26);
    goto LABEL_30;
  }
  if (v42)
  {
LABEL_30:
    sub_1AD8E3BDC(0, &qword_1EB724D70, MEMORY[0x1E4F27928]);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v39, v40, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v39, 0, 1, v26);
LABEL_31:
  uint64_t v44 = v10[14];
  uint64_t v45 = *(void **)&a1[v44];
  *(void *)&a1[v44] = *(void *)&a2[v44];

  return a1;
}