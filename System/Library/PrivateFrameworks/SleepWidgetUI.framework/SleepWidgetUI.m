void type metadata accessor for HKSPSleepWidgetState(uint64_t a1)
{
  sub_23BB5721C(a1, &qword_26AEBBA98, (uint64_t)&unk_26EF0E640, MEMORY[0x263F8EEC0]);
}

uint64_t initializeBufferWithCopyOfBuffer for SleepStageWidgetViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for SleepStageWidgetViewModel(uint64_t a1)
{
  if (*(void *)a1)
  {
    swift_bridgeObjectRelease();

    uint64_t v2 = *(void **)(a1 + 16);
  }
}

uint64_t initializeWithCopy for SleepStageWidgetViewModel(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    v4 = *(void **)(a2 + 8);
    v5 = *(void **)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    id v6 = v4;
    id v7 = v5;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for SleepStageWidgetViewModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(void *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v6 = *(void **)(a1 + 8);
      id v7 = (void *)a2[1];
      *(void *)(a1 + 8) = v7;
      id v8 = v7;

      v9 = *(void **)(a1 + 16);
      v10 = (void *)a2[2];
      *(void *)(a1 + 16) = v10;
      id v11 = v10;
    }
    else
    {
      sub_23BB547F0(a1);
      uint64_t v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v16;
    }
  }
  else if (v5)
  {
    *(void *)a1 = v5;
    v12 = (void *)a2[1];
    *(void *)(a1 + 8) = v12;
    v13 = (void *)a2[2];
    *(void *)(a1 + 16) = v13;
    swift_bridgeObjectRetain();
    id v14 = v12;
    id v15 = v13;
  }
  else
  {
    long long v17 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v17;
  }
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  return a1;
}

uint64_t sub_23BB547F0(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SleepStageWidgetViewModel(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1) {
    goto LABEL_5;
  }
  if (!*(void *)a2)
  {
    sub_23BB547F0(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

LABEL_6:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStageWidgetViewModel(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepStageWidgetViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStageWidgetRectangularView()
{
  return &type metadata for SleepStageWidgetRectangularView;
}

_UNKNOWN **sub_23BB549A0()
{
  return &protocol witness table for SleepStageWidgetViewModel;
}

unint64_t sub_23BB549AC(uint64_t a1)
{
  unint64_t result = sub_23BB549D4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23BB549D4()
{
  unint64_t result = qword_26AEBC8A0;
  if (!qword_26AEBC8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC8A0);
  }
  return result;
}

uint64_t sub_23BB54A28()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB54A44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  sub_23BB56694(0, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v2 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  v33 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v37 = (uint64_t)v30 - v4;
  sub_23BB55D5C();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB55DF0();
  uint64_t v34 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v32 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v31 = (char *)v30 - v12;
  id v14 = *(void **)(v1 + 8);
  id v15 = *(void **)(v1 + 16);
  char v16 = *(unsigned char *)(v1 + 24);
  v39 = *(void **)v1;
  v13 = v39;
  v40 = v14;
  v41 = v15;
  char v42 = v16;
  v30[1] = sub_23BB54EF0();
  v39 = v13;
  v40 = v14;
  v41 = v15;
  char v42 = v16;
  sub_23BB5504C();
  sub_23BB5646C(v13, v14, v15);
  if (qword_26AEBCB30 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_23BB564C0((uint64_t)v13, v14, v15);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v13;
  *(void *)(v17 + 24) = v14;
  *(void *)(v17 + 32) = v15;
  *(unsigned char *)(v17 + 40) = v16;
  sub_23BB5646C(v13, v14, v15);
  type metadata accessor for SleepStageResultsView(0);
  sub_23BB55EA4(&qword_26AEBC880, (void (*)(uint64_t))type metadata accessor for SleepStageResultsView);
  sub_23BBDC4D0();
  id v18 = (id)HKSPSleepURL();
  if (v18)
  {
    v19 = v18;
    uint64_t v20 = (uint64_t)v33;
    sub_23BBDB7C0();

    uint64_t v21 = sub_23BBDB7D0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
  }
  else
  {
    uint64_t v22 = sub_23BBDB7D0();
    uint64_t v20 = (uint64_t)v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v33, 1, 1, v22);
  }
  uint64_t v23 = v37;
  sub_23BB5656C(v20, v37);
  sub_23BB55EA4(&qword_268A7DA38, (void (*)(uint64_t))sub_23BB55D5C);
  v24 = v32;
  uint64_t v25 = v36;
  sub_23BBDC1F0();
  sub_23BB56600(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v25);
  v26 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v27 = v31;
  uint64_t v28 = v34;
  v26(v31, v24, v34);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v38, v27, v28);
}

uint64_t sub_23BB54EF0()
{
  id v1 = *(id *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v3 = *(void **)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  sub_23BB5646C(*(id *)v0, v2, v3);
  uint64_t v5 = sub_23BB55368(v1, v2, v3, v4);
  sub_23BB564C0((uint64_t)v1, v2, v3);
  int64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_23BB56A24(0, v6, 0);
    uint64_t v7 = v16;
    sub_23BB570F4();
    uint64_t v8 = v5 + 40;
    do
    {
      uint64_t v9 = sub_23BBDC970();
      uint64_t v11 = v10;
      unint64_t v13 = *(void *)(v16 + 16);
      unint64_t v12 = *(void *)(v16 + 24);
      if (v13 >= v12 >> 1) {
        sub_23BB56A24(v12 > 1, v13 + 1, 1);
      }
      v8 += 16;
      *(void *)(v16 + 16) = v13 + 1;
      uint64_t v14 = v16 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v7;
}

uint64_t sub_23BB5504C()
{
  id v1 = *(id *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v3 = *(void **)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  if (v4 == 3)
  {
    if (v1) {
      BOOL v5 = v2 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5) {
      goto LABEL_15;
    }
  }
  else if (v4 == 2 || v1 == 0 || v2 == 0)
  {
    goto LABEL_15;
  }
  sub_23BB5646C(*(id *)v0, *(void **)(v0 + 8), *(void **)(v0 + 16));
  objc_msgSend(v2, sel_sleepDuration);
  if (v9 > COERCE_DOUBLE(1) && v9 > 0.0)
  {
    sub_23BB564C0((uint64_t)v1, v2, v3);
LABEL_23:
    sub_23BB5721C(0, (unint64_t *)&qword_26AEBC4C8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_23BBDD290;
    sub_23BB5646C(v1, v2, v3);
    uint64_t v13 = sub_23BB556F0(v1, v2, v3, v4);
    uint64_t v15 = v14;
    sub_23BB564C0((uint64_t)v1, v2, v3);
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v15;
    return v12;
  }
  objc_msgSend(v2, sel_inBedDuration);
  double v11 = v10;
  sub_23BB564C0((uint64_t)v1, v2, v3);
  if (v11 > COERCE_DOUBLE(1) && v11 > 0.0) {
    goto LABEL_23;
  }
LABEL_15:
  return sub_23BB55C04();
}

id sub_23BB551F0@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for SleepStageResultsView(0) - 8;
  MEMORY[0x270FA5388]();
  uint64_t v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t *v12 = swift_getKeyPath();
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BB56694(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = (uint64_t *)((char *)v12 + *(int *)(v10 + 28));
  *uint64_t v14 = swift_getKeyPath();
  sub_23BB56694(0, &qword_26AEBC950, MEMORY[0x263F1FC90], v13);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = (char *)v12 + *(int *)(v10 + 32);
  *(void *)uint64_t v15 = a1;
  *((void *)v15 + 1) = a2;
  *((void *)v15 + 2) = a3;
  v15[24] = a4;
  sub_23BB56700((uint64_t)v12, a5);
  return sub_23BB5646C(a1, a2, a3);
}

uint64_t sub_23BB55368(void *a1, void *a2, void *a3, char a4)
{
  sub_23BB5721C(0, (unint64_t *)&qword_26AEBC4C8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23BBDD2A0;
  unint64_t v9 = (unint64_t)sub_23BB55EEC(a1, a2, a3, a4);
  unint64_t v11 = v10;
  *(void *)(inited + 32) = v9;
  *(void *)(inited + 40) = v10;
  unint64_t v12 = (unint64_t)sub_23BB57BFC(a1, a2, a3, a4);
  unint64_t v14 = v13;
  *(void *)(inited + 48) = v12;
  *(void *)(inited + 56) = v13;
  uint64_t v15 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v15 = v9 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (v15)
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_23BB56A24(0, 1, 1);
    uint64_t v16 = v25;
    unint64_t v18 = *(void *)(v25 + 16);
    unint64_t v17 = *(void *)(v25 + 24);
    if (v18 >= v17 >> 1)
    {
      sub_23BB56A24(v17 > 1, v18 + 1, 1);
      uint64_t v16 = v25;
    }
    *(void *)(v16 + 16) = v18 + 1;
    uint64_t v19 = v16 + 16 * v18;
    *(void *)(v19 + 32) = v9;
    *(void *)(v19 + 40) = v11;
  }
  uint64_t v20 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v20 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_23BB56A24(0, *(void *)(v16 + 16) + 1, 1);
    }
    unint64_t v22 = *(void *)(v16 + 16);
    unint64_t v21 = *(void *)(v16 + 24);
    if (v22 >= v21 >> 1) {
      sub_23BB56A24(v21 > 1, v22 + 1, 1);
    }
    *(void *)(v16 + 16) = v22 + 1;
    uint64_t v23 = v16 + 16 * v22;
    *(void *)(v23 + 32) = v12;
    *(void *)(v23 + 40) = v14;
  }
  swift_release();
  return v16;
}

uint64_t sub_23BB55544()
{
  sub_23BB5721C(0, (unint64_t *)&qword_26AEBC4C8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23BBDD2A0;
  unint64_t v1 = (unint64_t)sub_23BB561AC();
  unint64_t v3 = v2;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v2;
  unint64_t v4 = (unint64_t)sub_23BB57EBC();
  unint64_t v6 = v5;
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v5;
  uint64_t v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v7 = v1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_23BB56A24(0, 1, 1);
    uint64_t v8 = v17;
    unint64_t v10 = *(void *)(v17 + 16);
    unint64_t v9 = *(void *)(v17 + 24);
    if (v10 >= v9 >> 1)
    {
      sub_23BB56A24(v9 > 1, v10 + 1, 1);
      uint64_t v8 = v17;
    }
    *(void *)(v8 + 16) = v10 + 1;
    uint64_t v11 = v8 + 16 * v10;
    *(void *)(v11 + 32) = v1;
    *(void *)(v11 + 40) = v3;
  }
  uint64_t v12 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v12 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_23BB56A24(0, *(void *)(v8 + 16) + 1, 1);
    }
    unint64_t v14 = *(void *)(v8 + 16);
    unint64_t v13 = *(void *)(v8 + 24);
    if (v14 >= v13 >> 1) {
      sub_23BB56A24(v13 > 1, v14 + 1, 1);
    }
    *(void *)(v8 + 16) = v14 + 1;
    uint64_t v15 = v8 + 16 * v14;
    *(void *)(v15 + 32) = v4;
    *(void *)(v15 + 40) = v6;
  }
  swift_release();
  return v8;
}

uint64_t sub_23BB556F0(void *a1, void *a2, void *a3, char a4)
{
  if (a4 != 2 && a1 != 0 && a3 != 0)
  {
    sub_23BB5646C(a1, a2, a3);
    id v10 = a2;
    id v11 = a3;
    swift_bridgeObjectRetain();
    id v12 = objc_msgSend(v11, sel_averageSleepDuration);
    if (v12)
    {
      unint64_t v13 = v12;
      objc_msgSend(v12, sel__value);
      double v15 = v14;

      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
      if (v15 > COERCE_DOUBLE(1)) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
    }
    sub_23BB5646C(a1, a2, a3);
    swift_bridgeObjectRetain();
    id v16 = v10;
    id v17 = objc_msgSend(v11, sel_averageInBedDuration);
    if (v17)
    {
      unint64_t v18 = v17;
      objc_msgSend(v17, sel__value);
      double v20 = v19;

      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
      if (v20 > COERCE_DOUBLE(1))
      {
        if (qword_26AEBBAA0 == -1) {
          return sub_23BBDB740();
        }
        goto LABEL_20;
      }
    }
    else
    {
      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
    }
  }
LABEL_9:
  if (qword_26AEBBAA0 != -1) {
LABEL_20:
  }
    swift_once();
  return sub_23BBDB740();
}

uint64_t sub_23BB5596C()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40);
  unint64_t v2 = *(void **)v1;
  unint64_t v3 = *(void **)(v1 + 16);
  if (*(void *)v1) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unint64_t v6 = *(void **)(v1 + 8);
    id v7 = v6;
    id v8 = v3;
    swift_bridgeObjectRetain();
    id v9 = v7;
    id v10 = v8;
    swift_bridgeObjectRetain();
    id v11 = objc_msgSend(v10, sel_averageSleepDuration);
    if (v11)
    {
      id v12 = v11;
      objc_msgSend(v11, sel__value);
      double v14 = v13;

      sub_23BB564C0((uint64_t)v2, v6, v3);
      sub_23BB564C0((uint64_t)v2, v6, v3);
      if (v14 > COERCE_DOUBLE(1)) {
        goto LABEL_6;
      }
    }
    else
    {
      sub_23BB564C0((uint64_t)v2, v6, v3);
      sub_23BB564C0((uint64_t)v2, v6, v3);
    }
    sub_23BB5646C(v2, v6, v3);
    swift_bridgeObjectRetain();
    id v15 = v9;
    id v16 = objc_msgSend(v10, sel_averageInBedDuration);
    if (v16)
    {
      id v17 = v16;
      objc_msgSend(v16, sel__value);
      double v19 = v18;

      sub_23BB564C0((uint64_t)v2, v6, v3);
      sub_23BB564C0((uint64_t)v2, v6, v3);
      if (v19 > COERCE_DOUBLE(1))
      {
        if (qword_26AEBBAA0 == -1) {
          return sub_23BBDB740();
        }
        goto LABEL_17;
      }
    }
    else
    {
      sub_23BB564C0((uint64_t)v2, v6, v3);
      sub_23BB564C0((uint64_t)v2, v6, v3);
    }
  }
LABEL_6:
  if (qword_26AEBBAA0 != -1) {
LABEL_17:
  }
    swift_once();
  return sub_23BBDB740();
}

uint64_t sub_23BB55C04()
{
  sub_23BB5721C(0, (unint64_t *)&qword_26AEBC4C8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23BBDD2A0;
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = sub_23BBDB740();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = sub_23BBDB740();
  *(void *)(v0 + 56) = v2;
  return v0;
}

uint64_t sub_23BB55D3C()
{
  return sub_23BBDC230();
}

void sub_23BB55D5C()
{
  if (!qword_268A7DA28)
  {
    type metadata accessor for SleepStageResultsView(255);
    sub_23BB55EA4(&qword_26AEBC880, (void (*)(uint64_t))type metadata accessor for SleepStageResultsView);
    unint64_t v0 = sub_23BBDC4E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DA28);
    }
  }
}

void sub_23BB55DF0()
{
  if (!qword_268A7DA30)
  {
    sub_23BB55D5C();
    sub_23BB55EA4(&qword_268A7DA38, (void (*)(uint64_t))sub_23BB55D5C);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7DA30);
    }
  }
}

uint64_t sub_23BB55EA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_23BB55EEC(void *a1, void *a2, void *a3, char a4)
{
  if (a4 == 2) {
    return 0;
  }
  BOOL v4 = 0;
  if (a1 && a3)
  {
    sub_23BB5646C(a1, a2, a3);
    id v9 = a2;
    id v10 = a3;
    swift_bridgeObjectRetain();
    id v11 = objc_msgSend(v10, sel_averageSleepDuration);
    if (v11)
    {
      id v12 = v11;
      objc_msgSend(v11, sel__value);
      double v14 = v13;

      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
      if (v14 > COERCE_DOUBLE(1))
      {
        sub_23BBDC7E0();
        double v16 = v15;
        id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
        objc_msgSend(v17, sel_setUnitsStyle_, 5);
        objc_msgSend(v17, sel_setAllowedUnits_, 96);
        id v18 = objc_msgSend(v17, sel_stringFromTimeInterval_, v16);
        if (v18) {
          goto LABEL_9;
        }
        goto LABEL_14;
      }
    }
    else
    {
      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
    }
    sub_23BB5646C(a1, a2, a3);
    swift_bridgeObjectRetain();
    id v20 = v9;
    id v21 = objc_msgSend(v10, sel_averageInBedDuration);
    BOOL v4 = v21;
    if (!v21)
    {
      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
      return v4;
    }
    objc_msgSend(v21, sel__value);
    double v23 = v22;

    sub_23BB564C0((uint64_t)a1, a2, a3);
    sub_23BB564C0((uint64_t)a1, a2, a3);
    if (v23 <= COERCE_DOUBLE(1)) {
      return 0;
    }
    sub_23BBDC7E0();
    double v25 = v24;
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
    objc_msgSend(v17, sel_setUnitsStyle_, 5);
    objc_msgSend(v17, sel_setAllowedUnits_, 96);
    id v18 = objc_msgSend(v17, sel_stringFromTimeInterval_, v25);
    if (v18)
    {
LABEL_9:
      double v19 = v18;
      BOOL v4 = (void *)sub_23BBDC6E0();

      return v4;
    }
LABEL_14:

    return 0;
  }
  return v4;
}

void *sub_23BB561AC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40);
  uint64_t v2 = *(void **)v1;
  if (!*(void *)v1) {
    return 0;
  }
  unint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    BOOL v4 = *(void **)(v1 + 8);
    id v5 = v4;
    id v6 = v3;
    swift_bridgeObjectRetain();
    id v7 = v5;
    id v8 = v6;
    swift_bridgeObjectRetain();
    id v9 = objc_msgSend(v8, sel_averageSleepDuration);
    if (v9)
    {
      id v10 = v9;
      objc_msgSend(v9, sel__value);
      double v12 = v11;

      sub_23BB564C0((uint64_t)v2, v4, v3);
      sub_23BB564C0((uint64_t)v2, v4, v3);
      if (v12 > COERCE_DOUBLE(1))
      {
        sub_23BBDC7E0();
        double v14 = v13;
        id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
        objc_msgSend(v15, sel_setUnitsStyle_, 5);
        objc_msgSend(v15, sel_setAllowedUnits_, 96);
        id v16 = objc_msgSend(v15, sel_stringFromTimeInterval_, v14);
        if (v16)
        {
LABEL_6:
          id v17 = v16;
          unint64_t v3 = (void *)sub_23BBDC6E0();

          return v3;
        }
        goto LABEL_11;
      }
    }
    else
    {
      sub_23BB564C0((uint64_t)v2, v4, v3);
      sub_23BB564C0((uint64_t)v2, v4, v3);
    }
    sub_23BB5646C(v2, v4, v3);
    swift_bridgeObjectRetain();
    id v18 = v7;
    id v19 = objc_msgSend(v8, sel_averageInBedDuration);
    if (!v19)
    {
      sub_23BB564C0((uint64_t)v2, v4, v3);
      sub_23BB564C0((uint64_t)v2, v4, v3);
      return 0;
    }
    id v20 = v19;
    objc_msgSend(v19, sel__value);
    double v22 = v21;

    sub_23BB564C0((uint64_t)v2, v4, v3);
    sub_23BB564C0((uint64_t)v2, v4, v3);
    if (v22 <= COERCE_DOUBLE(1)) {
      return 0;
    }
    sub_23BBDC7E0();
    double v24 = v23;
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
    objc_msgSend(v15, sel_setUnitsStyle_, 5);
    objc_msgSend(v15, sel_setAllowedUnits_, 96);
    id v16 = objc_msgSend(v15, sel_stringFromTimeInterval_, v24);
    if (v16) {
      goto LABEL_6;
    }
LABEL_11:

    return 0;
  }
  return v3;
}

id sub_23BB5646C(id result, void *a2, void *a3)
{
  if (result)
  {
    id v3 = a3;
    swift_bridgeObjectRetain();
    return a2;
  }
  return result;
}

void sub_23BB564C0(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23BB56510()
{
  if (*(void *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x270FA0238](v0, 41, 7);
}

id sub_23BB5655C@<X0>(uint64_t a1@<X8>)
{
  return sub_23BB551F0(*(void **)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(unsigned char *)(v1 + 40), a1);
}

uint64_t sub_23BB5656C(uint64_t a1, uint64_t a2)
{
  sub_23BB56694(0, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB56600(uint64_t a1)
{
  sub_23BB56694(0, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23BB56694(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BB56700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepStageResultsView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_23BB56764@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_23BB56778(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_23BB5678C(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_23BB567A0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_23BB567B0()
{
  return sub_23BBDCBF0();
}

uint64_t sub_23BB567F8()
{
  return sub_23BBDCBE0();
}

uint64_t sub_23BB56824()
{
  return sub_23BBDCBF0();
}

BOOL sub_23BB56868(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void sub_23BB56898(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_23BB568A4(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_23BB568AC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_23BB568C0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_23BB568D4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_23BB56900@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_23BB56924(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_23BB56938@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_23BB5694C(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_23BB56960(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_23BB56974(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_23BB56988()
{
  return *v0 == 0;
}

uint64_t sub_23BB56998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *sub_23BB569B0(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_23BB569C4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_23BB569D0(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BB569E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_23BB5745C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_23BB56A24(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_23BB56AA4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_23BB56A44(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_23BB56C30(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_23BB56A64(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_23BB56DD8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_23BB56A84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_23BB56F64(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_23BB56AA4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_23BB5721C(0, (unint64_t *)&qword_26AEBC4C8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    id v10 = (char *)MEMORY[0x263F8EE78];
  }
  double v13 = v10 + 32;
  double v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t sub_23BB56C30(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_23BB5721C(0, &qword_268A7DA50, (uint64_t)&type metadata for SleepWidgetChartBar, MEMORY[0x263F8E0F8]);
    id v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    id v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  double v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t sub_23BB56DD8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_23BB56694(0, &qword_268A7DA40, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, MEMORY[0x263F8E0F8]);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    id v10 = (char *)MEMORY[0x263F8EE78];
  }
  double v13 = v10 + 32;
  double v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t sub_23BB56F64(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_23BB5721C(0, &qword_268A7DA48, (uint64_t)&type metadata for Segment, MEMORY[0x263F8E0F8]);
    id v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    id v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  double v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

unint64_t sub_23BB570F4()
{
  unint64_t result = qword_26AEBBA70;
  if (!qword_26AEBBA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBBA70);
  }
  return result;
}

void type metadata accessor for HKCategoryValueSleepAnalysis(uint64_t a1)
{
}

void type metadata accessor for HKSleepDaySummaryQueryOptions(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BarView.Range(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BarView.Range(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for HKDayIndexRange(uint64_t a1)
{
}

void sub_23BB5721C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_23BB57268()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB572F0()
{
  return sub_23BB55EA4(&qword_268A7DA70, type metadata accessor for HKSleepDaySummaryQueryOptions);
}

uint64_t sub_23BB57338()
{
  return sub_23BB55EA4(&qword_268A7DA78, type metadata accessor for HKSleepDaySummaryQueryOptions);
}

uint64_t sub_23BB57380()
{
  return sub_23BB55EA4(&qword_268A7DA80, type metadata accessor for HKSleepDaySummaryQueryOptions);
}

uint64_t sub_23BB573C8()
{
  return sub_23BB55EA4(&qword_268A7DA88, type metadata accessor for HKSleepDaySummaryQueryOptions);
}

uint64_t sub_23BB57410()
{
  return sub_23BB55EA4(&qword_268A7DA90, type metadata accessor for HKCategoryValueSleepAnalysis);
}

uint64_t sub_23BB5745C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

ValueMetadata *type metadata accessor for SleepStageWidgetCircularView()
{
  return &type metadata for SleepStageWidgetCircularView;
}

unint64_t sub_23BB574C8(uint64_t a1)
{
  unint64_t result = sub_23BB574F0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23BB574F0()
{
  unint64_t result = qword_26AEBC898;
  if (!qword_26AEBC898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC898);
  }
  return result;
}

uint64_t sub_23BB57544()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB57560@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v42 = a1;
  sub_23BB58304(0, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  v40 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v41 = (uint64_t)v34 - v6;
  uint64_t v7 = sub_23BBDC510();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_23BBDBB40();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  size_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_23BBDC520();
  uint64_t v38 = *(void *)(v12 - 8);
  uint64_t v39 = v12;
  MEMORY[0x270FA5388](v12);
  size_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB58180();
  uint64_t v36 = *(void *)(v15 - 8);
  uint64_t v37 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v35 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = *(void **)v2;
  id v17 = *(void **)(v2 + 8);
  id v19 = *(void **)(v2 + 16);
  int v20 = *(unsigned __int8 *)(v2 + 24);
  sub_23BBDBB30();
  uint64_t v21 = sub_23BBDBAF0();
  v34[1] = v22;
  v34[2] = v21;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v20 != 2)
  {
    if (v18)
    {
      if (v17)
      {
        objc_msgSend(v17, sel_sleepDuration);
        if (v23 > COERCE_DOUBLE(1) && v23 > 0.0)
        {
          sub_23BB58304(0, qword_268A7DAA0, MEMORY[0x263F06828], MEMORY[0x263F8E0F8]);
          sub_23BBDB720();
          *(_OWORD *)(swift_allocObject() + 16) = xmmword_23BBDD290;
          sub_23BB5646C(v18, v17, v19);
          sub_23BB57BFC(v18, v17, v19, v20);
          sub_23BB564C0((uint64_t)v18, v17, v19);
          sub_23BBDC740();
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  uint64_t v24 = MEMORY[0x263F8EE78];
  sub_23BB5646C(v18, v17, v19);
  if (qword_26AEBCB30 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_23BB564C0((uint64_t)v18, v17, v19);
  uint64_t v43 = v24;
  sub_23BB58234(&qword_26AEBCB18, MEMORY[0x263F46300]);
  sub_23BB58304(0, &qword_26AEBCB50, MEMORY[0x263F46300], MEMORY[0x263F8D488]);
  sub_23BB5827C();
  sub_23BBDC9B0();
  sub_23BBDC4F0();
  id v25 = (id)HKSPSleepURL();
  if (v25)
  {
    v26 = v25;
    uint64_t v27 = (uint64_t)v40;
    sub_23BBDB7C0();

    uint64_t v28 = sub_23BBDB7D0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
  }
  else
  {
    uint64_t v29 = sub_23BBDB7D0();
    uint64_t v27 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v40, 1, 1, v29);
  }
  uint64_t v30 = v41;
  sub_23BB5656C(v27, v41);
  sub_23BB58234(&qword_26AEBCB20, MEMORY[0x263F46310]);
  v31 = v35;
  uint64_t v32 = v39;
  sub_23BBDC1F0();
  sub_23BB56600(v30);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v32);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v42, v31, v37);
}

void *sub_23BB57BFC(void *a1, void *a2, void *a3, char a4)
{
  if (a4 == 2) {
    return 0;
  }
  uint64_t v4 = 0;
  if (a1 && a3)
  {
    sub_23BB5646C(a1, a2, a3);
    id v9 = a2;
    id v10 = a3;
    swift_bridgeObjectRetain();
    id v11 = objc_msgSend(v10, sel_averageSleepDuration);
    if (v11)
    {
      uint64_t v12 = v11;
      objc_msgSend(v11, sel__value);
      double v14 = v13;

      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
      if (v14 > COERCE_DOUBLE(1))
      {
        sub_23BBDC7E0();
        double v16 = v15;
        id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
        objc_msgSend(v17, sel_setUnitsStyle_, 1);
        objc_msgSend(v17, sel_setAllowedUnits_, 96);
        id v18 = objc_msgSend(v17, sel_stringFromTimeInterval_, v16);
        if (v18) {
          goto LABEL_9;
        }
        goto LABEL_14;
      }
    }
    else
    {
      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
    }
    sub_23BB5646C(a1, a2, a3);
    swift_bridgeObjectRetain();
    id v20 = v9;
    id v21 = objc_msgSend(v10, sel_averageInBedDuration);
    uint64_t v4 = v21;
    if (!v21)
    {
      sub_23BB564C0((uint64_t)a1, a2, a3);
      sub_23BB564C0((uint64_t)a1, a2, a3);
      return v4;
    }
    objc_msgSend(v21, sel__value);
    double v23 = v22;

    sub_23BB564C0((uint64_t)a1, a2, a3);
    sub_23BB564C0((uint64_t)a1, a2, a3);
    if (v23 <= COERCE_DOUBLE(1)) {
      return 0;
    }
    sub_23BBDC7E0();
    double v25 = v24;
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
    objc_msgSend(v17, sel_setUnitsStyle_, 1);
    objc_msgSend(v17, sel_setAllowedUnits_, 96);
    id v18 = objc_msgSend(v17, sel_stringFromTimeInterval_, v25);
    if (v18)
    {
LABEL_9:
      id v19 = v18;
      uint64_t v4 = (void *)sub_23BBDC6E0();

      return v4;
    }
LABEL_14:

    return 0;
  }
  return v4;
}

void *sub_23BB57EBC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40);
  uint64_t v2 = *(void **)v1;
  if (!*(void *)v1) {
    return 0;
  }
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)(v1 + 8);
    id v5 = v4;
    id v6 = v3;
    swift_bridgeObjectRetain();
    id v7 = v5;
    id v8 = v6;
    swift_bridgeObjectRetain();
    id v9 = objc_msgSend(v8, sel_averageSleepDuration);
    if (v9)
    {
      id v10 = v9;
      objc_msgSend(v9, sel__value);
      double v12 = v11;

      sub_23BB564C0((uint64_t)v2, v4, v3);
      sub_23BB564C0((uint64_t)v2, v4, v3);
      if (v12 > COERCE_DOUBLE(1))
      {
        sub_23BBDC7E0();
        double v14 = v13;
        id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
        objc_msgSend(v15, sel_setUnitsStyle_, 1);
        objc_msgSend(v15, sel_setAllowedUnits_, 96);
        id v16 = objc_msgSend(v15, sel_stringFromTimeInterval_, v14);
        if (v16)
        {
LABEL_6:
          id v17 = v16;
          uint64_t v3 = (void *)sub_23BBDC6E0();

          return v3;
        }
        goto LABEL_11;
      }
    }
    else
    {
      sub_23BB564C0((uint64_t)v2, v4, v3);
      sub_23BB564C0((uint64_t)v2, v4, v3);
    }
    sub_23BB5646C(v2, v4, v3);
    swift_bridgeObjectRetain();
    id v18 = v7;
    id v19 = objc_msgSend(v8, sel_averageInBedDuration);
    if (!v19)
    {
      sub_23BB564C0((uint64_t)v2, v4, v3);
      sub_23BB564C0((uint64_t)v2, v4, v3);
      return 0;
    }
    id v20 = v19;
    objc_msgSend(v19, sel__value);
    double v22 = v21;

    sub_23BB564C0((uint64_t)v2, v4, v3);
    sub_23BB564C0((uint64_t)v2, v4, v3);
    if (v22 <= COERCE_DOUBLE(1)) {
      return 0;
    }
    sub_23BBDC7E0();
    double v24 = v23;
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
    objc_msgSend(v15, sel_setUnitsStyle_, 1);
    objc_msgSend(v15, sel_setAllowedUnits_, 96);
    id v16 = objc_msgSend(v15, sel_stringFromTimeInterval_, v24);
    if (v16) {
      goto LABEL_6;
    }
LABEL_11:

    return 0;
  }
  return v3;
}

void sub_23BB58180()
{
  if (!qword_268A7DA98)
  {
    sub_23BBDC520();
    sub_23BB58234(&qword_26AEBCB20, MEMORY[0x263F46310]);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7DA98);
    }
  }
}

uint64_t sub_23BB58234(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BB5827C()
{
  unint64_t result = qword_26AEBCB58;
  if (!qword_26AEBCB58)
  {
    sub_23BB58304(255, &qword_26AEBCB50, MEMORY[0x263F46300], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCB58);
  }
  return result;
}

void sub_23BB58304(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BB58368()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB583F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_23BBDBBA0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  id v6 = sub_23BBDBB90();
  os_log_type_t v7 = sub_23BBDC880();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v18 = v9;
    *(_DWORD *)unint64_t v8 = 136446210;
    uint64_t v17 = sub_23BBD0430(0xD000000000000020, 0x800000023BBDD760, &v18);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v6, v7, "[%{public}s] Returning placeholder for sleep stage widget...", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v9, -1, -1);
    MEMORY[0x23ECD1880](v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_23BBDB840();
  id v10 = (int *)type metadata accessor for SleepStageWidgetEntry(0);
  uint64_t v11 = a1 + v10[5];
  sub_23BBDB840();
  uint64_t v12 = sub_23BBDB860();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  uint64_t v13 = a1 + v10[7];
  uint64_t v14 = sub_23BBDC660();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v16 = a1 + v10[6];
  *(void *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = 0;
  *(void *)(v16 + 16) = 0;
  *(unsigned char *)(v16 + 24) = 3;
  return result;
}

void sub_23BB5868C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for SleepStageWidgetTimelineProvider(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_23BBDBBA0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v13 = sub_23BBDBB90();
  os_log_type_t v14 = sub_23BBDC880();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v37 = v7;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v38 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v36 = v6;
    uint64_t v18 = v17;
    uint64_t v42 = (void *)v17;
    uint64_t v35 = v9;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v41 = sub_23BBD0430(0xD000000000000020, 0x800000023BBDD760, (uint64_t *)&v42);
    uint64_t v7 = v37;
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v13, v14, "[%{public}s] Getting snapshot for sleep stage widget...", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v18;
    uint64_t v6 = v36;
    MEMORY[0x23ECD1880](v19, -1, -1);
    id v20 = v16;
    unint64_t v8 = v38;
    MEMORY[0x23ECD1880](v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v35);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v39;
  *(void *)(v21 + 24) = v40;
  swift_retain();
  sub_23BBDC670();
  double v23 = (void *)v4[3];
  double v24 = (void *)v4[4];
  uint64_t v42 = (void *)v4[2];
  double v22 = v42;
  uint64_t v43 = v23;
  v44 = v24;
  sub_23BB5DD34((uint64_t)v4, (uint64_t)v8, type metadata accessor for SleepStageWidgetTimelineProvider);
  unint64_t v25 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = (char *)swift_allocObject();
  sub_23BB5DCCC((uint64_t)v8, (uint64_t)&v27[v25], type metadata accessor for SleepStageWidgetTimelineProvider);
  uint64_t v28 = (uint64_t (**)(uint64_t))&v27[v26];
  *uint64_t v28 = sub_23BB5DCB0;
  v28[1] = (uint64_t (*)(uint64_t))v21;
  id v29 = v22;
  id v30 = v23;
  id v31 = v24;
  swift_retain();
  SleepWidgetViewModelProvider.currentSleepStageWidgetViewModel(showLiveContent:completion:)(1, (void (*)(void **, uint64_t))sub_23BB5D8B0, v27);
  swift_release();
  uint64_t v32 = v42;
  v33 = v43;
  uint64_t v34 = v44;
  swift_release();
}

uint64_t sub_23BB58A3C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_23BBDBBA0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v10 = sub_23BBDBB90();
  os_log_type_t v11 = sub_23BBDC880();
  if (os_log_type_enabled(v10, v11))
  {
    v17[1] = a3;
    uint64_t v12 = swift_slowAlloc();
    v17[0] = a1;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v18 = v14;
    *(_DWORD *)uint64_t v13 = 136446210;
    v17[2] = sub_23BBD0430(0xD000000000000020, 0x800000023BBDD760, &v18);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v10, v11, "[%{public}s] Returning snapshot for sleep stage widget", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v14, -1, -1);
    uint64_t v15 = v13;
    a1 = v17[0];
    MEMORY[0x23ECD1880](v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return a2(a1);
}

void sub_23BB58C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for SleepStageWidgetTimelineProvider(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_23BBDBBA0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v13 = sub_23BBDBB90();
  os_log_type_t v14 = sub_23BBDC880();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v37 = v7;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v38 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v36 = v6;
    uint64_t v18 = v17;
    uint64_t v42 = (void *)v17;
    uint64_t v35 = v9;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v41 = sub_23BBD0430(0xD000000000000020, 0x800000023BBDD760, (uint64_t *)&v42);
    uint64_t v7 = v37;
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v13, v14, "[%{public}s] Getting timeline for sleep stage widget...", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v18;
    uint64_t v6 = v36;
    MEMORY[0x23ECD1880](v19, -1, -1);
    id v20 = v16;
    uint64_t v8 = v38;
    MEMORY[0x23ECD1880](v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v35);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v39;
  *(void *)(v21 + 24) = v40;
  swift_retain();
  sub_23BBDC670();
  double v23 = (void *)v4[3];
  double v24 = (void *)v4[4];
  uint64_t v42 = (void *)v4[2];
  double v22 = v42;
  uint64_t v43 = v23;
  v44 = v24;
  sub_23BB5DD34((uint64_t)v4, (uint64_t)v8, type metadata accessor for SleepStageWidgetTimelineProvider);
  unint64_t v25 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = (char *)swift_allocObject();
  sub_23BB5DCCC((uint64_t)v8, (uint64_t)&v27[v25], type metadata accessor for SleepStageWidgetTimelineProvider);
  uint64_t v28 = (uint64_t (**)(uint64_t))&v27[v26];
  *uint64_t v28 = sub_23BB5D944;
  v28[1] = (uint64_t (*)(uint64_t))v21;
  id v29 = v22;
  id v30 = v23;
  id v31 = v24;
  swift_retain();
  SleepWidgetViewModelProvider.currentSleepStageWidgetViewModel(showLiveContent:completion:)(1, (void (*)(void **, uint64_t))sub_23BB5D8B0, v27);
  swift_release();
  uint64_t v32 = v42;
  v33 = v43;
  uint64_t v34 = v44;
  swift_release();
}

uint64_t sub_23BB58FF4(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  v46 = a2;
  uint64_t v50 = a1;
  sub_23BB5DB2C();
  uint64_t v44 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  v51 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB5CC24(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v10 = sub_23BBDB860();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_23BBDC640();
  uint64_t v48 = *(void *)(v14 - 8);
  uint64_t v49 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  v45 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v47 = (char *)&v38 - v17;
  uint64_t v43 = sub_23BBDBBA0();
  uint64_t v18 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  id v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v21 = sub_23BBDBB90();
  os_log_type_t v22 = sub_23BBDC880();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v39 = v13;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v40 = v10;
    double v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v42 = a3;
    uint64_t v26 = v25;
    uint64_t v53 = v25;
    uint64_t v41 = v5;
    *(_DWORD *)double v24 = 136446210;
    uint64_t v52 = sub_23BBD0430(0xD000000000000020, 0x800000023BBDD760, &v53);
    uint64_t v13 = v39;
    uint64_t v5 = v41;
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v21, v22, "[%{public}s] Returning timeline for sleep stage widget", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v26, -1, -1);
    uint64_t v27 = v24;
    uint64_t v10 = v40;
    MEMORY[0x23ECD1880](v27, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v43);
  uint64_t v28 = type metadata accessor for SleepStageWidgetEntry(0);
  uint64_t v29 = v50;
  sub_23BB5DBC0(v50 + *(int *)(v28 + 20), (uint64_t)v9, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  id v31 = v47;
  if (v30 == 1)
  {
    sub_23BB5DC40((uint64_t)v9, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    sub_23BBDC630();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    sub_23BBDC620();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  sub_23BB5CC24(0, &qword_268A7DAD8, type metadata accessor for SleepStageWidgetEntry, MEMORY[0x263F8E0F8]);
  unint64_t v32 = (*(unsigned __int8 *)(*(void *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v28 - 8) + 80);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_23BBDD290;
  sub_23BB5DD34(v29, v33 + v32, type metadata accessor for SleepStageWidgetEntry);
  uint64_t v35 = v48;
  uint64_t v34 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v31, v49);
  sub_23BB5BE40(&qword_26AEBC8A8, (void (*)(uint64_t))type metadata accessor for SleepStageWidgetEntry);
  uint64_t v36 = v51;
  sub_23BBDC680();
  v46(v36);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v36, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v31, v34);
}

uint64_t sub_23BB59660(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v54 = a5;
  v55 = a4;
  uint64_t v52 = type metadata accessor for SleepStageWidgetEntry(0);
  MEMORY[0x270FA5388](v52);
  uint64_t v50 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_23BBDB860();
  uint64_t v53 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  v51 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_23BBDBBA0();
  uint64_t v9 = *(void *)(v57 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v57);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = *(void **)a1;
  uint64_t v16 = *(void **)(a1 + 8);
  uint64_t v17 = *(void **)(a1 + 16);
  unsigned __int8 v18 = *(unsigned char *)(a1 + 24);
  int v56 = v18;
  if (a2)
  {
    uint64_t v48 = v9;
    id v19 = a2;
    sub_23BBDBB80();
    id v20 = a2;
    id v21 = a2;
    os_log_type_t v22 = sub_23BBDBB90();
    os_log_type_t v23 = sub_23BBDC860();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v49 = v12;
      uint64_t v25 = v24;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v60 = v47;
      *(_DWORD *)uint64_t v25 = 136446466;
      uint64_t v59 = sub_23BBD0430(0xD000000000000020, 0x800000023BBDD760, &v60);
      sub_23BBDC950();
      *(_WORD *)(v25 + 12) = 2082;
      uint64_t v46 = v25 + 14;
      uint64_t v59 = (uint64_t)a2;
      id v26 = a2;
      sub_23BB5D8B4();
      uint64_t v27 = sub_23BBDC700();
      uint64_t v59 = sub_23BBD0430(v27, v28, &v60);
      sub_23BBDC950();
      unsigned __int8 v18 = v56;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23BB52000, v22, v23, "[%{public}s] Error getting sleep stage widget viewModel: %{public}s", (uint8_t *)v25, 0x16u);
      uint64_t v29 = v47;
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v29, -1, -1);
      uint64_t v30 = v25;
      uint64_t v12 = v49;
      MEMORY[0x23ECD1880](v30, -1, -1);
    }
    else
    {
    }
    uint64_t v9 = v48;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v57);
  }
  sub_23BBDBB80();
  sub_23BB5646C(v15, v16, v17);
  sub_23BB5646C(v15, v16, v17);
  id v31 = sub_23BBDBB90();
  os_log_type_t v32 = sub_23BBDC880();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    uint64_t v59 = v48;
    *(_DWORD *)uint64_t v33 = 136446466;
    uint64_t v49 = v12;
    uint64_t v60 = sub_23BBD0430(0xD000000000000020, 0x800000023BBDD760, &v59);
    sub_23BBDC950();
    *(_WORD *)(v33 + 12) = 2082;
    uint64_t v60 = (uint64_t)v15;
    v61 = v16;
    v62 = v17;
    unsigned __int8 v63 = v18;
    sub_23BB5646C(v15, v16, v17);
    uint64_t v34 = sub_23BBDC700();
    uint64_t v60 = sub_23BBD0430(v34, v35, &v59);
    sub_23BBDC950();
    swift_bridgeObjectRelease();
    sub_23BB564C0((uint64_t)v15, v16, v17);
    sub_23BB564C0((uint64_t)v15, v16, v17);
    _os_log_impl(&dword_23BB52000, v31, v32, "[%{public}s] Returning sleep stage widget viewModel: %{public}s", (uint8_t *)v33, 0x16u);
    uint64_t v36 = v48;
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v36, -1, -1);
    MEMORY[0x23ECD1880](v33, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v49, v57);
  }
  else
  {
    sub_23BB564C0((uint64_t)v15, v16, v17);
    sub_23BB564C0((uint64_t)v15, v16, v17);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v57);
  }
  uint64_t v37 = (uint64_t)v50;
  uint64_t v38 = v51;
  sub_23BBDB850();
  uint64_t v39 = v53;
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 16))(v37, v38, v58);
  type metadata accessor for SleepStageWidgetTimelineProvider(0);
  uint64_t v40 = v52;
  Calendar.midnight(after:)(v37 + *(int *)(v52 + 20));
  uint64_t v41 = v37 + *(int *)(v40 + 28);
  uint64_t v60 = (uint64_t)v15;
  v61 = v16;
  v62 = v17;
  char v42 = v56;
  unsigned __int8 v63 = v56;
  sub_23BB5646C(v15, v16, v17);
  SleepStageWidgetViewModel.timelineEntryRelevance.getter(v41);
  uint64_t v43 = sub_23BBDC660();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v41, 0, 1, v43);
  uint64_t v44 = v37 + *(int *)(v40 + 24);
  *(void *)uint64_t v44 = v15;
  *(void *)(v44 + 8) = v16;
  *(void *)(v44 + 16) = v17;
  *(unsigned char *)(v44 + 24) = v42;
  v55(v37);
  sub_23BB5DD9C(v37, type metadata accessor for SleepStageWidgetEntry);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v38, v58);
}

uint64_t sub_23BB59D40@<X0>(uint64_t a1@<X8>)
{
  return sub_23BB583F0(a1);
}

uint64_t sub_23BB59D60(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_23BB5F558;
  return sub_23BB59DF8(a1);
}

uint64_t sub_23BB59DF8(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = type metadata accessor for SleepStageWidgetEntry(0);
  v2[6] = swift_task_alloc();
  uint64_t v3 = sub_23BBDBBA0();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_23BB59EE8, 0, 0);
}

uint64_t sub_23BB59EE8()
{
  unsigned __int8 v18 = v0;
  sub_23BBDBB80();
  uint64_t v1 = sub_23BBDBB90();
  os_log_type_t v2 = sub_23BBDC880();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[8];
    uint64_t v3 = v0[9];
    uint64_t v5 = v0[7];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v17 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    v0[2] = sub_23BBD0430(0xD000000000000020, 0x800000023BBDD760, &v17);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v1, v2, "[%{public}s] returning widget relevance", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v7, -1, -1);
    MEMORY[0x23ECD1880](v6, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    uint64_t v9 = v0[8];
    uint64_t v8 = v0[9];
    uint64_t v10 = v0[7];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v11 = v0[4];
  uint64_t v12 = swift_task_alloc();
  v0[10] = v12;
  *(void *)(v12 + 16) = v11;
  *(unsigned char *)(v12 + 24) = 1;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[11] = v13;
  void *v13 = v0;
  v13[1] = sub_23BB5A150;
  uint64_t v15 = v0[5];
  uint64_t v14 = v0[6];
  return MEMORY[0x270FA2318](v14, 0, 0, 0xD000000000000023, 0x800000023BBE05C0, sub_23BB5D6DC, v12, v15);
}

uint64_t sub_23BB5A150()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_23BB5A268, 0, 0);
}

uint64_t sub_23BB5A268()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  uint64_t v3 = v1 + *(int *)(v0[5] + 24);
  id v4 = *(id *)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  uint64_t v6 = *(void **)(v3 + 16);
  int v7 = *(unsigned __int8 *)(v3 + 24);
  sub_23BB5646C(*(id *)v3, v5, v6);
  sub_23BB5A410((uint64_t)v4, (uint64_t)v5, (uint64_t)v6, v7, v2);
  sub_23BB564C0((uint64_t)v4, v5, v6);
  sub_23BB5DD9C(v1, type metadata accessor for SleepStageWidgetEntry);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_23BB5A35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *int v7 = v3;
  v7[1] = sub_23BB5F558;
  return MEMORY[0x270F07728](a1, a2, a3);
}

uint64_t sub_23BB5A410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v37 = a4;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v38 = a5;
  uint64_t v33 = sub_23BBDB860();
  uint64_t v6 = *(void *)(v33 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v33);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = sub_23BBDB640();
  MEMORY[0x270FA5388](v12 - 8);
  sub_23BB5D6E8();
  uint64_t v34 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  os_log_type_t v32 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB5CC24(0, &qword_26AEBBD10, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v16 - 8);
  unsigned __int8 v18 = (char *)&v31 - v17;
  uint64_t v19 = sub_23BBDB6B0();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  os_log_type_t v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = a1;
  uint64_t v40 = v35;
  uint64_t v41 = v36;
  char v42 = v37;
  SleepStageWidgetViewModel.relevantDateInterval.getter(v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_23BB5DC40((uint64_t)v18, &qword_26AEBBD10, MEMORY[0x263F062D0]);
    return sub_23BBDC530();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    sub_23BBDB690();
    sub_23BBDB670();
    sub_23BBDB630();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v25 = v33;
    v24(v9, v33);
    v24(v11, v25);
    id v26 = v32;
    sub_23BBDC580();
    sub_23BB5CC24(0, &qword_26AEBC0A8, (uint64_t (*)(uint64_t))sub_23BB5D6E8, MEMORY[0x263F8E0F8]);
    unint64_t v27 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_23BBDD290;
    unint64_t v29 = v28 + v27;
    uint64_t v30 = v34;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 16))(v29, v26, v34);
    sub_23BBDC530();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
}

uint64_t sub_23BB5A888@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v1 = sub_23BBDB860();
  uint64_t v26 = *(void *)(v1 - 8);
  uint64_t v27 = v1;
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  id v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v26 - v5;
  uint64_t v7 = sub_23BBDB640();
  MEMORY[0x270FA5388](v7 - 8);
  sub_23BB5D6E8();
  uint64_t v28 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB5CC24(0, &qword_26AEBBD10, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = sub_23BBDB6B0();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unsigned __int8 v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepWidgetViewModel.relevantDateInterval.getter((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_23BB5DC40((uint64_t)v14, &qword_26AEBBD10, MEMORY[0x263F062D0]);
    return sub_23BBDC530();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    sub_23BBDB690();
    sub_23BBDB670();
    sub_23BBDB630();
    uint64_t v20 = v27;
    uint64_t v21 = *(void (**)(char *, uint64_t))(v26 + 8);
    v21(v4, v27);
    v21(v6, v20);
    sub_23BBDC580();
    sub_23BB5CC24(0, &qword_26AEBC0A8, (uint64_t (*)(uint64_t))sub_23BB5D6E8, MEMORY[0x263F8E0F8]);
    unint64_t v22 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_23BBDD290;
    unint64_t v24 = v23 + v22;
    uint64_t v25 = v28;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 16))(v24, v11, v28);
    sub_23BBDC530();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
}

void sub_23BB5ACD4(uint64_t a1, void *a2, int a3)
{
  int v27 = a3;
  uint64_t v5 = type metadata accessor for SleepStageWidgetTimelineProvider(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5 - 8);
  sub_23BB5D744();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(&v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v10 + 32))(v13 + v12, &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
  uint64_t v15 = (void *)a2[3];
  uint64_t v16 = (void *)a2[4];
  uint64_t v28 = (void *)a2[2];
  uint64_t v14 = v28;
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  sub_23BB5DD34((uint64_t)a2, (uint64_t)&v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for SleepStageWidgetTimelineProvider);
  unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unsigned __int8 v18 = (char *)swift_allocObject();
  sub_23BB5DCCC((uint64_t)&v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t)&v18[v17], type metadata accessor for SleepStageWidgetTimelineProvider);
  uint64_t v19 = (uint64_t (**)(uint64_t))&v18[(v7 + v17 + 7) & 0xFFFFFFFFFFFFFFF8];
  void *v19 = sub_23BB5D83C;
  v19[1] = (uint64_t (*)(uint64_t))v13;
  id v20 = v14;
  id v21 = v15;
  id v22 = v16;
  swift_retain();
  SleepWidgetViewModelProvider.currentSleepStageWidgetViewModel(showLiveContent:completion:)(v27, (void (*)(void **, uint64_t))sub_23BB5D8B0, v18);
  swift_release();
  uint64_t v23 = v28;
  unint64_t v24 = v29;
  uint64_t v25 = v30;
  swift_release();
}

uint64_t sub_23BB5AF60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepStageWidgetEntry(0);
  MEMORY[0x270FA5388](v2 - 8);
  sub_23BB5DD34(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SleepStageWidgetEntry);
  sub_23BB5D744();
  return sub_23BBDC7C0();
}

uint64_t sub_23BB5B008(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_23BB5B0A0;
  return sub_23BB59DF8(a1);
}

uint64_t sub_23BB5B0A0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_23BB5B194@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_23BBDB860();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t sub_23BB5B1FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23BB5DBC0(v2 + *(int *)(a1 + 28), a2, &qword_26AEBC048, MEMORY[0x263F1FDF0]);
}

SleepWidgetUI::SleepStageWidget __swiftcall SleepStageWidget.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23BBDC6E0();
  *uint64_t v1 = v2;
  v1[1] = (uint64_t)v3;
  result.kind._object = v3;
  result.kind._countAndFlagsBits = v2;
  return result;
}

uint64_t SleepStageWidget.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v68 = a1;
  uint64_t v1 = sub_23BBDB8A0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SleepStageWidgetTimelineProvider(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v53 - v9;
  sub_23BB5BC88();
  uint64_t v56 = v11;
  *(void *)&long long v54 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB5BFC0();
  uint64_t v60 = v14;
  uint64_t v57 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  v55 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB5C090();
  uint64_t v65 = v16;
  uint64_t v61 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v58 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB5C190();
  uint64_t v66 = *(void *)(v18 - 8);
  uint64_t v67 = v18;
  MEMORY[0x270FA5388](v18);
  v62 = (char *)v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB5C2D8();
  uint64_t v63 = *(void *)(v20 - 8);
  uint64_t v64 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v59 = (char *)v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F07740], v1);
  swift_bridgeObjectRetain();
  sub_23BBDB8B0();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A410]), sel_init);
  *uint64_t v8 = v22;
  id v23 = objc_allocWithZone(MEMORY[0x263F75EA8]);
  id v24 = v22;
  uint64_t v25 = (void *)sub_23BBDC6D0();
  id v26 = objc_msgSend(v23, sel_initWithIdentifier_healthStore_options_, v25, v24, 1);

  v8[1] = v26;
  id v27 = objc_allocWithZone(MEMORY[0x263F0A130]);
  id v28 = v24;
  id v29 = v26;
  id v30 = objc_msgSend(v27, sel_init);
  v8[2] = v28;
  v8[3] = v29;
  v8[4] = v30;
  sub_23BB5DCCC((uint64_t)v8, (uint64_t)v10, type metadata accessor for SleepStageWidgetTimelineProvider);
  sub_23BB5BCEC();
  sub_23BB5BEE8();
  sub_23BB5BE40(&qword_26AEBBB58, (void (*)(uint64_t))type metadata accessor for SleepStageWidgetTimelineProvider);
  sub_23BBDC600();
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  v53[1] = 0x800000023BBE0580;
  uint64_t v71 = sub_23BBDB740();
  uint64_t v72 = v31;
  uint64_t v32 = sub_23BB5BE40(&qword_26AEBBCD8, (void (*)(uint64_t))sub_23BB5BC88);
  unint64_t v33 = sub_23BB570F4();
  uint64_t v35 = v55;
  uint64_t v34 = v56;
  sub_23BBDBEA0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v34);
  uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
  sub_23BB5CC24(0, &qword_26AEBBD00, MEMORY[0x263F1FD48], MEMORY[0x263F8E0F8]);
  sub_23BBDC5C0();
  uint64_t v37 = swift_allocObject();
  long long v54 = xmmword_23BBDD290;
  *(_OWORD *)(v37 + 16) = xmmword_23BBDD290;
  sub_23BBDC5B0();
  sub_23BB5CC24(0, (unint64_t *)&qword_26AEBBCF8, MEMORY[0x263F1FD10], v36);
  uint64_t v38 = sub_23BBDC5A0();
  uint64_t v39 = *(void *)(v38 - 8);
  unint64_t v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v54;
  (*(void (**)(unint64_t, void, uint64_t))(v39 + 104))(v41 + v40, *MEMORY[0x263F1FCD8], v38);
  uint64_t v71 = v34;
  uint64_t v42 = MEMORY[0x263F8D310];
  uint64_t v72 = MEMORY[0x263F8D310];
  uint64_t v73 = v32;
  unint64_t v74 = v33;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v44 = v58;
  uint64_t v45 = v60;
  sub_23BBDBE90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v45);
  uint64_t v71 = sub_23BBDB740();
  uint64_t v72 = v46;
  uint64_t v69 = v45;
  uint64_t v70 = OpaqueTypeConformance2;
  uint64_t v47 = swift_getOpaqueTypeConformance2();
  uint64_t v48 = v62;
  uint64_t v49 = v65;
  sub_23BBDBE70();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v44, v49);
  _s13SleepWidgetUI0a5StageB4ViewV17supportedFamiliesSay0B3Kit0B6FamilyOGvgZ_0();
  uint64_t v71 = v49;
  uint64_t v72 = v42;
  uint64_t v73 = v47;
  unint64_t v74 = v33;
  swift_getOpaqueTypeConformance2();
  uint64_t v50 = v59;
  uint64_t v51 = v67;
  sub_23BBDBE80();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v48, v51);
  sub_23BB5C734();
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v50, v64);
}

uint64_t type metadata accessor for SleepStageWidgetTimelineProvider(uint64_t a1)
{
  return sub_23BB5D6A4(a1, qword_26AEBBD18);
}

void sub_23BB5BC88()
{
  if (!qword_26AEBBCE0)
  {
    sub_23BB5BCEC();
    sub_23BB5BEE8();
    unint64_t v0 = sub_23BBDC610();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBCE0);
    }
  }
}

void sub_23BB5BCEC()
{
  if (!qword_26AEBBC50)
  {
    sub_23BB5BD54();
    sub_23BB5BE88();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBC50);
    }
  }
}

void sub_23BB5BD54()
{
  if (!qword_26AEBBCC0)
  {
    type metadata accessor for SleepStageWidgetView();
    sub_23BBDB860();
    sub_23BB5BE40(&qword_26AEBBB60, (void (*)(uint64_t))type metadata accessor for SleepStageWidgetView);
    sub_23BB5BE40(&qword_26AEBBB50, MEMORY[0x263F07490]);
    unint64_t v0 = sub_23BBDC380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBCC0);
    }
  }
}

uint64_t sub_23BB5BE40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BB5BE88()
{
  if (!qword_26AEBBCB0)
  {
    sub_23BBDBE40();
    unint64_t v0 = sub_23BBDBEF0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBCB0);
    }
  }
}

unint64_t sub_23BB5BEE8()
{
  unint64_t result = qword_26AEBBC48;
  if (!qword_26AEBBC48)
  {
    sub_23BB5BCEC();
    sub_23BB5BE40(&qword_26AEBBCB8, (void (*)(uint64_t))sub_23BB5BD54);
    sub_23BB5BE40(&qword_26AEBBCA8, (void (*)(uint64_t))sub_23BB5BE88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBBC48);
  }
  return result;
}

void sub_23BB5BFC0()
{
  if (!qword_26AEBBC98)
  {
    sub_23BB5BC88();
    sub_23BB5BE40(&qword_26AEBBCD8, (void (*)(uint64_t))sub_23BB5BC88);
    sub_23BB570F4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBBC98);
    }
  }
}

void sub_23BB5C090()
{
  if (!qword_26AEBBC90)
  {
    sub_23BB5BFC0();
    sub_23BB5BC88();
    sub_23BB5BE40(&qword_26AEBBCD8, (void (*)(uint64_t))sub_23BB5BC88);
    sub_23BB570F4();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBBC90);
    }
  }
}

void sub_23BB5C190()
{
  if (!qword_26AEBBC68)
  {
    sub_23BB5C090();
    sub_23BB5BFC0();
    sub_23BB5BC88();
    sub_23BB5BE40(&qword_26AEBBCD8, (void (*)(uint64_t))sub_23BB5BC88);
    sub_23BB570F4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBBC68);
    }
  }
}

void sub_23BB5C2D8()
{
  if (!qword_26AEBBC78)
  {
    sub_23BB5C190();
    sub_23BB5C090();
    sub_23BB5BFC0();
    sub_23BB5BC88();
    sub_23BB5BE40(&qword_26AEBBCD8, (void (*)(uint64_t))sub_23BB5BC88);
    sub_23BB570F4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBBC78);
    }
  }
}

uint64_t sub_23BB5C450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for SleepStageWidgetView();
  uint64_t v4 = (int *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (uint64_t *)&v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v27[-v8];
  sub_23BB5BD54();
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = a1 + *(int *)(type metadata accessor for SleepStageWidgetEntry(0) + 24);
  uint64_t v15 = *(void **)v14;
  uint64_t v16 = *(void **)(v14 + 8);
  uint64_t v17 = *(void **)(v14 + 16);
  int v28 = *(unsigned __int8 *)(v14 + 24);
  *uint64_t v7 = swift_getKeyPath();
  sub_23BB5CC24(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = (uint64_t *)((char *)v7 + v4[7]);
  *uint64_t v18 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = (char *)v7 + v4[8];
  *(void *)uint64_t v19 = swift_getKeyPath();
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = 0;
  v19[32] = 0;
  uint64_t v20 = (char *)v7 + v4[9];
  *(void *)uint64_t v20 = v15;
  *((void *)v20 + 1) = v16;
  *((void *)v20 + 2) = v17;
  v20[24] = v28;
  sub_23BB5DCCC((uint64_t)v7, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SleepStageWidgetView);
  sub_23BB5DD34((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SleepStageWidgetView);
  uint64_t v21 = &v13[*(int *)(v11 + 60)];
  uint64_t v22 = sub_23BBDB860();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, v29, v22);
  sub_23BB5646C(v15, v16, v17);
  sub_23BB5DD9C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SleepStageWidgetView);
  uint64_t v23 = sub_23BBDBBF0();
  uint64_t v24 = v30;
  sub_23BB5DD34((uint64_t)v13, v30, (uint64_t (*)(void))sub_23BB5BD54);
  sub_23BB5BCEC();
  *(void *)(v24 + *(int *)(v25 + 36)) = v23;
  return sub_23BB5DD9C((uint64_t)v13, (uint64_t (*)(void))sub_23BB5BD54);
}

id sub_23BB5C734()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23BBDBBA0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v36 - v7;
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v10 = result;
    unsigned int v11 = objc_msgSend(result, sel_hksp_supportsHealthData);

    unsigned int v38 = v11;
    if (v11)
    {
      sub_23BBDBB80();
      uint64_t v12 = sub_23BBDBB90();
      os_log_type_t v13 = sub_23BBDC880();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        uint64_t v40 = v15;
        uint64_t v37 = v2;
        *(_DWORD *)uint64_t v14 = 136446210;
        uint64_t v39 = sub_23BBD0430(0xD00000000000004ALL, 0x800000023BBE05F0, &v40);
        sub_23BBDC950();
        _os_log_impl(&dword_23BB52000, v12, v13, "[%{public}s] sleep stage widget supported", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23ECD1880](v15, -1, -1);
        MEMORY[0x23ECD1880](v14, -1, -1);

        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v37);
LABEL_10:
        sub_23BB5C2D8();
        sub_23BB5C190();
        uint64_t v23 = v22;
        sub_23BB5C090();
        uint64_t v25 = v24;
        sub_23BB5BFC0();
        uint64_t v27 = v26;
        sub_23BB5BC88();
        uint64_t v29 = v28;
        uint64_t v30 = sub_23BB5BE40(&qword_26AEBBCD8, (void (*)(uint64_t))sub_23BB5BC88);
        unint64_t v31 = sub_23BB570F4();
        uint64_t v32 = MEMORY[0x263F8D310];
        uint64_t v40 = v29;
        uint64_t v41 = MEMORY[0x263F8D310];
        uint64_t v42 = v30;
        unint64_t v43 = v31;
        uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
        uint64_t v40 = v27;
        uint64_t v41 = OpaqueTypeConformance2;
        uint64_t v34 = swift_getOpaqueTypeConformance2();
        uint64_t v40 = v25;
        uint64_t v41 = v32;
        uint64_t v42 = v34;
        unint64_t v43 = v31;
        uint64_t v35 = swift_getOpaqueTypeConformance2();
        uint64_t v40 = v23;
        uint64_t v41 = v35;
        swift_getOpaqueTypeConformance2();
        return (id)sub_23BBDBEB0();
      }

      uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v21 = v8;
    }
    else
    {
      sub_23BBDBB80();
      uint64_t v16 = sub_23BBDBB90();
      os_log_type_t v17 = sub_23BBDC880();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v37 = v1;
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        uint64_t v40 = v19;
        *(_DWORD *)uint64_t v18 = 136446210;
        uint64_t v39 = sub_23BBD0430(0xD00000000000004ALL, 0x800000023BBE05F0, &v40);
        sub_23BBDC950();
        _os_log_impl(&dword_23BB52000, v16, v17, "[%{public}s] sleep stage widget not supported", v18, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23ECD1880](v19, -1, -1);
        MEMORY[0x23ECD1880](v18, -1, -1);
      }

      uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v21 = v6;
    }
    v20(v21, v2);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23BB5CBEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_23BBDC6E0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_23BB5CC24(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BB5CC88()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for SleepStageWidget(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SleepStageWidget()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SleepStageWidget(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SleepStageWidget(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStageWidget(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepStageWidget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStageWidget()
{
  return &type metadata for SleepStageWidget;
}

uint64_t sub_23BB5CDE8()
{
  return swift_getOpaqueTypeConformance2();
}

char *sub_23BB5CF64(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v7;
    unint64_t v8 = a2[3];
    uint64_t v9 = a2[4];
    *((void *)a1 + 3) = v8;
    *((void *)a1 + 4) = v9;
    uint64_t v10 = *(int *)(a3 + 32);
    uint64_t v20 = &a1[v10];
    uint64_t v11 = (uint64_t)a2 + v10;
    uint64_t v12 = sub_23BBDB970();
    os_log_type_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    uint64_t v14 = v4;
    uint64_t v15 = v6;
    uint64_t v16 = v7;
    os_log_type_t v17 = v8;
    uint64_t v18 = v9;
    v13(v20, v11, v12);
  }
  return v5;
}

uint64_t sub_23BB5D078(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_23BBDB970();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_23BB5D110(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void **)(a2 + 24);
  a1[2] = v6;
  a1[3] = v7;
  unint64_t v8 = *(void **)(a2 + 32);
  a1[4] = v8;
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v19 = (char *)a1 + v9;
  uint64_t v10 = a2 + v9;
  uint64_t v11 = sub_23BBDB970();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v4;
  id v14 = v5;
  id v15 = v6;
  id v16 = v7;
  id v17 = v8;
  v12(v19, v10, v11);
  return a1;
}

uint64_t sub_23BB5D1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  uint64_t v12 = *(void **)(a2 + 16);
  id v13 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  id v14 = v12;

  id v15 = *(void **)(a2 + 24);
  id v16 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v15;
  id v17 = v15;

  uint64_t v18 = *(void **)(a2 + 32);
  uint64_t v19 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v18;
  id v20 = v18;

  uint64_t v21 = *(int *)(a3 + 32);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = sub_23BBDB970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

uint64_t sub_23BB5D2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_23BBDB970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_23BB5D33C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = a2[2];

  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = a2[3];

  uint64_t v10 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = a2[4];

  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = a1 + v11;
  id v13 = (char *)a2 + v11;
  uint64_t v14 = sub_23BBDB970();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_23BB5D408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB5D41C);
}

uint64_t sub_23BB5D41C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_23BBDB970();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_23BB5D4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB5D4E0);
}

void *sub_23BB5D4E0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_23BBDB970();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_23BB5D588()
{
  uint64_t result = sub_23BBDB970();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23BB5D63C()
{
  return sub_23BB5BE40(&qword_26AEBC8A8, (void (*)(uint64_t))type metadata accessor for SleepStageWidgetEntry);
}

uint64_t type metadata accessor for SleepStageWidgetEntry(uint64_t a1)
{
  return sub_23BB5D6A4(a1, qword_26AEBBDB8);
}

uint64_t sub_23BB5D6A4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_23BB5D6DC(uint64_t a1)
{
  sub_23BB5ACD4(a1, *(void **)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

void sub_23BB5D6E8()
{
  if (!qword_26AEBC040)
  {
    unint64_t v0 = sub_23BBDC590();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC040);
    }
  }
}

void sub_23BB5D744()
{
  if (!qword_26AEBC068)
  {
    type metadata accessor for SleepStageWidgetEntry(255);
    unint64_t v0 = sub_23BBDC7D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC068);
    }
  }
}

uint64_t sub_23BB5D7AC()
{
  sub_23BB5D744();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_23BB5D83C(uint64_t a1)
{
  sub_23BB5D744();
  return sub_23BB5AF60(a1);
}

unint64_t sub_23BB5D8B4()
{
  unint64_t result = qword_268A7DAC8;
  if (!qword_268A7DAC8)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268A7DAC8);
  }
  return result;
}

uint64_t sub_23BB5D90C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_23BB5D944(uint64_t a1)
{
  return sub_23BB58FF4(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v1 = (int *)(type metadata accessor for SleepStageWidgetTimelineProvider(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = (id *)(v0 + v3);

  uint64_t v7 = (char *)v6 + v1[10];
  uint64_t v8 = sub_23BBDB970();
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  return MEMORY[0x270FA0238](v0, v5 + 16, v4);
}

uint64_t sub_23BB5DA7C(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for SleepStageWidgetTimelineProvider(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void (**)(uint64_t))v8;
  uint64_t v10 = *(void *)(v8 + 8);
  return sub_23BB59660(a1, a2, v7, v9, v10);
}

void sub_23BB5DB2C()
{
  if (!qword_268A7DAD0)
  {
    type metadata accessor for SleepStageWidgetEntry(255);
    sub_23BB5BE40(&qword_26AEBC8A8, (void (*)(uint64_t))type metadata accessor for SleepStageWidgetEntry);
    unint64_t v0 = sub_23BBDC690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DAD0);
    }
  }
}

uint64_t sub_23BB5DBC0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_23BB5CC24(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23BB5DC40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_23BB5CC24(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23BB5DCB0(uint64_t a1)
{
  return sub_23BB58A3C(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_23BB5DCCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB5DD34(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB5DD9C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *sub_23BB5DDFC(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_23BBDB860();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v10], 1, v7))
    {
      sub_23BB5CC24(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    uint64_t v15 = a3[6];
    id v16 = &a1[v15];
    id v17 = &a2[v15];
    uint64_t v18 = *(void *)&a2[v15];
    if (v18)
    {
      uint64_t v19 = (void *)*((void *)v17 + 1);
      id v20 = (void *)*((void *)v17 + 2);
      *(void *)id v16 = v18;
      *((void *)v16 + 1) = v19;
      *((void *)v16 + 2) = v20;
      swift_bridgeObjectRetain();
      id v21 = v19;
      id v22 = v20;
    }
    else
    {
      *(_OWORD *)id v16 = *(_OWORD *)v17;
      *((void *)v16 + 2) = *((void *)v17 + 2);
    }
    v16[24] = v17[24];
    uint64_t v23 = a3[7];
    uint64_t v24 = &a1[v23];
    uint64_t v25 = &a2[v23];
    uint64_t v26 = sub_23BBDC660();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      sub_23BB5CC24(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t sub_23BB5E114(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_23BBDB860();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + a2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v8 = a1 + a2[6];
  if (*(void *)v8)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = sub_23BBDC660();
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v9, v10);
  }
  return result;
}

char *sub_23BB5E2DC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1, v6))
  {
    sub_23BB5CC24(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *(void *)&a2[v13];
  if (v16)
  {
    id v17 = (void *)*((void *)v15 + 1);
    uint64_t v18 = (void *)*((void *)v15 + 2);
    *(void *)uint64_t v14 = v16;
    *((void *)v14 + 1) = v17;
    *((void *)v14 + 2) = v18;
    swift_bridgeObjectRetain();
    id v19 = v17;
    id v20 = v18;
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((void *)v14 + 2) = *((void *)v15 + 2);
  }
  v14[24] = v15[24];
  uint64_t v21 = a3[7];
  id v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = sub_23BBDC660();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_23BB5CC24(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t sub_23BB5E5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v42 = a3;
  uint64_t v43 = a1;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(v10, 1, v6);
  int v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    sub_23BB5CC24(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  uint64_t v16 = *(int *)(v42 + 24);
  uint64_t v17 = v43 + v16;
  uint64_t v18 = (long long *)(a2 + v16);
  uint64_t v19 = *(void *)(a2 + v16);
  if (*(void *)(v43 + v16))
  {
    if (v19)
    {
      *(void *)uint64_t v17 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v20 = *(void **)(v17 + 8);
      uint64_t v21 = (void *)*((void *)v18 + 1);
      *(void *)(v17 + 8) = v21;
      id v22 = v21;

      uint64_t v23 = *(void **)(v17 + 16);
      uint64_t v24 = (void *)*((void *)v18 + 2);
      *(void *)(v17 + 16) = v24;
      id v25 = v24;
    }
    else
    {
      sub_23BB547F0(v43 + v16);
      uint64_t v30 = *((void *)v18 + 2);
      *(_OWORD *)uint64_t v17 = *v18;
      *(void *)(v17 + 16) = v30;
    }
  }
  else if (v19)
  {
    *(void *)uint64_t v17 = v19;
    uint64_t v26 = (void *)*((void *)v18 + 1);
    *(void *)(v17 + 8) = v26;
    uint64_t v27 = (void *)*((void *)v18 + 2);
    *(void *)(v17 + 16) = v27;
    swift_bridgeObjectRetain();
    id v28 = v26;
    id v29 = v27;
  }
  else
  {
    long long v31 = *v18;
    *(void *)(v17 + 16) = *((void *)v18 + 2);
    *(_OWORD *)uint64_t v17 = v31;
  }
  *(unsigned char *)(v17 + 24) = *((unsigned char *)v18 + 24);
  uint64_t v32 = *(int *)(v42 + 28);
  unint64_t v33 = (void *)(v43 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  uint64_t v35 = sub_23BBDC660();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v36 + 24))(v33, v34, v35);
      return v43;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_20;
  }
  if (v39)
  {
LABEL_20:
    sub_23BB5CC24(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    return v43;
  }
  (*(void (**)(void *, void *, uint64_t))(v36 + 16))(v33, v34, v35);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  return v43;
}

char *sub_23BB5E9A4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1, v6))
  {
    sub_23BB5CC24(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 9) = *(_OWORD *)(v16 + 9);
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  uint64_t v19 = sub_23BBDC660();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_23BB5CC24(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BB5EC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(v10, 1, v6);
  int v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    sub_23BB5CC24(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  uint64_t v16 = *(int *)(v31 + 24);
  uint64_t v17 = v32 + v16;
  uint64_t v18 = a2 + v16;
  if (*(void *)(v32 + v16))
  {
    if (*(void *)v18)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void **)(v17 + 8);
      *(void *)(v17 + 8) = *(void *)(v18 + 8);

      uint64_t v20 = *(void **)(v17 + 16);
      *(void *)(v17 + 16) = *(void *)(v18 + 16);

      goto LABEL_12;
    }
    sub_23BB547F0(v17);
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(void *)(v17 + 16) = *(void *)(v18 + 16);
LABEL_12:
  *(unsigned char *)(v17 + 24) = *(unsigned char *)(v18 + 24);
  uint64_t v21 = *(int *)(v31 + 28);
  id v22 = (void *)(v32 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_23BBDC660();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
      return v32;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_17;
  }
  if (v28)
  {
LABEL_17:
    sub_23BB5CC24(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    return v32;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return v32;
}

uint64_t sub_23BB5EFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB5F004);
}

uint64_t sub_23BB5F004(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_23BB5CC24(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 2147483646)
  {
    unint64_t v14 = *(void *)(a1 + a3[6]);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 - 1;
    if (v15 < 0) {
      int v15 = -1;
    }
    return (v15 + 1);
  }
  else
  {
    sub_23BB5CC24(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[7];
    return v17(v19, a2, v18);
  }
}

uint64_t sub_23BB5F1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB5F204);
}

void sub_23BB5F204(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_23BBDB860();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    v11(v12, a2, a2, v10);
    return;
  }
  sub_23BB5CC24(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[6]) = a2;
  }
  else
  {
    sub_23BB5CC24(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[7];
    v16(v18, a2, a2, v17);
  }
}

void sub_23BB5F3E4()
{
  sub_23BBDB860();
  if (v0 <= 0x3F)
  {
    sub_23BB5CC24(319, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F)
    {
      sub_23BB5CC24(319, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_23BB5F55C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = *(int *)(v4 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = v6[6];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *(unsigned char *)(a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    uint64_t v19 = v6[8];
    uint64_t v20 = a1 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
    v49(v20, v21, v22);
    uint64_t v24 = v6[9];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(void *)(a1 + v24) = v25;
    uint64_t v26 = v6[10];
    int v27 = (void *)(a1 + v26);
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    id v30 = v25;
    if (v29)
    {
      uint64_t v32 = *(void **)(v28 + 8);
      uint64_t v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)int v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = v6[11];
    uint64_t v36 = (void *)(a1 + v35);
    uint64_t v37 = (char *)a2 + v35;
    int v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v49((uint64_t)v36, (uint64_t)v37, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = v6[12];
    uint64_t v41 = (void *)(a1 + v40);
    uint64_t v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v49((uint64_t)v41, (uint64_t)v42, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = v6[13];
    uint64_t v45 = (void *)(a1 + v44);
    uint64_t v46 = (char *)a2 + v44;
    if (v38(v46, 1, v22))
    {
      sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v49((uint64_t)v45, (uint64_t)v46, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t sub_23BB5FAFC(uint64_t a1)
{
  unint64_t v2 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = sub_23BBDB6D0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  uint64_t v7 = a1 + v2[6];
  if (!v6(v7, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v8 = a1 + v2[8];
  uint64_t v9 = sub_23BBDB860();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v17(v8, v9);

  uint64_t v11 = a1 + v2[10];
  if (*(void *)v11)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = a1 + v2[11];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v13(v12, 1, v9)) {
    v17(v12, v9);
  }
  uint64_t v14 = a1 + v2[12];
  if (!v13(v14, 1, v9)) {
    v17(v14, v9);
  }
  uint64_t v15 = a1 + v2[13];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v15, 1, v9);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v17)(v15, v9);
  }
  return result;
}

uint64_t sub_23BB5FD88(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v46 = *(void (**)(void *, const void *, uint64_t))(v20 + 16);
  v46(v17, v18, v19);
  uint64_t v21 = v4[9];
  uint64_t v22 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v22;
  uint64_t v23 = v4[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(a2 + v23);
  id v27 = v22;
  if (v26)
  {
    uint64_t v29 = *(void **)(v25 + 8);
    uint64_t v28 = *(void **)(v25 + 16);
    void *v24 = v26;
    v24[1] = v29;
    v24[2] = v28;
    swift_bridgeObjectRetain();
    id v30 = v29;
    id v31 = v28;
  }
  else
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    v24[2] = *(void *)(v25 + 16);
  }
  uint64_t v32 = v4[11];
  id v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v35((const void *)(a2 + v32), 1, v19))
  {
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    v46(v33, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v33, 0, 1, v19);
  }
  uint64_t v37 = v4[12];
  int v38 = (void *)(a1 + v37);
  uint64_t v39 = (const void *)(a2 + v37);
  if (v35((const void *)(a2 + v37), 1, v19))
  {
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    v46(v38, v39, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v38, 0, 1, v19);
  }
  uint64_t v41 = v4[13];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (const void *)(a2 + v41);
  if (v35(v43, 1, v19))
  {
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    v46(v42, v43, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v42, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BB602D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
LABEL_13:
  *(unsigned char *)(a1 + v5[7]) = *((unsigned char *)a2 + v5[7]);
  uint64_t v21 = v5[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t)a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v66(v22, v23, v24);
  uint64_t v26 = v5[9];
  id v27 = *(void **)((char *)a2 + v26);
  uint64_t v28 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = v27;
  id v29 = v27;

  uint64_t v30 = v5[10];
  id v31 = (void *)(a1 + v30);
  uint64_t v32 = (long long *)((char *)a2 + v30);
  uint64_t v33 = *(uint64_t *)((char *)a2 + v30);
  if (*(void *)(a1 + v30))
  {
    if (v33)
    {
      void *v31 = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v34 = (void *)v31[1];
      uint64_t v35 = (void *)*((void *)v32 + 1);
      v31[1] = v35;
      id v36 = v35;

      uint64_t v37 = (void *)v31[2];
      int v38 = (void *)*((void *)v32 + 2);
      v31[2] = v38;
      id v39 = v38;
    }
    else
    {
      sub_23BB547F0(a1 + v30);
      uint64_t v44 = *((void *)v32 + 2);
      *(_OWORD *)id v31 = *v32;
      v31[2] = v44;
    }
  }
  else if (v33)
  {
    void *v31 = v33;
    uint64_t v40 = (void *)*((void *)v32 + 1);
    v31[1] = v40;
    uint64_t v41 = (void *)*((void *)v32 + 2);
    v31[2] = v41;
    swift_bridgeObjectRetain();
    id v42 = v40;
    id v43 = v41;
  }
  else
  {
    long long v45 = *v32;
    v31[2] = *((void *)v32 + 2);
    *(_OWORD *)id v31 = v45;
  }
  uint64_t v46 = v5[11];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (char *)a2 + v46;
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v50 = v49(a1 + v46, 1, v24);
  int v51 = v49((uint64_t)v48, 1, v24);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v47, v48, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
LABEL_27:
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_28;
  }
  v66((uint64_t)v47, (uint64_t)v48, v24);
LABEL_28:
  uint64_t v53 = v5[12];
  long long v54 = (void *)(a1 + v53);
  v55 = (char *)a2 + v53;
  int v56 = v49(a1 + v53, 1, v24);
  int v57 = v49((uint64_t)v55, 1, v24);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v54, v55, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v54, 0, 1, v24);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v54, v24);
LABEL_33:
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_34;
  }
  v66((uint64_t)v54, (uint64_t)v55, v24);
LABEL_34:
  uint64_t v59 = v5[13];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (char *)a2 + v59;
  int v62 = v49(a1 + v59, 1, v24);
  int v63 = v49((uint64_t)v61, 1, v24);
  if (!v62)
  {
    if (!v63)
    {
      v66((uint64_t)v60, (uint64_t)v61, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v60, v24);
    goto LABEL_39;
  }
  if (v63)
  {
LABEL_39:
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v60, v61, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v60, 0, 1, v24);
  return a1;
}

uint64_t sub_23BB60A7C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  uint64_t v17 = (void *)(a1 + v16);
  int v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(void *, const void *, uint64_t))(v20 + 32);
  v21(v17, v18, v19);
  *(void *)(a1 + v4[9]) = *(void *)(a2 + v4[9]);
  uint64_t v22 = v4[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  uint64_t v25 = v4[11];
  uint64_t v26 = (void *)(a1 + v25);
  id v27 = (const void *)(a2 + v25);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v40(a2 + v25, 1, v19))
  {
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v21(v26, v27, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  }
  uint64_t v29 = v4[12];
  uint64_t v30 = (void *)(a1 + v29);
  id v31 = (const void *)(a2 + v29);
  if (v40(a2 + v29, 1, v19))
  {
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    uint64_t v33 = v21;
  }
  else
  {
    id v34 = v31;
    uint64_t v33 = v21;
    v21(v30, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v30, 0, 1, v19);
  }
  uint64_t v35 = v4[13];
  id v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  if (v40((uint64_t)v37, 1, v19))
  {
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v33(v36, v37, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v36, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BB60FA4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v6, v7, v8);
LABEL_7:
  uint64_t v14 = v4[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  int v17 = v10((void *)(a1 + v14), 1, v8);
  int v18 = v10(v16, 1, v8);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v15, v16, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v15, v8);
LABEL_12:
    sub_23BB61DA0(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v15, v16, v8);
LABEL_13:
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v20 = v4[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = sub_23BBDB860();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v52(v21, v22, v23);
  uint64_t v25 = v4[9];
  uint64_t v26 = *(void **)(a1 + v25);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);

  uint64_t v27 = v4[10];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  if (*(void *)(a1 + v27))
  {
    if (*v29)
    {
      *uint64_t v28 = *v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = (void *)v28[1];
      v28[1] = v29[1];

      id v31 = (void *)v28[2];
      v28[2] = v29[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v28);
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  v28[2] = v29[2];
LABEL_18:
  uint64_t v32 = v4[11];
  uint64_t v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v36 = v35(a1 + v32, 1, v23);
  int v37 = v35((uint64_t)v34, 1, v23);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v33, v34, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v33, 0, 1, v23);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v33, v23);
LABEL_23:
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_24;
  }
  v52((uint64_t)v33, (uint64_t)v34, v23);
LABEL_24:
  uint64_t v39 = v4[12];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (const void *)(a2 + v39);
  int v42 = v35(a1 + v39, 1, v23);
  int v43 = v35((uint64_t)v41, 1, v23);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v40, v41, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v40, 0, 1, v23);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v40, v23);
LABEL_29:
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_30;
  }
  v52((uint64_t)v40, (uint64_t)v41, v23);
LABEL_30:
  uint64_t v45 = v4[13];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (const void *)(a2 + v45);
  int v48 = v35(a1 + v45, 1, v23);
  int v49 = v35((uint64_t)v47, 1, v23);
  if (!v48)
  {
    if (!v49)
    {
      v52((uint64_t)v46, (uint64_t)v47, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v46, v23);
    goto LABEL_35;
  }
  if (v49)
  {
LABEL_35:
    sub_23BB61DA0(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v46, v47, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v46, 0, 1, v23);
  return a1;
}

uint64_t sub_23BB616F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB6170C);
}

uint64_t sub_23BB6170C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_23BB61778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB6178C);
}

uint64_t sub_23BB6178C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for GreetingSleepWidgetCircularView()
{
  uint64_t result = qword_26AEBC860;
  if (!qword_26AEBC860) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BB61848()
{
  uint64_t result = type metadata accessor for SleepWidgetViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_UNKNOWN **sub_23BB618D4()
{
  return &protocol witness table for SleepWidgetViewModel;
}

uint64_t sub_23BB618E0(uint64_t a1)
{
  uint64_t result = sub_23BB61D58(&qword_26AEBC858, (void (*)(uint64_t))type metadata accessor for GreetingSleepWidgetCircularView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BB61938()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB61954@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v3 = sub_23BBDC510();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = sub_23BBDBB40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_23BBDC520();
  uint64_t v8 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB30();
  uint64_t v11 = sub_23BBDBAF0();
  v19[1] = v12;
  v19[2] = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v13 = (void *)(v2 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40));
  uint64_t v14 = (void *)v13[1];
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (*v13) {
    BOOL v16 = v14 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    objc_msgSend(v14, sel_sleepDuration);
    if (v17 > COERCE_DOUBLE(1) && v17 > 0.0)
    {
      sub_23BB61DA0(0, qword_268A7DAA0, MEMORY[0x263F06828], MEMORY[0x263F8E0F8]);
      sub_23BBDB720();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_23BBDD290;
      sub_23BB57EBC();
      sub_23BBDC740();
      swift_bridgeObjectRelease();
    }
  }
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  uint64_t v22 = v15;
  sub_23BB61D58(&qword_26AEBCB18, MEMORY[0x263F46300]);
  sub_23BB61DA0(0, &qword_26AEBCB50, MEMORY[0x263F46300], MEMORY[0x263F8D488]);
  sub_23BB5827C();
  swift_bridgeObjectRetain();
  sub_23BBDC9B0();
  sub_23BBDC4F0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21, v10, v20);
}

uint64_t sub_23BB61D58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BB61DA0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BB61E04()
{
  return sub_23BB61D58(&qword_26AEBCB20, MEMORY[0x263F46310]);
}

void *sub_23BB61E4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v7 = *(int *)(a3 + 28);
    unint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *unint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      void *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_23BB62078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_23BBDC570();
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_23BB621F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (void *)(a2 + v6);
  sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_23BBDC5A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_23BBDC570();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    *uint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23BB623D4(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  if ((long long *)a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 28);
    unint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    uint64_t v10 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
    sub_23BB625F0(a1 + v7, &qword_26AEBBC40, MEMORY[0x263F1FD10]);
    sub_23BB68AF4(0, &qword_26AEBBC40, v10, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
    }
    else
    {
      *unint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (void *)((char *)a2 + v12);
    uint64_t v15 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    sub_23BB625F0(a1 + v12, &qword_26AEBC950, MEMORY[0x263F1FC90]);
    sub_23BB68AF4(0, &qword_26AEBC950, v15, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v13, v14, v16);
    }
    else
    {
      void *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BB625F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_23BB68AF4(0, a2, a3, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23BB62660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (const void *)(a2 + v6);
  sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  uint64_t v10 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_23BBDC5A0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  uint64_t v16 = v15;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = sub_23BBDC570();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v13, v14, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BB62854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)(a1 + v6);
    unint64_t v8 = (const void *)(a2 + v6);
    uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
    sub_23BB625F0(a1 + v6, &qword_26AEBBC40, MEMORY[0x263F1FD10]);
    sub_23BB68AF4(0, &qword_26AEBBC40, v9, MEMORY[0x263F185C8]);
    uint64_t v11 = v10;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_23BBDC5A0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v7, v8, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (const void *)(a2 + v13);
    uint64_t v16 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    sub_23BB625F0(a1 + v13, &qword_26AEBC950, MEMORY[0x263F1FC90]);
    sub_23BB68AF4(0, &qword_26AEBC950, v16, MEMORY[0x263F185C8]);
    uint64_t v18 = v17;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = sub_23BBDC570();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v14, v15, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23BB62A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB62A9C);
}

uint64_t sub_23BB62A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_23BB68AF4(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_23BB68AF4(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_23BB62C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB62C34);
}

uint64_t sub_23BB62C34(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 16) = -(char)a2;
  }
  else
  {
    sub_23BB68AF4(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_23BB68AF4(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for PlaceholderBarView(uint64_t a1)
{
  return sub_23BB5D6A4(a1, (uint64_t *)&unk_268A7DB00);
}

void sub_23BB62DDC()
{
  sub_23BB68AF4(319, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    sub_23BB68AF4(319, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_23BB62F28(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = *(void *)v15;
    char v17 = v15[8];
    sub_23BB631DC(*(void *)v15, v17);
    *(void *)uint64_t v14 = v16;
    v14[8] = v17;
    uint64_t v18 = a3[7];
    uint64_t v19 = a3[8];
    uint64_t v20 = (void *)((char *)a1 + v18);
    uint64_t v21 = (void *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = v21[3];
    v20[2] = v21[2];
    v20[3] = v23;
    uint64_t v24 = v21[5];
    v20[4] = v21[4];
    v20[5] = v24;
    uint64_t v25 = (char *)a1 + v19;
    uint64_t v26 = (char *)a2 + v19;
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    v25[16] = v26[16];
    uint64_t v27 = a3[10];
    *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
    *((unsigned char *)a1 + v27) = *((unsigned char *)a2 + v27);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23BB631DC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_23BB631E8(uint64_t a1, uint64_t a2)
{
  sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC570();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(a1 + *(int *)(a2 + 24)), *(unsigned char *)(a1 + *(int *)(a2 + 24) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BB63394(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

void *sub_23BB633A0(void *a1, void *a2, int *a3)
{
  sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC5A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_23BBDC570();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  char v15 = v13[8];
  sub_23BB631DC(*(void *)v13, v15);
  *(void *)uint64_t v12 = v14;
  v12[8] = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)((char *)a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = v19[3];
  v18[2] = v19[2];
  v18[3] = v21;
  uint64_t v22 = v19[5];
  v18[4] = v19[4];
  v18[5] = v22;
  uint64_t v23 = (char *)a1 + v17;
  uint64_t v24 = (char *)a2 + v17;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  v23[16] = v24[16];
  uint64_t v25 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v25) = *((unsigned char *)a2 + v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_23BB63604(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
    sub_23BB625F0((uint64_t)a1, &qword_26AEBBC40, MEMORY[0x263F1FD10]);
    sub_23BB68AF4(0, &qword_26AEBBC40, v6, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    sub_23BB625F0((uint64_t)a1 + v8, &qword_26AEBC950, MEMORY[0x263F1FC90]);
    sub_23BB68AF4(0, &qword_26AEBC950, v11, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
    }
    else
    {
      void *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = (char *)a1 + v13;
  char v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)v15;
  char v17 = v15[8];
  sub_23BB631DC(*(void *)v15, v17);
  uint64_t v18 = *(void *)v14;
  char v19 = v14[8];
  *(void *)uint64_t v14 = v16;
  v14[8] = v17;
  sub_23BB63394(v18, v19);
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[2] = v22[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[3] = v22[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[4] = v22[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[5] = v22[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  long long v26 = *(_OWORD *)v25;
  v24[16] = v25[16];
  *(_OWORD *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

char *sub_23BB63910(char *a1, char *a2, int *a3)
{
  sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC5A0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  uint64_t v13 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_23BBDC570();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  char v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)char v17 = *(void *)v18;
  v17[8] = v18[8];
  char v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  long long v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)char v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  uint64_t v22 = a3[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = &a2[v22];
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  v24[16] = v25[16];
  *(_OWORD *)&a1[v23] = *(_OWORD *)&a2[v23];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_23BB63B3C(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
    sub_23BB625F0((uint64_t)a1, &qword_26AEBBC40, MEMORY[0x263F1FD10]);
    sub_23BB68AF4(0, &qword_26AEBBC40, v6, MEMORY[0x263F185C8]);
    uint64_t v8 = v7;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = sub_23BBDC5A0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    sub_23BB625F0((uint64_t)&a1[v10], &qword_26AEBC950, MEMORY[0x263F1FC90]);
    sub_23BB68AF4(0, &qword_26AEBC950, v13, MEMORY[0x263F185C8]);
    uint64_t v15 = v14;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_23BBDC570();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  char v19 = &a2[v17];
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = v19[8];
  uint64_t v21 = *(void *)v18;
  char v22 = v18[8];
  *(void *)uint64_t v18 = v20;
  v18[8] = (char)v19;
  sub_23BB63394(v21, v22);
  uint64_t v23 = a3[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  swift_bridgeObjectRelease();
  *((void *)v24 + 1) = *((void *)v25 + 1);
  swift_bridgeObjectRelease();
  *((void *)v24 + 2) = *((void *)v25 + 2);
  swift_bridgeObjectRelease();
  *((void *)v24 + 3) = *((void *)v25 + 3);
  swift_bridgeObjectRelease();
  *((void *)v24 + 4) = *((void *)v25 + 4);
  swift_bridgeObjectRelease();
  *((void *)v24 + 5) = *((void *)v25 + 5);
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[8];
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v26];
  uint64_t v29 = &a2[v26];
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  v28[16] = v29[16];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

uint64_t sub_23BB63E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB63E1C);
}

uint64_t sub_23BB63E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23BB68AF4(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_23BB68AF4(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_23BB63F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB63FA4);
}

void sub_23BB63FA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23BB68AF4(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    sub_23BB68AF4(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return;
    }
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for BarView(uint64_t a1)
{
  return sub_23BB5D6A4(a1, (uint64_t *)&unk_268A7DB10);
}

void sub_23BB64134()
{
  sub_23BB68AF4(319, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    sub_23BB68AF4(319, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_23BB6428C()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_23BB642A8()
{
  id v0 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v0, sel_scale);
  double v2 = v1;

  double result = 1.0 / v2;
  *(double *)&qword_268A7DAE0 = 1.0 / v2;
  return result;
}

double sub_23BB64314()
{
  if (qword_268A7D9D0 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_268A7DAE0;
  qword_268A7DAE8 = qword_268A7DAE0;
  return result;
}

uint64_t sub_23BB64368@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  sub_23BB68A54(0, &qword_268A7DB40, &qword_268A7DB48, (uint64_t (*)(uint64_t))sub_23BB6742C, &qword_268A7DB78);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v37 - v3);
  sub_23BB67814();
  uint64_t v39 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v38 = (uint64_t)&v37 - v9;
  sub_23BB678D4(0, &qword_268A7DB90, MEMORY[0x263F19B20]);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v37 - v11;
  sub_23BB68AF4(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (uint64_t *)((char *)&v37 - v14);
  uint64_t v16 = type metadata accessor for PlaceholderBarView(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = (int *)type metadata accessor for BarView(0);
  uint64_t v20 = (long long *)(v1 + v19[7]);
  long long v21 = v20[1];
  long long v41 = *v20;
  long long v42 = v21;
  long long v43 = v20[2];
  char v22 = sub_23BBAC5A4();
  uint64_t v23 = v1 + v19[8];
  if (v22)
  {
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = *(void *)(v23 + 8);
    LODWORD(v38) = *(unsigned __int8 *)(v23 + 16);
    char v26 = *(unsigned char *)(v1 + v19[10]);
    *uint64_t v15 = swift_getKeyPath();
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    swift_storeEnumTagMultiPayload();
    *(void *)&v18[*(int *)(v16 + 32)] = swift_getKeyPath();
    sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], v27);
    swift_storeEnumTagMultiPayload();
    *(void *)uint64_t v18 = v24;
    *((void *)v18 + 1) = v25;
    v18[16] = v38;
    *((void *)v18 + 3) = 0x4018000000000000;
    v18[32] = v26;
    sub_23BB67CCC((uint64_t)v15, (uint64_t)&v18[*(int *)(v16 + 28)]);
    sub_23BB683A0((uint64_t)v18, (uint64_t)v12, type metadata accessor for PlaceholderBarView);
    swift_storeEnumTagMultiPayload();
    sub_23BB67AF4(&qword_26AEBB9A0, (void (*)(uint64_t))type metadata accessor for PlaceholderBarView);
    sub_23BB67B3C();
    sub_23BBDBED0();
    uint64_t v28 = type metadata accessor for PlaceholderBarView;
    uint64_t v29 = (uint64_t)v18;
  }
  else
  {
    uint64_t v30 = v39;
    if (*(unsigned char *)(v23 + 16)) {
      uint64_t v31 = sub_23BBDC400();
    }
    else {
      uint64_t v31 = sub_23BBDC420();
    }
    uint64_t *v4 = v31;
    v4[1] = v32;
    sub_23BB67944();
    sub_23BB64898(v1, (uint64_t)v4 + *(int *)(v33 + 44));
    uint64_t v34 = sub_23BBDC2B0();
    sub_23BB679DC((uint64_t)v4, (uint64_t)v8);
    *(void *)&v8[*(int *)(v30 + 36)] = v34;
    sub_23BB67A6C((uint64_t)v4);
    uint64_t v35 = v38;
    sub_23BB67D64((uint64_t)v8, v38, (uint64_t (*)(void))sub_23BB67814);
    sub_23BB683A0(v35, (uint64_t)v12, (uint64_t (*)(void))sub_23BB67814);
    swift_storeEnumTagMultiPayload();
    sub_23BB67AF4(&qword_26AEBB9A0, (void (*)(uint64_t))type metadata accessor for PlaceholderBarView);
    sub_23BB67B3C();
    sub_23BBDBED0();
    uint64_t v28 = (uint64_t (*)(void))sub_23BB67814;
    uint64_t v29 = v35;
  }
  return sub_23BB68408(v29, v28);
}

uint64_t sub_23BB64898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v3 = type metadata accessor for BarView(0);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB675E0();
  uint64_t v97 = v8;
  uint64_t v107 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  v122 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  v105 = (char *)&v93 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v96 = (char *)&v93 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v95 = (char *)&v93 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v104 = (char *)&v93 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v103 = (char *)&v93 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v100 = (char *)&v93 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v133 = (char *)&v93 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v131 = (char *)&v93 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v132 = (char *)&v93 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  v134 = (char *)&v93 - v30;
  MEMORY[0x270FA5388](v29);
  v102 = (char *)&v93 - v31;
  sub_23BB6555C(*(double *)(a1 + *(int *)(v4 + 40)), *(double *)(a1 + *(int *)(v4 + 40) + 8), *(unsigned char *)(a1 + *(int *)(v4 + 40) + 16), (uint64_t)&v149);
  uint64_t v120 = v150;
  uint64_t v121 = v149;
  uint64_t v118 = v152;
  uint64_t v119 = v151;
  uint64_t v116 = v154;
  uint64_t v117 = v153;
  uint64_t v114 = v156;
  uint64_t v115 = v155;
  uint64_t v112 = v158;
  uint64_t v113 = v157;
  uint64_t v110 = v160;
  uint64_t v111 = v159;
  uint64_t v108 = v162;
  uint64_t v109 = v161;
  unsigned __int8 v32 = v163;
  uint64_t v101 = sub_23BBDC2C0();
  uint64_t KeyPath = swift_getKeyPath();
  unsigned __int8 v139 = v32;
  uint64_t v33 = (uint64_t *)(a1 + *(int *)(v4 + 36));
  uint64_t v34 = *v33;
  v135 = v33;
  uint64_t v35 = sub_23BB657A0(v34);
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v149 = 0;
  uint64_t v150 = v36;
  uint64_t v94 = swift_getKeyPath();
  v125 = type metadata accessor for BarView;
  sub_23BB683A0(a1, (uint64_t)v7, type metadata accessor for BarView);
  uint64_t v37 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v38 = (v37 + 24) & ~v37;
  uint64_t v99 = v37 | 7;
  unint64_t v39 = (v6 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v124 = v39 + 8;
  unint64_t v130 = v39;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = v35;
  v123 = type metadata accessor for BarView;
  sub_23BB67D64((uint64_t)v7, v40 + v38, type metadata accessor for BarView);
  *(void *)(v40 + v39) = 0;
  sub_23BB68D30(0, &qword_26AEBBA88, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
  uint64_t v129 = v41;
  sub_23BB676A0();
  uint64_t v128 = v42;
  unint64_t v136 = sub_23BB6771C();
  *(void *)&long long v140 = MEMORY[0x263F1B720];
  *((void *)&v140 + 1) = MEMORY[0x263F1B718];
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_23BBDC3D0();
  uint64_t v43 = v33[1];
  uint64_t v44 = _HKCategoryValueSleepAnalysisDefaultAsleepValue();
  uint64_t v45 = sub_23BB657A0(v43);
  uint64_t v46 = *(void *)(v45 + 16);
  uint64_t v149 = 0;
  uint64_t v150 = v46;
  uint64_t v47 = swift_getKeyPath();
  v93 = v7;
  uint64_t v94 = v47;
  int v48 = v125;
  sub_23BB683A0(a1, (uint64_t)v7, v125);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = v45;
  uint64_t v127 = v38;
  uint64_t v50 = (uint64_t)v7;
  int v51 = v123;
  sub_23BB67D64(v50, v49 + v38, v123);
  *(void *)(v49 + v130) = v44;
  sub_23BBDC3D0();
  uint64_t v52 = sub_23BB657A0(v135[3]);
  uint64_t v53 = *(void *)(v52 + 16);
  uint64_t v149 = 0;
  uint64_t v150 = v53;
  uint64_t v94 = swift_getKeyPath();
  uint64_t v54 = (uint64_t)v93;
  sub_23BB683A0(a1, (uint64_t)v93, v48);
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = v52;
  sub_23BB67D64(v54, v55 + v38, v51);
  unint64_t v56 = v130;
  *(void *)(v55 + v130) = 5;
  sub_23BBDC3D0();
  uint64_t v57 = sub_23BB657A0(v135[2]);
  uint64_t v58 = *(void *)(v57 + 16);
  uint64_t v149 = 0;
  uint64_t v150 = v58;
  uint64_t v94 = swift_getKeyPath();
  uint64_t v59 = v125;
  sub_23BB683A0(a1, v54, v125);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v57;
  uint64_t v61 = v123;
  sub_23BB67D64(v54, v60 + v127, v123);
  *(void *)(v60 + v56) = 3;
  sub_23BBDC3D0();
  uint64_t v62 = sub_23BB657A0(v135[4]);
  uint64_t v63 = *(void *)(v62 + 16);
  uint64_t v149 = 0;
  uint64_t v150 = v63;
  uint64_t v94 = swift_getKeyPath();
  sub_23BB683A0(a1, v54, v59);
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v62;
  sub_23BB67D64(v54, v64 + v127, v61);
  unint64_t v65 = v130;
  *(void *)(v64 + v130) = 4;
  sub_23BBDC3D0();
  uint64_t v66 = sub_23BB657A0(v135[5]);
  uint64_t v67 = *(void *)(v66 + 16);
  uint64_t v149 = 0;
  uint64_t v150 = v67;
  swift_getKeyPath();
  sub_23BB683A0(a1, v54, v125);
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = v66;
  sub_23BB67D64(v54, v68 + v127, v123);
  *(void *)(v68 + v65) = 2;
  uint64_t v69 = v100;
  sub_23BBDC3D0();
  LOBYTE(v68) = v139;
  LODWORD(v136) = v139;
  v137[0] = *(_DWORD *)v138;
  *(_DWORD *)((char *)v137 + 3) = *(_DWORD *)&v138[3];
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
  uint64_t v71 = v103;
  uint64_t v72 = v97;
  v70(v103, v102, v97);
  uint64_t v73 = v104;
  v70(v104, v134, v72);
  unint64_t v74 = v95;
  v70(v95, v132, v72);
  v75 = v96;
  v70(v96, v131, v72);
  v70(v105, v133, v72);
  v76 = v69;
  uint64_t v77 = v72;
  v70(v122, v76, v72);
  *(void *)&long long v140 = v121;
  *((void *)&v140 + 1) = v120;
  *(void *)&long long v141 = v119;
  *((void *)&v141 + 1) = v118;
  *(void *)&long long v142 = v117;
  *((void *)&v142 + 1) = v116;
  *(void *)&long long v143 = v115;
  *((void *)&v143 + 1) = v114;
  *(void *)&long long v144 = v113;
  *((void *)&v144 + 1) = v112;
  *(void *)&long long v145 = v111;
  *((void *)&v145 + 1) = v110;
  *(void *)&long long v146 = v109;
  *((void *)&v146 + 1) = v108;
  LOBYTE(v147) = v68;
  *(_DWORD *)((char *)&v147 + 1) = v137[0];
  DWORD1(v147) = *(_DWORD *)((char *)v137 + 3);
  *((void *)&v147 + 1) = KeyPath;
  uint64_t v148 = v101;
  v78 = (char *)v98;
  *(void *)(v98 + 128) = v101;
  long long v79 = v146;
  long long v80 = v145;
  *((_OWORD *)v78 + 4) = v144;
  *((_OWORD *)v78 + 5) = v80;
  long long v81 = v143;
  *((_OWORD *)v78 + 2) = v142;
  *((_OWORD *)v78 + 3) = v81;
  long long v82 = v141;
  *(_OWORD *)v78 = v140;
  *((_OWORD *)v78 + 1) = v82;
  long long v83 = v147;
  *((_OWORD *)v78 + 6) = v79;
  *((_OWORD *)v78 + 7) = v83;
  sub_23BB6742C();
  v85 = v84;
  v70(&v78[v84[12]], v71, v77);
  v70(&v78[v85[16]], v73, v77);
  v70(&v78[v85[20]], v74, v77);
  v86 = v75;
  v70(&v78[v85[24]], v75, v77);
  v87 = v105;
  v70(&v78[v85[28]], v105, v77);
  v88 = v122;
  v70(&v78[v85[32]], v122, v77);
  sub_23BB6836C((uint64_t)&v140);
  uint64_t v89 = KeyPath;
  v90 = *(void (**)(char *, uint64_t))(v107 + 8);
  swift_retain();
  uint64_t v91 = v101;
  swift_retain();
  v90(v100, v77);
  v90(v133, v77);
  v90(v131, v77);
  v90(v132, v77);
  v90(v134, v77);
  v90(v102, v77);
  swift_release();
  swift_release();
  v90(v88, v77);
  v90(v87, v77);
  v90(v86, v77);
  v90(v74, v77);
  v90(v104, v77);
  v90(v103, v77);
  uint64_t v149 = v121;
  uint64_t v150 = v120;
  uint64_t v151 = v119;
  uint64_t v152 = v118;
  uint64_t v153 = v117;
  uint64_t v154 = v116;
  uint64_t v155 = v115;
  uint64_t v156 = v114;
  uint64_t v157 = v113;
  uint64_t v158 = v112;
  uint64_t v159 = v111;
  uint64_t v160 = v110;
  uint64_t v161 = v109;
  uint64_t v162 = v108;
  unsigned __int8 v163 = v136;
  *(_DWORD *)v164 = v137[0];
  *(_DWORD *)&v164[3] = *(_DWORD *)((char *)v137 + 3);
  uint64_t v165 = v89;
  uint64_t v166 = v91;
  return sub_23BB6730C((uint64_t)&v149);
}

double sub_23BB6555C@<D0>(double a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    sub_23BBDC400();
    sub_23BBDBBE0();
  }
  else
  {
    sub_23BBDC400();
    sub_23BBD4898(a2, 0, 0.0, 1, a2, 0, 0.0, 1, v19, a1, 0, a1, 0);
  }
  uint64_t v7 = MEMORY[0x263F1BA90];
  uint64_t v8 = MEMORY[0x263F19110];
  uint64_t v9 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F18E28];
  sub_23BB68D30(0, &qword_268A7DB20, MEMORY[0x263F1BA90], MEMORY[0x263F19110], MEMORY[0x263F18E28]);
  uint64_t v10 = MEMORY[0x263F18868];
  sub_23BB68D30(0, &qword_26AEBB9F0, v7, MEMORY[0x263F18868], v9);
  sub_23BB67398(&qword_268A7DB28, &qword_268A7DB20, v8);
  sub_23BB67398(&qword_268A7DB38, &qword_26AEBB9F0, v10);
  sub_23BBDBED0();
  double result = *(double *)v19;
  long long v12 = v19[1];
  long long v13 = v19[2];
  long long v14 = v19[3];
  long long v15 = v19[4];
  long long v16 = v19[5];
  long long v17 = v19[6];
  char v18 = v20;
  *(_OWORD *)a4 = v19[0];
  *(_OWORD *)(a4 + 16) = v12;
  *(_OWORD *)(a4 + 32) = v13;
  *(_OWORD *)(a4 + 48) = v14;
  *(_OWORD *)(a4 + 64) = v15;
  *(_OWORD *)(a4 + 80) = v16;
  *(_OWORD *)(a4 + 96) = v17;
  *(unsigned char *)(a4 + 112) = v18;
  return result;
}

uint64_t sub_23BB657A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = type metadata accessor for BarView(0);
  uint64_t v5 = (double *)(v1 + *(int *)(v4 + 36));
  double v6 = *v5;
  double v7 = *(double *)(v1 + *(int *)(v4 + 32) + 8) / (v5[1] - *v5);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  for (i = (double *)(a1 + 48); ; i += 3)
  {
    double v15 = *(i - 2);
    char v16 = *(unsigned char *)i;
    double v17 = v7 * (v15 - v6);
    double v18 = v7 * (*(i - 1) - v15);
    uint64_t v19 = v9[2];
    if (!v19)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        int64_t v28 = 1;
LABEL_21:
        uint64_t result = (uint64_t)sub_23BBAD49C(0, v28, 1, v9);
        uint64_t v9 = (void *)result;
      }
LABEL_4:
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1)
      {
        uint64_t result = (uint64_t)sub_23BBAD49C((void *)(v11 > 1), v12 + 1, 1, v9);
        uint64_t v9 = (void *)result;
      }
      v9[2] = v12 + 1;
      long long v13 = (double *)&v9[3 * v12];
      v13[4] = v17;
      long long v14 = v13 + 4;
      goto LABEL_7;
    }
    char v20 = (double *)&v9[3 * v19];
    double v21 = v20[1];
    double v22 = v20[2];
    char v23 = *((unsigned char *)v20 + 24);
    if (qword_268A7D9D8 != -1) {
      uint64_t result = swift_once();
    }
    double v24 = v17 - (v21 + v22);
    if (v24 >= *(double *)&qword_268A7DAE8)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        int64_t v28 = v9[2] + 1;
        goto LABEL_21;
      }
      goto LABEL_4;
    }
    if (!v9[2]) {
      break;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      unint64_t v25 = v9[2];
      if (!v25) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t result = (uint64_t)sub_23BB68838(v9);
      uint64_t v9 = (void *)result;
      unint64_t v25 = *(void *)(result + 16);
      if (!v25) {
        goto LABEL_28;
      }
    }
    v9[2] = v25 - 1;
    unint64_t v26 = v9[3];
    if (v25 > v26 >> 1)
    {
      uint64_t result = (uint64_t)sub_23BBAD49C((void *)(v26 > 1), v25, 1, v9);
      uint64_t v9 = (void *)result;
    }
    v16 |= v23;
    double v18 = v18 + v22 + v24;
    v9[2] = v25;
    uint64_t v27 = (double *)&v9[3 * v25 - 3];
    v27[4] = v21;
    long long v14 = v27 + 4;
LABEL_7:
    v14[1] = v18;
    *((unsigned char *)v14 + 16) = v16;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v9;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_23BB65A00@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_23BBDC570();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = MEMORY[0x270FA5388](v10);
  long long v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v15 < *(void *)(a2 + 16))
  {
    uint64_t v16 = a2 + 24 * v15;
    double v17 = *(double *)(v16 + 32);
    double v18 = *(double *)(v16 + 40);
    char v19 = *(unsigned char *)(v16 + 48);
    uint64_t v20 = type metadata accessor for BarView(0);
    v29[1] = a5;
    uint64_t v21 = v20;
    sub_23BB77CD4((uint64_t)v14);
    uint64_t v22 = a3 + *(int *)(v21 + 24);
    uint64_t v23 = *(void *)v22;
    char v24 = *(unsigned char *)(v22 + 8);
    sub_23BB631DC(*(void *)v22, v24);
    char v25 = sub_23BB77FBC(v23, v24);
    sub_23BB63394(v23, v24);
    uint64_t v26 = sub_23BB65C14(v19, (uint64_t)v14, v25 & 1, a4);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v11 + 8);
    v27(v14, v10);
    sub_23BB77CD4((uint64_t)v14);
    int v28 = sub_23BB65F60(v19, (uint64_t)v14, a4);
    v27(v14, v10);
    sub_23BB660A8(v26, v28, &v30, v17, v18);
    swift_release();
    v29[2] = v30;
    sub_23BBDC1E0();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_23BB65C14(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = sub_23BBDC570();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDC560();
  char v11 = sub_23BBDC540();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = 0;
  if (v11)
  {
    if (a3)
    {
      sub_23BBDC280();
      uint64_t v12 = sub_23BBDC2E0();
      swift_release();
    }
    else
    {
      switch(a4)
      {
        case 0:
          if ((a1 & 1) == 0)
          {
            id v15 = objc_msgSend(self, sel_systemGray5Color);
            goto LABEL_24;
          }
          if (qword_26AEBBAA0 != -1) {
            swift_once();
          }
          id v13 = (id)qword_26AEBDCF0;
          uint64_t v14 = sub_23BBDC310();
          goto LABEL_25;
        case 1:
          if ((a1 & 1) == 0) {
            goto LABEL_10;
          }
          goto LABEL_12;
        case 2:
          uint64_t v16 = self;
          if ((a1 & 1) == 0) {
            goto LABEL_23;
          }
          id v15 = objc_msgSend(v16, sel_hk_sleepAwakeColor);
          goto LABEL_24;
        case 3:
          uint64_t v16 = self;
          if ((a1 & 1) == 0) {
            goto LABEL_23;
          }
          id v15 = objc_msgSend(v16, sel_hk_sleepAsleepCoreColor);
          goto LABEL_24;
        case 4:
          uint64_t v16 = self;
          if ((a1 & 1) == 0) {
            goto LABEL_23;
          }
          id v15 = objc_msgSend(v16, sel_hk_sleepAsleepDeepColor);
          goto LABEL_24;
        case 5:
          uint64_t v16 = self;
          if (a1) {
            id v15 = objc_msgSend(v16, sel_hk_sleepAsleepREMColor);
          }
          else {
LABEL_23:
          }
            id v15 = objc_msgSend(v16, sel_systemGray3Color);
          goto LABEL_24;
        default:
          if (a1)
          {
LABEL_12:
            uint64_t v14 = sub_23BBDC280();
          }
          else
          {
LABEL_10:
            id v15 = objc_msgSend(self, sel_systemGray3Color);
LABEL_24:
            uint64_t v14 = MEMORY[0x23ECD0920](v15);
          }
LABEL_25:
          uint64_t v12 = v14;
          break;
      }
    }
  }
  return v12;
}

uint64_t sub_23BB65F60(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_23BBDC570();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDC560();
  sub_23BB67AF4(&qword_268A7DC38, MEMORY[0x263F1FC90]);
  char v9 = sub_23BBDC6C0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v9) {
    return sub_23BBDBF00();
  }
  if (a1)
  {
    if (a3) {
      return sub_23BBDBF00();
    }
    return sub_23BBDBF20();
  }
  if (a3) {
    return sub_23BBDBF20();
  }
  return sub_23BBDBF10();
}

uint64_t sub_23BB660A8@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  int v75 = a2;
  long long v83 = a3;
  sub_23BB680D4();
  uint64_t v77 = v9;
  MEMORY[0x270FA5388](v9);
  long long v81 = &v55[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v74 = sub_23BBDBC70();
  MEMORY[0x270FA5388](v74);
  uint64_t v72 = (double *)&v55[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_23BBDC5A0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v55[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = &v55[-v17];
  sub_23BB68168();
  uint64_t v73 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = &v55[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23BB6831C(0);
  uint64_t v76 = v22;
  MEMORY[0x270FA5388](v22);
  v78 = &v55[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23BB68344(0);
  uint64_t v80 = v24;
  MEMORY[0x270FA5388](v24);
  long long v79 = &v55[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_268A7D9D0 != -1) {
    swift_once();
  }
  double v26 = 1.0;
  if (*(double *)&qword_268A7DAE0 >= a5)
  {
    if ((qword_268A7DAE0 & 0xFFFFFFFFFFFFFLL) != 0) {
      double v28 = a5;
    }
    else {
      double v28 = *(double *)&qword_268A7DAE0;
    }
    if ((~qword_268A7DAE0 & 0x7FF0000000000000) != 0) {
      double v27 = *(double *)&qword_268A7DAE0;
    }
    else {
      double v27 = v28;
    }
    double v26 = 0.5;
    if (a5 / *(double *)&qword_268A7DAE0 > 0.5) {
      double v26 = a5 / *(double *)&qword_268A7DAE0;
    }
  }
  else
  {
    double v27 = a5;
  }
  uint64_t v29 = type metadata accessor for BarView(0);
  uint64_t v30 = v5 + *(int *)(v29 + 32);
  sub_23BB668E0(*(double *)v30, *(unsigned char *)(v30 + 16), (uint64_t)&v84, v27);
  uint64_t v69 = *((void *)&v84 + 1);
  uint64_t v70 = v84;
  uint64_t v67 = *((void *)&v85 + 1);
  uint64_t v68 = v85;
  uint64_t v65 = *((void *)&v86 + 1);
  uint64_t v66 = v86;
  uint64_t v63 = *((void *)&v87 + 1);
  uint64_t v64 = v87;
  uint64_t v61 = *((void *)&v88 + 1);
  uint64_t v62 = v88;
  uint64_t v59 = *((void *)&v89 + 1);
  uint64_t v60 = v89;
  uint64_t v57 = *((void *)&v90 + 1);
  uint64_t v58 = v90;
  int v56 = v91;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v82 = a1;
  swift_retain();
  sub_23BB77A10((uint64_t)v18);
  int v31 = *(unsigned __int8 *)(v30 + 16);
  uint64_t v32 = v5 + *(int *)(v29 + 24);
  uint64_t v33 = *(void *)v32;
  char v34 = *(unsigned char *)(v32 + 8);
  sub_23BB631DC(*(void *)v32, v34);
  char v35 = sub_23BB77FBC(v33, v34);
  sub_23BB63394(v33, v34);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 16))(v16, v18, v12);
  if ((*(unsigned int (**)(unsigned char *, uint64_t))(v13 + 88))(v16, v12) == *MEMORY[0x263F1FD08])
  {
    v36.n128_u64[0] = 3.0;
    if (v35) {
      v36.n128_f64[0] = 4.0;
    }
    if (v31) {
      double v37 = 2.0;
    }
    else {
      double v37 = v36.n128_f64[0];
    }
    uint64_t v38 = *(void (**)(unsigned char *, uint64_t))(v13 + 8);
  }
  else
  {
    uint64_t v38 = *(void (**)(unsigned char *, uint64_t))(v13 + 8);
    v38(v16, v12);
    double v37 = 2.0;
  }
  *(void *)&long long v84 = v70;
  *((void *)&v84 + 1) = v69;
  *(void *)&long long v85 = v68;
  *((void *)&v85 + 1) = v67;
  *(void *)&long long v86 = v66;
  *((void *)&v86 + 1) = v65;
  *(void *)&long long v87 = v64;
  *((void *)&v87 + 1) = v63;
  *(void *)&long long v88 = v62;
  *((void *)&v88 + 1) = v61;
  *(void *)&long long v89 = v60;
  *((void *)&v89 + 1) = v59;
  *(void *)&long long v90 = v58;
  *((void *)&v90 + 1) = v57;
  LOBYTE(v91) = v56;
  DWORD1(v91) = v75;
  *((void *)&v91 + 1) = KeyPath;
  uint64_t v92 = v82;
  ((void (*)(unsigned char *, uint64_t, __n128))v38)(v18, v12, v36);
  unint64_t v39 = v72;
  uint64_t v40 = (char *)v72 + *(int *)(v74 + 20);
  uint64_t v41 = *MEMORY[0x263F19860];
  uint64_t v42 = sub_23BBDBE30();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104))(v40, v41, v42);
  double *v39 = v37;
  v39[1] = v37;
  uint64_t v43 = v81;
  sub_23BB683A0((uint64_t)v39, (uint64_t)v81, MEMORY[0x263F19048]);
  *(_WORD *)&v43[*(int *)(v77 + 36)] = 256;
  sub_23BB683A0((uint64_t)v43, (uint64_t)&v21[*(int *)(v73 + 36)], (uint64_t (*)(void))sub_23BB680D4);
  long long v44 = v91;
  *((_OWORD *)v21 + 6) = v90;
  *((_OWORD *)v21 + 7) = v44;
  *((void *)v21 + 16) = v92;
  long long v45 = v87;
  *((_OWORD *)v21 + 2) = v86;
  *((_OWORD *)v21 + 3) = v45;
  long long v46 = v89;
  *((_OWORD *)v21 + 4) = v88;
  *((_OWORD *)v21 + 5) = v46;
  long long v47 = v85;
  *(_OWORD *)uint64_t v21 = v84;
  *((_OWORD *)v21 + 1) = v47;
  sub_23BB6836C((uint64_t)&v84);
  sub_23BB68408((uint64_t)v43, (uint64_t (*)(void))sub_23BB680D4);
  sub_23BB68408((uint64_t)v39, MEMORY[0x263F19048]);
  swift_release();
  swift_release();
  int v48 = v78;
  sub_23BB683A0((uint64_t)v21, (uint64_t)v78, (uint64_t (*)(void))sub_23BB68168);
  *(double *)&v48[*(int *)(v76 + 36)] = v26;
  sub_23BB68408((uint64_t)v21, (uint64_t (*)(void))sub_23BB68168);
  int v49 = *(unsigned __int8 *)(v30 + 16);
  uint64_t v50 = v79;
  sub_23BB683A0((uint64_t)v48, (uint64_t)v79, (uint64_t (*)(void))sub_23BB6831C);
  int v51 = (double *)&v50[*(int *)(v80 + 36)];
  double v52 = 0.0;
  if (v49) {
    double v53 = 0.0;
  }
  else {
    double v53 = a4;
  }
  if (v49) {
    double v52 = a4;
  }
  double *v51 = v53;
  v51[1] = v52;
  sub_23BB68408((uint64_t)v48, (uint64_t (*)(void))sub_23BB6831C);
  sub_23BB68468(&qword_268A7DBF8, sub_23BB68344, (void (*)(void))sub_23BB684E8);
  uint64_t result = sub_23BBDC3C0();
  *long long v83 = result;
  return result;
}

double sub_23BB668E0@<D0>(double a1@<X0>, char a2@<W2>, uint64_t a3@<X8>, double a4@<D0>)
{
  if (a2)
  {
    sub_23BBDC400();
    sub_23BBDBBE0();
  }
  else
  {
    sub_23BBDC400();
    sub_23BBD4898(a4, 0, 0.0, 1, a4, 0, 0.0, 1, v19, a1, 0, a1, 0);
  }
  uint64_t v7 = MEMORY[0x263F1BA90];
  uint64_t v8 = MEMORY[0x263F19110];
  uint64_t v9 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F18E28];
  sub_23BB68D30(0, &qword_268A7DB20, MEMORY[0x263F1BA90], MEMORY[0x263F19110], MEMORY[0x263F18E28]);
  uint64_t v10 = MEMORY[0x263F18868];
  sub_23BB68D30(0, &qword_26AEBB9F0, v7, MEMORY[0x263F18868], v9);
  sub_23BB67398(&qword_268A7DB28, &qword_268A7DB20, v8);
  sub_23BB67398(&qword_268A7DB38, &qword_26AEBB9F0, v10);
  sub_23BBDBED0();
  double result = *(double *)v19;
  long long v12 = v19[1];
  long long v13 = v19[2];
  long long v14 = v19[3];
  long long v15 = v19[4];
  long long v16 = v19[5];
  long long v17 = v19[6];
  char v18 = v20;
  *(_OWORD *)a3 = v19[0];
  *(_OWORD *)(a3 + 16) = v12;
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)(a3 + 48) = v14;
  *(_OWORD *)(a3 + 64) = v15;
  *(_OWORD *)(a3 + 80) = v16;
  *(_OWORD *)(a3 + 96) = v17;
  *(unsigned char *)(a3 + 112) = v18;
  return result;
}

uint64_t sub_23BB66B28()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB66B44()
{
  uint64_t v1 = sub_23BBDC570();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_23BBDC5A0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v0, v5);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (v9 != *MEMORY[0x263F1FCD8])
  {
    if (v9 != *MEMORY[0x263F1FD08])
    {
      uint64_t v12 = sub_23BBDC280();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return v12;
    }
    goto LABEL_5;
  }
  sub_23BBDC550();
  char v10 = sub_23BBDC540();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v10)
  {
LABEL_5:
    sub_23BBDC2B0();
    uint64_t v12 = sub_23BBDC2E0();
    swift_release();
    return v12;
  }
  id v11 = objc_msgSend(self, sel_systemGray5Color);
  return MEMORY[0x23ECD0920](v11);
}

uint64_t sub_23BB66D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_23BBDC570();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_23BBDC5A0();
  uint64_t v38 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB6555C(*(double *)a1, *(double *)(a1 + 8), *(unsigned char *)(a1 + 16), (uint64_t)&v72);
  uint64_t v52 = v73;
  uint64_t v53 = v72;
  uint64_t v50 = v75;
  uint64_t v51 = v74;
  uint64_t v11 = v77;
  uint64_t v49 = v76;
  uint64_t v46 = v79;
  uint64_t v47 = v78;
  uint64_t v59 = v81;
  uint64_t v60 = v80;
  uint64_t v57 = v83;
  uint64_t v58 = v82;
  uint64_t v55 = v85;
  uint64_t v56 = v84;
  unsigned __int8 v12 = v86;
  uint64_t v48 = sub_23BBDC2C0();
  uint64_t KeyPath = swift_getKeyPath();
  unsigned __int8 v97 = v12;
  sub_23BBDC410();
  sub_23BBDBBE0();
  uint64_t v45 = v90;
  int v44 = v91;
  int v40 = v93;
  uint64_t v42 = v94;
  uint64_t v43 = v92;
  uint64_t v41 = v95;
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    type metadata accessor for PlaceholderBarView(0);
    uint64_t v37 = v8;
    sub_23BB77A10((uint64_t)v10);
    sub_23BB77CD4((uint64_t)v7);
    uint64_t v39 = sub_23BB66B44();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v37);
  }
  else
  {
    uint64_t v39 = sub_23BBDC2C0();
  }
  uint64_t v13 = swift_getKeyPath();
  double v14 = *(double *)(a1 + 8) * 0.5 - *(double *)(a1 + 24) * 0.5;
  BOOL v15 = *(unsigned char *)(a1 + 16) == 0;
  LODWORD(v38) = v97;
  if (v15) {
    double v16 = v14;
  }
  else {
    double v16 = 0.0;
  }
  if (v15) {
    double v14 = 0.0;
  }
  uint64_t v18 = v52;
  uint64_t v17 = v53;
  *(void *)&long long v61 = v53;
  *((void *)&v61 + 1) = v52;
  uint64_t v19 = v50;
  uint64_t v20 = v51;
  *(void *)&long long v62 = v51;
  *((void *)&v62 + 1) = v50;
  uint64_t v21 = v49;
  *(void *)&long long v63 = v49;
  *((void *)&v63 + 1) = v11;
  uint64_t v23 = v46;
  uint64_t v22 = v47;
  *(void *)&long long v64 = v47;
  *((void *)&v64 + 1) = v46;
  *(void *)&long long v65 = v60;
  *((void *)&v65 + 1) = v59;
  *(void *)&long long v66 = v58;
  *((void *)&v66 + 1) = v57;
  *(void *)&long long v67 = v56;
  *((void *)&v67 + 1) = v55;
  LOBYTE(v68) = v97;
  *(_DWORD *)((char *)&v68 + 1) = *(_DWORD *)v96;
  DWORD1(v68) = *(_DWORD *)&v96[3];
  uint64_t v37 = v11;
  uint64_t v24 = v48;
  *((void *)&v68 + 1) = KeyPath;
  uint64_t v69 = v48;
  long long v25 = v64;
  *(_OWORD *)(a2 + 32) = v63;
  *(_OWORD *)(a2 + 48) = v25;
  long long v26 = v65;
  long long v27 = v66;
  long long v28 = v68;
  *(_OWORD *)(a2 + 96) = v67;
  *(_OWORD *)(a2 + 112) = v28;
  *(_OWORD *)(a2 + 64) = v26;
  *(_OWORD *)(a2 + 80) = v27;
  long long v29 = v62;
  *(_OWORD *)a2 = v61;
  *(_OWORD *)(a2 + 16) = v29;
  char v30 = v44;
  char v71 = v44;
  char v31 = v40;
  char v70 = v40;
  uint64_t v32 = v45;
  *(void *)(a2 + 128) = v24;
  *(void *)(a2 + 136) = v32;
  *(unsigned char *)(a2 + 144) = v30;
  *(void *)(a2 + 152) = v43;
  *(unsigned char *)(a2 + 160) = v31;
  uint64_t v33 = v41;
  *(void *)(a2 + 168) = v42;
  *(void *)(a2 + 176) = v33;
  uint64_t v34 = v39;
  *(void *)(a2 + 184) = v13;
  *(void *)(a2 + 192) = v34;
  *(double *)(a2 + 200) = v16;
  *(double *)(a2 + 208) = v14;
  sub_23BB6836C((uint64_t)&v61);
  uint64_t v72 = v17;
  uint64_t v73 = v18;
  uint64_t v74 = v20;
  uint64_t v75 = v19;
  uint64_t v76 = v21;
  uint64_t v77 = v37;
  uint64_t v78 = v22;
  uint64_t v79 = v23;
  uint64_t v80 = v60;
  uint64_t v81 = v59;
  uint64_t v82 = v58;
  uint64_t v83 = v57;
  uint64_t v84 = v56;
  uint64_t v85 = v55;
  unsigned __int8 v86 = v38;
  *(_DWORD *)long long v87 = *(_DWORD *)v96;
  *(_DWORD *)&v87[3] = *(_DWORD *)&v96[3];
  uint64_t v88 = KeyPath;
  uint64_t v89 = v24;
  return sub_23BB6730C((uint64_t)&v72);
}

double sub_23BB671C0@<D0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 16)) {
    uint64_t v3 = sub_23BBDC400();
  }
  else {
    uint64_t v3 = sub_23BBDC420();
  }
  uint64_t v5 = v3;
  uint64_t v6 = v4;
  sub_23BB66D7C(v1, (uint64_t)v14);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  long long v7 = v14[11];
  *(_OWORD *)(a1 + 176) = v14[10];
  *(_OWORD *)(a1 + 192) = v7;
  *(_OWORD *)(a1 + 208) = v14[12];
  *(void *)(a1 + 224) = v15;
  long long v8 = v14[7];
  *(_OWORD *)(a1 + 112) = v14[6];
  *(_OWORD *)(a1 + 128) = v8;
  long long v9 = v14[9];
  *(_OWORD *)(a1 + 144) = v14[8];
  *(_OWORD *)(a1 + 160) = v9;
  long long v10 = v14[3];
  *(_OWORD *)(a1 + 48) = v14[2];
  *(_OWORD *)(a1 + 64) = v10;
  long long v11 = v14[5];
  *(_OWORD *)(a1 + 80) = v14[4];
  *(_OWORD *)(a1 + 96) = v11;
  double result = *(double *)v14;
  long long v13 = v14[1];
  *(_OWORD *)(a1 + 16) = v14[0];
  *(_OWORD *)(a1 + 32) = v13;
  return result;
}

uint64_t sub_23BB6725C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_23BBDBCE0();
  *a1 = result;
  return result;
}

uint64_t sub_23BB67288@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_23BBDBCE0();
  *a1 = result;
  return result;
}

uint64_t sub_23BB672B4()
{
  return sub_23BBDBCF0();
}

uint64_t sub_23BB672E0()
{
  return sub_23BBDBCF0();
}

uint64_t sub_23BB6730C(uint64_t a1)
{
  return a1;
}

unint64_t sub_23BB67344()
{
  unint64_t result = qword_268A7DB30;
  if (!qword_268A7DB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DB30);
  }
  return result;
}

uint64_t sub_23BB67398(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23BB68D30(255, a2, MEMORY[0x263F1BA90], a3, MEMORY[0x263F18E28]);
    sub_23BB67344();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BB6742C()
{
  if (!qword_268A7DB50)
  {
    sub_23BB681EC(255, &qword_268A7DB58, (void (*)(uint64_t))sub_23BB674CC);
    sub_23BB675E0();
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_268A7DB50);
    }
  }
}

void sub_23BB674CC()
{
  if (!qword_268A7DB60)
  {
    uint64_t v0 = MEMORY[0x263F1BA90];
    uint64_t v1 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F18E28];
    sub_23BB68D30(255, &qword_268A7DB20, MEMORY[0x263F1BA90], MEMORY[0x263F19110], MEMORY[0x263F18E28]);
    sub_23BB68D30(255, &qword_26AEBB9F0, v0, MEMORY[0x263F18868], v1);
    unint64_t v2 = sub_23BBDBEE0();
    if (!v3) {
      atomic_store(v2, (unint64_t *)&qword_268A7DB60);
    }
  }
}

void sub_23BB67588()
{
  if (!qword_26AEBBA68)
  {
    unint64_t v0 = sub_23BBDC940();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBA68);
    }
  }
}

void sub_23BB675E0()
{
  if (!qword_268A7DB68)
  {
    sub_23BB68D30(255, &qword_26AEBBA88, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    sub_23BB676A0();
    sub_23BB6771C();
    unint64_t v0 = sub_23BBDC3E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DB68);
    }
  }
}

void sub_23BB676A0()
{
  if (!qword_268A7DB70)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7DB70);
    }
  }
}

unint64_t sub_23BB6771C()
{
  unint64_t result = qword_26AEBBA90;
  if (!qword_26AEBBA90)
  {
    sub_23BB68D30(255, &qword_26AEBBA88, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    sub_23BB677C0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBBA90);
  }
  return result;
}

unint64_t sub_23BB677C0()
{
  unint64_t result = qword_26AEBBA78;
  if (!qword_26AEBBA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBBA78);
  }
  return result;
}

void sub_23BB67814()
{
  if (!qword_268A7DB80)
  {
    sub_23BB68A54(255, &qword_268A7DB40, &qword_268A7DB48, (uint64_t (*)(uint64_t))sub_23BB6742C, &qword_268A7DB78);
    sub_23BB68D30(255, &qword_268A7DB88, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A180]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DB80);
    }
  }
}

void sub_23BB678D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for PlaceholderBarView(255);
    sub_23BB67814();
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_23BB67944()
{
  if (!qword_268A7DB98)
  {
    sub_23BB68AF4(255, &qword_268A7DB48, (uint64_t (*)(uint64_t))sub_23BB6742C, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DB98);
    }
  }
}

uint64_t sub_23BB679DC(uint64_t a1, uint64_t a2)
{
  sub_23BB68A54(0, &qword_268A7DB40, &qword_268A7DB48, (uint64_t (*)(uint64_t))sub_23BB6742C, &qword_268A7DB78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB67A6C(uint64_t a1)
{
  sub_23BB68A54(0, &qword_268A7DB40, &qword_268A7DB48, (uint64_t (*)(uint64_t))sub_23BB6742C, &qword_268A7DB78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BB67AF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BB67B3C()
{
  unint64_t result = qword_268A7DBA0;
  if (!qword_268A7DBA0)
  {
    sub_23BB67814();
    sub_23BB67BD4();
    sub_23BB67C58(&qword_268A7DBB0, &qword_268A7DB88, MEMORY[0x263F1B440], MEMORY[0x263F1B420]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DBA0);
  }
  return result;
}

unint64_t sub_23BB67BD4()
{
  unint64_t result = qword_268A7DBA8;
  if (!qword_268A7DBA8)
  {
    sub_23BB68A54(255, &qword_268A7DB40, &qword_268A7DB48, (uint64_t (*)(uint64_t))sub_23BB6742C, &qword_268A7DB78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DBA8);
  }
  return result;
}

uint64_t sub_23BB67C58(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23BB68D30(255, a2, a3, a4, MEMORY[0x263F1A180]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB67CCC(uint64_t a1, uint64_t a2)
{
  sub_23BB68AF4(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB67D64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = type metadata accessor for BarView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  sub_23BB68AF4(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v5 + *(int *)(v1 + 20);
  sub_23BB68AF4(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC570();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(v5 + *(int *)(v1 + 24)), *(unsigned char *)(v5 + *(int *)(v1 + 24) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_23BB68014@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for BarView(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_23BB65A00(a1, v7, v2 + v6, v8, a2);
}

void sub_23BB680D4()
{
  if (!qword_268A7DBB8)
  {
    sub_23BBDBC70();
    sub_23BB67AF4(&qword_268A7DBC0, MEMORY[0x263F19048]);
    unint64_t v0 = sub_23BBDBBC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DBB8);
    }
  }
}

void sub_23BB68168()
{
  if (!qword_268A7DBC8)
  {
    sub_23BB681EC(255, &qword_268A7DBD0, (void (*)(uint64_t))sub_23BB68288);
    sub_23BB680D4();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DBC8);
    }
  }
}

void sub_23BB681EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_23BB68AF4(255, &qword_26AEBBA40, (uint64_t (*)(uint64_t))sub_23BB67588, MEMORY[0x263F1A418]);
    unint64_t v4 = sub_23BBDBC60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_23BB68288()
{
  if (!qword_268A7DBD8)
  {
    sub_23BB674CC();
    sub_23BB68D30(255, &qword_268A7DBE0, MEMORY[0x263F19E50], MEMORY[0x263F19E40], MEMORY[0x263F1A180]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DBD8);
    }
  }
}

void sub_23BB6831C(uint64_t a1)
{
}

void sub_23BB68344(uint64_t a1)
{
}

uint64_t sub_23BB6836C(uint64_t a1)
{
  return a1;
}

uint64_t sub_23BB683A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB68408(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BB68468(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB684E8()
{
  return sub_23BB68468(&qword_268A7DC00, sub_23BB6831C, (void (*)(void))sub_23BB68524);
}

unint64_t sub_23BB68524()
{
  unint64_t result = qword_268A7DC08;
  if (!qword_268A7DC08)
  {
    sub_23BB68168();
    sub_23BB685CC();
    sub_23BB67AF4(&qword_268A7DC30, (void (*)(uint64_t))sub_23BB680D4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DC08);
  }
  return result;
}

unint64_t sub_23BB685CC()
{
  unint64_t result = qword_268A7DC10;
  if (!qword_268A7DC10)
  {
    sub_23BB681EC(255, &qword_268A7DBD0, (void (*)(uint64_t))sub_23BB68288);
    sub_23BB68660();
    sub_23BB687B0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DC10);
  }
  return result;
}

unint64_t sub_23BB68660()
{
  unint64_t result = qword_268A7DC18;
  if (!qword_268A7DC18)
  {
    sub_23BB68288();
    sub_23BB686F8();
    sub_23BB67C58(&qword_268A7DC28, &qword_268A7DBE0, MEMORY[0x263F19E50], MEMORY[0x263F19E40]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DC18);
  }
  return result;
}

unint64_t sub_23BB686F8()
{
  unint64_t result = qword_268A7DC20;
  if (!qword_268A7DC20)
  {
    sub_23BB674CC();
    sub_23BB67398(&qword_268A7DB28, &qword_268A7DB20, MEMORY[0x263F19110]);
    sub_23BB67398(&qword_268A7DB38, &qword_26AEBB9F0, MEMORY[0x263F18868]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DC20);
  }
  return result;
}

unint64_t sub_23BB687B0()
{
  unint64_t result = qword_26AEBBA38;
  if (!qword_26AEBBA38)
  {
    sub_23BB68AF4(255, &qword_26AEBBA40, (uint64_t (*)(uint64_t))sub_23BB67588, MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBBA38);
  }
  return result;
}

void *sub_23BB68838(void *a1)
{
  return sub_23BBAD49C(0, a1[2], 0, a1);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Segment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Segment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BarSegment()
{
  return &type metadata for BarSegment;
}

ValueMetadata *type metadata accessor for BarView.Range()
{
  return &type metadata for BarView.Range;
}

uint64_t getEnumTagSinglePayload for BarView.Configuration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BarView.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_23BB689A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_23BB689B0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BarView.Configuration()
{
  return &type metadata for BarView.Configuration;
}

unint64_t sub_23BB689D0()
{
  unint64_t result = qword_268A7DC40;
  if (!qword_268A7DC40)
  {
    sub_23BB68A54(255, &qword_268A7DC48, &qword_268A7DC50, (uint64_t (*)(uint64_t))sub_23BB68B58, &qword_268A7DC60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DC40);
  }
  return result;
}

void sub_23BB68A54(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  if (!*a2)
  {
    sub_23BB68AF4(255, a3, a4, MEMORY[0x263F1BAC8]);
    sub_23BB68D80(a5, a3, a4);
    unint64_t v9 = sub_23BBDC3B0();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_23BB68AF4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_23BB68B58()
{
  if (!qword_268A7DC58)
  {
    sub_23BB681EC(255, &qword_268A7DB58, (void (*)(uint64_t))sub_23BB674CC);
    sub_23BB68C08(255, &qword_26AEBBA18, (void (*)(uint64_t))sub_23BB68C6C);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268A7DC58);
    }
  }
}

void sub_23BB68C08(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23BBDBC60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_23BB68C6C()
{
  if (!qword_26AEBBA10)
  {
    sub_23BB68D30(255, &qword_26AEBB9E8, MEMORY[0x263F1B638], MEMORY[0x263F18868], MEMORY[0x263F18E28]);
    sub_23BB68AF4(255, &qword_26AEBBA40, (uint64_t (*)(uint64_t))sub_23BB67588, MEMORY[0x263F1A418]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBA10);
    }
  }
}

void sub_23BB68D30(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_23BB68D80(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23BB68AF4(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BB68DE8()
{
  unint64_t result = qword_268A7DC68;
  if (!qword_268A7DC68)
  {
    sub_23BB678D4(255, &qword_268A7DC70, MEMORY[0x263F19B28]);
    sub_23BB67AF4(&qword_26AEBB9A0, (void (*)(uint64_t))type metadata accessor for PlaceholderBarView);
    sub_23BB67B3C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DC68);
  }
  return result;
}

void *sub_23BB68EB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    unint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    unint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
    uint64_t v7 = v6[5];
    unint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    unsigned __int8 v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = v6[6];
    double v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *((unsigned char *)v4 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    uint64_t v19 = v6[8];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v58(v20, v21, v22);
    uint64_t v24 = v6[9];
    long long v25 = *(void **)((char *)a2 + v24);
    *(void *)((char *)v4 + v24) = v25;
    uint64_t v26 = v6[10];
    long long v27 = (void *)((char *)v4 + v26);
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    id v30 = v25;
    if (v29)
    {
      uint64_t v32 = *(void **)(v28 + 8);
      char v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)long long v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = v6[11];
    uint64_t v36 = (char *)v4 + v35;
    uint64_t v37 = (char *)a2 + v35;
    uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v58(v36, (uint64_t)v37, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = v6[12];
    uint64_t v41 = (char *)v4 + v40;
    uint64_t v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v58(v41, (uint64_t)v42, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = v6[13];
    uint64_t v45 = (char *)v4 + v44;
    uint64_t v46 = (char *)a2 + v44;
    if (v38((char *)a2 + v44, 1, v22))
    {
      sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v58(v45, (uint64_t)v46, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
    uint64_t v48 = *(int *)(a3 + 20);
    uint64_t v49 = (void *)((char *)v4 + v48);
    uint64_t v50 = (uint64_t *)((char *)a2 + v48);
    sub_23BB6D6A8(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v51 = sub_23BBDBC50();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v51 - 8) + 16))(v49, v50, v51);
    }
    else
    {
      *uint64_t v49 = *v50;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v52 = *(int *)(a3 + 24);
    uint64_t v53 = (void *)((char *)v4 + v52);
    uint64_t v54 = (uint64_t *)((char *)a2 + v52);
    sub_23BB6D6A8(0, &qword_26AEBB9A8, MEMORY[0x263F07690], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v55 = sub_23BBDB890();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v55 - 8) + 16))(v53, v54, v55);
    }
    else
    {
      *uint64_t v53 = *v54;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_23BB695E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = a1 + v4[5];
  uint64_t v6 = sub_23BBDB6D0();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[6];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = a1 + v4[8];
  uint64_t v11 = sub_23BBDB860();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);

  uint64_t v14 = a1 + v4[10];
  if (*(void *)v14)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + v4[11];
  double v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v16(v15, 1, v11)) {
    v13(v15, v11);
  }
  uint64_t v17 = a1 + v4[12];
  if (!v16(v17, 1, v11)) {
    v13(v17, v11);
  }
  uint64_t v18 = a1 + v4[13];
  if (!v16(v18, 1, v11)) {
    v13(v18, v11);
  }
  uint64_t v19 = a1 + *(int *)(a2 + 20);
  sub_23BB6D6A8(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_23BBDBC50();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  }
  else
  {
    swift_release();
  }
  uint64_t v21 = a1 + *(int *)(a2 + 24);
  sub_23BB6D6A8(0, &qword_26AEBB9A8, MEMORY[0x263F07690], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = sub_23BBDB890();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
    return v23(v21, v22);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_23BB69998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v17 = v5[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v56 = *(void (**)(void *, const void *, uint64_t))(v21 + 16);
  v56(v18, v19, v20);
  uint64_t v22 = v5[9];
  uint64_t v23 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v23;
  uint64_t v24 = v5[10];
  long long v25 = (void *)(a1 + v24);
  uint64_t v26 = a2 + v24;
  uint64_t v27 = *(void *)(a2 + v24);
  id v28 = v23;
  if (v27)
  {
    id v30 = *(void **)(v26 + 8);
    uint64_t v29 = *(void **)(v26 + 16);
    *long long v25 = v27;
    v25[1] = v30;
    v25[2] = v29;
    swift_bridgeObjectRetain();
    id v31 = v30;
    id v32 = v29;
  }
  else
  {
    *(_OWORD *)long long v25 = *(_OWORD *)v26;
    v25[2] = *(void *)(v26 + 16);
  }
  uint64_t v33 = v5[11];
  id v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v36(a2 + v33, 1, v20))
  {
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v56(v34, v35, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v34, 0, 1, v20);
  }
  uint64_t v38 = v5[12];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (const void *)(a2 + v38);
  if (v36(a2 + v38, 1, v20))
  {
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v56(v39, v40, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v39, 0, 1, v20);
  }
  uint64_t v42 = v5[13];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (const void *)(a2 + v42);
  if (v36(a2 + v42, 1, v20))
  {
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    v56(v43, v44, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v43, 0, 1, v20);
  }
  uint64_t v46 = *(int *)(a3 + 20);
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (void *)(a2 + v46);
  sub_23BB6D6A8(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v49 = sub_23BBDBC50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
  }
  else
  {
    void *v47 = *v48;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v50 = *(int *)(a3 + 24);
  uint64_t v51 = (void *)(a1 + v50);
  uint64_t v52 = (void *)(a2 + v50);
  sub_23BB6D6A8(0, &qword_26AEBB9A8, MEMORY[0x263F07690], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v53 = sub_23BBDB890();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
  }
  else
  {
    void *v51 = *v52;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23BB6A078(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v5;
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = v6[5];
  unint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_23BBDB6D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = v6[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  int v19 = v12((void *)(a1 + v16), 1, v10);
  int v20 = v12(v18, 1, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_12:
    sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v17, v18, v10);
LABEL_13:
  *(unsigned char *)(a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
  uint64_t v22 = v6[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t)a2 + v22;
  uint64_t v25 = sub_23BBDB860();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 24);
  v80(v23, v24, v25);
  uint64_t v27 = v6[9];
  id v28 = *(void **)((char *)a2 + v27);
  uint64_t v29 = *(void **)(a1 + v27);
  *(void *)(a1 + v27) = v28;
  id v30 = v28;

  uint64_t v31 = v6[10];
  id v32 = (void *)(a1 + v31);
  uint64_t v33 = (long long *)((char *)a2 + v31);
  uint64_t v34 = *(uint64_t *)((char *)a2 + v31);
  if (*(void *)(a1 + v31))
  {
    if (v34)
    {
      void *v32 = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v35 = (void *)v32[1];
      uint64_t v36 = (void *)*((void *)v33 + 1);
      v32[1] = v36;
      id v37 = v36;

      uint64_t v38 = (void *)v32[2];
      uint64_t v39 = (void *)*((void *)v33 + 2);
      v32[2] = v39;
      id v40 = v39;
    }
    else
    {
      sub_23BB547F0(a1 + v31);
      uint64_t v45 = *((void *)v33 + 2);
      *(_OWORD *)id v32 = *v33;
      v32[2] = v45;
    }
  }
  else if (v34)
  {
    void *v32 = v34;
    uint64_t v41 = (void *)*((void *)v33 + 1);
    v32[1] = v41;
    uint64_t v42 = (void *)*((void *)v33 + 2);
    v32[2] = v42;
    swift_bridgeObjectRetain();
    id v43 = v41;
    id v44 = v42;
  }
  else
  {
    long long v46 = *v33;
    v32[2] = *((void *)v33 + 2);
    *(_OWORD *)id v32 = v46;
  }
  uint64_t v47 = v6[11];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  int v51 = v50(a1 + v47, 1, v25);
  int v52 = v50((uint64_t)v49, 1, v25);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v48, v49, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v48, 0, 1, v25);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v48, v25);
LABEL_27:
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_28;
  }
  v80((uint64_t)v48, (uint64_t)v49, v25);
LABEL_28:
  uint64_t v54 = v6[12];
  uint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (char *)a2 + v54;
  int v57 = v50(a1 + v54, 1, v25);
  int v58 = v50((uint64_t)v56, 1, v25);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v55, v56, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v55, 0, 1, v25);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v55, v25);
LABEL_33:
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_34;
  }
  v80((uint64_t)v55, (uint64_t)v56, v25);
LABEL_34:
  uint64_t v60 = v6[13];
  long long v61 = (void *)(a1 + v60);
  long long v62 = (char *)a2 + v60;
  int v63 = v50(a1 + v60, 1, v25);
  int v64 = v50((uint64_t)v62, 1, v25);
  if (v63)
  {
    uint64_t v65 = a3;
    if (!v64)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v61, v62, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v61, 0, 1, v25);
      if ((uint64_t *)a1 == a2) {
        return a1;
      }
      goto LABEL_41;
    }
LABEL_40:
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
    if ((uint64_t *)a1 == a2) {
      return a1;
    }
    goto LABEL_41;
  }
  uint64_t v65 = a3;
  if (v64)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v61, v25);
    goto LABEL_40;
  }
  v80((uint64_t)v61, (uint64_t)v62, v25);
  if ((uint64_t *)a1 == a2) {
    return a1;
  }
LABEL_41:
  uint64_t v67 = *(int *)(v65 + 20);
  long long v68 = (void *)(a1 + v67);
  uint64_t v69 = (uint64_t *)((char *)a2 + v67);
  char v70 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
  char v71 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BB6AA08(a1 + v67, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  sub_23BB6D6A8(0, &qword_26AEBB9B0, v70, v71);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v72 = sub_23BBDBC50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v72 - 8) + 16))(v68, v69, v72);
  }
  else
  {
    *long long v68 = *v69;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v73 = *(int *)(v65 + 24);
  uint64_t v74 = (void *)(a1 + v73);
  uint64_t v75 = (uint64_t *)((char *)a2 + v73);
  uint64_t v76 = (uint64_t (*)(uint64_t))MEMORY[0x263F07690];
  uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BB6AA08(a1 + v73, &qword_26AEBB9A8, MEMORY[0x263F07690], MEMORY[0x263F185C8]);
  sub_23BB6D6A8(0, &qword_26AEBB9A8, v76, v77);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v78 = sub_23BBDB890();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v78 - 8) + 16))(v74, v75, v78);
  }
  else
  {
    *uint64_t v74 = *v75;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23BB6AA08(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_23BB6D6A8(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_23BB6AA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[6];
  int v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v17 = v5[8];
  uint64_t v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(void *, const void *, uint64_t))(v21 + 32);
  v22(v18, v19, v20);
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  uint64_t v23 = v5[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  uint64_t v26 = v5[11];
  uint64_t v27 = (void *)(a1 + v26);
  id v28 = (const void *)(a2 + v26);
  int v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v52(a2 + v26, 1, v20))
  {
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v22(v27, v28, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v27, 0, 1, v20);
  }
  uint64_t v30 = v5[12];
  uint64_t v31 = (void *)(a1 + v30);
  id v32 = (const void *)(a2 + v30);
  if (v52(a2 + v30, 1, v20))
  {
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    uint64_t v34 = v21;
  }
  else
  {
    v22(v31, v32, v20);
    uint64_t v34 = v21;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v31, 0, 1, v20);
  }
  uint64_t v35 = v5[13];
  uint64_t v36 = (void *)(a1 + v35);
  id v37 = (const void *)(a2 + v35);
  if (v52(a2 + v35, 1, v20))
  {
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v22(v36, v37, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v20);
  }
  uint64_t v39 = *(int *)(a3 + 20);
  id v40 = (void *)(a1 + v39);
  uint64_t v41 = (const void *)(a2 + v39);
  sub_23BB6D6A8(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  uint64_t v43 = v42;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v44 = sub_23BBDBC50();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v44 - 8) + 32))(v40, v41, v44);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
  }
  uint64_t v45 = *(int *)(a3 + 24);
  long long v46 = (void *)(a1 + v45);
  uint64_t v47 = (const void *)(a2 + v45);
  sub_23BB6D6A8(0, &qword_26AEBB9A8, MEMORY[0x263F07690], MEMORY[0x263F185C8]);
  uint64_t v49 = v48;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v50 = sub_23BBDB890();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v50 - 8) + 32))(v46, v47, v50);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BB6B12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BB6D6A8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v16, v17, v9);
LABEL_13:
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v21 = v5[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  char v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  v70(v22, v23, v24);
  uint64_t v26 = v5[9];
  uint64_t v27 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);

  uint64_t v28 = v5[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  if (*(void *)(a1 + v28))
  {
    if (*v30)
    {
      *uint64_t v29 = *v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = (void *)v29[1];
      v29[1] = v30[1];

      id v32 = (void *)v29[2];
      v29[2] = v30[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v29);
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  v29[2] = v30[2];
LABEL_18:
  uint64_t v33 = v5[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v37 = v36(a1 + v33, 1, v24);
  int v38 = v36((uint64_t)v35, 1, v24);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v34, v35, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, v24);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v34, v24);
LABEL_23:
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_24;
  }
  v70((uint64_t)v34, (uint64_t)v35, v24);
LABEL_24:
  uint64_t v40 = v5[12];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (const void *)(a2 + v40);
  int v43 = v36(a1 + v40, 1, v24);
  int v44 = v36((uint64_t)v42, 1, v24);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v41, v42, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v41, 0, 1, v24);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v41, v24);
LABEL_29:
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_30;
  }
  v70((uint64_t)v41, (uint64_t)v42, v24);
LABEL_30:
  uint64_t v46 = v5[13];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (const void *)(a2 + v46);
  int v49 = v36(a1 + v46, 1, v24);
  int v50 = v36((uint64_t)v48, 1, v24);
  if (v49)
  {
    uint64_t v51 = a3;
    if (!v50)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v47, v48, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
      if (a1 == a2) {
        return a1;
      }
      goto LABEL_37;
    }
LABEL_36:
    sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    if (a1 == a2) {
      return a1;
    }
    goto LABEL_37;
  }
  uint64_t v51 = a3;
  if (v50)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
    goto LABEL_36;
  }
  v70((uint64_t)v47, (uint64_t)v48, v24);
  if (a1 == a2) {
    return a1;
  }
LABEL_37:
  uint64_t v53 = *(int *)(v51 + 20);
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (const void *)(a2 + v53);
  uint64_t v56 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
  int v57 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BB6AA08(a1 + v53, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  sub_23BB6D6A8(0, &qword_26AEBB9B0, v56, v57);
  uint64_t v59 = v58;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v60 = sub_23BBDBC50();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v60 - 8) + 32))(v54, v55, v60);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
  }
  uint64_t v61 = *(int *)(v51 + 24);
  long long v62 = (void *)(a1 + v61);
  int v63 = (const void *)(a2 + v61);
  int v64 = (uint64_t (*)(uint64_t))MEMORY[0x263F07690];
  uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BB6AA08(a1 + v61, &qword_26AEBB9A8, MEMORY[0x263F07690], MEMORY[0x263F185C8]);
  sub_23BB6D6A8(0, &qword_26AEBB9A8, v64, v65);
  uint64_t v67 = v66;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v68 = sub_23BBDB890();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v68 - 8) + 32))(v62, v63, v68);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BB6BA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB6BA90);
}

uint64_t sub_23BB6BA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_23BB6D6A8(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  sub_23BB6D6A8(0, &qword_268A7DC78, MEMORY[0x263F07690], MEMORY[0x263F185D0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t sub_23BB6BC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB6BC50);
}

uint64_t sub_23BB6BC50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  sub_23BB6D6A8(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  sub_23BB6D6A8(0, &qword_268A7DC78, MEMORY[0x263F07690], MEMORY[0x263F185D0]);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for BedtimeSleepWidgetView()
{
  uint64_t result = qword_26AEBB700;
  if (!qword_26AEBB700) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_23BB6BE54()
{
  type metadata accessor for SleepWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_23BB6D6A8(319, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    if (v1 <= 0x3F)
    {
      sub_23BB6D6A8(319, &qword_26AEBB9A8, MEMORY[0x263F07690], MEMORY[0x263F185C8]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_23BB6BFB8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB6BFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v66 = type metadata accessor for SleepWidgetViewModel();
  MEMORY[0x270FA5388](v66);
  char v70 = &v62[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v68 = type metadata accessor for ScheduleOccurrenceSectionView(0);
  MEMORY[0x270FA5388](v68);
  uint64_t v5 = &v62[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23BB6D420();
  uint64_t v71 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v74 = &v62[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v69 = &v62[-v10];
  MEMORY[0x270FA5388](v9);
  uint64_t v73 = &v62[-v11];
  uint64_t v12 = sub_23BBDBC50();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v62[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = &v62[-v17];
  uint64_t v19 = (int *)type metadata accessor for BedTitleView(0);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v72 = &v62[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (uint64_t *)&v62[-v23];
  MEMORY[0x270FA5388](v22);
  uint64_t v67 = &v62[-v25];
  uint64_t v26 = SleepWidgetViewModel.title.getter();
  uint64_t v64 = v27;
  uint64_t v65 = v26;
  BOOL v63 = (*(unsigned char *)(a1 + 8) & 1) == 0 && *(void *)a1 == 5;
  type metadata accessor for BedtimeSleepWidgetView();
  sub_23BB781C0((uint64_t)v18);
  (*(void (**)(unsigned char *, void, uint64_t))(v13 + 104))(v16, *MEMORY[0x263F18D60], v12);
  sub_23BB6D5F8(&qword_26AEBB9C0, MEMORY[0x263F18D80]);
  char v28 = sub_23BBDC6B0();
  uint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v13 + 8);
  v29(v16, v12);
  v29(v18, v12);
  if (sub_23BB6C6D8()) {
    double v30 = 0.6;
  }
  else {
    double v30 = 1.0;
  }
  uint64_t *v24 = swift_getKeyPath();
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BB6D6A8(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  id v32 = (uint64_t *)((char *)v24 + v19[5]);
  uint64_t v33 = v64;
  uint64_t *v32 = v65;
  v32[1] = v33;
  *((unsigned char *)v24 + v19[6]) = v63;
  *((unsigned char *)v24 + v19[7]) = (v28 & 1) == 0;
  *(double *)((char *)v24 + v19[8]) = v30;
  uint64_t v34 = v67;
  sub_23BB6D714((uint64_t)v24, (uint64_t)v67, type metadata accessor for BedTitleView);
  if (sub_23BB6CA34()) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = 0x4010000000000000;
  }
  uint64_t v36 = v70;
  sub_23BB6D77C(a1, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  char v37 = *(unsigned char *)(a1 + *(int *)(v66 + 28));
  uint64_t v38 = sub_23BB6CA34() & 1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = v68;
  *(void *)&v5[*(int *)(v68 + 28)] = KeyPath;
  sub_23BB6D6A8(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], v31);
  swift_storeEnumTagMultiPayload();
  sub_23BB6D714((uint64_t)v36, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  v5[*(int *)(v40 + 20)] = v37;
  *(void *)&v5[*(int *)(v40 + 24)] = v38;
  char v41 = sub_23BBDBFD0();
  sub_23BBDBBB0();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  int v50 = v69;
  sub_23BB6D77C((uint64_t)v5, (uint64_t)v69, type metadata accessor for ScheduleOccurrenceSectionView);
  uint64_t v51 = &v50[*(int *)(v71 + 36)];
  unsigned char *v51 = v41;
  *((void *)v51 + 1) = v43;
  *((void *)v51 + 2) = v45;
  *((void *)v51 + 3) = v47;
  *((void *)v51 + 4) = v49;
  v51[40] = 0;
  sub_23BB6D640((uint64_t)v5, type metadata accessor for ScheduleOccurrenceSectionView);
  uint64_t v52 = v73;
  sub_23BB6D714((uint64_t)v50, (uint64_t)v73, (uint64_t (*)(void))sub_23BB6D420);
  char v53 = sub_23BB6CD88();
  uint64_t v54 = v72;
  sub_23BB6D77C((uint64_t)v34, (uint64_t)v72, type metadata accessor for BedTitleView);
  uint64_t v55 = v74;
  sub_23BB6D77C((uint64_t)v52, (uint64_t)v74, (uint64_t (*)(void))sub_23BB6D420);
  uint64_t v56 = v75;
  sub_23BB6D77C((uint64_t)v54, v75, type metadata accessor for BedTitleView);
  sub_23BB6D390();
  uint64_t v58 = v57;
  uint64_t v59 = v56 + *(int *)(v57 + 48);
  *(void *)uint64_t v59 = v35;
  *(unsigned char *)(v59 + 8) = 0;
  sub_23BB6D77C((uint64_t)v55, v56 + *(int *)(v57 + 64), (uint64_t (*)(void))sub_23BB6D420);
  uint64_t v60 = v56 + *(int *)(v58 + 80);
  *(void *)uint64_t v60 = 0;
  *(unsigned char *)(v60 + 8) = 0;
  *(unsigned char *)(v60 + 9) = (v53 & 1) == 0;
  sub_23BB6D640((uint64_t)v52, (uint64_t (*)(void))sub_23BB6D420);
  sub_23BB6D640((uint64_t)v34, type metadata accessor for BedTitleView);
  sub_23BB6D640((uint64_t)v55, (uint64_t (*)(void))sub_23BB6D420);
  return sub_23BB6D640((uint64_t)v54, type metadata accessor for BedTitleView);
}

uint64_t sub_23BB6C6D8()
{
  uint64_t v0 = sub_23BBDBC50();
  uint64_t v21 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v20 - v4;
  sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = sub_23BBDB890();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BedtimeSleepWidgetView();
  sub_23BB784B8((uint64_t)v12);
  char v13 = sub_23BBDB880();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0
    || (sub_23BBC56F0((uint64_t)v8),
        uint64_t v14 = sub_23BBDB860(),
        int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v8, 1, v14),
        sub_23BB6AA08((uint64_t)v8, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]),
        v15 == 1))
  {
    char v16 = 0;
  }
  else
  {
    sub_23BB781C0((uint64_t)v5);
    uint64_t v17 = v21;
    (*(void (**)(char *, void, uint64_t))(v21 + 104))(v3, *MEMORY[0x263F18CC8], v0);
    sub_23BB6D5F8(&qword_26AEBB9C0, MEMORY[0x263F18D80]);
    char v16 = sub_23BBDC6B0() ^ 1;
    uint64_t v18 = *(void (**)(char *, uint64_t))(v17 + 8);
    v18(v3, v0);
    v18(v5, v0);
  }
  return v16 & 1;
}

uint64_t sub_23BB6CA34()
{
  uint64_t v0 = sub_23BBDBC50();
  uint64_t v26 = *(void *)(v0 - 8);
  uint64_t v27 = v0;
  uint64_t v1 = MEMORY[0x270FA5388](v0);
  uint64_t v25 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  uint64_t v24 = (uint64_t)&v24 - v3;
  uint64_t v4 = sub_23BBDB890();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v24 - v11;
  sub_23BBC56F0((uint64_t)&v24 - v11);
  uint64_t v13 = sub_23BBDB860();
  char v14 = 1;
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  sub_23BB6AA08((uint64_t)v12, (unint64_t *)&qword_26AEBB6E8, v8, v9);
  if (v15 != 1)
  {
    type metadata accessor for BedtimeSleepWidgetView();
    sub_23BB784B8((uint64_t)v7);
    char v16 = sub_23BBDB880();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (v16)
    {
      char v14 = 0;
    }
    else
    {
      uint64_t v17 = v24;
      sub_23BB781C0(v24);
      uint64_t v19 = v25;
      uint64_t v18 = v26;
      uint64_t v20 = v27;
      (*(void (**)(char *, void, uint64_t))(v26 + 104))(v25, *MEMORY[0x263F18CB8], v27);
      sub_23BB6D5F8(&qword_26AEBB9C0, MEMORY[0x263F18D80]);
      char v21 = sub_23BBDC6B0();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v18 + 8);
      v22(v19, v20);
      v22((char *)v17, v20);
      char v14 = v21 ^ 1;
    }
  }
  return v14 & 1;
}

uint64_t sub_23BB6CD88()
{
  uint64_t v0 = sub_23BBDBC50();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BB6D6A8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v17 - v10;
  sub_23BBC56F0((uint64_t)&v17 - v10);
  uint64_t v12 = sub_23BBDB860();
  int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  sub_23BB6AA08((uint64_t)v11, (unint64_t *)&qword_26AEBB6E8, v7, v8);
  if (v13 == 1)
  {
    type metadata accessor for BedtimeSleepWidgetView();
    sub_23BB781C0((uint64_t)v6);
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F18CB8], v0);
    sub_23BB6D5F8(&qword_26AEBB9C0, MEMORY[0x263F18D80]);
    char v14 = sub_23BBDC6B0() ^ 1;
    int v15 = *(void (**)(char *, uint64_t))(v1 + 8);
    v15(v4, v0);
    v15(v6, v0);
  }
  else
  {
    char v14 = sub_23BB6CA34();
  }
  return v14 & 1;
}

uint64_t sub_23BB6D00C()
{
  sub_23BB6D268();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB6D2FC();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = sub_23BBDBE60();
  *((void *)v6 + 1) = 0;
  v6[16] = 0;
  sub_23BB6D560();
  sub_23BB6BFD4(v0, (uint64_t)&v6[*(int *)(v7 + 44)]);
  uint64_t v8 = *MEMORY[0x263F18CC8];
  uint64_t v9 = sub_23BBDBC50();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v3, v8, v9);
  sub_23BB6D5F8(&qword_26AEBB9C8, MEMORY[0x263F18D80]);
  uint64_t result = sub_23BBDC6C0();
  if (result)
  {
    sub_23BB6D5F8(&qword_268A7DCB8, (void (*)(uint64_t))sub_23BB6D2FC);
    sub_23BB6D5F8(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
    sub_23BBDC240();
    sub_23BB6D640((uint64_t)v3, (uint64_t (*)(void))sub_23BB6D268);
    return sub_23BB6D640((uint64_t)v6, (uint64_t (*)(void))sub_23BB6D2FC);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23BB6D268()
{
  if (!qword_26AEBBB48)
  {
    sub_23BBDBC50();
    sub_23BB6D5F8(&qword_26AEBB9C0, MEMORY[0x263F18D80]);
    unint64_t v0 = sub_23BBDCB50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBB48);
    }
  }
}

void sub_23BB6D2FC()
{
  if (!qword_268A7DC80)
  {
    sub_23BB6D6A8(255, &qword_268A7DC88, (uint64_t (*)(uint64_t))sub_23BB6D390, MEMORY[0x263F1BAC8]);
    sub_23BB6D4D8();
    unint64_t v0 = sub_23BBDC3A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DC80);
    }
  }
}

void sub_23BB6D390()
{
  if (!qword_268A7DC90)
  {
    type metadata accessor for BedTitleView(255);
    sub_23BB6D420();
    sub_23BB6D480();
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_268A7DC90);
    }
  }
}

void sub_23BB6D420()
{
  if (!qword_268A7DC98)
  {
    type metadata accessor for ScheduleOccurrenceSectionView(255);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DC98);
    }
  }
}

void sub_23BB6D480()
{
  if (!qword_268A7DCA0)
  {
    unint64_t v0 = sub_23BBDC940();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DCA0);
    }
  }
}

unint64_t sub_23BB6D4D8()
{
  unint64_t result = qword_268A7DCA8;
  if (!qword_268A7DCA8)
  {
    sub_23BB6D6A8(255, &qword_268A7DC88, (uint64_t (*)(uint64_t))sub_23BB6D390, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DCA8);
  }
  return result;
}

void sub_23BB6D560()
{
  if (!qword_268A7DCB0)
  {
    sub_23BB6D6A8(255, &qword_268A7DC88, (uint64_t (*)(uint64_t))sub_23BB6D390, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DCB0);
    }
  }
}

uint64_t sub_23BB6D5F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB6D640(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_23BB6D6A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BB6D714(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB6D77C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB6D7E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *sub_23BB6D8BC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23BB6DBD8(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDBC50();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_23BB6DC0C(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    char v14 = (uint64_t *)((char *)a1 + v13);
    int v15 = (uint64_t *)((char *)a2 + v13);
    sub_23BB6DC40(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *char v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = *(void *)v19;
    char v21 = v19[8];
    sub_23BB631DC(*(void *)v19, v21);
    *(void *)uint64_t v18 = v20;
    v18[8] = v21;
    uint64_t v22 = a3[8];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = sub_23BBDB6B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    uint64_t v26 = *(int *)(type metadata accessor for SleepStageBarViewModel(0) + 20);
    uint64_t v27 = &v23[v26];
    char v28 = &v24[v26];
    uint64_t v29 = *((void *)v28 + 1);
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v29;
    uint64_t v30 = *((void *)v28 + 3);
    *((void *)v27 + 2) = *((void *)v28 + 2);
    *((void *)v27 + 3) = v30;
    uint64_t v31 = *((void *)v28 + 5);
    *((void *)v27 + 4) = *((void *)v28 + 4);
    *((void *)v27 + 5) = v31;
    uint64_t v32 = a3[9];
    uint64_t v33 = *(void **)((char *)a2 + v32);
    *(uint64_t *)((char *)a1 + v32) = (uint64_t)v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v34 = v33;
  }
  return a1;
}

void sub_23BB6DBD8(uint64_t a1)
{
}

void sub_23BB6DC0C(uint64_t a1)
{
}

void sub_23BB6DC40(uint64_t a1)
{
}

void sub_23BB6DC74(uint64_t a1, int *a2)
{
  sub_23BB6DBD8(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_23BBDBC50();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  sub_23BB6DC0C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + a2[6];
  sub_23BB6DC40(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC570();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(a1 + a2[7]), *(unsigned char *)(a1 + a2[7] + 8));
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = sub_23BBDB6B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  type metadata accessor for SleepStageBarViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void **)(a1 + a2[9]);
}

void *sub_23BB6DE7C(void *a1, void *a2, int *a3)
{
  sub_23BB6DBD8(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDBC50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  sub_23BB6DC0C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_23BBDC5A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  sub_23BB6DC40(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_23BBDC570();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    void *v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  char v19 = v17[8];
  sub_23BB631DC(*(void *)v17, v19);
  *(void *)uint64_t v16 = v18;
  v16[8] = v19;
  uint64_t v20 = a3[8];
  char v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = sub_23BBDB6B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = *(int *)(type metadata accessor for SleepStageBarViewModel(0) + 20);
  uint64_t v25 = &v21[v24];
  uint64_t v26 = &v22[v24];
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = v27;
  uint64_t v28 = *((void *)v26 + 3);
  *((void *)v25 + 2) = *((void *)v26 + 2);
  *((void *)v25 + 3) = v28;
  uint64_t v29 = *((void *)v26 + 5);
  *((void *)v25 + 4) = *((void *)v26 + 4);
  *((void *)v25 + 5) = v29;
  uint64_t v30 = a3[9];
  uint64_t v31 = *(void **)((char *)a2 + v30);
  *(void *)((char *)a1 + v30) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v32 = v31;
  return a1;
}

void *sub_23BB6E148(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_23BB6E4C8((uint64_t)a1, (uint64_t (*)(void))sub_23BB6DBD8);
    sub_23BB6DBD8(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_23BBDBC50();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = a3[5];
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    sub_23BB6E4C8((uint64_t)a1 + v7, (uint64_t (*)(void))sub_23BB6DC0C);
    sub_23BB6DC0C(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)((char *)a1 + v11);
    uint64_t v13 = (void *)((char *)a2 + v11);
    sub_23BB6E4C8((uint64_t)a1 + v11, (uint64_t (*)(void))sub_23BB6DC40);
    sub_23BB6DC40(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      void *v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  char v19 = v17[8];
  sub_23BB631DC(*(void *)v17, v19);
  uint64_t v20 = *(void *)v16;
  char v21 = v16[8];
  *(void *)uint64_t v16 = v18;
  v16[8] = v19;
  sub_23BB63394(v20, v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = sub_23BBDB6B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  uint64_t v26 = *(int *)(type metadata accessor for SleepStageBarViewModel(0) + 20);
  uint64_t v27 = &v23[v26];
  uint64_t v28 = &v24[v26];
  *(void *)&v23[v26] = *(void *)v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v27 + 1) = *((void *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v27 + 2) = *((void *)v28 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v27 + 3) = *((void *)v28 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v27 + 4) = *((void *)v28 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v27 + 5) = *((void *)v28 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[9];
  uint64_t v30 = *(void **)((char *)a2 + v29);
  uint64_t v31 = *(void **)((char *)a1 + v29);
  *(void *)((char *)a1 + v29) = v30;
  id v32 = v30;

  return a1;
}

uint64_t sub_23BB6E4C8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *sub_23BB6E528(char *a1, char *a2, int *a3)
{
  sub_23BB6DBD8(0);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDBC50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  sub_23BB6DC0C(0);
  uint64_t v13 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_23BBDC5A0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  sub_23BB6DC40(0);
  uint64_t v19 = v18;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_23BBDC570();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v16, v17, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  uint64_t v21 = a3[7];
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  uint64_t v27 = sub_23BBDB6B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  uint64_t v28 = *(int *)(type metadata accessor for SleepStageBarViewModel(0) + 20);
  uint64_t v29 = &v25[v28];
  uint64_t v30 = &v26[v28];
  long long v31 = *((_OWORD *)v30 + 1);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *((_OWORD *)v29 + 1) = v31;
  *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  return a1;
}

char *sub_23BB6E7BC(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_23BB6E4C8((uint64_t)a1, (uint64_t (*)(void))sub_23BB6DBD8);
    sub_23BB6DBD8(0);
    uint64_t v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_23BBDBC50();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    sub_23BB6E4C8((uint64_t)&a1[v9], (uint64_t (*)(void))sub_23BB6DC0C);
    sub_23BB6DC0C(0);
    uint64_t v13 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_23BBDC5A0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    uint64_t v15 = a3[6];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    sub_23BB6E4C8((uint64_t)&a1[v15], (uint64_t (*)(void))sub_23BB6DC40);
    sub_23BB6DC40(0);
    uint64_t v19 = v18;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = sub_23BBDC570();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v16, v17, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
  }
  uint64_t v21 = a3[7];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = *(void *)v23;
  LOBYTE(v23) = v23[8];
  uint64_t v25 = *(void *)v22;
  char v26 = v22[8];
  *(void *)uint64_t v22 = v24;
  v22[8] = (char)v23;
  sub_23BB63394(v25, v26);
  uint64_t v27 = a3[8];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = sub_23BBDB6B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 40))(v28, v29, v30);
  uint64_t v31 = *(int *)(type metadata accessor for SleepStageBarViewModel(0) + 20);
  id v32 = &v28[v31];
  uint64_t v33 = &v29[v31];
  *(void *)id v32 = *(void *)v33;
  swift_bridgeObjectRelease();
  *((void *)v32 + 1) = *((void *)v33 + 1);
  swift_bridgeObjectRelease();
  *((void *)v32 + 2) = *((void *)v33 + 2);
  swift_bridgeObjectRelease();
  *((void *)v32 + 3) = *((void *)v33 + 3);
  swift_bridgeObjectRelease();
  *((void *)v32 + 4) = *((void *)v33 + 4);
  swift_bridgeObjectRelease();
  *((void *)v32 + 5) = *((void *)v33 + 5);
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[9];
  uint64_t v35 = *(void **)&a1[v34];
  *(void *)&a1[v34] = *(void *)&a2[v34];

  return a1;
}

uint64_t sub_23BB6EB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB6EB28);
}

uint64_t sub_23BB6EB28(uint64_t a1, uint64_t a2, int *a3)
{
  sub_23BB70D10(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  sub_23BB70D10(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_9:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  sub_23BB70D10(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for SleepStageBarViewModel(0);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_9;
  }
  unint64_t v17 = *(void *)(a1 + a3[9]);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

uint64_t sub_23BB6ED64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB6ED78);
}

uint64_t sub_23BB6ED78(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_23BB70D10(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    sub_23BB70D10(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      sub_23BB70D10(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t result = type metadata accessor for SleepStageBarViewModel(0);
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(void *)(a1 + a4[9]) = (a2 - 1);
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[8];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SleepStageBarView()
{
  uint64_t result = qword_26AEBC0E0;
  if (!qword_26AEBC0E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_23BB6EFFC()
{
  sub_23BB6DBD8(319);
  if (v0 <= 0x3F)
  {
    sub_23BB6DC0C(319);
    if (v1 <= 0x3F)
    {
      sub_23BB6DC40(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for SleepStageBarViewModel(319);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_23BB6F150()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB6F16C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_23BBDBC00();
  double v5 = v4;
  uint64_t v6 = a1 + *(int *)(type metadata accessor for SleepStageBarView() + 32);
  uint64_t v7 = (long long *)(v6 + *(int *)(type metadata accessor for SleepStageBarViewModel(0) + 20));
  long long v8 = v7[2];
  long long v9 = *v7;
  v24[1] = v7[1];
  v24[2] = v8;
  v24[0] = v9;
  *(double *)&uint64_t v10 = COERCE_DOUBLE(sub_23BBAC690());
  if (v11 & 1) != 0 || (double v12 = *(double *)&v10, *(double *)&v13 = COERCE_DOUBLE(sub_23BBAC734()), (v14))
  {
    sub_23BB70C5C(0, &qword_268A7DCC8, (uint64_t (*)(uint64_t))sub_23BB709D0, sub_23BB70F44, MEMORY[0x263F1B6D0]);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    uint64_t v19 = v22;
    uint64_t v20 = a2;
    uint64_t v21 = 1;
  }
  else
  {
    double v15 = *(double *)&v13;
    *(void *)a2 = sub_23BBDBE60();
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    sub_23BB70F78();
    sub_23BB6F368(a1, v24, (void *)(a2 + *(int *)(v16 + 44)), v5, v12, v15);
    sub_23BB70C5C(0, &qword_268A7DCC8, (uint64_t (*)(uint64_t))sub_23BB709D0, sub_23BB70F44, MEMORY[0x263F1B6D0]);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v19 = v17;
    uint64_t v20 = a2;
    uint64_t v21 = 0;
  }
  return v18(v20, v21, 1, v19);
}

uint64_t sub_23BB6F368@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v90 = a2;
  uint64_t v85 = a3;
  sub_23BB6D268();
  v78[1] = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v92 = (char *)v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB70B44();
  uint64_t v82 = v12;
  uint64_t v81 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v80 = (char *)v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB70AB8();
  uint64_t v79 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v84 = (char *)v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v83 = (uint64_t)v78 - v17;
  uint64_t v18 = type metadata accessor for BarView(0);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (void *)((char *)v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v19);
  uint64_t v93 = (uint64_t)v78 - v22;
  uint64_t v23 = sub_23BBDC5A0();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v88 = (char *)v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v94 = (char *)v78 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)v78 - v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)v78 - v32;
  uint64_t v34 = type metadata accessor for SleepStageBarView();
  sub_23BB77A10((uint64_t)v33);
  uint64_t v35 = *(int *)(v34 + 28);
  uint64_t v91 = a1;
  uint64_t v36 = a1 + v35;
  uint64_t v37 = *(void *)v36;
  LOBYTE(a1) = *(unsigned char *)(v36 + 8);
  sub_23BB631DC(*(void *)v36, a1);
  char v38 = sub_23BB77FBC(v37, a1);
  sub_23BB63394(v37, a1);
  long long v87 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v87(v31, v33, v23);
  unsigned __int8 v86 = *(uint64_t (**)(char *, uint64_t))(v24 + 88);
  int v39 = v86(v31, v23);
  unsigned int v89 = *MEMORY[0x263F1FD08];
  if (v39 != v89)
  {
    if (qword_268A7D9E0 != -1) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if (v38) {
    double v40 = 24.0;
  }
  else {
    double v40 = 16.0;
  }
  char v41 = *(void (**)(char *, uint64_t))(v24 + 8);
  v41(v33, v23);
  while (1)
  {
    *uint64_t v21 = swift_getKeyPath();
    sub_23BB6DC0C(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = (uint64_t *)((char *)v21 + *(int *)(v18 + 20));
    *uint64_t v43 = swift_getKeyPath();
    sub_23BB6DC40(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = (char *)v21 + *(int *)(v18 + 24);
    *(void *)uint64_t v44 = swift_getKeyPath();
    v44[8] = 0;
    uint64_t v45 = (_OWORD *)((char *)v21 + *(int *)(v18 + 28));
    uint64_t v46 = (uint64_t)v90;
    long long v47 = v90[1];
    _OWORD *v45 = *v90;
    v45[1] = v47;
    v45[2] = *(_OWORD *)(v46 + 32);
    uint64_t v48 = (double *)((char *)v21 + *(int *)(v18 + 32));
    *uint64_t v48 = v40;
    v48[1] = a4;
    *((unsigned char *)v48 + 16) = 0;
    uint64_t v49 = (double *)((char *)v21 + *(int *)(v18 + 36));
    *uint64_t v49 = a5;
    v49[1] = a6;
    uint64_t v24 = 1;
    *((unsigned char *)v21 + *(int *)(v18 + 40)) = 1;
    sub_23BB71090((uint64_t)v21, v93, type metadata accessor for BarView);
    sub_23BB71008(v46);
    uint64_t v50 = (uint64_t)v94;
    sub_23BB77A10((uint64_t)v94);
    uint64_t v51 = v88;
    v87(v88, (char *)v50, v23);
    uint64_t v33 = (char *)v86(v51, v23);
    uint64_t v18 = v89;
    if (v33 != v89) {
      v41(v51, v23);
    }
    v41(v94, v23);
    uint64_t v52 = sub_23BBDBE20();
    sub_23BB6FCEC(v91, (uint64_t *)&v95);
    char v53 = v96;
    long long v54 = v97;
    char v55 = v98;
    char v56 = v100;
    uint64_t v57 = v101;
    long long v58 = v95;
    long long v59 = v99;
    long long v95 = (unint64_t)v52;
    char v96 = 1;
    long long v97 = v58;
    char v98 = v53;
    long long v99 = v54;
    char v100 = v55;
    long long v101 = v59;
    char v102 = v56;
    uint64_t v103 = v57;
    uint64_t v60 = *MEMORY[0x263F18D60];
    uint64_t v31 = (char *)sub_23BBDBC50();
    uint64_t v23 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, char *))(*((void *)v31 - 1) + 104))(v92, v60, v31);
    sub_23BB70E14(&qword_26AEBB9C8, MEMORY[0x263F18D80]);
    if (sub_23BBDC6C0()) {
      break;
    }
    __break(1u);
LABEL_13:
    swift_once();
LABEL_7:
    double v40 = *(double *)&qword_268A7DCC0;
    uint64_t v42 = v31;
    char v41 = *(void (**)(char *, uint64_t))(v24 + 8);
    v41(v42, v23);
    v41(v33, v23);
  }
  BOOL v61 = v33 != v18;
  sub_23BB70C5C(0, &qword_268A7DCF0, (uint64_t (*)(uint64_t))sub_23BB70CDC, sub_23BB70DE0, MEMORY[0x263F1B640]);
  sub_23BB70E5C();
  sub_23BB70E14(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
  long long v62 = v80;
  sub_23BBDC240();
  sub_23BB6E4C8(v23, (uint64_t (*)(void))sub_23BB6D268);
  long long v63 = v101;
  char v64 = v102;
  sub_23BB71078(v97, *((uint64_t *)&v97 + 1), v98);
  swift_bridgeObjectRelease();
  sub_23BB71078(v63, *((uint64_t *)&v63 + 1), v64);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v66 = v81;
  uint64_t v67 = (uint64_t)v84;
  uint64_t v68 = v82;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v84, v62, v82);
  uint64_t v69 = (uint64_t *)(v67 + *(int *)(v79 + 36));
  *uint64_t v69 = KeyPath;
  v69[1] = 0x3FE7AE147AE147AELL;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v62, v68);
  uint64_t v70 = v83;
  sub_23BB71090(v67, v83, (uint64_t (*)(void))sub_23BB70AB8);
  uint64_t v71 = v93;
  sub_23BB710F8(v93, (uint64_t)v21, type metadata accessor for BarView);
  sub_23BB710F8(v70, v67, (uint64_t (*)(void))sub_23BB70AB8);
  uint64_t v72 = v85;
  void *v85 = 0;
  *((unsigned char *)v72 + 8) = 0;
  sub_23BB70A04();
  uint64_t v74 = v73;
  sub_23BB710F8((uint64_t)v21, (uint64_t)v72 + v73[12], type metadata accessor for BarView);
  uint64_t v75 = (char *)v72 + v74[16];
  *(void *)uint64_t v75 = 0;
  v75[8] = 0;
  v75[9] = v61;
  sub_23BB710F8(v67, (uint64_t)v72 + v74[20], (uint64_t (*)(void))sub_23BB70AB8);
  uint64_t v76 = (char *)v72 + v74[24];
  *(void *)uint64_t v76 = 0;
  v76[8] = 0;
  sub_23BB6E4C8(v70, (uint64_t (*)(void))sub_23BB70AB8);
  sub_23BB6E4C8(v71, type metadata accessor for BarView);
  sub_23BB6E4C8(v67, (uint64_t (*)(void))sub_23BB70AB8);
  return sub_23BB6E4C8((uint64_t)v21, type metadata accessor for BarView);
}

uint64_t sub_23BB6FCEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v122 = a2;
  uint64_t v124 = sub_23BBDC570();
  uint64_t v126 = *(void *)(v124 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v124);
  uint64_t v121 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v120 = (char *)&v100 - v6;
  MEMORY[0x270FA5388](v5);
  v123 = (uint64_t *)((char *)&v100 - v7);
  uint64_t v8 = sub_23BBDC5A0();
  uint64_t v127 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v119 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v125 = (uint64_t)&v100 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v100 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v100 - v16;
  uint64_t v18 = sub_23BBDB860();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (int *)type metadata accessor for SleepStageBarView();
  uint64_t v23 = v22[8];
  uint64_t v112 = v22[9];
  uint64_t v24 = *(void **)(a1 + v112);
  uint64_t v111 = a1 + v23;
  sub_23BBDB690();
  uint64_t v25 = (void *)sub_23BBDB820();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v116 = v19 + 8;
  uint64_t v117 = v18;
  uint64_t v110 = v26;
  v26(v21, v18);
  uint64_t v27 = (uint64_t)v17;
  uint64_t v28 = v15;
  uint64_t v29 = v127;
  id v30 = objc_msgSend(v24, sel_stringFromDate_, v25);

  uint64_t v31 = sub_23BBDC6E0();
  uint64_t v33 = v32;

  uint64_t v129 = v31;
  uint64_t v130 = v33;
  unint64_t v109 = sub_23BB570F4();
  uint64_t v34 = sub_23BBDC170();
  uint64_t v114 = v35;
  LODWORD(v113) = v36;
  uint64_t v115 = v37;
  uint64_t v108 = a1 + v22[5];
  sub_23BB77A10(v27);
  uint64_t v38 = v22[6];
  int v39 = (void (*)(void, void))v123;
  uint64_t v118 = a1;
  uint64_t v107 = a1 + v38;
  sub_23BB77CD4((uint64_t)v123);
  double v40 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v106 = v29 + 16;
  v105 = v40;
  v40(v28, v27, v8);
  char v41 = *(uint64_t (**)(char *, uint64_t))(v29 + 88);
  uint64_t v128 = v8;
  v104 = v41;
  uint64_t v100 = v29 + 88;
  int v42 = v41(v28, v8);
  int v103 = *MEMORY[0x263F1FCD8];
  if (v42 == v103)
  {
    uint64_t v43 = v120;
    sub_23BBDC550();
    char v44 = sub_23BBDC540();
    uint64_t v45 = v126;
    uint64_t v46 = v43;
    uint64_t v47 = v124;
    (*(void (**)(char *, uint64_t))(v126 + 8))(v46, v124);
    if ((v44 & 1) == 0)
    {
      sub_23BBDC280();
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  uint64_t v47 = v124;
  uint64_t v45 = v126;
  if (v42 == *MEMORY[0x263F1FD08])
  {
LABEL_5:
    sub_23BBDC2B0();
    goto LABEL_7;
  }
  sub_23BBDC280();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v128);
LABEL_7:
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  uint64_t v126 = v45 + 8;
  char v102 = v48;
  v48((uint64_t)v39, v47);
  uint64_t v49 = *(uint64_t **)(v29 + 8);
  uint64_t v127 = v29 + 8;
  v123 = v49;
  ((void (*)(uint64_t, uint64_t))v49)(v27, v128);
  char v50 = v113 & 1;
  uint64_t v51 = v114;
  uint64_t v52 = sub_23BBDC140();
  uint64_t v54 = v53;
  char v56 = v55;
  swift_release();
  sub_23BB71078(v34, v51, v50);
  swift_bridgeObjectRelease();
  sub_23BBDC020();
  uint64_t v114 = sub_23BBDC150();
  uint64_t v113 = v57;
  int v101 = v58;
  uint64_t v115 = v59;
  swift_release();
  sub_23BB71078(v52, v54, v56 & 1);
  swift_bridgeObjectRelease();
  uint64_t v60 = *(void **)(v118 + v112);
  sub_23BBDB670();
  BOOL v61 = (void *)sub_23BBDB820();
  v110(v21, v117);
  id v62 = objc_msgSend(v60, sel_stringFromDate_, v61);

  uint64_t v63 = sub_23BBDC6E0();
  uint64_t v65 = v64;

  uint64_t v129 = v63;
  uint64_t v130 = v65;
  uint64_t v66 = sub_23BBDC170();
  uint64_t v68 = v67;
  char v70 = v69;
  uint64_t v71 = v125;
  sub_23BB77A10(v125);
  uint64_t v72 = v121;
  sub_23BB77CD4(v121);
  uint64_t v73 = v119;
  uint64_t v74 = v128;
  v105(v119, v71, v128);
  int v75 = v104(v73, v74);
  if (v75 != v103)
  {
    uint64_t v80 = v102;
    uint64_t v79 = v124;
    if (v75 != *MEMORY[0x263F1FD08])
    {
      sub_23BBDC280();
      ((void (*)(char *, uint64_t))v123)(v73, v128);
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v76 = v120;
  sub_23BBDC550();
  char v77 = sub_23BBDC540();
  uint64_t v78 = v76;
  uint64_t v79 = v124;
  uint64_t v80 = v102;
  ((void (*)(char *))v102)(v78);
  if (v77)
  {
LABEL_11:
    sub_23BBDC2B0();
    goto LABEL_13;
  }
  sub_23BBDC280();
LABEL_13:
  char v81 = v101 & 1;
  v80(v72, v79);
  ((void (*)(uint64_t, uint64_t))v123)(v125, v128);
  uint64_t v82 = sub_23BBDC140();
  uint64_t v84 = v83;
  char v86 = v85;
  swift_release();
  char v87 = v86 & 1;
  sub_23BB71078(v66, v68, v70 & 1);
  swift_bridgeObjectRelease();
  sub_23BBDC020();
  uint64_t v88 = sub_23BBDC150();
  uint64_t v90 = v89;
  char v92 = v91;
  uint64_t v94 = v93;
  swift_release();
  sub_23BB71078(v82, v84, v87);
  swift_bridgeObjectRelease();
  LOBYTE(v129) = v81;
  long long v95 = v122;
  uint64_t v97 = v114;
  uint64_t v96 = v115;
  uint64_t v98 = v113;
  uint64_t *v122 = v114;
  v95[1] = v98;
  *((unsigned char *)v95 + 16) = v81;
  v95[3] = v96;
  v95[4] = 0x3FE0000000000000;
  *((unsigned char *)v95 + 40) = 0;
  v95[6] = v88;
  v95[7] = v90;
  *((unsigned char *)v95 + 64) = v92 & 1;
  v95[9] = v94;
  sub_23BB71160(v97, v98, v81);
  swift_bridgeObjectRetain();
  sub_23BB71160(v88, v90, v92 & 1);
  swift_bridgeObjectRetain();
  sub_23BB71078(v88, v90, v92 & 1);
  swift_bridgeObjectRelease();
  sub_23BB71078(v97, v98, v129);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BB705C0@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](a1 - 8);
  sub_23BB710F8(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SleepStageBarView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_23BB71090((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, (uint64_t (*)(void))type metadata accessor for SleepStageBarView);
  *a2 = sub_23BB70950;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v7;
  return result;
}

uint64_t sub_23BB706C8()
{
  unint64_t v1 = (int *)type metadata accessor for SleepStageBarView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  sub_23BB6DBD8(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDBC50();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v5 + v1[5];
  sub_23BB6DC0C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v5 + v1[6];
  sub_23BB6DC40(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_23BBDC570();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v2 | 7;
  uint64_t v12 = v3 + v4;
  sub_23BB63394(*(void *)(v5 + v1[7]), *(unsigned char *)(v5 + v1[7] + 8));
  uint64_t v13 = v5 + v1[8];
  uint64_t v14 = sub_23BBDB6B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  type metadata accessor for SleepStageBarViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v12, v11);
}

uint64_t sub_23BB70950@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SleepStageBarView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_23BB6F16C(v4, a1);
}

void sub_23BB709D0(uint64_t a1)
{
}

void sub_23BB70A04()
{
  if (!qword_268A7DCD8)
  {
    uint64_t v0 = MEMORY[0x263F1B6B0];
    type metadata accessor for BarView(255);
    sub_23BB70EF8(255, (unint64_t *)&qword_268A7DCA0, v0, MEMORY[0x263F8D8F0]);
    sub_23BB70AB8();
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v2) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_268A7DCD8);
    }
  }
}

void sub_23BB70AB8()
{
  if (!qword_268A7DCE0)
  {
    sub_23BB70B44();
    sub_23BB70EF8(255, (unint64_t *)&qword_26AEBBA28, MEMORY[0x263F8EF38], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DCE0);
    }
  }
}

void sub_23BB70B44()
{
  if (!qword_268A7DCE8)
  {
    sub_23BB70C5C(255, &qword_268A7DCF0, (uint64_t (*)(uint64_t))sub_23BB70CDC, sub_23BB70DE0, MEMORY[0x263F1B640]);
    sub_23BB6D268();
    sub_23BB70E5C();
    sub_23BB70E14(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7DCE8);
    }
  }
}

void sub_23BB70C5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_23BB70CDC(uint64_t a1)
{
}

void sub_23BB70D10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_23BB70D74()
{
  if (!qword_268A7DD00)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_268A7DD00);
    }
  }
}

uint64_t sub_23BB70DE0()
{
  return sub_23BB70E14(&qword_268A7DD08, sub_23BB70CDC);
}

uint64_t sub_23BB70E14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BB70E5C()
{
  unint64_t result = qword_268A7DD10;
  if (!qword_268A7DD10)
  {
    sub_23BB70C5C(255, &qword_268A7DCF0, (uint64_t (*)(uint64_t))sub_23BB70CDC, sub_23BB70DE0, MEMORY[0x263F1B640]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DD10);
  }
  return result;
}

void sub_23BB70EF8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_23BB70F44()
{
  return sub_23BB70E14(&qword_268A7DD18, sub_23BB709D0);
}

void sub_23BB70F78()
{
  if (!qword_268A7DD20)
  {
    sub_23BB709D0(255);
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DD20);
    }
  }
}

void sub_23BB70FE0()
{
  qword_268A7DCC0 = 0x403E000000000000;
}

uint64_t sub_23BB71008(uint64_t a1)
{
  return a1;
}

uint64_t sub_23BB71078(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_23BB71090(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB710F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB71160(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

unint64_t sub_23BB71174()
{
  unint64_t result = qword_268A7DD28;
  if (!qword_268A7DD28)
  {
    sub_23BB70C5C(255, &qword_268A7DD30, (uint64_t (*)(uint64_t))sub_23BB71210, (uint64_t (*)(void))sub_23BB712AC, MEMORY[0x263F18A88]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DD28);
  }
  return result;
}

void sub_23BB71210()
{
  if (!qword_268A7DD38)
  {
    sub_23BB70C5C(255, &qword_268A7DCC8, (uint64_t (*)(uint64_t))sub_23BB709D0, sub_23BB70F44, MEMORY[0x263F1B6D0]);
    unint64_t v0 = sub_23BBDC940();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DD38);
    }
  }
}

unint64_t sub_23BB712AC()
{
  unint64_t result = qword_268A7DD40;
  if (!qword_268A7DD40)
  {
    sub_23BB71210();
    sub_23BB7131C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DD40);
  }
  return result;
}

unint64_t sub_23BB7131C()
{
  unint64_t result = qword_268A7DD48;
  if (!qword_268A7DD48)
  {
    sub_23BB70C5C(255, &qword_268A7DCC8, (uint64_t (*)(uint64_t))sub_23BB709D0, sub_23BB70F44, MEMORY[0x263F1B6D0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DD48);
  }
  return result;
}

uint64_t sub_23BB713B8()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t _s8SentinelCMa()
{
  return self;
}

id sub_23BB713EC()
{
  _s8SentinelCMa();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  qword_26AEBDCF0 = (uint64_t)result;
  return result;
}

unint64_t sub_23BB71444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v21 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_23BB631DC(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v56 = a1;
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    *(void *)uint64_t v10 = *(void *)(a2 + v9);
    *(unsigned char *)(v10 + 8) = *(unsigned char *)(a2 + v9 + 8);
    uint64_t v12 = (int *)type metadata accessor for SleepWidgetViewModel();
    uint64_t v13 = v12[5];
    uint64_t v14 = (void *)(v10 + v13);
    uint64_t v15 = (const void *)(v11 + v13);
    uint64_t v16 = sub_23BBDB6D0();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
    if (v18(v15, 1, v16))
    {
      sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v22 = v12[6];
    uint64_t v23 = (void *)(v10 + v22);
    uint64_t v24 = (const void *)(v11 + v22);
    if (v18((const void *)(v11 + v22), 1, v16))
    {
      sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v23, v24, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v23, 0, 1, v16);
    }
    *(unsigned char *)(v10 + v12[7]) = *(unsigned char *)(v11 + v12[7]);
    uint64_t v26 = v12[8];
    uint64_t v27 = v10 + v26;
    uint64_t v28 = v11 + v26;
    uint64_t v29 = sub_23BBDB860();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v57(v27, v28, v29);
    uint64_t v31 = v12[9];
    uint64_t v32 = *(void **)(v11 + v31);
    *(void *)(v10 + v31) = v32;
    uint64_t v33 = v12[10];
    uint64_t v34 = (void *)(v10 + v33);
    uint64_t v35 = v11 + v33;
    uint64_t v36 = *(void *)(v11 + v33);
    id v37 = v32;
    if (v36)
    {
      int v39 = *(void **)(v35 + 8);
      uint64_t v38 = *(void **)(v35 + 16);
      *uint64_t v34 = v36;
      v34[1] = v39;
      v34[2] = v38;
      swift_bridgeObjectRetain();
      id v40 = v39;
      id v41 = v38;
    }
    else
    {
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
      v34[2] = *(void *)(v35 + 16);
    }
    uint64_t v42 = v12[11];
    uint64_t v43 = (void *)(v10 + v42);
    char v44 = (const void *)(v11 + v42);
    uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
    if (v45(v11 + v42, 1, v29))
    {
      sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v43, v44, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      v57((uint64_t)v43, (uint64_t)v44, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v43, 0, 1, v29);
    }
    uint64_t v47 = v12[12];
    uint64_t v48 = (void *)(v10 + v47);
    uint64_t v49 = (const void *)(v11 + v47);
    if (v45(v11 + v47, 1, v29))
    {
      sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      v57((uint64_t)v48, (uint64_t)v49, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v48, 0, 1, v29);
    }
    uint64_t v51 = v12[13];
    uint64_t v52 = (void *)(v10 + v51);
    uint64_t v53 = (const void *)(v11 + v51);
    if (v45(v11 + v51, 1, v29))
    {
      sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      v57((uint64_t)v52, (uint64_t)v53, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v52, 0, 1, v29);
    }
    return v56;
  }
  return v21;
}

uint64_t sub_23BB71A18(uint64_t a1, uint64_t a2)
{
  sub_23BB63394(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  int v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v4 + v5[5];
  uint64_t v7 = sub_23BBDB6D0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v5[6];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v11 = v4 + v5[8];
  uint64_t v12 = sub_23BBDB860();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v20(v11, v12);

  uint64_t v14 = v4 + v5[10];
  if (*(void *)v14)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = v4 + v5[11];
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v16(v15, 1, v12)) {
    v20(v15, v12);
  }
  uint64_t v17 = v4 + v5[12];
  if (!v16(v17, 1, v12)) {
    v20(v17, v12);
  }
  uint64_t v18 = v4 + v5[13];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(v18, 1, v12);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v20)(v18, v12);
  }
  return result;
}

uint64_t sub_23BB71CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_23BB631DC(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v53 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)(a2 + v8);
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(a2 + v8 + 8);
  uint64_t v11 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(v9 + v12);
  uint64_t v14 = (const void *)(v10 + v12);
  uint64_t v15 = sub_23BBDB6D0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = v11[6];
  uint64_t v20 = (void *)(v9 + v19);
  unint64_t v21 = (const void *)(v10 + v19);
  if (v17((const void *)(v10 + v19), 1, v15))
  {
    sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v20, v21, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v15);
  }
  *(unsigned char *)(v9 + v11[7]) = *(unsigned char *)(v10 + v11[7]);
  uint64_t v23 = v11[8];
  uint64_t v24 = (void *)(v9 + v23);
  uint64_t v25 = (const void *)(v10 + v23);
  uint64_t v26 = sub_23BBDB860();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v54 = *(void (**)(void *, const void *, uint64_t))(v27 + 16);
  v54(v24, v25, v26);
  uint64_t v28 = v11[9];
  uint64_t v29 = *(void **)(v10 + v28);
  *(void *)(v9 + v28) = v29;
  uint64_t v30 = v11[10];
  uint64_t v31 = (void *)(v9 + v30);
  uint64_t v32 = v10 + v30;
  uint64_t v33 = *(void *)(v10 + v30);
  id v34 = v29;
  if (v33)
  {
    uint64_t v36 = *(void **)(v32 + 8);
    uint64_t v35 = *(void **)(v32 + 16);
    void *v31 = v33;
    v31[1] = v36;
    v31[2] = v35;
    swift_bridgeObjectRetain();
    id v37 = v36;
    id v38 = v35;
  }
  else
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    v31[2] = *(void *)(v32 + 16);
  }
  uint64_t v39 = v11[11];
  id v40 = (void *)(v9 + v39);
  id v41 = (const void *)(v10 + v39);
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v42(v10 + v39, 1, v26))
  {
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    v54(v40, v41, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v40, 0, 1, v26);
  }
  uint64_t v44 = v11[12];
  uint64_t v45 = (void *)(v9 + v44);
  uint64_t v46 = (const void *)(v10 + v44);
  if (v42(v10 + v44, 1, v26))
  {
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    v54(v45, v46, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v45, 0, 1, v26);
  }
  uint64_t v48 = v11[13];
  uint64_t v49 = (void *)(v9 + v48);
  uint64_t v50 = (const void *)(v10 + v48);
  if (v42(v10 + v48, 1, v26))
  {
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    v54(v49, v50, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v49, 0, 1, v26);
  }
  return v53;
}

uint64_t sub_23BB7223C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_23BB631DC(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_23BB63394(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v76 = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)(a2 + v10);
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)uint64_t v11 = v13;
  uint64_t v14 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v15 = v14[5];
  uint64_t v16 = (void *)(v11 + v15);
  uint64_t v17 = (void *)(v12 + v15);
  uint64_t v18 = sub_23BBDB6D0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  uint64_t v24 = v14[6];
  uint64_t v25 = (void *)(v11 + v24);
  uint64_t v26 = (void *)(v12 + v24);
  int v27 = v20((void *)(v11 + v24), 1, v18);
  int v28 = v20(v26, 1, v18);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  *(unsigned char *)(v11 + v14[7]) = *(unsigned char *)(v12 + v14[7]);
  uint64_t v30 = v14[8];
  uint64_t v31 = v11 + v30;
  uint64_t v32 = v12 + v30;
  uint64_t v33 = sub_23BBDB860();
  uint64_t v34 = *(void *)(v33 - 8);
  int v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 24);
  v75(v31, v32, v33);
  uint64_t v35 = v14[9];
  uint64_t v36 = *(void **)(v12 + v35);
  id v37 = *(void **)(v11 + v35);
  *(void *)(v11 + v35) = v36;
  id v38 = v36;

  uint64_t v39 = v14[10];
  id v40 = (void *)(v11 + v39);
  id v41 = (long long *)(v12 + v39);
  uint64_t v42 = *(void *)(v12 + v39);
  if (*(void *)(v11 + v39))
  {
    if (v42)
    {
      void *v40 = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = (void *)v40[1];
      uint64_t v44 = (void *)*((void *)v41 + 1);
      v40[1] = v44;
      id v45 = v44;

      uint64_t v46 = (void *)v40[2];
      uint64_t v47 = (void *)*((void *)v41 + 2);
      v40[2] = v47;
      id v48 = v47;
    }
    else
    {
      sub_23BB547F0(v11 + v39);
      uint64_t v53 = *((void *)v41 + 2);
      *(_OWORD *)id v40 = *v41;
      v40[2] = v53;
    }
  }
  else if (v42)
  {
    void *v40 = v42;
    uint64_t v49 = (void *)*((void *)v41 + 1);
    v40[1] = v49;
    uint64_t v50 = (void *)*((void *)v41 + 2);
    v40[2] = v50;
    swift_bridgeObjectRetain();
    id v51 = v49;
    id v52 = v50;
  }
  else
  {
    long long v54 = *v41;
    v40[2] = *((void *)v41 + 2);
    *(_OWORD *)id v40 = v54;
  }
  uint64_t v55 = v14[11];
  uint64_t v56 = (void *)(v11 + v55);
  uint64_t v57 = (const void *)(v12 + v55);
  int v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  int v59 = v58(v11 + v55, 1, v33);
  int v60 = v58((uint64_t)v57, 1, v33);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v56, v57, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v56, 0, 1, v33);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v60)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v56, v33);
LABEL_27:
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_28;
  }
  v75((uint64_t)v56, (uint64_t)v57, v33);
LABEL_28:
  uint64_t v62 = v14[12];
  uint64_t v63 = (void *)(v11 + v62);
  uint64_t v64 = (const void *)(v12 + v62);
  int v65 = v58(v11 + v62, 1, v33);
  int v66 = v58((uint64_t)v64, 1, v33);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v63, v64, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v63, 0, 1, v33);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v63, v33);
LABEL_33:
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_34;
  }
  v75((uint64_t)v63, (uint64_t)v64, v33);
LABEL_34:
  uint64_t v68 = v14[13];
  char v69 = (void *)(v11 + v68);
  char v70 = (const void *)(v12 + v68);
  int v71 = v58(v11 + v68, 1, v33);
  int v72 = v58((uint64_t)v70, 1, v33);
  if (!v71)
  {
    if (!v72)
    {
      v75((uint64_t)v69, (uint64_t)v70, v33);
      return v76;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v69, v33);
    goto LABEL_39;
  }
  if (v72)
  {
LABEL_39:
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
    return v76;
  }
  (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v69, v70, v33);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v69, 0, 1, v33);
  return v76;
}

uint64_t sub_23BB72A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = a2 + v3;
  *(void *)uint64_t v4 = *(void *)(a2 + v3);
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(a2 + v3 + 8);
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = v6[5];
  uint64_t v8 = (void *)(v4 + v7);
  char v9 = (const void *)(v5 + v7);
  uint64_t v10 = sub_23BBDB6D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = v6[6];
  uint64_t v15 = (void *)(v4 + v14);
  uint64_t v16 = (const void *)(v5 + v14);
  if (v12((const void *)(v5 + v14), 1, v10))
  {
    sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  *(unsigned char *)(v4 + v6[7]) = *(unsigned char *)(v5 + v6[7]);
  uint64_t v18 = v6[8];
  uint64_t v19 = (void *)(v4 + v18);
  uint64_t v20 = (const void *)(v5 + v18);
  uint64_t v21 = sub_23BBDB860();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(void *, const void *, uint64_t))(v22 + 32);
  v23(v19, v20, v21);
  *(void *)(v4 + v6[9]) = *(void *)(v5 + v6[9]);
  uint64_t v24 = v6[10];
  uint64_t v25 = v4 + v24;
  uint64_t v26 = v5 + v24;
  *(void *)(v25 + 16) = *(void *)(v26 + 16);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  uint64_t v27 = v6[11];
  int v28 = (void *)(v4 + v27);
  uint64_t v29 = (const void *)(v5 + v27);
  id v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v41(v5 + v27, 1, v21))
  {
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v23(v28, v29, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
  }
  uint64_t v31 = v6[12];
  uint64_t v32 = (void *)(v4 + v31);
  uint64_t v33 = (const void *)(v5 + v31);
  if (v41(v5 + v31, 1, v21))
  {
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
    uint64_t v35 = v22;
  }
  else
  {
    v23(v32, v33, v21);
    uint64_t v35 = v22;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v32, 0, 1, v21);
  }
  uint64_t v36 = v6[13];
  id v37 = (void *)(v4 + v36);
  id v38 = (const void *)(v5 + v36);
  if (v41(v5 + v36, 1, v21))
  {
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    v23(v37, v38, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v21);
  }
  return a1;
}

uint64_t sub_23BB72F5C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_23BB63394(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v62 = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  *(void *)uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
  *(unsigned char *)(v11 + 8) = *((unsigned char *)a2 + v10 + 8);
  uint64_t v13 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v14 = v13[5];
  uint64_t v15 = (void *)(v11 + v14);
  uint64_t v16 = (void *)(v12 + v14);
  uint64_t v17 = sub_23BBDB6D0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[6];
  uint64_t v24 = (void *)(v11 + v23);
  uint64_t v25 = (void *)(v12 + v23);
  int v26 = v19((void *)(v11 + v23), 1, v17);
  int v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_23BB740B8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  *(unsigned char *)(v11 + v13[7]) = *(unsigned char *)(v12 + v13[7]);
  uint64_t v29 = v13[8];
  uint64_t v30 = v11 + v29;
  uint64_t v31 = v12 + v29;
  uint64_t v32 = sub_23BBDB860();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 40);
  v61(v30, v31, v32);
  uint64_t v34 = v13[9];
  uint64_t v35 = *(void **)(v11 + v34);
  *(void *)(v11 + v34) = *(void *)(v12 + v34);

  uint64_t v36 = v13[10];
  id v37 = (void *)(v11 + v36);
  id v38 = (void *)(v12 + v36);
  if (*(void *)(v11 + v36))
  {
    if (*v38)
    {
      *id v37 = *v38;
      swift_bridgeObjectRelease();
      uint64_t v39 = (void *)v37[1];
      v37[1] = v38[1];

      id v40 = (void *)v37[2];
      v37[2] = v38[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v37);
  }
  *(_OWORD *)id v37 = *(_OWORD *)v38;
  v37[2] = v38[2];
LABEL_18:
  uint64_t v41 = v13[11];
  uint64_t v42 = (void *)(v11 + v41);
  uint64_t v43 = (const void *)(v12 + v41);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  int v45 = v44(v11 + v41, 1, v32);
  int v46 = v44((uint64_t)v43, 1, v32);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v42, v43, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v42, 0, 1, v32);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v42, v32);
LABEL_23:
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_24;
  }
  v61((uint64_t)v42, (uint64_t)v43, v32);
LABEL_24:
  uint64_t v48 = v13[12];
  uint64_t v49 = (void *)(v11 + v48);
  uint64_t v50 = (const void *)(v12 + v48);
  int v51 = v44(v11 + v48, 1, v32);
  int v52 = v44((uint64_t)v50, 1, v32);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v49, v50, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v49, 0, 1, v32);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v49, v32);
LABEL_29:
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_30;
  }
  v61((uint64_t)v49, (uint64_t)v50, v32);
LABEL_30:
  uint64_t v54 = v13[13];
  uint64_t v55 = (void *)(v11 + v54);
  uint64_t v56 = (const void *)(v12 + v54);
  int v57 = v44(v11 + v54, 1, v32);
  int v58 = v44((uint64_t)v56, 1, v32);
  if (!v57)
  {
    if (!v58)
    {
      v61((uint64_t)v55, (uint64_t)v56, v32);
      return v62;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v55, v32);
    goto LABEL_35;
  }
  if (v58)
  {
LABEL_35:
    sub_23BB740B8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    return v62;
  }
  (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v55, v56, v32);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v55, 0, 1, v32);
  return v62;
}

uint64_t sub_23BB736E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB736F4);
}

uint64_t sub_23BB736F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for SleepWidgetViewModel();
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_23BB7379C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB737B0);
}

uint64_t sub_23BB737B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for SleepWidgetViewModel();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SleepWidgetSmallView()
{
  uint64_t result = qword_26AEBC930;
  if (!qword_26AEBC930) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BB738A0()
{
  uint64_t result = type metadata accessor for SleepWidgetViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23BB73938(uint64_t a1)
{
  uint64_t result = sub_23BB739E8(&qword_26AEBC928, (void (*)(uint64_t))type metadata accessor for SleepWidgetSmallView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BB73990(uint64_t a1)
{
  uint64_t result = sub_23BB739E8(&qword_268A7DD50, (void (*)(uint64_t))type metadata accessor for SleepWidgetSmallView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BB739E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB73A30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB73A4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v2 = sub_23BBDBF40();
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v42 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB73E7C(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v40 - v8;
  sub_23BB73F90();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB7420C();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB7426C();
  uint64_t v41 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  int v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v12 = sub_23BBDBE60();
  *((void *)v12 + 1) = 0;
  v12[16] = 0;
  sub_23BB743AC();
  uint64_t v22 = &v12[*(int *)(v21 + 44)];
  *(void *)uint64_t v22 = sub_23BBDBE10();
  *((void *)v22 + 1) = 0;
  v22[16] = 0;
  sub_23BB74414();
  uint64_t v24 = (uint64_t)&v22[*(int *)(v23 + 44)];
  sub_23BBB0754((uint64_t)v9);
  sub_23BB744AC((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(void))sub_23BB73E7C);
  sub_23BB744AC((uint64_t)v7, v24, (uint64_t (*)(void))sub_23BB73E7C);
  sub_23BB7411C();
  uint64_t v26 = v24 + *(int *)(v25 + 48);
  *(void *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 8) = 0;
  sub_23BB74514((uint64_t)v9, (uint64_t (*)(void))sub_23BB73E7C);
  sub_23BB74514((uint64_t)v7, (uint64_t (*)(void))sub_23BB73E7C);
  LOBYTE(v9) = sub_23BBDBFB0();
  uint64_t v27 = *(void *)v1;
  char v28 = *(unsigned char *)(v1 + 8);
  sub_23BB631DC(v27, v28);
  sub_23BB77FBC(v27, v28);
  sub_23BB63394(v27, v28);
  sub_23BBDBBB0();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  sub_23BB744AC((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(void))sub_23BB73F90);
  id v37 = &v16[*(int *)(v14 + 36)];
  *id v37 = (char)v9;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  sub_23BB74514((uint64_t)v12, (uint64_t (*)(void))sub_23BB73F90);
  id v38 = v42;
  sub_23BBDBF30();
  sub_23BB74304();
  sub_23BBDC250();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v44);
  sub_23BB74514((uint64_t)v16, (uint64_t (*)(void))sub_23BB7420C);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v45, v20, v41);
}

void sub_23BB73E7C(uint64_t a1)
{
}

void sub_23BB73E9C(uint64_t a1)
{
}

void sub_23BB73EBC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23BBDBEE0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_23BB73F14()
{
  if (!qword_26AEBCAA8)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBCAA8);
    }
  }
}

void sub_23BB73F90()
{
  if (!qword_268A7DD58)
  {
    sub_23BB74024();
    sub_23BB739E8(&qword_268A7DD80, (void (*)(uint64_t))sub_23BB74024);
    unint64_t v0 = sub_23BBDC3A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DD58);
    }
  }
}

void sub_23BB74024()
{
  if (!qword_268A7DD60)
  {
    sub_23BB740B8(255, &qword_268A7DD68, (uint64_t (*)(uint64_t))sub_23BB7411C, MEMORY[0x263F1BAC8]);
    sub_23BB74184();
    unint64_t v0 = sub_23BBDC370();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DD60);
    }
  }
}

void sub_23BB740B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_23BB7411C()
{
  if (!qword_268A7DD70)
  {
    sub_23BB73E7C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268A7DD70);
    }
  }
}

unint64_t sub_23BB74184()
{
  unint64_t result = qword_268A7DD78;
  if (!qword_268A7DD78)
  {
    sub_23BB740B8(255, &qword_268A7DD68, (uint64_t (*)(uint64_t))sub_23BB7411C, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DD78);
  }
  return result;
}

void sub_23BB7420C()
{
  if (!qword_268A7DD88)
  {
    sub_23BB73F90();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DD88);
    }
  }
}

void sub_23BB7426C()
{
  if (!qword_268A7DD90)
  {
    sub_23BB7420C();
    sub_23BB74304();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7DD90);
    }
  }
}

unint64_t sub_23BB74304()
{
  unint64_t result = qword_268A7DD98;
  if (!qword_268A7DD98)
  {
    sub_23BB7420C();
    sub_23BB739E8(&qword_268A7DDA0, (void (*)(uint64_t))sub_23BB73F90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DD98);
  }
  return result;
}

void sub_23BB743AC()
{
  if (!qword_268A7DDA8)
  {
    sub_23BB74024();
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DDA8);
    }
  }
}

void sub_23BB74414()
{
  if (!qword_268A7DDB0)
  {
    sub_23BB740B8(255, &qword_268A7DD68, (uint64_t (*)(uint64_t))sub_23BB7411C, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DDB0);
    }
  }
}

uint64_t sub_23BB744AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB74514(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BB74574()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB745E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = *(int *)(v4 + 20);
    unint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = v6[6];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *(unsigned char *)(a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    uint64_t v19 = v6[8];
    int v20 = (void *)(a1 + v19);
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v49 = *(void (**)(void *, const void *, uint64_t))(v23 + 16);
    v49(v20, v21, v22);
    uint64_t v24 = v6[9];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(void *)(a1 + v24) = v25;
    uint64_t v26 = v6[10];
    uint64_t v27 = (void *)(a1 + v26);
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    id v30 = v25;
    if (v29)
    {
      uint64_t v32 = *(void **)(v28 + 8);
      uint64_t v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = v6[11];
    uint64_t v36 = (void *)(a1 + v35);
    id v37 = (char *)a2 + v35;
    id v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v49(v36, v37, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = v6[12];
    uint64_t v41 = (void *)(a1 + v40);
    uint64_t v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v49(v41, v42, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = v6[13];
    uint64_t v45 = (void *)(a1 + v44);
    int v46 = (char *)a2 + v44;
    if (v38(v46, 1, v22))
    {
      sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v49(v45, v46, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
  }
  return a1;
}

void sub_23BB74B1C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23BBDC940();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_23BB74B70(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  unint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  int v46 = *(void (**)(void *, const void *, uint64_t))(v20 + 16);
  v46(v17, v18, v19);
  uint64_t v21 = v4[9];
  uint64_t v22 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v22;
  uint64_t v23 = v4[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(a2 + v23);
  id v27 = v22;
  if (v26)
  {
    uint64_t v29 = *(void **)(v25 + 8);
    uint64_t v28 = *(void **)(v25 + 16);
    void *v24 = v26;
    v24[1] = v29;
    v24[2] = v28;
    swift_bridgeObjectRetain();
    id v30 = v29;
    id v31 = v28;
  }
  else
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    v24[2] = *(void *)(v25 + 16);
  }
  uint64_t v32 = v4[11];
  id v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v35((const void *)(a2 + v32), 1, v19))
  {
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    v46(v33, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v33, 0, 1, v19);
  }
  uint64_t v37 = v4[12];
  id v38 = (void *)(a1 + v37);
  uint64_t v39 = (const void *)(a2 + v37);
  if (v35((const void *)(a2 + v37), 1, v19))
  {
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    v46(v38, v39, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v38, 0, 1, v19);
  }
  uint64_t v41 = v4[13];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (const void *)(a2 + v41);
  if (v35(v43, 1, v19))
  {
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    v46(v42, v43, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v42, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BB7505C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
LABEL_13:
  *(unsigned char *)(a1 + v5[7]) = *((unsigned char *)a2 + v5[7]);
  uint64_t v21 = v5[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t)a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  int v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v66(v22, v23, v24);
  uint64_t v26 = v5[9];
  id v27 = *(void **)((char *)a2 + v26);
  uint64_t v28 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = v27;
  id v29 = v27;

  uint64_t v30 = v5[10];
  id v31 = (void *)(a1 + v30);
  uint64_t v32 = (long long *)((char *)a2 + v30);
  uint64_t v33 = *(uint64_t *)((char *)a2 + v30);
  if (*(void *)(a1 + v30))
  {
    if (v33)
    {
      void *v31 = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v34 = (void *)v31[1];
      uint64_t v35 = (void *)*((void *)v32 + 1);
      v31[1] = v35;
      id v36 = v35;

      uint64_t v37 = (void *)v31[2];
      id v38 = (void *)*((void *)v32 + 2);
      v31[2] = v38;
      id v39 = v38;
    }
    else
    {
      sub_23BB547F0(a1 + v30);
      uint64_t v44 = *((void *)v32 + 2);
      *(_OWORD *)id v31 = *v32;
      v31[2] = v44;
    }
  }
  else if (v33)
  {
    void *v31 = v33;
    uint64_t v40 = (void *)*((void *)v32 + 1);
    v31[1] = v40;
    uint64_t v41 = (void *)*((void *)v32 + 2);
    v31[2] = v41;
    swift_bridgeObjectRetain();
    id v42 = v40;
    id v43 = v41;
  }
  else
  {
    long long v45 = *v32;
    v31[2] = *((void *)v32 + 2);
    *(_OWORD *)id v31 = v45;
  }
  uint64_t v46 = v5[11];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (char *)a2 + v46;
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v50 = v49(a1 + v46, 1, v24);
  int v51 = v49((uint64_t)v48, 1, v24);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v47, v48, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
LABEL_27:
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_28;
  }
  v66((uint64_t)v47, (uint64_t)v48, v24);
LABEL_28:
  uint64_t v53 = v5[12];
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (char *)a2 + v53;
  int v56 = v49(a1 + v53, 1, v24);
  int v57 = v49((uint64_t)v55, 1, v24);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v54, v55, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v54, 0, 1, v24);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v54, v24);
LABEL_33:
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_34;
  }
  v66((uint64_t)v54, (uint64_t)v55, v24);
LABEL_34:
  uint64_t v59 = v5[13];
  int v60 = (void *)(a1 + v59);
  uint64_t v61 = (char *)a2 + v59;
  int v62 = v49(a1 + v59, 1, v24);
  int v63 = v49((uint64_t)v61, 1, v24);
  if (!v62)
  {
    if (!v63)
    {
      v66((uint64_t)v60, (uint64_t)v61, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v60, v24);
    goto LABEL_39;
  }
  if (v63)
  {
LABEL_39:
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v60, v61, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v60, 0, 1, v24);
  return a1;
}

uint64_t sub_23BB7579C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  uint64_t v17 = (void *)(a1 + v16);
  int v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(void *, const void *, uint64_t))(v20 + 32);
  v21(v17, v18, v19);
  *(void *)(a1 + v4[9]) = *(void *)(a2 + v4[9]);
  uint64_t v22 = v4[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  uint64_t v25 = v4[11];
  uint64_t v26 = (void *)(a1 + v25);
  id v27 = (const void *)(a2 + v25);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v40(a2 + v25, 1, v19))
  {
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v21(v26, v27, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  }
  uint64_t v29 = v4[12];
  uint64_t v30 = (void *)(a1 + v29);
  id v31 = (const void *)(a2 + v29);
  if (v40(a2 + v29, 1, v19))
  {
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    uint64_t v33 = v21;
  }
  else
  {
    id v34 = v31;
    uint64_t v33 = v21;
    v21(v30, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v30, 0, 1, v19);
  }
  uint64_t v35 = v4[13];
  id v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  if (v40((uint64_t)v37, 1, v19))
  {
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v33(v36, v37, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v36, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BB75C60(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v6, v7, v8);
LABEL_7:
  uint64_t v14 = v4[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  int v17 = v10((void *)(a1 + v14), 1, v8);
  int v18 = v10(v16, 1, v8);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v15, v16, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v15, v8);
LABEL_12:
    sub_23BB74B1C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v15, v16, v8);
LABEL_13:
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v20 = v4[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = sub_23BBDB860();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v52(v21, v22, v23);
  uint64_t v25 = v4[9];
  uint64_t v26 = *(void **)(a1 + v25);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);

  uint64_t v27 = v4[10];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  if (*(void *)(a1 + v27))
  {
    if (*v29)
    {
      *uint64_t v28 = *v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = (void *)v28[1];
      v28[1] = v29[1];

      id v31 = (void *)v28[2];
      v28[2] = v29[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v28);
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  v28[2] = v29[2];
LABEL_18:
  uint64_t v32 = v4[11];
  uint64_t v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v36 = v35(a1 + v32, 1, v23);
  int v37 = v35((uint64_t)v34, 1, v23);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v33, v34, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v33, 0, 1, v23);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v33, v23);
LABEL_23:
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_24;
  }
  v52((uint64_t)v33, (uint64_t)v34, v23);
LABEL_24:
  uint64_t v39 = v4[12];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (const void *)(a2 + v39);
  int v42 = v35(a1 + v39, 1, v23);
  int v43 = v35((uint64_t)v41, 1, v23);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v40, v41, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v40, 0, 1, v23);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v40, v23);
LABEL_29:
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_30;
  }
  v52((uint64_t)v40, (uint64_t)v41, v23);
LABEL_30:
  uint64_t v45 = v4[13];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (const void *)(a2 + v45);
  int v48 = v35(a1 + v45, 1, v23);
  int v49 = v35((uint64_t)v47, 1, v23);
  if (!v48)
  {
    if (!v49)
    {
      v52((uint64_t)v46, (uint64_t)v47, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v46, v23);
    goto LABEL_35;
  }
  if (v49)
  {
LABEL_35:
    sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v46, v47, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v46, 0, 1, v23);
  return a1;
}

uint64_t sub_23BB76350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB76364);
}

uint64_t sub_23BB76364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_23BB763D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB763E4);
}

uint64_t sub_23BB763E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SleepWidgetRectangularView()
{
  uint64_t result = qword_26AEBC8E8;
  if (!qword_26AEBC8E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BB764A0(uint64_t a1)
{
  uint64_t result = sub_23BB76528(&qword_26AEBC8E0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BB764E4(uint64_t a1)
{
  uint64_t result = sub_23BB76528(&qword_268A7DDB8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BB76528(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SleepWidgetRectangularView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB7656C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_23BB76590()
{
  unint64_t result = qword_26AEBCA88;
  if (!qword_26AEBCA88)
  {
    sub_23BB73EBC(255, &qword_26AEBCA90, sub_23BB73E9C);
    sub_23BB7661C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCA88);
  }
  return result;
}

unint64_t sub_23BB7661C()
{
  unint64_t result = qword_26AEBCA58;
  if (!qword_26AEBCA58)
  {
    sub_23BB73E9C(255);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCA58);
  }
  return result;
}

uint64_t SleepWidgetView.viewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepWidgetView();
  return sub_23BB791E8(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
}

uint64_t SleepWidgetView.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  sub_23BB6DC0C(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetView();
  uint64_t v5 = (uint64_t *)((char *)a2 + v4[5]);
  uint64_t *v5 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (char *)a2 + v4[6];
  *(void *)uint64_t v6 = swift_getKeyPath();
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = 0;
  v6[32] = 0;
  uint64_t v7 = (uint64_t)a2 + v4[7];
  return sub_23BB78F3C(a1, v7);
}

uint64_t SleepWidgetView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v55 = a1;
  uint64_t v3 = sub_23BBDC5A0();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v59 = (char *)v48 - v9;
  MEMORY[0x270FA5388](v8);
  int v11 = (char *)v48 - v10;
  sub_23BB78FA0();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB790E0(0);
  uint64_t v16 = v15 - 8;
  MEMORY[0x270FA5388](v15);
  int v18 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB7905C(0, &qword_26AEBC9C8, (uint64_t (*)(uint64_t))sub_23BB790E0, (uint64_t (*)(uint64_t))sub_23BB7915C, MEMORY[0x263F18E28]);
  uint64_t v51 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v52 = (char *)v48 - v20;
  sub_23BB76D58(v2, (uint64_t)v14);
  uint64_t v21 = sub_23BBDC280();
  uint64_t KeyPath = swift_getKeyPath();
  sub_23BB791E8((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))sub_23BB78FA0);
  uint64_t v23 = *(int *)(v16 + 44);
  uint64_t v53 = v18;
  uint64_t v24 = (uint64_t *)&v18[v23];
  uint64_t *v24 = KeyPath;
  v24[1] = v21;
  uint64_t v25 = (uint64_t)v59;
  sub_23BB79250((uint64_t)v14, (uint64_t (*)(void))sub_23BB78FA0);
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = _s13SleepWidgetUI0aB4ViewV17supportedFamiliesSay0B3Kit0B6FamilyOGvgZ_0();
  uint64_t v28 = v2 + *(int *)(type metadata accessor for SleepWidgetView() + 20);
  sub_23BB77A10(v25);
  uint64_t v57 = *(void *)(v27 + 16);
  uint64_t v54 = v26;
  if (!v57)
  {
    uint64_t v33 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v35 = (uint64_t)v52;
    uint64_t v34 = (uint64_t)v53;
    uint64_t v36 = v51;
LABEL_13:
    uint64_t v44 = v25;
    uint64_t v45 = v33;
    v33((char *)v44, v3);
    swift_bridgeObjectRelease();
    sub_23BB77A10((uint64_t)v11);
    uint64_t v46 = (uint64_t *)(v35 + *(int *)(v36 + 36));
    sub_23BB7915C(0);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v46 + *(int *)(v47 + 28), v11, v3);
    *uint64_t v46 = v54;
    sub_23BB791E8(v34, v35, (uint64_t (*)(void))sub_23BB790E0);
    v45(v11, v3);
    sub_23BB79250(v34, (uint64_t (*)(void))sub_23BB790E0);
    return sub_23BB792B0(v35, v55);
  }
  v48[2] = v2;
  v48[3] = v28;
  int v49 = v11;
  unint64_t v29 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  v30(v7, v27 + v29, v3);
  sub_23BB7C4AC((unint64_t *)&qword_26AEBCB28, MEMORY[0x263F1FD10]);
  swift_bridgeObjectRetain();
  char v31 = sub_23BBDC6C0();
  uint64_t v50 = v4;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v4 + 8);
  v48[4] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v58 = v32;
  v32(v7, v3);
  if ((v31 & 1) != 0 || (int v56 = (uint64_t (*)(char *, unint64_t, uint64_t))v30, v57 == 1))
  {
    swift_bridgeObjectRelease();
    int v11 = v49;
    uint64_t v4 = v50;
    uint64_t v34 = (uint64_t)v53;
LABEL_12:
    uint64_t v36 = v51;
    uint64_t v35 = (uint64_t)v52;
    uint64_t v33 = v58;
    goto LABEL_13;
  }
  uint64_t v37 = *(void *)(v50 + 72);
  v48[1] = v27;
  uint64_t v38 = v37;
  unint64_t v39 = v27 + v37 + v29;
  uint64_t v40 = 1;
  while (1)
  {
    uint64_t result = v56(v7, v39, v3);
    uint64_t v42 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    char v43 = sub_23BBDC6C0();
    v58(v7, v3);
    if ((v43 & 1) == 0)
    {
      ++v40;
      v39 += v38;
      if (v42 != v57) {
        continue;
      }
    }
    swift_bridgeObjectRelease();
    int v11 = v49;
    uint64_t v4 = v50;
    uint64_t v34 = (uint64_t)v53;
    uint64_t v25 = (uint64_t)v59;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_23BB76D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_23BB7C638(0, &qword_26AEBC9F8, MEMORY[0x263F19B20]);
  uint64_t v77 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v83 = (char *)v59 - v5;
  sub_23BB7C638(0, &qword_26AEBCA50, MEMORY[0x263F19B28]);
  uint64_t v81 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v59 - v7;
  uint64_t v9 = type metadata accessor for SleepWidgetViewModel();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v74 = (uint64_t)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for SleepWidgetSmallView();
  MEMORY[0x270FA5388](v76);
  int v75 = (void *)((char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = type metadata accessor for SleepWidgetRectangularView();
  MEMORY[0x270FA5388](v72);
  uint64_t v63 = (uint64_t)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB7C6A0(0, &qword_26AEBCA08, v3);
  uint64_t v79 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v59 - v14;
  sub_23BB7905C(0, &qword_26AEBC9F0, (uint64_t (*)(uint64_t))type metadata accessor for SleepWidgetCircularView, (uint64_t (*)(uint64_t))type metadata accessor for SleepWidgetRectangularView, MEMORY[0x263F19B20]);
  uint64_t v68 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v70 = (uint64_t)v59 - v17;
  sub_23BB79014(0);
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v18);
  int v71 = (char *)v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for SleepWidgetCircularView();
  MEMORY[0x270FA5388](v69);
  uint64_t v67 = (uint64_t)v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_23BBDC5A0();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  unint64_t v29 = (char *)v59 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v88 = (char *)v59 - v30;
  uint64_t v31 = _s13SleepWidgetUI0aB4ViewV17supportedFamiliesSay0B3Kit0B6FamilyOGvgZ_0();
  uint64_t v78 = type metadata accessor for SleepWidgetView();
  uint64_t v73 = a1 + *(int *)(v78 + 20);
  sub_23BB77A10((uint64_t)v29);
  uint64_t v89 = *(void *)(v31 + 16);
  uint64_t v84 = v15;
  char v85 = v29;
  uint64_t v80 = v19;
  if (!v89)
  {
    unint64_t v39 = *(void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v37 = a1;
    uint64_t v38 = (uint64_t)v88;
    uint64_t v36 = (uint64_t)v83;
    v39(v85, v22);
    goto LABEL_14;
  }
  uint64_t v65 = a1;
  int v66 = v8;
  unint64_t v62 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v61 = *(void (**)(char *, unint64_t, uint64_t))(v23 + 16);
  v61(v26, v31 + v62, v22);
  uint64_t v32 = sub_23BB7C4AC((unint64_t *)&qword_26AEBCB28, MEMORY[0x263F1FD10]);
  swift_bridgeObjectRetain();
  uint64_t v33 = v32;
  LOBYTE(v32) = sub_23BBDC6C0();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v64 = (v23 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v90 = v34;
  v34(v26, v22);
  uint64_t v35 = v31;
  if (v32)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = v66;
    uint64_t v36 = (uint64_t)v83;
    uint64_t v37 = v65;
    uint64_t v38 = (uint64_t)v88;
LABEL_13:
    unint64_t v39 = v90;
    v90(v85, v22);
LABEL_14:
    swift_bridgeObjectRelease();
    sub_23BB77A10(v38);
    int v48 = v88;
    int v49 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v88, v22);
    if (v49 == *MEMORY[0x263F1FCD8])
    {
      uint64_t v50 = v74;
      sub_23BB791E8(v37 + *(int *)(v78 + 28), v74, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v53 = (uint64_t)v75;
      uint64_t v52 = v76;
      uint64_t *v75 = KeyPath;
      *(unsigned char *)(v53 + 8) = 0;
      sub_23BB78F3C(v50, v53 + *(int *)(v52 + 20));
      sub_23BB791E8(v53, v36, (uint64_t (*)(void))type metadata accessor for SleepWidgetSmallView);
      swift_storeEnumTagMultiPayload();
      sub_23BB7C4AC(&qword_26AEBC928, (void (*)(uint64_t))type metadata accessor for SleepWidgetSmallView);
      sub_23BBDBED0();
      sub_23BB7C72C((uint64_t)v8, (uint64_t)v84);
      swift_storeEnumTagMultiPayload();
      sub_23BB7C3D4();
      sub_23BB7C4F4();
      sub_23BBDBED0();
      sub_23BB7C7AC((uint64_t)v8);
      return sub_23BB79250(v53, (uint64_t (*)(void))type metadata accessor for SleepWidgetSmallView);
    }
    else
    {
      uint64_t v54 = (uint64_t)v84;
      if (v49 == *MEMORY[0x263F1FD00])
      {
        uint64_t v55 = v67;
        sub_23BB791E8(v37 + *(int *)(v78 + 28), v67, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
        sub_23BB791E8(v55, v70, (uint64_t (*)(void))type metadata accessor for SleepWidgetCircularView);
        swift_storeEnumTagMultiPayload();
        sub_23BB7C4AC(&qword_26AEBC8C8, (void (*)(uint64_t))type metadata accessor for SleepWidgetCircularView);
        sub_23BB7C4AC(&qword_26AEBC8E0, (void (*)(uint64_t))type metadata accessor for SleepWidgetRectangularView);
        uint64_t v56 = (uint64_t)v71;
        sub_23BBDBED0();
        sub_23BB791E8(v56, v54, (uint64_t (*)(void))sub_23BB79014);
        swift_storeEnumTagMultiPayload();
        sub_23BB7C3D4();
        sub_23BB7C4F4();
        sub_23BBDBED0();
        sub_23BB79250(v56, (uint64_t (*)(void))sub_23BB79014);
        return sub_23BB79250(v55, (uint64_t (*)(void))type metadata accessor for SleepWidgetCircularView);
      }
      else if (v49 == *MEMORY[0x263F1FD08])
      {
        uint64_t v57 = v63;
        sub_23BB791E8(v37 + *(int *)(v78 + 28), v63, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
        sub_23BB791E8(v57, v70, (uint64_t (*)(void))type metadata accessor for SleepWidgetRectangularView);
        swift_storeEnumTagMultiPayload();
        sub_23BB7C4AC(&qword_26AEBC8C8, (void (*)(uint64_t))type metadata accessor for SleepWidgetCircularView);
        sub_23BB7C4AC(&qword_26AEBC8E0, (void (*)(uint64_t))type metadata accessor for SleepWidgetRectangularView);
        uint64_t v58 = (uint64_t)v71;
        sub_23BBDBED0();
        sub_23BB791E8(v58, v54, (uint64_t (*)(void))sub_23BB79014);
        swift_storeEnumTagMultiPayload();
        sub_23BB7C3D4();
        sub_23BB7C4F4();
        sub_23BBDBED0();
        sub_23BB79250(v58, (uint64_t (*)(void))sub_23BB79014);
        return sub_23BB79250(v57, (uint64_t (*)(void))type metadata accessor for SleepWidgetRectangularView);
      }
      else
      {
        swift_storeEnumTagMultiPayload();
        sub_23BB7C4AC(&qword_26AEBC928, (void (*)(uint64_t))type metadata accessor for SleepWidgetSmallView);
        sub_23BBDBED0();
        sub_23BB7C72C((uint64_t)v8, v54);
        swift_storeEnumTagMultiPayload();
        sub_23BB7C3D4();
        sub_23BB7C4F4();
        sub_23BBDBED0();
        sub_23BB7C7AC((uint64_t)v8);
        return ((uint64_t (*)(char *, uint64_t))v39)(v48, v22);
      }
    }
  }
  uint64_t v40 = (uint64_t (*)(char *, unint64_t, uint64_t))v61;
  if (v89 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = v65;
    uint64_t v8 = v66;
    uint64_t v36 = (uint64_t)v83;
    uint64_t v38 = (uint64_t)v88;
    goto LABEL_13;
  }
  uint64_t v86 = v33;
  uint64_t v87 = v23 + 16;
  uint64_t v60 = v23;
  uint64_t v41 = *(void *)(v23 + 72);
  v59[1] = v35;
  uint64_t v42 = v41;
  unint64_t v43 = v35 + v41 + v62;
  uint64_t v44 = 1;
  while (1)
  {
    uint64_t result = v40(v26, v43, v22);
    uint64_t v46 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      break;
    }
    char v47 = sub_23BBDC6C0();
    v90(v26, v22);
    if (v47)
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = v66;
      uint64_t v36 = (uint64_t)v83;
      uint64_t v37 = v65;
      uint64_t v38 = (uint64_t)v88;
      uint64_t v23 = v60;
      goto LABEL_13;
    }
    ++v44;
    v43 += v42;
    if (v46 == v89)
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = v65;
      uint64_t v8 = v66;
      uint64_t v36 = (uint64_t)v83;
      uint64_t v38 = (uint64_t)v88;
      uint64_t v23 = v60;
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_23BB77A10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_23BBDBDE0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB6DC0C(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB791E8(v2, (uint64_t)v10, (uint64_t (*)(void))sub_23BB6DC0C);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_23BBDC5A0();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = sub_23BBDC870();
    uint64_t v14 = sub_23BBDBF70();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v19[1] = a1;
      uint64_t v18 = v17;
      uint64_t v20 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v19[2] = sub_23BBD0430(0x6146746567646957, 0xEC000000796C696DLL, &v20);
      sub_23BBDC950();
      _os_log_impl(&dword_23BB52000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v18, -1, -1);
      MEMORY[0x23ECD1880](v16, -1, -1);
    }

    sub_23BBDBDD0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_23BB77CD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_23BBDBDE0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
  sub_23BB7C828(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v19 - v10;
  sub_23BB7C5B8(v2, (uint64_t)v19 - v10, &qword_26AEBC950, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_23BBDC570();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v11, v12);
  }
  else
  {
    os_log_type_t v14 = sub_23BBDC870();
    os_log_type_t v15 = sub_23BBDBF70();
    os_log_type_t v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v20 = v18;
      v19[1] = a1;
      *(_DWORD *)uint64_t v17 = 136315138;
      v19[2] = sub_23BBD0430(0xD000000000000013, 0x800000023BBE06B0, &v20);
      sub_23BBDC950();
      _os_log_impl(&dword_23BB52000, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v18, -1, -1);
      MEMORY[0x23ECD1880](v17, -1, -1);
    }

    sub_23BBDBDD0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_23BB77FBC(uint64_t a1, char a2)
{
  uint64_t v4 = sub_23BBDBDE0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = sub_23BBDC870();
  uint64_t v9 = sub_23BBDBF70();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v15 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v14 = sub_23BBD0430(1819242306, 0xE400000000000000, &v15);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v12, -1, -1);
    MEMORY[0x23ECD1880](v11, -1, -1);
  }

  sub_23BBDBDD0();
  swift_getAtKeyPath();
  sub_23BB63394(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_23BB781C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_23BBDBDE0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
  sub_23BB7C828(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void *)((char *)v20 - v10);
  sub_23BB7C5B8(v2, (uint64_t)v20 - v10, &qword_26AEBB9B0, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_23BBDBC50();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v11, v12);
  }
  else
  {
    uint64_t v14 = *v11;
    os_log_type_t v15 = sub_23BBDC870();
    os_log_type_t v16 = sub_23BBDBF70();
    os_log_type_t v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v21 = v19;
      v20[1] = v14;
      *(_DWORD *)uint64_t v18 = 136315138;
      v20[2] = sub_23BBD0430(0x5463696D616E7944, 0xEF657A6953657079, &v21);
      sub_23BBDC950();
      _os_log_impl(&dword_23BB52000, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v19, -1, -1);
      MEMORY[0x23ECD1880](v18, -1, -1);
    }

    sub_23BBDBDD0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_23BB784B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_23BBDBDE0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F07690];
  sub_23BB7C828(0, &qword_26AEBB9A8, MEMORY[0x263F07690], MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void *)((char *)v20 - v10);
  sub_23BB7C5B8(v2, (uint64_t)v20 - v10, &qword_26AEBB9A8, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_23BBDB890();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v11, v12);
  }
  else
  {
    uint64_t v14 = *v11;
    os_log_type_t v15 = sub_23BBDC870();
    os_log_type_t v16 = sub_23BBDBF70();
    os_log_type_t v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v21 = v19;
      v20[1] = v14;
      *(_DWORD *)uint64_t v18 = 136315138;
      v20[2] = sub_23BBD0430(0x656C61636F4CLL, 0xE600000000000000, &v21);
      sub_23BBDC950();
      _os_log_impl(&dword_23BB52000, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v19, -1, -1);
      MEMORY[0x23ECD1880](v18, -1, -1);
    }

    sub_23BBDBDD0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_23BB787A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_23BBDBDE0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A668];
  sub_23BB7C828(0, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void *)((char *)v20 - v10);
  sub_23BB7C5B8(v2, (uint64_t)v20 - v10, &qword_268A7DDC0, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_23BBDC0D0();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v11, v12);
  }
  else
  {
    uint64_t v14 = *v11;
    os_log_type_t v15 = sub_23BBDC870();
    os_log_type_t v16 = sub_23BBDBF70();
    os_log_type_t v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v21 = v19;
      v20[1] = v14;
      *(_DWORD *)uint64_t v18 = 136315138;
      v20[2] = sub_23BBD0430(0x747865746E6F43, 0xE700000000000000, &v21);
      sub_23BBDC950();
      _os_log_impl(&dword_23BB52000, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v19, -1, -1);
      MEMORY[0x23ECD1880](v18, -1, -1);
    }

    sub_23BBDBDD0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_23BB78A8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_23BBDBCB0();
  *a1 = result;
  return result;
}

uint64_t sub_23BB78AB8()
{
  return sub_23BBDBCC0();
}

uint64_t _s13SleepWidgetUI0aB4ViewV17supportedFamiliesSay0B3Kit0B6FamilyOGvgZ_0()
{
  v23[3] = *MEMORY[0x263EF8340];
  uint64_t v0 = sub_23BBDBBA0();
  uint64_t v19 = *(void *)(v0 - 8);
  uint64_t v20 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB7C828(0, (unint64_t *)&qword_26AEBBCF8, MEMORY[0x263F1FD10], MEMORY[0x263F8E0F8]);
  uint64_t v3 = sub_23BBDC5A0();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23BBDD2A0;
  os_log_type_t v8 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
  v8(v7 + v6, *MEMORY[0x263F1FD00], v3);
  v8(v7 + v6 + v5, *MEMORY[0x263F1FD08], v3);
  uint64_t v22 = v7;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23BBDD290;
  v8(v9 + v6, *MEMORY[0x263F1FCD8], v3);
  sub_23BB86FD8(v9);
  sub_23BBDBB80();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = sub_23BBDBB90();
  os_log_type_t v11 = sub_23BBDC850();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v23[0] = v13;
    *(_DWORD *)uint64_t v12 = 136446466;
    uint64_t v21 = sub_23BBD0430(0x6469577065656C53, 0xEF77656956746567, v23);
    sub_23BBDC950();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = MEMORY[0x23ECD0E20](v14, v3);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_23BBD0430(v15, v17, v23);
    sub_23BBDC950();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BB52000, v10, v11, "[%{public}s] supportedFamilies: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v13, -1, -1);
    MEMORY[0x23ECD1880](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v2, v20);
  swift_beginAccess();
  return v22;
}

uint64_t type metadata accessor for SleepWidgetView()
{
  uint64_t result = qword_26AEBB6B8;
  if (!qword_26AEBB6B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BB78F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23BB78FA0()
{
  if (!qword_26AEBCAD0)
  {
    sub_23BB7C6A0(255, &qword_26AEBCA80, MEMORY[0x263F19B28]);
    unint64_t v0 = sub_23BBDC330();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBCAD0);
    }
  }
}

void sub_23BB79014(uint64_t a1)
{
}

void sub_23BB7905C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_23BB790E0(uint64_t a1)
{
}

void sub_23BB79128(uint64_t a1)
{
}

void sub_23BB7915C(uint64_t a1)
{
}

uint64_t sub_23BB79190@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_23BBDBCB0();
  *a1 = result;
  return result;
}

uint64_t sub_23BB791BC()
{
  return sub_23BBDBCC0();
}

uint64_t sub_23BB791E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB79250(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BB792B0(uint64_t a1, uint64_t a2)
{
  sub_23BB7905C(0, &qword_26AEBC9C8, (uint64_t (*)(uint64_t))sub_23BB790E0, (uint64_t (*)(uint64_t))sub_23BB7915C, MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB79358()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for SleepWidgetView(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v9 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    sub_23BB6DC0C(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = a3[5];
    unint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *unint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *((void *)v16 + 1);
    uint64_t v19 = *((void *)v16 + 2);
    uint64_t v20 = *((void *)v16 + 3);
    char v21 = v16[32];
    sub_23BB79A78(*(void *)v16, v18, v19, v20, v21);
    *(void *)uint64_t v15 = v17;
    *((void *)v15 + 1) = v18;
    *((void *)v15 + 2) = v19;
    *((void *)v15 + 3) = v20;
    v15[32] = v21;
    uint64_t v22 = a3[7];
    uint64_t v67 = a1;
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    *(void *)uint64_t v23 = *(void *)((char *)a2 + v22);
    v23[8] = *((unsigned char *)a2 + v22 + 8);
    uint64_t v25 = (int *)type metadata accessor for SleepWidgetViewModel();
    uint64_t v26 = v25[5];
    uint64_t v27 = &v23[v26];
    uint64_t v28 = &v24[v26];
    uint64_t v29 = sub_23BBDB6D0();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    if (v31(v28, 1, v29))
    {
      sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v33 = v25[6];
    uint64_t v34 = &v23[v33];
    uint64_t v35 = &v24[v33];
    if (v31(&v24[v33], 1, v29))
    {
      sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v34, v35, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v29);
    }
    v23[v25[7]] = v24[v25[7]];
    uint64_t v37 = v25[8];
    uint64_t v38 = &v23[v37];
    unint64_t v39 = &v24[v37];
    uint64_t v40 = sub_23BBDB860();
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
    v68(v38, v39, v40);
    uint64_t v42 = v25[9];
    unint64_t v43 = *(void **)&v24[v42];
    *(void *)&v23[v42] = v43;
    uint64_t v44 = v25[10];
    uint64_t v45 = &v23[v44];
    uint64_t v46 = &v24[v44];
    uint64_t v47 = *(void *)&v24[v44];
    id v48 = v43;
    if (v47)
    {
      uint64_t v50 = (void *)*((void *)v46 + 1);
      int v49 = (void *)*((void *)v46 + 2);
      *(void *)uint64_t v45 = v47;
      *((void *)v45 + 1) = v50;
      *((void *)v45 + 2) = v49;
      swift_bridgeObjectRetain();
      id v51 = v50;
      id v52 = v49;
    }
    else
    {
      *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
      *((void *)v45 + 2) = *((void *)v46 + 2);
    }
    uint64_t v53 = v25[11];
    uint64_t v54 = &v23[v53];
    uint64_t v55 = &v24[v53];
    uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    if (v56(&v24[v53], 1, v40))
    {
      sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v54, v55, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      v68(v54, v55, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v54, 0, 1, v40);
    }
    uint64_t v58 = v25[12];
    uint64_t v59 = &v23[v58];
    uint64_t v60 = &v24[v58];
    if (v56(&v24[v58], 1, v40))
    {
      sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      v68(v59, v60, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v59, 0, 1, v40);
    }
    uint64_t v62 = v25[13];
    uint64_t v63 = &v23[v62];
    uint64_t v64 = &v24[v62];
    if (v56(&v24[v62], 1, v40))
    {
      sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      v68(v63, v64, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v63, 0, 1, v40);
    }
    return v67;
  }
  return (void *)v9;
}

uint64_t sub_23BB79A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for SleepWidgetView(uint64_t a1, int *a2)
{
  sub_23BB6DC0C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + a2[6];
  sub_23BB79DF8(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(unsigned char *)(v7 + 32));
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v10 = v8 + v9[5];
  uint64_t v11 = sub_23BBDB6D0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v13(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  uint64_t v14 = v8 + v9[6];
  if (!v13(v14, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
  }
  uint64_t v15 = v8 + v9[8];
  uint64_t v16 = sub_23BBDB860();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v24(v15, v16);

  uint64_t v18 = v8 + v9[10];
  if (*(void *)v18)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = v8 + v9[11];
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (!v20(v19, 1, v16)) {
    v24(v19, v16);
  }
  uint64_t v21 = v8 + v9[12];
  if (!v20(v21, 1, v16)) {
    v24(v21, v16);
  }
  uint64_t v22 = v8 + v9[13];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v22, 1, v16);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v24)(v22, v16);
  }
  return result;
}

uint64_t sub_23BB79DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for SleepWidgetView(void *a1, void *a2, int *a3)
{
  sub_23BB6DC0C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC5A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_23BBDC5A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *((void *)v13 + 1);
  uint64_t v16 = *((void *)v13 + 2);
  uint64_t v17 = *((void *)v13 + 3);
  char v18 = v13[32];
  sub_23BB79A78(*(void *)v13, v15, v16, v17, v18);
  *(void *)uint64_t v12 = v14;
  *((void *)v12 + 1) = v15;
  *((void *)v12 + 2) = v16;
  *((void *)v12 + 3) = v17;
  v12[32] = v18;
  uint64_t v19 = a3[7];
  uint64_t v64 = a1;
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)uint64_t v20 = *(void *)((char *)a2 + v19);
  v20[8] = *((unsigned char *)a2 + v19 + 8);
  uint64_t v22 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v23 = v22[5];
  uint64_t v24 = &v20[v23];
  uint64_t v25 = &v21[v23];
  uint64_t v26 = sub_23BBDB6D0();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v28(v25, 1, v26))
  {
    sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v30 = v22[6];
  uint64_t v31 = &v20[v30];
  uint64_t v32 = &v21[v30];
  if (v28(&v21[v30], 1, v26))
  {
    sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v31, v32, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v31, 0, 1, v26);
  }
  v20[v22[7]] = v21[v22[7]];
  uint64_t v34 = v22[8];
  uint64_t v35 = &v20[v34];
  uint64_t v36 = &v21[v34];
  uint64_t v37 = sub_23BBDB860();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v65(v35, v36, v37);
  uint64_t v39 = v22[9];
  uint64_t v40 = *(void **)&v21[v39];
  *(void *)&v20[v39] = v40;
  uint64_t v41 = v22[10];
  uint64_t v42 = &v20[v41];
  unint64_t v43 = &v21[v41];
  uint64_t v44 = *(void *)&v21[v41];
  id v45 = v40;
  if (v44)
  {
    uint64_t v47 = (void *)*((void *)v43 + 1);
    uint64_t v46 = (void *)*((void *)v43 + 2);
    *(void *)uint64_t v42 = v44;
    *((void *)v42 + 1) = v47;
    *((void *)v42 + 2) = v46;
    swift_bridgeObjectRetain();
    id v48 = v47;
    id v49 = v46;
  }
  else
  {
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *((void *)v42 + 2) = *((void *)v43 + 2);
  }
  uint64_t v50 = v22[11];
  id v51 = &v20[v50];
  id v52 = &v21[v50];
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  if (v53(&v21[v50], 1, v37))
  {
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    v65(v51, v52, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v51, 0, 1, v37);
  }
  uint64_t v55 = v22[12];
  uint64_t v56 = &v20[v55];
  uint64_t v57 = &v21[v55];
  if (v53(&v21[v55], 1, v37))
  {
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    v65(v56, v57, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v56, 0, 1, v37);
  }
  uint64_t v59 = v22[13];
  uint64_t v60 = &v20[v59];
  uint64_t v61 = &v21[v59];
  if (v53(&v21[v59], 1, v37))
  {
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
  }
  else
  {
    v65(v60, v61, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v60, 0, 1, v37);
  }
  return v64;
}

void *assignWithCopy for SleepWidgetView(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_23BB79250((uint64_t)a1, (uint64_t (*)(void))sub_23BB6DC0C);
    sub_23BB6DC0C(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = a3[5];
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    sub_23BB79250((uint64_t)a1 + v7, (uint64_t (*)(void))sub_23BB6DC0C);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *((void *)v13 + 1);
  uint64_t v16 = *((void *)v13 + 2);
  uint64_t v17 = *((void *)v13 + 3);
  char v18 = v13[32];
  sub_23BB79A78(*(void *)v13, v15, v16, v17, v18);
  uint64_t v19 = *(void *)v12;
  uint64_t v20 = *((void *)v12 + 1);
  uint64_t v21 = *((void *)v12 + 2);
  uint64_t v22 = *((void *)v12 + 3);
  char v23 = v12[32];
  *(void *)uint64_t v12 = v14;
  *((void *)v12 + 1) = v15;
  *((void *)v12 + 2) = v16;
  *((void *)v12 + 3) = v17;
  v12[32] = v18;
  sub_23BB79DF8(v19, v20, v21, v22, v23);
  uint64_t v24 = a3[7];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a2 + v24);
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v29 = v28[5];
  uint64_t v30 = &v25[v29];
  uint64_t v31 = &v26[v29];
  uint64_t v32 = sub_23BBDB6D0();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  LODWORD(v16) = v34(v30, 1, v32);
  int v35 = v34(v31, 1, v32);
  if (v16)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v32);
LABEL_14:
    sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v30, v31, v32);
LABEL_15:
  uint64_t v37 = v28[6];
  uint64_t v38 = &v25[v37];
  uint64_t v39 = &v26[v37];
  int v40 = v34(&v25[v37], 1, v32);
  int v41 = v34(v39, 1, v32);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v38, v39, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v38, 0, 1, v32);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v32);
LABEL_20:
    sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v38, v39, v32);
LABEL_21:
  v25[v28[7]] = v26[v28[7]];
  uint64_t v43 = v28[8];
  uint64_t v44 = &v25[v43];
  id v45 = &v26[v43];
  uint64_t v46 = sub_23BBDB860();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v47 + 24);
  v89(v44, v45, v46);
  uint64_t v48 = v28[9];
  id v49 = *(void **)&v26[v48];
  uint64_t v50 = *(void **)&v25[v48];
  *(void *)&v25[v48] = v49;
  id v51 = v49;

  uint64_t v52 = v28[10];
  uint64_t v53 = &v25[v52];
  uint64_t v54 = &v26[v52];
  uint64_t v55 = *(void *)&v26[v52];
  if (*(void *)&v25[v52])
  {
    if (v55)
    {
      *(void *)uint64_t v53 = v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v56 = (void *)*((void *)v53 + 1);
      uint64_t v57 = (void *)*((void *)v54 + 1);
      *((void *)v53 + 1) = v57;
      id v58 = v57;

      uint64_t v59 = (void *)*((void *)v53 + 2);
      uint64_t v60 = (void *)*((void *)v54 + 2);
      *((void *)v53 + 2) = v60;
      id v61 = v60;
    }
    else
    {
      sub_23BB547F0((uint64_t)&v25[v52]);
      uint64_t v66 = *((void *)v54 + 2);
      *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
      *((void *)v53 + 2) = v66;
    }
  }
  else if (v55)
  {
    *(void *)uint64_t v53 = v55;
    uint64_t v62 = (void *)*((void *)v54 + 1);
    *((void *)v53 + 1) = v62;
    uint64_t v63 = (void *)*((void *)v54 + 2);
    *((void *)v53 + 2) = v63;
    swift_bridgeObjectRetain();
    id v64 = v62;
    id v65 = v63;
  }
  else
  {
    long long v67 = *(_OWORD *)v54;
    *((void *)v53 + 2) = *((void *)v54 + 2);
    *(_OWORD *)uint64_t v53 = v67;
  }
  uint64_t v68 = v28[11];
  uint64_t v69 = &v25[v68];
  uint64_t v70 = &v26[v68];
  int v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  int v72 = v71(&v25[v68], 1, v46);
  int v73 = v71(v70, 1, v46);
  if (v72)
  {
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v69, v70, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v69, 0, 1, v46);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v69, v46);
LABEL_35:
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v74 - 8) + 64));
    goto LABEL_36;
  }
  v89(v69, v70, v46);
LABEL_36:
  uint64_t v75 = v28[12];
  uint64_t v76 = &v25[v75];
  uint64_t v77 = &v26[v75];
  int v78 = v71(&v25[v75], 1, v46);
  int v79 = v71(v77, 1, v46);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v76, v77, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v76, 0, 1, v46);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v76, v46);
LABEL_41:
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_42;
  }
  v89(v76, v77, v46);
LABEL_42:
  uint64_t v81 = v28[13];
  uint64_t v82 = &v25[v81];
  uint64_t v83 = &v26[v81];
  int v84 = v71(&v25[v81], 1, v46);
  int v85 = v71(v83, 1, v46);
  if (!v84)
  {
    uint64_t v86 = a1;
    if (!v85)
    {
      v89(v82, v83, v46);
      return v86;
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v82, v46);
    goto LABEL_47;
  }
  uint64_t v86 = a1;
  if (v85)
  {
LABEL_47:
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v82, v83, *(void *)(*(void *)(v87 - 8) + 64));
    return v86;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v82, v83, v46);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v82, 0, 1, v46);
  return v86;
}

char *initializeWithTake for SleepWidgetView(char *a1, char *a2, int *a3)
{
  sub_23BB6DC0C(0);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC5A0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_23BBDC5A0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  long long v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  v15[32] = v16[32];
  uint64_t v56 = a1;
  char v18 = &a1[v14];
  uint64_t v19 = &a2[v14];
  v18[8] = a2[v14 + 8];
  *(void *)char v18 = *(void *)&a2[v14];
  uint64_t v20 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v21 = v20[5];
  uint64_t v22 = &v18[v21];
  char v23 = &v19[v21];
  uint64_t v24 = sub_23BBDB6D0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v23, 1, v24))
  {
    sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v28 = v20[6];
  uint64_t v29 = &v18[v28];
  uint64_t v30 = &v19[v28];
  if (v26(&v19[v28], 1, v24))
  {
    sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v30, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
  }
  v18[v20[7]] = v19[v20[7]];
  uint64_t v32 = v20[8];
  uint64_t v33 = &v18[v32];
  uint64_t v34 = &v19[v32];
  uint64_t v35 = sub_23BBDB860();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
  v37(v33, v34, v35);
  *(void *)&v18[v20[9]] = *(void *)&v19[v20[9]];
  uint64_t v38 = v20[10];
  uint64_t v39 = &v18[v38];
  int v40 = &v19[v38];
  *((void *)v39 + 2) = *((void *)v40 + 2);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
  uint64_t v41 = v20[11];
  uint64_t v42 = &v18[v41];
  uint64_t v43 = &v19[v41];
  uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  if (v55(&v19[v41], 1, v35))
  {
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    v37(v42, v43, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v42, 0, 1, v35);
  }
  uint64_t v45 = v20[12];
  uint64_t v46 = &v18[v45];
  uint64_t v47 = &v19[v45];
  if (v55(&v19[v45], 1, v35))
  {
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
    uint64_t v49 = v36;
  }
  else
  {
    v37(v46, v47, v35);
    uint64_t v49 = v36;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v46, 0, 1, v35);
  }
  uint64_t v50 = v20[13];
  id v51 = &v18[v50];
  uint64_t v52 = &v19[v50];
  if (v55(&v19[v50], 1, v35))
  {
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    v37(v51, v52, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v35);
  }
  return v56;
}

char *assignWithTake for SleepWidgetView(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_23BB79250((uint64_t)a1, (uint64_t (*)(void))sub_23BB6DC0C);
    sub_23BB6DC0C(0);
    uint64_t v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_23BBDC5A0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    sub_23BB79250((uint64_t)&a1[v9], (uint64_t (*)(void))sub_23BB6DC0C);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_23BBDC5A0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v7 - 8) + 64));
    }
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  char v16 = v15[32];
  uint64_t v17 = *(void *)v14;
  uint64_t v18 = *((void *)v14 + 1);
  uint64_t v19 = *((void *)v14 + 2);
  uint64_t v20 = *((void *)v14 + 3);
  char v21 = v14[32];
  long long v22 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v22;
  v14[32] = v16;
  sub_23BB79DF8(v17, v18, v19, v20, v21);
  uint64_t v23 = a3[7];
  uint64_t v76 = a1;
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)&a2[v23];
  v24[8] = a2[v23 + 8];
  uint64_t v26 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v27 = v26[5];
  uint64_t v28 = &v24[v27];
  uint64_t v29 = &v25[v27];
  uint64_t v30 = sub_23BBDB6D0();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_13:
    sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_14:
  uint64_t v36 = v26[6];
  uint64_t v37 = &v24[v36];
  uint64_t v38 = &v25[v36];
  int v39 = v32(&v24[v36], 1, v30);
  int v40 = v32(v38, 1, v30);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v37, v38, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v37, 0, 1, v30);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v30);
LABEL_19:
    sub_23BB7C828(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v37, v38, v30);
LABEL_20:
  v24[v26[7]] = v25[v26[7]];
  uint64_t v42 = v26[8];
  uint64_t v43 = &v24[v42];
  uint64_t v44 = &v25[v42];
  uint64_t v45 = sub_23BBDB860();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v46 + 40);
  v75(v43, v44, v45);
  uint64_t v47 = v26[9];
  uint64_t v48 = *(void **)&v24[v47];
  *(void *)&v24[v47] = *(void *)&v25[v47];

  uint64_t v49 = v26[10];
  uint64_t v50 = &v24[v49];
  id v51 = &v25[v49];
  if (*(void *)&v24[v49])
  {
    if (*(void *)v51)
    {
      *(void *)uint64_t v50 = *(void *)v51;
      swift_bridgeObjectRelease();
      uint64_t v52 = (void *)*((void *)v50 + 1);
      *((void *)v50 + 1) = *((void *)v51 + 1);

      uint64_t v53 = (void *)*((void *)v50 + 2);
      *((void *)v50 + 2) = *((void *)v51 + 2);

      goto LABEL_25;
    }
    sub_23BB547F0((uint64_t)v50);
  }
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  *((void *)v50 + 2) = *((void *)v51 + 2);
LABEL_25:
  uint64_t v54 = v26[11];
  uint64_t v55 = &v24[v54];
  uint64_t v56 = &v25[v54];
  uint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  int v58 = v57(&v24[v54], 1, v45);
  int v59 = v57(v56, 1, v45);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v55, v56, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v55, 0, 1, v45);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v55, v45);
LABEL_30:
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_31;
  }
  v75(v55, v56, v45);
LABEL_31:
  uint64_t v61 = v26[12];
  uint64_t v62 = &v24[v61];
  uint64_t v63 = &v25[v61];
  int v64 = v57(&v24[v61], 1, v45);
  int v65 = v57(v63, 1, v45);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v62, v63, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v62, 0, 1, v45);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v62, v45);
LABEL_36:
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_37;
  }
  v75(v62, v63, v45);
LABEL_37:
  uint64_t v67 = v26[13];
  uint64_t v68 = &v24[v67];
  uint64_t v69 = &v25[v67];
  int v70 = v57(&v24[v67], 1, v45);
  int v71 = v57(v69, 1, v45);
  if (!v70)
  {
    int v72 = v76;
    if (!v71)
    {
      v75(v68, v69, v45);
      return v72;
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v68, v45);
    goto LABEL_42;
  }
  int v72 = v76;
  if (v71)
  {
LABEL_42:
    sub_23BB7C828(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v68, v69, *(void *)(*(void *)(v73 - 8) + 64));
    return v72;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v68, v69, v45);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v68, 0, 1, v45);
  return v72;
}

uint64_t getEnumTagSinglePayload for SleepWidgetView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB7BD9C);
}

uint64_t sub_23BB7BD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23BB7C828(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 32);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for SleepWidgetViewModel();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for SleepWidgetView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB7BF08);
}

void sub_23BB7BF08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23BB7C828(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24) + 32) = -(char)a2;
  }
  else
  {
    uint64_t v11 = type metadata accessor for SleepWidgetViewModel();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    v12(v14, a2, a2, v13);
  }
}

void sub_23BB7C064()
{
  sub_23BB6DC0C(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SleepWidgetViewModel();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_23BB7C13C()
{
  unint64_t result = qword_26AEBC9C0;
  if (!qword_26AEBC9C0)
  {
    sub_23BB7905C(255, &qword_26AEBC9C8, (uint64_t (*)(uint64_t))sub_23BB790E0, (uint64_t (*)(uint64_t))sub_23BB7915C, MEMORY[0x263F18E28]);
    sub_23BB7C228();
    sub_23BB7C4AC(&qword_26AEBCA98, sub_23BB7915C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC9C0);
  }
  return result;
}

unint64_t sub_23BB7C228()
{
  unint64_t result = qword_26AEBC990;
  if (!qword_26AEBC990)
  {
    sub_23BB790E0(255);
    sub_23BB7C2D0();
    sub_23BB7C4AC((unint64_t *)&qword_26AEBBA38, sub_23BB79128);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC990);
  }
  return result;
}

unint64_t sub_23BB7C2D0()
{
  unint64_t result = qword_26AEBCAC8;
  if (!qword_26AEBCAC8)
  {
    sub_23BB78FA0();
    sub_23BB7C340();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCAC8);
  }
  return result;
}

unint64_t sub_23BB7C340()
{
  unint64_t result = qword_26AEBCA78;
  if (!qword_26AEBCA78)
  {
    sub_23BB7C6A0(255, &qword_26AEBCA80, MEMORY[0x263F19B28]);
    sub_23BB7C3D4();
    sub_23BB7C4F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCA78);
  }
  return result;
}

unint64_t sub_23BB7C3D4()
{
  unint64_t result = qword_26AEBCA38;
  if (!qword_26AEBCA38)
  {
    sub_23BB79014(255);
    sub_23BB7C4AC(&qword_26AEBC8C8, (void (*)(uint64_t))type metadata accessor for SleepWidgetCircularView);
    sub_23BB7C4AC(&qword_26AEBC8E0, (void (*)(uint64_t))type metadata accessor for SleepWidgetRectangularView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCA38);
  }
  return result;
}

uint64_t sub_23BB7C4AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BB7C4F4()
{
  unint64_t result = qword_26AEBCA48;
  if (!qword_26AEBCA48)
  {
    sub_23BB7C638(255, &qword_26AEBCA50, MEMORY[0x263F19B28]);
    sub_23BB7C4AC(&qword_26AEBC928, (void (*)(uint64_t))type metadata accessor for SleepWidgetSmallView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCA48);
  }
  return result;
}

uint64_t sub_23BB7C5B8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_23BB7C828(0, a3, a4, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_23BB7C638(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for SleepWidgetSmallView();
    unint64_t v7 = a3(a1, v6, MEMORY[0x263F1BA08]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_23BB7C6A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_23BB79014(255);
    uint64_t v7 = v6;
    sub_23BB7C638(255, &qword_26AEBCA50, MEMORY[0x263F19B28]);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_23BB7C72C(uint64_t a1, uint64_t a2)
{
  sub_23BB7C638(0, &qword_26AEBCA50, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB7C7AC(uint64_t a1)
{
  sub_23BB7C638(0, &qword_26AEBCA50, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23BB7C828(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

__n128 SleepSnidgetView.init(sleepDaySummaries:)@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  SleepDaySummaryResults.init(summaries:)(a1, &v4);
  __n128 result = v5;
  *(void *)a2 = v4;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t SleepSnidgetView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v50 = sub_23BBDB860();
  uint64_t v48 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v46 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for SleepWidgetChartView();
  MEMORY[0x270FA5388](v54);
  unint64_t v4 = (uint64_t *)((char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BB7DA18(0, &qword_268A7DDC8, MEMORY[0x263F19B20]);
  uint64_t v51 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v53 = (uint64_t)&v41 - v6;
  uint64_t v43 = sub_23BBDBA40();
  uint64_t v41 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_23BBDBA50();
  uint64_t v49 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v47 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB7D61C(0, &qword_26AEBC830, MEMORY[0x263F75F60], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v12 = sub_23BBDB9A0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v42 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v44 = (char *)&v41 - v16;
  uint64_t v17 = *v1;
  uint64_t v18 = (void *)v1[1];
  uint64_t v19 = (void *)v1[2];
  if (v18)
  {
    id v20 = v19;
    id v21 = v18;
    swift_bridgeObjectRetain();
    id v22 = v21;
    id v23 = objc_msgSend(v22, sel_summaryFilteredToLastPeriod);
    if (v23)
    {
      uint64_t v24 = v23;
      if (objc_msgSend(v23, sel_hasSleepStageData))
      {
        sub_23BBDC8D0();

        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
        goto LABEL_9;
      }
    }
    else
    {
    }
  }
  else
  {
    id v20 = v19;
    swift_bridgeObjectRetain();
    id v22 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
LABEL_9:

  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_23BB7D1EC((uint64_t)v11);
    uint64_t v56 = v17;
    uint64_t v57 = v18;
    int v58 = v19;
    sub_23BB87600(&v59);
    uint64_t v25 = v59;
    uint64_t v26 = (int *)v54;
    uint64_t v27 = (void *)((char *)v4 + *(int *)(v54 + 28));
    uint64_t *v27 = swift_getKeyPath();
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB7D61C(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = (char *)v4 + v26[8];
    *(void *)uint64_t v29 = swift_getKeyPath();
    v29[8] = 0;
    uint64_t v30 = (void *)((char *)v4 + v26[9]);
    *uint64_t v30 = swift_getKeyPath();
    sub_23BB7D61C(0, &qword_268A7DDC0, MEMORY[0x263F1A668], v28);
    swift_storeEnumTagMultiPayload();
    uint64_t v31 = (char *)v4 + v26[10];
    *(void *)uint64_t v31 = swift_getKeyPath();
    v31[8] = 0;
    void *v4 = v25;
    v4[1] = 13;
    uint64_t v32 = v46;
    sub_23BBDB850();
    uint64_t v33 = sub_23BBDAD00();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v50);
    v4[2] = v33;
    sub_23BB7D514((uint64_t)v4, v53);
    swift_storeEnumTagMultiPayload();
    sub_23BB7D578(&qword_26AEBC0C8, MEMORY[0x263F75FC8]);
    sub_23BB7D578(&qword_26AEBC428, (void (*)(uint64_t))type metadata accessor for SleepWidgetChartView);
    sub_23BBDBED0();
    return sub_23BB7D5C0((uint64_t)v4);
  }
  else
  {
    uint64_t v35 = v44;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v44, v11, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v42, v35, v12);
    uint64_t v36 = (uint64_t (*)(uint64_t))MEMORY[0x263F75FB0];
    sub_23BB7D61C(0, &qword_26AEBCB68, MEMORY[0x263F75FB0], MEMORY[0x263F8E0F8]);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_23BBDE0F0;
    sub_23BBDBA30();
    sub_23BBDBA20();
    sub_23BBDB9F0();
    sub_23BBDB9D0();
    uint64_t v56 = v37;
    sub_23BB7D578(&qword_26AEBC840, MEMORY[0x263F75FB0]);
    sub_23BB7D61C(0, &qword_26AEBCB40, v36, MEMORY[0x263F8D488]);
    sub_23BB7D680();
    sub_23BBDC9B0();
    sub_23BBDBA80();
    swift_allocObject();
    sub_23BBDBA70();
    uint64_t v38 = v47;
    sub_23BBDB9B0();
    uint64_t v39 = v49;
    uint64_t v40 = v52;
    (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v53, v38, v52);
    swift_storeEnumTagMultiPayload();
    sub_23BB7D578(&qword_26AEBC0C8, MEMORY[0x263F75FC8]);
    sub_23BB7D578(&qword_26AEBC428, (void (*)(uint64_t))type metadata accessor for SleepWidgetChartView);
    sub_23BBDBED0();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v35, v12);
  }
}

uint64_t sub_23BB7D1EC(uint64_t a1)
{
  sub_23BB7D61C(0, &qword_26AEBC830, MEMORY[0x263F75F60], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BB7D27C@<X0>(unsigned char *a1@<X8>)
{
  sub_23BB7DA88();
  uint64_t result = sub_23BBDBDF0();
  *a1 = v3;
  return result;
}

uint64_t sub_23BB7D2CC()
{
  return sub_23BBDBE00();
}

uint64_t sub_23BB7D320@<X0>(unsigned char *a1@<X8>)
{
  sub_23BB7DA88();
  uint64_t result = sub_23BBDBDF0();
  *a1 = v3;
  return result;
}

uint64_t sub_23BB7D370()
{
  return sub_23BBDBE00();
}

uint64_t sub_23BB7D3BC()
{
  sub_23BBDBD60();
  sub_23BB7D578(&qword_268A7DDE0, MEMORY[0x263F1FB28]);
  sub_23BBDBDF0();
  return v1;
}

uint64_t sub_23BB7D438@<X0>(unsigned char *a1@<X8>)
{
  sub_23BBDBD60();
  sub_23BB7D578(&qword_268A7DDE0, MEMORY[0x263F1FB28]);
  uint64_t result = sub_23BBDBDF0();
  *a1 = v3;
  return result;
}

uint64_t sub_23BB7D4C8()
{
  return sub_23BBDBD20();
}

uint64_t sub_23BB7D4EC()
{
  return sub_23BBDBD20();
}

uint64_t sub_23BB7D514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetChartView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB7D578(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB7D5C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepWidgetChartView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23BB7D61C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_23BB7D680()
{
  unint64_t result = qword_26AEBCB48;
  if (!qword_26AEBCB48)
  {
    sub_23BB7D61C(255, &qword_26AEBCB40, MEMORY[0x263F75FB0], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCB48);
  }
  return result;
}

uint64_t sub_23BB7D708()
{
  return swift_getOpaqueTypeConformance2();
}

void destroy for SleepDaySummaryResults(uint64_t a1)
{
  swift_bridgeObjectRelease();

  uint64_t v2 = *(void **)(a1 + 16);
}

void *_s13SleepWidgetUI22SleepDaySummaryResultsVwCP_0(void *a1, void *a2)
{
  char v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void *assignWithCopy for SleepDaySummaryResults(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[1];
  id v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  uint64_t v7 = (void *)a1[2];
  unint64_t v8 = (void *)a2[2];
  a1[2] = v8;
  id v9 = v8;

  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SleepDaySummaryResults(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for SleepDaySummaryResults(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepDaySummaryResults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepSnidgetView()
{
  return &type metadata for SleepSnidgetView;
}

unint64_t sub_23BB7D924()
{
  unint64_t result = qword_268A7DDD0;
  if (!qword_268A7DDD0)
  {
    sub_23BB7DA18(255, &qword_268A7DDD8, MEMORY[0x263F19B28]);
    sub_23BB7D578(&qword_26AEBC0C8, MEMORY[0x263F75FC8]);
    sub_23BB7D578(&qword_26AEBC428, (void (*)(uint64_t))type metadata accessor for SleepWidgetChartView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DDD0);
  }
  return result;
}

void sub_23BB7DA18(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_23BBDBA50();
    uint64_t v7 = type metadata accessor for SleepWidgetChartView();
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_23BB7DA88()
{
  unint64_t result = qword_268A7DDE8;
  if (!qword_268A7DDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DDE8);
  }
  return result;
}

uint64_t sub_23BB7DADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t sub_23BB7DAE4(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  uint64_t v2 = *(void *)(a1 + 56);
  char v3 = *(unsigned char *)(a1 + 64);
  return sub_23BB63394(v2, v3);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_23BB7DB78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(v2 + 48);
  *(void *)(a1 + 40) = *(void *)(v2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(unsigned char *)(v2 + 64);
  swift_retain();
  sub_23BB631DC(v6, v2);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = v2;
  return a1;
}

uint64_t sub_23BB7DC04(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, a2);
  uint64_t v4 = v2[6];
  *(void *)(a1 + 40) = v2[5];
  *(void *)(a1 + 48) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = v2[7];
  LOBYTE(v2) = *((unsigned char *)v2 + 64);
  sub_23BB631DC(v5, (char)v2);
  uint64_t v6 = *(void *)(a1 + 56);
  char v7 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = (_BYTE)v2;
  sub_23BB63394(v6, v7);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    char v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *char v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *char v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_23BB7DECC(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  char v5 = *(unsigned char *)(a2 + 64);
  uint64_t v6 = *(void *)(a1 + 56);
  char v7 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v5;
  sub_23BB63394(v6, v7);
  return a1;
}

uint64_t sub_23BB7DF34(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23BB7DF7C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for SleepWidgetResultsView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_23BB7DFE8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB7E02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDBEC0();
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_23BBDBED0();
}

uint64_t sub_23BB7E124(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        uint64_t v16 = &v8[8 * v9];
        uint64_t v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  MEMORY[0x270FA5388](TupleTypeMetadata);
  id v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    id v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return sub_23BBDC440();
}

uint64_t sub_23BB7E2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_23BBDBEC0();
  MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_23BBDBED0();
}

uint64_t sub_23BB7E3E0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  char v2 = *(unsigned char *)(v0 + 64);
  sub_23BB631DC(v1, v2);
  char v3 = sub_23BB77FBC(v1, v2);
  sub_23BB63394(v1, v2);
  return v3 & 1;
}

uint64_t sub_23BB7E438@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v30 = a2;
  sub_23BB6D268();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v31 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB8129C(255);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v36 = v8;
  uint64_t v37 = v6;
  uint64_t v38 = MEMORY[0x263F1B6B0];
  type metadata accessor for SleepWidgetResultsView.SummaryTextView();
  uint64_t v39 = sub_23BBDBC60();
  type metadata accessor for SleepWidgetResultsView.SummaryValueStringView();
  type metadata accessor for SleepWidgetResultsView.NoDataStringView();
  sub_23BBDBEE0();
  sub_23BBDC330();
  uint64_t v40 = sub_23BBDBC60();
  swift_getTupleTypeMetadata();
  sub_23BBDC430();
  swift_getWitnessTable();
  uint64_t v9 = sub_23BBDC3A0();
  uint64_t v28 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v27 - v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = sub_23BB813C8(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
  uint64_t v36 = v9;
  uint64_t v37 = v4;
  uint64_t v29 = v4;
  v27[1] = v13;
  v27[2] = WitnessTable;
  uint64_t v38 = WitnessTable;
  uint64_t v39 = v13;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v15 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  uint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v20 = (char *)v27 - v19;
  sub_23BBDBE60();
  uint64_t v33 = v6;
  uint64_t v34 = v7;
  uint64_t v21 = (uint64_t)v31;
  uint64_t v35 = v32;
  sub_23BBDC390();
  uint64_t v22 = *MEMORY[0x263F18D70];
  uint64_t v23 = sub_23BBDBC50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v21, v22, v23);
  sub_23BB813C8(&qword_26AEBB9C8, MEMORY[0x263F18D80]);
  uint64_t result = sub_23BBDC6C0();
  if (result)
  {
    sub_23BBDC240();
    sub_23BB81424(v21, (uint64_t (*)(void))sub_23BB6D268);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v25(v20, v18, OpaqueTypeMetadata2);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v15 + 8);
    v26(v18, OpaqueTypeMetadata2);
    v25(v30, v20, OpaqueTypeMetadata2);
    return ((uint64_t (*)(char *, uint64_t))v26)(v20, OpaqueTypeMetadata2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23BB7E8E8@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v114 = a4;
  uint64_t v7 = type metadata accessor for SleepWidgetResultsView.SummaryValueStringView();
  unint64_t v117 = a3;
  uint64_t v103 = type metadata accessor for SleepWidgetResultsView.NoDataStringView();
  uint64_t v104 = v7;
  uint64_t v105 = sub_23BBDBEE0();
  uint64_t v8 = sub_23BBDC330();
  uint64_t v108 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v107 = (char *)&v95 - v9;
  uint64_t v109 = v10;
  uint64_t v11 = sub_23BBDBC60();
  uint64_t v112 = *(void *)(v11 - 8);
  uint64_t v113 = v11;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v111 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v106 = (char *)&v95 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v110 = (char *)&v95 - v17;
  unint64_t v18 = a2;
  uint64_t v19 = *(void *)(a2 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v16);
  uint64_t v116 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v120 = (char *)&v95 - v22;
  uint64_t v23 = type metadata accessor for HeaderView(0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (uint64_t *)((char *)&v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BB812D8(0);
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v95 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB8129C(0);
  uint64_t v115 = v30;
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  uint64_t v119 = (uint64_t)&v95 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v118 = (uint64_t)&v95 - v33;
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  unint64_t v94 = 0xE000000000000000;
  uint64_t v34 = sub_23BBDB740();
  uint64_t v36 = v35;
  *uint64_t v25 = swift_getKeyPath();
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = (uint64_t *)((char *)v25 + *(int *)(v23 + 20));
  *uint64_t v37 = v34;
  v37[1] = v36;
  LOBYTE(v36) = sub_23BBDBFD0();
  sub_23BBDBBB0();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  sub_23BB81484((uint64_t)v25, (uint64_t)v29, type metadata accessor for HeaderView);
  uint64_t v46 = &v29[*(int *)(v27 + 36)];
  *uint64_t v46 = v36;
  *((void *)v46 + 1) = v39;
  *((void *)v46 + 2) = v41;
  *((void *)v46 + 3) = v43;
  *((void *)v46 + 4) = v45;
  v46[40] = 0;
  sub_23BB81424((uint64_t)v25, type metadata accessor for HeaderView);
  char v47 = sub_23BBDBFC0();
  sub_23BBDBBB0();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v56 = v119;
  sub_23BB81484((uint64_t)v29, v119, (uint64_t (*)(void))sub_23BB812D8);
  uint64_t v57 = v56 + *(int *)(v115 + 36);
  *(unsigned char *)uint64_t v57 = v47;
  *(void *)(v57 + 8) = v49;
  *(void *)(v57 + 16) = v51;
  *(void *)(v57 + 24) = v53;
  *(void *)(v57 + 32) = v55;
  *(unsigned char *)(v57 + 40) = 0;
  sub_23BB81424((uint64_t)v29, (uint64_t (*)(void))sub_23BB812D8);
  uint64_t v58 = sub_23BB83D5C(v56, v118, (uint64_t (*)(void))sub_23BB8129C);
  uint64_t v59 = v116;
  (*(void (**)(uint64_t))(a1 + 40))(v58);
  uint64_t v60 = *(void (**)(void, void, void))(v19 + 16);
  uint64_t v100 = v19 + 16;
  int v101 = v60;
  v60(v120, v59, v18);
  uint64_t v61 = *(void (**)(void, void))(v19 + 8);
  uint64_t v99 = v19 + 8;
  char v102 = v61;
  v61(v59, v18);
  uint64_t v62 = *(void *)(a1 + 24);
  uint64_t v63 = *(void *)(a1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)a1, v62);
  uint64_t v64 = SleepWidgetModelProviding.summaryDurationTitle.getter(v62, v63);
  uint64_t v66 = v65;
  uint64_t v67 = *(void *)(a1 + 24);
  uint64_t v68 = *(void *)(a1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)a1, v67);
  uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 24))(v67, v68);
  *(void *)&long long v150 = v64;
  *((void *)&v150 + 1) = v66;
  uint64_t v151 = v69;
  uint64_t v152 = v70;
  sub_23BBDBFD0();
  unint64_t v95 = a1;
  unint64_t v71 = v117;
  type metadata accessor for SleepWidgetResultsView.SummaryTextView();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_23BBDC270();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v136 = v143;
  v137 = v144;
  v138 = v145;
  LOBYTE(v139) = v146;
  unint64_t v96 = v18;
  long long v140 = v147;
  long long v141 = v148;
  char v142 = v149;
  uint64_t v73 = sub_23BBDBC60();
  uint64_t v134 = WitnessTable;
  uint64_t v135 = MEMORY[0x263F18C10];
  uint64_t v74 = swift_getWitnessTable();
  uint64_t v97 = v73;
  uint64_t v98 = v74;
  (*(void (**)(long long *, long long *, uint64_t))(*(void *)(v73 - 8) + 16))(&v150, &v136, v73);
  swift_bridgeObjectRelease();
  uint64_t v75 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v75);
  *(&v95 - 4) = v18;
  *(&v95 - 3) = v71;
  unint64_t v94 = v95;
  uint64_t v76 = swift_getWitnessTable();
  uint64_t v77 = swift_getWitnessTable();
  uint64_t v132 = v76;
  uint64_t v133 = v77;
  uint64_t v78 = swift_getWitnessTable();
  int v79 = v107;
  sub_23BBDC320();
  sub_23BBDBFD0();
  sub_23BB7E3E0();
  uint64_t v131 = v78;
  uint64_t v80 = v109;
  uint64_t v81 = swift_getWitnessTable();
  uint64_t v82 = v106;
  sub_23BBDC270();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v79, v80);
  uint64_t v129 = v81;
  uint64_t v130 = MEMORY[0x263F18C10];
  uint64_t v83 = v113;
  uint64_t v109 = swift_getWitnessTable();
  uint64_t v84 = v112;
  int v85 = *(void (**)(void, void, void))(v112 + 16);
  uint64_t v86 = v110;
  v85(v110, v82, v83);
  uint64_t v87 = *(void (**)(void, void))(v84 + 8);
  v87(v82, v83);
  uint64_t v88 = v119;
  sub_23BB81484(v118, v119, (uint64_t (*)(void))sub_23BB8129C);
  *(void *)&long long v136 = v88;
  uint64_t v89 = v116;
  unint64_t v90 = v96;
  v101(v116, v120, v96);
  uint64_t v127 = 0x4024000000000000;
  char v128 = 0;
  *((void *)&v136 + 1) = v89;
  v137 = &v127;
  long long v143 = v150;
  long long v144 = (uint64_t *)v151;
  long long v145 = v152;
  char v146 = v153;
  long long v147 = v154;
  long long v148 = v155;
  char v149 = v156;
  v138 = &v143;
  char v91 = v111;
  v85(v111, v86, v83);
  unsigned __int8 v139 = v91;
  v126[0] = v115;
  v126[1] = v90;
  v126[2] = MEMORY[0x263F1B6B0];
  v126[3] = v97;
  v126[4] = v83;
  uint64_t v121 = sub_23BB81578(&qword_26AEBC450, sub_23BB8129C, (void (*)(void))sub_23BB8153C);
  unint64_t v122 = v117;
  uint64_t v123 = MEMORY[0x263F1B698];
  uint64_t v124 = v98;
  uint64_t v125 = v109;
  sub_23BB7E124((uint64_t)&v136, 5uLL, (uint64_t)v126);
  v87(v86, v83);
  char v92 = v102;
  v102(v120, v90);
  sub_23BB81424(v118, (uint64_t (*)(void))sub_23BB8129C);
  v87(v91, v83);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v92(v89, v90);
  return sub_23BB81424(v119, (uint64_t (*)(void))sub_23BB8129C);
}

uint64_t sub_23BB7F3F8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a4;
  uint64_t v7 = type metadata accessor for SleepWidgetResultsView.NoDataStringView();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v52 = (char *)&v50 - v11;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v12 = type metadata accessor for SleepWidgetResultsView.SummaryValueStringView();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (uint64_t *)((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  uint64_t v51 = (char *)&v50 - v17;
  uint64_t v18 = sub_23BBDBEE0();
  uint64_t v57 = *(void *)(v18 - 8);
  uint64_t v58 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v56 = (char *)&v50 - v19;
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  char v22 = SleepWidgetModelProviding.hasDataLastNight.getter(v20, v21);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  if (v22)
  {
    uint64_t v25 = SleepWidgetModelProviding.summaryDurationText.getter(v23, v24);
    uint64_t v27 = v26;
    uint64_t v28 = a1[3];
    uint64_t v29 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v28);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 24))(v28, v29);
    sub_23BB7F970(v25, v27, v30, v31, v16);
    swift_getWitnessTable();
    uint64_t v32 = *(void (**)(char *, uint64_t *, uint64_t))(v13 + 16);
    uint64_t v33 = v51;
    v32(v51, v16, v12);
    uint64_t v34 = *(void (**)(uint64_t *, uint64_t))(v13 + 8);
    v34(v16, v12);
    v32((char *)v16, (uint64_t *)v33, v12);
    swift_getWitnessTable();
    uint64_t v35 = v56;
    sub_23BB7E02C((uint64_t)v16, v12);
    v34(v16, v12);
    v34((uint64_t *)v33, v12);
  }
  else
  {
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
    uint64_t v37 = a1[3];
    uint64_t v38 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v37);
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 24))(v37, v38);
    sub_23BB7FA40(v36, v39, v40, v10);
    swift_getWitnessTable();
    uint64_t v42 = v52;
    uint64_t v41 = v53;
    uint64_t v43 = *(void (**)(char *, uint64_t *, uint64_t))(v53 + 16);
    v43(v52, v10, v7);
    uint64_t v44 = *(void (**)(uint64_t *, uint64_t))(v41 + 8);
    v44(v10, v7);
    v43((char *)v10, (uint64_t *)v42, v7);
    swift_getWitnessTable();
    uint64_t v35 = v56;
    sub_23BB7E2E8((uint64_t)v10, v12, v7);
    v44(v10, v7);
    v44((uint64_t *)v42, v7);
  }
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v60 = WitnessTable;
  uint64_t v61 = v46;
  uint64_t v47 = v58;
  swift_getWitnessTable();
  uint64_t v48 = v57;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v59, v35, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v35, v47);
}

uint64_t sub_23BB7F970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = swift_getKeyPath();
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for SleepWidgetResultsView.SummaryValueStringView();
  uint64_t v11 = (uint64_t *)((char *)a5 + *(int *)(result + 36));
  *uint64_t v11 = a1;
  v11[1] = a2;
  uint64_t v12 = (uint64_t *)((char *)a5 + *(int *)(result + 40));
  void *v12 = a3;
  v12[1] = a4;
  return result;
}

uint64_t sub_23BB7FA40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = swift_getKeyPath();
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for SleepWidgetResultsView.NoDataStringView();
  *(uint64_t *)((char *)a4 + *(int *)(result + 36)) = a1;
  uint64_t v9 = (uint64_t *)((char *)a4 + *(int *)(result + 40));
  void *v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t sub_23BB7FB00()
{
  sub_23BB570F4();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_23BBDC170();
  uint64_t v2 = v1;
  char v4 = v3 & 1;
  sub_23BBDC300();
  uint64_t v5 = sub_23BBDC140();
  uint64_t v7 = v6;
  char v9 = v8;
  swift_release();
  sub_23BB71078(v0, v2, v4);
  swift_bridgeObjectRelease();
  sub_23BBDC0F0();
  uint64_t v10 = sub_23BBDC150();
  uint64_t v12 = v11;
  LOBYTE(v2) = v13;
  swift_release();
  LOBYTE(v0) = v2 & 1;
  sub_23BB71078(v5, v7, v9 & 1);
  swift_bridgeObjectRelease();
  sub_23BBDC090();
  uint64_t v14 = sub_23BBDC130();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  sub_23BB71078(v10, v12, v0);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  sub_23BB82E60(0);
  sub_23BB82F94();
  sub_23BBDC260();
  swift_bridgeObjectRelease();
  sub_23BB71078(v14, v16, v18);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BB7FD40()
{
  return sub_23BB7FB00();
}

uint64_t sub_23BB7FD4C(uint64_t a1)
{
  uint64_t v3 = sub_23BBDB720();
  MEMORY[0x270FA5388](v3 - 8);
  sub_23BB7FEB8((uint64_t)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_23BBDC160();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  v16[2] = v5;
  v16[3] = v7;
  char v17 = v11;
  uint64_t v18 = v9;
  uint64_t v19 = KeyPath;
  uint64_t v20 = 0x3FE999999999999ALL;
  char v13 = (void *)(v1 + *(int *)(a1 + 40));
  uint64_t v14 = v13[1];
  v16[0] = *v13;
  v16[1] = v14;
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  sub_23BB82E94();
  sub_23BB82FDC();
  sub_23BBDC260();
  swift_bridgeObjectRelease();
  sub_23BB71078(v5, v7, v11);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BB7FEB8@<X0>(uint64_t a1@<X8>)
{
  sub_23BB81E84(0, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v88 = &v71[-v3];
  uint64_t v89 = sub_23BBDC120();
  uint64_t v86 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v87 = &v71[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v79 = (void *)sub_23BBDC570();
  uint64_t v74 = *(v79 - 1);
  uint64_t v5 = MEMORY[0x270FA5388](v79);
  uint64_t v76 = &v71[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v75 = &v71[-v7];
  sub_23BB83114(0, &qword_26AEBC820, (void (*)(void))sub_23BB830C0);
  uint64_t v93 = v8;
  uint64_t v95 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  unint64_t v90 = &v71[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  int v72 = &v71[-v11];
  sub_23BB83114(0, &qword_26AEBC828, (void (*)(void))sub_23BB83174);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v71[-v15];
  uint64_t v17 = sub_23BBDB790();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v80 = &v71[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v83 = &v71[-v22];
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v25 = &v71[-v24];
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  char v92 = &v71[-v27];
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = &v71[-v28];
  swift_bridgeObjectRetain();
  sub_23BBDB780();
  uint64_t v94 = a1;
  sub_23BBDB730();
  sub_23BBDB780();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v73 = sub_23BB83174();
  sub_23BBDB750();
  swift_release();
  uint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v18 + 8);
  uint64_t v82 = v29;
  uint64_t v31 = v29;
  uint64_t v32 = v17;
  v30(v31, v17);
  sub_23BBDC030();
  sub_23BBDC090();
  uint64_t v33 = sub_23BBDC0C0();
  swift_release();
  uint64_t v98 = v33;
  sub_23BBDB760();
  swift_release();
  uint64_t v34 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
  uint64_t v81 = v16;
  uint64_t v85 = v13;
  uint64_t v35 = v13;
  uint64_t v36 = v74;
  uint64_t v84 = v14 + 8;
  uint64_t v77 = v34;
  v34(v16, v35);
  uint64_t v96 = swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v37 = sub_23BB830C0();
  uint64_t v38 = v72;
  unint64_t v78 = v37;
  sub_23BBDB750();
  swift_release();
  uint64_t v39 = v25;
  uint64_t v40 = v32;
  uint64_t v91 = v18 + 8;
  uint64_t v41 = v30;
  v30(v39, v32);
  uint64_t v42 = v75;
  uint64_t v43 = v79;
  sub_23BB77CD4((uint64_t)v75);
  uint64_t v44 = v76;
  sub_23BBDC550();
  char v45 = sub_23BBDC540();
  uint64_t v46 = *(void (**)(unsigned char *, void *))(v36 + 8);
  v46(v44, v43);
  if (v45)
  {
    uint64_t v47 = sub_23BBDC300();
  }
  else
  {
    id v48 = objc_msgSend(self, sel_systemGrayColor);
    uint64_t v47 = MEMORY[0x23ECD0920](v48);
  }
  uint64_t v49 = v47;
  v46(v42, v43);
  uint64_t v98 = v49;
  uint64_t v50 = v93;
  sub_23BBDB760();
  swift_release();
  uint64_t v51 = *(void **)(v95 + 8);
  v95 += 8;
  int v79 = v51;
  ((void (*)(unsigned char *, uint64_t))v51)(v38, v50);
  sub_23BBDB710();
  uint64_t v52 = v80;
  sub_23BBDB780();
  uint64_t v53 = swift_getKeyPath();
  *(void *)&v71[-16] = MEMORY[0x270FA5388](v53);
  swift_getKeyPath();
  uint64_t v54 = v81;
  sub_23BBDB750();
  swift_release();
  uint64_t v55 = v41;
  v41(v52, v40);
  uint64_t v57 = v86;
  uint64_t v56 = v87;
  uint64_t v58 = v89;
  (*(void (**)(unsigned char *, void, uint64_t))(v86 + 104))(v87, *MEMORY[0x263F1A6F8], v89);
  uint64_t v59 = *MEMORY[0x263F1A610];
  uint64_t v60 = sub_23BBDC060();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = (uint64_t)v88;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v61 + 104))(v88, v59, v60);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, v60);
  sub_23BBDC0B0();
  sub_23BB83368(v62, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  (*(void (**)(unsigned char *, uint64_t))(v57 + 8))(v56, v58);
  uint64_t v63 = sub_23BBDC050();
  swift_release();
  uint64_t v98 = v63;
  uint64_t v64 = v83;
  uint64_t v65 = v85;
  sub_23BBDB760();
  swift_release();
  v77(v54, v65);
  uint64_t v66 = swift_getKeyPath();
  *(void *)&v71[-16] = MEMORY[0x270FA5388](v66);
  swift_getKeyPath();
  uint64_t v67 = v90;
  sub_23BBDB750();
  swift_release();
  v55(v64, v40);
  uint64_t v98 = sub_23BBDC2F0();
  uint64_t v68 = v82;
  uint64_t v69 = v93;
  sub_23BBDB760();
  swift_release();
  ((void (*)(unsigned char *, uint64_t))v79)(v67, v69);
  sub_23BBDB700();
  v55(v68, v40);
  return ((uint64_t (*)(unsigned char *, uint64_t))v55)(v92, v40);
}

uint64_t sub_23BB808A8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return sub_23BBDC6C0() & 1;
}

uint64_t sub_23BB80908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23BB8343C();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v8 = sub_23BBDBF80();
  unsigned __int8 v9 = sub_23BBDBFA0();
  char v10 = sub_23BBDBF90();
  sub_23BBDBF90();
  if (sub_23BBDBF90() != v8) {
    char v10 = sub_23BBDBF90();
  }
  sub_23BBDBF90();
  if (sub_23BBDBF90() != v9) {
    char v10 = sub_23BBDBF90();
  }
  *uint64_t v7 = v10;
  sub_23BB83AA0();
  sub_23BB80A34(v2, *(void *)(a1 + 16), *(void *)(a1 + 24), (uint64_t)&v7[*(int *)(v11 + 44)]);
  return sub_23BB83D5C((uint64_t)v7, a2, (uint64_t (*)(void))sub_23BB8343C);
}

uint64_t sub_23BB80A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v15[0] = a4;
  uint64_t v7 = type metadata accessor for SleepWidgetResultsView.NoDataStringView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v15 - v10;
  v15[1] = *(void *)(a1 + *(int *)(v9 + 36));
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, v11, v7);
  sub_23BB83558(0, &qword_26AEBC4B0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  sub_23BB835A4(0);
  sub_23BB83774();
  sub_23BB838A4(&qword_26AEBC9E0, sub_23BB835A4, (void (*)(void))sub_23BB83930, (void (*)(void))sub_23BB83A6C);
  swift_bridgeObjectRetain();
  return sub_23BBDC3D0();
}

uint64_t sub_23BB80C5C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v69 = a3;
  uint64_t v70 = a4;
  uint64_t v67 = a2;
  uint64_t v71 = a5;
  uint64_t v63 = sub_23BBDC570();
  uint64_t v65 = *(void *)(v63 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v63);
  uint64_t v66 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v64 = (uint64_t)v60 - v8;
  uint64_t v62 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A620];
  uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BB81E84(0, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v60 - v10;
  uint64_t v12 = sub_23BBDC120();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB835A4(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v68 = (char *)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[1];
  uint64_t v74 = *a1;
  uint64_t v75 = v18;
  sub_23BB570F4();
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_23BBDC170();
  uint64_t v21 = v20;
  v60[1] = v22;
  char v24 = v23 & 1;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F1A6C8], v12);
  uint64_t v25 = *MEMORY[0x263F1A610];
  uint64_t v26 = sub_23BBDC060();
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 104))(v11, v25, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v11, 0, 1, v26);
  sub_23BBDC0B0();
  sub_23BB83368((uint64_t)v11, &qword_26AEBC4A8, v62, v61);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_23BBDC010();
  swift_release();
  uint64_t v28 = sub_23BBDC150();
  uint64_t v30 = v29;
  LOBYTE(v12) = v31;
  swift_release();
  char v32 = v24;
  uint64_t v33 = v63;
  sub_23BB71078(v19, v21, v32);
  swift_bridgeObjectRelease();
  sub_23BBDC070();
  uint64_t v34 = sub_23BBDC130();
  uint64_t v36 = v35;
  char v38 = v37;
  uint64_t v62 = v39;
  uint64_t v40 = v30;
  uint64_t v41 = v65;
  sub_23BB71078(v28, v40, v12 & 1);
  uint64_t v42 = v67;
  swift_bridgeObjectRelease();
  uint64_t v43 = v64;
  sub_23BB77CD4(v64);
  uint64_t v44 = v66;
  sub_23BBDC550();
  LOBYTE(v13) = sub_23BBDC540();
  char v45 = *(void (**)(char *, uint64_t))(v41 + 8);
  v45(v44, v33);
  if (v13)
  {
    sub_23BBDC300();
  }
  else
  {
    id v46 = objc_msgSend(self, sel_secondaryLabelColor);
    MEMORY[0x23ECD0920](v46);
  }
  v45((char *)v43, v33);
  uint64_t v47 = sub_23BBDC140();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v66 = v50;
  char v53 = v52 & 1;
  sub_23BB71078(v34, v36, v38 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v55 = swift_getKeyPath();
  uint64_t v74 = v47;
  uint64_t v75 = v49;
  char v76 = v53;
  uint64_t v77 = v51;
  uint64_t v78 = KeyPath;
  uint64_t v79 = 1;
  char v80 = 0;
  __int16 v81 = 257;
  uint64_t v82 = v55;
  uint64_t v83 = 0x3FE999999999999ALL;
  uint64_t v56 = (uint64_t *)(v42 + *(int *)(type metadata accessor for SleepWidgetResultsView.NoDataStringView() + 40));
  uint64_t v57 = v56[1];
  uint64_t v72 = *v56;
  uint64_t v73 = v57;
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  sub_23BB8364C();
  sub_23BB83930();
  uint64_t v58 = (uint64_t)v68;
  sub_23BBDC260();
  swift_bridgeObjectRelease();
  sub_23BB71078(v47, v49, v53);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_23BB83D5C(v58, v71, (uint64_t (*)(void))sub_23BB835A4);
}

void sub_23BB8129C(uint64_t a1)
{
}

void sub_23BB812D8(uint64_t a1)
{
}

void sub_23BB81314(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t type metadata accessor for SleepWidgetResultsView.SummaryTextView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SleepWidgetResultsView.SummaryValueStringView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SleepWidgetResultsView.NoDataStringView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_23BB813C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB81410@<X0>(uint64_t a1@<X8>)
{
  return sub_23BB7E8E8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BB81424(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BB81484(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_23BB81530@<X0>(uint64_t a1@<X8>)
{
  return sub_23BB7F3F8(*(void **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_23BB8153C()
{
  return sub_23BB81578(&qword_26AEBC438, sub_23BB812D8, (void (*)(void))sub_23BB815F8);
}

uint64_t sub_23BB81578(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB815F8()
{
  return sub_23BB813C8(&qword_26AEBC430, (void (*)(uint64_t))type metadata accessor for HeaderView);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

void sub_23BB8165C()
{
}

uint64_t *sub_23BB8166C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC570();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 40);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
    unint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23BB817D0(uint64_t a1)
{
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_23BBDC570();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_23BB818AC(void *a1, void *a2, uint64_t a3)
{
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC570();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 40);
  *(void *)((char *)a1 + *(int *)(a3 + 36)) = *(void *)((char *)a2 + *(int *)(a3 + 36));
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_23BB819C0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB83368((uint64_t)a1, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    sub_23BB81E84(0, &qword_26AEBC950, v6, v7);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + *(int *)(a3 + 36)) = *(void *)((char *)a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  void *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_23BB81B24(char *a1, char *a2, uint64_t a3)
{
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC570();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = *(int *)(a3 + 40);
  *(void *)&a1[*(int *)(a3 + 36)] = *(void *)&a2[*(int *)(a3 + 36)];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  return a1;
}

char *sub_23BB81C2C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB83368((uint64_t)a1, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    sub_23BB81E84(0, &qword_26AEBC950, v6, v7);
    uint64_t v9 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_23BBDC570();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  *(void *)&a1[*(int *)(a3 + 36)] = *(void *)&a2[*(int *)(a3 + 36)];
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BB81D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB81D94);
}

uint64_t sub_23BB81D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23BB81E84(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

void sub_23BB81E84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BB81EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB81EFC);
}

void sub_23BB81EFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23BB81E84(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  }
}

void sub_23BB81FE8()
{
}

void sub_23BB81FF4()
{
  sub_23BB81E84(319, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_23BB820C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC570();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = *(int *)(a3 + 40);
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = (uint64_t *)((char *)a1 + v10);
    uint64_t v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23BB8222C(uint64_t a1)
{
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_23BBDC570();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_23BB8230C(void *a1, void *a2, uint64_t a3)
{
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC570();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)((char *)a1 + v8);
  uint64_t v13 = (void *)((char *)a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_23BB82428(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB83368((uint64_t)a1, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    sub_23BB81E84(0, &qword_26AEBC950, v6, v7);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  void *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  void *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_23BB8259C(char *a1, char *a2, uint64_t a3)
{
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC570();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = *(int *)(a3 + 40);
  *(_OWORD *)&a1[*(int *)(a3 + 36)] = *(_OWORD *)&a2[*(int *)(a3 + 36)];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  return a1;
}

char *sub_23BB826A4(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB83368((uint64_t)a1, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    sub_23BB81E84(0, &qword_26AEBC950, v6, v7);
    uint64_t v9 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_23BBDC570();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BB82800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB82814);
}

uint64_t sub_23BB82814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23BB81E84(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_23BB82908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB8291C);
}

void sub_23BB8291C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23BB81E84(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36) + 8) = (a2 - 1);
  }
}

uint64_t sub_23BB82A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_23BB82A14()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_23BB82A50(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_23BB82A90(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *sub_23BB82B0C(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BB82B54(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23BB82B9C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_23BB82BDC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB82D84()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB82DC8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB82E0C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BB82E60(uint64_t a1)
{
}

void sub_23BB82E94()
{
  if (!qword_26AEBB9E0)
  {
    sub_23BB83558(255, (unint64_t *)&qword_26AEBBA28, MEMORY[0x263F8EF38], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBB9E0);
    }
  }
}

void sub_23BB82F18()
{
  if (!qword_26AEBBA58)
  {
    sub_23BB83558(255, &qword_26AEBBA80, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_23BBDBF50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBA58);
    }
  }
}

uint64_t sub_23BB82F94()
{
  return sub_23BB838A4(&qword_26AEBBA00, sub_23BB82E60, (void (*)(void))sub_23BB82FDC, (void (*)(void))sub_23BB8308C);
}

uint64_t sub_23BB82FDC()
{
  return sub_23BB839E8(&qword_26AEBB9D8, (void (*)(uint64_t))sub_23BB82E94, (void (*)(void))sub_23BB83010);
}

unint64_t sub_23BB83010()
{
  unint64_t result = qword_26AEBBA20;
  if (!qword_26AEBBA20)
  {
    sub_23BB83558(255, (unint64_t *)&qword_26AEBBA28, MEMORY[0x263F8EF38], MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBBA20);
  }
  return result;
}

uint64_t sub_23BB8308C()
{
  return sub_23BB813C8(&qword_26AEBBA50, (void (*)(uint64_t))sub_23BB82F18);
}

unint64_t sub_23BB830C0()
{
  unint64_t result = qword_26AEBC810;
  if (!qword_26AEBC810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC810);
  }
  return result;
}

void sub_23BB83114(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_23BBDB770();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_23BB83174()
{
  unint64_t result = qword_26AEBC818;
  if (!qword_26AEBC818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC818);
  }
  return result;
}

void sub_23BB831C8()
{
}

void sub_23BB831E8()
{
}

uint64_t sub_23BB83210()
{
  return 8;
}

uint64_t sub_23BB8321C()
{
  return swift_release();
}

uint64_t sub_23BB83224(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_23BB83230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23BB808A8(a1, a2, a3, sub_23BB83400) & 1;
}

uint64_t sub_23BB83260(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, sub_23BB83400);
}

void *sub_23BB83278(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_23BB83284()
{
}

void sub_23BB832A4()
{
}

uint64_t sub_23BB832CC()
{
  return 8;
}

uint64_t sub_23BB832D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23BB808A8(a1, a2, a3, sub_23BB833C4) & 1;
}

uint64_t sub_23BB83308(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, sub_23BB833C4);
}

uint64_t keypath_hashTm(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return sub_23BBDC6A0();
}

uint64_t sub_23BB83368(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_23BB81E84(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_23BB833C4(uint64_t a1)
{
}

void sub_23BB83400(uint64_t a1)
{
}

void sub_23BB8343C()
{
  if (!qword_26AEBC960)
  {
    sub_23BB834A0();
    sub_23BB837F0();
    unint64_t v0 = sub_23BBDBBD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC960);
    }
  }
}

void sub_23BB834A0()
{
  if (!qword_26AEBCB00)
  {
    sub_23BB83558(255, &qword_26AEBC4B0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    sub_23BB835A4(255);
    sub_23BB83774();
    unint64_t v0 = sub_23BBDC3E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBCB00);
    }
  }
}

void sub_23BB83558(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_23BB835A4(uint64_t a1)
{
}

void sub_23BB835D8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_23BBDBC60();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_23BB8364C()
{
  if (!qword_26AEBC470)
  {
    sub_23BB836D8(255);
    sub_23BB83558(255, (unint64_t *)&qword_26AEBBA28, MEMORY[0x263F8EF38], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC470);
    }
  }
}

void sub_23BB836D8(uint64_t a1)
{
}

void sub_23BB83714()
{
  if (!qword_26AEBC448)
  {
    sub_23BB82F18();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC448);
    }
  }
}

unint64_t sub_23BB83774()
{
  unint64_t result = qword_26AEBC4B8;
  if (!qword_26AEBC4B8)
  {
    sub_23BB83558(255, &qword_26AEBC4B0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC4B8);
  }
  return result;
}

unint64_t sub_23BB837F0()
{
  unint64_t result = qword_26AEBCAF8;
  if (!qword_26AEBCAF8)
  {
    sub_23BB834A0();
    sub_23BB838A4(&qword_26AEBC9E0, sub_23BB835A4, (void (*)(void))sub_23BB83930, (void (*)(void))sub_23BB83A6C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCAF8);
  }
  return result;
}

uint64_t sub_23BB838A4(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB83930()
{
  return sub_23BB838A4(&qword_26AEBC468, (void (*)(uint64_t))sub_23BB8364C, (void (*)(void))sub_23BB83978, (void (*)(void))sub_23BB83010);
}

uint64_t sub_23BB83978()
{
  return sub_23BB81578(&qword_26AEBC458, sub_23BB836D8, (void (*)(void))sub_23BB839B4);
}

uint64_t sub_23BB839B4()
{
  return sub_23BB839E8(&qword_26AEBC440, (void (*)(uint64_t))sub_23BB83714, (void (*)(void))sub_23BB8308C);
}

uint64_t sub_23BB839E8(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB83A6C()
{
  return sub_23BB813C8(&qword_268A7DE00, MEMORY[0x263F1A470]);
}

void sub_23BB83AA0()
{
  if (!qword_26AEBC968)
  {
    sub_23BB834A0();
    sub_23BB83B0C();
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC968);
    }
  }
}

unint64_t sub_23BB83B0C()
{
  unint64_t result = qword_268A7DE08;
  if (!qword_268A7DE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DE08);
  }
  return result;
}

uint64_t sub_23BB83B60()
{
  uint64_t v1 = *(void *)(type metadata accessor for SleepWidgetResultsView.NoDataStringView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  sub_23BB81E84(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_23BBDC570();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t sub_23BB83CC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for SleepWidgetResultsView.NoDataStringView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return sub_23BB80C5C(a1, v8, v5, v6, a2);
}

uint64_t sub_23BB83D5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB83DC4()
{
  return sub_23BB838A4(&qword_26AEBC9D0, sub_23BB83E20, (void (*)(void))sub_23BB82F94, (void (*)(void))sub_23BB83A6C);
}

void sub_23BB83E20(uint64_t a1)
{
}

uint64_t sub_23BB83E54()
{
  return sub_23BB838A4(&qword_26AEBC9A0, sub_23BB83EB0, (void (*)(void))sub_23BB82FDC, (void (*)(void))sub_23BB83A6C);
}

void sub_23BB83EB0(uint64_t a1)
{
}

uint64_t sub_23BB83EE4()
{
  return sub_23BB813C8(&qword_26AEBC958, (void (*)(uint64_t))sub_23BB8343C);
}

__n128 SleepStageWidgetView.init(model:)@<Q0>(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  __n128 v10 = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  unsigned __int8 v4 = a1[1].n128_u8[8];
  *a2 = swift_getKeyPath();
  sub_23BB85638(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = (int *)type metadata accessor for SleepStageWidgetView();
  uint64_t v6 = (uint64_t *)((char *)a2 + v5[5]);
  *uint64_t v6 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (char *)a2 + v5[6];
  *(void *)uint64_t v7 = swift_getKeyPath();
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *((void *)v7 + 3) = 0;
  v7[32] = 0;
  uint64_t v8 = (__n128 *)((char *)a2 + v5[7]);
  __n128 result = v10;
  *uint64_t v8 = v10;
  v8[1].n128_u64[0] = v3;
  v8[1].n128_u8[8] = v4;
  return result;
}

uint64_t sub_23BB84050()
{
  return sub_23BBDBDF0();
}

uint64_t sub_23BB84090(uint64_t a1)
{
  uint64_t v2 = sub_23BBDC5A0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  sub_23BB86F84();
  sub_23BBDBE00();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

id SleepStageWidgetView.viewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepStageWidgetView() + 28);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  uint64_t v6 = *(void **)(v3 + 16);
  LOBYTE(v3) = *(unsigned char *)(v3 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v3;
  return sub_23BB5646C(v4, v5, v6);
}

uint64_t SleepStageWidgetView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v65 = a1;
  sub_23BB85638(0, &qword_26AEBCAA0, MEMORY[0x263F1FD10], MEMORY[0x263F1A418]);
  uint64_t v57 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v64 = (char *)&v49 - v3;
  uint64_t v4 = sub_23BBDC5A0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v49 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v49 - v12;
  sub_23BB8569C();
  uint64_t v55 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB848C8(v1, (uint64_t)v75);
  uint64_t v68 = v75[0];
  uint64_t v62 = v75[2];
  uint64_t v63 = v75[1];
  uint64_t v60 = v75[4];
  unint64_t v61 = v75[3];
  unsigned int v59 = v76;
  int v17 = v77;
  uint64_t v70 = sub_23BBDC280();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v54 = swift_getKeyPath();
  uint64_t v19 = _s13SleepWidgetUI0a5StageB4ViewV17supportedFamiliesSay0B3Kit0B6FamilyOGvgZ_0();
  uint64_t v20 = *(int *)(type metadata accessor for SleepStageWidgetView() + 20);
  uint64_t v53 = v1;
  uint64_t v51 = v1 + v20;
  sub_23BB77A10((uint64_t)v11);
  uint64_t v72 = *(void *)(v19 + 16);
  uint64_t v66 = v13;
  int v58 = v17;
  uint64_t v69 = KeyPath;
  uint64_t v56 = v16;
  if (!v72)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v30 = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v29 = v55;
    uint64_t v31 = v54;
    uint64_t v27 = v68;
LABEL_14:
    uint64_t v71 = v30;
    uint64_t v74 = v28;
    v28(v11, v4);
    swift_bridgeObjectRelease();
    sub_23BB77A10((uint64_t)v13);
    char v38 = v13;
    uint64_t v39 = (uint64_t *)v64;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v64[*(int *)(v57 + 28)], v38, v4);
    uint64_t *v39 = v31;
    uint64_t v40 = (uint64_t)v56;
    sub_23BB85940((uint64_t)v39, (uint64_t)&v56[*(int *)(v29 + 36)]);
    *(void *)uint64_t v40 = v27;
    uint64_t v41 = v27;
    uint64_t v42 = v62;
    uint64_t v43 = v63;
    *(void *)(v40 + 8) = v63;
    *(void *)(v40 + 16) = v42;
    uint64_t v44 = v60;
    unint64_t v45 = v61;
    *(void *)(v40 + 24) = v61;
    *(void *)(v40 + 32) = v44;
    uint64_t v46 = v59;
    *(_WORD *)(v40 + 40) = v59;
    char v47 = v58;
    *(unsigned char *)(v40 + 42) = v58;
    uint64_t v48 = v70;
    *(void *)(v40 + 48) = v69;
    *(void *)(v40 + 56) = v48;
    sub_23BB859D8(v41, v43, v42, v45, v44, v46, v47, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))sub_23BB859D4, (void (*)(uint64_t, void))sub_23BB631DC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23BB5646C);
    swift_retain();
    swift_retain();
    sub_23BB863D4((uint64_t)v39, &qword_26AEBCAA0, MEMORY[0x263F1A418]);
    v74(v66, v4);
    sub_23BB859D8(v68, v43, v42, v45, v44, v46, v47, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))sub_23BB85A20, (void (*)(uint64_t, void))sub_23BB63394, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23BB564C0);
    swift_release();
    swift_release();
    return sub_23BB85A9C(v40, v65);
  }
  unint64_t v21 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  v22(v8, v19 + v21, v4);
  unint64_t v23 = sub_23BB858E8();
  swift_bridgeObjectRetain();
  uint64_t v73 = v11;
  char v24 = sub_23BBDC6C0();
  uint64_t v52 = v5;
  uint64_t v26 = v5 + 8;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v71 = v26 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v25(v8, v4);
  if (v24)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v68;
    uint64_t v28 = v25;
    uint64_t v5 = v52;
    uint64_t v29 = v55;
    uint64_t v13 = v66;
    uint64_t v11 = v73;
LABEL_13:
    uint64_t v31 = v54;
    uint64_t v30 = v71;
    goto LABEL_14;
  }
  unint64_t v67 = v23;
  uint64_t v50 = v19;
  uint64_t v74 = v25;
  if (v72 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v68;
    uint64_t v5 = v52;
    uint64_t v29 = v55;
    uint64_t v13 = v66;
LABEL_12:
    uint64_t v11 = v73;
    uint64_t v28 = v74;
    goto LABEL_13;
  }
  uint64_t v32 = *(void *)(v52 + 72);
  unint64_t v33 = v50 + v32 + v21;
  uint64_t v34 = 1;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v22)(v8, v33, v4);
    uint64_t v36 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    char v37 = sub_23BBDC6C0();
    v74(v8, v4);
    if ((v37 & 1) == 0)
    {
      ++v34;
      v33 += v32;
      if (v36 != v72) {
        continue;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v66;
    uint64_t v27 = v68;
    uint64_t v5 = v52;
    uint64_t v29 = v55;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_23BB848C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v3 = sub_23BBDC5A0();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v45 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v51 = (char *)&v45 - v11;
  uint64_t v12 = _s13SleepWidgetUI0a5StageB4ViewV17supportedFamiliesSay0B3Kit0B6FamilyOGvgZ_0();
  uint64_t v13 = type metadata accessor for SleepStageWidgetView();
  uint64_t v49 = a1 + *(int *)(v13 + 20);
  sub_23BB77A10((uint64_t)v10);
  uint64_t v54 = *(void *)(v12 + 16);
  if (!v54)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v22 = v10;
    goto LABEL_7;
  }
  uint64_t v47 = v13;
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  v15(v7, v12 + v14, v3);
  unint64_t v16 = sub_23BB858E8();
  swift_bridgeObjectRetain();
  *(void *)&long long v55 = v10;
  unint64_t v17 = v16;
  LOBYTE(v16) = sub_23BBDC6C0();
  uint64_t v50 = v4;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v48 = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  *(void *)&long long v56 = v18;
  v18(v7, v3);
  if (v16)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = (void (*)(char *, uint64_t))v56;
    uint64_t v4 = v50;
    uint64_t v13 = v47;
    uint64_t v20 = v52;
    uint64_t v21 = (uint64_t)v51;
    ((void (*)(void, uint64_t))v56)(v55, v3);
    goto LABEL_15;
  }
  uint64_t v46 = v12;
  if (v54 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = (void (*)(char *, uint64_t))v56;
    uint64_t v4 = v50;
    uint64_t v13 = v47;
    uint64_t v22 = (char *)v55;
LABEL_7:
    uint64_t v20 = v52;
    uint64_t v21 = (uint64_t)v51;
LABEL_14:
    v19(v22, v3);
LABEL_15:
    swift_bridgeObjectRelease();
    sub_23BB77A10(v21);
    int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v21, v3);
    if (v28 == *MEMORY[0x263F1FCD8])
    {
      uint64_t v29 = a1 + *(int *)(v13 + 28);
      uint64_t v30 = *(void **)v29;
      uint64_t v31 = *(void **)(v29 + 8);
      uint64_t v32 = *(void **)(v29 + 16);
      unsigned __int8 v33 = *(unsigned char *)(v29 + 24);
      uint64_t KeyPath = swift_getKeyPath();
      long long v67 = (unint64_t)KeyPath;
      *(void *)uint64_t v68 = v30;
      *(void *)&v68[8] = v31;
      *(void *)&v68[16] = v32;
      *(_WORD *)&v68[24] = v33;
      sub_23BB5646C(v30, v31, v32);
      sub_23BB631DC(KeyPath, 0);
      sub_23BB5646C(v30, v31, v32);
      sub_23BB86EC8();
      sub_23BBDBED0();
      if (v66) {
        __int16 v35 = 256;
      }
      else {
        __int16 v35 = 0;
      }
      long long v57 = v62;
      long long v58 = v63;
      uint64_t v59 = v64;
      __int16 v60 = v35 | v65;
      char v61 = 1;
      sub_23BB85894(0, &qword_26AEBCA20);
      sub_23BB85894(0, &qword_26AEBCA30);
      sub_23BB86DA8();
      sub_23BB86E38();
      sub_23BBDBED0();
      sub_23BB63394(KeyPath, 0);
    }
    else
    {
      if (v28 == *MEMORY[0x263F1FD00])
      {
        uint64_t v36 = a1 + *(int *)(v13 + 28);
        uint64_t v30 = *(void **)v36;
        uint64_t v31 = *(void **)(v36 + 8);
        uint64_t v32 = *(void **)(v36 + 16);
        LOBYTE(v36) = *(unsigned char *)(v36 + 24);
        *(void *)&long long v67 = v30;
        *((void *)&v67 + 1) = v31;
        *(void *)uint64_t v68 = v32;
        *(_WORD *)&v68[8] = v36;
      }
      else
      {
        if (v28 != *MEMORY[0x263F1FD08])
        {
          long long v67 = 0u;
          memset(v68, 0, 25);
          v68[25] = 1;
          sub_23BB86EC8();
          sub_23BBDBED0();
          if (v66) {
            __int16 v44 = 256;
          }
          else {
            __int16 v44 = 0;
          }
          long long v57 = v62;
          long long v58 = v63;
          uint64_t v59 = v64;
          __int16 v60 = v44 | v65;
          char v61 = 1;
          sub_23BB85894(0, &qword_26AEBCA20);
          sub_23BB85894(0, &qword_26AEBCA30);
          sub_23BB86DA8();
          sub_23BB86E38();
          sub_23BBDBED0();
          long long v56 = v67;
          long long v55 = *(_OWORD *)v68;
          uint64_t v41 = *(void *)&v68[16];
          __int16 v42 = *(_WORD *)&v68[24];
          char v43 = v69;
          v19((char *)v21, v3);
          long long v40 = v55;
          long long v39 = v56;
          goto LABEL_28;
        }
        uint64_t v37 = a1 + *(int *)(v13 + 28);
        uint64_t v30 = *(void **)v37;
        uint64_t v31 = *(void **)(v37 + 8);
        uint64_t v32 = *(void **)(v37 + 16);
        LOBYTE(v37) = *(unsigned char *)(v37 + 24);
        *(void *)&long long v67 = v30;
        *((void *)&v67 + 1) = v31;
        *(void *)uint64_t v68 = v32;
        v68[8] = v37;
        v68[9] = 1;
      }
      sub_23BB5646C(v30, v31, v32);
      sub_23BB5646C(v30, v31, v32);
      sub_23BB574F0();
      sub_23BB549D4();
      sub_23BBDBED0();
      uint64_t v38 = 256;
      if (!BYTE9(v63)) {
        uint64_t v38 = 0;
      }
      long long v57 = v62;
      *(void *)&long long v58 = v63;
      *((void *)&v58 + 1) = v38 | BYTE8(v63);
      uint64_t v59 = 0;
      __int16 v60 = 0;
      char v61 = 0;
      sub_23BB85894(0, &qword_26AEBCA20);
      sub_23BB85894(0, &qword_26AEBCA30);
      sub_23BB86DA8();
      sub_23BB86E38();
      sub_23BBDBED0();
    }
    sub_23BB564C0((uint64_t)v30, v31, v32);
    long long v39 = v67;
    long long v40 = *(_OWORD *)v68;
    uint64_t v41 = *(void *)&v68[16];
    __int16 v42 = *(_WORD *)&v68[24];
    char v43 = v69;
LABEL_28:
    *(_OWORD *)uint64_t v20 = v39;
    *(_OWORD *)(v20 + 16) = v40;
    *(void *)(v20 + 32) = v41;
    *(_WORD *)(v20 + 40) = v42;
    *(unsigned char *)(v20 + 42) = v43;
    return;
  }
  unint64_t v53 = v17;
  uint64_t v45 = a1;
  uint64_t v23 = *(void *)(v50 + 72);
  unint64_t v24 = v46 + v23 + v14;
  uint64_t v25 = 1;
  while (1)
  {
    v15(v7, v24, v3);
    uint64_t v26 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    char v27 = sub_23BBDC6C0();
    ((void (*)(char *, uint64_t))v56)(v7, v3);
    if (v27)
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = v52;
      uint64_t v21 = (uint64_t)v51;
      a1 = v45;
      uint64_t v19 = (void (*)(char *, uint64_t))v56;
      uint64_t v4 = v50;
      uint64_t v13 = v47;
      uint64_t v22 = (char *)v55;
      goto LABEL_14;
    }
    ++v25;
    v24 += v23;
    if (v26 == v54)
    {
      swift_bridgeObjectRelease();
      a1 = v45;
      uint64_t v20 = v52;
      uint64_t v21 = (uint64_t)v51;
      uint64_t v19 = (void (*)(char *, uint64_t))v56;
      uint64_t v4 = v50;
      uint64_t v13 = v47;
      ((void (*)(void, uint64_t))v56)(v55, v3);
      goto LABEL_15;
    }
  }
  __break(1u);
}

uint64_t sub_23BB8510C()
{
  return sub_23BBDBD70();
}

uint64_t sub_23BB85130()
{
  return sub_23BBDBD70();
}

uint64_t type metadata accessor for SleepStageWidgetView()
{
  uint64_t result = qword_26AEBBB68;
  if (!qword_26AEBBB68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BB851A0()
{
  return sub_23BBDBDF0();
}

void sub_23BB851E4(uint64_t a1@<X8>)
{
  *(double *)a1 = MEMORY[0x23ECD0430]();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

void sub_23BB85214(uint64_t a1@<X8>)
{
  *(double *)a1 = MEMORY[0x23ECD0430]();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t _s13SleepWidgetUI0a5StageB4ViewV17supportedFamiliesSay0B3Kit0B6FamilyOGvgZ_0()
{
  v23[3] = *MEMORY[0x263EF8340];
  uint64_t v0 = sub_23BBDBBA0();
  uint64_t v19 = *(void *)(v0 - 8);
  uint64_t v20 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB85638(0, (unint64_t *)&qword_26AEBBCF8, MEMORY[0x263F1FD10], MEMORY[0x263F8E0F8]);
  uint64_t v3 = sub_23BBDC5A0();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23BBDD2A0;
  uint64_t v8 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
  v8(v7 + v6, *MEMORY[0x263F1FD00], v3);
  v8(v7 + v6 + v5, *MEMORY[0x263F1FD08], v3);
  uint64_t v22 = v7;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23BBDD290;
  v8(v9 + v6, *MEMORY[0x263F1FCD8], v3);
  sub_23BB86FD8(v9);
  sub_23BBDBB80();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = sub_23BBDBB90();
  os_log_type_t v11 = sub_23BBDC850();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v23[0] = v13;
    *(_DWORD *)uint64_t v12 = 136446466;
    uint64_t v21 = sub_23BBD0430(0xD000000000000014, 0x800000023BBDE700, v23);
    sub_23BBDC950();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = MEMORY[0x23ECD0E20](v14, v3);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_23BBD0430(v15, v17, v23);
    sub_23BBDC950();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BB52000, v10, v11, "[%{public}s] supportedFamilies: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v13, -1, -1);
    MEMORY[0x23ECD1880](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v2, v20);
  swift_beginAccess();
  return v22;
}

void sub_23BB85638(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_23BB8569C()
{
  if (!qword_26AEBC9B8)
  {
    sub_23BB85734();
    sub_23BB85638(255, &qword_26AEBCAA0, MEMORY[0x263F1FD10], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC9B8);
    }
  }
}

void sub_23BB85734()
{
  if (!qword_26AEBC988)
  {
    sub_23BB85638(255, &qword_26AEBCAC0, (uint64_t (*)(uint64_t))sub_23BB857FC, MEMORY[0x263F1B480]);
    sub_23BB85638(255, &qword_26AEBBA40, (uint64_t (*)(uint64_t))sub_23BB67588, MEMORY[0x263F1A418]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC988);
    }
  }
}

void sub_23BB857FC()
{
  if (!qword_26AEBCA70)
  {
    sub_23BB85894(255, &qword_26AEBCA20);
    sub_23BB85894(255, &qword_26AEBCA30);
    unint64_t v0 = sub_23BBDBEE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBCA70);
    }
  }
}

void sub_23BB85894(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_23BBDBEE0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t sub_23BB858E8()
{
  unint64_t result = qword_26AEBCB28;
  if (!qword_26AEBCB28)
  {
    sub_23BBDC5A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCB28);
  }
  return result;
}

uint64_t sub_23BB85940(uint64_t a1, uint64_t a2)
{
  sub_23BB85638(0, &qword_26AEBCAA0, MEMORY[0x263F1FD10], MEMORY[0x263F1A418]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB859D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t), void (*a9)(uint64_t, void), uint64_t (*a10)(uint64_t, uint64_t, uint64_t))
{
  if (a7) {
    return sub_23BB85A24(a1, a2, a3, a4, a5, a6, BYTE1(a6) & 1, a9, a10);
  }
  return a8(a1, a2, a3, a4, (a4 >> 8) & 1);
}

uint64_t sub_23BB85A24(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void (*a8)(uint64_t, void), uint64_t (*a9)(uint64_t, uint64_t, uint64_t))
{
  if ((a7 & 1) == 0)
  {
    a8(result, a2 & 1);
    return a9(a3, a4, a5);
  }
  return result;
}

uint64_t sub_23BB85A9C(uint64_t a1, uint64_t a2)
{
  sub_23BB8569C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB85B00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepStageWidgetView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23BB85638(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC5A0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    os_log_type_t v11 = (uint64_t *)((char *)a2 + v9);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *((void *)v15 + 1);
    uint64_t v18 = *((void *)v15 + 2);
    uint64_t v19 = *((void *)v15 + 3);
    char v20 = v15[32];
    sub_23BB79A78(*(void *)v15, v17, v18, v19, v20);
    *(void *)uint64_t v14 = v16;
    *((void *)v14 + 1) = v17;
    *((void *)v14 + 2) = v18;
    *((void *)v14 + 3) = v19;
    v14[32] = v20;
    uint64_t v21 = a3[7];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    if (*(void *)v23)
    {
      unint64_t v24 = (void *)*((void *)v23 + 1);
      uint64_t v25 = (void *)*((void *)v23 + 2);
      *(void *)uint64_t v22 = *(void *)v23;
      *((void *)v22 + 1) = v24;
      *((void *)v22 + 2) = v25;
      swift_bridgeObjectRetain();
      id v26 = v24;
      id v27 = v25;
    }
    else
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *((void *)v22 + 2) = *((void *)v23 + 2);
    }
    v22[24] = v23[24];
  }
  return a1;
}

void destroy for SleepStageWidgetView(uint64_t a1, int *a2)
{
  sub_23BB85638(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + a2[6];
  sub_23BB79DF8(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(unsigned char *)(v7 + 32));
  uint64_t v8 = a1 + a2[7];
  if (*(void *)v8)
  {
    swift_bridgeObjectRelease();

    uint64_t v9 = *(void **)(v8 + 16);
  }
}

void *initializeWithCopy for SleepStageWidgetView(void *a1, void *a2, int *a3)
{
  sub_23BB85638(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC5A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_23BBDC5A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *((void *)v13 + 1);
  uint64_t v16 = *((void *)v13 + 2);
  uint64_t v17 = *((void *)v13 + 3);
  char v18 = v13[32];
  sub_23BB79A78(*(void *)v13, v15, v16, v17, v18);
  *(void *)uint64_t v12 = v14;
  *((void *)v12 + 1) = v15;
  *((void *)v12 + 2) = v16;
  *((void *)v12 + 3) = v17;
  v12[32] = v18;
  uint64_t v19 = a3[7];
  char v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  if (*(void *)v21)
  {
    uint64_t v22 = (void *)*((void *)v21 + 1);
    uint64_t v23 = (void *)*((void *)v21 + 2);
    *(void *)char v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    *((void *)v20 + 2) = v23;
    swift_bridgeObjectRetain();
    id v24 = v22;
    id v25 = v23;
  }
  else
  {
    *(_OWORD *)char v20 = *(_OWORD *)v21;
    *((void *)v20 + 2) = *((void *)v21 + 2);
  }
  v20[24] = v21[24];
  return a1;
}

void *assignWithCopy for SleepStageWidgetView(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB863D4((uint64_t)a1, &qword_26AEBBC40, MEMORY[0x263F185C8]);
    sub_23BB85638(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], v6);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    sub_23BB863D4((uint64_t)a1 + v8, &qword_26AEBBC40, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      void *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)v14;
  uint64_t v16 = *((void *)v14 + 1);
  uint64_t v17 = *((void *)v14 + 2);
  uint64_t v18 = *((void *)v14 + 3);
  char v19 = v14[32];
  sub_23BB79A78(*(void *)v14, v16, v17, v18, v19);
  uint64_t v20 = *(void *)v13;
  uint64_t v21 = *((void *)v13 + 1);
  uint64_t v22 = *((void *)v13 + 2);
  uint64_t v23 = *((void *)v13 + 3);
  char v24 = v13[32];
  *(void *)uint64_t v13 = v15;
  *((void *)v13 + 1) = v16;
  *((void *)v13 + 2) = v17;
  *((void *)v13 + 3) = v18;
  v13[32] = v19;
  sub_23BB79DF8(v20, v21, v22, v23, v24);
  uint64_t v25 = a3[7];
  id v26 = (char *)a1 + v25;
  id v27 = (char *)a2 + v25;
  uint64_t v28 = *(void *)((char *)a2 + v25);
  if (*(void *)((char *)a1 + v25))
  {
    if (v28)
    {
      *(void *)id v26 = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v29 = (void *)*((void *)v26 + 1);
      uint64_t v30 = (void *)*((void *)v27 + 1);
      *((void *)v26 + 1) = v30;
      id v31 = v30;

      uint64_t v32 = (void *)*((void *)v26 + 2);
      unsigned __int8 v33 = (void *)*((void *)v27 + 2);
      *((void *)v26 + 2) = v33;
      id v34 = v33;
    }
    else
    {
      sub_23BB547F0((uint64_t)a1 + v25);
      uint64_t v39 = *((void *)v27 + 2);
      *(_OWORD *)id v26 = *(_OWORD *)v27;
      *((void *)v26 + 2) = v39;
    }
  }
  else if (v28)
  {
    *(void *)id v26 = v28;
    __int16 v35 = (void *)*((void *)v27 + 1);
    *((void *)v26 + 1) = v35;
    uint64_t v36 = (void *)*((void *)v27 + 2);
    *((void *)v26 + 2) = v36;
    swift_bridgeObjectRetain();
    id v37 = v35;
    id v38 = v36;
  }
  else
  {
    long long v40 = *(_OWORD *)v27;
    *((void *)v26 + 2) = *((void *)v27 + 2);
    *(_OWORD *)id v26 = v40;
  }
  v26[24] = v27[24];
  return a1;
}

uint64_t sub_23BB863D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  sub_23BB85638(0, a2, MEMORY[0x263F1FD10], a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

char *initializeWithTake for SleepStageWidgetView(char *a1, char *a2, int *a3)
{
  sub_23BB85638(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC5A0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_23BBDC5A0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  long long v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  v15[32] = v16[32];
  uint64_t v18 = &a1[v14];
  char v19 = &a2[v14];
  *(_OWORD *)(v18 + 9) = *(_OWORD *)(v19 + 9);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  return a1;
}

char *assignWithTake for SleepStageWidgetView(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB863D4((uint64_t)a1, &qword_26AEBBC40, MEMORY[0x263F185C8]);
    sub_23BB85638(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], v6);
    uint64_t v8 = v7;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = sub_23BBDC5A0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    sub_23BB863D4((uint64_t)&a1[v10], &qword_26AEBBC40, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_23BBDC5A0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v8 - 8) + 64));
    }
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  char v17 = v16[32];
  uint64_t v18 = *(void *)v15;
  uint64_t v19 = *((void *)v15 + 1);
  uint64_t v20 = *((void *)v15 + 2);
  uint64_t v21 = *((void *)v15 + 3);
  char v22 = v15[32];
  long long v23 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v23;
  v15[32] = v17;
  sub_23BB79DF8(v18, v19, v20, v21, v22);
  uint64_t v24 = a3[7];
  uint64_t v25 = (uint64_t)&a1[v24];
  id v26 = &a2[v24];
  if (!*(void *)&a1[v24]) {
    goto LABEL_12;
  }
  if (!*(void *)v26)
  {
    sub_23BB547F0(v25);
LABEL_12:
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    *(void *)(v25 + 16) = *((void *)v26 + 2);
    goto LABEL_13;
  }
  *(void *)uint64_t v25 = *(void *)v26;
  swift_bridgeObjectRelease();
  id v27 = *(void **)(v25 + 8);
  *(void *)(v25 + 8) = *((void *)v26 + 1);

  uint64_t v28 = *(void **)(v25 + 16);
  *(void *)(v25 + 16) = *((void *)v26 + 2);

LABEL_13:
  *(unsigned char *)(v25 + 24) = v26[24];
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStageWidgetView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB86888);
}

uint64_t sub_23BB86888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23BB85638(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SleepStageWidgetView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB86998);
}

void sub_23BB86998(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23BB85638(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = a2;
  }
}

void sub_23BB86A84()
{
  sub_23BB85638(319, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_23BB86B58()
{
  unint64_t result = qword_26AEBC9B0;
  if (!qword_26AEBC9B0)
  {
    sub_23BB8569C();
    sub_23BB86BF4();
    sub_23BB86F1C(&qword_26AEBCA98, &qword_26AEBCAA0, MEMORY[0x263F1FD10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC9B0);
  }
  return result;
}

unint64_t sub_23BB86BF4()
{
  unint64_t result = qword_26AEBC980;
  if (!qword_26AEBC980)
  {
    sub_23BB85734();
    sub_23BB86C90();
    sub_23BB86F1C((unint64_t *)&qword_26AEBBA38, &qword_26AEBBA40, (uint64_t (*)(uint64_t))sub_23BB67588);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC980);
  }
  return result;
}

unint64_t sub_23BB86C90()
{
  unint64_t result = qword_26AEBCAB8;
  if (!qword_26AEBCAB8)
  {
    sub_23BB85638(255, &qword_26AEBCAC0, (uint64_t (*)(uint64_t))sub_23BB857FC, MEMORY[0x263F1B480]);
    sub_23BB86D30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCAB8);
  }
  return result;
}

unint64_t sub_23BB86D30()
{
  unint64_t result = qword_26AEBCA68;
  if (!qword_26AEBCA68)
  {
    sub_23BB857FC();
    sub_23BB86DA8();
    sub_23BB86E38();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCA68);
  }
  return result;
}

unint64_t sub_23BB86DA8()
{
  unint64_t result = qword_26AEBCA18;
  if (!qword_26AEBCA18)
  {
    sub_23BB85894(255, &qword_26AEBCA20);
    sub_23BB574F0();
    sub_23BB549D4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCA18);
  }
  return result;
}

unint64_t sub_23BB86E38()
{
  unint64_t result = qword_26AEBCA28;
  if (!qword_26AEBCA28)
  {
    sub_23BB85894(255, &qword_26AEBCA30);
    sub_23BB86EC8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCA28);
  }
  return result;
}

unint64_t sub_23BB86EC8()
{
  unint64_t result = qword_26AEBC8B0;
  if (!qword_26AEBC8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC8B0);
  }
  return result;
}

uint64_t sub_23BB86F1C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23BB85638(255, a2, a3, MEMORY[0x263F1A418]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BB86F84()
{
  unint64_t result = qword_26AEBC920;
  if (!qword_26AEBC920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC920);
  }
  return result;
}

uint64_t sub_23BB86FD8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_23BBAD12C(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(sub_23BBDC5A0() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t sub_23BB87188(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_23BBAD5F8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t sub_23BB872DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_23BBAD728(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[3 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[3 * v2] && (unint64_t)v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 24 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

void SleepDaySummaryResults.init(summaries:)(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  if (!(a1 >> 62))
  {
    int64_t v4 = *(char **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
LABEL_13:
    *a2 = a1;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v4;
    return;
  }
  swift_bridgeObjectRetain();
  int64_t v4 = (char *)sub_23BBDCB20();
  if (!v4) {
    goto LABEL_12;
  }
LABEL_3:
  int64_t v5 = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_15:
    id v6 = (id)MEMORY[0x23ECD1130](v5, a1);
LABEL_8:
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v7, sel_summaryFilteredToLastPeriod);
    if (v8)
    {
      unint64_t v9 = v8;
      uint64_t v10 = self;
      sub_23BB8AFE0(0, &qword_26AEBC0B8);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_23BBDE790;
      *(void *)(v11 + 32) = v9;
      sub_23BBDC7A0();
      sub_23BB8A620(0, &qword_26AEBC078);
      id v12 = v9;
      uint64_t v13 = (void *)sub_23BBDC770();
      swift_bridgeObjectRelease();
      int64_t v4 = (char *)objc_msgSend(v10, sel_sleepMetricsForDaySummaries_, v13);
    }
    else
    {
      int64_t v4 = 0;
    }
    goto LABEL_13;
  }
  if (((unint64_t)v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v6 = *(id *)(a1 + 8 * (void)v5 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_23BB87600@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_23BBDBBA0();
  int64_t v4 = *(void **)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v9 = (char *)&v47 - v8;
  unint64_t v11 = *v1;
  uint64_t v10 = (void *)v1[1];
  id v12 = (void *)v1[2];
  v52[0] = *v1;
  v52[1] = (uint64_t)v10;
  v52[2] = (uint64_t)v12;
  uint64_t v13 = (uint64_t)v52;
  if (!SleepDaySummaryResults.hasAnyDataInLastWeek.getter())
  {
    sub_23BBDBB80();
    unint64_t v18 = sub_23BBDBB90();
    os_log_type_t v19 = sub_23BBDC880();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v52[0] = v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      uint64_t v51 = sub_23BBD0430(0xD000000000000016, 0x800000023BBDE790, v52);
      sub_23BBDC950();
      _os_log_impl(&dword_23BB52000, v18, v19, "[%{public}s] no data in last week, returning nil", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v21, -1, -1);
      MEMORY[0x23ECD1880](v20, -1, -1);
    }

    uint64_t result = ((uint64_t (*)(char *, uint64_t))v4[1])(v7, v3);
    uint64_t v10 = 0;
    goto LABEL_45;
  }
  unint64_t v14 = v11 >> 62;
  if (!(v11 >> 62))
  {
    unint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v16 = -(uint64_t)v15;
    if (!__OFSUB__(0, v15)) {
      goto LABEL_4;
    }
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v13 = (uint64_t)v9;
  swift_bridgeObjectRetain_n();
  unint64_t v15 = sub_23BBDCB20();
  swift_bridgeObjectRelease();
  uint64_t v16 = -(uint64_t)v15;
  if (__OFSUB__(0, v15)) {
    goto LABEL_57;
  }
LABEL_4:
  uint64_t v50 = v9;
  if ((unint64_t)(v16 + 6) >= 7)
  {
    uint64_t v13 = v15 - 7;
    if (!__OFSUB__(v15, 7))
    {
      if ((uint64_t)v15 >= v13)
      {
        if (!v14) {
          goto LABEL_7;
        }
        goto LABEL_14;
      }
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v13 = 0;
  if (!v14)
  {
LABEL_7:
    uint64_t v17 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_15;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_23BBDCB20();
  swift_bridgeObjectRelease();
LABEL_15:
  if (v17 < v13)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v13 < 0)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v14)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = (char *)sub_23BBDCB20();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v9 = *(char **)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((uint64_t)v9 < (uint64_t)v15) {
    goto LABEL_60;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v49 = v4;
  if ((v11 & 0xC000000000000001) != 0 && v13 != v15)
  {
    if (v13 < v15)
    {
      sub_23BB8A620(0, &qword_26AEBC078);
      uint64_t v23 = v13;
      do
      {
        uint64_t v24 = v23 + 1;
        sub_23BBDCA90();
        uint64_t v23 = v24;
      }
      while (v15 != v24);
      goto LABEL_27;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
LABEL_27:
  uint64_t v48 = v3;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_23BBDCB30();
    unint64_t v9 = v25;
    uint64_t v13 = v26;
    unint64_t v15 = v27;
    swift_bridgeObjectRelease_n();
    if (v15) {
      goto LABEL_32;
    }
LABEL_31:
    unint64_t v28 = sub_23BB88D6C(v3, (uint64_t)v9, v13, v15);
    goto LABEL_38;
  }
  uint64_t v3 = v11 & 0xFFFFFFFFFFFFFF8;
  unint64_t v9 = (char *)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
  unint64_t v15 = (2 * v15) | 1;
  if ((v15 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_32:
  int64_t v4 = a1;
  sub_23BBDCBA0();
  swift_unknownObjectRetain_n();
  uint64_t v29 = swift_dynamicCastClass();
  if (!v29)
  {
    swift_unknownObjectRelease();
    uint64_t v29 = MEMORY[0x263F8EE78];
  }
  uint64_t v30 = *(void *)(v29 + 16);
  swift_release();
  if (__OFSUB__(v15 >> 1, v13)) {
    goto LABEL_67;
  }
  if (v30 != (v15 >> 1) - v13)
  {
LABEL_68:
    swift_unknownObjectRelease();
    a1 = v4;
    goto LABEL_31;
  }
  unint64_t v28 = swift_dynamicCastClass();
  if (!v28)
  {
    swift_unknownObjectRelease();
    unint64_t v28 = MEMORY[0x263F8EE78];
  }
LABEL_38:
  swift_unknownObjectRelease();
  id v31 = v12;
  swift_bridgeObjectRetain();
  uint64_t v32 = v10;
  uint64_t v10 = (void *)sub_23BB8A65C(v28, v11, (uint64_t)v10);

  swift_bridgeObjectRelease();
  if ((v28 & 0x8000000000000000) == 0 && (v28 & 0x4000000000000000) == 0)
  {
    uint64_t v33 = *(void *)(v28 + 16);
    goto LABEL_41;
  }
LABEL_62:
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_23BBDCB20();
  swift_release();
LABEL_41:
  id v34 = v50;
  uint64_t v35 = v33 - 7;
  if (v33 >= 7)
  {
    uint64_t result = swift_release();
LABEL_45:
    *a1 = v10;
    return result;
  }
  uint64_t v47 = a1;
  sub_23BBDBB80();
  swift_bridgeObjectRetain_n();
  uint64_t v36 = sub_23BBDBB90();
  os_log_type_t v37 = sub_23BBDC880();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    v52[0] = v39;
    *(_DWORD *)uint64_t v38 = 136446466;
    uint64_t v51 = sub_23BBD0430(0xD000000000000016, 0x800000023BBDE790, v52);
    sub_23BBDC950();
    *(_WORD *)(v38 + 12) = 2082;
    uint64_t v51 = v33;
    uint64_t v40 = sub_23BBDCB60();
    uint64_t v51 = sub_23BBD0430(v40, v41, v52);
    sub_23BBDC950();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BB52000, v36, v37, "[%{public}s] lastSummaries.count = %{public}s, prepending empty bars", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v39, -1, -1);
    MEMORY[0x23ECD1880](v38, -1, -1);

    ((void (*)(char *, uint64_t))v49[1])(v50, v48);
  }
  else
  {

    swift_release_n();
    ((void (*)(char *, uint64_t))v49[1])(v34, v48);
  }
  uint64_t result = swift_release();
  a1 = v47;
  if (__OFSUB__(7, v33))
  {
    __break(1u);
  }
  else if (((7 - v33) & 0x8000000000000000) == 0)
  {
    unint64_t v42 = v10[2];
    uint64_t v43 = MEMORY[0x263F8EE78];
    do
    {
      int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v42 >= v10[3] >> 1) {
        uint64_t v10 = sub_23BBAD4B0(isUniquelyReferenced_nonNull_native, v42 + 1, 1, v10);
      }
      swift_arrayDestroy();
      uint64_t v44 = v10[2];
      uint64_t result = (uint64_t)memmove(v10 + 10, v10 + 4, 48 * v44);
      unint64_t v42 = v44 + 1;
      v10[2] = v44 + 1;
      v10[4] = v43;
      v10[5] = v43;
      v10[6] = v43;
      v10[7] = v43;
      v10[8] = v43;
      v10[9] = v43;
    }
    while (!__CFADD__(v35++, 1));
    goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t SleepDaySummaryResults.lastSleepDuration.getter()
{
  return sub_23BB87DD4((SEL *)&selRef_sleepDuration);
}

uint64_t SleepDaySummaryResults.lastInBedDuration.getter()
{
  return sub_23BB87DD4((SEL *)&selRef_inBedDuration);
}

uint64_t sub_23BB87DD4(SEL *a1)
{
  if (*(void *)(v1 + 8) && ([*(id *)(v1 + 8) *a1], v2 > COERCE_DOUBLE(1))) {
    return *(void *)&v2;
  }
  else {
    return 0;
  }
}

id SleepDaySummaryResults.sleepDurationForLastPeriod.getter()
{
  return sub_23BB87E3C((SEL *)&selRef_averageSleepDuration);
}

id SleepDaySummaryResults.inBedDurationForLastPeriod.getter()
{
  return sub_23BB87E3C((SEL *)&selRef_averageInBedDuration);
}

id sub_23BB87E3C(SEL *a1)
{
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  id result = [*(id *)(v1 + 16) *a1];
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  objc_msgSend(result, sel__value);
  double v5 = v4;

  if (v5 > COERCE_DOUBLE(1)) {
    return *(id *)&v5;
  }
  else {
    return 0;
  }
}

BOOL SleepDaySummaryResults.hasAnyDataOnLastDay.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  BOOL result = 0;
  if (v1)
  {
    objc_msgSend(*(id *)(v0 + 8), sel_sleepDuration);
    if (v2 > COERCE_DOUBLE(1) && v2 > 0.0) {
      return 1;
    }
    objc_msgSend(v1, sel_inBedDuration);
    if (v3 > COERCE_DOUBLE(1) && v3 > 0.0) {
      return 1;
    }
  }
  return result;
}

BOOL SleepDaySummaryResults.hasAnyDataInLastWeek.getter()
{
  uint64_t v3 = *v1;
  uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
  double v5 = (void *)((unint64_t)v3 >> 62);
  if ((unint64_t)v3 >> 62) {
    goto LABEL_49;
  }
  unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v7 = -(uint64_t)v6;
  if (__OFSUB__(0, v6)) {
    goto LABEL_54;
  }
LABEL_3:
  if ((unint64_t)(v7 + 6) >= 7)
  {
    uint64_t v0 = v6 - 7;
    if (!__OFSUB__(v6, 7))
    {
      if ((uint64_t)v6 >= v0)
      {
        if (!v5) {
          goto LABEL_6;
        }
        goto LABEL_10;
      }
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v0 = 0;
  if (!v5)
  {
LABEL_6:
    uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_11;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_23BBDCB20();
  swift_bridgeObjectRelease();
LABEL_11:
  if (v8 >= v0)
  {
    if (v0 < 0) {
      goto LABEL_56;
    }
    if (v5)
    {
      swift_bridgeObjectRetain();
      int64_t v2 = sub_23BBDCB20();
      swift_bridgeObjectRelease();
    }
    else
    {
      int64_t v2 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v2 < (uint64_t)v6) {
      goto LABEL_57;
    }
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_58;
    }
    if ((v3 & 0xC000000000000001) == 0 || v0 == v6)
    {
LABEL_23:
      if (v5)
      {
        swift_bridgeObjectRetain();
        int64_t v2 = sub_23BBDCB30();
        double v5 = v11;
        uint64_t v0 = v12;
        unint64_t v6 = v13;
        swift_bridgeObjectRelease_n();
        if (v6) {
          goto LABEL_28;
        }
      }
      else
      {
        int64_t v2 = v3 & 0xFFFFFFFFFFFFFF8;
        double v5 = (void *)((v3 & 0xFFFFFFFFFFFFFF8) + 32);
        unint64_t v6 = (2 * v6) | 1;
        if (v6)
        {
LABEL_28:
          sub_23BBDCBA0();
          swift_unknownObjectRetain_n();
          uint64_t v14 = swift_dynamicCastClass();
          if (!v14)
          {
            swift_unknownObjectRelease();
            uint64_t v14 = MEMORY[0x263F8EE78];
          }
          uint64_t v15 = *(void *)(v14 + 16);
          swift_release();
          if (!__OFSUB__(v6 >> 1, v0))
          {
            if (v15 == (v6 >> 1) - v0)
            {
              uint64_t v0 = swift_dynamicCastClass();
              if (!v0)
              {
                swift_unknownObjectRelease();
                uint64_t v0 = MEMORY[0x263F8EE78];
              }
              goto LABEL_34;
            }
            goto LABEL_68;
          }
LABEL_67:
          __break(1u);
LABEL_68:
          swift_unknownObjectRelease();
        }
      }
      uint64_t v0 = sub_23BB88D6C(v2, (uint64_t)v5, v0, v6);
LABEL_34:
      swift_unknownObjectRelease();
      if (v0 < 0 || (v0 & 0x4000000000000000) != 0) {
        goto LABEL_59;
      }
      uint64_t v3 = *(void *)(v0 + 16);
      swift_bridgeObjectRetain();
      if (v3) {
        goto LABEL_37;
      }
      goto LABEL_60;
    }
    if (v0 < v6)
    {
      sub_23BB8A620(0, &qword_26AEBC078);
      uint64_t v9 = v0;
      do
      {
        uint64_t v10 = v9 + 1;
        sub_23BBDCA90();
        uint64_t v9 = v10;
      }
      while (v6 != v10);
      goto LABEL_23;
    }
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  while (1)
  {
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_23BBDCB20();
    if (!v3) {
      break;
    }
LABEL_37:
    uint64_t v16 = 4;
    int64_t v2 = 0x263F0A780uLL;
    while (1)
    {
      id v17 = (v0 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECD1130](v16 - 4, v0) : *(id *)(v0 + 8 * v16);
      double v5 = v17;
      uint64_t v18 = v16 - 3;
      if (__OFADD__(v16 - 4, 1)) {
        break;
      }
      id v19 = objc_msgSend(v17, sel_periods);
      sub_23BB8A620(0, &qword_268A7DE10);
      unint64_t v20 = sub_23BBDC780();

      if (v20 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = sub_23BBDCB20();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      BOOL v22 = v21 > 0;
      if (v21 > 0) {
        goto LABEL_62;
      }

      ++v16;
      if (v18 == v3) {
        goto LABEL_61;
      }
    }
    __break(1u);
LABEL_49:
    if (v3 < 0) {
      uint64_t v0 = v3;
    }
    else {
      uint64_t v0 = v4;
    }
    swift_bridgeObjectRetain_n();
    unint64_t v6 = sub_23BBDCB20();
    swift_bridgeObjectRelease();
    uint64_t v7 = -(uint64_t)v6;
    if (!__OFSUB__(0, v6)) {
      goto LABEL_3;
    }
LABEL_54:
    __break(1u);
  }
LABEL_60:
  BOOL v22 = 0;
LABEL_61:
  double v5 = 0;
LABEL_62:
  swift_release_n();

  return v22;
}

unint64_t SleepDaySummaryResults.sleepSampleEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_23BBDB6B0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB88F10();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v1 + 8);
  if (!v10)
  {
    uint64_t v19 = sub_23BBDB860();
    unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    return v20(a1, 1, 1, v19);
  }
  id v11 = objc_msgSend(v10, sel_periods);
  sub_23BB8A620(0, &qword_268A7DE10);
  unint64_t v12 = sub_23BBDC780();

  if (!(v12 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_23BBDB860();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
    return sub_23BB88F68((uint64_t)v9, a1);
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_23BBDCB20();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_14;
  }
LABEL_4:
  unint64_t result = v13 - 1;
  if (__OFSUB__(v13, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_17:
    id v15 = (id)MEMORY[0x23ECD1130](result, v12);
    goto LABEL_9;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v15 = *(id *)(v12 + 8 * result + 32);
LABEL_9:
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(v16, sel_dateInterval);

    sub_23BBDB660();
    sub_23BBDB670();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v18 = sub_23BBDB860();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v9, 0, 1, v18);
    return sub_23BB88F68((uint64_t)v9, a1);
  }
  __break(1u);
  return result;
}

uint64_t HKSleepDaySummary.segments(_:highlightBehavior:)()
{
  id v1 = objc_msgSend(v0, sel_periods);
  sub_23BB8A620(0, &qword_268A7DE10);
  unint64_t v2 = sub_23BBDC780();

  uint64_t v3 = sub_23BB89FA0(v2, sub_23BB88FCC);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3[2];
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v7 = v3[v5++ + 4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23BB872DC(v7);
      swift_bridgeObjectRelease();
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_23BB88778(uint64_t a1, id a2, uint64_t a3, void *a4, int a5)
{
  id v9 = objc_msgSend(a2, sel_segments);
  sub_23BB8A620(0, &qword_268A7DE40);
  unint64_t v10 = sub_23BBDC780();

  swift_bridgeObjectRetain();
  unint64_t v11 = sub_23BB8AE60(v10, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v12 = a4;
  uint64_t v13 = sub_23BB8ACB8(v11, v12, a5, a1);
  swift_bridgeObjectRelease();

  return v13;
}

BOOL sub_23BB88870(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  sub_23BBDCBD0();
  sub_23BBDCBE0();
  uint64_t v4 = sub_23BBDCBF0();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_23BB88960@<X0>(id *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v39 = a5;
  uint64_t v38 = a4;
  int v44 = a3;
  id v45 = a2;
  uint64_t v43 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v43 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v43);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v13 = sub_23BBDB6B0();
  uint64_t v42 = v13;
  uint64_t v46 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v37 - v17;
  id v19 = objc_msgSend(*a1, sel_dateInterval);
  sub_23BBDB660();

  sub_23BBDB690();
  id v20 = objc_msgSend(a2, sel_dateInterval);
  sub_23BBDB660();

  sub_23BBDB690();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v46 + 8);
  v46 += 8;
  v21(v16, v13);
  sub_23BBDB800();
  uint64_t v23 = v22;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v25 = v43;
  v24(v10, v43);
  v24(v12, v25);
  uint64_t v40 = v18;
  sub_23BBDB670();
  id v26 = objc_msgSend(v45, sel_dateInterval);
  sub_23BBDB660();

  sub_23BBDB690();
  uint64_t v27 = v42;
  unint64_t v41 = (uint64_t (*)(char *, uint64_t))v21;
  v21(v16, v42);
  sub_23BBDB800();
  uint64_t v29 = v28;
  v24(v10, v25);
  v24(v12, v25);
  if (v44 != 2)
  {
    if (v44 == 1)
    {
      uint64_t result = v41(v40, v27);
      BOOL v31 = 1;
    }
    else
    {
      uint64_t result = v41(v40, v27);
      BOOL v31 = 0;
    }
    goto LABEL_9;
  }
  uint64_t v32 = v38;
  id v33 = objc_msgSend(v45, sel_periods);
  sub_23BB8A620(0, &qword_268A7DE10);
  unint64_t v34 = sub_23BBDC780();

  if (v34 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_23BBDCB20();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t result = v41(v40, v27);
  if (!__OFSUB__(v35, 1))
  {
    BOOL v31 = v35 - 1 == v32;
LABEL_9:
    uint64_t v36 = v39;
    void *v39 = v23;
    v36[1] = v29;
    *((unsigned char *)v36 + 16) = v31;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_23BB88D6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        sub_23BB8A620(0, &qword_26AEBC078);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      sub_23BB8AFE0(0, &qword_26AEBC0B8);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

void sub_23BB88F10()
{
  if (!qword_26AEBB6E8)
  {
    sub_23BBDB860();
    unint64_t v0 = sub_23BBDC940();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBB6E8);
    }
  }
}

uint64_t sub_23BB88F68(uint64_t a1, uint64_t a2)
{
  sub_23BB88F10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB88FCC(uint64_t a1, void *a2)
{
  return sub_23BB88778(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(unsigned __int8 *)(v2 + 32));
}

uint64_t sub_23BB88FD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      sub_23BB8AFE0(0, (unint64_t *)&qword_26AEBC4C8);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t sub_23BB89158(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_23BBDCBD0();
  sub_23BBDCBE0();
  uint64_t v6 = sub_23BBDCBF0();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_23BB89520(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_23BB89278()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_23BB8A5BC();
  uint64_t result = sub_23BBDCA40();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      sub_23BBDCBD0();
      sub_23BBDCBE0();
      uint64_t result = sub_23BBDCBF0();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_23BB89520(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_23BB89278();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_23BB89670();
      goto LABEL_14;
    }
    sub_23BB89804();
  }
  uint64_t v8 = *v3;
  sub_23BBDCBD0();
  sub_23BBDCBE0();
  uint64_t result = sub_23BBDCBF0();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for HKCategoryValueSleepAnalysis(0);
      uint64_t result = sub_23BBDCBB0();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_23BB89670()
{
  uint64_t v1 = v0;
  sub_23BB8A5BC();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_23BBDCA30();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23BB89804()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_23BB8A5BC();
  uint64_t result = sub_23BBDCA40();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    sub_23BBDCBD0();
    sub_23BBDCBE0();
    uint64_t result = sub_23BBDCBF0();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

int64_t sub_23BB89A7C(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_23BB89B60(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x23ECD10A0](a1, a2, v7);
      sub_23BB8A620(0, &qword_268A7DE18);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (sub_23BBDC9E0() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_23BBDC9F0();
  sub_23BB8A620(0, &qword_268A7DE18);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v17;
  swift_unknownObjectRelease();
  uint64_t v8 = sub_23BBDC910();
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = sub_23BBDC920();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_26;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v14 = sub_23BBDC920();
    }
    while ((v14 & 1) == 0);
  }

LABEL_20:
  int64_t v15 = *(void **)(*(void *)(a4 + 48) + 8 * v6);
  id v16 = v15;
}

uint64_t sub_23BB89DD8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_23BB89E60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_23BB8A5BC();
    uint64_t v3 = sub_23BBDCA50();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      uint64_t v7 = *(void *)(v6 + 8 * v4);
      sub_23BBDCBD0();
      sub_23BBDCBE0();
      uint64_t result = sub_23BBDCBF0();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

void *sub_23BB89FA0(unint64_t a1, uint64_t (*a2)(uint64_t, id))
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = sub_23BBDCB20())
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    uint64_t v5 = 4;
    uint64_t v13 = v3;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23ECD1130](v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      uint64_t v9 = a2(v5 - 4, v6);

      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = sub_23BBAD390(0, v4[2] + 1, 1, v4);
        }
        unint64_t v11 = v4[2];
        unint64_t v10 = v4[3];
        if (v11 >= v10 >> 1) {
          uint64_t v4 = sub_23BBAD390((void *)(v10 > 1), v11 + 1, 1, v4);
        }
        v4[2] = v11 + 1;
        v4[v11 + 4] = v9;
        uint64_t v3 = v13;
      }
      ++v5;
      if (v8 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
LABEL_18:
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23BB8A128(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for HKCategoryValueSleepAnalysis(0);
  sub_23BB8A564();
  uint64_t result = sub_23BBDC800();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_23BB89158(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t _sSo28HKCategoryValueSleepAnalysisV0C8WidgetUIE15hk_asleepValuesShyABGvgZ_0()
{
  unint64_t v0 = HKCategoryValueSleepAnalysisAsleepValues();
  sub_23BB8A620(0, &qword_268A7DE18);
  sub_23BB8A47C();
  uint64_t v1 = sub_23BBDC7F0();

  unint64_t v2 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = sub_23BBDCA00();
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_21:
    uint64_t v24 = sub_23BB8A128(v7);
    swift_bridgeObjectRelease();
    return v24;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v29 = MEMORY[0x263F8EE78];
  sub_23BB56A64(0, v3 & ~(v3 >> 63), 0);
  if (v2)
  {
    uint64_t result = sub_23BBDC9C0();
    char v6 = 1;
  }
  else
  {
    uint64_t result = sub_23BB89DD8(v1);
    char v6 = v8 & 1;
  }
  uint64_t v26 = result;
  uint64_t v27 = v5;
  char v28 = v6;
  if ((v3 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        int64_t v15 = v26;
        uint64_t v14 = v27;
        char v16 = v28;
        sub_23BB89B60(v26, v27, v28, v1);
        uint64_t v18 = v17;
        id v19 = objc_msgSend(v17, sel_integerValue);

        uint64_t v20 = v29;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_23BB56A64(0, *(void *)(v20 + 16) + 1, 1);
          uint64_t v20 = v29;
        }
        unint64_t v22 = *(void *)(v20 + 16);
        unint64_t v21 = *(void *)(v20 + 24);
        if (v22 >= v21 >> 1)
        {
          uint64_t result = sub_23BB56A64(v21 > 1, v22 + 1, 1);
          uint64_t v20 = v29;
        }
        *(void *)(v20 + 16) = v22 + 1;
        *(void *)(v20 + 8 * v22 + 32) = v19;
        if (v2) {
          break;
        }
        int64_t v9 = sub_23BB89A7C(v15, v14, v16, v1);
        uint64_t v11 = v10;
        char v13 = v12;
        sub_23BB8A558(v15, v14, v16);
        uint64_t v26 = v9;
        uint64_t v27 = v11;
        char v28 = v13 & 1;
        if (!--v3) {
          goto LABEL_20;
        }
      }
      if ((v16 & 1) == 0) {
        goto LABEL_23;
      }
      if (sub_23BBDC9D0()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_23BB8A4E4();
      unint64_t v23 = (void (*)(char *, void))sub_23BBDC810();
      sub_23BBDCA20();
      v23(v25, 0);
      --v3;
    }
    while (v3);
LABEL_20:
    sub_23BB8A558(v26, v27, v28);
    swift_bridgeObjectRelease();
    uint64_t v7 = v29;
    goto LABEL_21;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for SleepDaySummaryResults()
{
  return &type metadata for SleepDaySummaryResults;
}

unint64_t sub_23BB8A47C()
{
  unint64_t result = qword_268A7DE20;
  if (!qword_268A7DE20)
  {
    sub_23BB8A620(255, &qword_268A7DE18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DE20);
  }
  return result;
}

void sub_23BB8A4E4()
{
  if (!qword_268A7DE28)
  {
    sub_23BB8A620(255, &qword_268A7DE18);
    sub_23BB8A47C();
    unint64_t v0 = sub_23BBDC820();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DE28);
    }
  }
}

uint64_t sub_23BB8A558(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_23BB8A564()
{
  unint64_t result = qword_268A7DE30;
  if (!qword_268A7DE30)
  {
    type metadata accessor for HKCategoryValueSleepAnalysis(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DE30);
  }
  return result;
}

void sub_23BB8A5BC()
{
  if (!qword_268A7DE38)
  {
    type metadata accessor for HKCategoryValueSleepAnalysis(255);
    sub_23BB8A564();
    unint64_t v0 = sub_23BBDCA60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DE38);
    }
  }
}

uint64_t sub_23BB8A620(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_23BB8A65C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_74;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  unint64_t v8 = MEMORY[0x263F8EE78];
  if (!v7) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v60 = MEMORY[0x263F8EE78];
  sub_23BB56A44(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = 0;
    uint64_t result = v60;
    uint64_t v54 = a3;
    unint64_t v55 = v6 & 0xC000000000000001;
    uint64_t v50 = (void *)(v6 + 32);
    int64x2_t v51 = vdupq_n_s64(v8);
    uint64_t v52 = v7;
    unint64_t v53 = (void *)v6;
    while (1)
    {
      if (v9 == v7) {
        goto LABEL_73;
      }
      uint64_t v56 = result;
      uint64_t v57 = v9;
      if (!v55) {
        break;
      }
      id v11 = (id)MEMORY[0x23ECD1130](v9, v6);
      if (a3) {
        goto LABEL_11;
      }
LABEL_12:
      sub_23BB89E60((uint64_t)&unk_26EF0E580);
      id v14 = objc_msgSend(v11, sel_periods);
      sub_23BB8A620(0, &qword_268A7DE10);
      unint64_t v15 = sub_23BBDC780();

      MEMORY[0x270FA5388](v16);
      uint64_t v17 = v4;
      unint64_t v6 = (unint64_t)sub_23BB89FA0(v15, (uint64_t (*)(uint64_t, id))sub_23BB8B028);
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(v6 + 16);
      long long v58 = v11;
      if (v18)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = 0;
        id v19 = (void *)v8;
        while (1)
        {
          uint64_t v20 = *(void *)(v6 + 8 * v4 + 32);
          a3 = *(void *)(v20 + 16);
          int64_t v21 = v19[2];
          unint64_t v22 = (char *)(v21 + a3);
          if (__OFADD__(v21, a3))
          {
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            swift_bridgeObjectRetain();
            uint64_t v7 = sub_23BBDCB20();
            swift_bridgeObjectRelease();
            goto LABEL_3;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
          if (isUniquelyReferenced_nonNull_native && (uint64_t)v22 <= v19[3] >> 1)
          {
            if (*(void *)(v20 + 16)) {
              goto LABEL_25;
            }
          }
          else
          {
            if (v21 <= (uint64_t)v22) {
              int64_t v24 = v21 + a3;
            }
            else {
              int64_t v24 = v21;
            }
            id v19 = sub_23BBAD728(isUniquelyReferenced_nonNull_native, v24, 1, v19);
            if (*(void *)(v20 + 16))
            {
LABEL_25:
              uint64_t v25 = v19[2];
              if ((v19[3] >> 1) - v25 < a3) {
                goto LABEL_69;
              }
              uint64_t v26 = &v19[3 * v25 + 4];
              if (v20 + 32 < (unint64_t)&v26[3 * a3] && (unint64_t)v26 < v20 + 32 + 24 * a3) {
                goto LABEL_76;
              }
              memcpy(v26, (const void *)(v20 + 32), 24 * a3);
              if (a3)
              {
                uint64_t v28 = v19[2];
                BOOL v29 = __OFADD__(v28, a3);
                uint64_t v30 = (char *)(v28 + a3);
                if (v29) {
                  goto LABEL_71;
                }
                v19[2] = v30;
              }
              goto LABEL_15;
            }
          }
          if (a3) {
            goto LABEL_66;
          }
LABEL_15:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v18 == ++v4)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v8 = MEMORY[0x263F8EE78];
            id v11 = v58;
            uint64_t v4 = v17;
            goto LABEL_36;
          }
        }
      }
      swift_bridgeObjectRelease();
      id v19 = (void *)v8;
LABEL_36:
      swift_bridgeObjectRelease();
      _sSo28HKCategoryValueSleepAnalysisV0C8WidgetUIE15hk_asleepValuesShyABGvgZ_0();
      id v31 = objc_msgSend(v11, sel_periods);
      unint64_t v32 = sub_23BBDC780();

      MEMORY[0x270FA5388](v33);
      uint64_t v34 = v4;
      uint64_t v35 = sub_23BB89FA0(v32, (uint64_t (*)(uint64_t, id))sub_23BB8B028);
      swift_bridgeObjectRelease();
      uint64_t v59 = v35[2];
      if (v59)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = 0;
        unint64_t v6 = v8;
        while (1)
        {
          a3 = (uint64_t)v35;
          uint64_t v36 = v35[v4 + 4];
          uint64_t v37 = *(void *)(v36 + 16);
          int64_t v38 = *(void *)(v6 + 16);
          int64_t v39 = v38 + v37;
          if (__OFADD__(v38, v37)) {
            goto LABEL_67;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v40 = (void *)swift_isUniquelyReferenced_nonNull_native();
          if (v40 && v39 <= *(void *)(v6 + 24) >> 1)
          {
            if (*(void *)(v36 + 16)) {
              goto LABEL_49;
            }
          }
          else
          {
            if (v38 <= v39) {
              int64_t v41 = v38 + v37;
            }
            else {
              int64_t v41 = v38;
            }
            unint64_t v6 = (unint64_t)sub_23BBAD728(v40, v41, 1, (void *)v6);
            if (*(void *)(v36 + 16))
            {
LABEL_49:
              uint64_t v42 = *(void *)(v6 + 16);
              if ((*(void *)(v6 + 24) >> 1) - v42 < v37) {
                goto LABEL_70;
              }
              uint64_t v43 = (void *)(v6 + 24 * v42 + 32);
              if (v36 + 32 < (unint64_t)&v43[3 * v37] && (unint64_t)v43 < v36 + 32 + 24 * v37) {
                goto LABEL_76;
              }
              memcpy(v43, (const void *)(v36 + 32), 24 * v37);
              if (v37)
              {
                uint64_t v45 = *(void *)(v6 + 16);
                BOOL v29 = __OFADD__(v45, v37);
                uint64_t v46 = v45 + v37;
                if (v29) {
                  goto LABEL_72;
                }
                *(void *)(v6 + 16) = v46;
              }
              goto LABEL_39;
            }
          }
          if (v37) {
            goto LABEL_68;
          }
LABEL_39:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v4;
          uint64_t v35 = (void *)a3;
          if (v59 == v4)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v8 = MEMORY[0x263F8EE78];
            uint64_t v4 = v34;
            goto LABEL_60;
          }
        }
      }

      swift_bridgeObjectRelease();
      unint64_t v6 = v8;
LABEL_60:
      swift_bridgeObjectRelease();
      uint64_t result = v56;
      unint64_t v48 = *(void *)(v56 + 16);
      unint64_t v47 = *(void *)(v56 + 24);
      if (v48 >= v47 >> 1)
      {
        sub_23BB56A44(v47 > 1, v48 + 1, 1);
        uint64_t result = v56;
      }
      uint64_t v9 = v57 + 1;
      *(void *)(result + 16) = v48 + 1;
      uint64_t v49 = (int64x2_t *)(result + 48 * v48);
      v49[2].i64[0] = (uint64_t)v19;
      v49[2].i64[1] = v6;
      v49[3] = v51;
      v49[4] = v51;
      uint64_t v7 = v52;
      unint64_t v6 = (unint64_t)v53;
      a3 = v54;
      if (v57 + 1 == v52) {
        return result;
      }
    }
    id v11 = (id)v50[v9];
    if (!a3) {
      goto LABEL_12;
    }
LABEL_11:
    sub_23BB8A620(0, &qword_26AEBC078);
    id v12 = v11;
    id v13 = (id)a3;
    sub_23BBDC920();

    goto LABEL_12;
  }
  __break(1u);
LABEL_76:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t sub_23BB8ACB8(unint64_t a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    if (!v7) {
      return v8;
    }
    uint64_t v25 = MEMORY[0x263F8EE78];
    uint64_t result = sub_23BB56A84(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v8 = v25;
    while (v7 != v10)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x23ECD1130](v10, a1);
      }
      else {
        id v11 = *(id *)(a1 + 8 * v10 + 32);
      }
      id v12 = v11;
      id v22 = v11;
      sub_23BB88960(&v22, a2, a3, a4, &v23);
      if (v5)
      {
        swift_release();

        return v8;
      }
      uint64_t v5 = 0;

      long long v13 = v23;
      char v14 = v24;
      uint64_t v25 = v8;
      unint64_t v16 = *(void *)(v8 + 16);
      unint64_t v15 = *(void *)(v8 + 24);
      if (v16 >= v15 >> 1)
      {
        long long v18 = v23;
        sub_23BB56A84(v15 > 1, v16 + 1, 1);
        long long v13 = v18;
        uint64_t v8 = v25;
      }
      ++v10;
      *(void *)(v8 + 16) = v16 + 1;
      uint64_t v17 = v8 + 24 * v16;
      *(_OWORD *)(v17 + 32) = v13;
      *(unsigned char *)(v17 + 48) = v14;
      if (v7 == v10) {
        return v8;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_23BBDCB20();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_23BB8AE60(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v12 = v3;
      unint64_t v5 = 0;
      unint64_t v6 = v3 & 0xC000000000000001;
      uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8;
      uint64_t v13 = v4;
      while (v6)
      {
        id v8 = (id)MEMORY[0x23ECD1130](v5, v3);
LABEL_9:
        uint64_t v9 = v8;
        unint64_t v10 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_15;
        }
        if (sub_23BB88870((uint64_t)objc_msgSend(v8, sel_category), a2))
        {
          sub_23BBDCAC0();
          sub_23BBDCAF0();
          sub_23BBDCB00();
          sub_23BBDCAD0();
          unint64_t v3 = v12;
          uint64_t v4 = v13;
        }
        else
        {
        }
        ++v5;
        if (v10 == v4) {
          return v14;
        }
      }
      if (v5 < *(void *)(v7 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v4 = sub_23BBDCB20();
      if (!v4) {
        return MEMORY[0x263F8EE78];
      }
    }
    id v8 = *(id *)(v3 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x263F8EE78];
}

void sub_23BB8AFE0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_23BBDCB70();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_23BB8B02C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v2 = sub_23BBDC570();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  id v8 = (char *)&v24 - v7;
  sub_23BB95250(0, &qword_268A7DE68, &qword_268A7DE70, (uint64_t (*)(uint64_t))sub_23BB94964, &qword_268A7DEB0);
  MEMORY[0x270FA5388](v9 - 8);
  id v11 = (char *)&v24 - v10;
  sub_23BB94BE8();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v11 = sub_23BBDBE20();
  *((void *)v11 + 1) = 0;
  v11[16] = 0;
  sub_23BB956D4(0, &qword_268A7DEC0, &qword_268A7DE70, (uint64_t (*)(uint64_t))sub_23BB94964);
  sub_23BB8B2B0(v1, (uint64_t)&v11[*(int *)(v16 + 44)]);
  sub_23BB77CD4((uint64_t)v8);
  sub_23BBDC550();
  char v17 = sub_23BBDC540();
  long long v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v6, v2);
  if (v17) {
    uint64_t v19 = sub_23BBDC2D0();
  }
  else {
    uint64_t v19 = sub_23BBDC280();
  }
  uint64_t v20 = v19;
  v18(v8, v2);
  uint64_t KeyPath = swift_getKeyPath();
  sub_23BB94C9C((uint64_t)v11, (uint64_t)v15);
  id v22 = (uint64_t *)&v15[*(int *)(v13 + 36)];
  *id v22 = KeyPath;
  v22[1] = v20;
  sub_23BB94D2C((uint64_t)v11);
  return sub_23BB99144((uint64_t)v15, v25, (uint64_t (*)(void))sub_23BB94BE8);
}

uint64_t sub_23BB8B2B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v84 = a1;
  uint64_t v91 = a2;
  uint64_t v78 = MEMORY[0x263F1FBF0];
  sub_23BB98788(0, &qword_268A7DEA8);
  uint64_t v89 = *(void *)(v2 - 8);
  uint64_t v90 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v85 = (char *)&v75 - v3;
  sub_23BB94B34(0, &qword_268A7DEA0, &qword_26AEBBA30, &qword_26AEBBA60, MEMORY[0x263F1A738]);
  uint64_t v88 = v4 - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v86 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v87 = (uint64_t)&v75 - v7;
  uint64_t v95 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A620];
  uint64_t v96 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BB98BB8(0, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v83 = (char *)&v75 - v9;
  uint64_t v82 = sub_23BBDC120();
  uint64_t v97 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v93 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_23BBDC350();
  uint64_t v11 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v79 = (void (*)(void))((char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  unsigned __int8 v77 = (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_23BBDBB40();
  uint64_t v13 = *((void *)v77 - 1);
  MEMORY[0x270FA5388](v77);
  unint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x263F1B570];
  sub_23BB98788(0, &qword_268A7DE98);
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  int64_t v21 = (char *)&v75 - v20;
  sub_23BB94A34();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB94A14(0);
  uint64_t v26 = v25 - 8;
  MEMORY[0x270FA5388](v25);
  uint64_t v75 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB949F4(0);
  uint64_t v81 = v28 - 8;
  uint64_t v29 = MEMORY[0x270FA5388](v28 - 8);
  uint64_t v92 = (uint64_t)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v94 = (uint64_t)&v75 - v31;
  sub_23BBDBB30();
  uint64_t v32 = sub_23BBDBB10();
  (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v13 + 8))(v15, v77);
  uint64_t v98 = v32;
  uint64_t v33 = v16;
  uint64_t v34 = MEMORY[0x263F1B558];
  sub_23BBDC1E0();
  swift_release();
  uint64_t v98 = v33;
  uint64_t v99 = v34;
  swift_getOpaqueTypeConformance2();
  sub_23BBDC220();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v35 = v79;
  uint64_t v36 = v80;
  (*(void (**)(void (*)(void), void, uint64_t))(v11 + 104))(v79, *MEMORY[0x263F1B538], v80);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v38 = (uint64_t)v75;
  int64_t v39 = (uint64_t *)&v75[*(int *)(v26 + 44)];
  sub_23BB98BB8(0, &qword_26AEBBA48, MEMORY[0x263F1B548], MEMORY[0x263F1A418]);
  (*(void (**)(char *, void (*)(void), uint64_t))(v11 + 16))((char *)v39 + *(int *)(v40 + 28), v35, v36);
  uint64_t *v39 = KeyPath;
  sub_23BB94EA4((uint64_t)v24, v38, (uint64_t (*)(void))sub_23BB94A34);
  (*(void (**)(void (*)(void), uint64_t))(v11 + 8))(v35, v36);
  sub_23BB94F0C((uint64_t)v24, (uint64_t (*)(void))sub_23BB94A34);
  LODWORD(v80) = *MEMORY[0x263F1A6C0];
  uint64_t v41 = v97;
  uint64_t v79 = *(void (**)(void))(v97 + 104);
  uint64_t v42 = v93;
  uint64_t v43 = v82;
  v79(v93);
  uint64_t v44 = sub_23BBDC060();
  uint64_t v45 = *(void *)(v44 - 8);
  unsigned __int8 v77 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
  uint64_t v78 = v45 + 56;
  uint64_t v46 = (uint64_t)v83;
  v77(v83, 1, 1, v44);
  sub_23BBDC0B0();
  sub_23BB8E9A8(v46, &qword_26AEBC4A8, v95, v96);
  unint64_t v47 = *(void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v97 = v41 + 8;
  unsigned __int16 v76 = v47;
  v47(v42, v43);
  sub_23BBDC010();
  swift_release();
  sub_23BBDC090();
  uint64_t v48 = sub_23BBDC0C0();
  swift_release();
  uint64_t v49 = swift_getKeyPath();
  uint64_t v50 = v92;
  sub_23BB94EA4(v38, v92, (uint64_t (*)(void))sub_23BB94A14);
  int64x2_t v51 = (uint64_t *)(v50 + *(int *)(v81 + 44));
  uint64_t *v51 = v49;
  v51[1] = v48;
  sub_23BB94F0C(v38, (uint64_t (*)(void))sub_23BB94A14);
  sub_23BB99144(v50, v94, (uint64_t (*)(void))sub_23BB949F4);
  uint64_t v52 = sub_23BBDC720();
  uint64_t v54 = v53;
  type metadata accessor for HeaderView(0);
  uint64_t v98 = v52;
  uint64_t v99 = v54;
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  sub_23BB570F4();
  uint64_t v55 = sub_23BBDC170();
  uint64_t v57 = v56;
  uint64_t v98 = v55;
  uint64_t v99 = v56;
  LOBYTE(v24) = v58 & 1;
  char v100 = v58 & 1;
  uint64_t v101 = v59;
  uint64_t v60 = v85;
  sub_23BBDC1E0();
  sub_23BB71078(v55, v57, (char)v24);
  swift_bridgeObjectRelease();
  char v61 = v93;
  ((void (*)(char *, void, uint64_t))v79)(v93, v80, v43);
  v77((char *)v46, 1, 1, v44);
  sub_23BBDC0B0();
  sub_23BB8E9A8(v46, &qword_26AEBC4A8, v95, v96);
  v76(v61, v43);
  sub_23BBDC010();
  swift_release();
  sub_23BBDC090();
  uint64_t v62 = sub_23BBDC0C0();
  swift_release();
  uint64_t v63 = swift_getKeyPath();
  uint64_t v65 = v89;
  uint64_t v64 = v90;
  uint64_t v66 = (uint64_t)v86;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v86, v60, v90);
  long long v67 = (uint64_t *)(v66 + *(int *)(v88 + 44));
  *long long v67 = v63;
  v67[1] = v62;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v60, v64);
  uint64_t v68 = v87;
  sub_23BB94FC4(v66, v87);
  uint64_t v69 = v94;
  uint64_t v70 = v92;
  sub_23BB94EA4(v94, v92, (uint64_t (*)(void))sub_23BB949F4);
  sub_23BB95048(v68, v66);
  uint64_t v71 = v91;
  sub_23BB94EA4(v70, v91, (uint64_t (*)(void))sub_23BB949F4);
  sub_23BB94964();
  sub_23BB95048(v66, v71 + *(int *)(v72 + 48));
  uint64_t v73 = MEMORY[0x263F1A738];
  sub_23BB950CC(v68, &qword_268A7DEA0, &qword_26AEBBA30, &qword_26AEBBA60, MEMORY[0x263F1A738]);
  sub_23BB94F0C(v69, (uint64_t (*)(void))sub_23BB949F4);
  sub_23BB950CC(v66, &qword_268A7DEA0, &qword_26AEBBA30, &qword_26AEBBA60, v73);
  return sub_23BB94F0C(v70, (uint64_t (*)(void))sub_23BB949F4);
}

uint64_t sub_23BB8BDF0@<X0>(uint64_t a1@<X8>)
{
  sub_23BB6D268();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB958EC();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB95B5C();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_23BBDBE60();
  int v15 = *(_DWORD *)(v1 + *(int *)(type metadata accessor for ScheduleOccurrenceSectionView(0) + 24));
  *(void *)uint64_t v8 = v14;
  *((void *)v8 + 1) = 0;
  v8[16] = (v15 & 8) != 0;
  sub_23BB95C60(0, &qword_268A7DF90, &qword_268A7DF58, (uint64_t (*)(uint64_t))sub_23BB959A0);
  sub_23BB8C124(v1, &v8[*(int *)(v16 + 44)]);
  uint64_t v17 = *MEMORY[0x263F18CC8];
  uint64_t v18 = sub_23BBDBC50();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v5, v17, v18);
  sub_23BB9546C(&qword_26AEBB9C8, MEMORY[0x263F18D80]);
  uint64_t result = sub_23BBDC6C0();
  if (result)
  {
    sub_23BB9546C(&qword_268A7DF88, (void (*)(uint64_t))sub_23BB958EC);
    sub_23BB9546C(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
    sub_23BBDC240();
    sub_23BB94F0C((uint64_t)v5, (uint64_t (*)(void))sub_23BB6D268);
    sub_23BB94F0C((uint64_t)v8, (uint64_t (*)(void))sub_23BB958EC);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v13, v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23BB8C124@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v79 = a2;
  uint64_t v74 = type metadata accessor for DateView(0);
  MEMORY[0x270FA5388](v74);
  uint64_t v73 = (uint64_t)v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB95A7C(0, &qword_268A7DF68, (void (*)(uint64_t))type metadata accessor for DateView, (void (*)(void))sub_23BB95B28);
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  unsigned __int16 v76 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v72 = (char *)v61 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v75 = (char *)v61 - v9;
  uint64_t v10 = (int *)type metadata accessor for ScheduleOccurrenceSectionView(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v70 = (uint64_t)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v68 = (uint64_t)v61 - v13;
  uint64_t v14 = sub_23BBDBC50();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)v61 - v19;
  uint64_t v21 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v81 = (uint64_t)v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (uint64_t)v61 - v24;
  uint64_t v67 = type metadata accessor for TimeView(0);
  uint64_t v26 = MEMORY[0x270FA5388](v67);
  uint64_t v71 = (uint64_t)v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)v61 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v84 = (uint64_t)v61 - v31;
  uint64_t v32 = v10[6];
  uint64_t v65 = v10[5];
  uint64_t v66 = v25;
  int v82 = *(unsigned __int8 *)(a1 + v65);
  uint64_t v80 = v32;
  uint64_t v69 = *(void *)(a1 + v32);
  sub_23BB94EA4(a1, v25, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  uint64_t v64 = a1 + v10[7];
  sub_23BB781C0((uint64_t)v20);
  uint64_t v33 = *(void (**)(void))(v15 + 104);
  unsigned int v63 = *MEMORY[0x263F18CB8];
  uint64_t v62 = (void (*)(char *, void, uint64_t))v33;
  v33(v18);
  v61[1] = sub_23BB9546C(&qword_26AEBB9C0, MEMORY[0x263F18D80]);
  LOBYTE(v25) = sub_23BBDC6B0();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v15 + 8);
  v34(v18, v14);
  v34(v20, v14);
  uint64_t v83 = a1;
  uint64_t v35 = a1;
  uint64_t v36 = v68;
  sub_23BB94EA4(v35, v68, type metadata accessor for ScheduleOccurrenceSectionView);
  v61[0] = v10;
  if (v25)
  {
    sub_23BB94F0C(v36, type metadata accessor for ScheduleOccurrenceSectionView);
    BOOL v37 = 0;
  }
  else
  {
    uint64_t v38 = *(void *)(v36 + v10[6]);
    sub_23BB94F0C(v36, type metadata accessor for ScheduleOccurrenceSectionView);
    BOOL v37 = (v38 & 4) == 0;
  }
  uint64_t v39 = v83;
  uint64_t v40 = *(void *)(v83 + v80);
  sub_23BB99144(v66, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  uint64_t v41 = v67;
  v30[*(int *)(v67 + 20)] = v82;
  v30[*(int *)(v41 + 24)] = v37;
  *(void *)&v30[*(int *)(v41 + 28)] = v40;
  sub_23BB99144((uint64_t)v30, v84, type metadata accessor for TimeView);
  sub_23BB94EA4(v39, v81, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  char v42 = *(unsigned char *)(v39 + v65);
  sub_23BB781C0((uint64_t)v20);
  v62(v18, v63, v14);
  LOBYTE(v40) = sub_23BBDC6B0();
  v34(v18, v14);
  v34(v20, v14);
  uint64_t v43 = v70;
  sub_23BB94EA4(v39, v70, type metadata accessor for ScheduleOccurrenceSectionView);
  if (v40)
  {
    sub_23BB94F0C(v43, type metadata accessor for ScheduleOccurrenceSectionView);
    BOOL v44 = 0;
  }
  else
  {
    uint64_t v45 = *(void *)(v43 + *(int *)(v61[0] + 24));
    sub_23BB94F0C(v43, type metadata accessor for ScheduleOccurrenceSectionView);
    BOOL v44 = (v45 & 4) == 0;
  }
  uint64_t v46 = *(void *)(v83 + v80);
  uint64_t v47 = v73;
  sub_23BB99144(v81, v73, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  uint64_t v48 = v74;
  *(unsigned char *)(v47 + *(int *)(v74 + 20)) = v42;
  *(unsigned char *)(v47 + *(int *)(v48 + 24)) = v44;
  *(void *)(v47 + *(int *)(v48 + 28)) = v46;
  sub_23BB95B28();
  uint64_t v49 = v72;
  sub_23BBDC1D0();
  sub_23BB94F0C(v47, type metadata accessor for DateView);
  uint64_t v51 = v77;
  uint64_t v50 = v78;
  uint64_t v52 = v75;
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v75, v49, v78);
  uint64_t v53 = v71;
  sub_23BB94EA4(v84, v71, type metadata accessor for TimeView);
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v55 = v76;
  v54(v76, v52, v50);
  uint64_t v56 = v79;
  *uint64_t v79 = v82;
  *((void *)v56 + 1) = v69;
  sub_23BB959A0();
  uint64_t v58 = v57;
  sub_23BB94EA4(v53, (uint64_t)&v56[*(int *)(v57 + 48)], type metadata accessor for TimeView);
  v54(&v56[*(int *)(v58 + 64)], v55, v50);
  uint64_t v59 = *(void (**)(char *, uint64_t))(v51 + 8);
  v59(v52, v50);
  sub_23BB94F0C(v84, type metadata accessor for TimeView);
  v59(v55, v50);
  return sub_23BB94F0C(v53, type metadata accessor for TimeView);
}

void *sub_23BB8C98C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23BB98BB8(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (void *)((char *)a1 + v9);
    uint64_t v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *sub_23BB8CB00(void *a1, void *a2, int *a3)
{
  sub_23BB98BB8(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC570();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  uint64_t v12 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_23BB8CC20(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB8E9A8((uint64_t)a1, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    sub_23BB98BB8(0, &qword_26AEBC950, v6, v7);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  void *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

char *sub_23BB8CD8C(char *a1, char *a2, int *a3)
{
  sub_23BB98BB8(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC570();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  return a1;
}

char *sub_23BB8CEA8(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB8E9A8((uint64_t)a1, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    sub_23BB98BB8(0, &qword_26AEBC950, v6, v7);
    uint64_t v9 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_23BBDC570();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v16] = a2[v16];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  return a1;
}

uint64_t sub_23BB8D008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t sub_23BB8D020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t type metadata accessor for BedTitleView(uint64_t a1)
{
  return sub_23BB5D6A4(a1, (uint64_t *)&unk_268A7DE48);
}

void sub_23BB8D058()
{
  sub_23BB98BB8(319, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_23BB8D138(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
    uint64_t v7 = v6[5];
    uint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = v6[6];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *((unsigned char *)v4 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    uint64_t v19 = v6[8];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v55(v20, v21, v22);
    uint64_t v24 = v6[9];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(void *)((char *)v4 + v24) = v25;
    uint64_t v26 = v6[10];
    uint64_t v27 = (void *)((char *)v4 + v26);
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    id v30 = v25;
    if (v29)
    {
      uint64_t v32 = *(void **)(v28 + 8);
      uint64_t v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = v6[11];
    uint64_t v36 = (char *)v4 + v35;
    BOOL v37 = (char *)a2 + v35;
    uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v55(v36, (uint64_t)v37, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = v6[12];
    uint64_t v41 = (char *)v4 + v40;
    char v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v55(v41, (uint64_t)v42, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = v6[13];
    uint64_t v45 = (char *)v4 + v44;
    uint64_t v46 = (char *)a2 + v44;
    if (v38((char *)a2 + v44, 1, v22))
    {
      sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v55(v45, (uint64_t)v46, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
    uint64_t v48 = a3[6];
    *((unsigned char *)v4 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(void *)((char *)v4 + v48) = *(uint64_t *)((char *)a2 + v48);
    uint64_t v49 = a3[7];
    uint64_t v50 = (void *)((char *)v4 + v49);
    uint64_t v51 = (uint64_t *)((char *)a2 + v49);
    sub_23BB98BB8(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v52 = sub_23BBDBC50();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
    }
    else
    {
      *uint64_t v50 = *v51;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_23BB8D7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = a1 + v4[5];
  uint64_t v6 = sub_23BBDB6D0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[6];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = a1 + v4[8];
  uint64_t v11 = sub_23BBDB860();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);

  uint64_t v14 = a1 + v4[10];
  if (*(void *)v14)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + v4[11];
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v16(v15, 1, v11)) {
    v13(v15, v11);
  }
  uint64_t v17 = a1 + v4[12];
  if (!v16(v17, 1, v11)) {
    v13(v17, v11);
  }
  uint64_t v18 = a1 + v4[13];
  if (!v16(v18, 1, v11)) {
    v13(v18, v11);
  }
  uint64_t v19 = a1 + *(int *)(a2 + 28);
  sub_23BB98BB8(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_23BBDBC50();
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8);
    return v21(v19, v20);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_23BB8DAD8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v17 = v5[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v53 = *(void (**)(void *, const void *, uint64_t))(v21 + 16);
  v53(v18, v19, v20);
  uint64_t v22 = v5[9];
  uint64_t v23 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v23;
  uint64_t v24 = v5[10];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = a2 + v24;
  uint64_t v27 = *(void *)(a2 + v24);
  id v28 = v23;
  if (v27)
  {
    id v30 = *(void **)(v26 + 8);
    uint64_t v29 = *(void **)(v26 + 16);
    *uint64_t v25 = v27;
    v25[1] = v30;
    v25[2] = v29;
    swift_bridgeObjectRetain();
    id v31 = v30;
    id v32 = v29;
  }
  else
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    v25[2] = *(void *)(v26 + 16);
  }
  uint64_t v33 = v5[11];
  id v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v36(a2 + v33, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v53(v34, v35, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v34, 0, 1, v20);
  }
  uint64_t v38 = v5[12];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (const void *)(a2 + v38);
  if (v36(a2 + v38, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v53(v39, v40, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v39, 0, 1, v20);
  }
  uint64_t v42 = v5[13];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (const void *)(a2 + v42);
  if (v36(a2 + v42, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    v53(v43, v44, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v43, 0, 1, v20);
  }
  uint64_t v46 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v46) = *(void *)(a2 + v46);
  uint64_t v47 = a3[7];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (void *)(a2 + v47);
  sub_23BB98BB8(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v50 = sub_23BBDBC50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
  }
  else
  {
    *uint64_t v48 = *v49;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23BB8E100(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v5;
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = v6[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_23BBDB6D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = v6[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  int v19 = v12((void *)(a1 + v16), 1, v10);
  int v20 = v12(v18, 1, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_12:
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v17, v18, v10);
LABEL_13:
  *(unsigned char *)(a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
  uint64_t v22 = v6[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t)a2 + v22;
  uint64_t v25 = sub_23BBDB860();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 24);
  v73(v23, v24, v25);
  uint64_t v27 = v6[9];
  id v28 = *(void **)((char *)a2 + v27);
  uint64_t v29 = *(void **)(a1 + v27);
  *(void *)(a1 + v27) = v28;
  id v30 = v28;

  uint64_t v31 = v6[10];
  id v32 = (void *)(a1 + v31);
  uint64_t v33 = (long long *)((char *)a2 + v31);
  uint64_t v34 = *(uint64_t *)((char *)a2 + v31);
  if (*(void *)(a1 + v31))
  {
    if (v34)
    {
      void *v32 = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v35 = (void *)v32[1];
      uint64_t v36 = (void *)*((void *)v33 + 1);
      v32[1] = v36;
      id v37 = v36;

      uint64_t v38 = (void *)v32[2];
      uint64_t v39 = (void *)*((void *)v33 + 2);
      v32[2] = v39;
      id v40 = v39;
    }
    else
    {
      sub_23BB547F0(a1 + v31);
      uint64_t v45 = *((void *)v33 + 2);
      *(_OWORD *)id v32 = *v33;
      v32[2] = v45;
    }
  }
  else if (v34)
  {
    void *v32 = v34;
    uint64_t v41 = (void *)*((void *)v33 + 1);
    v32[1] = v41;
    uint64_t v42 = (void *)*((void *)v33 + 2);
    v32[2] = v42;
    swift_bridgeObjectRetain();
    id v43 = v41;
    id v44 = v42;
  }
  else
  {
    long long v46 = *v33;
    v32[2] = *((void *)v33 + 2);
    *(_OWORD *)id v32 = v46;
  }
  uint64_t v47 = v6[11];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  int v51 = v50(a1 + v47, 1, v25);
  int v52 = v50((uint64_t)v49, 1, v25);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v48, v49, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v48, 0, 1, v25);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v48, v25);
LABEL_27:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_28;
  }
  v73((uint64_t)v48, (uint64_t)v49, v25);
LABEL_28:
  uint64_t v54 = v6[12];
  uint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (char *)a2 + v54;
  int v57 = v50(a1 + v54, 1, v25);
  int v58 = v50((uint64_t)v56, 1, v25);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v55, v56, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v55, 0, 1, v25);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v55, v25);
LABEL_33:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_34;
  }
  v73((uint64_t)v55, (uint64_t)v56, v25);
LABEL_34:
  uint64_t v60 = v6[13];
  char v61 = (void *)(a1 + v60);
  uint64_t v62 = (char *)a2 + v60;
  int v63 = v50(a1 + v60, 1, v25);
  int v64 = v50((uint64_t)v62, 1, v25);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v61, v62, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v61, 0, 1, v25);
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (v64)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v61, v25);
LABEL_39:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_40;
  }
  v73((uint64_t)v61, (uint64_t)v62, v25);
LABEL_40:
  *(unsigned char *)(a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v66 = a3[7];
    uint64_t v67 = (void *)(a1 + v66);
    uint64_t v68 = (uint64_t *)((char *)a2 + v66);
    uint64_t v69 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
    uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB8E9A8(a1 + v66, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    sub_23BB98BB8(0, &qword_26AEBB9B0, v69, v70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v71 = sub_23BBDBC50();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v71 - 8) + 16))(v67, v68, v71);
    }
    else
    {
      *uint64_t v67 = *v68;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BB8E9A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_23BB98BB8(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_23BB8EA04(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[6];
  int v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v17 = v5[8];
  uint64_t v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(void *, const void *, uint64_t))(v21 + 32);
  v22(v18, v19, v20);
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  uint64_t v23 = v5[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  uint64_t v26 = v5[11];
  uint64_t v27 = (void *)(a1 + v26);
  id v28 = (const void *)(a2 + v26);
  uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v47(a2 + v26, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v22(v27, v28, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v27, 0, 1, v20);
  }
  uint64_t v30 = v5[12];
  uint64_t v31 = (void *)(a1 + v30);
  id v32 = (const void *)(a2 + v30);
  if (v47(a2 + v30, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    uint64_t v34 = v21;
  }
  else
  {
    v22(v31, v32, v20);
    uint64_t v34 = v21;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v31, 0, 1, v20);
  }
  uint64_t v35 = v5[13];
  uint64_t v36 = (void *)(a1 + v35);
  id v37 = (const void *)(a2 + v35);
  if (v47(a2 + v35, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v22(v36, v37, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v20);
  }
  uint64_t v39 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v39) = *(void *)(a2 + v39);
  uint64_t v40 = a3[7];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (const void *)(a2 + v40);
  sub_23BB98BB8(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  uint64_t v44 = v43;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v45 = sub_23BBDBC50();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v45 - 8) + 32))(v41, v42, v45);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v41, v42, *(void *)(*(void *)(v44 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BB8F014(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v16, v17, v9);
LABEL_13:
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v21 = v5[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  v62(v22, v23, v24);
  uint64_t v26 = v5[9];
  uint64_t v27 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);

  uint64_t v28 = v5[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  if (*(void *)(a1 + v28))
  {
    if (*v30)
    {
      *uint64_t v29 = *v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = (void *)v29[1];
      v29[1] = v30[1];

      id v32 = (void *)v29[2];
      v29[2] = v30[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v29);
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  v29[2] = v30[2];
LABEL_18:
  uint64_t v33 = v5[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v37 = v36(a1 + v33, 1, v24);
  int v38 = v36((uint64_t)v35, 1, v24);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v34, v35, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, v24);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v34, v24);
LABEL_23:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_24;
  }
  v62((uint64_t)v34, (uint64_t)v35, v24);
LABEL_24:
  uint64_t v40 = v5[12];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (const void *)(a2 + v40);
  int v43 = v36(a1 + v40, 1, v24);
  int v44 = v36((uint64_t)v42, 1, v24);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v41, v42, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v41, 0, 1, v24);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v41, v24);
LABEL_29:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_30;
  }
  v62((uint64_t)v41, (uint64_t)v42, v24);
LABEL_30:
  uint64_t v46 = v5[13];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (const void *)(a2 + v46);
  int v49 = v36(a1 + v46, 1, v24);
  int v50 = v36((uint64_t)v48, 1, v24);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v47, v48, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v50)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
LABEL_35:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_36;
  }
  v62((uint64_t)v47, (uint64_t)v48, v24);
LABEL_36:
  uint64_t v52 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v52) = *(void *)(a2 + v52);
  if (a1 != a2)
  {
    uint64_t v53 = a3[7];
    uint64_t v54 = (void *)(a1 + v53);
    uint64_t v55 = (const void *)(a2 + v53);
    uint64_t v56 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
    int v57 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB8E9A8(a1 + v53, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    sub_23BB98BB8(0, &qword_26AEBB9B0, v56, v57);
    uint64_t v59 = v58;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v60 = sub_23BBDBC50();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v60 - 8) + 32))(v54, v55, v60);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23BB8F878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB8F88C);
}

uint64_t sub_23BB8F88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 252)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 3u) {
      int v10 = 3;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 3;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 3u) {
      return v11;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_23BB98BB8(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
    int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 28);
    return v13(v15, a2, v14);
  }
}

uint64_t sub_23BB8F9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB8FA00);
}

uint64_t sub_23BB8FA00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SleepWidgetViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 252)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
  }
  else
  {
    sub_23BB98BB8(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for ScheduleOccurrenceSectionView(uint64_t a1)
{
  return sub_23BB5D6A4(a1, (uint64_t *)&unk_268A7DE58);
}

void sub_23BB8FB78()
{
  type metadata accessor for SleepWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_23BB98BB8(319, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_23BB8FC88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23BB98BB8(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC570();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    int v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23BB8FDDC(uint64_t a1)
{
  sub_23BB98BB8(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_23BBDC570();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

void *sub_23BB8FEAC(void *a1, void *a2, uint64_t a3)
{
  sub_23BB98BB8(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC570();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_23BB8FFB0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB8E9A8((uint64_t)a1, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    sub_23BB98BB8(0, &qword_26AEBC950, v6, v7);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  void *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_23BB900F8(char *a1, char *a2, uint64_t a3)
{
  sub_23BB98BB8(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC570();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_23BB901F8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BB8E9A8((uint64_t)a1, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    sub_23BB98BB8(0, &qword_26AEBC950, v6, v7);
    uint64_t v9 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_23BBDC570();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BB90338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB9034C);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23BB98BB8(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_23BB90444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB90458);
}

void __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23BB98BB8(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata accessor for HeaderView(uint64_t a1)
{
  return sub_23BB5D6A4(a1, (uint64_t *)&unk_26AEBC940);
}

void sub_23BB9056C()
{
  sub_23BB98BB8(319, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_23BB90630()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB9064C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB90668@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_23BB57458();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23BB906A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v50 = a1;
  sub_23BB98788(0, &qword_268A7DEA8);
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  MEMORY[0x270FA5388](v2);
  int v44 = (char *)v43 - v3;
  sub_23BB94B34(0, &qword_268A7E0D8, (unint64_t *)&qword_26AEBBA58, &qword_26AEBBA80, MEMORY[0x263F8D6C8]);
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v43 - v6;
  sub_23BB98FC4();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v47 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = *v1;
  unint64_t v11 = *((void *)v1 + 1);
  int v51 = *v1;
  if ((v11 & 4) != 0)
  {
    LOBYTE(v52) = v10;
    if ((v11 & 8) != 0)
    {
      uint64_t v12 = sub_23BBC33D4();
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v12 = sub_23BBC34A8();
      uint64_t v14 = 0;
    }
  }
  else
  {
    LOBYTE(v52) = v10;
    uint64_t v12 = sub_23BBC357C();
    uint64_t v14 = (v11 >> 3) & 1;
  }
  v43[0] = v11 & 4;
  uint64_t v52 = v12;
  unint64_t v53 = v13;
  sub_23BB570F4();
  uint64_t v15 = sub_23BBDC170();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v48 = v5;
  int v49 = v7;
  v43[1] = v14;
  if (v14)
  {
    if (v51 == 2) {
      sub_23BBDC2F0();
    }
    else {
      sub_23BBDC2A0();
    }
  }
  else if ((v11 & 2) != 0)
  {
    sub_23BBDC2D0();
  }
  else
  {
    sub_23BBDC300();
  }
  uint64_t v20 = sub_23BBDC140();
  uint64_t v22 = v21;
  char v24 = v23;
  swift_release();
  sub_23BB71078(v15, v17, v19 & 1);
  swift_bridgeObjectRelease();
  sub_23BB90BA0(v11);
  uint64_t v25 = sub_23BBDC150();
  uint64_t v27 = v26;
  char v29 = v28;
  uint64_t v31 = v30;
  swift_release();
  sub_23BB71078(v20, v22, v24 & 1);
  swift_bridgeObjectRelease();
  uint64_t v52 = v25;
  unint64_t v53 = v27;
  char v54 = v29 & 1;
  uint64_t v55 = v31;
  id v32 = v44;
  sub_23BBDC1E0();
  sub_23BB71078(v25, v27, v29 & 1);
  swift_bridgeObjectRelease();
  uint64_t v33 = v43[0] >> 2;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v36 = v45;
  uint64_t v35 = v46;
  uint64_t v37 = (uint64_t)v49;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v49, v32, v46);
  uint64_t v38 = v37 + *(int *)(v48 + 36);
  *(void *)uint64_t v38 = KeyPath;
  *(void *)(v38 + 8) = v33;
  *(unsigned char *)(v38 + 16) = 0;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v32, v35);
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  uint64_t v40 = qword_26AEBDD08;
  unint64_t v39 = qword_26AEBDD10;
  uint64_t v52 = 46;
  unint64_t v53 = 0xE100000000000000;
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  sub_23BBDC730();
  uint64_t v52 = v40;
  unint64_t v53 = v39;
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  sub_23BB9904C();
  uint64_t v41 = (uint64_t)v47;
  sub_23BBDC260();
  swift_bridgeObjectRelease();
  sub_23BB950CC(v37, &qword_268A7E0D8, (unint64_t *)&qword_26AEBBA58, &qword_26AEBBA80, MEMORY[0x263F8D6C8]);
  return sub_23BB99144(v41, v50, (uint64_t (*)(void))sub_23BB98FC4);
}

uint64_t sub_23BB90BA0(char a1)
{
  sub_23BB98BB8(0, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v15 - v3;
  uint64_t v5 = sub_23BBDC120();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 8) != 0)
  {
    sub_23BBDC110();
    sub_23BBDC090();
    uint64_t v14 = sub_23BBDC0C0();
    swift_release();
    return v14;
  }
  else if ((a1 & 4) != 0)
  {
    return sub_23BB93428(a1);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F1A710], v5);
    uint64_t v9 = *MEMORY[0x263F1A608];
    uint64_t v10 = sub_23BBDC060();
    uint64_t v11 = *(void *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v4, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v4, 0, 1, v10);
    sub_23BBDC090();
    uint64_t v12 = sub_23BBDC0B0();
    sub_23BB8E9A8((uint64_t)v4, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return v12;
  }
}

uint64_t sub_23BB90E44()
{
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_26AEBDD08;
  sub_23BBDCA70();
  swift_bridgeObjectRelease();
  type metadata accessor for TimeView(0);
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  sub_23BBDC730();
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23BB90F88()
{
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_26AEBDD08;
  type metadata accessor for TimeView(0);
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  sub_23BBDC730();
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23BB910A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v84 = a1;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_23BB98B2C(0, &qword_268A7E088, MEMORY[0x263F19B20]);
  uint64_t v82 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v83 = (uint64_t)&v65 - v5;
  sub_23BB98D2C(0, &qword_268A7E0B0, v3);
  uint64_t v74 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v77 = (uint64_t)&v65 - v7;
  sub_23BB98BB8(0, &qword_268A7E098, (uint64_t (*)(uint64_t))sub_23BB98C1C, MEMORY[0x263F1BAC8]);
  uint64_t v75 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v76 = (uint64_t)&v65 - v9;
  uint64_t v10 = sub_23BBDB790();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v70 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TimeView.TimeText(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB98C80(0);
  uint64_t v81 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v71 = (uint64_t)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v72 = (char *)&v65 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v79 = (char *)&v65 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v85 = (uint64_t)&v65 - v22;
  sub_23BB98D2C(0, &qword_268A7E090, MEMORY[0x263F19B28]);
  uint64_t v80 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v73 = (char *)&v65 - v24;
  uint64_t v25 = sub_23BBDBAE0();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  char v29 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v65 - v30;
  id v32 = (int *)type metadata accessor for TimeView(0);
  uint64_t v33 = v32[5];
  v88[0] = *(unsigned char *)(v1 + v33);
  sub_23BBC3B20(v88);
  int v34 = *(unsigned __int8 *)(v1 + v32[6]);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  uint64_t v86 = v31;
  v35(v29, v31, v25);
  if (v34 != 1)
  {
    uint64_t v40 = *(void (**)(char *, uint64_t))(v26 + 8);
    v40(v29, v25);
    uint64_t v78 = (v26 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
LABEL_8:
    uint64_t v55 = v83;
    char v87 = *(unsigned char *)(v2 + v33);
    uint64_t v56 = *(void *)(v2 + v32[7]);
    SleepWidgetViewModel.scheduleOccurrenceTimeAttributedString(occurrence:isCondensed:)(&v87, (v56 & 4) != 0, (uint64_t)v14);
    *(void *)&v14[*(int *)(v12 + 20)] = v56;
    sub_23BB90F88();
    sub_23BB98DC0();
    uint64_t v57 = (uint64_t)v79;
    sub_23BBDC260();
    swift_bridgeObjectRelease();
    sub_23BB94F0C((uint64_t)v14, type metadata accessor for TimeView.TimeText);
    uint64_t v58 = v85;
    sub_23BB99144(v57, v85, (uint64_t (*)(void))sub_23BB98C80);
    sub_23BB94EA4(v58, v55, (uint64_t (*)(void))sub_23BB98C80);
    swift_storeEnumTagMultiPayload();
    sub_23BB98DF4();
    sub_23BB98EA4(&qword_268A7E0D0, sub_23BB98C80, (void (*)(void))sub_23BB98DC0, (void (*)(void))sub_23BB83A6C);
    sub_23BBDBED0();
    sub_23BB94F0C(v58, (uint64_t (*)(void))sub_23BB98C80);
    return ((uint64_t (*)(char *, uint64_t))v40)(v86, v25);
  }
  sub_23BBDBAB0();
  uint64_t v37 = v36;
  unint64_t v39 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v38 = v26 + 8;
  uint64_t v40 = v39;
  v39(v29, v25);
  swift_bridgeObjectRelease();
  if (!v37)
  {
    uint64_t v78 = v38 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    goto LABEL_8;
  }
  uint64_t result = sub_23BBDBAB0();
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v67 = result;
    uint64_t v78 = v38;
    uint64_t v69 = v25;
    char v44 = sub_23BBDBAA0();
    uint64_t v68 = (uint64_t (*)(char *, uint64_t))v40;
    if (v44)
    {
      uint64_t v66 = v32[7];
      uint64_t v45 = v85;
      uint64_t v46 = *(void *)(v2 + v66);
      sub_23BBDB780();
      sub_23BBDB730();
      uint64_t v47 = v12;
      *(void *)&v14[*(int *)(v12 + 20)] = v46;
      sub_23BB90E44();
      uint64_t v67 = sub_23BB98DC0();
      uint64_t v48 = (uint64_t)v79;
      sub_23BBDC260();
      swift_bridgeObjectRelease();
      uint64_t v65 = type metadata accessor for TimeView.TimeText;
      sub_23BB94F0C((uint64_t)v14, type metadata accessor for TimeView.TimeText);
      sub_23BB99144(v48, v45, (uint64_t (*)(void))sub_23BB98C80);
      uint64_t v49 = v45;
      sub_23BBDBAD0();
      uint64_t v50 = *(void *)(v2 + v66);
      sub_23BBDB780();
      sub_23BBDB730();
      *(void *)&v14[*(int *)(v47 + 20)] = v50;
      sub_23BB90F88();
      uint64_t v51 = (uint64_t)v72;
      sub_23BBDC260();
      swift_bridgeObjectRelease();
      sub_23BB94F0C((uint64_t)v14, v65);
    }
    else
    {
      sub_23BBDBAD0();
      uint64_t v66 = v43;
      uint64_t v59 = v32[7];
      uint64_t v60 = *(void *)(v2 + v59);
      sub_23BBDB780();
      sub_23BBDB730();
      uint64_t v61 = v12;
      *(void *)&v14[*(int *)(v12 + 20)] = v60;
      sub_23BB90F88();
      uint64_t v65 = (uint64_t (*)(void))sub_23BB98DC0();
      uint64_t v48 = (uint64_t)v79;
      sub_23BBDC260();
      swift_bridgeObjectRelease();
      sub_23BB94F0C((uint64_t)v14, type metadata accessor for TimeView.TimeText);
      uint64_t v49 = v85;
      sub_23BB99144(v48, v85, (uint64_t (*)(void))sub_23BB98C80);
      uint64_t v62 = *(void *)(v2 + v59);
      sub_23BBDB780();
      sub_23BBDB730();
      *(void *)&v14[*(int *)(v61 + 20)] = v62;
      sub_23BB90E44();
      uint64_t v51 = (uint64_t)v72;
      sub_23BBDC260();
      swift_bridgeObjectRelease();
      sub_23BB94F0C((uint64_t)v14, type metadata accessor for TimeView.TimeText);
    }
    sub_23BB99144(v51, v48, (uint64_t (*)(void))sub_23BB98C80);
    sub_23BB94EA4(v49, v51, (uint64_t (*)(void))sub_23BB98C80);
    uint64_t v52 = v71;
    sub_23BB94EA4(v48, v71, (uint64_t (*)(void))sub_23BB98C80);
    uint64_t v53 = v76;
    sub_23BB94EA4(v51, v76, (uint64_t (*)(void))sub_23BB98C80);
    sub_23BB98C1C();
    sub_23BB94EA4(v52, v53 + *(int *)(v54 + 48), (uint64_t (*)(void))sub_23BB98C80);
    sub_23BB94F0C(v52, (uint64_t (*)(void))sub_23BB98C80);
    sub_23BB94F0C(v51, (uint64_t (*)(void))sub_23BB98C80);
    sub_23BB98F30(v53, v77);
    swift_storeEnumTagMultiPayload();
    sub_23BB953D4(&qword_268A7E0C8, &qword_268A7E098, (uint64_t (*)(uint64_t))sub_23BB98C1C);
    uint64_t v63 = (uint64_t)v73;
    sub_23BBDBED0();
    sub_23BB8E9A8(v53, &qword_268A7E098, (uint64_t (*)(uint64_t))sub_23BB98C1C, MEMORY[0x263F1BAC8]);
    sub_23BB94F0C(v48, (uint64_t (*)(void))sub_23BB98C80);
    sub_23BB94F0C(v85, (uint64_t (*)(void))sub_23BB98C80);
    uint64_t v64 = MEMORY[0x263F19B28];
    sub_23BB9581C(v63, v83, (uint64_t)&qword_268A7E090, MEMORY[0x263F19B28], (uint64_t (*)(void, uint64_t, uint64_t))sub_23BB98D2C);
    swift_storeEnumTagMultiPayload();
    sub_23BB98DF4();
    sub_23BB98EA4(&qword_268A7E0D0, sub_23BB98C80, (void (*)(void))sub_23BB98DC0, (void (*)(void))sub_23BB83A6C);
    sub_23BBDBED0();
    sub_23BB9588C(v63, (uint64_t)&qword_268A7E090, v64, (uint64_t (*)(void))sub_23BB98D2C);
    return v68(v86, v69);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23BB91C8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_23BBDB720();
  MEMORY[0x270FA5388](v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  uint64_t v6 = sub_23BBDC160();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v11 = *(void *)(v1 + *(int *)(type metadata accessor for TimeView.TimeText(0) + 20));
  if ((v11 & 2) != 0) {
    sub_23BBDC2D0();
  }
  else {
    sub_23BBDC2F0();
  }
  uint64_t v12 = sub_23BBDC140();
  uint64_t v14 = v13;
  char v16 = v15;
  v27[1] = v17;
  swift_release();
  char v18 = v16 & 1;
  sub_23BB71078(v6, v8, v10 & 1);
  swift_bridgeObjectRelease();
  sub_23BB91E6C(v11);
  uint64_t v19 = sub_23BBDC150();
  uint64_t v21 = v20;
  char v23 = v22;
  uint64_t v25 = v24;
  swift_release();
  sub_23BB71078(v12, v14, v18);
  swift_bridgeObjectRelease();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + 16) = v23 & 1;
  *(void *)(a1 + 24) = v25;
  *(void *)(a1 + 32) = result;
  *(void *)(a1 + 40) = 1;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_23BB91E6C(char a1)
{
  uint64_t v2 = sub_23BBDC120();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_23BBDC0E0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB98BB8(0, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v22 - v11;
  if ((a1 & 8) != 0)
  {
    sub_23BBDC040();
    sub_23BBDC080();
    uint64_t v17 = sub_23BBDC0C0();
    swift_release();
    return v17;
  }
  else
  {
    if ((a1 & 4) != 0)
    {
      sub_23BBDC090();
      uint64_t v19 = *MEMORY[0x263F1A610];
      uint64_t v20 = sub_23BBDC060();
      uint64_t v21 = *(void *)(v20 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v12, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v20);
      sub_23BBDC0A0();
      sub_23BB8E9A8((uint64_t)v12, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F1A680], v6);
      uint64_t v16 = sub_23BBDC100();
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F1A6C8], v2);
      uint64_t v13 = *MEMORY[0x263F1A610];
      uint64_t v14 = sub_23BBDC060();
      uint64_t v15 = *(void *)(v14 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      sub_23BBDC0B0();
      sub_23BB8E9A8((uint64_t)v12, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_23BBDC010();
      swift_release();
      uint64_t v16 = sub_23BBDC050();
      swift_release();
    }
    return v16;
  }
}

uint64_t sub_23BB922CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_23BB98518();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23BB98804();
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)uint64_t v6 = sub_23BBDBE20();
  *((void *)v6 + 1) = 0;
  v6[16] = 0;
  sub_23BB956D4(0, &qword_268A7E050, &qword_268A7E008, (uint64_t (*)(uint64_t))sub_23BB985CC);
  sub_23BB924EC(v2, (uint64_t)&v6[*(int *)(v11 + 44)]);
  uint64_t v12 = type metadata accessor for DateView(0);
  uint64_t v13 = *(int *)(v12 + 28);
  uint64_t v14 = *(void *)(v2 + v13);
  char v24 = *(unsigned char *)(v2 + *(int *)(v12 + 20));
  uint64_t v15 = sub_23BB93394(&v24, v14);
  uint64_t KeyPath = swift_getKeyPath();
  sub_23BB94EA4((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))sub_23BB98518);
  uint64_t v17 = (uint64_t *)&v10[*(int *)(v8 + 44)];
  *uint64_t v17 = KeyPath;
  v17[1] = v15;
  sub_23BB94F0C((uint64_t)v6, (uint64_t (*)(void))sub_23BB98518);
  uint64_t v18 = sub_23BB93428(*(void *)(v2 + v13));
  uint64_t v19 = swift_getKeyPath();
  sub_23BB94EA4((uint64_t)v10, a1, (uint64_t (*)(void))sub_23BB98804);
  sub_23BB98884(0, &qword_268A7E058, (void (*)(uint64_t))sub_23BB98804);
  uint64_t v21 = (uint64_t *)(a1 + *(int *)(v20 + 36));
  *uint64_t v21 = v19;
  v21[1] = v18;
  return sub_23BB94F0C((uint64_t)v10, (uint64_t (*)(void))sub_23BB98804);
}

uint64_t sub_23BB924EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v115 = a2;
  sub_23BB987E4(0);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v116 = (uint64_t)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v113 = (char *)&v91 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v114 = (uint64_t)&v91 - v8;
  sub_23BB98908(0, &qword_268A7E060, MEMORY[0x263F19B20]);
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v91 - v11;
  uint64_t v13 = sub_23BBDC350();
  uint64_t v108 = *(void *)(v13 - 8);
  uint64_t v109 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v107 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_23BBDBB40();
  uint64_t v101 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (BOOL *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (BOOL *)&v91 - v19;
  sub_23BB98788(0, &qword_268A7E030);
  uint64_t v103 = v21;
  uint64_t v102 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)&v91 - v22;
  sub_23BB986DC();
  uint64_t v100 = v24;
  MEMORY[0x270FA5388](v24);
  uint64_t v105 = (char *)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB98620(0);
  uint64_t v117 = v26;
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v104 = (char *)&v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v106 = (uint64_t)&v91 - v29;
  sub_23BB98600(0);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  uint64_t v112 = (uint64_t)&v91 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v118 = (uint64_t)&v91 - v33;
  uint64_t v34 = type metadata accessor for DateView(0);
  uint64_t v35 = v34;
  uint64_t v111 = *(int *)(v34 + 24);
  if (*(unsigned char *)(a1 + v111)) {
    goto LABEL_5;
  }
  uint64_t v110 = v10;
  uint64_t v99 = *(int *)(v34 + 20);
  int v36 = *(unsigned __int8 *)(a1 + v99);
  LOBYTE(v121) = *(unsigned char *)(a1 + v99);
  if (!SleepWidgetViewModel.scheduleOccurrenceRelativeDateString(occurrence:)((unsigned __int8 *)&v121)
    && v37 == 0xE000000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_storeEnumTagMultiPayload();
    sub_23BB98EA4(&qword_268A7E070, sub_23BB98620, (void (*)(void))sub_23BB989DC, (void (*)(void))sub_23BB98AA4);
    sub_23BBDBED0();
    goto LABEL_6;
  }
  char v42 = sub_23BBDCB90();
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0 || v36 == 3) {
    goto LABEL_5;
  }
  sub_23BB98970();
  uint64_t v98 = v43;
  char v44 = &v20[*(int *)(v43 + 48)];
  *uint64_t v20 = v36 != 2;
  uint64_t v45 = *MEMORY[0x263F76120];
  uint64_t v46 = sub_23BBDBB20();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(void (**)(BOOL *, void, uint64_t))(v47 + 104);
  unsigned int v97 = v45;
  uint64_t v96 = v46;
  uint64_t v95 = v48;
  uint64_t v94 = v47 + 104;
  ((void (*)(BOOL *, uint64_t))v48)(v44, v45);
  uint64_t v49 = v101;
  uint64_t v50 = *(void (**)(void))(v101 + 104);
  unsigned int v93 = *MEMORY[0x263F76110];
  uint64_t v92 = (void (*)(BOOL *, void, uint64_t))v50;
  v50(v20);
  uint64_t v51 = sub_23BBDBB10();
  uint64_t v101 = *(void *)(v49 + 8);
  ((void (*)(BOOL *, uint64_t))v101)(v20, v15);
  uint64_t v121 = v51;
  uint64_t v52 = v99;
  int v53 = *(unsigned __int8 *)(a1 + v99);
  if (v53 == 3)
  {
    sub_23BBDBB30();
  }
  else
  {
    uint64_t v75 = &v18[*(int *)(v98 + 48)];
    *uint64_t v18 = v53 != 2;
    v95(v75, v97, v96);
    v92(v18, v93, v15);
  }
  sub_23BBDC190();
  ((void (*)(BOOL *, uint64_t))v101)(v18, v15);
  swift_release();
  uint64_t v76 = *(void *)(a1 + *(int *)(v35 + 28));
  LOBYTE(v121) = *(unsigned char *)(a1 + v52);
  uint64_t v77 = sub_23BB931F4((unsigned __int8 *)&v121, v76);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v79 = v102;
  uint64_t v80 = (uint64_t)v105;
  uint64_t v81 = v103;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v105, v23, v103);
  uint64_t v82 = (uint64_t *)(v80 + *(int *)(v100 + 36));
  *uint64_t v82 = KeyPath;
  v82[1] = v77;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v23, v81);
  uint64_t v84 = v107;
  uint64_t v83 = v108;
  uint64_t v85 = v109;
  (*(void (**)(char *, void, uint64_t))(v108 + 104))(v107, *MEMORY[0x263F1B538], v109);
  uint64_t v86 = swift_getKeyPath();
  uint64_t v87 = (uint64_t)v104;
  uint64_t v88 = (uint64_t *)&v104[*(int *)(v117 + 36)];
  sub_23BB98BB8(0, &qword_26AEBBA48, MEMORY[0x263F1B548], MEMORY[0x263F1A418]);
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))((char *)v88 + *(int *)(v89 + 28), v84, v85);
  uint64_t *v88 = v86;
  sub_23BB94EA4(v80, v87, (uint64_t (*)(void))sub_23BB986DC);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
  sub_23BB94F0C(v80, (uint64_t (*)(void))sub_23BB986DC);
  uint64_t v90 = v106;
  sub_23BB99144(v87, v106, (uint64_t (*)(void))sub_23BB98620);
  sub_23BB94EA4(v90, (uint64_t)v12, (uint64_t (*)(void))sub_23BB98620);
  swift_storeEnumTagMultiPayload();
  sub_23BB98EA4(&qword_268A7E070, sub_23BB98620, (void (*)(void))sub_23BB989DC, (void (*)(void))sub_23BB98AA4);
  sub_23BBDBED0();
  sub_23BB94F0C(v90, (uint64_t (*)(void))sub_23BB98620);
LABEL_6:
  if (*(unsigned char *)(a1 + v111))
  {
    uint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
  }
  else
  {
    int v40 = *(unsigned __int8 *)(a1 + *(int *)(v35 + 20));
    LOBYTE(v121) = *(unsigned char *)(a1 + *(int *)(v35 + 20));
    if (SleepWidgetViewModel.scheduleOccurrenceRelativeDateString(occurrence:)((unsigned __int8 *)&v121)
      || v41 != 0xE000000000000000)
    {
      unint64_t v39 = 0xE000000000000000;
      char v54 = sub_23BBDCB90();
      swift_bridgeObjectRelease();
      uint64_t v38 = 0;
      if ((v54 & 1) == 0 && v40 != 3)
      {
        uint64_t v38 = sub_23BBDC720();
        unint64_t v39 = v55;
      }
    }
    else
    {
      unint64_t v39 = 0xE000000000000000;
      swift_bridgeObjectRelease();
      uint64_t v38 = 0;
    }
  }
  LOBYTE(v121) = *(unsigned char *)(a1 + *(int *)(v35 + 20));
  SleepWidgetViewModel.scheduleOccurrenceRelativeDateString(occurrence:)((unsigned __int8 *)&v121);
  uint64_t v121 = v38;
  unint64_t v122 = v39;
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23BB570F4();
  uint64_t v56 = sub_23BBDC170();
  uint64_t v58 = v57;
  char v60 = v59;
  uint64_t v62 = v61;
  uint64_t v63 = (*(void *)(a1 + *(int *)(v35 + 28)) >> 2) & 1;
  uint64_t v64 = swift_getKeyPath();
  uint64_t v121 = v56;
  unint64_t v122 = v58;
  char v123 = v60 & 1;
  uint64_t v117 = v62;
  uint64_t v124 = v62;
  uint64_t v125 = v64;
  uint64_t v126 = v63;
  char v127 = 0;
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  uint64_t v65 = qword_26AEBDD08;
  unint64_t v66 = qword_26AEBDD10;
  uint64_t v119 = 46;
  unint64_t v120 = 0xE100000000000000;
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  sub_23BBDC730();
  uint64_t v119 = v65;
  unint64_t v120 = v66;
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  swift_bridgeObjectRelease();
  sub_23BB83714();
  sub_23BB839B4();
  uint64_t v67 = (uint64_t)v113;
  sub_23BBDC260();
  swift_bridgeObjectRelease();
  sub_23BB71078(v56, v58, v60 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v68 = v114;
  sub_23BB99144(v67, v114, (uint64_t (*)(void))sub_23BB987E4);
  uint64_t v69 = v118;
  uint64_t v70 = v112;
  sub_23BB94EA4(v118, v112, (uint64_t (*)(void))sub_23BB98600);
  uint64_t v71 = v116;
  sub_23BB94EA4(v68, v116, (uint64_t (*)(void))sub_23BB987E4);
  uint64_t v72 = v115;
  sub_23BB94EA4(v70, v115, (uint64_t (*)(void))sub_23BB98600);
  sub_23BB985CC(0);
  sub_23BB94EA4(v71, v72 + *(int *)(v73 + 48), (uint64_t (*)(void))sub_23BB987E4);
  sub_23BB94F0C(v68, (uint64_t (*)(void))sub_23BB987E4);
  sub_23BB94F0C(v69, (uint64_t (*)(void))sub_23BB98600);
  sub_23BB94F0C(v71, (uint64_t (*)(void))sub_23BB987E4);
  return sub_23BB94F0C(v70, (uint64_t (*)(void))sub_23BB98600);
}

uint64_t sub_23BB931F4(unsigned __int8 *a1, char a2)
{
  uint64_t v4 = sub_23BBDBB40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (BOOL *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *a1;
  if ((a2 & 0xA) != 0)
  {
    char v16 = v8;
    return sub_23BB93394(&v16, a2);
  }
  else
  {
    if (v8 == 3)
    {
      sub_23BBDBB30();
    }
    else
    {
      sub_23BB98970();
      uint64_t v11 = &v7[*(int *)(v10 + 48)];
      *uint64_t v7 = v8 != 2;
      uint64_t v12 = *MEMORY[0x263F76120];
      uint64_t v13 = sub_23BBDBB20();
      (*(void (**)(BOOL *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
      (*(void (**)(BOOL *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F76110], v4);
    }
    uint64_t v9 = sub_23BBDBB00();
    (*(void (**)(BOOL *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v9;
}

uint64_t sub_23BB93394(unsigned char *a1, char a2)
{
  if ((a2 & 0xA) != 0)
  {
    if (*a1 != 2)
    {
      return sub_23BBDC2D0();
    }
    if ((a2 & 8) != 0)
    {
      id v3 = objc_msgSend(self, sel_systemGray2Color);
      JUMPOUT(0x23ECD0920);
    }
  }
  return sub_23BBDC300();
}

uint64_t sub_23BB93428(char a1)
{
  uint64_t v2 = sub_23BBDC0E0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB98BB8(0, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)&v23 - v7;
  uint64_t v9 = sub_23BBDC120();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 8) != 0)
  {
    sub_23BBDC040();
    sub_23BBDC080();
    uint64_t v18 = sub_23BBDC0C0();
    swift_release();
    return v18;
  }
  else
  {
    uint64_t v13 = *(void (**)(char *, void, uint64_t))(v10 + 104);
    if ((a1 & 4) != 0)
    {
      v13(v12, *MEMORY[0x263F1A718], v9);
      uint64_t v20 = *MEMORY[0x263F1A610];
      uint64_t v21 = sub_23BBDC060();
      uint64_t v22 = *(void *)(v21 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v8, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v8, 0, 1, v21);
      sub_23BBDC090();
      sub_23BBDC0B0();
      sub_23BB8E9A8((uint64_t)v8, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F1A680], v2);
      uint64_t v17 = sub_23BBDC100();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      v13(v12, *MEMORY[0x263F1A710], v9);
      uint64_t v14 = *MEMORY[0x263F1A608];
      uint64_t v15 = sub_23BBDC060();
      uint64_t v16 = *(void *)(v15 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v8, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
      sub_23BBDC090();
      uint64_t v17 = sub_23BBDC0B0();
      sub_23BB8E9A8((uint64_t)v8, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    return v17;
  }
}

uint64_t sub_23BB93888@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v104 = a2;
  uint64_t v94 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A620];
  unsigned int v93 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BB98BB8(0, &qword_26AEBC4A8, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v90 = (uint64_t)v82 - v4;
  uint64_t v87 = sub_23BBDC120();
  uint64_t v85 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v84 = (char *)v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = MEMORY[0x263F76168];
  sub_23BB95A7C(0, &qword_268A7DF30, sub_23BB82E60, (void (*)(void))sub_23BB82F94);
  uint64_t v99 = v6;
  uint64_t v100 = *((void *)v6 - 1);
  MEMORY[0x270FA5388](v6);
  uint64_t v95 = (char *)v82 - v7;
  sub_23BB955E0();
  uint64_t v101 = v8;
  uint64_t v103 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v96 = (char *)v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB954B4();
  uint64_t v102 = v10;
  uint64_t v109 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  unsigned int v97 = (char *)v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v108 = (char *)v82 - v13;
  uint64_t v107 = sub_23BBDC570();
  uint64_t v14 = *(void *)(v107 - 8);
  MEMORY[0x270FA5388](v107);
  uint64_t v16 = (char *)v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB95220(0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB951D8(0);
  uint64_t v105 = v20;
  uint64_t v92 = *(void *)(v20 - 8);
  uint64_t v21 = v92;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)v82 - v25;
  uint64_t v106 = (char *)v82 - v25;
  *(void *)uint64_t v19 = sub_23BBDBE20();
  *((void *)v19 + 1) = 0;
  v19[16] = 1;
  sub_23BB956D4(0, &qword_268A7DF38, &qword_268A7DEF0, (uint64_t (*)(uint64_t))sub_23BB952F0);
  sub_23BB943C8(a1, (uint64_t)&v19[*(int *)(v27 + 44)]);
  uint64_t v86 = v16;
  v82[2] = a1;
  sub_23BB77CD4((uint64_t)v16);
  sub_23BB94758(MEMORY[0x263F76188], MEMORY[0x263F76180]);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  uint64_t v88 = v14 + 8;
  uint64_t v89 = v28;
  v28((uint64_t)v16, v107);
  sub_23BB95438();
  uint64_t v91 = v24;
  sub_23BBDC180();
  swift_bridgeObjectRelease();
  sub_23BB94F0C((uint64_t)v19, (uint64_t (*)(void))sub_23BB95220);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v24, v105);
  uint64_t v83 = type metadata accessor for BedTitleView(0);
  uint64_t v29 = (uint64_t (**)(uint64_t, uint64_t))(a1 + *(int *)(v83 + 20));
  uint64_t v30 = (uint64_t)v29[1];
  uint64_t v110 = *v29;
  uint64_t v111 = v30;
  sub_23BB570F4();
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_23BBDC170();
  uint64_t v33 = v32;
  v82[1] = v34;
  LOBYTE(v21) = v35 & 1;
  uint64_t v36 = v85;
  uint64_t v37 = v84;
  uint64_t v38 = v87;
  (*(void (**)(char *, void, uint64_t))(v85 + 104))(v84, *MEMORY[0x263F1A6F8], v87);
  uint64_t v39 = *MEMORY[0x263F1A610];
  uint64_t v40 = sub_23BBDC060();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = v90;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 104))(v90, v39, v40);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
  sub_23BBDC0B0();
  sub_23BB8E9A8(v42, &qword_26AEBC4A8, v94, v93);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
  sub_23BBDC010();
  swift_release();
  uint64_t v43 = sub_23BBDC150();
  uint64_t v45 = v44;
  LOBYTE(v38) = v46;
  swift_release();
  sub_23BB71078(v31, v33, v21);
  swift_bridgeObjectRelease();
  sub_23BBDC070();
  uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t))sub_23BBDC130();
  unsigned int v93 = v47;
  uint64_t v49 = v48;
  uint64_t v90 = v48;
  uint64_t v51 = v50;
  uint64_t v94 = v50;
  LOBYTE(v42) = v52 & 1;
  sub_23BB71078(v43, v45, v38 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v54 = swift_getKeyPath();
  uint64_t v110 = v47;
  uint64_t v111 = v49;
  char v112 = v42;
  uint64_t v113 = v51;
  uint64_t v114 = KeyPath;
  uint64_t v115 = 0x3FE8000000000000;
  uint64_t v116 = v54;
  uint64_t v117 = 1;
  char v118 = 0;
  sub_23BB82E60(0);
  uint64_t v56 = v55;
  uint64_t v57 = sub_23BB82F94();
  uint64_t v58 = v95;
  sub_23BBDC1C0();
  sub_23BB71078((uint64_t)v93, v90, v42);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v110 = v56;
  uint64_t v111 = v57;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  char v60 = v96;
  uint64_t v61 = v99;
  sub_23BBDC1D0();
  uint64_t v62 = v58;
  uint64_t v63 = v61;
  (*(void (**)(char *, uint64_t (*)(uint64_t, uint64_t)))(v100 + 8))(v62, v61);
  uint64_t v64 = (uint64_t)v86;
  sub_23BB77CD4((uint64_t)v86);
  sub_23BB94758(MEMORY[0x263F76180], MEMORY[0x263F76190]);
  v89(v64, v107);
  uint64_t v110 = v63;
  uint64_t v111 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v65 = v97;
  uint64_t v66 = v101;
  sub_23BBDC180();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v60, v66);
  uint64_t v68 = v108;
  uint64_t v67 = v109;
  uint64_t v69 = v102;
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v108, v65, v102);
  uint64_t v70 = v92;
  uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
  uint64_t v72 = v91;
  uint64_t v73 = v105;
  v71(v91, v106, v105);
  uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  uint64_t v75 = v68;
  uint64_t v76 = v69;
  v74(v65, v75, v69);
  uint64_t v77 = v104;
  v71(v104, v72, v73);
  sub_23BB95128(0);
  v74(&v77[*(int *)(v78 + 48)], v65, v76);
  uint64_t v79 = *(void (**)(char *, uint64_t))(v109 + 8);
  v79(v108, v76);
  uint64_t v80 = *(void (**)(char *, uint64_t))(v70 + 8);
  v80(v106, v73);
  v79(v65, v76);
  return ((uint64_t (*)(char *, uint64_t))v80)(v72, v73);
}

uint64_t sub_23BB943C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v21[1] = a1;
  uint64_t v22 = a2;
  uint64_t v2 = sub_23BBDC340();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_23BBDBB40();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB98CA0(0, &qword_268A7DF00, (void (*)(uint64_t))sub_23BB95374);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v21 - v14;
  sub_23BBDBB30();
  sub_23BBDBB10();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F1B4B8], v2);
  uint64_t v16 = sub_23BBDC360();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  type metadata accessor for BedTitleView(0);
  sub_23BBDC3F0();
  sub_23BBDBBE0();
  uint64_t v23 = v16;
  uint64_t v24 = v29;
  char v25 = v30;
  uint64_t v26 = v31;
  char v27 = v32;
  long long v28 = v33;
  sub_23BB95374();
  sub_23BB957AC();
  sub_23BBDC220();
  swift_release();
  sub_23BB9581C((uint64_t)v15, (uint64_t)v13, (uint64_t)&qword_268A7DF00, (uint64_t)sub_23BB95374, (uint64_t (*)(void, uint64_t, uint64_t))sub_23BB98CA0);
  uint64_t v17 = v22;
  sub_23BB9581C((uint64_t)v13, v22, (uint64_t)&qword_268A7DF00, (uint64_t)sub_23BB95374, (uint64_t (*)(void, uint64_t, uint64_t))sub_23BB98CA0);
  sub_23BB952F0();
  uint64_t v19 = v17 + *(int *)(v18 + 48);
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  sub_23BB9588C((uint64_t)v15, (uint64_t)&qword_268A7DF00, (uint64_t)sub_23BB95374, (uint64_t (*)(void))sub_23BB98CA0);
  return sub_23BB9588C((uint64_t)v13, (uint64_t)&qword_268A7DF00, (uint64_t)sub_23BB95374, (uint64_t (*)(void))sub_23BB98CA0);
}

uint64_t sub_23BB94758(uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v4 = sub_23BBDC570();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDC550();
  char v8 = sub_23BBDC540();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_23BB95760(0, &qword_268A7DF40, MEMORY[0x263F1B440], MEMORY[0x263F8E0F8]);
  if (v8)
  {
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_23BBDD290;
    *(void *)(v9 + 32) = sub_23BBDC2D0();
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_23BBDD2A0;
    *(void *)(v10 + 32) = a1();
    *(void *)(v10 + 40) = a2();
    uint64_t v13 = v10;
  }
  sub_23BBDC7A0();
  return v13;
}

uint64_t sub_23BB948DC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_23BBDBE60();
  *(void *)(a1 + 8) = 0x4010000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  sub_23BB95C60(0, &qword_268A7DEC8, &qword_268A7DED0, (uint64_t (*)(uint64_t))sub_23BB95128);
  return sub_23BB93888(v1, (char *)(a1 + *(int *)(v3 + 44)));
}

uint64_t sub_23BB94948()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BB94964()
{
  if (!qword_268A7DE78)
  {
    sub_23BB949F4(255);
    sub_23BB94B34(255, &qword_268A7DEA0, &qword_26AEBBA30, &qword_26AEBBA60, MEMORY[0x263F1A738]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268A7DE78);
    }
  }
}

void sub_23BB949F4(uint64_t a1)
{
}

void sub_23BB94A14(uint64_t a1)
{
}

void sub_23BB94A34()
{
  if (!qword_268A7DE90)
  {
    sub_23BB98788(255, &qword_268A7DE98);
    sub_23BBDBF60();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DE90);
    }
  }
}

void sub_23BB94AC8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_23BB95760(255, a3, a4, MEMORY[0x263F8D8F0]);
    unint64_t v5 = sub_23BBDBF50();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_23BB94B34(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    sub_23BB98788(255, &qword_268A7DEA8);
    sub_23BB94AC8(255, a3, a4, a5);
    unint64_t v9 = sub_23BBDBC60();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_23BB94BE8()
{
  if (!qword_268A7DEB8)
  {
    sub_23BB95250(255, &qword_268A7DE68, &qword_268A7DE70, (uint64_t (*)(uint64_t))sub_23BB94964, &qword_268A7DEB0);
    sub_23BB94AC8(255, &qword_26AEBBA40, (unint64_t *)&qword_26AEBBA68, MEMORY[0x263F1B440]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DEB8);
    }
  }
}

uint64_t sub_23BB94C9C(uint64_t a1, uint64_t a2)
{
  sub_23BB95250(0, &qword_268A7DE68, &qword_268A7DE70, (uint64_t (*)(uint64_t))sub_23BB94964, &qword_268A7DEB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB94D2C(uint64_t a1)
{
  sub_23BB95250(0, &qword_268A7DE68, &qword_268A7DE70, (uint64_t (*)(uint64_t))sub_23BB94964, &qword_268A7DEB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BB94DB4()
{
  return sub_23BBDBC90();
}

uint64_t sub_23BB94DD8(uint64_t a1)
{
  uint64_t v2 = sub_23BBDC350();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_23BBDBCA0();
}

uint64_t sub_23BB94EA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB94F0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BB94F6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_23BBDBD30();
  *a1 = result;
  return result;
}

uint64_t sub_23BB94F98()
{
  return sub_23BBDBD40();
}

uint64_t sub_23BB94FC4(uint64_t a1, uint64_t a2)
{
  sub_23BB94B34(0, &qword_268A7DEA0, &qword_26AEBBA30, &qword_26AEBBA60, MEMORY[0x263F1A738]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB95048(uint64_t a1, uint64_t a2)
{
  sub_23BB94B34(0, &qword_268A7DEA0, &qword_26AEBBA30, &qword_26AEBBA60, MEMORY[0x263F1A738]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB950CC(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  sub_23BB94B34(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_23BB95128(uint64_t a1)
{
}

void sub_23BB9515C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_23BB951D8(uint64_t a1)
{
}

void sub_23BB95220(uint64_t a1)
{
}

void sub_23BB95250(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  if (!*a2)
  {
    sub_23BB98BB8(255, a3, a4, MEMORY[0x263F1BAC8]);
    sub_23BB953D4(a5, a3, a4);
    unint64_t v9 = sub_23BBDC370();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_23BB952F0()
{
  if (!qword_268A7DEF8)
  {
    sub_23BB98CA0(255, &qword_268A7DF00, (void (*)(uint64_t))sub_23BB95374);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268A7DEF8);
    }
  }
}

void sub_23BB95374()
{
  if (!qword_268A7DF08)
  {
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DF08);
    }
  }
}

uint64_t sub_23BB953D4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23BB98BB8(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB95438()
{
  return sub_23BB9546C(&qword_268A7DF18, sub_23BB95220);
}

uint64_t sub_23BB9546C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BB954B4()
{
  if (!qword_268A7DF20)
  {
    sub_23BB955E0();
    sub_23BB95A7C(255, &qword_268A7DF30, sub_23BB82E60, (void (*)(void))sub_23BB82F94);
    sub_23BB82E60(255);
    sub_23BB82F94();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7DF20);
    }
  }
}

void sub_23BB955E0()
{
  if (!qword_268A7DF28)
  {
    sub_23BB95A7C(255, &qword_268A7DF30, sub_23BB82E60, (void (*)(void))sub_23BB82F94);
    sub_23BB82E60(255);
    sub_23BB82F94();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7DF28);
    }
  }
}

void sub_23BB956D4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_23BB98BB8(255, a3, a4, MEMORY[0x263F1BAC8]);
    unint64_t v5 = sub_23BBDBC10();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_23BB95760(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_23BB957AC()
{
  unint64_t result = qword_268A7DF48;
  if (!qword_268A7DF48)
  {
    sub_23BB95374();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DF48);
  }
  return result;
}

uint64_t sub_23BB9581C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_23BB9588C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_23BB958EC()
{
  if (!qword_268A7DF50)
  {
    sub_23BB98BB8(255, &qword_268A7DF58, (uint64_t (*)(uint64_t))sub_23BB959A0, MEMORY[0x263F1BAC8]);
    sub_23BB953D4(&qword_268A7DF78, &qword_268A7DF58, (uint64_t (*)(uint64_t))sub_23BB959A0);
    unint64_t v0 = sub_23BBDC3A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DF50);
    }
  }
}

void sub_23BB959A0()
{
  if (!qword_268A7DF60)
  {
    type metadata accessor for TimeView(255);
    sub_23BB95A7C(255, &qword_268A7DF68, (void (*)(uint64_t))type metadata accessor for DateView, (void (*)(void))sub_23BB95B28);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_268A7DF60);
    }
  }
}

uint64_t type metadata accessor for TimeView(uint64_t a1)
{
  return sub_23BB5D6A4(a1, (uint64_t *)&unk_268A7DFA8);
}

void sub_23BB95A7C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v7) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

uint64_t type metadata accessor for DateView(uint64_t a1)
{
  return sub_23BB5D6A4(a1, (uint64_t *)&unk_268A7DF98);
}

uint64_t sub_23BB95B28()
{
  return sub_23BB9546C(&qword_268A7DF70, (void (*)(uint64_t))type metadata accessor for DateView);
}

void sub_23BB95B5C()
{
  if (!qword_268A7DF80)
  {
    sub_23BB958EC();
    sub_23BB6D268();
    sub_23BB9546C(&qword_268A7DF88, (void (*)(uint64_t))sub_23BB958EC);
    sub_23BB9546C(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7DF80);
    }
  }
}

void sub_23BB95C60(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_23BB98BB8(255, a3, a4, MEMORY[0x263F1BAC8]);
    unint64_t v5 = sub_23BBDBC10();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_23BB95CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_29Tm);
}

uint64_t sub_23BB95D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_30Tm);
}

void *sub_23BB95D28(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
    uint64_t v7 = v6[5];
    char v8 = (char *)v4 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = v6[6];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *((unsigned char *)v4 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    uint64_t v19 = v6[8];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v51(v20, v21, v22);
    uint64_t v24 = v6[9];
    char v25 = *(void **)((char *)a2 + v24);
    *(void *)((char *)v4 + v24) = v25;
    uint64_t v26 = v6[10];
    char v27 = (void *)((char *)v4 + v26);
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    id v30 = v25;
    if (v29)
    {
      char v32 = *(void **)(v28 + 8);
      uint64_t v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)char v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = v6[11];
    uint64_t v36 = (char *)v4 + v35;
    uint64_t v37 = (char *)a2 + v35;
    uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v51(v36, (uint64_t)v37, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = v6[12];
    uint64_t v41 = (char *)v4 + v40;
    uint64_t v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v51(v41, (uint64_t)v42, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = v6[13];
    uint64_t v45 = (char *)v4 + v44;
    char v46 = (char *)a2 + v44;
    if (v38((char *)a2 + v44, 1, v22))
    {
      sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v51(v45, (uint64_t)v46, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
    uint64_t v48 = a3[6];
    *((unsigned char *)v4 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)v4 + v48) = *((unsigned char *)a2 + v48);
    *(void *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return v4;
}

uint64_t sub_23BB962F0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  int v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v17 = v5[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v49 = *(void (**)(void *, const void *, uint64_t))(v21 + 16);
  v49(v18, v19, v20);
  uint64_t v22 = v5[9];
  uint64_t v23 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v23;
  uint64_t v24 = v5[10];
  char v25 = (void *)(a1 + v24);
  uint64_t v26 = a2 + v24;
  uint64_t v27 = *(void *)(a2 + v24);
  id v28 = v23;
  if (v27)
  {
    id v30 = *(void **)(v26 + 8);
    uint64_t v29 = *(void **)(v26 + 16);
    *char v25 = v27;
    v25[1] = v30;
    v25[2] = v29;
    swift_bridgeObjectRetain();
    id v31 = v30;
    id v32 = v29;
  }
  else
  {
    *(_OWORD *)char v25 = *(_OWORD *)v26;
    v25[2] = *(void *)(v26 + 16);
  }
  uint64_t v33 = v5[11];
  id v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v36(a2 + v33, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v49(v34, v35, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v34, 0, 1, v20);
  }
  uint64_t v38 = v5[12];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (const void *)(a2 + v38);
  if (v36(a2 + v38, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v49(v39, v40, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v39, 0, 1, v20);
  }
  uint64_t v42 = v5[13];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (const void *)(a2 + v42);
  if (v36(a2 + v42, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    v49(v43, v44, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v43, 0, 1, v20);
  }
  uint64_t v46 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v46) = *(unsigned char *)(a2 + v46);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_23BB96868(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v5;
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = v6[5];
  char v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_23BBDB6D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = v6[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  int v19 = v12((void *)(a1 + v16), 1, v10);
  int v20 = v12(v18, 1, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_12:
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v17, v18, v10);
LABEL_13:
  *(unsigned char *)(a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
  uint64_t v22 = v6[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t)a2 + v22;
  uint64_t v25 = sub_23BBDB860();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 24);
  v67(v23, v24, v25);
  uint64_t v27 = v6[9];
  id v28 = *(void **)((char *)a2 + v27);
  uint64_t v29 = *(void **)(a1 + v27);
  *(void *)(a1 + v27) = v28;
  id v30 = v28;

  uint64_t v31 = v6[10];
  id v32 = (void *)(a1 + v31);
  uint64_t v33 = (long long *)((char *)a2 + v31);
  uint64_t v34 = *(uint64_t *)((char *)a2 + v31);
  if (*(void *)(a1 + v31))
  {
    if (v34)
    {
      void *v32 = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v35 = (void *)v32[1];
      uint64_t v36 = (void *)*((void *)v33 + 1);
      v32[1] = v36;
      id v37 = v36;

      uint64_t v38 = (void *)v32[2];
      uint64_t v39 = (void *)*((void *)v33 + 2);
      v32[2] = v39;
      id v40 = v39;
    }
    else
    {
      sub_23BB547F0(a1 + v31);
      uint64_t v45 = *((void *)v33 + 2);
      *(_OWORD *)id v32 = *v33;
      v32[2] = v45;
    }
  }
  else if (v34)
  {
    void *v32 = v34;
    uint64_t v41 = (void *)*((void *)v33 + 1);
    v32[1] = v41;
    uint64_t v42 = (void *)*((void *)v33 + 2);
    v32[2] = v42;
    swift_bridgeObjectRetain();
    id v43 = v41;
    id v44 = v42;
  }
  else
  {
    long long v46 = *v33;
    v32[2] = *((void *)v33 + 2);
    *(_OWORD *)id v32 = v46;
  }
  uint64_t v47 = v6[11];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  int v51 = v50(a1 + v47, 1, v25);
  int v52 = v50((uint64_t)v49, 1, v25);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v48, v49, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v48, 0, 1, v25);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v48, v25);
LABEL_27:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_28;
  }
  v67((uint64_t)v48, (uint64_t)v49, v25);
LABEL_28:
  uint64_t v54 = v6[12];
  unint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (char *)a2 + v54;
  int v57 = v50(a1 + v54, 1, v25);
  int v58 = v50((uint64_t)v56, 1, v25);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v55, v56, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v55, 0, 1, v25);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v55, v25);
LABEL_33:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_34;
  }
  v67((uint64_t)v55, (uint64_t)v56, v25);
LABEL_34:
  uint64_t v60 = v6[13];
  uint64_t v61 = (void *)(a1 + v60);
  uint64_t v62 = (char *)a2 + v60;
  int v63 = v50(a1 + v60, 1, v25);
  int v64 = v50((uint64_t)v62, 1, v25);
  if (!v63)
  {
    if (!v64)
    {
      v67((uint64_t)v61, (uint64_t)v62, v25);
      goto LABEL_40;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v61, v25);
    goto LABEL_39;
  }
  if (v64)
  {
LABEL_39:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v61, v62, v25);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v61, 0, 1, v25);
LABEL_40:
  *(unsigned char *)(a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_23BB97038(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[6];
  int v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v17 = v5[8];
  uint64_t v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(void *, const void *, uint64_t))(v21 + 32);
  v22(v18, v19, v20);
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  uint64_t v23 = v5[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  uint64_t v26 = v5[11];
  uint64_t v27 = (void *)(a1 + v26);
  id v28 = (const void *)(a2 + v26);
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v41(a2 + v26, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v22(v27, v28, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v27, 0, 1, v20);
  }
  uint64_t v30 = v5[12];
  uint64_t v31 = (void *)(a1 + v30);
  id v32 = (const void *)(a2 + v30);
  if (v41(a2 + v30, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    uint64_t v34 = v21;
  }
  else
  {
    v22(v31, v32, v20);
    uint64_t v34 = v21;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v31, 0, 1, v20);
  }
  uint64_t v35 = v5[13];
  uint64_t v36 = (void *)(a1 + v35);
  id v37 = (const void *)(a2 + v35);
  if (v41(a2 + v35, 1, v20))
  {
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v22(v36, v37, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v20);
  }
  uint64_t v39 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v39) = *(unsigned char *)(a2 + v39);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_23BB97588(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BB98BB8(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v16, v17, v9);
LABEL_13:
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v21 = v5[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  v54(v22, v23, v24);
  uint64_t v26 = v5[9];
  uint64_t v27 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);

  uint64_t v28 = v5[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  if (*(void *)(a1 + v28))
  {
    if (*v30)
    {
      *uint64_t v29 = *v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = (void *)v29[1];
      v29[1] = v30[1];

      id v32 = (void *)v29[2];
      v29[2] = v30[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v29);
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  v29[2] = v30[2];
LABEL_18:
  uint64_t v33 = v5[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v37 = v36(a1 + v33, 1, v24);
  int v38 = v36((uint64_t)v35, 1, v24);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v34, v35, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, v24);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v34, v24);
LABEL_23:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_24;
  }
  v54((uint64_t)v34, (uint64_t)v35, v24);
LABEL_24:
  uint64_t v40 = v5[12];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (const void *)(a2 + v40);
  int v43 = v36(a1 + v40, 1, v24);
  int v44 = v36((uint64_t)v42, 1, v24);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v41, v42, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v41, 0, 1, v24);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v41, v24);
LABEL_29:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_30;
  }
  v54((uint64_t)v41, (uint64_t)v42, v24);
LABEL_30:
  uint64_t v46 = v5[13];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (const void *)(a2 + v46);
  int v49 = v36(a1 + v46, 1, v24);
  int v50 = v36((uint64_t)v48, 1, v24);
  if (!v49)
  {
    if (!v50)
    {
      v54((uint64_t)v47, (uint64_t)v48, v24);
      goto LABEL_36;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
    goto LABEL_35;
  }
  if (v50)
  {
LABEL_35:
    sub_23BB98BB8(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v47, v48, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
LABEL_36:
  uint64_t v52 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v52) = *(unsigned char *)(a2 + v52);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_23BB97D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB97D18);
}

uint64_t __swift_get_extra_inhabitant_index_29Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    char v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_23BB97DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB97E00);
}

uint64_t __swift_store_extra_inhabitant_index_30Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SleepWidgetViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  }
  return result;
}

uint64_t sub_23BB97EC0()
{
  uint64_t result = type metadata accessor for SleepWidgetViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScheduleOccurrenceTextView(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[16]) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*a1 <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *a1;
  }
  int v4 = v3 - 4;
  if (*a1 < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceTextView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceTextView()
{
  return &type metadata for ScheduleOccurrenceTextView;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceSectionView.Options()
{
  return &type metadata for ScheduleOccurrenceSectionView.Options;
}

unint64_t sub_23BB98024()
{
  unint64_t result = qword_268A7DFB8;
  if (!qword_268A7DFB8)
  {
    sub_23BB94BE8();
    sub_23BB980BC();
    sub_23BB98140((unint64_t *)&qword_26AEBBA38, &qword_26AEBBA40, (unint64_t *)&qword_26AEBBA68, MEMORY[0x263F1B440]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DFB8);
  }
  return result;
}

unint64_t sub_23BB980BC()
{
  unint64_t result = qword_268A7DFC0;
  if (!qword_268A7DFC0)
  {
    sub_23BB95250(255, &qword_268A7DE68, &qword_268A7DE70, (uint64_t (*)(uint64_t))sub_23BB94964, &qword_268A7DEB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DFC0);
  }
  return result;
}

uint64_t sub_23BB98140(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23BB94AC8(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB98190()
{
  return sub_23BB9546C(&qword_268A7DFC8, (void (*)(uint64_t))sub_23BB981D8);
}

void sub_23BB981D8()
{
  if (!qword_268A7DFD0)
  {
    sub_23BB98BB8(255, &qword_268A7DED0, (uint64_t (*)(uint64_t))sub_23BB95128, MEMORY[0x263F1BAC8]);
    sub_23BB953D4(&qword_268A7DFD8, &qword_268A7DED0, (uint64_t (*)(uint64_t))sub_23BB95128);
    unint64_t v0 = sub_23BBDC3A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7DFD0);
    }
  }
}

uint64_t sub_23BB9828C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_23BB98368()
{
  unint64_t result = qword_268A7DFE0;
  if (!qword_268A7DFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DFE0);
  }
  return result;
}

unint64_t sub_23BB983C0()
{
  unint64_t result = qword_268A7DFE8;
  if (!qword_268A7DFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DFE8);
  }
  return result;
}

unint64_t sub_23BB98418()
{
  unint64_t result = qword_268A7DFF0;
  if (!qword_268A7DFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DFF0);
  }
  return result;
}

unint64_t sub_23BB98470()
{
  unint64_t result = qword_268A7DFF8;
  if (!qword_268A7DFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7DFF8);
  }
  return result;
}

uint64_t sub_23BB984C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB984E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB984FC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BB98518()
{
  if (!qword_268A7E000)
  {
    sub_23BB98BB8(255, &qword_268A7E008, (uint64_t (*)(uint64_t))sub_23BB985CC, MEMORY[0x263F1BAC8]);
    sub_23BB953D4(&qword_268A7E040, &qword_268A7E008, (uint64_t (*)(uint64_t))sub_23BB985CC);
    unint64_t v0 = sub_23BBDC370();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E000);
    }
  }
}

void sub_23BB985CC(uint64_t a1)
{
}

void sub_23BB98600(uint64_t a1)
{
}

void sub_23BB98620(uint64_t a1)
{
}

void sub_23BB98640(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_23BB98BB8(255, &qword_26AEBBA48, MEMORY[0x263F1B548], MEMORY[0x263F1A418]);
    unint64_t v4 = sub_23BBDBC60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_23BB986DC()
{
  if (!qword_268A7E028)
  {
    sub_23BB98788(255, &qword_268A7E030);
    sub_23BB94AC8(255, &qword_26AEBBA40, (unint64_t *)&qword_26AEBBA68, MEMORY[0x263F1B440]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E028);
    }
  }
}

void sub_23BB98788(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v4) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void sub_23BB987E4(uint64_t a1)
{
}

void sub_23BB98804()
{
  if (!qword_268A7E048)
  {
    sub_23BB98518();
    sub_23BB94AC8(255, &qword_26AEBBA40, (unint64_t *)&qword_26AEBBA68, MEMORY[0x263F1B440]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E048);
    }
  }
}

void sub_23BB98884(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_23BB94AC8(255, &qword_26AEBBA30, &qword_26AEBBA60, MEMORY[0x263F1A738]);
    unint64_t v4 = sub_23BBDBC60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_23BB98908(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    sub_23BB98620(255);
    unint64_t v7 = a3(a1, v6, MEMORY[0x263F1BA08]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_23BB98970()
{
  if (!qword_268A7E068)
  {
    sub_23BBDBB20();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268A7E068);
    }
  }
}

unint64_t sub_23BB989DC()
{
  unint64_t result = qword_268A7E078;
  if (!qword_268A7E078)
  {
    sub_23BB986DC();
    swift_getOpaqueTypeConformance2();
    sub_23BB98140((unint64_t *)&qword_26AEBBA38, &qword_26AEBBA40, (unint64_t *)&qword_26AEBBA68, MEMORY[0x263F1B440]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E078);
  }
  return result;
}

unint64_t sub_23BB98AA4()
{
  unint64_t result = qword_268A7E080;
  if (!qword_268A7E080)
  {
    sub_23BB98BB8(255, &qword_26AEBBA48, MEMORY[0x263F1B548], MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E080);
  }
  return result;
}

void sub_23BB98B2C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_23BB98D2C(255, &qword_268A7E090, MEMORY[0x263F19B28]);
    uint64_t v7 = v6;
    sub_23BB98C80(255);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_23BB98BB8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_23BB98C1C()
{
  if (!qword_268A7E0A0)
  {
    sub_23BB98C80(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268A7E0A0);
    }
  }
}

void sub_23BB98C80(uint64_t a1)
{
}

void sub_23BB98CA0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_23BBDBF60();
    unint64_t v4 = sub_23BBDBC60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for TimeView.TimeText(uint64_t a1)
{
  return sub_23BB5D6A4(a1, (uint64_t *)&unk_268A7E0F0);
}

void sub_23BB98D2C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_23BB98BB8(255, &qword_268A7E098, (uint64_t (*)(uint64_t))sub_23BB98C1C, MEMORY[0x263F1BAC8]);
    unint64_t v7 = a3(a1, v6, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_23BB98DC0()
{
  return sub_23BB9546C(&qword_268A7E0B8, (void (*)(uint64_t))type metadata accessor for TimeView.TimeText);
}

unint64_t sub_23BB98DF4()
{
  unint64_t result = qword_268A7E0C0;
  if (!qword_268A7E0C0)
  {
    sub_23BB98D2C(255, &qword_268A7E090, MEMORY[0x263F19B28]);
    sub_23BB953D4(&qword_268A7E0C8, &qword_268A7E098, (uint64_t (*)(uint64_t))sub_23BB98C1C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E0C0);
  }
  return result;
}

uint64_t sub_23BB98EA4(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB98F30(uint64_t a1, uint64_t a2)
{
  sub_23BB98BB8(0, &qword_268A7E098, (uint64_t (*)(uint64_t))sub_23BB98C1C, MEMORY[0x263F1BAC8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23BB98FC4()
{
  if (!qword_268A7E0E0)
  {
    sub_23BB94B34(255, &qword_268A7E0D8, (unint64_t *)&qword_26AEBBA58, &qword_26AEBBA80, MEMORY[0x263F8D6C8]);
    sub_23BBDBF60();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E0E0);
    }
  }
}

unint64_t sub_23BB9904C()
{
  unint64_t result = qword_268A7E0E8;
  if (!qword_268A7E0E8)
  {
    uint64_t v1 = MEMORY[0x263F8D6C8];
    sub_23BB94B34(255, &qword_268A7E0D8, (unint64_t *)&qword_26AEBBA58, &qword_26AEBBA80, MEMORY[0x263F8D6C8]);
    swift_getOpaqueTypeConformance2();
    sub_23BB98140(&qword_26AEBBA50, (unint64_t *)&qword_26AEBBA58, &qword_26AEBBA80, v1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E0E8);
  }
  return result;
}

uint64_t sub_23BB99144(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_23BB991AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_23BBDB720();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_23BB99278(uint64_t a1)
{
  uint64_t v2 = sub_23BBDB720();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t sub_23BB992DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB720();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23BB99358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB720();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23BB993D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB720();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23BB99450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB720();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23BB994CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB994E0);
}

uint64_t sub_23BB994E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB720();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_23BB9954C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB99560);
}

uint64_t sub_23BB99560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB720();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_23BB995D0()
{
  uint64_t result = sub_23BBDB720();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_23BB9966C()
{
  unint64_t result = qword_268A7E100;
  if (!qword_268A7E100)
  {
    sub_23BB98884(255, &qword_268A7E058, (void (*)(uint64_t))sub_23BB98804);
    sub_23BB99720();
    sub_23BB98140(&qword_268A7E118, &qword_26AEBBA30, &qword_26AEBBA60, MEMORY[0x263F1A738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E100);
  }
  return result;
}

unint64_t sub_23BB99720()
{
  unint64_t result = qword_268A7E108;
  if (!qword_268A7E108)
  {
    sub_23BB98804();
    sub_23BB9546C(&qword_268A7E110, (void (*)(uint64_t))sub_23BB98518);
    sub_23BB98140((unint64_t *)&qword_26AEBBA38, &qword_26AEBBA40, (unint64_t *)&qword_26AEBBA68, MEMORY[0x263F1B440]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E108);
  }
  return result;
}

unint64_t sub_23BB997EC()
{
  unint64_t result = qword_268A7E120;
  if (!qword_268A7E120)
  {
    sub_23BB98B2C(255, &qword_268A7E128, MEMORY[0x263F19B28]);
    sub_23BB98DF4();
    sub_23BB98EA4(&qword_268A7E0D0, sub_23BB98C80, (void (*)(void))sub_23BB98DC0, (void (*)(void))sub_23BB83A6C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E120);
  }
  return result;
}

uint64_t sub_23BB998C4()
{
  return sub_23BB98EA4(&qword_268A7E130, (void (*)(uint64_t))sub_23BB98FC4, (void (*)(void))sub_23BB9904C, (void (*)(void))sub_23BB83A6C);
}

uint64_t sub_23BB99920()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_23BB99940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v21 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_23BB631DC(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v56 = a1;
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    *(void *)uint64_t v10 = *(void *)(a2 + v9);
    *(unsigned char *)(v10 + 8) = *(unsigned char *)(a2 + v9 + 8);
    int v12 = (int *)type metadata accessor for SleepWidgetViewModel();
    uint64_t v13 = v12[5];
    uint64_t v14 = (void *)(v10 + v13);
    uint64_t v15 = (const void *)(v11 + v13);
    uint64_t v16 = sub_23BBDB6D0();
    uint64_t v17 = *(void *)(v16 - 8);
    int v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
    if (v18(v15, 1, v16))
    {
      sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v22 = v12[6];
    uint64_t v23 = (void *)(v10 + v22);
    uint64_t v24 = (const void *)(v11 + v22);
    if (v18((const void *)(v11 + v22), 1, v16))
    {
      sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v23, v24, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v23, 0, 1, v16);
    }
    *(unsigned char *)(v10 + v12[7]) = *(unsigned char *)(v11 + v12[7]);
    uint64_t v26 = v12[8];
    uint64_t v27 = v10 + v26;
    uint64_t v28 = v11 + v26;
    uint64_t v29 = sub_23BBDB860();
    uint64_t v30 = *(void *)(v29 - 8);
    int v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v57(v27, v28, v29);
    uint64_t v31 = v12[9];
    id v32 = *(void **)(v11 + v31);
    *(void *)(v10 + v31) = v32;
    uint64_t v33 = v12[10];
    uint64_t v34 = (void *)(v10 + v33);
    uint64_t v35 = v11 + v33;
    uint64_t v36 = *(void *)(v11 + v33);
    id v37 = v32;
    if (v36)
    {
      uint64_t v39 = *(void **)(v35 + 8);
      int v38 = *(void **)(v35 + 16);
      *uint64_t v34 = v36;
      v34[1] = v39;
      v34[2] = v38;
      swift_bridgeObjectRetain();
      id v40 = v39;
      id v41 = v38;
    }
    else
    {
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
      v34[2] = *(void *)(v35 + 16);
    }
    uint64_t v42 = v12[11];
    int v43 = (void *)(v10 + v42);
    int v44 = (const void *)(v11 + v42);
    uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
    if (v45(v11 + v42, 1, v29))
    {
      sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v43, v44, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      v57((uint64_t)v43, (uint64_t)v44, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v43, 0, 1, v29);
    }
    uint64_t v47 = v12[12];
    uint64_t v48 = (void *)(v10 + v47);
    int v49 = (const void *)(v11 + v47);
    if (v45(v11 + v47, 1, v29))
    {
      sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      v57((uint64_t)v48, (uint64_t)v49, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v48, 0, 1, v29);
    }
    uint64_t v51 = v12[13];
    uint64_t v52 = (void *)(v10 + v51);
    uint64_t v53 = (const void *)(v11 + v51);
    if (v45(v11 + v51, 1, v29))
    {
      sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      v57((uint64_t)v52, (uint64_t)v53, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v52, 0, 1, v29);
    }
    return v56;
  }
  return v21;
}

uint64_t sub_23BB99F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_23BB631DC(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v53 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)(a2 + v8);
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(a2 + v8 + 8);
  uint64_t v11 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(v9 + v12);
  uint64_t v14 = (const void *)(v10 + v12);
  uint64_t v15 = sub_23BBDB6D0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = v11[6];
  uint64_t v20 = (void *)(v9 + v19);
  unint64_t v21 = (const void *)(v10 + v19);
  if (v17((const void *)(v10 + v19), 1, v15))
  {
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v20, v21, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v15);
  }
  *(unsigned char *)(v9 + v11[7]) = *(unsigned char *)(v10 + v11[7]);
  uint64_t v23 = v11[8];
  uint64_t v24 = (void *)(v9 + v23);
  uint64_t v25 = (const void *)(v10 + v23);
  uint64_t v26 = sub_23BBDB860();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v54 = *(void (**)(void *, const void *, uint64_t))(v27 + 16);
  v54(v24, v25, v26);
  uint64_t v28 = v11[9];
  uint64_t v29 = *(void **)(v10 + v28);
  *(void *)(v9 + v28) = v29;
  uint64_t v30 = v11[10];
  uint64_t v31 = (void *)(v9 + v30);
  uint64_t v32 = v10 + v30;
  uint64_t v33 = *(void *)(v10 + v30);
  id v34 = v29;
  if (v33)
  {
    uint64_t v36 = *(void **)(v32 + 8);
    uint64_t v35 = *(void **)(v32 + 16);
    void *v31 = v33;
    v31[1] = v36;
    v31[2] = v35;
    swift_bridgeObjectRetain();
    id v37 = v36;
    id v38 = v35;
  }
  else
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    v31[2] = *(void *)(v32 + 16);
  }
  uint64_t v39 = v11[11];
  id v40 = (void *)(v9 + v39);
  id v41 = (const void *)(v10 + v39);
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v42(v10 + v39, 1, v26))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    v54(v40, v41, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v40, 0, 1, v26);
  }
  uint64_t v44 = v11[12];
  uint64_t v45 = (void *)(v9 + v44);
  uint64_t v46 = (const void *)(v10 + v44);
  if (v42(v10 + v44, 1, v26))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    v54(v45, v46, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v45, 0, 1, v26);
  }
  uint64_t v48 = v11[13];
  int v49 = (void *)(v9 + v48);
  uint64_t v50 = (const void *)(v10 + v48);
  if (v42(v10 + v48, 1, v26))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    v54(v49, v50, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v49, 0, 1, v26);
  }
  return v53;
}

uint64_t sub_23BB9A494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_23BB631DC(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_23BB63394(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v76 = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)(a2 + v10);
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)uint64_t v11 = v13;
  uint64_t v14 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v15 = v14[5];
  uint64_t v16 = (void *)(v11 + v15);
  uint64_t v17 = (void *)(v12 + v15);
  uint64_t v18 = sub_23BBDB6D0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  uint64_t v24 = v14[6];
  uint64_t v25 = (void *)(v11 + v24);
  uint64_t v26 = (void *)(v12 + v24);
  int v27 = v20((void *)(v11 + v24), 1, v18);
  int v28 = v20(v26, 1, v18);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  *(unsigned char *)(v11 + v14[7]) = *(unsigned char *)(v12 + v14[7]);
  uint64_t v30 = v14[8];
  uint64_t v31 = v11 + v30;
  uint64_t v32 = v12 + v30;
  uint64_t v33 = sub_23BBDB860();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 24);
  v75(v31, v32, v33);
  uint64_t v35 = v14[9];
  uint64_t v36 = *(void **)(v12 + v35);
  id v37 = *(void **)(v11 + v35);
  *(void *)(v11 + v35) = v36;
  id v38 = v36;

  uint64_t v39 = v14[10];
  id v40 = (void *)(v11 + v39);
  id v41 = (long long *)(v12 + v39);
  uint64_t v42 = *(void *)(v12 + v39);
  if (*(void *)(v11 + v39))
  {
    if (v42)
    {
      void *v40 = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = (void *)v40[1];
      uint64_t v44 = (void *)*((void *)v41 + 1);
      v40[1] = v44;
      id v45 = v44;

      uint64_t v46 = (void *)v40[2];
      uint64_t v47 = (void *)*((void *)v41 + 2);
      v40[2] = v47;
      id v48 = v47;
    }
    else
    {
      sub_23BB547F0(v11 + v39);
      uint64_t v53 = *((void *)v41 + 2);
      *(_OWORD *)id v40 = *v41;
      v40[2] = v53;
    }
  }
  else if (v42)
  {
    void *v40 = v42;
    int v49 = (void *)*((void *)v41 + 1);
    v40[1] = v49;
    uint64_t v50 = (void *)*((void *)v41 + 2);
    v40[2] = v50;
    swift_bridgeObjectRetain();
    id v51 = v49;
    id v52 = v50;
  }
  else
  {
    long long v54 = *v41;
    v40[2] = *((void *)v41 + 2);
    *(_OWORD *)id v40 = v54;
  }
  uint64_t v55 = v14[11];
  uint64_t v56 = (void *)(v11 + v55);
  int v57 = (const void *)(v12 + v55);
  int v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  int v59 = v58(v11 + v55, 1, v33);
  int v60 = v58((uint64_t)v57, 1, v33);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v56, v57, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v56, 0, 1, v33);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v60)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v56, v33);
LABEL_27:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_28;
  }
  v75((uint64_t)v56, (uint64_t)v57, v33);
LABEL_28:
  uint64_t v62 = v14[12];
  int v63 = (void *)(v11 + v62);
  int v64 = (const void *)(v12 + v62);
  int v65 = v58(v11 + v62, 1, v33);
  int v66 = v58((uint64_t)v64, 1, v33);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v63, v64, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v63, 0, 1, v33);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v63, v33);
LABEL_33:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_34;
  }
  v75((uint64_t)v63, (uint64_t)v64, v33);
LABEL_34:
  uint64_t v68 = v14[13];
  uint64_t v69 = (void *)(v11 + v68);
  uint64_t v70 = (const void *)(v12 + v68);
  int v71 = v58(v11 + v68, 1, v33);
  int v72 = v58((uint64_t)v70, 1, v33);
  if (!v71)
  {
    if (!v72)
    {
      v75((uint64_t)v69, (uint64_t)v70, v33);
      return v76;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v69, v33);
    goto LABEL_39;
  }
  if (v72)
  {
LABEL_39:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
    return v76;
  }
  (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v69, v70, v33);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v69, 0, 1, v33);
  return v76;
}

uint64_t sub_23BB9AC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = a2 + v3;
  *(void *)uint64_t v4 = *(void *)(a2 + v3);
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(a2 + v3 + 8);
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = v6[5];
  uint64_t v8 = (void *)(v4 + v7);
  char v9 = (const void *)(v5 + v7);
  uint64_t v10 = sub_23BBDB6D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = v6[6];
  uint64_t v15 = (void *)(v4 + v14);
  uint64_t v16 = (const void *)(v5 + v14);
  if (v12((const void *)(v5 + v14), 1, v10))
  {
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  *(unsigned char *)(v4 + v6[7]) = *(unsigned char *)(v5 + v6[7]);
  uint64_t v18 = v6[8];
  uint64_t v19 = (void *)(v4 + v18);
  uint64_t v20 = (const void *)(v5 + v18);
  uint64_t v21 = sub_23BBDB860();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(void *, const void *, uint64_t))(v22 + 32);
  v23(v19, v20, v21);
  *(void *)(v4 + v6[9]) = *(void *)(v5 + v6[9]);
  uint64_t v24 = v6[10];
  uint64_t v25 = v4 + v24;
  uint64_t v26 = v5 + v24;
  *(void *)(v25 + 16) = *(void *)(v26 + 16);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  uint64_t v27 = v6[11];
  int v28 = (void *)(v4 + v27);
  uint64_t v29 = (const void *)(v5 + v27);
  id v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v41(v5 + v27, 1, v21))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v23(v28, v29, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
  }
  uint64_t v31 = v6[12];
  uint64_t v32 = (void *)(v4 + v31);
  uint64_t v33 = (const void *)(v5 + v31);
  if (v41(v5 + v31, 1, v21))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
    uint64_t v35 = v22;
  }
  else
  {
    v23(v32, v33, v21);
    uint64_t v35 = v22;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v32, 0, 1, v21);
  }
  uint64_t v36 = v6[13];
  id v37 = (void *)(v4 + v36);
  id v38 = (const void *)(v5 + v36);
  if (v41(v5 + v36, 1, v21))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    v23(v37, v38, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v21);
  }
  return a1;
}

uint64_t sub_23BB9B1B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_23BB63394(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v62 = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  *(void *)uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
  *(unsigned char *)(v11 + 8) = *((unsigned char *)a2 + v10 + 8);
  uint64_t v13 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v14 = v13[5];
  uint64_t v15 = (void *)(v11 + v14);
  uint64_t v16 = (void *)(v12 + v14);
  uint64_t v17 = sub_23BBDB6D0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[6];
  uint64_t v24 = (void *)(v11 + v23);
  uint64_t v25 = (void *)(v12 + v23);
  int v26 = v19((void *)(v11 + v23), 1, v17);
  int v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  *(unsigned char *)(v11 + v13[7]) = *(unsigned char *)(v12 + v13[7]);
  uint64_t v29 = v13[8];
  uint64_t v30 = v11 + v29;
  uint64_t v31 = v12 + v29;
  uint64_t v32 = sub_23BBDB860();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 40);
  v61(v30, v31, v32);
  uint64_t v34 = v13[9];
  uint64_t v35 = *(void **)(v11 + v34);
  *(void *)(v11 + v34) = *(void *)(v12 + v34);

  uint64_t v36 = v13[10];
  id v37 = (void *)(v11 + v36);
  id v38 = (void *)(v12 + v36);
  if (*(void *)(v11 + v36))
  {
    if (*v38)
    {
      *id v37 = *v38;
      swift_bridgeObjectRelease();
      uint64_t v39 = (void *)v37[1];
      v37[1] = v38[1];

      id v40 = (void *)v37[2];
      v37[2] = v38[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v37);
  }
  *(_OWORD *)id v37 = *(_OWORD *)v38;
  v37[2] = v38[2];
LABEL_18:
  uint64_t v41 = v13[11];
  uint64_t v42 = (void *)(v11 + v41);
  uint64_t v43 = (const void *)(v12 + v41);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  int v45 = v44(v11 + v41, 1, v32);
  int v46 = v44((uint64_t)v43, 1, v32);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v42, v43, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v42, 0, 1, v32);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v42, v32);
LABEL_23:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_24;
  }
  v61((uint64_t)v42, (uint64_t)v43, v32);
LABEL_24:
  uint64_t v48 = v13[12];
  int v49 = (void *)(v11 + v48);
  uint64_t v50 = (const void *)(v12 + v48);
  int v51 = v44(v11 + v48, 1, v32);
  int v52 = v44((uint64_t)v50, 1, v32);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v49, v50, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v49, 0, 1, v32);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v49, v32);
LABEL_29:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_30;
  }
  v61((uint64_t)v49, (uint64_t)v50, v32);
LABEL_30:
  uint64_t v54 = v13[13];
  uint64_t v55 = (void *)(v11 + v54);
  uint64_t v56 = (const void *)(v12 + v54);
  int v57 = v44(v11 + v54, 1, v32);
  int v58 = v44((uint64_t)v56, 1, v32);
  if (!v57)
  {
    if (!v58)
    {
      v61((uint64_t)v55, (uint64_t)v56, v32);
      return v62;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v55, v32);
    goto LABEL_35;
  }
  if (v58)
  {
LABEL_35:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    return v62;
  }
  (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v55, v56, v32);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v55, 0, 1, v32);
  return v62;
}

uint64_t sub_23BB9B938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BB9B94C);
}

uint64_t sub_23BB9B94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for SleepWidgetViewModel();
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_23BB9B9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BB9BA08);
}

uint64_t sub_23BB9BA08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for SleepWidgetViewModel();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for GreetingSleepWidgetRectangularView()
{
  uint64_t result = qword_268A7E138;
  if (!qword_268A7E138) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BB9BAF8()
{
  uint64_t result = type metadata accessor for SleepWidgetViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23BB9BB90(uint64_t a1)
{
  uint64_t result = sub_23BB9CAF4(&qword_268A7E148, (void (*)(uint64_t))type metadata accessor for GreetingSleepWidgetRectangularView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BB9BBE8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB9BC04()
{
  unint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40));
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = (void *)v1[1];
    if (v3)
    {
      unsigned int v4 = (void *)v1[2];
      id v5 = v4;
      swift_bridgeObjectRetain();
      id v6 = v3;
      objc_msgSend(v6, sel_sleepDuration);
      if (v7 > COERCE_DOUBLE(1) && v7 > 0.0)
      {
        sub_23BB564C0(v2, v3, v4);
        return 1;
      }
      objc_msgSend(v6, sel_inBedDuration);
      double v9 = v8;
      sub_23BB564C0(v2, v3, v4);
      if (v9 > COERCE_DOUBLE(1) && v9 > 0.0) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_23BB9BCF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v16 = a1;
  uint64_t v2 = type metadata accessor for GreetingSleepWidgetRectangularView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  sub_23BB9C448();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_23BB9BF78();
  if (sub_23BB9BC04())
  {
    sub_23BB9C970();
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_23BBDD290;
    *(void *)(v10 + 32) = sub_23BB5596C();
    *(void *)(v10 + 40) = v11;
  }
  else
  {
    sub_23BB55C04();
  }
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  sub_23BB9CA44(v1, (uint64_t)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetRectangularView);
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = swift_allocObject();
  sub_23BB9C89C((uint64_t)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  sub_23BB9C4AC();
  sub_23BB9C50C();
  swift_bridgeObjectRetain();
  sub_23BBDC4D0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v16, v9, v6);
}

uint64_t sub_23BB9BF78()
{
  type metadata accessor for GreetingSleepWidgetRectangularView();
  uint64_t v0 = sub_23BB55544();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    sub_23BB56A24(0, v1, 0);
    uint64_t v2 = v11;
    sub_23BB570F4();
    uint64_t v3 = v0 + 40;
    do
    {
      uint64_t v4 = sub_23BBDC970();
      uint64_t v6 = v5;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      if (v8 >= v7 >> 1) {
        sub_23BB56A24(v7 > 1, v8 + 1, 1);
      }
      v3 += 16;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v4;
      *(void *)(v9 + 40) = v6;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v2;
}

uint64_t sub_23BB9C0A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v36 = sub_23BBDB860();
  uint64_t v3 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetChartView();
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (uint64_t *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = a1 + *(int *)(type metadata accessor for GreetingSleepWidgetRectangularView() + 20);
  uint64_t v10 = (uint64_t *)(v9 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40));
  if (*v10)
  {
    uint64_t v38 = *v10;
    long long v39 = *(_OWORD *)(v10 + 1);
    sub_23BB87600(&v40);
    uint64_t v11 = v40;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v40 = 0;
  }
  uint64_t v12 = *(void *)a1;
  char v13 = *(unsigned char *)(a1 + 8);
  sub_23BB631DC(v12, v13);
  char v14 = sub_23BB77FBC(v12, v13);
  sub_23BB63394(v12, v13);
  if (v14) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (void *)((char *)v8 + v6[7]);
  *uint64_t v16 = swift_getKeyPath();
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BB9C9DC(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = (char *)v8 + v6[8];
  *(void *)uint64_t v18 = swift_getKeyPath();
  v18[8] = 0;
  uint64_t v19 = (void *)((char *)v8 + v6[9]);
  uint64_t *v19 = swift_getKeyPath();
  sub_23BB9C9DC(0, &qword_268A7DDC0, MEMORY[0x263F1A668], v17);
  swift_storeEnumTagMultiPayload();
  int v20 = (char *)v8 + v6[10];
  *(void *)int v20 = swift_getKeyPath();
  v20[8] = 0;
  *unint64_t v8 = v11;
  v8[1] = v15;
  sub_23BBDB850();
  uint64_t v21 = sub_23BBDAD00();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v36);
  v8[2] = v21;
  unsigned __int8 v22 = sub_23BBDBFC0();
  char v23 = sub_23BBDBFF0();
  sub_23BBDBFF0();
  if (sub_23BBDBFF0() != v22) {
    char v23 = sub_23BBDBFF0();
  }
  sub_23BB631DC(v12, v13);
  sub_23BB77FBC(v12, v13);
  sub_23BB63394(v12, v13);
  sub_23BBDBBB0();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = v37;
  sub_23BB9CA44((uint64_t)v8, v37, (uint64_t (*)(void))type metadata accessor for SleepWidgetChartView);
  sub_23BB9C4AC();
  uint64_t v34 = v32 + *(int *)(v33 + 36);
  *(unsigned char *)uint64_t v34 = v23;
  *(void *)(v34 + 8) = v25;
  *(void *)(v34 + 16) = v27;
  *(void *)(v34 + 24) = v29;
  *(void *)(v34 + 32) = v31;
  *(unsigned char *)(v34 + 40) = 0;
  return sub_23BB7D5C0((uint64_t)v8);
}

void sub_23BB9C448()
{
  if (!qword_268A7E150)
  {
    sub_23BB9C4AC();
    sub_23BB9C50C();
    unint64_t v0 = sub_23BBDC4E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E150);
    }
  }
}

void sub_23BB9C4AC()
{
  if (!qword_268A7E158)
  {
    type metadata accessor for SleepWidgetChartView();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E158);
    }
  }
}

unint64_t sub_23BB9C50C()
{
  unint64_t result = qword_268A7E160;
  if (!qword_268A7E160)
  {
    sub_23BB9C4AC();
    sub_23BB9CAF4(&qword_26AEBC428, (void (*)(uint64_t))type metadata accessor for SleepWidgetChartView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E160);
  }
  return result;
}

uint64_t sub_23BB9C5B4()
{
  uint64_t v1 = (int *)(type metadata accessor for GreetingSleepWidgetRectangularView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v22 = *(void *)(*(void *)v1 + 64);
  uint64_t v23 = v0;
  uint64_t v4 = v0 + v3;
  sub_23BB63394(*(void *)v4, *(unsigned char *)(v4 + 8));
  uint64_t v5 = v4 + v1[7];
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = v5 + v6[5];
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v11 = v5 + v6[6];
  if (!v10(v11, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v12 = v5 + v6[8];
  uint64_t v13 = sub_23BBDB860();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);

  uint64_t v16 = v5 + v6[10];
  if (*(void *)v16)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = v5 + v6[11];
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v18(v17, 1, v13)) {
    v15(v17, v13);
  }
  uint64_t v19 = v5 + v6[12];
  if (!v18(v19, 1, v13)) {
    v15(v19, v13);
  }
  uint64_t v20 = v5 + v6[13];
  if (!v18(v20, 1, v13)) {
    v15(v20, v13);
  }
  return MEMORY[0x270FA0238](v23, v3 + v22, v2 | 7);
}

uint64_t sub_23BB9C89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GreetingSleepWidgetRectangularView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BB9C900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for GreetingSleepWidgetRectangularView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_23BB9C0A8(v4, a1);
}

void sub_23BB9C970()
{
  if (!qword_26AEBC4C8)
  {
    unint64_t v0 = sub_23BBDCB70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC4C8);
    }
  }
}

void sub_23BB9C9DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BB9CA44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BB9CAAC()
{
  return sub_23BB9CAF4(&qword_268A7E168, (void (*)(uint64_t))sub_23BB9C448);
}

uint64_t sub_23BB9CAF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepLauncherComplicationView()
{
  return &type metadata for SleepLauncherComplicationView;
}

uint64_t sub_23BB9CB4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BB9CB68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v1 = sub_23BBDC510();
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = sub_23BBDBB40();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_23BBDC520();
  uint64_t v6 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  unint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB9CF3C();
  uint64_t v21 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB30();
  uint64_t v12 = sub_23BBDBAF0();
  v19[1] = v13;
  v19[2] = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_268A7DA20 != -1) {
    swift_once();
  }
  uint64_t v23 = MEMORY[0x263F8EE78];
  sub_23BB9D0E8(&qword_26AEBCB18, MEMORY[0x263F46300]);
  sub_23BB9CFD4(0, &qword_26AEBCB50, MEMORY[0x263F46300], MEMORY[0x263F8D488]);
  sub_23BB5827C();
  swift_bridgeObjectRetain();
  sub_23BBDC9B0();
  sub_23BBDC500();
  uint64_t v14 = sub_23BBDC280();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v16 = v20;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v20);
  uint64_t v17 = (uint64_t *)&v11[*(int *)(v21 + 36)];
  *uint64_t v17 = KeyPath;
  v17[1] = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v16);
  uint64_t v23 = qword_268A80508;
  uint64_t v24 = qword_268A80510;
  swift_bridgeObjectRetain();
  sub_23BBDC730();
  sub_23BB9D040();
  sub_23BBDC260();
  swift_bridgeObjectRelease();
  return sub_23BB9D130((uint64_t)v11);
}

void sub_23BB9CF3C()
{
  if (!qword_268A7E170)
  {
    sub_23BBDC520();
    sub_23BB9CFD4(255, &qword_26AEBBA40, (uint64_t (*)(uint64_t))sub_23BB67588, MEMORY[0x263F1A418]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E170);
    }
  }
}

void sub_23BB9CFD4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_23BB9D040()
{
  unint64_t result = qword_268A7E178;
  if (!qword_268A7E178)
  {
    sub_23BB9CF3C();
    sub_23BB9D0E8(&qword_26AEBCB20, MEMORY[0x263F46310]);
    sub_23BB687B0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E178);
  }
  return result;
}

uint64_t sub_23BB9D0E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BB9D130(uint64_t a1)
{
  sub_23BB9CF3C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BB9D18C()
{
  uint64_t v0 = sub_23BBDBBA0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x263F8EE78];
  sub_23BBDBB80();
  uint64_t v4 = sub_23BBDBB90();
  os_log_type_t v5 = sub_23BBDC850();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v14[0] = v7;
    *(_DWORD *)uint64_t v6 = 136446466;
    uint64_t v13 = sub_23BBD0430(0xD00000000000001DLL, 0x800000023BBDEE90, v14);
    sub_23BBDC950();
    *(_WORD *)(v6 + 12) = 2082;
    uint64_t v8 = sub_23BBDC5A0();
    uint64_t v9 = MEMORY[0x23ECD0E20](MEMORY[0x263F8EE78], v8);
    uint64_t v13 = sub_23BBD0430(v9, v10, v14);
    sub_23BBDC950();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BB52000, v4, v5, "[%{public}s] supportedFamilies: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v7, -1, -1);
    MEMORY[0x23ECD1880](v6, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess();
  return v15;
}

unint64_t sub_23BB9D3D4()
{
  unint64_t result = qword_268A7E180;
  if (!qword_268A7E180)
  {
    sub_23BB9D47C();
    sub_23BB9D040();
    sub_23BB9D0E8(&qword_268A7DE00, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E180);
  }
  return result;
}

void sub_23BB9D47C()
{
  if (!qword_268A7E188)
  {
    sub_23BB9CF3C();
    sub_23BBDBF60();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E188);
    }
  }
}

uint64_t SleepStageWidgetViewModel.baseAccessibilityIdentifier.getter()
{
  if (qword_26AEBCB30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_26AEBDCF8;
  swift_bridgeObjectRetain();
  return v0;
}

__n128 SleepStageWidgetViewModel.init(summaryResults:overrideState:)@<Q0>(__n128 *a1@<X0>, unsigned __int8 *a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v3 = a1[1].n128_u64[0];
  unsigned __int8 v4 = *a2;
  __n128 result = *a1;
  *a3 = *a1;
  a3[1].n128_u64[0] = v3;
  a3[1].n128_u8[8] = v4;
  return result;
}

SleepWidgetUI::SleepStageWidgetViewModel::OverrideState_optional __swiftcall SleepStageWidgetViewModel.OverrideState.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (SleepWidgetUI::SleepStageWidgetViewModel::OverrideState_optional)rawValue;
}

uint64_t SleepStageWidgetViewModel.OverrideState.rawValue.getter()
{
  return *v0;
}

BOOL sub_23BB9D584(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BB9D598()
{
  return sub_23BBDCBF0();
}

uint64_t sub_23BB9D5E0()
{
  return sub_23BBDCBE0();
}

uint64_t sub_23BB9D60C()
{
  return sub_23BBDCBF0();
}

SleepWidgetUI::SleepStageWidgetViewModel::OverrideState_optional sub_23BB9D650(Swift::Int *a1)
{
  return SleepStageWidgetViewModel.OverrideState.init(rawValue:)(*a1);
}

void sub_23BB9D658(void *a1@<X8>)
{
  *a1 = *v1;
}

id SleepStageWidgetViewModel.summaryResults.getter@<X0>(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 24) == 2)
  {
    id v3 = 0;
    unsigned __int8 v4 = 0;
    os_log_type_t v5 = 0;
  }
  else
  {
    unsigned __int8 v4 = *(void **)(v1 + 8);
    os_log_type_t v5 = *(void **)(v1 + 16);
    id v3 = *(id *)v1;
    id result = sub_23BB5646C(*(id *)v1, v4, v5);
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t SleepStageWidgetViewModel.noDataTexts.getter()
{
  sub_23BB9D948(0, (unint64_t *)&qword_26AEBC4C8, MEMORY[0x263F8E0F8]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23BBDEF50;
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = sub_23BBDB740();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = sub_23BBDB740();
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 11565;
  *(void *)(v0 + 72) = 0xE200000000000000;
  sub_23BB9D948(0, &qword_26AEBC4B0, MEMORY[0x263F8D488]);
  sub_23BB9D998();
  uint64_t v3 = sub_23BBDC830();
  swift_bridgeObjectRelease();
  return v3;
}

id sub_23BB9D85C@<X0>(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 24) == 2)
  {
    id v3 = 0;
    unsigned __int8 v4 = 0;
    os_log_type_t v5 = 0;
  }
  else
  {
    unsigned __int8 v4 = *(void **)(v1 + 8);
    os_log_type_t v5 = *(void **)(v1 + 16);
    id v3 = *(id *)v1;
    id result = sub_23BB5646C(*(id *)v1, v4, v5);
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t sub_23BB9D8C8()
{
  return SleepStageWidgetViewModel.noDataTexts.getter();
}

uint64_t sub_23BB9D8E0()
{
  if (qword_26AEBCB30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_26AEBDCF8;
  swift_bridgeObjectRetain();
  return v0;
}

void sub_23BB9D948(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_23BB9D998()
{
  unint64_t result = qword_26AEBC4C0;
  if (!qword_26AEBC4C0)
  {
    sub_23BB9D948(255, &qword_26AEBC4B0, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC4C0);
  }
  return result;
}

unint64_t sub_23BB9DA10()
{
  unint64_t result = qword_268A7E190[0];
  if (!qword_268A7E190[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A7E190);
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStageWidgetViewModel()
{
  return &type metadata for SleepStageWidgetViewModel;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SleepStageWidgetViewModel.OverrideState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SleepStageWidgetViewModel.OverrideState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23BB9DBDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_23BB9DC04(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_23BB9DC0C(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SleepStageWidgetViewModel.OverrideState()
{
  return &type metadata for SleepStageWidgetViewModel.OverrideState;
}

uint64_t sub_23BB9DC24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_23BBDBBA0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  unsigned int v6 = sub_23BBDBB90();
  os_log_type_t v7 = sub_23BBDC880();
  if (os_log_type_enabled(v6, v7))
  {
    int v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v27 = v9;
    *(_DWORD *)int v8 = 136446210;
    uint64_t v26 = sub_23BBD0430(0xD00000000000001BLL, 0x800000023BBDF0A0, &v27);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v6, v7, "[%{public}s] Returning placeholder for sleep widget...", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v9, -1, -1);
    MEMORY[0x23ECD1880](v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_23BBDB840();
  unint64_t v10 = (int *)type metadata accessor for SleepWidgetEntry(0);
  uint64_t v11 = a1 + v10[5];
  sub_23BBDB840();
  uint64_t v12 = sub_23BBDB860();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 0, 1, v12);
  uint64_t v14 = a1 + v10[6];
  uint64_t v15 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v16 = v14 + v15[5];
  uint64_t v17 = sub_23BBDB6D0();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v25 = a1;
  v18(v16, 1, 1, v17);
  v18(v14 + v15[6], 1, 1, v17);
  sub_23BBDB850();
  uint64_t v19 = v15[9];
  *(void *)(v14 + v19) = objc_msgSend(objc_allocWithZone((Class)sub_23BBDBA90()), sel_init);
  v13(v14 + v15[11], 1, 1, v12);
  v13(v14 + v15[12], 1, 1, v12);
  v13(v14 + v15[13], 1, 1, v12);
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  *(unsigned char *)(v14 + v15[7]) = 0;
  uint64_t v20 = (void *)(v14 + v15[10]);
  *uint64_t v20 = 0;
  v20[1] = 0;
  v20[2] = 0;
  uint64_t v21 = v25 + v10[7];
  uint64_t v22 = sub_23BBDC660();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
}

void sub_23BB9DFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for SleepWidgetTimelineProvider(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5 - 8);
  int v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_23BBDBBA0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v13 = sub_23BBDBB90();
  os_log_type_t v14 = sub_23BBDC880();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v37 = v7;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v38 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v36 = v6;
    uint64_t v18 = v17;
    uint64_t v42 = (void *)v17;
    uint64_t v35 = v9;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v41 = sub_23BBD0430(0xD00000000000001BLL, 0x800000023BBDF0A0, (uint64_t *)&v42);
    uint64_t v7 = v37;
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v13, v14, "[%{public}s] Getting snapshot for sleep widget...", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v18;
    uint64_t v6 = v36;
    MEMORY[0x23ECD1880](v19, -1, -1);
    uint64_t v20 = v16;
    int v8 = v38;
    MEMORY[0x23ECD1880](v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v35);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v39;
  *(void *)(v21 + 24) = v40;
  swift_retain();
  sub_23BBDC670();
  uint64_t v23 = (void *)v4[3];
  uint64_t v24 = (void *)v4[4];
  uint64_t v42 = (void *)v4[2];
  uint64_t v22 = v42;
  uint64_t v43 = v23;
  uint64_t v44 = v24;
  sub_23BBA26EC((uint64_t)v4, (uint64_t)v8, type metadata accessor for SleepWidgetTimelineProvider);
  unint64_t v25 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  sub_23BBA2684((uint64_t)v8, v27 + v25, type metadata accessor for SleepWidgetTimelineProvider);
  uint64_t v28 = (uint64_t (**)(uint64_t))(v27 + v26);
  *uint64_t v28 = sub_23BBA2668;
  v28[1] = (uint64_t (*)(uint64_t))v21;
  id v29 = v22;
  id v30 = v23;
  id v31 = v24;
  swift_retain();
  SleepWidgetViewModelProvider.currentSleepWidgetViewModel(showLiveContent:completion:)(1, (void (*)(char *, void *))sub_23BBA22A4, v27);
  swift_release();
  uint64_t v32 = v42;
  uint64_t v33 = v43;
  uint64_t v34 = v44;
  swift_release();
}

uint64_t sub_23BB9E394(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_23BBDBBA0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v10 = sub_23BBDBB90();
  os_log_type_t v11 = sub_23BBDC880();
  if (os_log_type_enabled(v10, v11))
  {
    v17[1] = a3;
    uint64_t v12 = swift_slowAlloc();
    v17[0] = a1;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v18 = v14;
    *(_DWORD *)uint64_t v13 = 136446210;
    v17[2] = sub_23BBD0430(0xD00000000000001BLL, 0x800000023BBDF0A0, &v18);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v10, v11, "[%{public}s] Returning snapshot for sleep widget", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v14, -1, -1);
    uint64_t v15 = v13;
    a1 = v17[0];
    MEMORY[0x23ECD1880](v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return a2(a1);
}

void sub_23BB9E59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for SleepWidgetTimelineProvider(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_23BBDBBA0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v13 = sub_23BBDBB90();
  os_log_type_t v14 = sub_23BBDC880();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v37 = v7;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v38 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v36 = v6;
    uint64_t v18 = v17;
    uint64_t v42 = (void *)v17;
    uint64_t v35 = v9;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v41 = sub_23BBD0430(0xD00000000000001BLL, 0x800000023BBDF0A0, (uint64_t *)&v42);
    uint64_t v7 = v37;
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v13, v14, "[%{public}s] Getting timeline for sleep widget...", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v18;
    uint64_t v6 = v36;
    MEMORY[0x23ECD1880](v19, -1, -1);
    uint64_t v20 = v16;
    uint64_t v8 = v38;
    MEMORY[0x23ECD1880](v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v35);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v39;
  *(void *)(v21 + 24) = v40;
  swift_retain();
  sub_23BBDC670();
  uint64_t v23 = (void *)v4[3];
  uint64_t v24 = (void *)v4[4];
  uint64_t v42 = (void *)v4[2];
  uint64_t v22 = v42;
  uint64_t v43 = v23;
  uint64_t v44 = v24;
  sub_23BBA26EC((uint64_t)v4, (uint64_t)v8, type metadata accessor for SleepWidgetTimelineProvider);
  unint64_t v25 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  sub_23BBA2684((uint64_t)v8, v27 + v25, type metadata accessor for SleepWidgetTimelineProvider);
  uint64_t v28 = (uint64_t (**)(uint64_t))(v27 + v26);
  *uint64_t v28 = sub_23BBA23EC;
  v28[1] = (uint64_t (*)(uint64_t))v21;
  id v29 = v22;
  id v30 = v23;
  id v31 = v24;
  swift_retain();
  SleepWidgetViewModelProvider.currentSleepWidgetViewModel(showLiveContent:completion:)(1, (void (*)(char *, void *))sub_23BBA22A4, v27);
  swift_release();
  uint64_t v32 = v42;
  uint64_t v33 = v43;
  uint64_t v34 = v44;
  swift_release();
}

uint64_t sub_23BB9E94C(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v51 = a1;
  sub_23BBA25D4();
  uint64_t v6 = v5;
  uint64_t v53 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v52 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = sub_23BBDB860();
  uint64_t v46 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v45 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_23BBDC640();
  uint64_t v49 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v47 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (char *)&v40 - v16;
  uint64_t v17 = sub_23BBDBBA0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v21 = sub_23BBDBB90();
  os_log_type_t v22 = sub_23BBDC880();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v43 = v6;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v42 = v10;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v44 = a3;
    uint64_t v26 = v25;
    uint64_t v55 = v25;
    uint64_t v41 = v17;
    *(_DWORD *)uint64_t v24 = 136446210;
    uint64_t v54 = sub_23BBD0430(0xD00000000000001BLL, 0x800000023BBDF0A0, &v55);
    uint64_t v6 = v43;
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v21, v22, "[%{public}s] Returning timeline for sleep widget", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v26, -1, -1);
    uint64_t v27 = v24;
    uint64_t v10 = v42;
    MEMORY[0x23ECD1880](v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v41);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  uint64_t v28 = type metadata accessor for SleepWidgetEntry(0);
  uint64_t v29 = v51;
  sub_23BBA22A8(v51 + *(int *)(v28 + 20), (uint64_t)v10, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
  uint64_t v30 = v46;
  int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48))(v10, 1, v11);
  uint64_t v32 = v48;
  if (v31 == 1)
  {
    sub_23BBA2328((uint64_t)v10);
    sub_23BBDC630();
  }
  else
  {
    uint64_t v33 = v45;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v45, v10, v11);
    sub_23BBDC620();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v11);
  }
  sub_23BBA1C84(0, qword_268A7E1C0, type metadata accessor for SleepWidgetEntry, MEMORY[0x263F8E0F8]);
  unint64_t v34 = (*(unsigned __int8 *)(*(void *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v28 - 8) + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23BBDD290;
  sub_23BBA26EC(v29, v35 + v34, type metadata accessor for SleepWidgetEntry);
  uint64_t v37 = v49;
  uint64_t v36 = v50;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v47, v32, v50);
  sub_23BBA0EAC(&qword_26AEBC8F8, (void (*)(uint64_t))type metadata accessor for SleepWidgetEntry);
  uint64_t v38 = v52;
  sub_23BBDC680();
  a2(v38);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v32, v36);
}

uint64_t sub_23BB9EFB8(uint64_t a1, void *a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v56 = a5;
  uint64_t v59 = a4;
  uint64_t v53 = a3;
  uint64_t v7 = (int *)type metadata accessor for SleepWidgetEntry(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  int v58 = (char *)&v49 - v11;
  uint64_t v57 = sub_23BBDB860();
  uint64_t v62 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SleepWidgetViewModel();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v55 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_23BBDBBA0();
  uint64_t v61 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  os_log_type_t v22 = (char *)&v49 - v21;
  uint64_t v60 = v20;
  if (a2)
  {
    id v23 = a2;
    sub_23BBDBB80();
    id v24 = a2;
    id v25 = a2;
    uint64_t v26 = sub_23BBDBB90();
    os_log_type_t v27 = sub_23BBDC860();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v54 = v19;
      uint64_t v29 = v28;
      uint64_t v51 = swift_slowAlloc();
      uint64_t v64 = v51;
      *(_DWORD *)uint64_t v29 = 136446466;
      int v52 = v13;
      uint64_t v63 = sub_23BBD0430(0xD00000000000001BLL, 0x800000023BBDF0A0, &v64);
      sub_23BBDC950();
      *(_WORD *)(v29 + 12) = 2082;
      uint64_t v50 = (char *)(v29 + 14);
      uint64_t v63 = (uint64_t)a2;
      id v30 = a2;
      sub_23BB5D8B4();
      uint64_t v31 = sub_23BBDC700();
      uint64_t v63 = sub_23BBD0430(v31, v32, &v64);
      sub_23BBDC950();
      uint64_t v13 = v52;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23BB52000, v26, v27, "[%{public}s] Error getting sleep widget viewModel: %{public}s", (uint8_t *)v29, 0x16u);
      uint64_t v33 = v51;
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v33, -1, -1);
      uint64_t v34 = v29;
      uint64_t v19 = v54;
      MEMORY[0x23ECD1880](v34, -1, -1);
    }
    else
    {
    }
    uint64_t v16 = v60;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v22, v60);
  }
  sub_23BBDBB80();
  uint64_t v35 = v55;
  sub_23BBA26EC(a1, v55, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  uint64_t v36 = v19;
  uint64_t v37 = sub_23BBDBB90();
  os_log_type_t v38 = sub_23BBDC880();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    int v52 = (char *)a1;
    uint64_t v64 = v51;
    *(_DWORD *)uint64_t v39 = 136446466;
    uint64_t v54 = v36;
    uint64_t v63 = sub_23BBD0430(0xD00000000000001BLL, 0x800000023BBDF0A0, &v64);
    uint64_t v50 = v9;
    sub_23BBDC950();
    *(_WORD *)(v39 + 12) = 2082;
    uint64_t v40 = SleepWidgetViewModel.description.getter();
    uint64_t v63 = sub_23BBD0430(v40, v41, &v64);
    uint64_t v9 = v50;
    sub_23BBDC950();
    swift_bridgeObjectRelease();
    sub_23BBA2754(v35, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
    _os_log_impl(&dword_23BB52000, v37, v38, "[%{public}s] Returning sleep widget viewModel: %{public}s", (uint8_t *)v39, 0x16u);
    uint64_t v42 = v51;
    swift_arrayDestroy();
    a1 = (uint64_t)v52;
    MEMORY[0x23ECD1880](v42, -1, -1);
    MEMORY[0x23ECD1880](v39, -1, -1);

    (*(void (**)(char *, uint64_t))(v61 + 8))(v54, v60);
  }
  else
  {
    sub_23BBA2754(v35, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);

    (*(void (**)(char *, uint64_t))(v61 + 8))(v36, v16);
  }
  uint64_t v43 = v57;
  sub_23BBDB850();
  uint64_t v44 = (uint64_t)v58;
  if ((*(unsigned char *)(a1 + 8) & 1) != 0 || (unint64_t)(*(void *)a1 - 6) > 0xFFFFFFFFFFFFFFFBLL)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v58, 1, 1, v43);
  }
  else
  {
    type metadata accessor for SleepWidgetTimelineProvider(0);
    Calendar.midnight(after:)(v44);
  }
  uint64_t v45 = v62;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v9, v13, v43);
  sub_23BBA22A8(v44, (uint64_t)&v9[v7[5]], (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
  sub_23BBA26EC(a1, (uint64_t)&v9[v7[6]], (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  uint64_t v46 = (uint64_t)&v9[v7[7]];
  SleepWidgetViewModel.timelineEntryRelevance.getter(v46);
  uint64_t v47 = sub_23BBDC660();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 0, 1, v47);
  v59(v9);
  sub_23BBA2754((uint64_t)v9, type metadata accessor for SleepWidgetEntry);
  sub_23BBA2328(v44);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v13, v43);
}

uint64_t sub_23BB9F778@<X0>(uint64_t a1@<X8>)
{
  return sub_23BB9DC24(a1);
}

uint64_t sub_23BB9F798(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_23BB5F558;
  return sub_23BB9F830(a1);
}

uint64_t sub_23BB9F830(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  v2[6] = type metadata accessor for SleepWidgetEntry(0);
  v2[7] = swift_task_alloc();
  uint64_t v3 = sub_23BBDBBA0();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_23BB9F930, 0, 0);
}

uint64_t sub_23BB9F930()
{
  uint64_t v19 = v0;
  sub_23BBDBB80();
  uint64_t v1 = sub_23BBDBB90();
  os_log_type_t v2 = sub_23BBDC880();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[11];
    uint64_t v4 = v0[8];
    uint64_t v5 = v0[9];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v18 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    v0[3] = sub_23BBD0430(0xD00000000000001BLL, 0x800000023BBDF0A0, &v18);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v1, v2, "[%{public}s] fetching current entry for relevance...", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v7, -1, -1);
    MEMORY[0x23ECD1880](v6, -1, -1);

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v8(v3, v4);
  }
  else
  {
    uint64_t v9 = v0[11];
    uint64_t v10 = v0[8];
    uint64_t v11 = v0[9];

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  v0[12] = v8;
  uint64_t v12 = v0[5];
  uint64_t v13 = swift_task_alloc();
  v0[13] = v13;
  *(void *)(v13 + 16) = v12;
  *(unsigned char *)(v13 + 24) = 1;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[14] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_23BB9FB9C;
  uint64_t v16 = v0[6];
  uint64_t v15 = v0[7];
  return MEMORY[0x270FA2318](v15, 0, 0, 0xD000000000000023, 0x800000023BBE05C0, sub_23BBA212C, v13, v16);
}

uint64_t sub_23BB9FB9C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_23BB9FCB4, 0, 0);
}

uint64_t sub_23BB9FCB4()
{
  uint64_t v15 = v0;
  sub_23BBDBB80();
  uint64_t v1 = sub_23BBDBB90();
  os_log_type_t v2 = sub_23BBDC880();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[12];
    uint64_t v3 = v0[10];
    uint64_t v4 = v0[8];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = sub_23BBD0430(0xD00000000000001BLL, 0x800000023BBDF0A0, &v14);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v1, v2, "[%{public}s] determining relevance for entry...", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v6, -1, -1);
    MEMORY[0x23ECD1880](v5, -1, -1);

    v13(v3, v4);
  }
  else
  {
    uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[12];
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[8];

    v7(v8, v9);
  }
  uint64_t v10 = v0[7];
  sub_23BB5A888(v0[4]);
  sub_23BBA2754(v10, type metadata accessor for SleepWidgetEntry);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

void sub_23BB9FED4(uint64_t a1, void *a2, int a3)
{
  int v27 = a3;
  uint64_t v5 = type metadata accessor for SleepWidgetTimelineProvider(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5 - 8);
  sub_23BBA2138();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(&v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v10 + 32))(v13 + v12, &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
  uint64_t v15 = (void *)a2[3];
  uint64_t v16 = (void *)a2[4];
  uint64_t v28 = (void *)a2[2];
  uint64_t v14 = v28;
  uint64_t v29 = v15;
  id v30 = v16;
  sub_23BBA26EC((uint64_t)a2, (uint64_t)&v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for SleepWidgetTimelineProvider);
  unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = swift_allocObject();
  sub_23BBA2684((uint64_t)&v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v18 + v17, type metadata accessor for SleepWidgetTimelineProvider);
  uint64_t v19 = (uint64_t (**)(uint64_t))(v18 + ((v7 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v19 = sub_23BBA2230;
  v19[1] = (uint64_t (*)(uint64_t))v13;
  id v20 = v14;
  id v21 = v15;
  id v22 = v16;
  swift_retain();
  SleepWidgetViewModelProvider.currentSleepWidgetViewModel(showLiveContent:completion:)(v27, (void (*)(char *, void *))sub_23BBA22A4, v18);
  swift_release();
  id v23 = v28;
  id v24 = v29;
  id v25 = v30;
  swift_release();
}

uint64_t sub_23BBA0160(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepWidgetEntry(0);
  MEMORY[0x270FA5388](v2 - 8);
  sub_23BBA26EC(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SleepWidgetEntry);
  sub_23BBA2138();
  return sub_23BBDC7C0();
}

uint64_t sub_23BBA0208(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_23BB5B0A0;
  return sub_23BB9F830(a1);
}

uint64_t sub_23BBA02A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23BBA22A8(v2 + *(int *)(a1 + 28), a2, &qword_26AEBC048, MEMORY[0x263F1FDF0]);
}

SleepWidgetUI::SleepWidget __swiftcall SleepWidget.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23BBDC6E0();
  *uint64_t v1 = v2;
  v1[1] = (uint64_t)v3;
  result.kind._object = v3;
  result.kind._countAndFlagsBits = v2;
  return result;
}

uint64_t SleepWidget.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v68 = a1;
  uint64_t v2 = sub_23BBDB8A0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SleepWidgetTimelineProvider(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v54 - v10;
  sub_23BBA0CF4();
  uint64_t v56 = v12;
  uint64_t v55 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBA0FCC();
  uint64_t v59 = v15;
  uint64_t v57 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBA109C();
  uint64_t v65 = v18;
  *(void *)&long long v60 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  int v58 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBA11AC();
  uint64_t v66 = *(void *)(v20 - 8);
  uint64_t v67 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v62 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBA12F4();
  uint64_t v63 = *(void *)(v22 - 8);
  uint64_t v64 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v61 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = *v1;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F07740], v2);
  swift_bridgeObjectRetain();
  sub_23BBDB8B0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A410]), sel_init);
  void *v9 = v24;
  id v25 = objc_allocWithZone(MEMORY[0x263F75EA8]);
  id v26 = v24;
  int v27 = (void *)sub_23BBDC6D0();
  id v28 = objc_msgSend(v25, sel_initWithIdentifier_healthStore_options_, v27, v26, 1);

  v9[1] = v28;
  id v29 = objc_allocWithZone(MEMORY[0x263F0A130]);
  id v30 = v26;
  id v31 = v28;
  id v32 = objc_msgSend(v29, sel_init);
  v9[2] = v30;
  v9[3] = v31;
  v9[4] = v32;
  sub_23BBA2684((uint64_t)v9, (uint64_t)v11, type metadata accessor for SleepWidgetTimelineProvider);
  sub_23BBA0D58();
  sub_23BBA0EF4();
  sub_23BBA0EAC(&qword_26AEBBC00, (void (*)(uint64_t))type metadata accessor for SleepWidgetTimelineProvider);
  sub_23BBDC600();
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  uint64_t v69 = sub_23BBDB740();
  uint64_t v70 = v33;
  uint64_t v34 = sub_23BBA0EAC(&qword_26AEBBCE8, (void (*)(uint64_t))sub_23BBA0CF4);
  unint64_t v35 = sub_23BB570F4();
  uint64_t v36 = MEMORY[0x263F8D310];
  uint64_t v37 = v56;
  sub_23BBDBEA0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v37);
  uint64_t v73 = sub_23BBDB740();
  uint64_t v74 = v38;
  uint64_t v69 = v37;
  uint64_t v70 = v36;
  uint64_t v71 = v34;
  unint64_t v72 = v35;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v41 = v58;
  uint64_t v40 = v59;
  sub_23BBDBE70();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v40);
  _s13SleepWidgetUI0aB4ViewV17supportedFamiliesSay0B3Kit0B6FamilyOGvgZ_0();
  uint64_t v69 = v40;
  uint64_t v70 = v36;
  uint64_t v71 = OpaqueTypeConformance2;
  unint64_t v72 = v35;
  uint64_t v42 = swift_getOpaqueTypeConformance2();
  uint64_t v43 = v62;
  uint64_t v44 = v65;
  sub_23BBDBE80();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v44);
  uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
  sub_23BBA1C84(0, &qword_26AEBBD00, MEMORY[0x263F1FD48], MEMORY[0x263F8E0F8]);
  sub_23BBDC5C0();
  uint64_t v46 = swift_allocObject();
  long long v60 = xmmword_23BBDD290;
  *(_OWORD *)(v46 + 16) = xmmword_23BBDD290;
  sub_23BBDC5B0();
  sub_23BBA1C84(0, (unint64_t *)&qword_26AEBBCF8, MEMORY[0x263F1FD10], v45);
  uint64_t v47 = sub_23BBDC5A0();
  uint64_t v48 = *(void *)(v47 - 8);
  unint64_t v49 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = v60;
  (*(void (**)(unint64_t, void, uint64_t))(v48 + 104))(v50 + v49, *MEMORY[0x263F1FCD8], v47);
  uint64_t v69 = v44;
  uint64_t v70 = v42;
  swift_getOpaqueTypeConformance2();
  uint64_t v51 = v61;
  uint64_t v52 = v67;
  sub_23BBDBE90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v43, v52);
  sub_23BBA1794();
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v51, v64);
}

uint64_t type metadata accessor for SleepWidgetTimelineProvider(uint64_t a1)
{
  return sub_23BB5D6A4(a1, qword_26AEBBF00);
}

void sub_23BBA0CF4()
{
  if (!qword_26AEBBCF0)
  {
    sub_23BBA0D58();
    sub_23BBA0EF4();
    unint64_t v0 = sub_23BBDC610();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBCF0);
    }
  }
}

void sub_23BBA0D58()
{
  if (!qword_26AEBBC60)
  {
    sub_23BBA0DC0();
    sub_23BB5BE88();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBC60);
    }
  }
}

void sub_23BBA0DC0()
{
  if (!qword_26AEBBCD0)
  {
    type metadata accessor for SleepWidgetView();
    sub_23BBDB860();
    sub_23BBA0EAC(qword_26AEBBC08, (void (*)(uint64_t))type metadata accessor for SleepWidgetView);
    sub_23BBA0EAC(&qword_26AEBBB50, MEMORY[0x263F07490]);
    unint64_t v0 = sub_23BBDC380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBCD0);
    }
  }
}

uint64_t sub_23BBA0EAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BBA0EF4()
{
  unint64_t result = qword_26AEBBC58;
  if (!qword_26AEBBC58)
  {
    sub_23BBA0D58();
    sub_23BBA0EAC(&qword_26AEBBCC8, (void (*)(uint64_t))sub_23BBA0DC0);
    sub_23BBA0EAC(&qword_26AEBBCA8, (void (*)(uint64_t))sub_23BB5BE88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBBC58);
  }
  return result;
}

void sub_23BBA0FCC()
{
  if (!qword_26AEBBCA0)
  {
    sub_23BBA0CF4();
    sub_23BBA0EAC(&qword_26AEBBCE8, (void (*)(uint64_t))sub_23BBA0CF4);
    sub_23BB570F4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBBCA0);
    }
  }
}

void sub_23BBA109C()
{
  if (!qword_26AEBBC70)
  {
    sub_23BBA0FCC();
    sub_23BBA0CF4();
    sub_23BBA0EAC(&qword_26AEBBCE8, (void (*)(uint64_t))sub_23BBA0CF4);
    sub_23BB570F4();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBBC70);
    }
  }
}

void sub_23BBA11AC()
{
  if (!qword_26AEBBC80)
  {
    sub_23BBA109C();
    sub_23BBA0FCC();
    sub_23BBA0CF4();
    sub_23BBA0EAC(&qword_26AEBBCE8, (void (*)(uint64_t))sub_23BBA0CF4);
    sub_23BB570F4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBBC80);
    }
  }
}

void sub_23BBA12F4()
{
  if (!qword_26AEBBC88)
  {
    sub_23BBA11AC();
    sub_23BBA109C();
    sub_23BBA0FCC();
    sub_23BBA0CF4();
    sub_23BBA0EAC(&qword_26AEBBCE8, (void (*)(uint64_t))sub_23BBA0CF4);
    sub_23BB570F4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBBC88);
    }
  }
}

uint64_t sub_23BBA146C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SleepWidgetView();
  uint64_t v8 = (int *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v26 - v12;
  sub_23BBA0DC0();
  uint64_t v15 = v14 - 8;
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SleepWidgetEntry(0);
  sub_23BBA26EC(a1 + *(int *)(v18 + 24), (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  *uint64_t v11 = swift_getKeyPath();
  sub_23BBA1C84(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = (uint64_t *)((char *)v11 + v8[7]);
  uint64_t *v19 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (char *)v11 + v8[8];
  *(void *)uint64_t v20 = swift_getKeyPath();
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  v20[32] = 0;
  sub_23BBA2684((uint64_t)v6, (uint64_t)v11 + v8[9], (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  sub_23BBA2684((uint64_t)v11, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SleepWidgetView);
  sub_23BBA26EC((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SleepWidgetView);
  uint64_t v21 = &v17[*(int *)(v15 + 60)];
  uint64_t v22 = sub_23BBDB860();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, a1, v22);
  sub_23BBA2754((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SleepWidgetView);
  uint64_t v23 = sub_23BBDBBF0();
  sub_23BBA26EC((uint64_t)v17, a2, (uint64_t (*)(void))sub_23BBA0DC0);
  sub_23BBA0D58();
  *(void *)(a2 + *(int *)(v24 + 36)) = v23;
  return sub_23BBA2754((uint64_t)v17, (uint64_t (*)(void))sub_23BBA0DC0);
}

id sub_23BBA1794()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23BBDBBA0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v36 - v7;
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v10 = result;
    unsigned int v11 = objc_msgSend(result, sel_hksp_supportsSleepWidget);

    unsigned int v38 = v11;
    if (v11)
    {
      sub_23BBDBB80();
      uint64_t v12 = sub_23BBDBB90();
      os_log_type_t v13 = sub_23BBDC850();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        uint64_t v40 = v15;
        uint64_t v37 = v2;
        *(_DWORD *)uint64_t v14 = 136446210;
        uint64_t v39 = sub_23BBD0430(0xD00000000000006BLL, 0x800000023BBE07B0, &v40);
        sub_23BBDC950();
        _os_log_impl(&dword_23BB52000, v12, v13, "[%{public}s] sleep widget supported", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23ECD1880](v15, -1, -1);
        MEMORY[0x23ECD1880](v14, -1, -1);

        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v37);
LABEL_10:
        sub_23BBA12F4();
        sub_23BBA11AC();
        uint64_t v23 = v22;
        sub_23BBA109C();
        uint64_t v25 = v24;
        sub_23BBA0FCC();
        uint64_t v27 = v26;
        sub_23BBA0CF4();
        uint64_t v29 = v28;
        uint64_t v30 = sub_23BBA0EAC(&qword_26AEBBCE8, (void (*)(uint64_t))sub_23BBA0CF4);
        unint64_t v31 = sub_23BB570F4();
        uint64_t v32 = MEMORY[0x263F8D310];
        uint64_t v40 = v29;
        uint64_t v41 = MEMORY[0x263F8D310];
        uint64_t v42 = v30;
        unint64_t v43 = v31;
        uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
        uint64_t v40 = v27;
        uint64_t v41 = v32;
        uint64_t v42 = OpaqueTypeConformance2;
        unint64_t v43 = v31;
        uint64_t v34 = swift_getOpaqueTypeConformance2();
        uint64_t v40 = v25;
        uint64_t v41 = v34;
        uint64_t v35 = swift_getOpaqueTypeConformance2();
        uint64_t v40 = v23;
        uint64_t v41 = v35;
        swift_getOpaqueTypeConformance2();
        return (id)sub_23BBDBEB0();
      }

      uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v21 = v8;
    }
    else
    {
      sub_23BBDBB80();
      uint64_t v16 = sub_23BBDBB90();
      os_log_type_t v17 = sub_23BBDC880();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v37 = v1;
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        uint64_t v40 = v19;
        *(_DWORD *)uint64_t v18 = 136446210;
        uint64_t v39 = sub_23BBD0430(0xD00000000000006BLL, 0x800000023BBE07B0, &v40);
        sub_23BBDC950();
        _os_log_impl(&dword_23BB52000, v16, v17, "[%{public}s] sleep widget not supported", v18, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23ECD1880](v19, -1, -1);
        MEMORY[0x23ECD1880](v18, -1, -1);
      }

      uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v21 = v6;
    }
    v20(v21, v2);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23BBA1C4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_23BBDC6E0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_23BBA1C84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BBA1CE8()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SleepWidget()
{
  return &type metadata for SleepWidget;
}

uint64_t sub_23BBA1D14()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBA1E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBA1EA4);
}

uint64_t sub_23BBA1EA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_23BBDB970();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unsigned int v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_23BBA1F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBA1F68);
}

void *sub_23BBA1F68(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_23BBDB970();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_23BBA2010()
{
  uint64_t result = sub_23BBDB970();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23BBA20C4()
{
  return sub_23BBA0EAC(&qword_26AEBC8F8, (void (*)(uint64_t))type metadata accessor for SleepWidgetEntry);
}

uint64_t type metadata accessor for SleepWidgetEntry(uint64_t a1)
{
  return sub_23BB5D6A4(a1, qword_26AEBBFA0);
}

void sub_23BBA212C(uint64_t a1)
{
  sub_23BB9FED4(a1, *(void **)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

void sub_23BBA2138()
{
  if (!qword_26AEBC070)
  {
    type metadata accessor for SleepWidgetEntry(255);
    unint64_t v0 = sub_23BBDC7D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC070);
    }
  }
}

uint64_t sub_23BBA21A0()
{
  sub_23BBA2138();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_23BBA2230(uint64_t a1)
{
  sub_23BBA2138();
  return sub_23BBA0160(a1);
}

uint64_t sub_23BBA22A8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_23BBA1C84(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23BBA2328(uint64_t a1)
{
  sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BBA23B4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_23BBA23EC(uint64_t a1)
{
  return sub_23BB9E94C(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroy_12Tm_0()
{
  uint64_t v1 = (int *)(type metadata accessor for SleepWidgetTimelineProvider(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = (id *)(v0 + v3);

  uint64_t v7 = (char *)v6 + v1[10];
  uint64_t v8 = sub_23BBDB970();
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  return MEMORY[0x270FA0238](v0, v5 + 16, v4);
}

uint64_t sub_23BBA2524(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for SleepWidgetTimelineProvider(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void (**)(char *))v8;
  uint64_t v10 = *(void *)(v8 + 8);
  return sub_23BB9EFB8(a1, a2, v7, v9, v10);
}

void sub_23BBA25D4()
{
  if (!qword_268A7E1B8)
  {
    type metadata accessor for SleepWidgetEntry(255);
    sub_23BBA0EAC(&qword_26AEBC8F8, (void (*)(uint64_t))type metadata accessor for SleepWidgetEntry);
    unint64_t v0 = sub_23BBDC690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E1B8);
    }
  }
}

uint64_t sub_23BBA2668(uint64_t a1)
{
  return sub_23BB9E394(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_23BBA2684(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BBA26EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BBA2754(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_23BBA27B4(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v15 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_23BBDB860();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = *(int *)(a3 + 20);
    unsigned int v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v61 = v9;
    uint64_t v62 = v8;
    if (v66(&a2[v10], 1, v7))
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    uint64_t v63 = a3;
    uint64_t v64 = a2;
    uint64_t v16 = *(int *)(a3 + 24);
    uint64_t v65 = a1;
    os_log_type_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    *(void *)os_log_type_t v17 = *(void *)&a2[v16];
    v17[8] = a2[v16 + 8];
    uint64_t v19 = (int *)type metadata accessor for SleepWidgetViewModel();
    uint64_t v20 = v19[5];
    uint64_t v21 = &v17[v20];
    uint64_t v22 = &v18[v20];
    uint64_t v23 = sub_23BBDB6D0();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    if (v25(v22, 1, v23))
    {
      sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v27 = v19[6];
    uint64_t v28 = &v17[v27];
    uint64_t v29 = &v18[v27];
    if (v25(&v18[v27], 1, v23))
    {
      sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v23);
    }
    v17[v19[7]] = v18[v19[7]];
    v61(&v17[v19[8]], &v18[v19[8]], v7);
    uint64_t v31 = v19[9];
    uint64_t v32 = *(void **)&v18[v31];
    *(void *)&v17[v31] = v32;
    uint64_t v33 = v19[10];
    uint64_t v34 = &v17[v33];
    uint64_t v35 = &v18[v33];
    uint64_t v36 = *(void *)&v18[v33];
    id v37 = v32;
    if (v36)
    {
      uint64_t v39 = (void *)*((void *)v35 + 1);
      unsigned int v38 = (void *)*((void *)v35 + 2);
      *(void *)uint64_t v34 = v36;
      *((void *)v34 + 1) = v39;
      *((void *)v34 + 2) = v38;
      swift_bridgeObjectRetain();
      id v40 = v39;
      id v41 = v38;
    }
    else
    {
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
      *((void *)v34 + 2) = *((void *)v35 + 2);
    }
    uint64_t v42 = v19[11];
    unint64_t v43 = &v17[v42];
    uint64_t v44 = &v18[v42];
    if (v66(&v18[v42], 1, v7))
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      v61(v43, v44, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v43, 0, 1, v7);
    }
    uint64_t v46 = v19[12];
    uint64_t v47 = &v17[v46];
    uint64_t v48 = &v18[v46];
    if (v66(&v18[v46], 1, v7))
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      v61(v47, v48, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v47, 0, 1, v7);
    }
    uint64_t v50 = v19[13];
    uint64_t v51 = &v17[v50];
    uint64_t v52 = &v18[v50];
    uint64_t v15 = v65;
    if (v66(&v18[v50], 1, v7))
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      v61(v51, v52, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v51, 0, 1, v7);
    }
    uint64_t v54 = *(int *)(v63 + 28);
    uint64_t v55 = (char *)v65 + v54;
    uint64_t v56 = (char *)v64 + v54;
    uint64_t v57 = sub_23BBDC660();
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      sub_23BBA1C84(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
      memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
  }
  return v15;
}

uint64_t sub_23BBA2F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB860();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v24 = v6;
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t v9 = a1 + *(int *)(a2 + 24);
  uint64_t v10 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v11 = v9 + v10[5];
  uint64_t v12 = sub_23BBDB6D0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v14(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v15 = v9 + v10[6];
  if (!v14(v15, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v12);
  }
  v24(v9 + v10[8], v4);

  uint64_t v16 = v9 + v10[10];
  if (*(void *)v16)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = v9 + v10[11];
  if (!v8(v17, 1, v4)) {
    v24(v17, v4);
  }
  uint64_t v18 = v9 + v10[12];
  if (!v8(v18, 1, v4)) {
    v24(v18, v4);
  }
  uint64_t v19 = v9 + v10[13];
  if (!v8(v19, 1, v4)) {
    v24(v19, v4);
  }
  uint64_t v20 = v26 + *(int *)(v25 + 28);
  uint64_t v21 = sub_23BBDC660();
  uint64_t v27 = *(void *)(v21 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v20, 1, v21);
  if (!result)
  {
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
    return v23(v20, v21);
  }
  return result;
}

char *sub_23BBA3314(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v58 = v8;
  uint64_t v59 = v7;
  if (v63(&a2[v9], 1, v6))
  {
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v60 = a3;
  uint64_t v61 = a2;
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v62 = a1;
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)&a2[v13];
  v14[8] = a2[v13 + 8];
  uint64_t v16 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v14[v17];
  uint64_t v19 = &v15[v17];
  uint64_t v20 = sub_23BBDB6D0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, v20))
  {
    sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v24 = v16[6];
  uint64_t v25 = &v14[v24];
  uint64_t v26 = &v15[v24];
  if (v22(&v15[v24], 1, v20))
  {
    sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v25, v26, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, v20);
  }
  v14[v16[7]] = v15[v16[7]];
  v58(&v14[v16[8]], &v15[v16[8]], v6);
  uint64_t v28 = v16[9];
  uint64_t v29 = *(void **)&v15[v28];
  *(void *)&v14[v28] = v29;
  uint64_t v30 = v16[10];
  uint64_t v31 = &v14[v30];
  uint64_t v32 = &v15[v30];
  uint64_t v33 = *(void *)&v15[v30];
  id v34 = v29;
  if (v33)
  {
    uint64_t v36 = (void *)*((void *)v32 + 1);
    uint64_t v35 = (void *)*((void *)v32 + 2);
    *(void *)uint64_t v31 = v33;
    *((void *)v31 + 1) = v36;
    *((void *)v31 + 2) = v35;
    swift_bridgeObjectRetain();
    id v37 = v36;
    id v38 = v35;
  }
  else
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    *((void *)v31 + 2) = *((void *)v32 + 2);
  }
  uint64_t v39 = v16[11];
  id v40 = &v14[v39];
  id v41 = &v15[v39];
  if (v63(&v15[v39], 1, v6))
  {
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    v58(v40, v41, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v40, 0, 1, v6);
  }
  uint64_t v43 = v16[12];
  uint64_t v44 = &v14[v43];
  uint64_t v45 = &v15[v43];
  if (v63(&v15[v43], 1, v6))
  {
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    v58(v44, v45, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v44, 0, 1, v6);
  }
  uint64_t v47 = v16[13];
  uint64_t v48 = &v14[v47];
  uint64_t v49 = &v15[v47];
  if (v63(&v15[v47], 1, v6))
  {
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    v58(v48, v49, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v48, 0, 1, v6);
  }
  uint64_t v51 = *(int *)(v60 + 28);
  uint64_t v52 = &v62[v51];
  uint64_t v53 = &v61[v51];
  uint64_t v54 = sub_23BBDC660();
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    sub_23BBA1C84(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  return v62;
}

uint64_t sub_23BBA3A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v95 = a3;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(a1 + v9, 1, v6);
  uint64_t v96 = v6;
  unsigned int v97 = v12;
  int v14 = v12((uint64_t)v11, 1, v6);
  uint64_t v91 = v8;
  uint64_t v92 = v7;
  if (v13)
  {
    if (v14)
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      uint64_t v16 = v6;
    }
    else
    {
      uint64_t v16 = v6;
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
    }
  }
  else
  {
    uint64_t v16 = v6;
    if (v14)
    {
      (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
    }
  }
  uint64_t v18 = *(int *)(v95 + 24);
  uint64_t v93 = a2;
  uint64_t v94 = a1;
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = *(void *)(a2 + v18);
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)uint64_t v19 = v21;
  uint64_t v98 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v22 = v98[5];
  uint64_t v23 = (void *)(v19 + v22);
  uint64_t v24 = (void *)(v20 + v22);
  uint64_t v25 = sub_23BBDB6D0();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v23, v25);
LABEL_13:
    sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v23, v24, v25);
LABEL_14:
  uint64_t v31 = v98[6];
  uint64_t v32 = (void *)(v19 + v31);
  uint64_t v33 = (void *)(v20 + v31);
  int v34 = v27((void *)(v19 + v31), 1, v25);
  int v35 = v27(v33, 1, v25);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v32, v33, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v32, 0, 1, v25);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v32, v25);
LABEL_19:
    sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v32, v33, v25);
LABEL_20:
  *(unsigned char *)(v19 + v98[7]) = *(unsigned char *)(v20 + v98[7]);
  v91(v19 + v98[8], v20 + v98[8], v16);
  uint64_t v37 = v98[9];
  id v38 = *(void **)(v20 + v37);
  uint64_t v39 = *(void **)(v19 + v37);
  *(void *)(v19 + v37) = v38;
  id v40 = v38;

  uint64_t v41 = v98[10];
  uint64_t v42 = (void *)(v19 + v41);
  uint64_t v43 = (long long *)(v20 + v41);
  uint64_t v44 = *(void *)(v20 + v41);
  if (*(void *)(v19 + v41))
  {
    if (v44)
    {
      *uint64_t v42 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v45 = (void *)v42[1];
      uint64_t v46 = (void *)*((void *)v43 + 1);
      v42[1] = v46;
      id v47 = v46;

      uint64_t v48 = (void *)v42[2];
      uint64_t v49 = (void *)*((void *)v43 + 2);
      v42[2] = v49;
      id v50 = v49;
    }
    else
    {
      sub_23BB547F0(v19 + v41);
      uint64_t v55 = *((void *)v43 + 2);
      *(_OWORD *)uint64_t v42 = *v43;
      v42[2] = v55;
    }
  }
  else if (v44)
  {
    *uint64_t v42 = v44;
    uint64_t v51 = (void *)*((void *)v43 + 1);
    v42[1] = v51;
    uint64_t v52 = (void *)*((void *)v43 + 2);
    v42[2] = v52;
    swift_bridgeObjectRetain();
    id v53 = v51;
    id v54 = v52;
  }
  else
  {
    long long v56 = *v43;
    v42[2] = *((void *)v43 + 2);
    *(_OWORD *)uint64_t v42 = v56;
  }
  uint64_t v57 = v98[11];
  uint64_t v58 = (void *)(v19 + v57);
  uint64_t v59 = (const void *)(v20 + v57);
  int v60 = v97(v19 + v57, 1, v16);
  int v61 = v97((uint64_t)v59, 1, v16);
  if (v60)
  {
    if (v61)
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
      uint64_t v63 = v96;
    }
    else
    {
      uint64_t v63 = v96;
      (*(void (**)(void *, const void *, uint64_t))(v92 + 16))(v58, v59, v96);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v58, 0, 1, v96);
    }
  }
  else
  {
    uint64_t v63 = v96;
    if (v61)
    {
      (*(void (**)(void *, uint64_t))(v92 + 8))(v58, v96);
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v58, v59, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      v91((uint64_t)v58, (uint64_t)v59, v96);
    }
  }
  uint64_t v65 = v98[12];
  uint64_t v66 = (void *)(v19 + v65);
  uint64_t v67 = (const void *)(v20 + v65);
  int v68 = v97(v19 + v65, 1, v63);
  int v69 = v97((uint64_t)v67, 1, v63);
  if (v68)
  {
    if (v69)
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
      uint64_t v71 = v94;
      uint64_t v72 = v96;
      goto LABEL_44;
    }
    uint64_t v72 = v96;
    (*(void (**)(void *, const void *, uint64_t))(v92 + 16))(v66, v67, v96);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v66, 0, 1, v96);
  }
  else
  {
    uint64_t v72 = v96;
    if (v69)
    {
      (*(void (**)(void *, uint64_t))(v92 + 8))(v66, v96);
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v66, v67, *(void *)(*(void *)(v73 - 8) + 64));
    }
    else
    {
      v91((uint64_t)v66, (uint64_t)v67, v96);
    }
  }
  uint64_t v71 = v94;
LABEL_44:
  uint64_t v74 = v98[13];
  uint64_t v75 = (void *)(v19 + v74);
  uint64_t v76 = (const void *)(v20 + v74);
  int v77 = v97(v19 + v74, 1, v72);
  int v78 = v97((uint64_t)v76, 1, v72);
  if (v77)
  {
    uint64_t v79 = v95;
    if (!v78)
    {
      (*(void (**)(void *, const void *, uint64_t))(v92 + 16))(v75, v76, v72);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v75, 0, 1, v72);
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  uint64_t v79 = v95;
  if (v78)
  {
    (*(void (**)(void *, uint64_t))(v92 + 8))(v75, v72);
LABEL_49:
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v75, v76, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_50;
  }
  v91((uint64_t)v75, (uint64_t)v76, v72);
LABEL_50:
  uint64_t v81 = *(int *)(v79 + 28);
  uint64_t v82 = (void *)(v71 + v81);
  uint64_t v83 = (void *)(v93 + v81);
  uint64_t v84 = sub_23BBDC660();
  uint64_t v85 = *(void *)(v84 - 8);
  uint64_t v86 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v85 + 48);
  int v87 = v86(v82, 1, v84);
  int v88 = v86(v83, 1, v84);
  if (!v87)
  {
    if (!v88)
    {
      (*(void (**)(void *, void *, uint64_t))(v85 + 24))(v82, v83, v84);
      return v71;
    }
    (*(void (**)(void *, uint64_t))(v85 + 8))(v82, v84);
    goto LABEL_55;
  }
  if (v88)
  {
LABEL_55:
    sub_23BBA1C84(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v82, v83, *(void *)(*(void *)(v89 - 8) + 64));
    return v71;
  }
  (*(void (**)(void *, void *, uint64_t))(v85 + 16))(v82, v83, v84);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
  return v71;
}

void *sub_23BBA46AC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  id v50 = v8;
  uint64_t v51 = v7;
  if (v55(&a2[v9], 1, v6))
  {
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v52 = a3;
  id v53 = a2;
  uint64_t v13 = *(int *)(a3 + 24);
  id v54 = a1;
  int v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)int v14 = *(void *)&a2[v13];
  v14[8] = a2[v13 + 8];
  uint64_t v16 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v14[v17];
  uint64_t v19 = &v15[v17];
  uint64_t v20 = sub_23BBDB6D0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, v20))
  {
    sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v24 = v16[6];
  uint64_t v25 = &v14[v24];
  uint64_t v26 = &v15[v24];
  if (v22(&v15[v24], 1, v20))
  {
    sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, v26, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, v20);
  }
  v14[v16[7]] = v15[v16[7]];
  v50(&v14[v16[8]], &v15[v16[8]], v6);
  *(void *)&v14[v16[9]] = *(void *)&v15[v16[9]];
  uint64_t v28 = v16[10];
  int v29 = &v14[v28];
  uint64_t v30 = &v15[v28];
  *((void *)v29 + 2) = *((void *)v30 + 2);
  *(_OWORD *)int v29 = *(_OWORD *)v30;
  uint64_t v31 = v16[11];
  uint64_t v32 = &v14[v31];
  uint64_t v33 = &v15[v31];
  if (v55(&v15[v31], 1, v6))
  {
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v50(v32, v33, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v32, 0, 1, v6);
  }
  uint64_t v35 = v16[12];
  uint64_t v36 = &v14[v35];
  uint64_t v37 = &v15[v35];
  if (v55(&v15[v35], 1, v6))
  {
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v50(v36, v37, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v36, 0, 1, v6);
  }
  uint64_t v39 = v16[13];
  id v40 = &v14[v39];
  uint64_t v41 = &v15[v39];
  if (v55(&v15[v39], 1, v6))
  {
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    v50(v40, v41, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v40, 0, 1, v6);
  }
  uint64_t v43 = *(int *)(v52 + 28);
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &v53[v43];
  uint64_t v46 = sub_23BBDC660();
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    sub_23BBA1C84(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  return v54;
}

uint64_t sub_23BBA4E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v81 = a3;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(a1 + v9, 1, v6);
  uint64_t v82 = v6;
  uint64_t v83 = v12;
  int v14 = v12((uint64_t)v11, 1, v6);
  int v77 = v8;
  uint64_t v78 = v7;
  if (v13)
  {
    if (v14)
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      uint64_t v16 = v6;
    }
    else
    {
      uint64_t v16 = v6;
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
    }
  }
  else
  {
    uint64_t v16 = v6;
    if (v14)
    {
      (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
    }
  }
  uint64_t v18 = *(int *)(v81 + 24);
  uint64_t v79 = a2;
  uint64_t v80 = a1;
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)uint64_t v19 = *(void *)(a2 + v18);
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(a2 + v18 + 8);
  uint64_t v84 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v21 = v84[5];
  uint64_t v22 = (void *)(v19 + v21);
  uint64_t v23 = (void *)(v20 + v21);
  uint64_t v24 = sub_23BBDB6D0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_13:
    sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_14:
  uint64_t v30 = v84[6];
  uint64_t v31 = (void *)(v19 + v30);
  uint64_t v32 = (void *)(v20 + v30);
  int v33 = v26((void *)(v19 + v30), 1, v24);
  int v34 = v26(v32, 1, v24);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v31, v32, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v31, 0, 1, v24);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v31, v24);
LABEL_19:
    sub_23BBA1C84(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v31, v32, v24);
LABEL_20:
  *(unsigned char *)(v19 + v84[7]) = *(unsigned char *)(v20 + v84[7]);
  v77(v19 + v84[8], v20 + v84[8], v16);
  uint64_t v36 = v84[9];
  uint64_t v37 = *(void **)(v19 + v36);
  *(void *)(v19 + v36) = *(void *)(v20 + v36);

  uint64_t v38 = v84[10];
  uint64_t v39 = (void *)(v19 + v38);
  id v40 = (void *)(v20 + v38);
  if (*(void *)(v19 + v38))
  {
    if (*v40)
    {
      void *v39 = *v40;
      swift_bridgeObjectRelease();
      uint64_t v41 = (void *)v39[1];
      v39[1] = v40[1];

      uint64_t v42 = (void *)v39[2];
      v39[2] = v40[2];

      goto LABEL_25;
    }
    sub_23BB547F0((uint64_t)v39);
  }
  *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
  v39[2] = v40[2];
LABEL_25:
  uint64_t v43 = v84[11];
  uint64_t v44 = (void *)(v19 + v43);
  uint64_t v45 = (const void *)(v20 + v43);
  int v46 = v83(v19 + v43, 1, v16);
  int v47 = v83((uint64_t)v45, 1, v16);
  if (v46)
  {
    if (v47)
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
      uint64_t v49 = v82;
    }
    else
    {
      uint64_t v49 = v82;
      (*(void (**)(void *, const void *, uint64_t))(v78 + 32))(v44, v45, v82);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v44, 0, 1, v82);
    }
  }
  else
  {
    uint64_t v49 = v82;
    if (v47)
    {
      (*(void (**)(void *, uint64_t))(v78 + 8))(v44, v82);
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v44, v45, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      v77((uint64_t)v44, (uint64_t)v45, v82);
    }
  }
  uint64_t v51 = v84[12];
  uint64_t v52 = (void *)(v19 + v51);
  id v53 = (const void *)(v20 + v51);
  int v54 = v83(v19 + v51, 1, v49);
  int v55 = v83((uint64_t)v53, 1, v49);
  if (v54)
  {
    if (v55)
    {
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
      uint64_t v57 = v80;
      uint64_t v58 = v82;
      goto LABEL_42;
    }
    uint64_t v58 = v82;
    (*(void (**)(void *, const void *, uint64_t))(v78 + 32))(v52, v53, v82);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v52, 0, 1, v82);
  }
  else
  {
    uint64_t v58 = v82;
    if (v55)
    {
      (*(void (**)(void *, uint64_t))(v78 + 8))(v52, v82);
      sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v52, v53, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      v77((uint64_t)v52, (uint64_t)v53, v82);
    }
  }
  uint64_t v57 = v80;
LABEL_42:
  uint64_t v60 = v84[13];
  int v61 = (void *)(v19 + v60);
  uint64_t v62 = (const void *)(v20 + v60);
  int v63 = v83(v19 + v60, 1, v58);
  int v64 = v83((uint64_t)v62, 1, v58);
  if (v63)
  {
    uint64_t v65 = v81;
    if (!v64)
    {
      (*(void (**)(void *, const void *, uint64_t))(v78 + 32))(v61, v62, v58);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v61, 0, 1, v58);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  uint64_t v65 = v81;
  if (v64)
  {
    (*(void (**)(void *, uint64_t))(v78 + 8))(v61, v58);
LABEL_47:
    sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_48;
  }
  v77((uint64_t)v61, (uint64_t)v62, v58);
LABEL_48:
  uint64_t v67 = *(int *)(v65 + 28);
  int v68 = (void *)(v57 + v67);
  int v69 = (void *)(v79 + v67);
  uint64_t v70 = sub_23BBDC660();
  uint64_t v71 = *(void *)(v70 - 8);
  uint64_t v72 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v71 + 48);
  int v73 = v72(v68, 1, v70);
  int v74 = v72(v69, 1, v70);
  if (!v73)
  {
    if (!v74)
    {
      (*(void (**)(void *, void *, uint64_t))(v71 + 40))(v68, v69, v70);
      return v57;
    }
    (*(void (**)(void *, uint64_t))(v71 + 8))(v68, v70);
    goto LABEL_53;
  }
  if (v74)
  {
LABEL_53:
    sub_23BBA1C84(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
    memcpy(v68, v69, *(void *)(*(void *)(v75 - 8) + 64));
    return v57;
  }
  (*(void (**)(void *, void *, uint64_t))(v71 + 32))(v68, v69, v70);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
  return v57;
}

uint64_t sub_23BBA59C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBA59D4);
}

uint64_t sub_23BBA59D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for SleepWidgetViewModel();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  sub_23BBA1C84(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[7];
  return v17(v19, a2, v18);
}

uint64_t sub_23BBA5BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBA5BE0);
}

uint64_t sub_23BBA5BE0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_23BBDB860();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  sub_23BBA1C84(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = type metadata accessor for SleepWidgetViewModel();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }
  sub_23BBA1C84(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[7];
  return v19(v21, a2, a2, v20);
}

void sub_23BBA5DE4()
{
  sub_23BBDB860();
  if (v0 <= 0x3F)
  {
    sub_23BBA1C84(319, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for SleepWidgetViewModel();
      if (v2 <= 0x3F)
      {
        sub_23BBA1C84(319, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t SleepWidgetModelProviding.hasDataLastNight.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 8))(&v9);
  uint64_t v2 = v9;
  if (v9)
  {
    id v4 = v10;
    unint64_t v3 = v11;
    if (v10)
    {
      objc_msgSend(v10, sel_sleepDuration);
      if (v5 > COERCE_DOUBLE(1) && v5 > 0.0)
      {
        sub_23BB564C0(v2, v4, v3);
        return 1;
      }
      objc_msgSend(v4, sel_inBedDuration);
      double v8 = v7;
      sub_23BB564C0(v2, v4, v3);
      if (v8 > COERCE_DOUBLE(1) && v8 > 0.0) {
        return 1;
      }
    }
    else
    {
      sub_23BB564C0(v9, 0, v11);
    }
  }
  return 0;
}

uint64_t SleepWidgetModelProviding.hasAsleepDataLastNight.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 8))(&v8);
  uint64_t v2 = v8;
  if (v8)
  {
    id v4 = v9;
    unint64_t v3 = v10;
    if (v9)
    {
      objc_msgSend(v9, sel_sleepDuration);
      double v6 = v5;
      sub_23BB564C0(v2, v4, v3);
      if (v6 > COERCE_DOUBLE(1) && v6 > 0.0) {
        return 1;
      }
    }
    else
    {
      sub_23BB564C0(v8, 0, v10);
    }
  }
  return 0;
}

uint64_t SleepWidgetModelProviding.summaryDurationTitle.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr);
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  double v21;
  double v22;
  uint64_t v24;
  id v25;
  void *v26;

  id v4 = *(void (**)(uint64_t *__return_ptr))(a2 + 8);
  v4(&v24);
  double v5 = v24;
  if (!v24) {
    goto LABEL_8;
  }
  double v6 = v25;
  double v7 = v26;
  if (!v26)
  {
LABEL_7:
    sub_23BB564C0(v5, v6, v7);
    goto LABEL_8;
  }
  uint64_t v8 = v25;
  id v9 = v7;
  swift_bridgeObjectRetain();
  id v10 = objc_msgSend(v9, sel_averageSleepDuration);
  if (!v10)
  {
    sub_23BB564C0(v5, v6, v7);
    goto LABEL_7;
  }
  uint64_t v11 = v10;
  objc_msgSend(v10, sel__value);
  uint64_t v13 = v12;

  sub_23BB564C0(v5, v6, v7);
  sub_23BB564C0(v5, v6, v7);
  if (v13 > COERCE_DOUBLE(1)) {
    goto LABEL_16;
  }
LABEL_8:
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))v4)(&v24, a1, a2);
  uint64_t v14 = v24;
  if (!v24) {
    goto LABEL_16;
  }
  uint64_t v15 = v25;
  uint64_t v16 = v26;
  if (!v26) {
    goto LABEL_15;
  }
  uint64_t v17 = v25;
  uint64_t v18 = v16;
  swift_bridgeObjectRetain();
  uint64_t v19 = objc_msgSend(v18, sel_averageInBedDuration);
  if (!v19)
  {
    sub_23BB564C0(v14, v15, v16);
LABEL_15:
    sub_23BB564C0(v14, v15, v16);
    goto LABEL_16;
  }
  uint64_t v20 = v19;
  objc_msgSend(v19, sel__value);
  uint64_t v22 = v21;

  sub_23BB564C0(v14, v15, v16);
  sub_23BB564C0(v14, v15, v16);
  if (v22 > COERCE_DOUBLE(1))
  {
    if (qword_26AEBBAA0 == -1) {
      return sub_23BBDB740();
    }
    goto LABEL_18;
  }
LABEL_16:
  if (qword_26AEBBAA0 != -1) {
LABEL_18:
  }
    swift_once();
  return sub_23BBDB740();
}

uint64_t SleepWidgetModelProviding.summaryDurationText.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr);
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  id v33;
  void *v34;

  id v4 = *(void (**)(uint64_t *__return_ptr))(a2 + 8);
  v4(&v32);
  double v5 = v32;
  if (!v32)
  {
LABEL_9:
    ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))v4)(&v32, a1, a2);
    uint64_t v18 = v32;
    if (!v32) {
      return 0;
    }
    uint64_t v19 = v33;
    uint64_t v20 = v34;
    if (v34)
    {
      uint64_t v21 = v33;
      uint64_t v22 = v20;
      swift_bridgeObjectRetain();
      uint64_t v23 = objc_msgSend(v22, sel_averageInBedDuration);
      if (v23)
      {
        uint64_t v24 = v23;
        objc_msgSend(v23, sel__value);
        uint64_t v26 = v25;

        sub_23BB564C0(v18, v19, v20);
        sub_23BB564C0(v18, v19, v20);
        if (v26 <= COERCE_DOUBLE(1)) {
          return 0;
        }
        sub_23BBDC7E0();
        int v28 = v27;
        uint64_t v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
        objc_msgSend(v16, sel_setUnitsStyle_, 5);
        objc_msgSend(v16, sel_setAllowedUnits_, 96);
        uint64_t v17 = objc_msgSend(v16, sel_stringFromTimeInterval_, v28);
        if (!v17) {
          goto LABEL_6;
        }
        goto LABEL_14;
      }
      sub_23BB564C0(v18, v19, v20);
    }
    sub_23BB564C0(v18, v19, v20);
    return 0;
  }
  double v6 = v33;
  double v7 = v34;
  if (!v34)
  {
LABEL_8:
    sub_23BB564C0(v5, v6, v7);
    goto LABEL_9;
  }
  uint64_t v8 = v33;
  id v9 = v7;
  swift_bridgeObjectRetain();
  id v10 = objc_msgSend(v9, sel_averageSleepDuration);
  if (!v10)
  {
    sub_23BB564C0(v5, v6, v7);
    goto LABEL_8;
  }
  uint64_t v11 = v10;
  objc_msgSend(v10, sel__value);
  uint64_t v13 = v12;

  sub_23BB564C0(v5, v6, v7);
  sub_23BB564C0(v5, v6, v7);
  if (v13 <= COERCE_DOUBLE(1)) {
    goto LABEL_9;
  }
  sub_23BBDC7E0();
  uint64_t v15 = v14;
  uint64_t v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08780]), sel_init);
  objc_msgSend(v16, sel_setUnitsStyle_, 5);
  objc_msgSend(v16, sel_setAllowedUnits_, 96);
  uint64_t v17 = objc_msgSend(v16, sel_stringFromTimeInterval_, v15);
  if (!v17)
  {
LABEL_6:

    return 0;
  }
LABEL_14:
  uint64_t v29 = v17;
  uint64_t v30 = sub_23BBDC6E0();

  return v30;
}

uint64_t SleepDaySummaryResults.sleepDurationToDisplay.getter()
{
  return sub_23BBA66E4((const char **)&selRef_averageSleepDuration);
}

uint64_t SleepDaySummaryResults.inBedDurationToDisplay.getter()
{
  return sub_23BBA66E4((const char **)&selRef_averageInBedDuration);
}

uint64_t sub_23BBA66E4(const char **a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (v2)
  {
    id v4 = *(id *)(v1 + 8);
    id v5 = v2;
    double v6 = *a1;
    swift_bridgeObjectRetain();
    id v7 = [v5 v6];
    if (v7)
    {
      uint64_t v8 = v7;
      objc_msgSend(v7, sel__value);
      double v10 = v9;

      swift_bridgeObjectRelease();
      if (v10 > COERCE_DOUBLE(1)) {
        return *(void *)&v10;
      }
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t dispatch thunk of SleepWidgetModelProviding.summaryResults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepWidgetModelProviding.noDataTexts.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepWidgetModelProviding.baseAccessibilityIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t SleepWidgetRelevanceProvider.timelineEntryRelevance(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a2 + 24) + 8))(*(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t SleepWidgetRelevanceProvider.widgetRelevance(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v30 = sub_23BBDB860();
  uint64_t v28 = *(void *)(v30 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v30);
  id v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  id v7 = (char *)&v27 - v6;
  uint64_t v8 = sub_23BBDB640();
  MEMORY[0x270FA5388](v8 - 8);
  sub_23BB5D6E8();
  uint64_t v31 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v29 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBA9510(0, &qword_26AEBBD10, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = sub_23BBDB6B0();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(*(void *)(a1 + 24) + 16))(*(void *)(a1 + 16));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_23BBA6F7C((uint64_t)v14, &qword_26AEBBD10, MEMORY[0x263F062D0]);
    return sub_23BBDC530();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    sub_23BBDB690();
    sub_23BBDB670();
    sub_23BBDB630();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v21 = v30;
    v20(v5, v30);
    v20(v7, v21);
    uint64_t v22 = v29;
    sub_23BBDC580();
    sub_23BBA9510(0, &qword_26AEBC0A8, (uint64_t (*)(uint64_t))sub_23BB5D6E8, MEMORY[0x263F8E0F8]);
    unint64_t v23 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_23BBDD290;
    unint64_t v25 = v24 + v23;
    uint64_t v26 = v31;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 16))(v25, v22, v31);
    sub_23BBDC530();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v22, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
}

uint64_t SleepWidgetRelevanceProvider.relevantDateInterval(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a2 + 24) + 16))(*(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t SleepStageWidgetViewModel.timelineEntryRelevance.getter@<X0>(uint64_t a1@<X8>)
{
  sub_23BBA9510(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  id v5 = (char *)&v19 - v4;
  if (*(unsigned char *)(v1 + 24) == 2) {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)v1;
  uint64_t v6 = *(void **)(v1 + 8);
  uint64_t v8 = *(void **)(v1 + 16);
  if (!*(void *)v1)
  {
    sub_23BB5646C(0, *(void **)(v1 + 8), *(void **)(v1 + 16));
LABEL_8:
    uint64_t v15 = sub_23BBDC660();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 1, 1, v15);
    sub_23BBDC650();
    return sub_23BBA6F7C((uint64_t)v5, &qword_26AEBC048, MEMORY[0x263F1FDF0]);
  }
  uint64_t v9 = *(void **)v1;
  uint64_t v10 = *(void **)(v1 + 8);
  if (v8)
  {
    sub_23BB5646C(v9, v10, *(void **)(v1 + 16));
    id v11 = v6;
    id v12 = v8;
    swift_bridgeObjectRetain();
    id v13 = objc_msgSend(v12, sel_averageSleepDuration);
    if (v13)
    {
      uint64_t v14 = v13;
      objc_msgSend(v13, sel__value);
    }
    sub_23BB564C0(v7, v6, v8);
  }
  else
  {
    sub_23BB5646C(v9, v10, 0);
  }
  sub_23BBDC650();
  sub_23BB564C0(v7, v6, v8);
  uint64_t v17 = sub_23BBDC660();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v5, 0, 1, v17);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a1, v5, v17);
}

uint64_t sub_23BBA6F7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_23BBA9510(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t SleepStageWidgetViewModel.relevantDateInterval.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = sub_23BBDBBA0();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v36 - v7;
  sub_23BBA9510(0, &qword_26AEBBD10, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  id v11 = (char *)v36 - v10;
  uint64_t v12 = sub_23BBDB6B0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v36 - v17;
  if (*(unsigned char *)(v1 + 24) == 2) {
    goto LABEL_7;
  }
  uint64_t v19 = *(void **)(v1 + 8);
  uint64_t v20 = *(void **)(v1 + 16);
  if (!*(void *)v1)
  {
    sub_23BB5646C(0, v19, v20);
LABEL_7:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
LABEL_8:
    sub_23BBA6F7C((uint64_t)v11, &qword_26AEBBD10, MEMORY[0x263F062D0]);
    sub_23BBDBB80();
    uint64_t v30 = sub_23BBDBB90();
    os_log_type_t v31 = sub_23BBDC880();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v41 = v3;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v43[0] = v33;
      *(_DWORD *)uint64_t v32 = 136446210;
      uint64_t v44 = sub_23BBD0430(0xD000000000000019, 0x800000023BBE0860, v43);
      sub_23BBDC950();
      _os_log_impl(&dword_23BB52000, v30, v31, "[%{public}s] not relevant", v32, 0xCu);
      uint64_t v34 = 1;
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v33, -1, -1);
      MEMORY[0x23ECD1880](v32, -1, -1);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v41);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v3);
      uint64_t v34 = 1;
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, v34, 1, v12);
  }
  v43[0] = *(void *)v1;
  v43[1] = (uint64_t)v19;
  void v43[2] = (uint64_t)v20;
  sub_23BBA761C((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    goto LABEL_8;
  }
  id v40 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v40(v18, v11, v12);
  sub_23BBDBB80();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  uint64_t v21 = sub_23BBDBB90();
  os_log_type_t v22 = sub_23BBDC880();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    int v38 = v23;
    uint64_t v25 = v24;
    uint64_t v39 = swift_slowAlloc();
    v43[0] = v39;
    *(_DWORD *)uint64_t v25 = 136446466;
    os_log_t v37 = v21;
    uint64_t v44 = sub_23BBD0430(0xD000000000000019, 0x800000023BBE0860, v43);
    uint64_t v41 = v3;
    sub_23BBDC950();
    *(_WORD *)(v25 + 12) = 2080;
    v36[1] = v25 + 14;
    uint64_t v26 = sub_23BBDB650();
    uint64_t v44 = sub_23BBD0430(v26, v27, v43);
    sub_23BBDC950();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    os_log_t v28 = v37;
    _os_log_impl(&dword_23BB52000, v37, (os_log_type_t)v38, "[%{public}s] relevant for dates %s, privacy: .public)", (uint8_t *)v25, 0x16u);
    uint64_t v29 = v39;
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v29, -1, -1);
    MEMORY[0x23ECD1880](v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v41);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v3);
  }
  v40(a1, v18, v12);
  uint64_t v34 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, v34, 1, v12);
}

uint64_t sub_23BBA761C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BBA9510(0, &qword_26AEBBD10, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v34 - v7;
  sub_23BBA9510(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], v2);
  MEMORY[0x270FA5388](v9 - 8);
  id v11 = (char *)&v34 - v10;
  uint64_t v12 = sub_23BBDB860();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v34 - v19;
  MEMORY[0x270FA5388](v18);
  int v23 = (char *)&v34 - v22;
  uint64_t v24 = *(void **)(v1 + 8);
  if (!v24) {
    goto LABEL_7;
  }
  uint64_t v34 = v21;
  id v25 = objc_msgSend(v24, sel_creationInterval);
  if (v25)
  {
    uint64_t v26 = v25;
    sub_23BBDB660();

    uint64_t v27 = sub_23BBDB6B0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v6, 0, 1, v27);
  }
  else
  {
    uint64_t v27 = sub_23BBDB6B0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v6, 1, 1, v27);
  }
  sub_23BBA9608((uint64_t)v6, (uint64_t)v8);
  sub_23BBDB6B0();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v8, 1, v27) == 1)
  {
    sub_23BBA6F7C((uint64_t)v8, &qword_26AEBBD10, MEMORY[0x263F062D0]);
LABEL_7:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_8;
  }
  sub_23BBDB670();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v23, v11, v12);
    sub_23BBDB810();
    os_log_type_t v31 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v31(v17, v23, v12);
    v31(v34, v20, v12);
    uint64_t v32 = v35;
    sub_23BBDB680();
    uint64_t v33 = *(void (**)(char *, uint64_t))(v13 + 8);
    v33(v20, v12);
    v33(v23, v12);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
  }
LABEL_8:
  sub_23BBA6F7C((uint64_t)v11, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
  uint64_t v29 = sub_23BBDB6B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v35, 1, 1, v29);
}

uint64_t SleepWidgetViewModel.timelineEntryRelevance.getter@<X0>(uint64_t a1@<X8>)
{
  sub_23BBA9510(0, &qword_26AEBC048, MEMORY[0x263F1FDF0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v21 - v4;
  if ((*(unsigned char *)(v1 + 8) & 1) != 0 || (unint64_t)(*(void *)v1 - 2) < 2 || *(void *)v1 != 6)
  {
    return sub_23BBDC650();
  }
  else
  {
    uint64_t v6 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40));
    uint64_t v7 = *v6;
    if (*v6)
    {
      uint64_t v8 = (void *)v6[1];
      uint64_t v9 = (void *)v6[2];
      if (v9)
      {
        id v10 = v8;
        id v11 = v9;
        swift_bridgeObjectRetain();
        id v12 = v10;
        id v13 = v11;
        swift_bridgeObjectRetain();
        id v14 = objc_msgSend(v13, sel_averageSleepDuration);
        if (v14)
        {
          uint64_t v15 = v14;
          objc_msgSend(v14, sel__value);
        }
        sub_23BB564C0(v7, v8, v9);
      }
      else
      {
        id v18 = v8;
        swift_bridgeObjectRetain();
      }
      sub_23BBDC650();
      sub_23BB564C0(v7, v8, v9);
      uint64_t v19 = sub_23BBDC660();
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v5, 0, 1, v19);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(a1, v5, v19);
    }
    else
    {
      uint64_t v17 = sub_23BBDC660();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v5, 1, 1, v17);
      sub_23BBDC650();
      return sub_23BBA6F7C((uint64_t)v5, &qword_26AEBC048, MEMORY[0x263F1FDF0]);
    }
  }
}

uint64_t SleepWidgetViewModel.relevantDateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v1 = sub_23BBDBBA0();
  uint64_t v38 = *(void *)(v1 - 8);
  uint64_t v39 = v1;
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v34[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v2);
  os_log_t v37 = &v34[-v5];
  uint64_t v6 = sub_23BBDB6B0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  id v10 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  id v12 = &v34[-v11];
  sub_23BBA9510(0, qword_26AEBBE88, (uint64_t (*)(uint64_t))type metadata accessor for SleepWidgetRelevantState, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = &v34[-v14];
  uint64_t v16 = type metadata accessor for SleepWidgetRelevantState();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = &v34[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23BBA8474(v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_23BBA6F7C((uint64_t)v15, qword_26AEBBE88, (uint64_t (*)(uint64_t))type metadata accessor for SleepWidgetRelevantState);
    sub_23BBDBB80();
    uint64_t v20 = sub_23BBDBB90();
    os_log_type_t v21 = sub_23BBDC880();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v42 = v23;
      *(_DWORD *)uint64_t v22 = 136446210;
      uint64_t v41 = sub_23BBD0430(0xD000000000000014, 0x800000023BBE0880, &v42);
      sub_23BBDC950();
      _os_log_impl(&dword_23BB52000, v20, v21, "[%{public}s] not relevant", v22, 0xCu);
      uint64_t v24 = 1;
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v23, -1, -1);
      MEMORY[0x23ECD1880](v22, -1, -1);

      (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v4, v39);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v4, v39);
      uint64_t v24 = 1;
    }
    uint64_t v28 = v6;
  }
  else
  {
    sub_23BBA8E54((uint64_t)v15, (uint64_t)v19);
    sub_23BBA895C();
    sub_23BBDBB80();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v10, v12, v6);
    id v25 = sub_23BBDBB90();
    os_log_type_t v26 = sub_23BBDC880();
    int v27 = v26;
    uint64_t v28 = v6;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v42 = v36;
      *(_DWORD *)uint64_t v29 = 136446466;
      int v35 = v27;
      uint64_t v41 = sub_23BBD0430(0xD000000000000014, 0x800000023BBE0880, &v42);
      sub_23BBDC950();
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v30 = sub_23BBDB650();
      uint64_t v41 = sub_23BBD0430(v30, v31, &v42);
      sub_23BBDC950();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v28);
      _os_log_impl(&dword_23BB52000, v25, (os_log_type_t)v35, "[%{public}s] relevant for dates %s, privacy: .public)", (uint8_t *)v29, 0x16u);
      uint64_t v32 = v36;
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v32, -1, -1);
      MEMORY[0x23ECD1880](v29, -1, -1);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
    }
    (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v37, v39);
    sub_23BBA8EB8((uint64_t)v19);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(v40, v12, v28);
    uint64_t v24 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v40, v24, 1, v28);
}

uint64_t sub_23BBA8474@<X0>(char *a1@<X8>)
{
  sub_23BBA9510(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)v36 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v36 - v10;
  uint64_t v12 = sub_23BBDB860();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)v36 - v18;
  MEMORY[0x270FA5388](v17);
  os_log_type_t v21 = (char *)v36 - v20;
  if ((v1[1] & 1) == 0)
  {
    uint64_t v25 = *v1;
    if (*v1 == 6)
    {
      uint64_t v29 = (uint64_t)v1 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40);
      if (!*(void *)v29)
      {
LABEL_16:
        uint64_t v31 = type metadata accessor for SleepWidgetRelevantState();
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(a1, 1, 1, v31);
      }
      v36[1] = *(void *)v29;
      long long v37 = *(_OWORD *)(v29 + 8);
      sub_23BBA8B7C((uint64_t)v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12) == 1)
      {
        int v27 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
        uint64_t v28 = (uint64_t)v6;
        goto LABEL_15;
      }
      int v35 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v35(v16, v6, v12);
      v35(a1, v16, v12);
      uint64_t v33 = type metadata accessor for SleepWidgetRelevantState();
    }
    else if (v25 == 4)
    {
      uint64_t v30 = type metadata accessor for SleepWidgetViewModel();
      sub_23BBA9574((uint64_t)v1 + *(int *)(v30 + 48), (uint64_t)v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12) == 1)
      {
        int v27 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
        uint64_t v28 = (uint64_t)v9;
        goto LABEL_15;
      }
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v34(v19, v9, v12);
      v34(a1, v19, v12);
      uint64_t v33 = type metadata accessor for SleepWidgetRelevantState();
    }
    else
    {
      if (v25 != 3) {
        goto LABEL_2;
      }
      uint64_t v26 = type metadata accessor for SleepWidgetViewModel();
      sub_23BBA9574((uint64_t)v1 + *(int *)(v26 + 44), (uint64_t)v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
      {
        int v27 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
        uint64_t v28 = (uint64_t)v11;
LABEL_15:
        sub_23BBA6F7C(v28, (unint64_t *)&qword_26AEBB6E8, v27);
        goto LABEL_16;
      }
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v32(v21, v11, v12);
      v32(a1, v21, v12);
      uint64_t v33 = type metadata accessor for SleepWidgetRelevantState();
    }
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a1, 0, 1, v33);
  }
LABEL_2:
  uint64_t v22 = type metadata accessor for SleepWidgetRelevantState();
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  return v23(a1, 1, 1, v22);
}

uint64_t sub_23BBA895C()
{
  uint64_t v1 = type metadata accessor for SleepWidgetRelevantState();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_23BBDB860();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v20 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v20 - v15;
  sub_23BBA94AC(v0, (uint64_t)v3);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v16, v3, v4);
  sub_23BBDB810();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v17(v11, v16, v4);
  v17(v8, v14, v4);
  sub_23BBDB680();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v14, v4);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, v4);
}

uint64_t sub_23BBA8B7C@<X0>(uint64_t a1@<X8>)
{
  sub_23BBA9510(0, &qword_26AEBBD10, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void **)(v1 + 8);
  if (!v9) {
    goto LABEL_7;
  }
  id v10 = objc_msgSend(v9, sel_creationInterval);
  if (v10)
  {
    uint64_t v11 = v10;
    sub_23BBDB660();

    uint64_t v12 = sub_23BBDB6B0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 0, 1, v12);
  }
  else
  {
    uint64_t v12 = sub_23BBDB6B0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
  }
  sub_23BBA9608((uint64_t)v6, (uint64_t)v8);
  sub_23BBDB6B0();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) == 1)
  {
    sub_23BBA6F7C((uint64_t)v8, &qword_26AEBBD10, MEMORY[0x263F062D0]);
LABEL_7:
    uint64_t v14 = sub_23BBDB860();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  sub_23BBDB670();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v12);
  uint64_t v16 = sub_23BBDB860();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 0, 1, v16);
}

uint64_t type metadata accessor for SleepWidgetRelevantState()
{
  uint64_t result = qword_26AEBBE78;
  if (!qword_26AEBBE78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BBA8E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetRelevantState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BBA8EB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepWidgetRelevantState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of SleepWidgetRelevanceProviding.timelineEntryRelevance.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepWidgetRelevanceProviding.relevantDateInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_23BBA8F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for SleepWidgetRelevanceProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *sub_23BBA8F5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v6 = sub_23BBDB860();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BBA90E0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 2)
  {
    uint64_t v3 = sub_23BBDB860();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

uint64_t sub_23BBA915C(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = sub_23BBDB860();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23BBA91EC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_23BBA8EB8(a1);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = sub_23BBDB860();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BBA928C(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = sub_23BBDB860();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23BBA931C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_23BBA8EB8(a1);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = sub_23BBDB860();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BBA93BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_23BBA93E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_23BBA9410()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23BBA9420()
{
  uint64_t result = sub_23BBDB860();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_23BBA94AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetRelevantState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23BBA9510(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BBA9574(uint64_t a1, uint64_t a2)
{
  sub_23BBA9510(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BBA9608(uint64_t a1, uint64_t a2)
{
  sub_23BBA9510(0, &qword_26AEBBD10, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BBA969C()
{
  uint64_t v0 = sub_23BBDB970();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDB940();
  id v4 = objc_allocWithZone(MEMORY[0x263F466D0]);
  int v5 = (void *)sub_23BBDB8E0();
  id v6 = objc_msgSend(v4, sel_initWithCalendar_, v5);

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_268A80500 = (uint64_t)v6;
  return result;
}

unint64_t sub_23BBA97A0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_23BB631DC(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v55 = a3;
    uint64_t v56 = a2;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    *(void *)uint64_t v10 = *(void *)(a2 + v9);
    *(unsigned char *)(v10 + 8) = *(unsigned char *)(a2 + v9 + 8);
    uint64_t v12 = (int *)type metadata accessor for SleepWidgetViewModel();
    uint64_t v13 = v12[5];
    uint64_t v14 = (void *)(v10 + v13);
    uint64_t v15 = (const void *)(v11 + v13);
    uint64_t v16 = sub_23BBDB6D0();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
    if (v18(v15, 1, v16))
    {
      sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v21 = v12[6];
    uint64_t v22 = (void *)(v10 + v21);
    uint64_t v23 = (const void *)(v11 + v21);
    if (v18((const void *)(v11 + v21), 1, v16))
    {
      sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v22, v23, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v16);
    }
    *(unsigned char *)(v10 + v12[7]) = *(unsigned char *)(v11 + v12[7]);
    uint64_t v25 = v12[8];
    uint64_t v26 = v10 + v25;
    uint64_t v27 = v11 + v25;
    uint64_t v28 = sub_23BBDB860();
    uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
    uint64_t v58 = *(void *)(v28 - 8);
    v57(v26, v27, v28);
    uint64_t v29 = v12[9];
    uint64_t v30 = *(void **)(v11 + v29);
    *(void *)(v10 + v29) = v30;
    uint64_t v31 = v12[10];
    uint64_t v32 = (void *)(v10 + v31);
    uint64_t v33 = v11 + v31;
    uint64_t v34 = *(void *)(v11 + v31);
    id v35 = v30;
    if (v34)
    {
      long long v37 = *(void **)(v33 + 8);
      uint64_t v36 = *(void **)(v33 + 16);
      void *v32 = v34;
      v32[1] = v37;
      v32[2] = v36;
      swift_bridgeObjectRetain();
      id v38 = v37;
      id v39 = v36;
    }
    else
    {
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      v32[2] = *(void *)(v33 + 16);
    }
    uint64_t v40 = v12[11];
    uint64_t v41 = (void *)(v10 + v40);
    uint64_t v42 = (const void *)(v11 + v40);
    uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
    if (v43(v11 + v40, 1, v28))
    {
      sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      v57((uint64_t)v41, (uint64_t)v42, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v41, 0, 1, v28);
    }
    uint64_t v45 = v12[12];
    int v46 = (void *)(v10 + v45);
    int v47 = (const void *)(v11 + v45);
    if (v43(v11 + v45, 1, v28))
    {
      sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
      uint64_t v49 = v58;
    }
    else
    {
      v57((uint64_t)v46, (uint64_t)v47, v28);
      uint64_t v49 = v58;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v46, 0, 1, v28);
    }
    uint64_t v50 = v12[13];
    uint64_t v51 = (void *)(v10 + v50);
    uint64_t v52 = (const void *)(v11 + v50);
    if (v43(v11 + v50, 1, v28))
    {
      sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      v57((uint64_t)v51, (uint64_t)v52, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v28);
    }
    *(unsigned char *)(a1 + *(int *)(v55 + 24)) = *(unsigned char *)(v56 + *(int *)(v55 + 24));
  }
  return a1;
}

uint64_t sub_23BBA9D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_23BB631DC(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v53 = a3;
  uint64_t v54 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v55 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)(a2 + v8);
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(a2 + v8 + 8);
  uint64_t v11 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(v9 + v12);
  uint64_t v14 = (const void *)(v10 + v12);
  uint64_t v15 = sub_23BBDB6D0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = v11[6];
  uint64_t v20 = (void *)(v9 + v19);
  uint64_t v21 = (const void *)(v10 + v19);
  if (v17((const void *)(v10 + v19), 1, v15))
  {
    sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v20, v21, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v15);
  }
  *(unsigned char *)(v9 + v11[7]) = *(unsigned char *)(v10 + v11[7]);
  uint64_t v23 = v11[8];
  uint64_t v24 = (void *)(v9 + v23);
  uint64_t v25 = (const void *)(v10 + v23);
  uint64_t v26 = sub_23BBDB860();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v56 = *(void (**)(void *, const void *, uint64_t))(v27 + 16);
  v56(v24, v25, v26);
  uint64_t v28 = v11[9];
  uint64_t v29 = *(void **)(v10 + v28);
  *(void *)(v9 + v28) = v29;
  uint64_t v30 = v11[10];
  uint64_t v31 = (void *)(v9 + v30);
  uint64_t v32 = v10 + v30;
  uint64_t v33 = *(void *)(v10 + v30);
  id v34 = v29;
  if (v33)
  {
    uint64_t v36 = *(void **)(v32 + 8);
    id v35 = *(void **)(v32 + 16);
    void *v31 = v33;
    v31[1] = v36;
    v31[2] = v35;
    swift_bridgeObjectRetain();
    id v37 = v36;
    id v38 = v35;
  }
  else
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    v31[2] = *(void *)(v32 + 16);
  }
  uint64_t v39 = v11[11];
  uint64_t v40 = (void *)(v9 + v39);
  uint64_t v41 = (const void *)(v10 + v39);
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v42(v10 + v39, 1, v26))
  {
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    v56(v40, v41, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v40, 0, 1, v26);
  }
  uint64_t v44 = v11[12];
  uint64_t v45 = (void *)(v9 + v44);
  int v46 = (const void *)(v10 + v44);
  if (v42(v10 + v44, 1, v26))
  {
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    v56(v45, v46, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v45, 0, 1, v26);
  }
  uint64_t v48 = v11[13];
  uint64_t v49 = (void *)(v9 + v48);
  uint64_t v50 = (const void *)(v10 + v48);
  if (v42(v10 + v48, 1, v26))
  {
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    v56(v49, v50, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v49, 0, 1, v26);
  }
  uint64_t result = v55;
  *(unsigned char *)(v55 + *(int *)(v53 + 24)) = *(unsigned char *)(v54 + *(int *)(v53 + 24));
  return result;
}

uint64_t sub_23BBAA320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_23BB631DC(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_23BB63394(v8, v9);
  uint64_t v76 = a3;
  uint64_t v77 = a2;
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v78 = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)(a2 + v10);
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)uint64_t v11 = v13;
  uint64_t v14 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v15 = v14[5];
  uint64_t v16 = (void *)(v11 + v15);
  uint64_t v17 = (void *)(v12 + v15);
  uint64_t v18 = sub_23BBDB6D0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  uint64_t v24 = v14[6];
  uint64_t v25 = (void *)(v11 + v24);
  uint64_t v26 = (void *)(v12 + v24);
  int v27 = v20((void *)(v11 + v24), 1, v18);
  int v28 = v20(v26, 1, v18);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  *(unsigned char *)(v11 + v14[7]) = *(unsigned char *)(v12 + v14[7]);
  uint64_t v30 = v14[8];
  uint64_t v31 = v11 + v30;
  uint64_t v32 = v12 + v30;
  uint64_t v33 = sub_23BBDB860();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 24);
  v75(v31, v32, v33);
  uint64_t v35 = v14[9];
  uint64_t v36 = *(void **)(v12 + v35);
  id v37 = *(void **)(v11 + v35);
  *(void *)(v11 + v35) = v36;
  id v38 = v36;

  uint64_t v39 = v14[10];
  uint64_t v40 = (void *)(v11 + v39);
  uint64_t v41 = (long long *)(v12 + v39);
  uint64_t v42 = *(void *)(v12 + v39);
  if (*(void *)(v11 + v39))
  {
    if (v42)
    {
      void *v40 = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = (void *)v40[1];
      uint64_t v44 = (void *)*((void *)v41 + 1);
      v40[1] = v44;
      id v45 = v44;

      int v46 = (void *)v40[2];
      uint64_t v47 = (void *)*((void *)v41 + 2);
      v40[2] = v47;
      id v48 = v47;
    }
    else
    {
      sub_23BB547F0(v11 + v39);
      uint64_t v53 = *((void *)v41 + 2);
      *(_OWORD *)uint64_t v40 = *v41;
      v40[2] = v53;
    }
  }
  else if (v42)
  {
    void *v40 = v42;
    uint64_t v49 = (void *)*((void *)v41 + 1);
    v40[1] = v49;
    uint64_t v50 = (void *)*((void *)v41 + 2);
    v40[2] = v50;
    swift_bridgeObjectRetain();
    id v51 = v49;
    id v52 = v50;
  }
  else
  {
    long long v54 = *v41;
    v40[2] = *((void *)v41 + 2);
    *(_OWORD *)uint64_t v40 = v54;
  }
  uint64_t v55 = v14[11];
  uint64_t v56 = (void *)(v11 + v55);
  uint64_t v57 = (const void *)(v12 + v55);
  uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  int v59 = v58(v11 + v55, 1, v33);
  int v60 = v58((uint64_t)v57, 1, v33);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v56, v57, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v56, 0, 1, v33);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v60)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v56, v33);
LABEL_27:
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_28;
  }
  v75((uint64_t)v56, (uint64_t)v57, v33);
LABEL_28:
  uint64_t v62 = v14[12];
  int v63 = (void *)(v11 + v62);
  int v64 = (const void *)(v12 + v62);
  int v65 = v58(v11 + v62, 1, v33);
  int v66 = v58((uint64_t)v64, 1, v33);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v63, v64, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v63, 0, 1, v33);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v63, v33);
LABEL_33:
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_34;
  }
  v75((uint64_t)v63, (uint64_t)v64, v33);
LABEL_34:
  uint64_t v68 = v14[13];
  int v69 = (void *)(v11 + v68);
  uint64_t v70 = (const void *)(v12 + v68);
  int v71 = v58(v11 + v68, 1, v33);
  int v72 = v58((uint64_t)v70, 1, v33);
  if (!v71)
  {
    if (!v72)
    {
      v75((uint64_t)v69, (uint64_t)v70, v33);
      goto LABEL_40;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v69, v33);
    goto LABEL_39;
  }
  if (v72)
  {
LABEL_39:
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v69, v70, v33);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v69, 0, 1, v33);
LABEL_40:
  uint64_t result = v78;
  *(unsigned char *)(v78 + *(int *)(v76 + 24)) = *(unsigned char *)(v77 + *(int *)(v76 + 24));
  return result;
}

uint64_t sub_23BBAAB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = a2 + v3;
  *(void *)uint64_t v4 = *(void *)(a2 + v3);
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(a2 + v3 + 8);
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = v6[5];
  uint64_t v8 = (void *)(v4 + v7);
  char v9 = (const void *)(v5 + v7);
  uint64_t v10 = sub_23BBDB6D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = v6[6];
  uint64_t v15 = (void *)(v4 + v14);
  uint64_t v16 = (const void *)(v5 + v14);
  if (v12((const void *)(v5 + v14), 1, v10))
  {
    sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  *(unsigned char *)(v4 + v6[7]) = *(unsigned char *)(v5 + v6[7]);
  uint64_t v18 = v6[8];
  uint64_t v19 = (void *)(v4 + v18);
  uint64_t v20 = (const void *)(v5 + v18);
  uint64_t v21 = sub_23BBDB860();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(void *, const void *, uint64_t))(v22 + 32);
  v23(v19, v20, v21);
  *(void *)(v4 + v6[9]) = *(void *)(v5 + v6[9]);
  uint64_t v24 = v6[10];
  uint64_t v25 = v4 + v24;
  uint64_t v26 = v5 + v24;
  *(void *)(v25 + 16) = *(void *)(v26 + 16);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  uint64_t v27 = v6[11];
  int v28 = (void *)(v4 + v27);
  uint64_t v29 = (const void *)(v5 + v27);
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v41(v5 + v27, 1, v21))
  {
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v23(v28, v29, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
  }
  uint64_t v31 = v6[12];
  uint64_t v32 = (void *)(v4 + v31);
  uint64_t v33 = (const void *)(v5 + v31);
  if (v41(v5 + v31, 1, v21))
  {
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
    uint64_t v35 = v22;
  }
  else
  {
    v23(v32, v33, v21);
    uint64_t v35 = v22;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v32, 0, 1, v21);
  }
  uint64_t v36 = v6[13];
  id v37 = (void *)(v4 + v36);
  id v38 = (const void *)(v5 + v36);
  if (v41(v5 + v36, 1, v21))
  {
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    v23(v37, v38, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v21);
  }
  uint64_t result = a1;
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return result;
}

uint64_t sub_23BBAB068(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_23BB63394(v8, v9);
  uint64_t v62 = a3;
  int v63 = a2;
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v64 = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  *(void *)uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
  *(unsigned char *)(v11 + 8) = *((unsigned char *)a2 + v10 + 8);
  uint64_t v13 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v14 = v13[5];
  uint64_t v15 = (void *)(v11 + v14);
  uint64_t v16 = (void *)(v12 + v14);
  uint64_t v17 = sub_23BBDB6D0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[6];
  uint64_t v24 = (void *)(v11 + v23);
  uint64_t v25 = (void *)(v12 + v23);
  int v26 = v19((void *)(v11 + v23), 1, v17);
  int v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_23BBAC39C(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  *(unsigned char *)(v11 + v13[7]) = *(unsigned char *)(v12 + v13[7]);
  uint64_t v29 = v13[8];
  uint64_t v30 = v11 + v29;
  uint64_t v31 = v12 + v29;
  uint64_t v32 = sub_23BBDB860();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 40);
  v61(v30, v31, v32);
  uint64_t v34 = v13[9];
  uint64_t v35 = *(void **)(v11 + v34);
  *(void *)(v11 + v34) = *(void *)(v12 + v34);

  uint64_t v36 = v13[10];
  id v37 = (void *)(v11 + v36);
  id v38 = (void *)(v12 + v36);
  if (*(void *)(v11 + v36))
  {
    if (*v38)
    {
      *id v37 = *v38;
      swift_bridgeObjectRelease();
      uint64_t v39 = (void *)v37[1];
      v37[1] = v38[1];

      uint64_t v40 = (void *)v37[2];
      v37[2] = v38[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v37);
  }
  *(_OWORD *)id v37 = *(_OWORD *)v38;
  v37[2] = v38[2];
LABEL_18:
  uint64_t v41 = v13[11];
  uint64_t v42 = (void *)(v11 + v41);
  uint64_t v43 = (const void *)(v12 + v41);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  int v45 = v44(v11 + v41, 1, v32);
  int v46 = v44((uint64_t)v43, 1, v32);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v42, v43, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v42, 0, 1, v32);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v42, v32);
LABEL_23:
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_24;
  }
  v61((uint64_t)v42, (uint64_t)v43, v32);
LABEL_24:
  uint64_t v48 = v13[12];
  uint64_t v49 = (void *)(v11 + v48);
  uint64_t v50 = (const void *)(v12 + v48);
  int v51 = v44(v11 + v48, 1, v32);
  int v52 = v44((uint64_t)v50, 1, v32);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v49, v50, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v49, 0, 1, v32);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v49, v32);
LABEL_29:
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_30;
  }
  v61((uint64_t)v49, (uint64_t)v50, v32);
LABEL_30:
  uint64_t v54 = v13[13];
  uint64_t v55 = (void *)(v11 + v54);
  uint64_t v56 = (const void *)(v12 + v54);
  int v57 = v44(v11 + v54, 1, v32);
  int v58 = v44((uint64_t)v56, 1, v32);
  if (!v57)
  {
    if (!v58)
    {
      v61((uint64_t)v55, (uint64_t)v56, v32);
      goto LABEL_36;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v55, v32);
    goto LABEL_35;
  }
  if (v58)
  {
LABEL_35:
    sub_23BBAC39C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v55, v56, v32);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v55, 0, 1, v32);
LABEL_36:
  uint64_t result = v64;
  *(unsigned char *)(v64 + *(int *)(v62 + 24)) = *((unsigned char *)v63 + *(int *)(v62 + 24));
  return result;
}

uint64_t sub_23BBAB800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBAB814);
}

uint64_t sub_23BBAB814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for SleepWidgetViewModel();
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_23BBAB8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBAB8D0);
}

uint64_t sub_23BBAB8D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for SleepWidgetViewModel();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for OccurrenceSleepWidgetRectangularView()
{
  uint64_t result = qword_268A7E248;
  if (!qword_268A7E248) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BBAB9C0()
{
  uint64_t result = type metadata accessor for SleepWidgetViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23BBABA60(uint64_t a1)
{
  uint64_t result = sub_23BBAC1E4(&qword_268A7E258, (void (*)(uint64_t))type metadata accessor for OccurrenceSleepWidgetRectangularView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BBABAB8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBABAD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = type metadata accessor for SleepWidgetViewModel();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ScheduleOccurrenceSectionView(0);
  uint64_t v7 = (int *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v33 - v11;
  sub_23BBAC030(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v33 - v17;
  *(void *)uint64_t v18 = sub_23BBDBE10();
  *((void *)v18 + 1) = 0;
  v18[16] = 1;
  uint64_t v19 = *(void *)a1;
  char v20 = *(unsigned char *)(a1 + 8);
  sub_23BB631DC(*(void *)a1, v20);
  char v21 = sub_23BB77FBC(v19, v20);
  sub_23BB63394(v19, v20);
  if (v21) {
    uint64_t v22 = 12;
  }
  else {
    uint64_t v22 = 6;
  }
  sub_23BBAC328(0, &qword_268A7E2B0, sub_23BBAC0F8);
  uint64_t v24 = (uint64_t)&v18[*(int *)(v23 + 44)];
  uint64_t v25 = type metadata accessor for OccurrenceSleepWidgetRectangularView();
  sub_23BBAC400(a1 + *(int *)(v25 + 20), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  char v26 = *(unsigned char *)(a1 + *(int *)(v25 + 24));
  *(void *)&v12[v7[9]] = swift_getKeyPath();
  sub_23BBAC39C(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  sub_23BB78F3C((uint64_t)v5, (uint64_t)v12);
  v12[v7[7]] = v26;
  *(void *)&v12[v7[8]] = v22;
  sub_23BBAC400((uint64_t)v12, (uint64_t)v10, type metadata accessor for ScheduleOccurrenceSectionView);
  sub_23BBAC400((uint64_t)v10, v24, type metadata accessor for ScheduleOccurrenceSectionView);
  sub_23BBAC12C(0);
  uint64_t v28 = v24 + *(int *)(v27 + 48);
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 8) = 0;
  sub_23BBAC468((uint64_t)v12, type metadata accessor for ScheduleOccurrenceSectionView);
  sub_23BBAC468((uint64_t)v10, type metadata accessor for ScheduleOccurrenceSectionView);
  sub_23BBAC400((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(void))sub_23BBAC030);
  uint64_t v29 = v34;
  sub_23BBAC400((uint64_t)v16, v34, (uint64_t (*)(void))sub_23BBAC030);
  sub_23BBAC010(0);
  uint64_t v31 = v29 + *(int *)(v30 + 48);
  *(void *)uint64_t v31 = 0;
  *(unsigned char *)(v31 + 8) = 0;
  sub_23BBAC468((uint64_t)v18, (uint64_t (*)(void))sub_23BBAC030);
  return sub_23BBAC468((uint64_t)v16, (uint64_t (*)(void))sub_23BBAC030);
}

uint64_t sub_23BBABE64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_23BBABF94(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = sub_23BBDBE50();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  sub_23BBAC328(0, &qword_268A7E2A0, sub_23BBABFDC);
  sub_23BBABAD4(v2, (uint64_t)&v6[*(int *)(v7 + 44)]);
  uint64_t KeyPath = swift_getKeyPath();
  sub_23BBAC400((uint64_t)v6, a1, (uint64_t (*)(void))sub_23BBABF94);
  sub_23BBAC268();
  uint64_t v10 = (uint64_t *)(a1 + *(int *)(v9 + 36));
  uint64_t *v10 = KeyPath;
  v10[1] = 0x3FE3333333333333;
  return sub_23BBAC468((uint64_t)v6, (uint64_t (*)(void))sub_23BBABF94);
}

void sub_23BBABF94(uint64_t a1)
{
}

void sub_23BBABFDC(uint64_t a1)
{
}

void sub_23BBAC010(uint64_t a1)
{
}

void sub_23BBAC030(uint64_t a1)
{
}

void sub_23BBAC078(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_23BBAC0F8(uint64_t a1)
{
}

void sub_23BBAC12C(uint64_t a1)
{
}

void sub_23BBAC14C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_23BBAC1B0()
{
  return sub_23BBAC1E4(&qword_268A7E290, sub_23BBAC0F8);
}

uint64_t sub_23BBAC1E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BBAC22C()
{
  return sub_23BBAC1E4(&qword_268A7E298, sub_23BBABFDC);
}

void sub_23BBAC268()
{
  if (!qword_268A7E2A8)
  {
    sub_23BBABF94(255);
    sub_23BBAC2D0();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E2A8);
    }
  }
}

void sub_23BBAC2D0()
{
  if (!qword_26AEBBA28)
  {
    unint64_t v0 = sub_23BBDBF50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBA28);
    }
  }
}

void sub_23BBAC328(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23BBDBC10();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_23BBAC39C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BBAC400(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BBAC468(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_23BBAC4CC()
{
  unint64_t result = qword_268A7E2B8;
  if (!qword_268A7E2B8)
  {
    sub_23BBAC268();
    sub_23BBAC1E4(&qword_268A7E2C0, sub_23BBABF94);
    sub_23BBAC1E4((unint64_t *)&qword_26AEBBA20, (void (*)(uint64_t))sub_23BBAC2D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E2B8);
  }
  return result;
}

uint64_t sub_23BBAC5A4()
{
  uint64_t result = (uint64_t)sub_23BBACE9C();
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    goto LABEL_17;
  }
  if (!*(void *)(*(void *)(result + 32) + 16))
  {
    if (v1 != 1)
    {
      uint64_t v7 = 5;
      while (1)
      {
        uint64_t v8 = v7 - 3;
        if (__OFADD__(v7 - 4, 1)) {
          break;
        }
        if (*(void *)(*(void *)(result + 8 * v7) + 16)) {
          goto LABEL_3;
        }
        ++v7;
        if (v8 == v1) {
          goto LABEL_17;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_3:
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    uint64_t v4 = *(void *)(result + 32 + 8 * v2);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = (double *)(v4 + 40);
      while (*v6 - *(v6 - 1) <= 0.0)
      {
        v6 += 3;
        if (!--v5) {
          goto LABEL_4;
        }
      }
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_4:
    uint64_t v2 = v3;
    if (v3 == v1) {
      goto LABEL_17;
    }
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23BBAC690()
{
  unint64_t v0 = sub_23BBACE9C();
  uint64_t v1 = v0[2];
  if (v1)
  {
    double v2 = 0.0;
    uint64_t v3 = v0 + 4;
    char v4 = 1;
    do
    {
      if (*(void *)(*v3 + 16))
      {
        double v5 = *(double *)(*v3 + 32);
        if (v4)
        {
          char v4 = 0;
        }
        else
        {
          char v4 = 0;
          if (v5 >= v2) {
            double v5 = v2;
          }
        }
        double v2 = v5;
      }
      ++v3;
      --v1;
    }
    while (v1);
  }
  else
  {
    double v2 = 0.0;
  }
  swift_bridgeObjectRelease();
  return *(void *)&v2;
}

uint64_t sub_23BBAC734()
{
  unint64_t v0 = sub_23BBACE9C();
  uint64_t v1 = v0[2];
  if (v1)
  {
    double v2 = 0.0;
    uint64_t v3 = v0 + 4;
    char v4 = 1;
    do
    {
      uint64_t v6 = *(void *)(*v3 + 16);
      if (v6)
      {
        double v5 = *(double *)(*v3 + 24 * v6 + 16);
        if (v4)
        {
          char v4 = 0;
        }
        else
        {
          char v4 = 0;
          if (v5 < v2) {
            double v5 = v2;
          }
        }
        double v2 = v5;
      }
      ++v3;
      --v1;
    }
    while (v1);
  }
  else
  {
    double v2 = 0.0;
  }
  swift_bridgeObjectRelease();
  return *(void *)&v2;
}

void static HighlightBehavior.defaultHighlightBehaviorForLastSummary.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL static HighlightBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BBAC800()
{
  uint64_t v18 = *(void *)(*(void *)v0 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v1 = 0;
    double v2 = (double *)MEMORY[0x263F8EE78];
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v3 = sub_23BBACE9C();
      uint64_t v4 = v3[2];
      if (v4)
      {
        uint64_t v5 = 0;
        char v6 = 1;
        double v7 = 0.0;
        do
        {
          uint64_t v8 = v3[v5 + 4];
          if (*(void *)(v8 + 16))
          {
            if (v6)
            {
              char v6 = 0;
              double v7 = *(double *)(v8 + 32);
            }
            else
            {
              char v6 = 0;
              if (*(double *)(v8 + 32) < v7) {
                double v7 = *(double *)(v8 + 32);
              }
            }
          }
          ++v5;
        }
        while (v4 != v5);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v6 & 1) == 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v2 = (double *)sub_23BBAD878(0, *((void *)v2 + 2) + 1, 1, v2);
          }
          unint64_t v10 = *((void *)v2 + 2);
          unint64_t v9 = *((void *)v2 + 3);
          if (v10 >= v9 >> 1) {
            double v2 = (double *)sub_23BBAD878((void *)(v9 > 1), v10 + 1, 1, v2);
          }
          *((void *)v2 + 2) = v10 + 1;
          v2[v10 + 4] = v7;
        }
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      ++v1;
    }
    while (v1 != v18);
    swift_bridgeObjectRelease_n();
    uint64_t v11 = *((void *)v2 + 2);
    if (v11) {
      goto LABEL_20;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
  double v2 = (double *)MEMORY[0x263F8EE78];
  uint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (!v11) {
    goto LABEL_27;
  }
LABEL_20:
  double v12 = v2[4];
  uint64_t v13 = v11 - 1;
  if (v11 != 1)
  {
    uint64_t v14 = v2 + 5;
    do
    {
      double v15 = *v14++;
      double v16 = v15;
      if (v15 < v12) {
        double v12 = v16;
      }
      --v13;
    }
    while (v13);
  }
  swift_bridgeObjectRelease();
  return *(void *)&v12;
}

uint64_t sub_23BBACAD4()
{
  uint64_t v22 = *(void *)(*(void *)v0 + 16);
  if (v22)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v1 = 0;
    char v21 = (void *)MEMORY[0x263F8EE78];
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      double v2 = sub_23BBACE9C();
      uint64_t v3 = v2[2];
      if (v3)
      {
        uint64_t v4 = 0;
        char v5 = 1;
        double v6 = 0.0;
        do
        {
          uint64_t v7 = v2[v4 + 4];
          uint64_t v8 = *(void *)(v7 + 16);
          if (v8)
          {
            uint64_t v9 = v7 + 24 * v8;
            if (v5)
            {
              char v5 = 0;
              double v6 = *(double *)(v9 + 16);
            }
            else
            {
              char v5 = 0;
              if (v6 <= *(double *)(v9 + 16)) {
                double v6 = *(double *)(v9 + 16);
              }
            }
          }
          ++v4;
        }
        while (v3 != v4);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
        {
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v10 = v21;
          }
          else {
            unint64_t v10 = sub_23BBAD878(0, v21[2] + 1, 1, v21);
          }
          unint64_t v12 = v10[2];
          unint64_t v11 = v10[3];
          if (v12 >= v11 >> 1) {
            unint64_t v10 = sub_23BBAD878((void *)(v11 > 1), v12 + 1, 1, v10);
          }
          v10[2] = v12 + 1;
          char v21 = v10;
          *(double *)&v10[v12 + 4] = v6;
        }
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      ++v1;
    }
    while (v1 != v22);
    swift_bridgeObjectRelease_n();
    uint64_t v13 = (double *)v21;
    uint64_t v14 = v21[2];
    if (v14) {
      goto LABEL_21;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = (double *)MEMORY[0x263F8EE78];
  uint64_t v14 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (!v14) {
    goto LABEL_28;
  }
LABEL_21:
  double v15 = v13[4];
  uint64_t v16 = v14 - 1;
  if (v14 != 1)
  {
    uint64_t v17 = v13 + 5;
    do
    {
      double v18 = *v17++;
      double v19 = v18;
      if (v15 < v18) {
        double v15 = v19;
      }
      --v16;
    }
    while (v16);
  }
  swift_bridgeObjectRelease();
  return *(void *)&v15;
}

uint64_t HighlightBehavior.hash(into:)()
{
  return sub_23BBDCBE0();
}

uint64_t HighlightBehavior.hashValue.getter()
{
  return sub_23BBDCBF0();
}

uint64_t Segment.highlight.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t static Segment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8)) {
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_23BBACE68(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8)) {
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

void *sub_23BBACE9C()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_23BBAD390(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  unint64_t v10 = v9 + 1;
  if (v9 >= v8 >> 1) {
    uint64_t v7 = sub_23BBAD390((void *)(v8 > 1), v9 + 1, 1, v7);
  }
  v7[2] = v10;
  v7[v9 + 4] = v2;
  unint64_t v11 = v7[3];
  unint64_t v12 = v9 + 2;
  swift_bridgeObjectRetain();
  if ((uint64_t)(v9 + 2) > (uint64_t)(v11 >> 1)) {
    uint64_t v7 = sub_23BBAD390((void *)(v11 > 1), v9 + 2, 1, v7);
  }
  v7[2] = v12;
  v7[v10 + 4] = v1;
  unint64_t v13 = v7[3];
  unint64_t v14 = v9 + 3;
  swift_bridgeObjectRetain();
  if ((uint64_t)(v9 + 3) > (uint64_t)(v13 >> 1)) {
    uint64_t v7 = sub_23BBAD390((void *)(v13 > 1), v9 + 3, 1, v7);
  }
  v7[2] = v14;
  v7[v12 + 4] = v4;
  unint64_t v15 = v7[3];
  unint64_t v16 = v9 + 4;
  swift_bridgeObjectRetain();
  if ((uint64_t)(v9 + 4) > (uint64_t)(v15 >> 1)) {
    uint64_t v7 = sub_23BBAD390((void *)(v15 > 1), v9 + 4, 1, v7);
  }
  v7[2] = v16;
  v7[v14 + 4] = v3;
  unint64_t v17 = v7[3];
  unint64_t v18 = v9 + 5;
  swift_bridgeObjectRetain();
  if ((uint64_t)(v9 + 5) > (uint64_t)(v17 >> 1)) {
    uint64_t v7 = sub_23BBAD390((void *)(v17 > 1), v9 + 5, 1, v7);
  }
  v7[2] = v18;
  v7[v16 + 4] = v6;
  unint64_t v19 = v7[3];
  int64_t v20 = v9 + 6;
  swift_bridgeObjectRetain();
  if (v20 > (uint64_t)(v19 >> 1)) {
    uint64_t v7 = sub_23BBAD390((void *)(v19 > 1), v20, 1, v7);
  }
  v7[2] = v20;
  v7[v18 + 4] = v5;
  return v7;
}

uint64_t sub_23BBAD0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (double *)(a2 + 48);
  uint64_t v5 = (double *)(a1 + 48);
  do
  {
    uint64_t v6 = v3;
    BOOL v7 = *(v5 - 2) != *(v4 - 2);
    if (*(v5 - 1) != *(v4 - 1)) {
      BOOL v7 = 1;
    }
    int v8 = v7 | *(unsigned __int8 *)v5 ^ *(unsigned __int8 *)v4;
    if (v8) {
      break;
    }
    --v3;
    v4 += 3;
    v5 += 3;
  }
  while (v6);
  return (v8 ^ 1) & 1;
}

uint64_t sub_23BBAD12C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_23BBAE584();
  uint64_t v10 = *(void *)(sub_23BBDC5A0() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_23BBDCB10();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_23BBDC5A0() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_23BBADFE8(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_23BBAD390(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_23BBAE508();
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23BBAD9A8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_23BBAD49C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_23BBAD73C(a1, a2, a3, a4, &qword_268A7E2E8, (uint64_t)&type metadata for BarSegment);
}

void *sub_23BBAD4B0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_23BBAE5DC(0, &qword_268A7DA50, (uint64_t)&type metadata for SleepWidgetChartBar, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_23BBAE324(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_23BBAD5F8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_23BBAE5DC(0, (unint64_t *)&qword_26AEBC4C8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23BBAE230(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_23BBAD728(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_23BBAD73C(a1, a2, a3, a4, &qword_268A7DA48, (uint64_t)&type metadata for Segment);
}

void *sub_23BBAD73C(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t a6)
{
  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      sub_23BBAE5DC(0, a5, a6, MEMORY[0x263F8E0F8]);
      uint64_t v12 = (void *)swift_allocObject();
      size_t v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      size_t v14 = v12 + 4;
      if (v7)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v10 + 4]) {
          memmove(v14, a4 + 4, 24 * v10);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v12 = (void *)MEMORY[0x263F8EE78];
      size_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_23BBAE140(0, v10, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

void *sub_23BBAD878(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_23BBAE5DC(0, &qword_268A7E2D0, MEMORY[0x263F8D538], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      size_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      size_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23BBAE41C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23BBAD9A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_23BBAE5DC(0, &qword_268A7E2E0, (uint64_t)&type metadata for Segment, MEMORY[0x263F8D488]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t _s13SleepWidgetUI0aB8ChartBarV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  if ((sub_23BBAD0A0(*a1, *a2) & 1) == 0
    || (sub_23BBAD0A0(v2, v7) & 1) == 0
    || (sub_23BBAD0A0(v4, v9) & 1) == 0
    || (sub_23BBAD0A0(v3, v8) & 1) == 0
    || (sub_23BBAD0A0(v6, v11) & 1) == 0)
  {
    return 0;
  }
  return sub_23BBAD0A0(v5, v10);
}

unint64_t sub_23BBADBB4()
{
  unint64_t result = qword_268A7E2C8;
  if (!qword_268A7E2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E2C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepWidgetChart()
{
  return &type metadata for SleepWidgetChart;
}

unsigned char *storeEnumTagSinglePayload for HighlightBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23BBADCE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HighlightBehavior()
{
  return &type metadata for HighlightBehavior;
}

ValueMetadata *type metadata accessor for Segment()
{
  return &type metadata for Segment;
}

uint64_t destroy for SleepWidgetChartBar()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SleepWidgetChartBar(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SleepWidgetChartBar(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_OWORD *assignWithTake for SleepWidgetChartBar(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepWidgetChartBar(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepWidgetChartBar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepWidgetChartBar()
{
  return &type metadata for SleepWidgetChartBar;
}

uint64_t sub_23BBADFE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_23BBDC5A0() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

char *sub_23BBAE140(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t sub_23BBAE230(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

uint64_t sub_23BBAE324(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

char *sub_23BBAE41C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_23BBDCB40();
  __break(1u);
  return result;
}

void sub_23BBAE508()
{
  if (!qword_268A7E2D8)
  {
    sub_23BBAE5DC(255, &qword_268A7E2E0, (uint64_t)&type metadata for Segment, MEMORY[0x263F8D488]);
    unint64_t v0 = sub_23BBDCB70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E2D8);
    }
  }
}

void sub_23BBAE584()
{
  if (!qword_26AEBBCF8)
  {
    sub_23BBDC5A0();
    unint64_t v0 = sub_23BBDCB70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBCF8);
    }
  }
}

void sub_23BBAE5DC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_23BBAE628(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = *(int *)(v4 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = v6[6];
    uint64_t v16 = (void *)(a1 + v15);
    unint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *(unsigned char *)(a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    uint64_t v19 = v6[8];
    int64_t v20 = (void *)(a1 + v19);
    char v21 = (char *)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v49 = *(void (**)(void *, const void *, uint64_t))(v23 + 16);
    v49(v20, v21, v22);
    uint64_t v24 = v6[9];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(void *)(a1 + v24) = v25;
    uint64_t v26 = v6[10];
    uint64_t v27 = (void *)(a1 + v26);
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    id v30 = v25;
    if (v29)
    {
      uint64_t v32 = *(void **)(v28 + 8);
      uint64_t v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = v6[11];
    uint64_t v36 = (void *)(a1 + v35);
    id v37 = (char *)a2 + v35;
    id v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v49(v36, v37, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = v6[12];
    uint64_t v41 = (void *)(a1 + v40);
    uint64_t v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v49(v41, v42, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = v6[13];
    int v45 = (void *)(a1 + v44);
    int v46 = (char *)a2 + v44;
    if (v38(v46, 1, v22))
    {
      sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v49(v45, v46, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t sub_23BBAEBC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  unint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  int v46 = *(void (**)(void *, const void *, uint64_t))(v20 + 16);
  v46(v17, v18, v19);
  uint64_t v21 = v4[9];
  uint64_t v22 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v22;
  uint64_t v23 = v4[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(a2 + v23);
  id v27 = v22;
  if (v26)
  {
    uint64_t v29 = *(void **)(v25 + 8);
    uint64_t v28 = *(void **)(v25 + 16);
    void *v24 = v26;
    v24[1] = v29;
    v24[2] = v28;
    swift_bridgeObjectRetain();
    id v30 = v29;
    id v31 = v28;
  }
  else
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    v24[2] = *(void *)(v25 + 16);
  }
  uint64_t v32 = v4[11];
  id v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v35((const void *)(a2 + v32), 1, v19))
  {
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    v46(v33, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v33, 0, 1, v19);
  }
  uint64_t v37 = v4[12];
  id v38 = (void *)(a1 + v37);
  uint64_t v39 = (const void *)(a2 + v37);
  if (v35((const void *)(a2 + v37), 1, v19))
  {
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    v46(v38, v39, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v38, 0, 1, v19);
  }
  uint64_t v41 = v4[13];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (const void *)(a2 + v41);
  if (v35(v43, 1, v19))
  {
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    v46(v42, v43, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v42, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BBAF118(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (void *)(a1 + v15);
  unint64_t v17 = (char *)a2 + v15;
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
LABEL_13:
  *(unsigned char *)(a1 + v5[7]) = *((unsigned char *)a2 + v5[7]);
  uint64_t v21 = v5[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t)a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  int v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v66(v22, v23, v24);
  uint64_t v26 = v5[9];
  id v27 = *(void **)((char *)a2 + v26);
  uint64_t v28 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = v27;
  id v29 = v27;

  uint64_t v30 = v5[10];
  id v31 = (void *)(a1 + v30);
  uint64_t v32 = (long long *)((char *)a2 + v30);
  uint64_t v33 = *(uint64_t *)((char *)a2 + v30);
  if (*(void *)(a1 + v30))
  {
    if (v33)
    {
      void *v31 = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v34 = (void *)v31[1];
      uint64_t v35 = (void *)*((void *)v32 + 1);
      v31[1] = v35;
      id v36 = v35;

      uint64_t v37 = (void *)v31[2];
      id v38 = (void *)*((void *)v32 + 2);
      v31[2] = v38;
      id v39 = v38;
    }
    else
    {
      sub_23BB547F0(a1 + v30);
      uint64_t v44 = *((void *)v32 + 2);
      *(_OWORD *)id v31 = *v32;
      v31[2] = v44;
    }
  }
  else if (v33)
  {
    void *v31 = v33;
    uint64_t v40 = (void *)*((void *)v32 + 1);
    v31[1] = v40;
    uint64_t v41 = (void *)*((void *)v32 + 2);
    v31[2] = v41;
    swift_bridgeObjectRetain();
    id v42 = v40;
    id v43 = v41;
  }
  else
  {
    long long v45 = *v32;
    v31[2] = *((void *)v32 + 2);
    *(_OWORD *)id v31 = v45;
  }
  uint64_t v46 = v5[11];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (char *)a2 + v46;
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v50 = v49(a1 + v46, 1, v24);
  int v51 = v49((uint64_t)v48, 1, v24);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v47, v48, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
LABEL_27:
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_28;
  }
  v66((uint64_t)v47, (uint64_t)v48, v24);
LABEL_28:
  uint64_t v53 = v5[12];
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (char *)a2 + v53;
  int v56 = v49(a1 + v53, 1, v24);
  int v57 = v49((uint64_t)v55, 1, v24);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v54, v55, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v54, 0, 1, v24);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v54, v24);
LABEL_33:
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_34;
  }
  v66((uint64_t)v54, (uint64_t)v55, v24);
LABEL_34:
  uint64_t v59 = v5[13];
  int v60 = (void *)(a1 + v59);
  uint64_t v61 = (char *)a2 + v59;
  int v62 = v49(a1 + v59, 1, v24);
  int v63 = v49((uint64_t)v61, 1, v24);
  if (!v62)
  {
    if (!v63)
    {
      v66((uint64_t)v60, (uint64_t)v61, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v60, v24);
    goto LABEL_39;
  }
  if (v63)
  {
LABEL_39:
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v60, v61, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v60, 0, 1, v24);
  return a1;
}

uint64_t sub_23BBAF8BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  unint64_t v17 = (void *)(a1 + v16);
  int v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(void *, const void *, uint64_t))(v20 + 32);
  v21(v17, v18, v19);
  *(void *)(a1 + v4[9]) = *(void *)(a2 + v4[9]);
  uint64_t v22 = v4[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  uint64_t v25 = v4[11];
  uint64_t v26 = (void *)(a1 + v25);
  id v27 = (const void *)(a2 + v25);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v40(a2 + v25, 1, v19))
  {
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v21(v26, v27, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  }
  uint64_t v29 = v4[12];
  uint64_t v30 = (void *)(a1 + v29);
  id v31 = (const void *)(a2 + v29);
  if (v40(a2 + v29, 1, v19))
  {
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    uint64_t v33 = v21;
  }
  else
  {
    id v34 = v31;
    uint64_t v33 = v21;
    v21(v30, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v30, 0, 1, v19);
  }
  uint64_t v35 = v4[13];
  id v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  if (v40((uint64_t)v37, 1, v19))
  {
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v33(v36, v37, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v36, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BBAFDE4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v6, v7, v8);
LABEL_7:
  uint64_t v14 = v4[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  int v17 = v10((void *)(a1 + v14), 1, v8);
  int v18 = v10(v16, 1, v8);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v15, v16, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v15, v8);
LABEL_12:
    sub_23BBB4134(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v15, v16, v8);
LABEL_13:
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v20 = v4[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = sub_23BBDB860();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v52(v21, v22, v23);
  uint64_t v25 = v4[9];
  uint64_t v26 = *(void **)(a1 + v25);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);

  uint64_t v27 = v4[10];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  if (*(void *)(a1 + v27))
  {
    if (*v29)
    {
      *uint64_t v28 = *v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = (void *)v28[1];
      v28[1] = v29[1];

      id v31 = (void *)v28[2];
      v28[2] = v29[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v28);
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  v28[2] = v29[2];
LABEL_18:
  uint64_t v32 = v4[11];
  uint64_t v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v36 = v35(a1 + v32, 1, v23);
  int v37 = v35((uint64_t)v34, 1, v23);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v33, v34, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v33, 0, 1, v23);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v33, v23);
LABEL_23:
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_24;
  }
  v52((uint64_t)v33, (uint64_t)v34, v23);
LABEL_24:
  uint64_t v39 = v4[12];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (const void *)(a2 + v39);
  int v42 = v35(a1 + v39, 1, v23);
  int v43 = v35((uint64_t)v41, 1, v23);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v40, v41, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v40, 0, 1, v23);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v40, v23);
LABEL_29:
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_30;
  }
  v52((uint64_t)v40, (uint64_t)v41, v23);
LABEL_30:
  uint64_t v45 = v4[13];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (const void *)(a2 + v45);
  int v48 = v35(a1 + v45, 1, v23);
  int v49 = v35((uint64_t)v47, 1, v23);
  if (!v48)
  {
    if (!v49)
    {
      v52((uint64_t)v46, (uint64_t)v47, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v46, v23);
    goto LABEL_35;
  }
  if (v49)
  {
LABEL_35:
    sub_23BBB4134(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v46, v47, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v46, 0, 1, v23);
  return a1;
}

uint64_t sub_23BBB0538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBB054C);
}

uint64_t sub_23BBB054C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_23BBB05B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBB05CC);
}

uint64_t sub_23BBB05CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SleepWidgetCircularView()
{
  uint64_t result = qword_26AEBC8D0;
  if (!qword_26AEBC8D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BBB0688(uint64_t a1)
{
  uint64_t result = sub_23BBB42D0(&qword_26AEBC8C8, (void (*)(uint64_t))type metadata accessor for SleepWidgetCircularView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BBB06E0(uint64_t a1)
{
  uint64_t result = sub_23BBB42D0(&qword_268A7E2F0, (void (*)(uint64_t))type metadata accessor for SleepWidgetCircularView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BBB0738()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBB0754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v150 = a1;
  uint64_t v132 = type metadata accessor for BedtimeSleepWidgetView();
  uint64_t v1 = MEMORY[0x270FA5388](v132);
  uint64_t v131 = (uint64_t)&v123 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  uint64_t v133 = (char *)&v123 - v3;
  uint64_t v141 = type metadata accessor for GreetingSleepWidgetView();
  uint64_t v4 = MEMORY[0x270FA5388](v141);
  uint64_t v139 = (uint64_t)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v140 = (uint64_t)&v123 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v136 = (uint64_t)&v123 - v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_23BBB431C(0, &qword_26AEBCA10, (uint64_t (*)(uint64_t))sub_23BB73E9C, MEMORY[0x263F19B20]);
  uint64_t v146 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v144 = (uint64_t)&v123 - v11;
  sub_23BBB431C(0, &qword_26AEBCA00, (uint64_t (*)(uint64_t))sub_23BB73F14, v9);
  uint64_t v147 = v12;
  MEMORY[0x270FA5388](v12);
  char v149 = (char *)&v123 - v13;
  sub_23BB73E9C(0);
  uint64_t v142 = v14;
  MEMORY[0x270FA5388](v14);
  long long v143 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBB4134(0, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v123 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v129 = (char *)&v123 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v130 = (uint64_t)&v123 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v134 = (char *)&v123 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v135 = (uint64_t)&v123 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  char v127 = (char *)&v123 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v128 = (uint64_t)&v123 - v33;
  sub_23BBB4134(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
  MEMORY[0x270FA5388](v34 - 8);
  v137 = (uint64_t *)((char *)&v123 - v35);
  uint64_t v36 = type metadata accessor for SleepWidgetViewModel();
  MEMORY[0x270FA5388](v36 - 8);
  uint64_t v38 = (char *)&v123 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for UpcomingSleepWidgetView();
  uint64_t v40 = MEMORY[0x270FA5388](v39);
  int v42 = (char *)&v123 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v138 = (uint64_t)&v123 - v43;
  sub_23BB73F14();
  uint64_t v145 = v44;
  uint64_t v148 = *(void *)(v44 - 8);
  uint64_t v45 = MEMORY[0x270FA5388](v44);
  uint64_t v47 = (char *)&v123 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = MEMORY[0x270FA5388](v45);
  uint64_t v50 = (char *)&v123 - v49;
  uint64_t v51 = MEMORY[0x270FA5388](v48);
  uint64_t v125 = (char *)&v123 - v52;
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  uint64_t v126 = (char *)&v123 - v54;
  uint64_t v55 = MEMORY[0x270FA5388](v53);
  int v57 = (char *)&v123 - v56;
  uint64_t v58 = MEMORY[0x270FA5388](v55);
  int v60 = (char *)&v123 - v59;
  uint64_t v61 = MEMORY[0x270FA5388](v58);
  uint64_t v124 = (char *)&v123 - v62;
  MEMORY[0x270FA5388](v61);
  uint64_t v64 = (char *)&v123 - v63;
  uint64_t v65 = v151 + *(int *)(type metadata accessor for SleepWidgetSmallView() + 20);
  if ((*(unsigned char *)(v65 + 8) & 1) != 0 || (uint64_t v70 = *(void *)v65, *(void *)v65 > 7uLL))
  {
LABEL_2:
    uint64_t v66 = v139;
    sub_23BBB4268(v65, v139, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
    sub_23BBB4268(v66, v140, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetView);
    sub_23BBB42D0(&qword_26AEBB798, (void (*)(uint64_t))type metadata accessor for GreetingSleepWidgetView);
    uint64_t v152 = sub_23BBDC3C0();
    id v67 = (id)HKSPSleepURL();
    if (v67)
    {
      uint64_t v68 = v67;
      sub_23BBDB7C0();

      uint64_t v69 = sub_23BBDB7D0();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v19, 0, 1, v69);
    }
    else
    {
      uint64_t v82 = sub_23BBDB7D0();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v19, 1, 1, v82);
    }
    uint64_t v83 = (uint64_t)v143;
    uint64_t v84 = v145;
    sub_23BBB4198((uint64_t)v19, (uint64_t)v22, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    uint64_t v85 = MEMORY[0x263F1B720];
    uint64_t v86 = MEMORY[0x263F1B718];
    sub_23BBDC1F0();
    sub_23BB56600((uint64_t)v22);
    swift_release();
    sub_23BBB4208(v66, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetView);
    uint64_t v87 = v148;
    (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v50, v47, v84);
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v149, v50, v84);
    swift_storeEnumTagMultiPayload();
    uint64_t v152 = v85;
    uint64_t v153 = v86;
    swift_getOpaqueTypeConformance2();
    sub_23BBDBED0();
    sub_23BBB4268(v83, v144, (uint64_t (*)(void))sub_23BB73E9C);
    swift_storeEnumTagMultiPayload();
    sub_23BB7661C();
    sub_23BBDBED0();
    uint64_t v64 = v50;
    goto LABEL_23;
  }
  if (((1 << v70) & 0xC2) == 0)
  {
    if (((1 << v70) & 0xC) != 0)
    {
      sub_23BBB4268(v65, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v94 = (uint64_t)v137;
      uint64_t *v137 = KeyPath;
      uint64_t v95 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
      uint64_t v96 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
      sub_23BBB4134(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
      swift_storeEnumTagMultiPayload();
      uint64_t v97 = swift_getKeyPath();
      uint64_t v98 = v138;
      *(void *)(v138 + *(int *)(v39 + 24)) = v97;
      sub_23BBB4134(0, &qword_26AEBB9A8, MEMORY[0x263F07690], v96);
      swift_storeEnumTagMultiPayload();
      sub_23BB78F3C((uint64_t)v38, v98);
      sub_23BBB4198(v94, v98 + *(int *)(v39 + 20), &qword_26AEBB9B8, v95, MEMORY[0x263F185D0]);
      sub_23BBB4268(v98, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for UpcomingSleepWidgetView);
      sub_23BBB42D0(&qword_26AEBB808, (void (*)(uint64_t))type metadata accessor for UpcomingSleepWidgetView);
      uint64_t v152 = sub_23BBDC3C0();
      id v99 = (id)HKSPSleepURL();
      if (v99)
      {
        uint64_t v100 = v99;
        uint64_t v101 = (uint64_t)v127;
        sub_23BBDB7C0();

        uint64_t v102 = sub_23BBDB7D0();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56))(v101, 0, 1, v102);
      }
      else
      {
        uint64_t v115 = sub_23BBDB7D0();
        uint64_t v101 = (uint64_t)v127;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v127, 1, 1, v115);
      }
      uint64_t v83 = (uint64_t)v143;
      uint64_t v116 = v144;
      uint64_t v84 = v145;
      uint64_t v117 = v128;
      sub_23BBB4198(v101, v128, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      uint64_t v118 = MEMORY[0x263F1B720];
      uint64_t v119 = MEMORY[0x263F1B718];
      unint64_t v120 = v124;
      sub_23BBDC1F0();
      sub_23BB56600(v117);
      swift_release();
      sub_23BBB4208(v138, (uint64_t (*)(void))type metadata accessor for UpcomingSleepWidgetView);
      uint64_t v121 = v148;
      (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v64, v120, v84);
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v149, v64, v84);
      swift_storeEnumTagMultiPayload();
      uint64_t v152 = v118;
      uint64_t v153 = v119;
      uint64_t v87 = v121;
      swift_getOpaqueTypeConformance2();
      sub_23BBDBED0();
      sub_23BBB4268(v83, v116, (uint64_t (*)(void))sub_23BB73E9C);
      goto LABEL_22;
    }
    if (((1 << v70) & 0x30) != 0)
    {
      sub_23BBB4268(v65, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
      uint64_t v71 = swift_getKeyPath();
      uint64_t v72 = (uint64_t)v137;
      uint64_t *v137 = v71;
      uint64_t v73 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
      int v74 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
      sub_23BBB4134(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
      swift_storeEnumTagMultiPayload();
      uint64_t v75 = swift_getKeyPath();
      uint64_t v76 = v132;
      uint64_t v77 = (uint64_t)v133;
      *(void *)&v133[*(int *)(v132 + 24)] = v75;
      sub_23BBB4134(0, &qword_26AEBB9A8, MEMORY[0x263F07690], v74);
      swift_storeEnumTagMultiPayload();
      sub_23BB78F3C((uint64_t)v38, v77);
      sub_23BBB4198(v72, v77 + *(int *)(v76 + 20), &qword_26AEBB9B8, v73, MEMORY[0x263F185D0]);
      sub_23BBB4268(v77, v131, (uint64_t (*)(void))type metadata accessor for BedtimeSleepWidgetView);
      sub_23BBB42D0(&qword_26AEBB6F8, (void (*)(uint64_t))type metadata accessor for BedtimeSleepWidgetView);
      uint64_t v152 = sub_23BBDC3C0();
      id v78 = (id)HKSPSleepURL();
      if (v78)
      {
        uint64_t v79 = v78;
        uint64_t v80 = (uint64_t)v129;
        sub_23BBDB7C0();

        uint64_t v81 = sub_23BBDB7D0();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 0, 1, v81);
      }
      else
      {
        uint64_t v108 = sub_23BBDB7D0();
        uint64_t v80 = (uint64_t)v129;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v129, 1, 1, v108);
      }
      uint64_t v83 = (uint64_t)v143;
      uint64_t v109 = v144;
      uint64_t v84 = v145;
      uint64_t v110 = v130;
      sub_23BBB4198(v80, v130, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      uint64_t v111 = MEMORY[0x263F1B720];
      uint64_t v112 = MEMORY[0x263F1B718];
      uint64_t v113 = v125;
      sub_23BBDC1F0();
      sub_23BB56600(v110);
      swift_release();
      sub_23BBB4208(v77, (uint64_t (*)(void))type metadata accessor for BedtimeSleepWidgetView);
      uint64_t v114 = v148;
      uint64_t v64 = v126;
      (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v126, v113, v84);
      (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v149, v64, v84);
      swift_storeEnumTagMultiPayload();
      uint64_t v152 = v111;
      uint64_t v153 = v112;
      uint64_t v87 = v114;
      swift_getOpaqueTypeConformance2();
      sub_23BBDBED0();
      sub_23BBB4268(v83, v109, (uint64_t (*)(void))sub_23BB73E9C);
LABEL_22:
      swift_storeEnumTagMultiPayload();
      sub_23BB7661C();
      sub_23BBDBED0();
      goto LABEL_23;
    }
    goto LABEL_2;
  }
  uint64_t v88 = v136;
  sub_23BBB4268(v65, v136, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  sub_23BBB4268(v88, v140, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetView);
  sub_23BBB42D0(&qword_26AEBB798, (void (*)(uint64_t))type metadata accessor for GreetingSleepWidgetView);
  uint64_t v152 = sub_23BBDC3C0();
  id v89 = (id)HKSPSleepURL();
  if (v89)
  {
    uint64_t v90 = v89;
    uint64_t v91 = (uint64_t)v134;
    sub_23BBDB7C0();

    uint64_t v92 = sub_23BBDB7D0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v91, 0, 1, v92);
  }
  else
  {
    uint64_t v103 = sub_23BBDB7D0();
    uint64_t v91 = (uint64_t)v134;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56))(v134, 1, 1, v103);
  }
  uint64_t v83 = (uint64_t)v143;
  uint64_t v104 = v144;
  uint64_t v105 = v135;
  sub_23BBB4198(v91, v135, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v106 = MEMORY[0x263F1B720];
  uint64_t v107 = MEMORY[0x263F1B718];
  sub_23BBDC1F0();
  sub_23BB56600(v105);
  swift_release();
  sub_23BBB4208(v88, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetView);
  uint64_t v87 = v148;
  uint64_t v84 = v145;
  (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v60, v57, v145);
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v149, v60, v84);
  swift_storeEnumTagMultiPayload();
  uint64_t v152 = v106;
  uint64_t v153 = v107;
  swift_getOpaqueTypeConformance2();
  sub_23BBDBED0();
  sub_23BBB4268(v83, v104, (uint64_t (*)(void))sub_23BB73E9C);
  swift_storeEnumTagMultiPayload();
  sub_23BB7661C();
  sub_23BBDBED0();
  uint64_t v64 = v60;
LABEL_23:
  sub_23BBB4208(v83, (uint64_t (*)(void))sub_23BB73E9C);
  return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v64, v84);
}

uint64_t sub_23BBB1B94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v132 = a1;
  uint64_t v125 = type metadata accessor for GreetingSleepWidgetRectangularView();
  uint64_t v2 = MEMORY[0x270FA5388](v125);
  uint64_t v135 = (uint64_t *)((char *)&v113 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v124 = (uint64_t)&v113 - v5;
  MEMORY[0x270FA5388](v4);
  unint64_t v122 = (uint64_t *)((char *)&v113 - v6);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_23BBB431C(0, &qword_26AEBCA10, (uint64_t (*)(uint64_t))sub_23BB73E9C, MEMORY[0x263F19B20]);
  uint64_t v127 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v130 = (uint64_t)&v113 - v9;
  sub_23BBB431C(0, &qword_26AEBCA00, (uint64_t (*)(uint64_t))sub_23BB73F14, v7);
  uint64_t v133 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v134 = (char *)&v113 - v11;
  sub_23BB73E9C(0);
  uint64_t v128 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v129 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBB4134(0, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v123 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v113 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v116 = (char *)&v113 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v117 = (uint64_t)&v113 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v118 = (char *)&v113 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v119 = (uint64_t)&v113 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v114 = (char *)&v113 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v115 = (uint64_t)&v113 - v30;
  uint64_t v31 = type metadata accessor for SleepWidgetViewModel();
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for OccurrenceSleepWidgetRectangularView();
  uint64_t v35 = MEMORY[0x270FA5388](v34);
  uint64_t v121 = (uint64_t *)((char *)&v113 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v39 = (char *)&v113 - v38;
  MEMORY[0x270FA5388](v37);
  unint64_t v120 = (uint64_t *)((char *)&v113 - v40);
  sub_23BB73F14();
  uint64_t v126 = v41;
  uint64_t v131 = *(void *)(v41 - 8);
  uint64_t v42 = MEMORY[0x270FA5388](v1);
  uint64_t v44 = (char *)&v113 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x270FA5388](v42);
  uint64_t v47 = (char *)&v113 - v46;
  uint64_t v48 = MEMORY[0x270FA5388](v45);
  uint64_t v49 = MEMORY[0x270FA5388](v48);
  uint64_t v50 = MEMORY[0x270FA5388](v49);
  uint64_t v52 = (char *)&v113 - v51;
  uint64_t v53 = MEMORY[0x270FA5388](v50);
  uint64_t v54 = MEMORY[0x270FA5388](v53);
  uint64_t v55 = (void *)MEMORY[0x270FA5388](v54);
  uint64_t v61 = (char *)&v113 - v60;
  if ((*(unsigned char *)(v1 + 8) & 1) != 0 || (uint64_t v68 = *v55, *v55 > 7uLL))
  {
LABEL_2:
    sub_23BBB4268((uint64_t)v55, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v63 = v135;
    uint64_t *v135 = KeyPath;
    *((unsigned char *)v63 + 8) = 0;
    sub_23BB78F3C((uint64_t)v33, (uint64_t)v63 + *(int *)(v125 + 20));
    sub_23BBB4268((uint64_t)v63, v124, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetRectangularView);
    sub_23BBB42D0(&qword_268A7E148, (void (*)(uint64_t))type metadata accessor for GreetingSleepWidgetRectangularView);
    uint64_t v136 = sub_23BBDC3C0();
    id v64 = (id)HKSPSleepURL();
    if (v64)
    {
      uint64_t v65 = v64;
      uint64_t v66 = (uint64_t)v123;
      sub_23BBDB7C0();

      uint64_t v67 = sub_23BBDB7D0();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v66, 0, 1, v67);
    }
    else
    {
      uint64_t v77 = sub_23BBDB7D0();
      uint64_t v66 = (uint64_t)v123;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v123, 1, 1, v77);
    }
    uint64_t v78 = v131;
    uint64_t v79 = v126;
    sub_23BBB4198(v66, (uint64_t)v19, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    uint64_t v80 = MEMORY[0x263F1B720];
    uint64_t v81 = MEMORY[0x263F1B718];
    sub_23BBDC1F0();
    sub_23BB56600((uint64_t)v19);
    swift_release();
    sub_23BBB4208((uint64_t)v135, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetRectangularView);
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v47, v44, v79);
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v134, v47, v79);
    swift_storeEnumTagMultiPayload();
    uint64_t v136 = v80;
    uint64_t v137 = v81;
    swift_getOpaqueTypeConformance2();
    uint64_t v82 = (uint64_t)v129;
    sub_23BBDBED0();
    sub_23BBB4268(v82, v130, (uint64_t (*)(void))sub_23BB73E9C);
    swift_storeEnumTagMultiPayload();
    sub_23BB7661C();
    sub_23BBDBED0();
    uint64_t v61 = v47;
    goto LABEL_23;
  }
  if (((1 << v68) & 0xC2) != 0)
  {
    uint64_t v135 = v58;
    sub_23BBB4268((uint64_t)v55, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
    uint64_t v83 = swift_getKeyPath();
    uint64_t v84 = v122;
    uint64_t *v122 = v83;
    *((unsigned char *)v84 + 8) = 0;
    sub_23BB78F3C((uint64_t)v33, (uint64_t)v84 + *(int *)(v125 + 20));
    sub_23BBB4268((uint64_t)v84, v124, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetRectangularView);
    sub_23BBB42D0(&qword_268A7E148, (void (*)(uint64_t))type metadata accessor for GreetingSleepWidgetRectangularView);
    uint64_t v136 = sub_23BBDC3C0();
    id v85 = (id)HKSPSleepURL();
    if (v85)
    {
      uint64_t v86 = v85;
      uint64_t v87 = (uint64_t)v118;
      sub_23BBDB7C0();

      uint64_t v88 = sub_23BBDB7D0();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 0, 1, v88);
    }
    else
    {
      uint64_t v96 = sub_23BBDB7D0();
      uint64_t v87 = (uint64_t)v118;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v118, 1, 1, v96);
    }
    uint64_t v82 = (uint64_t)v129;
    uint64_t v97 = v130;
    uint64_t v79 = v126;
    uint64_t v98 = v119;
    sub_23BBB4198(v87, v119, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    uint64_t v99 = MEMORY[0x263F1B720];
    uint64_t v100 = MEMORY[0x263F1B718];
    sub_23BBDC1F0();
    sub_23BB56600(v98);
    swift_release();
    sub_23BBB4208((uint64_t)v122, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetRectangularView);
    uint64_t v101 = v135;
    uint64_t v102 = v52;
    uint64_t v78 = v131;
    (*(void (**)(uint64_t *, char *, uint64_t))(v131 + 32))(v135, v102, v79);
    (*(void (**)(char *, uint64_t *, uint64_t))(v78 + 16))(v134, v101, v79);
    swift_storeEnumTagMultiPayload();
    uint64_t v136 = v99;
    uint64_t v137 = v100;
    swift_getOpaqueTypeConformance2();
    sub_23BBDBED0();
    sub_23BBB4268(v82, v97, (uint64_t (*)(void))sub_23BB73E9C);
    goto LABEL_20;
  }
  if (((1 << v68) & 0xC) == 0)
  {
    if (((1 << v68) & 0x30) != 0)
    {
      uint64_t v69 = v59;
      uint64_t v135 = v57;
      uint64_t v70 = v55;
      sub_23BBB4268((uint64_t)v55, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
      LOBYTE(v70) = *((unsigned char *)v70 + *(int *)(v31 + 28));
      uint64_t v71 = swift_getKeyPath();
      uint64_t v72 = v121;
      *uint64_t v121 = v71;
      *((unsigned char *)v72 + 8) = 0;
      sub_23BB78F3C((uint64_t)v33, (uint64_t)v72 + *(int *)(v34 + 20));
      *((unsigned char *)v72 + *(int *)(v34 + 24)) = (_BYTE)v70;
      sub_23BBB4268((uint64_t)v72, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for OccurrenceSleepWidgetRectangularView);
      sub_23BBB42D0(&qword_268A7E258, (void (*)(uint64_t))type metadata accessor for OccurrenceSleepWidgetRectangularView);
      uint64_t v136 = sub_23BBDC3C0();
      id v73 = (id)HKSPSleepURL();
      if (v73)
      {
        int v74 = v73;
        uint64_t v75 = (uint64_t)v116;
        sub_23BBDB7C0();

        uint64_t v76 = sub_23BBDB7D0();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 0, 1, v76);
      }
      else
      {
        uint64_t v103 = sub_23BBDB7D0();
        uint64_t v75 = (uint64_t)v116;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56))(v116, 1, 1, v103);
      }
      uint64_t v82 = (uint64_t)v129;
      uint64_t v104 = v130;
      uint64_t v79 = v126;
      uint64_t v78 = v131;
      uint64_t v105 = v117;
      sub_23BBB4198(v75, v117, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      uint64_t v106 = MEMORY[0x263F1B720];
      uint64_t v107 = MEMORY[0x263F1B718];
      sub_23BBDC1F0();
      sub_23BB56600(v105);
      swift_release();
      sub_23BBB4208((uint64_t)v121, (uint64_t (*)(void))type metadata accessor for OccurrenceSleepWidgetRectangularView);
      uint64_t v101 = v135;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v78 + 32))(v135, v69, v79);
      (*(void (**)(char *, uint64_t *, uint64_t))(v78 + 16))(v134, v101, v79);
      swift_storeEnumTagMultiPayload();
      uint64_t v136 = v106;
      uint64_t v137 = v107;
      swift_getOpaqueTypeConformance2();
      sub_23BBDBED0();
      sub_23BBB4268(v82, v104, (uint64_t (*)(void))sub_23BB73E9C);
LABEL_20:
      swift_storeEnumTagMultiPayload();
      sub_23BB7661C();
      sub_23BBDBED0();
      uint64_t v61 = (char *)v101;
      goto LABEL_23;
    }
    goto LABEL_2;
  }
  uint64_t v89 = v56;
  sub_23BBB4268((uint64_t)v55, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  uint64_t v90 = swift_getKeyPath();
  uint64_t v91 = v120;
  *unint64_t v120 = v90;
  *((unsigned char *)v91 + 8) = 0;
  sub_23BB78F3C((uint64_t)v33, (uint64_t)v91 + *(int *)(v34 + 20));
  *((unsigned char *)v91 + *(int *)(v34 + 24)) = 3;
  sub_23BBB4268((uint64_t)v91, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for OccurrenceSleepWidgetRectangularView);
  sub_23BBB42D0(&qword_268A7E258, (void (*)(uint64_t))type metadata accessor for OccurrenceSleepWidgetRectangularView);
  uint64_t v136 = sub_23BBDC3C0();
  id v92 = (id)HKSPSleepURL();
  if (v92)
  {
    uint64_t v93 = v92;
    uint64_t v94 = (uint64_t)v114;
    sub_23BBDB7C0();

    uint64_t v95 = sub_23BBDB7D0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v94, 0, 1, v95);
  }
  else
  {
    uint64_t v108 = sub_23BBDB7D0();
    uint64_t v94 = (uint64_t)v114;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v114, 1, 1, v108);
  }
  uint64_t v82 = (uint64_t)v129;
  uint64_t v79 = v126;
  uint64_t v78 = v131;
  uint64_t v109 = v115;
  sub_23BBB4198(v94, v115, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v110 = MEMORY[0x263F1B720];
  uint64_t v111 = MEMORY[0x263F1B718];
  sub_23BBDC1F0();
  sub_23BB56600(v109);
  swift_release();
  sub_23BBB4208((uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OccurrenceSleepWidgetRectangularView);
  (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v61, v89, v79);
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v134, v61, v79);
  swift_storeEnumTagMultiPayload();
  uint64_t v136 = v110;
  uint64_t v137 = v111;
  swift_getOpaqueTypeConformance2();
  sub_23BBDBED0();
  sub_23BBB4268(v82, v130, (uint64_t (*)(void))sub_23BB73E9C);
  swift_storeEnumTagMultiPayload();
  sub_23BB7661C();
  sub_23BBDBED0();
LABEL_23:
  sub_23BBB4208(v82, (uint64_t (*)(void))sub_23BB73E9C);
  return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v61, v79);
}

uint64_t sub_23BBB2DB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v126 = a1;
  uint64_t v112 = type metadata accessor for BedtimeSleepWidgetCircularView();
  uint64_t v2 = MEMORY[0x270FA5388](v112);
  uint64_t v111 = (uint64_t)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v113 = (uint64_t)&v107 - v4;
  uint64_t v120 = type metadata accessor for GreetingSleepWidgetCircularView();
  uint64_t v5 = MEMORY[0x270FA5388](v120);
  uint64_t v118 = (uint64_t)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v119 = (uint64_t)&v107 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v117 = (uint64_t)&v107 - v9;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_23BBB431C(0, &qword_26AEBCA10, (uint64_t (*)(uint64_t))sub_23BB73E9C, MEMORY[0x263F19B20]);
  uint64_t v122 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v125 = (uint64_t)&v107 - v12;
  sub_23BBB431C(0, &qword_26AEBCA00, (uint64_t (*)(uint64_t))sub_23BB73F14, v10);
  uint64_t v127 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v128 = (char *)&v107 - v14;
  sub_23BB73E9C(0);
  uint64_t v123 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v124 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBB4134(0, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v107 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v109 = (char *)&v107 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v110 = (uint64_t)&v107 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v114 = (char *)&v107 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v115 = (uint64_t)&v107 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v107 = (char *)&v107 - v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v108 = (uint64_t)&v107 - v34;
  uint64_t v35 = type metadata accessor for UpcomingSleepWidgetCircularView();
  uint64_t v36 = MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)&v107 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  uint64_t v116 = (uint64_t)&v107 - v39;
  sub_23BB73F14();
  uint64_t v121 = v40;
  uint64_t v129 = *(void *)(v40 - 8);
  uint64_t v41 = MEMORY[0x270FA5388](v1);
  uint64_t v43 = (char *)&v107 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = MEMORY[0x270FA5388](v41);
  uint64_t v46 = (char *)&v107 - v45;
  uint64_t v47 = MEMORY[0x270FA5388](v44);
  uint64_t v48 = MEMORY[0x270FA5388](v47);
  uint64_t v49 = MEMORY[0x270FA5388](v48);
  uint64_t v51 = (char *)&v107 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49);
  uint64_t v53 = MEMORY[0x270FA5388](v52);
  uint64_t v55 = (char *)&v107 - v54;
  uint64_t v56 = (uint64_t *)MEMORY[0x270FA5388](v53);
  uint64_t v61 = (char *)&v107 - v60;
  if ((*(unsigned char *)(v1 + 8) & 1) != 0 || (uint64_t v66 = *v56, (unint64_t)*v56 > 7))
  {
LABEL_2:
    uint64_t v62 = v118;
    sub_23BBB4268((uint64_t)v56, v118, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
    sub_23BBB4268(v62, v119, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetCircularView);
    sub_23BBB42D0(&qword_26AEBC858, (void (*)(uint64_t))type metadata accessor for GreetingSleepWidgetCircularView);
    uint64_t v130 = sub_23BBDC3C0();
    id v63 = (id)HKSPSleepURL();
    if (v63)
    {
      id v64 = v63;
      sub_23BBDB7C0();

      uint64_t v65 = sub_23BBDB7D0();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v20, 0, 1, v65);
    }
    else
    {
      uint64_t v73 = sub_23BBDB7D0();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v20, 1, 1, v73);
    }
    sub_23BBB4198((uint64_t)v20, (uint64_t)v23, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    uint64_t v74 = MEMORY[0x263F1B720];
    uint64_t v75 = MEMORY[0x263F1B718];
    sub_23BBDC1F0();
    sub_23BB56600((uint64_t)v23);
    swift_release();
    sub_23BBB4208(v62, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetCircularView);
    uint64_t v76 = v129;
    uint64_t v77 = v121;
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v46, v43, v121);
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v128, v46, v77);
    swift_storeEnumTagMultiPayload();
    uint64_t v130 = v74;
    uint64_t v131 = v75;
    swift_getOpaqueTypeConformance2();
    uint64_t v78 = (uint64_t)v124;
    sub_23BBDBED0();
    sub_23BBB4268(v78, v125, (uint64_t (*)(void))sub_23BB73E9C);
    swift_storeEnumTagMultiPayload();
    sub_23BB7661C();
    sub_23BBDBED0();
    uint64_t v61 = v46;
    goto LABEL_22;
  }
  if (((1 << v66) & 0xC2) != 0)
  {
    uint64_t v118 = v58;
    uint64_t v79 = v117;
    sub_23BBB4268((uint64_t)v56, v117, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
    sub_23BBB4268(v79, v119, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetCircularView);
    sub_23BBB42D0(&qword_26AEBC858, (void (*)(uint64_t))type metadata accessor for GreetingSleepWidgetCircularView);
    uint64_t v130 = sub_23BBDC3C0();
    id v80 = (id)HKSPSleepURL();
    if (v80)
    {
      uint64_t v81 = v80;
      uint64_t v82 = (uint64_t)v114;
      sub_23BBDB7C0();

      uint64_t v83 = sub_23BBDB7D0();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v82, 0, 1, v83);
    }
    else
    {
      uint64_t v89 = sub_23BBDB7D0();
      uint64_t v82 = (uint64_t)v114;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v114, 1, 1, v89);
    }
    uint64_t v78 = (uint64_t)v124;
    uint64_t v90 = v125;
    uint64_t v77 = v121;
    uint64_t v91 = v115;
    sub_23BBB4198(v82, v115, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    uint64_t v92 = MEMORY[0x263F1B720];
    uint64_t v93 = MEMORY[0x263F1B718];
    sub_23BBDC1F0();
    sub_23BB56600(v91);
    swift_release();
    sub_23BBB4208(v117, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetCircularView);
    uint64_t v76 = v129;
    uint64_t v94 = v118;
    (*(void (**)(uint64_t, char *, uint64_t))(v129 + 32))(v118, v51, v77);
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v128, v94, v77);
    swift_storeEnumTagMultiPayload();
    uint64_t v130 = v92;
    uint64_t v131 = v93;
    swift_getOpaqueTypeConformance2();
    sub_23BBDBED0();
    sub_23BBB4268(v78, v90, (uint64_t (*)(void))sub_23BB73E9C);
    swift_storeEnumTagMultiPayload();
    sub_23BB7661C();
    sub_23BBDBED0();
    uint64_t v61 = (char *)v94;
  }
  else
  {
    if (((1 << v66) & 0xC) == 0)
    {
      if (((1 << v66) & 0x30) != 0)
      {
        uint64_t v67 = v59;
        uint64_t v120 = v57;
        uint64_t v68 = v113;
        sub_23BBB4268((uint64_t)v56, v113, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
        sub_23BBB4268(v68, v111, (uint64_t (*)(void))type metadata accessor for BedtimeSleepWidgetCircularView);
        sub_23BBB42D0(&qword_268A7E2F8, (void (*)(uint64_t))type metadata accessor for BedtimeSleepWidgetCircularView);
        uint64_t v130 = sub_23BBDC3C0();
        id v69 = (id)HKSPSleepURL();
        if (v69)
        {
          uint64_t v70 = v69;
          uint64_t v71 = (uint64_t)v109;
          sub_23BBDB7C0();

          uint64_t v72 = sub_23BBDB7D0();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v71, 0, 1, v72);
        }
        else
        {
          uint64_t v95 = sub_23BBDB7D0();
          uint64_t v71 = (uint64_t)v109;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v109, 1, 1, v95);
        }
        uint64_t v78 = (uint64_t)v124;
        uint64_t v96 = v125;
        uint64_t v77 = v121;
        uint64_t v97 = v110;
        sub_23BBB4198(v71, v110, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        uint64_t v98 = MEMORY[0x263F1B720];
        uint64_t v99 = MEMORY[0x263F1B718];
        sub_23BBDC1F0();
        sub_23BB56600(v97);
        swift_release();
        sub_23BBB4208(v68, (uint64_t (*)(void))type metadata accessor for BedtimeSleepWidgetCircularView);
        uint64_t v76 = v129;
        uint64_t v100 = (char *)v120;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 32))(v120, v67, v77);
        (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v128, v100, v77);
        swift_storeEnumTagMultiPayload();
        uint64_t v130 = v98;
        uint64_t v131 = v99;
        swift_getOpaqueTypeConformance2();
        sub_23BBDBED0();
        sub_23BBB4268(v78, v96, (uint64_t (*)(void))sub_23BB73E9C);
        swift_storeEnumTagMultiPayload();
        sub_23BB7661C();
        sub_23BBDBED0();
        uint64_t v61 = v100;
        goto LABEL_22;
      }
      goto LABEL_2;
    }
    uint64_t v84 = v116;
    sub_23BBB4268((uint64_t)v56, v116, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
    sub_23BBB4268(v84, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for UpcomingSleepWidgetCircularView);
    sub_23BBB42D0(&qword_268A7E300, (void (*)(uint64_t))type metadata accessor for UpcomingSleepWidgetCircularView);
    uint64_t v130 = sub_23BBDC3C0();
    id v85 = (id)HKSPSleepURL();
    if (v85)
    {
      uint64_t v86 = v85;
      uint64_t v87 = (uint64_t)v107;
      sub_23BBDB7C0();

      uint64_t v88 = sub_23BBDB7D0();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 0, 1, v88);
    }
    else
    {
      uint64_t v101 = sub_23BBDB7D0();
      uint64_t v87 = (uint64_t)v107;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v107, 1, 1, v101);
    }
    uint64_t v78 = (uint64_t)v124;
    uint64_t v102 = v125;
    uint64_t v77 = v121;
    uint64_t v103 = v108;
    sub_23BBB4198(v87, v108, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    uint64_t v104 = MEMORY[0x263F1B720];
    uint64_t v105 = MEMORY[0x263F1B718];
    sub_23BBDC1F0();
    sub_23BB56600(v103);
    swift_release();
    sub_23BBB4208(v116, (uint64_t (*)(void))type metadata accessor for UpcomingSleepWidgetCircularView);
    uint64_t v76 = v129;
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v61, v55, v77);
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v128, v61, v77);
    swift_storeEnumTagMultiPayload();
    uint64_t v130 = v104;
    uint64_t v131 = v105;
    swift_getOpaqueTypeConformance2();
    sub_23BBDBED0();
    sub_23BBB4268(v78, v102, (uint64_t (*)(void))sub_23BB73E9C);
    swift_storeEnumTagMultiPayload();
    sub_23BB7661C();
    sub_23BBDBED0();
  }
LABEL_22:
  sub_23BBB4208(v78, (uint64_t (*)(void))sub_23BB73E9C);
  return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v61, v77);
}

uint64_t sub_23BBB3F4C()
{
  return sub_23BBDBCD0();
}

uint64_t sub_23BBB3F70()
{
  return sub_23BBDBCD0();
}

uint64_t sub_23BBB3F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23BBB4024(a1, a2, a3, a4, MEMORY[0x263F18D80], MEMORY[0x263F19318]);
}

uint64_t sub_23BBB3FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23BBB4024(a1, a2, a3, a4, MEMORY[0x263F18D80], MEMORY[0x263F19318]);
}

uint64_t sub_23BBB4000()
{
  return sub_23BBDBD50();
}

uint64_t sub_23BBB4024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  MEMORY[0x270FA5388]();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_23BBB40F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23BBB4024(a1, a2, a3, a4, MEMORY[0x263F07690], MEMORY[0x263F19590]);
}

void sub_23BBB4134(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BBB4198(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_23BBB4134(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_23BBB4208(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BBB4268(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BBB42D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BBB431C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BBB4384(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = *(int *)(v4 + 20);
    unint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = v6[6];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *(unsigned char *)(a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    uint64_t v19 = v6[8];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v49 = *(void (**)(void *, const void *, uint64_t))(v23 + 16);
    v49(v20, v21, v22);
    uint64_t v24 = v6[9];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(void *)(a1 + v24) = v25;
    uint64_t v26 = v6[10];
    uint64_t v27 = (void *)(a1 + v26);
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    id v30 = v25;
    if (v29)
    {
      uint64_t v32 = *(void **)(v28 + 8);
      uint64_t v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = v6[11];
    uint64_t v36 = (void *)(a1 + v35);
    uint64_t v37 = (char *)a2 + v35;
    uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v49(v36, v37, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = v6[12];
    uint64_t v41 = (void *)(a1 + v40);
    uint64_t v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v49(v41, v42, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = v6[13];
    uint64_t v45 = (void *)(a1 + v44);
    uint64_t v46 = (char *)a2 + v44;
    if (v38(v46, 1, v22))
    {
      sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v49(v45, v46, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t sub_23BBB4924(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v46 = *(void (**)(void *, const void *, uint64_t))(v20 + 16);
  v46(v17, v18, v19);
  uint64_t v21 = v4[9];
  uint64_t v22 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v22;
  uint64_t v23 = v4[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(a2 + v23);
  id v27 = v22;
  if (v26)
  {
    uint64_t v29 = *(void **)(v25 + 8);
    uint64_t v28 = *(void **)(v25 + 16);
    void *v24 = v26;
    v24[1] = v29;
    v24[2] = v28;
    swift_bridgeObjectRetain();
    id v30 = v29;
    id v31 = v28;
  }
  else
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    v24[2] = *(void *)(v25 + 16);
  }
  uint64_t v32 = v4[11];
  id v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v35((const void *)(a2 + v32), 1, v19))
  {
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    v46(v33, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v33, 0, 1, v19);
  }
  uint64_t v37 = v4[12];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (const void *)(a2 + v37);
  if (v35((const void *)(a2 + v37), 1, v19))
  {
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    v46(v38, v39, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v38, 0, 1, v19);
  }
  uint64_t v41 = v4[13];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (const void *)(a2 + v41);
  if (v35(v43, 1, v19))
  {
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    v46(v42, v43, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v42, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BBB4E74(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
LABEL_13:
  *(unsigned char *)(a1 + v5[7]) = *((unsigned char *)a2 + v5[7]);
  uint64_t v21 = v5[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t)a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v66(v22, v23, v24);
  uint64_t v26 = v5[9];
  id v27 = *(void **)((char *)a2 + v26);
  uint64_t v28 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = v27;
  id v29 = v27;

  uint64_t v30 = v5[10];
  id v31 = (void *)(a1 + v30);
  uint64_t v32 = (long long *)((char *)a2 + v30);
  uint64_t v33 = *(uint64_t *)((char *)a2 + v30);
  if (*(void *)(a1 + v30))
  {
    if (v33)
    {
      void *v31 = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v34 = (void *)v31[1];
      uint64_t v35 = (void *)*((void *)v32 + 1);
      v31[1] = v35;
      id v36 = v35;

      uint64_t v37 = (void *)v31[2];
      uint64_t v38 = (void *)*((void *)v32 + 2);
      v31[2] = v38;
      id v39 = v38;
    }
    else
    {
      sub_23BB547F0(a1 + v30);
      uint64_t v44 = *((void *)v32 + 2);
      *(_OWORD *)id v31 = *v32;
      v31[2] = v44;
    }
  }
  else if (v33)
  {
    void *v31 = v33;
    uint64_t v40 = (void *)*((void *)v32 + 1);
    v31[1] = v40;
    uint64_t v41 = (void *)*((void *)v32 + 2);
    v31[2] = v41;
    swift_bridgeObjectRetain();
    id v42 = v40;
    id v43 = v41;
  }
  else
  {
    long long v45 = *v32;
    v31[2] = *((void *)v32 + 2);
    *(_OWORD *)id v31 = v45;
  }
  uint64_t v46 = v5[11];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (char *)a2 + v46;
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v50 = v49(a1 + v46, 1, v24);
  int v51 = v49((uint64_t)v48, 1, v24);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v47, v48, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
LABEL_27:
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_28;
  }
  v66((uint64_t)v47, (uint64_t)v48, v24);
LABEL_28:
  uint64_t v53 = v5[12];
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (char *)a2 + v53;
  int v56 = v49(a1 + v53, 1, v24);
  int v57 = v49((uint64_t)v55, 1, v24);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v54, v55, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v54, 0, 1, v24);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v54, v24);
LABEL_33:
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_34;
  }
  v66((uint64_t)v54, (uint64_t)v55, v24);
LABEL_34:
  uint64_t v59 = v5[13];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (char *)a2 + v59;
  int v62 = v49(a1 + v59, 1, v24);
  int v63 = v49((uint64_t)v61, 1, v24);
  if (!v62)
  {
    if (!v63)
    {
      v66((uint64_t)v60, (uint64_t)v61, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v60, v24);
    goto LABEL_39;
  }
  if (v63)
  {
LABEL_39:
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v60, v61, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v60, 0, 1, v24);
  return a1;
}

uint64_t sub_23BBB5618(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  uint64_t v17 = (void *)(a1 + v16);
  int v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(void *, const void *, uint64_t))(v20 + 32);
  v21(v17, v18, v19);
  *(void *)(a1 + v4[9]) = *(void *)(a2 + v4[9]);
  uint64_t v22 = v4[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  uint64_t v25 = v4[11];
  uint64_t v26 = (void *)(a1 + v25);
  id v27 = (const void *)(a2 + v25);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v40(a2 + v25, 1, v19))
  {
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v21(v26, v27, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  }
  uint64_t v29 = v4[12];
  uint64_t v30 = (void *)(a1 + v29);
  id v31 = (const void *)(a2 + v29);
  if (v40(a2 + v29, 1, v19))
  {
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    uint64_t v33 = v21;
  }
  else
  {
    id v34 = v31;
    uint64_t v33 = v21;
    v21(v30, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v30, 0, 1, v19);
  }
  uint64_t v35 = v4[13];
  id v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  if (v40((uint64_t)v37, 1, v19))
  {
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v33(v36, v37, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v36, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BBB5B40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v6, v7, v8);
LABEL_7:
  uint64_t v14 = v4[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  int v17 = v10((void *)(a1 + v14), 1, v8);
  int v18 = v10(v16, 1, v8);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v15, v16, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v15, v8);
LABEL_12:
    sub_23BBB66EC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v15, v16, v8);
LABEL_13:
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v20 = v4[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = sub_23BBDB860();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v52(v21, v22, v23);
  uint64_t v25 = v4[9];
  uint64_t v26 = *(void **)(a1 + v25);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);

  uint64_t v27 = v4[10];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  if (*(void *)(a1 + v27))
  {
    if (*v29)
    {
      *uint64_t v28 = *v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = (void *)v28[1];
      v28[1] = v29[1];

      id v31 = (void *)v28[2];
      v28[2] = v29[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v28);
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  v28[2] = v29[2];
LABEL_18:
  uint64_t v32 = v4[11];
  uint64_t v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v36 = v35(a1 + v32, 1, v23);
  int v37 = v35((uint64_t)v34, 1, v23);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v33, v34, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v33, 0, 1, v23);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v33, v23);
LABEL_23:
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_24;
  }
  v52((uint64_t)v33, (uint64_t)v34, v23);
LABEL_24:
  uint64_t v39 = v4[12];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (const void *)(a2 + v39);
  int v42 = v35(a1 + v39, 1, v23);
  int v43 = v35((uint64_t)v41, 1, v23);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v40, v41, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v40, 0, 1, v23);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v40, v23);
LABEL_29:
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_30;
  }
  v52((uint64_t)v40, (uint64_t)v41, v23);
LABEL_30:
  uint64_t v45 = v4[13];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (const void *)(a2 + v45);
  int v48 = v35(a1 + v45, 1, v23);
  int v49 = v35((uint64_t)v47, 1, v23);
  if (!v48)
  {
    if (!v49)
    {
      v52((uint64_t)v46, (uint64_t)v47, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v46, v23);
    goto LABEL_35;
  }
  if (v49)
  {
LABEL_35:
    sub_23BBB66EC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v46, v47, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v46, 0, 1, v23);
  return a1;
}

uint64_t sub_23BBB6294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBB62A8);
}

uint64_t sub_23BBB62A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_23BBB6314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBB6328);
}

uint64_t sub_23BBB6328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for BedtimeSleepWidgetCircularView()
{
  uint64_t result = qword_26AEBC848;
  if (!qword_26AEBC848) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BBB63E4(uint64_t a1)
{
  uint64_t result = sub_23BBB66A4(&qword_268A7E2F8, (void (*)(uint64_t))type metadata accessor for BedtimeSleepWidgetCircularView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BBB643C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBB6458@<X0>(uint64_t a1@<X8>)
{
  v7[0] = a1;
  uint64_t v1 = sub_23BBDC510();
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = sub_23BBDBB40();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB30();
  sub_23BBDBAF0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  v7[1] = MEMORY[0x263F8EE78];
  sub_23BBB66A4(&qword_26AEBCB18, MEMORY[0x263F46300]);
  sub_23BBB66EC(0, &qword_26AEBCB50, MEMORY[0x263F46300], MEMORY[0x263F8D488]);
  sub_23BB5827C();
  swift_bridgeObjectRetain();
  sub_23BBDC9B0();
  return sub_23BBDC500();
}

uint64_t sub_23BBB66A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BBB66EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *sub_23BBB6750(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
    uint64_t v7 = v6[5];
    unint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    int v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = v6[6];
    uint64_t v16 = (char *)v4 + v15;
    int v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *((unsigned char *)v4 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    uint64_t v19 = v6[8];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v58(v20, v21, v22);
    uint64_t v24 = v6[9];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(void *)((char *)v4 + v24) = v25;
    uint64_t v26 = v6[10];
    uint64_t v27 = (void *)((char *)v4 + v26);
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    id v30 = v25;
    if (v29)
    {
      uint64_t v32 = *(void **)(v28 + 8);
      id v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = v6[11];
    int v36 = (char *)v4 + v35;
    int v37 = (char *)a2 + v35;
    uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v58(v36, (uint64_t)v37, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = v6[12];
    uint64_t v41 = (char *)v4 + v40;
    int v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v58(v41, (uint64_t)v42, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = v6[13];
    uint64_t v45 = (char *)v4 + v44;
    uint64_t v46 = (char *)a2 + v44;
    if (v38((char *)a2 + v44, 1, v22))
    {
      sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v58(v45, (uint64_t)v46, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
    uint64_t v48 = *(int *)(a3 + 20);
    int v49 = (void *)((char *)v4 + v48);
    uint64_t v50 = (uint64_t *)((char *)a2 + v48);
    sub_23BB6DBD8(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v51 = sub_23BBDBC50();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v51 - 8) + 16))(v49, v50, v51);
    }
    else
    {
      *int v49 = *v50;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v52 = *(int *)(a3 + 24);
    uint64_t v53 = (void *)((char *)v4 + v52);
    uint64_t v54 = (uint64_t *)((char *)a2 + v52);
    sub_23BBB6E84(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v55 = sub_23BBDB890();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v55 - 8) + 16))(v53, v54, v55);
    }
    else
    {
      *uint64_t v53 = *v54;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

void sub_23BBB6E20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_23BBB6E84(uint64_t a1)
{
}

uint64_t sub_23BBB6EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = a1 + v4[5];
  uint64_t v6 = sub_23BBDB6D0();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[6];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = a1 + v4[8];
  uint64_t v11 = sub_23BBDB860();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);

  uint64_t v14 = a1 + v4[10];
  if (*(void *)v14)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + v4[11];
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v16(v15, 1, v11)) {
    v13(v15, v11);
  }
  uint64_t v17 = a1 + v4[12];
  if (!v16(v17, 1, v11)) {
    v13(v17, v11);
  }
  uint64_t v18 = a1 + v4[13];
  if (!v16(v18, 1, v11)) {
    v13(v18, v11);
  }
  uint64_t v19 = a1 + *(int *)(a2 + 20);
  sub_23BB6DBD8(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_23BBDBC50();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  }
  else
  {
    swift_release();
  }
  uint64_t v21 = a1 + *(int *)(a2 + 24);
  sub_23BBB6E84(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = sub_23BBDB890();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
    return v23(v21, v22);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_23BBB7210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v17 = v5[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  int v56 = *(void (**)(void *, const void *, uint64_t))(v21 + 16);
  v56(v18, v19, v20);
  uint64_t v22 = v5[9];
  uint64_t v23 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v23;
  uint64_t v24 = v5[10];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = a2 + v24;
  uint64_t v27 = *(void *)(a2 + v24);
  id v28 = v23;
  if (v27)
  {
    id v30 = *(void **)(v26 + 8);
    uint64_t v29 = *(void **)(v26 + 16);
    *uint64_t v25 = v27;
    v25[1] = v30;
    v25[2] = v29;
    swift_bridgeObjectRetain();
    id v31 = v30;
    id v32 = v29;
  }
  else
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    v25[2] = *(void *)(v26 + 16);
  }
  uint64_t v33 = v5[11];
  id v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  int v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v36(a2 + v33, 1, v20))
  {
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v56(v34, v35, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v34, 0, 1, v20);
  }
  uint64_t v38 = v5[12];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (const void *)(a2 + v38);
  if (v36(a2 + v38, 1, v20))
  {
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v56(v39, v40, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v39, 0, 1, v20);
  }
  uint64_t v42 = v5[13];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (const void *)(a2 + v42);
  if (v36(a2 + v42, 1, v20))
  {
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    v56(v43, v44, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v43, 0, 1, v20);
  }
  uint64_t v46 = *(int *)(a3 + 20);
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (void *)(a2 + v46);
  sub_23BB6DBD8(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v49 = sub_23BBDBC50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
  }
  else
  {
    void *v47 = *v48;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v50 = *(int *)(a3 + 24);
  uint64_t v51 = (void *)(a1 + v50);
  uint64_t v52 = (void *)(a2 + v50);
  sub_23BBB6E84(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v53 = sub_23BBDB890();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
  }
  else
  {
    void *v51 = *v52;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23BBB7890(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v5;
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = v6[5];
  unint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_23BBDB6D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = v6[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  int v19 = v12((void *)(a1 + v16), 1, v10);
  int v20 = v12(v18, 1, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_12:
    sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v17, v18, v10);
LABEL_13:
  *(unsigned char *)(a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
  uint64_t v22 = v6[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t)a2 + v22;
  uint64_t v25 = sub_23BBDB860();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 24);
  v76(v23, v24, v25);
  uint64_t v27 = v6[9];
  id v28 = *(void **)((char *)a2 + v27);
  uint64_t v29 = *(void **)(a1 + v27);
  *(void *)(a1 + v27) = v28;
  id v30 = v28;

  uint64_t v31 = v6[10];
  id v32 = (void *)(a1 + v31);
  uint64_t v33 = (long long *)((char *)a2 + v31);
  uint64_t v34 = *(uint64_t *)((char *)a2 + v31);
  if (*(void *)(a1 + v31))
  {
    if (v34)
    {
      void *v32 = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v35 = (void *)v32[1];
      int v36 = (void *)*((void *)v33 + 1);
      v32[1] = v36;
      id v37 = v36;

      uint64_t v38 = (void *)v32[2];
      uint64_t v39 = (void *)*((void *)v33 + 2);
      v32[2] = v39;
      id v40 = v39;
    }
    else
    {
      sub_23BB547F0(a1 + v31);
      uint64_t v45 = *((void *)v33 + 2);
      *(_OWORD *)id v32 = *v33;
      v32[2] = v45;
    }
  }
  else if (v34)
  {
    void *v32 = v34;
    uint64_t v41 = (void *)*((void *)v33 + 1);
    v32[1] = v41;
    uint64_t v42 = (void *)*((void *)v33 + 2);
    v32[2] = v42;
    swift_bridgeObjectRetain();
    id v43 = v41;
    id v44 = v42;
  }
  else
  {
    long long v46 = *v33;
    v32[2] = *((void *)v33 + 2);
    *(_OWORD *)id v32 = v46;
  }
  uint64_t v47 = v6[11];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  int v51 = v50(a1 + v47, 1, v25);
  int v52 = v50((uint64_t)v49, 1, v25);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v48, v49, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v48, 0, 1, v25);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v48, v25);
LABEL_27:
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_28;
  }
  v76((uint64_t)v48, (uint64_t)v49, v25);
LABEL_28:
  uint64_t v54 = v6[12];
  uint64_t v55 = (void *)(a1 + v54);
  int v56 = (char *)a2 + v54;
  int v57 = v50(a1 + v54, 1, v25);
  int v58 = v50((uint64_t)v56, 1, v25);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v55, v56, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v55, 0, 1, v25);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v55, v25);
LABEL_33:
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_34;
  }
  v76((uint64_t)v55, (uint64_t)v56, v25);
LABEL_34:
  uint64_t v60 = v6[13];
  uint64_t v61 = (void *)(a1 + v60);
  int v62 = (char *)a2 + v60;
  int v63 = v50(a1 + v60, 1, v25);
  int v64 = v50((uint64_t)v62, 1, v25);
  if (v63)
  {
    uint64_t v65 = a3;
    if (!v64)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v61, v62, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v61, 0, 1, v25);
      if ((uint64_t *)a1 == a2) {
        return a1;
      }
      goto LABEL_41;
    }
LABEL_40:
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
    if ((uint64_t *)a1 == a2) {
      return a1;
    }
    goto LABEL_41;
  }
  uint64_t v65 = a3;
  if (v64)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v61, v25);
    goto LABEL_40;
  }
  v76((uint64_t)v61, (uint64_t)v62, v25);
  if ((uint64_t *)a1 == a2) {
    return a1;
  }
LABEL_41:
  uint64_t v67 = *(int *)(v65 + 20);
  uint64_t v68 = (void *)(a1 + v67);
  id v69 = (uint64_t *)((char *)a2 + v67);
  sub_23BBB81B8(a1 + v67, (uint64_t (*)(void))sub_23BB6DBD8);
  sub_23BB6DBD8(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v70 = sub_23BBDBC50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v70 - 8) + 16))(v68, v69, v70);
  }
  else
  {
    *uint64_t v68 = *v69;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v71 = *(int *)(v65 + 24);
  uint64_t v72 = (void *)(a1 + v71);
  uint64_t v73 = (uint64_t *)((char *)a2 + v71);
  sub_23BBB81B8(a1 + v71, (uint64_t (*)(void))sub_23BBB6E84);
  sub_23BBB6E84(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v74 = sub_23BBDB890();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v74 - 8) + 16))(v72, v73, v74);
  }
  else
  {
    *uint64_t v72 = *v73;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23BBB81B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BBB8218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[6];
  int v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v17 = v5[8];
  uint64_t v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(void *, const void *, uint64_t))(v21 + 32);
  v22(v18, v19, v20);
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  uint64_t v23 = v5[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  uint64_t v26 = v5[11];
  uint64_t v27 = (void *)(a1 + v26);
  id v28 = (const void *)(a2 + v26);
  int v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v52(a2 + v26, 1, v20))
  {
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v22(v27, v28, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v27, 0, 1, v20);
  }
  uint64_t v30 = v5[12];
  uint64_t v31 = (void *)(a1 + v30);
  id v32 = (const void *)(a2 + v30);
  if (v52(a2 + v30, 1, v20))
  {
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    uint64_t v34 = v21;
  }
  else
  {
    v22(v31, v32, v20);
    uint64_t v34 = v21;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v31, 0, 1, v20);
  }
  uint64_t v35 = v5[13];
  int v36 = (void *)(a1 + v35);
  id v37 = (const void *)(a2 + v35);
  if (v52(a2 + v35, 1, v20))
  {
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v22(v36, v37, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v20);
  }
  uint64_t v39 = *(int *)(a3 + 20);
  id v40 = (void *)(a1 + v39);
  uint64_t v41 = (const void *)(a2 + v39);
  sub_23BB6DBD8(0);
  uint64_t v43 = v42;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v44 = sub_23BBDBC50();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v44 - 8) + 32))(v40, v41, v44);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
  }
  uint64_t v45 = *(int *)(a3 + 24);
  long long v46 = (void *)(a1 + v45);
  uint64_t v47 = (const void *)(a2 + v45);
  sub_23BBB6E84(0);
  uint64_t v49 = v48;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v50 = sub_23BBDB890();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v50 - 8) + 32))(v46, v47, v50);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BBB8880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BBB6E20(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v16, v17, v9);
LABEL_13:
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v21 = v5[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  v66(v22, v23, v24);
  uint64_t v26 = v5[9];
  uint64_t v27 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);

  uint64_t v28 = v5[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  if (*(void *)(a1 + v28))
  {
    if (*v30)
    {
      *uint64_t v29 = *v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = (void *)v29[1];
      v29[1] = v30[1];

      id v32 = (void *)v29[2];
      v29[2] = v30[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v29);
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  v29[2] = v30[2];
LABEL_18:
  uint64_t v33 = v5[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  int v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v37 = v36(a1 + v33, 1, v24);
  int v38 = v36((uint64_t)v35, 1, v24);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v34, v35, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, v24);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v34, v24);
LABEL_23:
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_24;
  }
  v66((uint64_t)v34, (uint64_t)v35, v24);
LABEL_24:
  uint64_t v40 = v5[12];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (const void *)(a2 + v40);
  int v43 = v36(a1 + v40, 1, v24);
  int v44 = v36((uint64_t)v42, 1, v24);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v41, v42, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v41, 0, 1, v24);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v41, v24);
LABEL_29:
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_30;
  }
  v66((uint64_t)v41, (uint64_t)v42, v24);
LABEL_30:
  uint64_t v46 = v5[13];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (const void *)(a2 + v46);
  int v49 = v36(a1 + v46, 1, v24);
  int v50 = v36((uint64_t)v48, 1, v24);
  if (v49)
  {
    uint64_t v51 = a3;
    if (!v50)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v47, v48, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
      if (a1 == a2) {
        return a1;
      }
      goto LABEL_37;
    }
LABEL_36:
    sub_23BBB6E20(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    if (a1 == a2) {
      return a1;
    }
    goto LABEL_37;
  }
  uint64_t v51 = a3;
  if (v50)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
    goto LABEL_36;
  }
  v66((uint64_t)v47, (uint64_t)v48, v24);
  if (a1 == a2) {
    return a1;
  }
LABEL_37:
  uint64_t v53 = *(int *)(v51 + 20);
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (const void *)(a2 + v53);
  sub_23BBB81B8(a1 + v53, (uint64_t (*)(void))sub_23BB6DBD8);
  sub_23BB6DBD8(0);
  uint64_t v57 = v56;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v58 = sub_23BBDBC50();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v58 - 8) + 32))(v54, v55, v58);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v54, v55, *(void *)(*(void *)(v57 - 8) + 64));
  }
  uint64_t v59 = *(int *)(v51 + 24);
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (const void *)(a2 + v59);
  sub_23BBB81B8(a1 + v59, (uint64_t (*)(void))sub_23BBB6E84);
  sub_23BBB6E84(0);
  uint64_t v63 = v62;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v64 = sub_23BBDB890();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v64 - 8) + 32))(v60, v61, v64);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v60, v61, *(void *)(*(void *)(v63 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BBB9168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBB917C);
}

uint64_t sub_23BBB917C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_23BBB6E20(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  sub_23BBB6E20(0, &qword_268A7DC78, MEMORY[0x263F07690], MEMORY[0x263F185D0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t sub_23BBB9328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBB933C);
}

uint64_t sub_23BBB933C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  sub_23BBB6E20(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  sub_23BBB6E20(0, &qword_268A7DC78, MEMORY[0x263F07690], MEMORY[0x263F185D0]);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for UpcomingSleepWidgetView()
{
  uint64_t result = qword_26AEBB810;
  if (!qword_26AEBB810) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_23BBB9540()
{
  type metadata accessor for SleepWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_23BB6DBD8(319);
    if (v1 <= 0x3F)
    {
      sub_23BBB6E84(319);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_23BBB9644()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBB9660@<X0>(uint64_t a1@<X8>)
{
  sub_23BB6D268();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBBAFE0();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBBB69C();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = sub_23BBDBE60();
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  sub_23BBBB7A0();
  sub_23BBB999C(v1, &v8[*(int *)(v14 + 44)]);
  uint64_t v15 = *MEMORY[0x263F18CC8];
  uint64_t v16 = sub_23BBDBC50();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v5, v15, v16);
  sub_23BBBB358(&qword_26AEBB9C8, MEMORY[0x263F18D80]);
  uint64_t result = sub_23BBDC6C0();
  if (result)
  {
    sub_23BBBB358(&qword_268A7E380, (void (*)(uint64_t))sub_23BBBAFE0);
    sub_23BBBB358(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
    sub_23BBDC240();
    sub_23BBB81B8((uint64_t)v5, (uint64_t (*)(void))sub_23BB6D268);
    sub_23BBB81B8((uint64_t)v8, (uint64_t (*)(void))sub_23BBBAFE0);
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a1, v13, v10);
    sub_23BBBB810();
    uint64_t v20 = (uint64_t *)(a1 + *(int *)(v19 + 36));
    *uint64_t v20 = KeyPath;
    v20[1] = 0x3FE0000000000000;
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23BBB999C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  v173 = a2;
  sub_23BBBB424(0);
  uint64_t v171 = v3;
  MEMORY[0x270FA5388](v3);
  v170 = (char *)&v155 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBBB3A0();
  uint64_t v185 = v5;
  uint64_t v172 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  v184 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v169 = (char *)&v155 - v9;
  MEMORY[0x270FA5388](v8);
  v183 = (char *)&v155 - v10;
  uint64_t v164 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v11 = MEMORY[0x270FA5388](v164);
  uint64_t v166 = (uint64_t)&v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v160 = (uint64_t (*)(uint64_t))((char *)&v155 - v13);
  uint64_t v165 = type metadata accessor for ScheduleOccurrenceSectionView(0);
  uint64_t v14 = MEMORY[0x270FA5388](v165);
  v167 = (char *)&v155 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v162 = (char *)&v155 - v16;
  sub_23BB6D420();
  v180 = v17;
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v182 = (uint64_t)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v163 = (uint64_t)&v155 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v168 = (uint64_t)&v155 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v161 = (uint64_t)&v155 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v194 = (uint64_t)&v155 - v26;
  sub_23BB6D268();
  uint64_t v159 = v27;
  MEMORY[0x270FA5388](v27);
  v178 = (char *)&v155 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = sub_23BBDBC50();
  uint64_t v195 = *(void *)(v186 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v186);
  v187 = (char *)&v155 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  id v32 = (char *)&v155 - v31;
  uint64_t v33 = type metadata accessor for HeaderView(0);
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (uint64_t *)((char *)&v155 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BB812D8(0);
  uint64_t v175 = v36;
  MEMORY[0x270FA5388](v36);
  uint64_t v189 = (uint64_t)&v155 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB8129C(0);
  uint64_t v177 = v38;
  MEMORY[0x270FA5388](v38);
  v176 = (uint64_t (*)(void))((char *)&v155 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BBBB164();
  uint64_t v193 = v40;
  uint64_t v192 = *(void *)(v40 - 8);
  uint64_t v41 = MEMORY[0x270FA5388](v40);
  v181 = (char *)&v155 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  uint64_t v157 = (char *)&v155 - v44;
  MEMORY[0x270FA5388](v43);
  v191 = (char *)&v155 - v45;
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  uint64_t v46 = sub_23BBDB740();
  uint64_t v48 = v47;
  *uint64_t v35 = swift_getKeyPath();
  sub_23BBB6E20(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  int v49 = (uint64_t *)((char *)v35 + *(int *)(v33 + 20));
  *int v49 = v46;
  v49[1] = v48;
  LODWORD(v174) = sub_23BBDBFD0();
  uint64_t v190 = a1 + *(int *)(type metadata accessor for UpcomingSleepWidgetView() + 20);
  sub_23BB781C0((uint64_t)v32);
  uint64_t v50 = *MEMORY[0x263F18D70];
  uint64_t v158 = a1;
  uint64_t v51 = v195;
  uint64_t v53 = v195 + 104;
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v195 + 104);
  uint64_t v54 = v187;
  uint64_t v55 = v186;
  v52(v187, v50, v186);
  sub_23BBDBC40();
  uint64_t v56 = *(void (**)(char *, uint64_t))(v51 + 8);
  uint64_t v57 = v54;
  uint64_t v58 = v32;
  v56(v57, v55);
  uint64_t v195 = v51 + 8;
  v179 = (void (*)(uint64_t, uint64_t))v56;
  v56(v32, v55);
  sub_23BBDBBB0();
  uint64_t v60 = v59;
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v67 = v189;
  sub_23BBBB8A4((uint64_t)v35, v189, type metadata accessor for HeaderView);
  uint64_t v68 = v67 + *(int *)(v175 + 36);
  *(unsigned char *)uint64_t v68 = (_BYTE)v174;
  *(void *)(v68 + 8) = v60;
  *(void *)(v68 + 16) = v62;
  *(void *)(v68 + 24) = v64;
  *(void *)(v68 + 32) = v66;
  *(unsigned char *)(v68 + 40) = 0;
  sub_23BBB81B8((uint64_t)v35, type metadata accessor for HeaderView);
  char v69 = sub_23BBDBFC0();
  sub_23BBDBBB0();
  uint64_t v71 = v70;
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  uint64_t v78 = v176;
  sub_23BBBB8A4(v67, (uint64_t)v176, (uint64_t (*)(void))sub_23BB812D8);
  uint64_t v79 = (char *)v78 + *(int *)(v177 + 36);
  *uint64_t v79 = v69;
  *((void *)v79 + 1) = v71;
  *((void *)v79 + 2) = v73;
  *((void *)v79 + 3) = v75;
  *((void *)v79 + 4) = v77;
  v79[40] = 0;
  sub_23BBB81B8(v67, (uint64_t (*)(void))sub_23BB812D8);
  uint64_t v80 = (uint64_t)v178;
  uint64_t v189 = v53;
  v188 = (void (*)(char *))v52;
  v52(v178, v50, v55);
  sub_23BBBB358(&qword_26AEBB9C8, MEMORY[0x263F18D80]);
  uint64_t result = sub_23BBDC6C0();
  if (result)
  {
    sub_23BBBB2D4(&qword_26AEBC450, sub_23BB8129C, (void (*)(void))sub_23BB8153C);
    sub_23BBBB358(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
    uint64_t v82 = v157;
    sub_23BBDC240();
    sub_23BBB81B8(v80, (uint64_t (*)(void))sub_23BB6D268);
    sub_23BBB81B8((uint64_t)v78, (uint64_t (*)(void))sub_23BB8129C);
    (*(void (**)(char *, char *, uint64_t))(v192 + 32))(v191, v82, v193);
    v176 = (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel;
    uint64_t v83 = (uint64_t)v58;
    uint64_t v84 = v158;
    id v85 = v160;
    sub_23BBBB8A4(v158, (uint64_t)v160, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
    BOOL v86 = sub_23BBBAC7C();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v88 = (int *)v165;
    uint64_t v89 = (uint64_t)v162;
    *(void *)&v162[*(int *)(v165 + 28)] = KeyPath;
    sub_23BB6DBD8(0);
    uint64_t v175 = v90;
    swift_storeEnumTagMultiPayload();
    v174 = type metadata accessor for SleepWidgetViewModel;
    sub_23BBBB914((uint64_t)v85, v89, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
    *(unsigned char *)(v89 + v88[5]) = 3;
    *(void *)(v89 + v88[6]) = v86;
    LOBYTE(v85) = sub_23BBDBFD0();
    sub_23BB781C0(v83);
    LODWORD(v178) = *MEMORY[0x263F18CB8];
    uint64_t v156 = v83;
    uint64_t v91 = v187;
    uint64_t v92 = v186;
    v188(v187);
    uint64_t v177 = sub_23BBBB358(&qword_26AEBB9C0, MEMORY[0x263F18D80]);
    sub_23BBDC6B0();
    uint64_t v93 = v179;
    v179((uint64_t)v91, v92);
    v93(v83, v92);
    sub_23BBDBBB0();
    uint64_t v95 = v94;
    uint64_t v97 = v96;
    uint64_t v99 = v98;
    uint64_t v101 = v100;
    uint64_t v160 = type metadata accessor for ScheduleOccurrenceSectionView;
    uint64_t v102 = v161;
    sub_23BBBB8A4(v89, v161, type metadata accessor for ScheduleOccurrenceSectionView);
    uint64_t v103 = v102 + *((int *)v180 + 9);
    *(unsigned char *)uint64_t v103 = (_BYTE)v85;
    *(void *)(v103 + 8) = v95;
    *(void *)(v103 + 16) = v97;
    *(void *)(v103 + 24) = v99;
    *(void *)(v103 + 32) = v101;
    *(unsigned char *)(v103 + 40) = 0;
    sub_23BBB81B8(v89, type metadata accessor for ScheduleOccurrenceSectionView);
    sub_23BBBB914(v102, v194, (uint64_t (*)(void))sub_23BB6D420);
    uint64_t v104 = sub_23BBDC410();
    sub_23BBD4A24(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v198, 0.0, 1, 7.0, 0, v104, v105, 0, 0);
    uint64_t v106 = v166;
    sub_23BBBB8A4(v84, v166, v176);
    char v107 = *(unsigned char *)(v84 + *(int *)(v164 + 28));
    uint64_t v108 = sub_23BBBAC7C();
    uint64_t v109 = swift_getKeyPath();
    uint64_t v110 = (uint64_t)v167;
    *(void *)&v167[v88[7]] = v109;
    swift_storeEnumTagMultiPayload();
    sub_23BBBB914(v106, v110, (uint64_t (*)(void))v174);
    *(unsigned char *)(v110 + v88[5]) = v107;
    *(void *)(v110 + v88[6]) = v108;
    LOBYTE(v108) = sub_23BBDBFD0();
    sub_23BBDBBB0();
    uint64_t v112 = v111;
    uint64_t v114 = v113;
    uint64_t v116 = v115;
    uint64_t v118 = v117;
    uint64_t v119 = v163;
    sub_23BBBB8A4(v110, v163, v160);
    uint64_t v120 = v119 + *((int *)v180 + 9);
    *(unsigned char *)uint64_t v120 = v108;
    *(void *)(v120 + 8) = v112;
    *(void *)(v120 + 16) = v114;
    *(void *)(v120 + 24) = v116;
    *(void *)(v120 + 32) = v118;
    *(unsigned char *)(v120 + 40) = 0;
    sub_23BBB81B8(v110, type metadata accessor for ScheduleOccurrenceSectionView);
    uint64_t v121 = v168;
    sub_23BBBB914(v119, v168, (uint64_t (*)(void))sub_23BB6D420);
    uint64_t v122 = v182;
    v176 = (uint64_t (*)(void))sub_23BB6D420;
    sub_23BBBB8A4(v121, v182, (uint64_t (*)(void))sub_23BB6D420);
    long long v123 = v198[5];
    uint64_t v124 = (uint64_t)v170;
    *((_OWORD *)v170 + 4) = v198[4];
    *(_OWORD *)(v124 + 80) = v123;
    long long v125 = v198[7];
    *(_OWORD *)(v124 + 96) = v198[6];
    *(_OWORD *)(v124 + 112) = v125;
    long long v126 = v198[1];
    *(_OWORD *)uint64_t v124 = v198[0];
    *(_OWORD *)(v124 + 16) = v126;
    long long v127 = v198[3];
    *(_OWORD *)(v124 + 32) = v198[2];
    *(_OWORD *)(v124 + 48) = v127;
    *(void *)(v124 + 128) = 0x3FF0000000000000;
    sub_23BBBB48C();
    sub_23BBBB8A4(v122, v124 + *(int *)(v128 + 48), (uint64_t (*)(void))sub_23BB6D420);
    v180 = sub_23BB6D420;
    sub_23BBB81B8(v121, (uint64_t (*)(void))sub_23BB6D420);
    sub_23BBB81B8(v122, (uint64_t (*)(void))sub_23BB6D420);
    uint64_t v129 = v156;
    sub_23BB781C0(v156);
    uint64_t v130 = v91;
    ((void (*)(char *, void, uint64_t))v188)(v91, v178, v92);
    sub_23BBDC6B0();
    uint64_t v131 = v179;
    v179((uint64_t)v91, v92);
    v131(v129, v92);
    sub_23BBBB5FC();
    uint64_t v132 = v169;
    sub_23BBDC1D0();
    sub_23BBB81B8(v124, (uint64_t (*)(void))sub_23BBBB424);
    uint64_t v133 = v172;
    uint64_t v134 = v183;
    (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v183, v132, v185);
    sub_23BB781C0(v129);
    ((void (*)(char *, void, uint64_t))v188)(v130, v178, v92);
    LODWORD(v190) = sub_23BBDC6B0();
    v131((uint64_t)v130, v92);
    v131(v129, v92);
    uint64_t v135 = *(void (**)(char *, char *, uint64_t))(v192 + 16);
    uint64_t v136 = v181;
    uint64_t v137 = v193;
    v135(v181, v191, v193);
    char v197 = 0;
    uint64_t v138 = v182;
    uint64_t v139 = v176;
    sub_23BBBB8A4(v194, v182, v176);
    uint64_t v195 = *(void *)(v133 + 16);
    uint64_t v140 = v134;
    uint64_t v141 = v185;
    ((void (*)(char *, char *, uint64_t))v195)(v184, v140, v185);
    char v196 = v190 & 1;
    uint64_t v142 = v173;
    v135(v173, v136, v137);
    sub_23BBBB0A8();
    uint64_t v144 = v143;
    uint64_t v145 = &v142[*(int *)(v143 + 48)];
    char v146 = v197;
    *(void *)uint64_t v145 = 0;
    v145[8] = v146;
    sub_23BBBB8A4(v138, (uint64_t)&v142[*(int *)(v143 + 64)], v139);
    uint64_t v147 = v184;
    ((void (*)(char *, char *, uint64_t))v195)(&v142[*(int *)(v144 + 80)], v184, v141);
    uint64_t v148 = &v142[*(int *)(v144 + 96)];
    char v149 = v196;
    *(void *)uint64_t v148 = 0;
    v148[8] = 0;
    v148[9] = v149;
    uint64_t v150 = *(void (**)(char *, uint64_t))(v133 + 8);
    uint64_t v151 = v141;
    v150(v183, v141);
    uint64_t v152 = v180;
    sub_23BBB81B8(v194, (uint64_t (*)(void))v180);
    uint64_t v153 = *(void (**)(char *, uint64_t))(v192 + 8);
    uint64_t v154 = v193;
    v153(v191, v193);
    v150(v147, v151);
    sub_23BBB81B8(v138, (uint64_t (*)(void))v152);
    return ((uint64_t (*)(char *, uint64_t))v153)(v181, v154);
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_23BBBAC7C()
{
  uint64_t v1 = sub_23BBDB890();
  uint64_t v24 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v22 = (uint64_t)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_23BBDBC50();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v21 = type metadata accessor for UpcomingSleepWidgetView();
  uint64_t v10 = *(int *)(v21 + 20);
  uint64_t v23 = v0;
  uint64_t v11 = v0 + v10;
  sub_23BB781C0((uint64_t)v9);
  uint64_t v12 = *(void (**)(char *, void, uint64_t))(v4 + 104);
  v12(v7, *MEMORY[0x263F18CB8], v3);
  sub_23BBBB358(&qword_26AEBB9C0, MEMORY[0x263F18D80]);
  char v13 = sub_23BBDC6B0();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v7, v3);
  v14(v9, v3);
  if ((v13 & 1) == 0)
  {
    uint64_t v20 = v11;
    uint64_t v16 = v22;
    sub_23BB784B8(v22);
    char v17 = sub_23BBDB880();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v16, v25);
    if (v17) {
      return 0;
    }
    sub_23BB781C0((uint64_t)v9);
    v12(v7, *MEMORY[0x263F18D10], v3);
    char v18 = sub_23BBDC6B0();
    v14(v7, v3);
    v14(v9, v3);
    return (v18 & 1) != 0;
  }
  sub_23BB781C0((uint64_t)v9);
  v12(v7, *MEMORY[0x263F18D38], v3);
  char v15 = sub_23BBDC6B0();
  v14(v7, v3);
  v14(v9, v3);
  return (v15 & 1) == 0;
}

void sub_23BBBAFE0()
{
  if (!qword_268A7E308)
  {
    sub_23BBBB074(255);
    sub_23BBBB358(&qword_268A7E370, sub_23BBBB074);
    unint64_t v0 = sub_23BBDC3A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E308);
    }
  }
}

void sub_23BBBB074(uint64_t a1)
{
}

void sub_23BBBB0A8()
{
  if (!qword_268A7E318)
  {
    sub_23BBBB164();
    uint64_t v0 = MEMORY[0x263F1B6B0];
    sub_23BB6D420();
    sub_23BBBB3A0();
    sub_23BB70EF8(255, (unint64_t *)&qword_268A7DCA0, v0, MEMORY[0x263F8D8F0]);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v2) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_268A7E318);
    }
  }
}

void sub_23BBBB164()
{
  if (!qword_268A7E320)
  {
    sub_23BB8129C(255);
    sub_23BB6D268();
    sub_23BBBB2D4(&qword_26AEBC450, sub_23BB8129C, (void (*)(void))sub_23BB8153C);
    sub_23BBBB358(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7E320);
    }
  }
}

void sub_23BBBB268(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_23BBBB2D4(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BBBB358(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BBBB3A0()
{
  if (!qword_268A7E328)
  {
    sub_23BBBB424(255);
    sub_23BBBB5FC();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7E328);
    }
  }
}

void sub_23BBBB424(uint64_t a1)
{
}

void sub_23BBBB458(uint64_t a1)
{
}

void sub_23BBBB48C()
{
  if (!qword_268A7E340)
  {
    sub_23BBBB4FC();
    sub_23BB6D420();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268A7E340);
    }
  }
}

void sub_23BBBB4FC()
{
  if (!qword_268A7E348)
  {
    sub_23BBBB59C();
    sub_23BBBB268(255, &qword_268A7E358, MEMORY[0x263F19E60], MEMORY[0x263F19E58], MEMORY[0x263F19DC0]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E348);
    }
  }
}

void sub_23BBBB59C()
{
  if (!qword_268A7E350)
  {
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E350);
    }
  }
}

unint64_t sub_23BBBB5FC()
{
  unint64_t result = qword_268A7E360;
  if (!qword_268A7E360)
  {
    sub_23BBBB424(255);
    sub_23BBBB358(&qword_268A7E368, sub_23BBBB458);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E360);
  }
  return result;
}

void sub_23BBBB69C()
{
  if (!qword_268A7E378)
  {
    sub_23BBBAFE0();
    sub_23BB6D268();
    sub_23BBBB358(&qword_268A7E380, (void (*)(uint64_t))sub_23BBBAFE0);
    sub_23BBBB358(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7E378);
    }
  }
}

void sub_23BBBB7A0()
{
  if (!qword_268A7E388)
  {
    sub_23BBBB074(255);
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E388);
    }
  }
}

void sub_23BBBB810()
{
  if (!qword_268A7E390)
  {
    sub_23BBBB69C();
    sub_23BB70EF8(255, (unint64_t *)&qword_26AEBBA28, MEMORY[0x263F8EF38], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E390);
    }
  }
}

uint64_t sub_23BBBB8A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BBBB914(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_23BBBB980()
{
  unint64_t result = qword_268A7E398;
  if (!qword_268A7E398)
  {
    sub_23BBBB810();
    sub_23BBBAFE0();
    sub_23BB6D268();
    sub_23BBBB358(&qword_268A7E380, (void (*)(uint64_t))sub_23BBBAFE0);
    sub_23BBBB358(&qword_26AEBBB40, (void (*)(uint64_t))sub_23BB6D268);
    swift_getOpaqueTypeConformance2();
    sub_23BB83010();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E398);
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStageEmptyView()
{
  return &type metadata for SleepStageEmptyView;
}

uint64_t sub_23BBBBAB8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBBBAD4()
{
  return MEMORY[0x270F73658](4);
}

unint64_t sub_23BBBBAE0()
{
  unint64_t result = qword_26AEBC0D0;
  if (!qword_26AEBC0D0)
  {
    sub_23BBDBB60();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC0D0);
  }
  return result;
}

uint64_t sub_23BBBBB38(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = *(int *)(v4 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = v6[6];
    uint64_t v16 = (void *)(a1 + v15);
    char v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *(unsigned char *)(a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    uint64_t v19 = v6[8];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    int v49 = *(void (**)(void *, const void *, uint64_t))(v23 + 16);
    v49(v20, v21, v22);
    uint64_t v24 = v6[9];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(void *)(a1 + v24) = v25;
    uint64_t v26 = v6[10];
    uint64_t v27 = (void *)(a1 + v26);
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v26);
    id v30 = v25;
    if (v29)
    {
      id v32 = *(void **)(v28 + 8);
      uint64_t v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = v6[11];
    uint64_t v36 = (void *)(a1 + v35);
    uint64_t v37 = (char *)a2 + v35;
    uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v49(v36, v37, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = v6[12];
    uint64_t v41 = (void *)(a1 + v40);
    uint64_t v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v49(v41, v42, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = v6[13];
    uint64_t v45 = (void *)(a1 + v44);
    uint64_t v46 = (char *)a2 + v44;
    if (v38(v46, 1, v22))
    {
      sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v49(v45, v46, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t sub_23BBBC0D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  char v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v46 = *(void (**)(void *, const void *, uint64_t))(v20 + 16);
  v46(v17, v18, v19);
  uint64_t v21 = v4[9];
  uint64_t v22 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v22;
  uint64_t v23 = v4[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(a2 + v23);
  id v27 = v22;
  if (v26)
  {
    uint64_t v29 = *(void **)(v25 + 8);
    uint64_t v28 = *(void **)(v25 + 16);
    void *v24 = v26;
    v24[1] = v29;
    v24[2] = v28;
    swift_bridgeObjectRetain();
    id v30 = v29;
    id v31 = v28;
  }
  else
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    v24[2] = *(void *)(v25 + 16);
  }
  uint64_t v32 = v4[11];
  id v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v35((const void *)(a2 + v32), 1, v19))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    v46(v33, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v33, 0, 1, v19);
  }
  uint64_t v37 = v4[12];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (const void *)(a2 + v37);
  if (v35((const void *)(a2 + v37), 1, v19))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    v46(v38, v39, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v38, 0, 1, v19);
  }
  uint64_t v41 = v4[13];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (const void *)(a2 + v41);
  if (v35(v43, 1, v19))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    v46(v42, v43, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v42, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BBBC628(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (void *)(a1 + v15);
  char v17 = (char *)a2 + v15;
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
LABEL_13:
  *(unsigned char *)(a1 + v5[7]) = *((unsigned char *)a2 + v5[7]);
  uint64_t v21 = v5[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t)a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v66(v22, v23, v24);
  uint64_t v26 = v5[9];
  id v27 = *(void **)((char *)a2 + v26);
  uint64_t v28 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = v27;
  id v29 = v27;

  uint64_t v30 = v5[10];
  id v31 = (void *)(a1 + v30);
  uint64_t v32 = (long long *)((char *)a2 + v30);
  uint64_t v33 = *(uint64_t *)((char *)a2 + v30);
  if (*(void *)(a1 + v30))
  {
    if (v33)
    {
      void *v31 = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v34 = (void *)v31[1];
      uint64_t v35 = (void *)*((void *)v32 + 1);
      v31[1] = v35;
      id v36 = v35;

      uint64_t v37 = (void *)v31[2];
      uint64_t v38 = (void *)*((void *)v32 + 2);
      v31[2] = v38;
      id v39 = v38;
    }
    else
    {
      sub_23BB547F0(a1 + v30);
      uint64_t v44 = *((void *)v32 + 2);
      *(_OWORD *)id v31 = *v32;
      v31[2] = v44;
    }
  }
  else if (v33)
  {
    void *v31 = v33;
    uint64_t v40 = (void *)*((void *)v32 + 1);
    v31[1] = v40;
    uint64_t v41 = (void *)*((void *)v32 + 2);
    v31[2] = v41;
    swift_bridgeObjectRetain();
    id v42 = v40;
    id v43 = v41;
  }
  else
  {
    long long v45 = *v32;
    v31[2] = *((void *)v32 + 2);
    *(_OWORD *)id v31 = v45;
  }
  uint64_t v46 = v5[11];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (char *)a2 + v46;
  int v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v50 = v49(a1 + v46, 1, v24);
  int v51 = v49((uint64_t)v48, 1, v24);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v47, v48, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
LABEL_27:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_28;
  }
  v66((uint64_t)v47, (uint64_t)v48, v24);
LABEL_28:
  uint64_t v53 = v5[12];
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (char *)a2 + v53;
  int v56 = v49(a1 + v53, 1, v24);
  int v57 = v49((uint64_t)v55, 1, v24);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v54, v55, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v54, 0, 1, v24);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v54, v24);
LABEL_33:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_34;
  }
  v66((uint64_t)v54, (uint64_t)v55, v24);
LABEL_34:
  uint64_t v59 = v5[13];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (char *)a2 + v59;
  int v62 = v49(a1 + v59, 1, v24);
  int v63 = v49((uint64_t)v61, 1, v24);
  if (!v62)
  {
    if (!v63)
    {
      v66((uint64_t)v60, (uint64_t)v61, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v60, v24);
    goto LABEL_39;
  }
  if (v63)
  {
LABEL_39:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v60, v61, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v60, 0, 1, v24);
  return a1;
}

uint64_t sub_23BBBCDCC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = v4[6];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10((const void *)(a2 + v12), 1, v8))
  {
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v16 = v4[8];
  char v17 = (void *)(a1 + v16);
  int v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_23BBDB860();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(void *, const void *, uint64_t))(v20 + 32);
  v21(v17, v18, v19);
  *(void *)(a1 + v4[9]) = *(void *)(a2 + v4[9]);
  uint64_t v22 = v4[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  uint64_t v25 = v4[11];
  uint64_t v26 = (void *)(a1 + v25);
  id v27 = (const void *)(a2 + v25);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v40(a2 + v25, 1, v19))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v21(v26, v27, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  }
  uint64_t v29 = v4[12];
  uint64_t v30 = (void *)(a1 + v29);
  id v31 = (const void *)(a2 + v29);
  if (v40(a2 + v29, 1, v19))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    uint64_t v33 = v21;
  }
  else
  {
    id v34 = v31;
    uint64_t v33 = v21;
    v21(v30, v34, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v30, 0, 1, v19);
  }
  uint64_t v35 = v4[13];
  id v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  if (v40((uint64_t)v37, 1, v19))
  {
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v33(v36, v37, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v36, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_23BBBD2F4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v6, v7, v8);
LABEL_7:
  uint64_t v14 = v4[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  int v17 = v10((void *)(a1 + v14), 1, v8);
  int v18 = v10(v16, 1, v8);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v15, v16, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v15, v8);
LABEL_12:
    sub_23BB9C9DC(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v15, v16, v8);
LABEL_13:
  *(unsigned char *)(a1 + v4[7]) = *(unsigned char *)(a2 + v4[7]);
  uint64_t v20 = v4[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = sub_23BBDB860();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v52(v21, v22, v23);
  uint64_t v25 = v4[9];
  uint64_t v26 = *(void **)(a1 + v25);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);

  uint64_t v27 = v4[10];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  if (*(void *)(a1 + v27))
  {
    if (*v29)
    {
      *uint64_t v28 = *v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = (void *)v28[1];
      v28[1] = v29[1];

      id v31 = (void *)v28[2];
      v28[2] = v29[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v28);
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  v28[2] = v29[2];
LABEL_18:
  uint64_t v32 = v4[11];
  uint64_t v33 = (void *)(a1 + v32);
  id v34 = (const void *)(a2 + v32);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v36 = v35(a1 + v32, 1, v23);
  int v37 = v35((uint64_t)v34, 1, v23);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v33, v34, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v33, 0, 1, v23);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v33, v23);
LABEL_23:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_24;
  }
  v52((uint64_t)v33, (uint64_t)v34, v23);
LABEL_24:
  uint64_t v39 = v4[12];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (const void *)(a2 + v39);
  int v42 = v35(a1 + v39, 1, v23);
  int v43 = v35((uint64_t)v41, 1, v23);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v40, v41, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v40, 0, 1, v23);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v40, v23);
LABEL_29:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_30;
  }
  v52((uint64_t)v40, (uint64_t)v41, v23);
LABEL_30:
  uint64_t v45 = v4[13];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (const void *)(a2 + v45);
  int v48 = v35(a1 + v45, 1, v23);
  int v49 = v35((uint64_t)v47, 1, v23);
  if (!v48)
  {
    if (!v49)
    {
      v52((uint64_t)v46, (uint64_t)v47, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v46, v23);
    goto LABEL_35;
  }
  if (v49)
  {
LABEL_35:
    sub_23BB9C9DC(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v46, v47, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v46, 0, 1, v23);
  return a1;
}

uint64_t sub_23BBBDA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBBDA5C);
}

uint64_t sub_23BBBDA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_23BBBDAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBBDADC);
}

uint64_t sub_23BBBDADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for GreetingSleepWidgetView()
{
  uint64_t result = qword_26AEBB7A0;
  if (!qword_26AEBB7A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BBBDB98()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBBDBB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_23BBDB860();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for SleepWidgetChartView();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40));
  if (*v11)
  {
    uint64_t v20 = *v11;
    long long v21 = *(_OWORD *)(v11 + 1);
    sub_23BB87600(&v22);
    uint64_t v12 = v22;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v13 = (void *)((char *)v10 + v8[7]);
  uint64_t *v13 = swift_getKeyPath();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BB9C9DC(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = (char *)v10 + v8[8];
  *(void *)uint64_t v15 = swift_getKeyPath();
  v15[8] = 0;
  uint64_t v16 = (void *)((char *)v10 + v8[9]);
  *uint64_t v16 = swift_getKeyPath();
  sub_23BB9C9DC(0, &qword_268A7DDC0, MEMORY[0x263F1A668], v14);
  swift_storeEnumTagMultiPayload();
  int v17 = (char *)v10 + v8[10];
  *(void *)int v17 = swift_getKeyPath();
  v17[8] = 0;
  void *v10 = v12;
  v10[1] = 0;
  sub_23BBDB850();
  uint64_t v18 = sub_23BBDAD00();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10[2] = v18;
  return sub_23BBBE3F4((uint64_t)v10, a2, (uint64_t (*)(void))type metadata accessor for SleepWidgetChartView);
}

uint64_t sub_23BBBDE44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](a1 - 8);
  uint64_t v12 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v13 = &protocol witness table for SleepWidgetViewModel;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v11);
  sub_23BBBE01C(v2, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for SleepWidgetViewModel);
  sub_23BBBE01C(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetView);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  sub_23BBBE3F4((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, (uint64_t (*)(void))type metadata accessor for GreetingSleepWidgetView);
  *(void *)(a2 + 56) = swift_getKeyPath();
  *(unsigned char *)(a2 + 64) = 0;
  uint64_t result = sub_23BBBE3C8(&v11, a2);
  *(void *)(a2 + 40) = sub_23BBBE354;
  *(void *)(a2 + 48) = v8;
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_23BBBE01C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BBBE084()
{
  uint64_t v1 = *(void *)(type metadata accessor for GreetingSleepWidgetView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v21 = *(void *)(v1 + 64);
  uint64_t v22 = v0;
  uint64_t v4 = v0 + v3;
  uint64_t v5 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v6 = v0 + v3 + v5[5];
  uint64_t v7 = sub_23BBDB6D0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v5[6];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v11 = v4 + v5[8];
  uint64_t v12 = sub_23BBDB860();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v14(v11, v12);

  uint64_t v15 = v4 + v5[10];
  if (*(void *)v15)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v4 + v5[11];
  int v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v17(v16, 1, v12)) {
    v14(v16, v12);
  }
  uint64_t v18 = v4 + v5[12];
  if (!v17(v18, 1, v12)) {
    v14(v18, v12);
  }
  uint64_t v19 = v4 + v5[13];
  if (!v17(v19, 1, v12)) {
    v14(v19, v12);
  }
  return MEMORY[0x270FA0238](v22, v3 + v21, v2 | 7);
}

uint64_t sub_23BBBE354@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for GreetingSleepWidgetView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_23BBBDBB4(v4, a1);
}

uint64_t sub_23BBBE3C8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_23BBBE3F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BBBE45C()
{
  return sub_23BBBE538(&qword_26AEBC418, (void (*)(uint64_t))sub_23BBBE4A4);
}

void sub_23BBBE4A4()
{
  if (!qword_26AEBC420)
  {
    type metadata accessor for SleepWidgetChartView();
    sub_23BBBE538(&qword_26AEBC428, (void (*)(uint64_t))type metadata accessor for SleepWidgetChartView);
    unint64_t v0 = type metadata accessor for SleepWidgetResultsView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC420);
    }
  }
}

uint64_t sub_23BBBE538(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Calendar.midnight(after:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_23BBDB950();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB88F10();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_23BBDB860();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F07870], v2);
  sub_23BBDB920();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_23BBA2328((uint64_t)v8);
    uint64_t v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    sub_23BBDB8C0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v13, 1, v9);
}

uint64_t *sub_23BBBE7F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23BBC2414(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC5A0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_23BBC2414(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    if (*(void *)v15)
    {
      uint64_t v16 = (void *)*((void *)v15 + 1);
      int v17 = (void *)*((void *)v15 + 2);
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + 1) = v16;
      *((void *)v14 + 2) = v17;
      swift_bridgeObjectRetain();
      id v18 = v16;
      id v19 = v17;
    }
    else
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((void *)v14 + 2) = *((void *)v15 + 2);
    }
    v14[24] = v15[24];
  }
  return a1;
}

void sub_23BBBEA44(uint64_t a1, uint64_t a2)
{
  sub_23BBC2414(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  sub_23BBC2414(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC570();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  if (*(void *)v7)
  {
    swift_bridgeObjectRelease();

    uint64_t v8 = *(void **)(v7 + 16);
  }
}

void *sub_23BBBEBD8(void *a1, void *a2, uint64_t a3)
{
  sub_23BBC2414(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_23BBDC5A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  sub_23BBC2414(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_23BBDC570();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  if (*(void *)v13)
  {
    uint64_t v14 = (void *)*((void *)v13 + 1);
    uint64_t v15 = (void *)*((void *)v13 + 2);
    *(void *)uint64_t v12 = *(void *)v13;
    *((void *)v12 + 1) = v14;
    *((void *)v12 + 2) = v15;
    swift_bridgeObjectRetain();
    id v16 = v14;
    id v17 = v15;
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
  }
  v12[24] = v13[24];
  return a1;
}

void *sub_23BBBEDD8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
    sub_23BBBF084((uint64_t)a1, &qword_26AEBBC40, MEMORY[0x263F1FD10]);
    sub_23BBC2414(0, &qword_26AEBBC40, v6, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    sub_23BBBF084((uint64_t)a1 + v8, &qword_26AEBC950, MEMORY[0x263F1FC90]);
    sub_23BBC2414(0, &qword_26AEBC950, v11, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_23BBDC570();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
    }
    else
    {
      void *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)((char *)a2 + v13);
  if (*(void *)((char *)a1 + v13))
  {
    if (v16)
    {
      *(void *)uint64_t v14 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v17 = (void *)*((void *)v14 + 1);
      id v18 = (void *)*((void *)v15 + 1);
      *((void *)v14 + 1) = v18;
      id v19 = v18;

      uint64_t v20 = (void *)*((void *)v14 + 2);
      uint64_t v21 = (void *)*((void *)v15 + 2);
      *((void *)v14 + 2) = v21;
      id v22 = v21;
    }
    else
    {
      sub_23BB547F0((uint64_t)a1 + v13);
      uint64_t v27 = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((void *)v14 + 2) = v27;
    }
  }
  else if (v16)
  {
    *(void *)uint64_t v14 = v16;
    uint64_t v23 = (void *)*((void *)v15 + 1);
    *((void *)v14 + 1) = v23;
    uint64_t v24 = (void *)*((void *)v15 + 2);
    *((void *)v14 + 2) = v24;
    swift_bridgeObjectRetain();
    id v25 = v23;
    id v26 = v24;
  }
  else
  {
    long long v28 = *(_OWORD *)v15;
    *((void *)v14 + 2) = *((void *)v15 + 2);
    *(_OWORD *)uint64_t v14 = v28;
  }
  v14[24] = v15[24];
  return a1;
}

uint64_t sub_23BBBF084(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_23BBC2414(0, a2, a3, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

char *sub_23BBBF0F4(char *a1, char *a2, uint64_t a3)
{
  sub_23BBC2414(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_23BBDC5A0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  sub_23BBC2414(0, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
  uint64_t v13 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_23BBDC570();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  id v17 = &a2[v15];
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 9) = *(_OWORD *)(v17 + 9);
  return a1;
}

char *sub_23BBBF2D8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
    sub_23BBBF084((uint64_t)a1, &qword_26AEBBC40, MEMORY[0x263F1FD10]);
    sub_23BBC2414(0, &qword_26AEBBC40, v6, MEMORY[0x263F185C8]);
    uint64_t v8 = v7;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = sub_23BBDC5A0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FC90];
    sub_23BBBF084((uint64_t)&a1[v10], &qword_26AEBC950, MEMORY[0x263F1FC90]);
    sub_23BBC2414(0, &qword_26AEBC950, v13, MEMORY[0x263F185C8]);
    uint64_t v15 = v14;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_23BBDC570();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = (uint64_t)&a1[v17];
  id v19 = &a2[v17];
  if (!*(void *)&a1[v17]) {
    goto LABEL_12;
  }
  if (!*(void *)v19)
  {
    sub_23BB547F0(v18);
LABEL_12:
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    *(void *)(v18 + 16) = *((void *)v19 + 2);
    goto LABEL_13;
  }
  *(void *)uint64_t v18 = *(void *)v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void **)(v18 + 8);
  *(void *)(v18 + 8) = *((void *)v19 + 1);

  uint64_t v21 = *(void **)(v18 + 16);
  *(void *)(v18 + 16) = *((void *)v19 + 2);

LABEL_13:
  *(unsigned char *)(v18 + 24) = v19[24];
  return a1;
}

uint64_t sub_23BBBF548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBBF55C);
}

uint64_t sub_23BBBF55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23BBC2414(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_23BBC2414(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_23BBBF6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBBF6F0);
}

void sub_23BBBF6F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23BBC2414(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    sub_23BBC2414(0, &qword_268A7DAF8, MEMORY[0x263F1FC90], MEMORY[0x263F185D0]);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = a2;
      return;
    }
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SleepStageResultsView(uint64_t a1)
{
  return sub_23BB5D6A4(a1, (uint64_t *)&unk_26AEBC888);
}

void sub_23BBBF880()
{
  sub_23BBC2414(319, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    sub_23BBC2414(319, &qword_26AEBC950, MEMORY[0x263F1FC90], MEMORY[0x263F185C8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_23BBBF9B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBBF9CC(char *a1, uint64_t a2)
{
  uint64_t v32 = a1;
  sub_23BBC2478();
  uint64_t v5 = v4;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v30 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v26 - v8;
  uint64_t v10 = sub_23BBDBA40();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v26 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v29 = v2;
  uint64_t v27 = v17;
  v17(v14, v2, v10);
  uint64_t v18 = (void (*)(uint64_t))MEMORY[0x263F75FB0];
  v26[1] = sub_23BBC2114(&qword_26AEBC840, MEMORY[0x263F75FB0]);
  sub_23BBDC980();
  sub_23BBC2114(&qword_26AEBC838, v18);
  uint64_t v28 = a2;
  char v19 = sub_23BBDC6C0() ^ 1;
  uint64_t v31 = v5;
  uint64_t v20 = &v9[*(int *)(v5 + 48)];
  unsigned char *v9 = v19 & 1;
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    uint64_t v23 = v27;
    uint64_t v22 = v28;
    v27(v20, v28, v10);
    v23(v14, v22, v10);
    sub_23BBDC990();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  }
  else
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v21(v20, v16, v10);
  }
  uint64_t v24 = &v30[*(int *)(v31 + 48)];
  v21(v24, v20, v10);
  v21(v32, v24, v10);
  return v19 & 1;
}

uint64_t sub_23BBBFCC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v131 = a1;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x263F19B20];
  sub_23BBC1DAC(0, &qword_26AEBC480, (uint64_t (*)(uint64_t))type metadata accessor for SleepStageBarView, MEMORY[0x263F19B20]);
  uint64_t v102 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v103 = (uint64_t)&v102 - v4;
  sub_23BBC1D78(0);
  uint64_t v130 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v104 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_23BBC2D40(0, &qword_268A7E3A0, (uint64_t (*)(uint64_t))sub_23BBC1E18, (uint64_t (*)(uint64_t))sub_23BBC1D78, MEMORY[0x263F19B20]);
  uint64_t v127 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v129 = (uint64_t)&v102 - v9;
  sub_23BBC2D40(0, &qword_268A7E3B8, (uint64_t (*)(uint64_t))sub_23BBC1E60, MEMORY[0x263F75FC8], v7);
  uint64_t v124 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v125 = (uint64_t)&v102 - v11;
  sub_23BBC1E18(0);
  uint64_t v128 = v12;
  MEMORY[0x270FA5388](v12);
  long long v126 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_23BBDB890();
  uint64_t v112 = *(void *)(v14 - 8);
  uint64_t v113 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v111 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185D0];
  sub_23BBC2414(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v108 = (uint64_t *)((char *)&v102 - v18);
  sub_23BBC2414(0, &qword_26AEBB9B8, MEMORY[0x263F18D80], v16);
  MEMORY[0x270FA5388](v19 - 8);
  char v107 = (uint64_t *)((char *)&v102 - v20);
  uint64_t v21 = type metadata accessor for SleepStageBarViewModel(0);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v109 = (uint64_t)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for SleepStageBarView();
  uint64_t v23 = MEMORY[0x270FA5388](v118);
  uint64_t v110 = (uint64_t)&v102 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v114 = (uint64_t)&v102 - v25;
  sub_23BBC1DAC(0, &qword_268A7E3C0, (uint64_t (*)(uint64_t))sub_23BBC1E94, v2);
  uint64_t v121 = v26;
  MEMORY[0x270FA5388](v26);
  uint64_t v122 = (uint64_t)&v102 - v27;
  sub_23BBC2D40(0, &qword_26AEBC478, MEMORY[0x263F75FC8], (uint64_t (*)(uint64_t))type metadata accessor for SleepStageBarView, v7);
  uint64_t v115 = v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v116 = (uint64_t)&v102 - v29;
  sub_23BBC1E94(0);
  uint64_t v120 = v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v117 = (char *)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_23BBDC570();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&v102 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_23BBDC5A0();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v39 = (char *)&v102 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_23BBDBA40();
  MEMORY[0x270FA5388](v40 - 8);
  int v42 = (char *)&v102 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_23BBDB9A0();
  MEMORY[0x270FA5388](v43 - 8);
  uint64_t v45 = (char *)&v102 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_23BBDBA50();
  uint64_t v106 = *(void *)(v132 - 8);
  MEMORY[0x270FA5388](v132);
  uint64_t v105 = (char *)&v102 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBC1E60(0);
  uint64_t v123 = v47;
  MEMORY[0x270FA5388](v47);
  uint64_t v119 = (char *)&v102 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = v1 + *(int *)(type metadata accessor for SleepStageResultsView(0) + 24);
  switch(*(unsigned char *)(v49 + 24))
  {
    case 1:
      uint64_t v55 = v109;
      sub_23BBC1B54(v109);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v57 = (uint64_t)v107;
      *char v107 = KeyPath;
      uint64_t v58 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
      uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
      sub_23BBC2414(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
      swift_storeEnumTagMultiPayload();
      uint64_t v60 = swift_getKeyPath();
      uint64_t v61 = (uint64_t)v108;
      *uint64_t v108 = v60;
      int v62 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
      sub_23BBC2414(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], v59);
      swift_storeEnumTagMultiPayload();
      uint64_t v63 = swift_getKeyPath();
      uint64_t v64 = v110;
      sub_23BBC221C(v57, v110, &qword_26AEBB9B8, v58);
      uint64_t v65 = (int *)v118;
      sub_23BBC221C(v61, v64 + *(int *)(v118 + 20), &qword_268A7DAF0, v62);
      uint64_t v66 = (uint64_t *)(v64 + v65[6]);
      *uint64_t v66 = swift_getKeyPath();
      sub_23BBC2414(0, &qword_26AEBC950, MEMORY[0x263F1FC90], v59);
      swift_storeEnumTagMultiPayload();
      uint64_t v67 = v64 + v65[7];
      *(void *)uint64_t v67 = v63;
      *(unsigned char *)(v67 + 8) = 0;
      sub_23BBC22A4(v55, v64 + v65[8], type metadata accessor for SleepStageBarViewModel);
      uint64_t v68 = v65[9];
      sub_23BBC230C();
      char v69 = v111;
      sub_23BBDB870();
      HKSPIsRemoveSpacesForTimeFormatEnabled();
      uint64_t v70 = sub_23BBDC890();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v69, v113);
      *(void *)(v64 + v68) = v70;
      uint64_t v71 = v114;
      sub_23BBC22A4(v64, v114, (uint64_t (*)(void))type metadata accessor for SleepStageBarView);
      sub_23BBC23AC(v71, v116, (uint64_t (*)(void))type metadata accessor for SleepStageBarView);
      swift_storeEnumTagMultiPayload();
      sub_23BBC2114(&qword_26AEBC0C8, MEMORY[0x263F75FC8]);
      sub_23BBC2114(&qword_26AEBC0D8, (void (*)(uint64_t))type metadata accessor for SleepStageBarView);
      uint64_t v72 = (uint64_t)v117;
      sub_23BBDBED0();
      sub_23BBC23AC(v72, v122, (uint64_t (*)(void))sub_23BBC1E94);
      swift_storeEnumTagMultiPayload();
      sub_23BBC203C();
      sub_23BBC1EFC();
      uint64_t v54 = (uint64_t)v119;
      sub_23BBDBED0();
      sub_23BBC234C(v72, (uint64_t (*)(void))sub_23BBC1E94);
      sub_23BBC234C(v71, (uint64_t (*)(void))type metadata accessor for SleepStageBarView);
      goto LABEL_5;
    case 2:
      swift_storeEnumTagMultiPayload();
      sub_23BBC203C();
      sub_23BBC1EFC();
      uint64_t v54 = (uint64_t)v119;
      sub_23BBDBED0();
      goto LABEL_5;
    case 3:
      uint64_t v78 = *(void **)(v49 + 8);
      if (*(void *)v49)
      {
        if (v78 && (objc_msgSend(v78, sel_hasSleepStageData, v102) & 1) != 0)
        {
          sub_23BBC12D8((uint64_t)v45);
          sub_23BB77A10((uint64_t)v39);
          sub_23BB77CD4((uint64_t)v35);
          sub_23BBC1420((uint64_t)v35, (uint64_t)v42);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
          sub_23BBDBA80();
          swift_allocObject();
          sub_23BBDBA70();
          uint64_t v79 = v105;
          sub_23BBDB9B0();
          uint64_t v80 = v106;
          uint64_t v81 = v132;
          (*(void (**)(uint64_t, char *, uint64_t))(v106 + 16))(v125, v79, v132);
          swift_storeEnumTagMultiPayload();
          sub_23BBC2C6C(&qword_268A7E3D0, sub_23BBC1E60, (void (*)(void))sub_23BBC203C, (void (*)(void))sub_23BBC1EFC);
          sub_23BBC2114(&qword_26AEBC0C8, MEMORY[0x263F75FC8]);
          uint64_t v82 = (uint64_t)v126;
          sub_23BBDBED0();
          sub_23BBC23AC(v82, v129, (uint64_t (*)(void))sub_23BBC1E18);
          swift_storeEnumTagMultiPayload();
          sub_23BBC1F50();
          sub_23BBC215C();
          sub_23BBDBED0();
          sub_23BBC234C(v82, (uint64_t (*)(void))sub_23BBC1E18);
          return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v79, v81);
        }
      }
      else
      {
        sub_23BB5646C(0, *(void **)(v49 + 8), *(void **)(v49 + 16));
      }
      if (sub_23BBC1C74())
      {
        uint64_t v83 = v109;
        sub_23BBC1B54(v109);
        uint64_t v84 = swift_getKeyPath();
        uint64_t v85 = (uint64_t)v107;
        *char v107 = v84;
        BOOL v86 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
        uint64_t v87 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
        sub_23BBC2414(0, &qword_26AEBB9B0, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
        swift_storeEnumTagMultiPayload();
        uint64_t v88 = swift_getKeyPath();
        uint64_t v89 = (uint64_t)v108;
        *uint64_t v108 = v88;
        uint64_t v90 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
        sub_23BBC2414(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], v87);
        swift_storeEnumTagMultiPayload();
        uint64_t v91 = swift_getKeyPath();
        uint64_t v92 = v110;
        sub_23BBC221C(v85, v110, &qword_26AEBB9B8, v86);
        uint64_t v93 = (int *)v118;
        sub_23BBC221C(v89, v92 + *(int *)(v118 + 20), &qword_268A7DAF0, v90);
        uint64_t v94 = (uint64_t *)(v92 + v93[6]);
        *uint64_t v94 = swift_getKeyPath();
        sub_23BBC2414(0, &qword_26AEBC950, MEMORY[0x263F1FC90], v87);
        swift_storeEnumTagMultiPayload();
        uint64_t v95 = v92 + v93[7];
        *(void *)uint64_t v95 = v91;
        *(unsigned char *)(v95 + 8) = 0;
        sub_23BBC22A4(v83, v92 + v93[8], type metadata accessor for SleepStageBarViewModel);
        uint64_t v96 = v93[9];
        sub_23BBC230C();
        uint64_t v97 = v111;
        sub_23BBDB870();
        HKSPIsRemoveSpacesForTimeFormatEnabled();
        uint64_t v98 = sub_23BBDC890();
        (*(void (**)(char *, uint64_t))(v112 + 8))(v97, v113);
        *(void *)(v92 + v96) = v98;
        uint64_t v99 = v114;
        sub_23BBC22A4(v92, v114, (uint64_t (*)(void))type metadata accessor for SleepStageBarView);
        sub_23BBC23AC(v99, v103, (uint64_t (*)(void))type metadata accessor for SleepStageBarView);
        swift_storeEnumTagMultiPayload();
        sub_23BBC2114(&qword_26AEBC0D8, (void (*)(uint64_t))type metadata accessor for SleepStageBarView);
        sub_23BBC1EFC();
        uint64_t v100 = (uint64_t)v104;
        sub_23BBDBED0();
        sub_23BBC23AC(v100, v129, (uint64_t (*)(void))sub_23BBC1D78);
        swift_storeEnumTagMultiPayload();
        sub_23BBC1F50();
        sub_23BBC215C();
        sub_23BBDBED0();
        sub_23BBC234C(v100, (uint64_t (*)(void))sub_23BBC1D78);
        uint64_t v75 = (uint64_t (*)(void))type metadata accessor for SleepStageBarView;
        uint64_t v76 = v99;
      }
      else
      {
        swift_storeEnumTagMultiPayload();
        sub_23BBC2114(&qword_26AEBC0D8, (void (*)(uint64_t))type metadata accessor for SleepStageBarView);
        sub_23BBC1EFC();
        uint64_t v101 = (uint64_t)v104;
        sub_23BBDBED0();
        sub_23BBC23AC(v101, v129, (uint64_t (*)(void))sub_23BBC1D78);
        swift_storeEnumTagMultiPayload();
        sub_23BBC1F50();
        sub_23BBC215C();
        sub_23BBDBED0();
        uint64_t v75 = (uint64_t (*)(void))sub_23BBC1D78;
        uint64_t v76 = v101;
      }
      return sub_23BBC234C(v76, v75);
    default:
      sub_23BBC12D8((uint64_t)v45);
      sub_23BB77A10((uint64_t)v39);
      sub_23BB77CD4((uint64_t)v35);
      sub_23BBC1420((uint64_t)v35, (uint64_t)v42);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
      sub_23BBDBA80();
      swift_allocObject();
      sub_23BBDBA70();
      uint64_t v50 = v105;
      sub_23BBDB9B0();
      uint64_t v51 = v106;
      uint64_t v52 = v132;
      (*(void (**)(uint64_t, char *, uint64_t))(v106 + 16))(v116, v50, v132);
      swift_storeEnumTagMultiPayload();
      sub_23BBC2114(&qword_26AEBC0C8, MEMORY[0x263F75FC8]);
      sub_23BBC2114(&qword_26AEBC0D8, (void (*)(uint64_t))type metadata accessor for SleepStageBarView);
      uint64_t v53 = (uint64_t)v117;
      sub_23BBDBED0();
      sub_23BBC23AC(v53, v122, (uint64_t (*)(void))sub_23BBC1E94);
      swift_storeEnumTagMultiPayload();
      sub_23BBC203C();
      sub_23BBC1EFC();
      uint64_t v54 = (uint64_t)v119;
      sub_23BBDBED0();
      sub_23BBC234C(v53, (uint64_t (*)(void))sub_23BBC1E94);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
LABEL_5:
      uint64_t v73 = v129;
      uint64_t v74 = (uint64_t)v126;
      sub_23BBC23AC(v54, v125, (uint64_t (*)(void))sub_23BBC1E60);
      swift_storeEnumTagMultiPayload();
      sub_23BBC2C6C(&qword_268A7E3D0, sub_23BBC1E60, (void (*)(void))sub_23BBC203C, (void (*)(void))sub_23BBC1EFC);
      sub_23BBC2114(&qword_26AEBC0C8, MEMORY[0x263F75FC8]);
      sub_23BBDBED0();
      sub_23BBC23AC(v74, v73, (uint64_t (*)(void))sub_23BBC1E18);
      swift_storeEnumTagMultiPayload();
      sub_23BBC1F50();
      sub_23BBC215C();
      sub_23BBDBED0();
      sub_23BBC234C(v74, (uint64_t (*)(void))sub_23BBC1E18);
      uint64_t v75 = (uint64_t (*)(void))sub_23BBC1E60;
      uint64_t v76 = v54;
      return sub_23BBC234C(v76, v75);
  }
}

uint64_t sub_23BBC12D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_23BBDB9A0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1 + *(int *)(type metadata accessor for SleepStageResultsView(0) + 24);
  if (*(unsigned char *)(v7 + 24) != 2)
  {
    uint64_t v8 = *(void **)(v7 + 8);
    if (*(void *)v7)
    {
      if (v8)
      {
        id v9 = v8;
        sub_23BBDC8D0();

        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v6, v3);
      }
    }
    else
    {
      sub_23BB5646C(0, v8, *(void **)(v7 + 16));
    }
  }
  uint64_t v11 = MEMORY[0x263F8EE78];
  return MEMORY[0x270F73200](v11, 0);
}

uint64_t sub_23BBC1420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v79 = a2;
  uint64_t v68 = a1;
  uint64_t v2 = sub_23BBDC570();
  uint64_t v70 = *(void *)(v2 - 8);
  uint64_t v71 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v60 = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  char v69 = (char *)v58 - v5;
  uint64_t v6 = sub_23BBDBA40();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v75 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v66 = (char *)v58 - v10;
  uint64_t v11 = sub_23BBDC5A0();
  uint64_t v77 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v67 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v58 - v14;
  uint64_t v16 = (uint64_t (*)(uint64_t))MEMORY[0x263F75FB0];
  sub_23BBC2414(0, &qword_26AEBCB68, MEMORY[0x263F75FB0], MEMORY[0x263F8E0F8]);
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v7 + 72);
  uint64_t v76 = v7;
  uint64_t v20 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v21 = (v20 + 32) & ~v20;
  uint64_t v22 = v20 | 7;
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_23BBDD290;
  sub_23BBDB9F0();
  uint64_t v80 = v23;
  uint64_t v24 = sub_23BBC2114(&qword_26AEBC840, MEMORY[0x263F75FB0]);
  sub_23BBC2414(0, &qword_26AEBCB40, v16, MEMORY[0x263F8D488]);
  uint64_t v26 = v25;
  unint64_t v27 = sub_23BB7D680();
  uint64_t v74 = v26;
  unint64_t v28 = v27;
  uint64_t v63 = v6;
  uint64_t v64 = v24;
  sub_23BBDC9B0();
  uint64_t v29 = v77;
  uint64_t v61 = *(void (**)(char *, unint64_t, uint64_t))(v77 + 16);
  uint64_t v62 = v77 + 16;
  v61(v15, v78, v11);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t))(v29 + 88);
  uint64_t v59 = v15;
  uint64_t v65 = v11;
  int v31 = v30(v15, v11);
  int v32 = *MEMORY[0x263F1FD08];
  v58[4] = v19;
  v58[3] = v21;
  v58[2] = v18;
  v58[1] = v22;
  uint64_t v73 = v30;
  int v72 = v32;
  if (v31 == v32)
  {
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_23BBDEF50;
    sub_23BBDBA00();
    sub_23BBDBA10();
    sub_23BBDB9E0();
    uint64_t v80 = v33;
    uint64_t v34 = (uint64_t)v75;
    unint64_t v35 = v28;
    uint64_t v36 = v63;
    sub_23BBDC9B0();
    uint64_t v37 = v66;
    sub_23BBBF9CC(v66, v34);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    v38(v34, v36);
    v38((uint64_t)v37, v36);
    uint64_t v40 = v77;
    unint64_t v39 = v78;
    uint64_t v41 = v65;
  }
  else
  {
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_23BBDD2A0;
    sub_23BBDBA30();
    sub_23BBDBA20();
    uint64_t v80 = v42;
    uint64_t v43 = (uint64_t)v75;
    unint64_t v35 = v28;
    uint64_t v36 = v63;
    sub_23BBDC9B0();
    uint64_t v37 = v66;
    sub_23BBBF9CC(v66, v43);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    v38(v43, v36);
    v38((uint64_t)v37, v36);
    uint64_t v40 = v77;
    uint64_t v41 = v65;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v59, v65);
    unint64_t v39 = v78;
  }
  uint64_t v44 = v67;
  v61(v67, v39, v41);
  int v45 = v73(v44, v41);
  if (v45 == v72 || v45 == *MEMORY[0x263F1FCD8])
  {
    unint64_t v78 = v35;
    uint64_t v51 = v69;
    uint64_t v50 = v70;
    uint64_t v52 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v68, v71);
    uint64_t v53 = v60;
    sub_23BBDC550();
    char v54 = sub_23BBDC540();
    uint64_t v55 = *(void (**)(char *, uint64_t))(v50 + 8);
    v55(v53, v52);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v55)(v51, v52);
    if (v54)
    {
      uint64_t v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = xmmword_23BBDD2A0;
      sub_23BBDB9C0();
      sub_23BBDBA20();
      uint64_t v80 = v56;
      uint64_t v57 = (uint64_t)v75;
      sub_23BBDC9B0();
      sub_23BBBF9CC(v37, v57);
      v38(v57, v36);
      return ((uint64_t (*)(char *, uint64_t))v38)(v37, v36);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v41);
    uint64_t v47 = v69;
    uint64_t v46 = v70;
    uint64_t v48 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v68, v71);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v47, v48);
  }
  return result;
}

uint64_t sub_23BBC1B54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepStageResultsView(0) + 24);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (*(unsigned char *)(v3 + 24) == 2) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void **)(v3 + 8);
  if (!*(void *)v3)
  {
    sub_23BB5646C(0, v5, *(void **)(v3 + 16));
    goto LABEL_6;
  }
  if (!v5)
  {
LABEL_6:
    sub_23BBDB6A0();
    uint64_t result = type metadata accessor for SleepStageBarViewModel(0);
    uint64_t v10 = (uint64_t *)(a1 + *(int *)(result + 20));
    uint64_t *v10 = v4;
    uint64_t v8 = v4;
    goto LABEL_7;
  }
  id v6 = v5;
  sub_23BBDC8C0();
  sub_23BB89E60((uint64_t)&unk_26EF0E608);
  uint64_t v7 = HKSleepDaySummary.segments(_:highlightBehavior:)();
  swift_bridgeObjectRelease();
  _sSo28HKCategoryValueSleepAnalysisV0C8WidgetUIE15hk_asleepValuesShyABGvgZ_0();
  uint64_t v8 = HKSleepDaySummary.segments(_:highlightBehavior:)();
  swift_bridgeObjectRelease();

  uint64_t result = type metadata accessor for SleepStageBarViewModel(0);
  uint64_t v10 = (uint64_t *)(a1 + *(int *)(result + 20));
  uint64_t *v10 = v7;
LABEL_7:
  v10[1] = v8;
  v10[2] = v4;
  v10[3] = v4;
  v10[4] = v4;
  v10[5] = v4;
  return result;
}

BOOL sub_23BBC1C74()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SleepStageResultsView(0) + 24);
  if (*(unsigned char *)(v1 + 24) == 2) {
    return 0;
  }
  id v3 = *(id *)v1;
  uint64_t v2 = *(void **)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 16);
  if (!*(void *)v1)
  {
    sub_23BB5646C(0, *(void **)(v1 + 8), *(void **)(v1 + 16));
    return 0;
  }
  if (!v2) {
    return 0;
  }
  sub_23BB5646C(*(id *)v1, *(void **)(v1 + 8), *(void **)(v1 + 16));
  objc_msgSend(v2, sel_sleepDuration);
  if (v5 > COERCE_DOUBLE(1) && v5 > 0.0)
  {
    sub_23BB564C0((uint64_t)v3, v2, v4);
    return 1;
  }
  objc_msgSend(v2, sel_inBedDuration);
  double v8 = v7;
  sub_23BB564C0((uint64_t)v3, v2, v4);
  return v8 > COERCE_DOUBLE(1) && v8 > 0.0;
}

void sub_23BBC1D78(uint64_t a1)
{
}

void sub_23BBC1DAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, ValueMetadata *))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7, &type metadata for SleepStageEmptyView);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_23BBC1E18(uint64_t a1)
{
}

void sub_23BBC1E60(uint64_t a1)
{
}

void sub_23BBC1E94(uint64_t a1)
{
}

uint64_t type metadata accessor for SleepStageBarViewModel(uint64_t a1)
{
  return sub_23BB5D6A4(a1, qword_26AEBC188);
}

unint64_t sub_23BBC1EFC()
{
  unint64_t result = qword_26AEBC180;
  if (!qword_26AEBC180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC180);
  }
  return result;
}

unint64_t sub_23BBC1F50()
{
  unint64_t result = qword_268A7E3C8;
  if (!qword_268A7E3C8)
  {
    sub_23BBC1E18(255);
    sub_23BBC2C6C(&qword_268A7E3D0, sub_23BBC1E60, (void (*)(void))sub_23BBC203C, (void (*)(void))sub_23BBC1EFC);
    sub_23BBC2114(&qword_26AEBC0C8, MEMORY[0x263F75FC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E3C8);
  }
  return result;
}

unint64_t sub_23BBC203C()
{
  unint64_t result = qword_26AEBC488;
  if (!qword_26AEBC488)
  {
    sub_23BBC1E94(255);
    sub_23BBC2114(&qword_26AEBC0C8, MEMORY[0x263F75FC8]);
    sub_23BBC2114(&qword_26AEBC0D8, (void (*)(uint64_t))type metadata accessor for SleepStageBarView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC488);
  }
  return result;
}

uint64_t sub_23BBC2114(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BBC215C()
{
  unint64_t result = qword_26AEBC498;
  if (!qword_26AEBC498)
  {
    sub_23BBC1D78(255);
    sub_23BBC2114(&qword_26AEBC0D8, (void (*)(uint64_t))type metadata accessor for SleepStageBarView);
    sub_23BBC1EFC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC498);
  }
  return result;
}

uint64_t sub_23BBC221C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_23BBC2414(0, a3, a4, MEMORY[0x263F185D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_23BBC22A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_23BBC230C()
{
  unint64_t result = qword_268A7E3D8;
  if (!qword_268A7E3D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268A7E3D8);
  }
  return result;
}

uint64_t sub_23BBC234C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BBC23AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_23BBC2414(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_23BBC2478()
{
  if (!qword_26AEBCB60)
  {
    sub_23BBDBA40();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26AEBCB60);
    }
  }
}

uint64_t *sub_23BBC24E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_23BBDB6B0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = v10[3];
    v9[2] = v10[2];
    v9[3] = v12;
    uint64_t v13 = v10[5];
    v9[4] = v10[4];
    v9[5] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23BBC25FC(uint64_t a1)
{
  uint64_t v2 = sub_23BBDB6B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BBC269C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = v9[5];
  v8[4] = v9[4];
  v8[5] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23BBC2764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[2] = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[3] = v9[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[4] = v9[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[5] = v9[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BBC2870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  return a1;
}

uint64_t sub_23BBC28FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_bridgeObjectRelease();
  v8[1] = v9[1];
  swift_bridgeObjectRelease();
  v8[2] = v9[2];
  swift_bridgeObjectRelease();
  v8[3] = v9[3];
  swift_bridgeObjectRelease();
  v8[4] = v9[4];
  swift_bridgeObjectRelease();
  v8[5] = v9[5];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BBC29D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBC29EC);
}

uint64_t sub_23BBC29EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23BBDB6B0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_23BBC2AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBC2AC0);
}

uint64_t sub_23BBC2AC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_23BBDB6B0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_23BBC2B7C()
{
  uint64_t result = sub_23BBDB6B0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23BBC2C10()
{
  return sub_23BBC2C6C(&qword_268A7E3E0, sub_23BBC2CF8, (void (*)(void))sub_23BBC1F50, (void (*)(void))sub_23BBC215C);
}

uint64_t sub_23BBC2C6C(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BBC2CF8(uint64_t a1)
{
}

void sub_23BBC2D40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t SleepWidgetViewModel.baseAccessibilityIdentifier.getter()
{
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_26AEBDD08;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t SleepWidgetViewModel.title.getter()
{
  uint64_t v1 = sub_23BBDBBA0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_23BBDB890();
  uint64_t v21 = *(void *)(v5 - 8);
  uint64_t v22 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_23BBDB8A0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_23BBDB970();
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 8))
  {
LABEL_2:
    sub_23BBDBB80();
    uint64_t v16 = sub_23BBDBB90();
    os_log_type_t v17 = sub_23BBDC860();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_23BB52000, v16, v17, "State has no title", v18, 2u);
      MEMORY[0x23ECD1880](v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return 0;
  }
  else
  {
    switch(*(void *)v0)
    {
      case 2:
        if (qword_26AEBBAA0 == -1) {
          goto LABEL_10;
        }
        goto LABEL_12;
      case 3:
      case 6:
        uint64_t v20 = v13;
        (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F07740], v8);
        sub_23BBDB8B0();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        type metadata accessor for SleepWidgetViewModel();
        sub_23BBDB870();
        sub_23BBDB8D0();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v22);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v12);
        return sub_23BBDC840();
      case 4:
      case 5:
        if (qword_26AEBBAA0 == -1) {
          goto LABEL_10;
        }
LABEL_12:
        swift_once();
LABEL_10:
        uint64_t result = sub_23BBDB740();
        break;
      default:
        goto LABEL_2;
    }
  }
  return result;
}

BOOL SleepWidgetViewModel.hideTitle.getter()
{
  return (*(unsigned char *)(v0 + 8) & 1) == 0 && *(void *)v0 == 5;
}

BOOL SleepWidgetViewModel.showWakeUpDateView.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v7 - v2;
  sub_23BBC56F0((uint64_t)&v7 - v2);
  uint64_t v4 = sub_23BBDB860();
  BOOL v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) != 1;
  sub_23BBC6CA0((uint64_t)v3, (unint64_t *)&qword_26AEBB6E8, v0);
  return v5;
}

uint64_t sub_23BBC33D4()
{
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  return sub_23BBDB740();
}

uint64_t sub_23BBC34A8()
{
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  return sub_23BBDB740();
}

uint64_t sub_23BBC357C()
{
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  return sub_23BBDB740();
}

uint64_t SleepWidgetViewModel.scheduleOccurrenceTimeAttributedString(occurrence:isCondensed:)@<X0>(unsigned char *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_23BBDB790();
  MEMORY[0x270FA5388](v6 - 8);
  sub_23BBC6EA4(0, &qword_268A7E3F0, MEMORY[0x263F06828], MEMORY[0x263F8D8F0]);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v27 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v27 - v17;
  if (*a1 == 3)
  {
    uint64_t v19 = (char *)&v27 - v17;
    if (a2) {
      SleepWidgetViewModel.localizedCondensedBedtimeAttributedString.getter((uint64_t)v19);
    }
    else {
      SleepWidgetViewModel.localizedBedtimeAttributedString.getter((uint64_t)v19);
    }
    sub_23BBC6D10((uint64_t)v18, (uint64_t)v16, &qword_268A7E3F0, MEMORY[0x263F06828]);
    uint64_t v20 = sub_23BBDB720();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, v20) == 1)
    {
      if (qword_26AEBBAA0 != -1) {
        swift_once();
      }
      sub_23BBDB740();
      sub_23BBDB780();
      sub_23BBDB730();
      uint64_t v22 = (uint64_t (*)(uint64_t))MEMORY[0x263F06828];
      sub_23BBC6CA0((uint64_t)v18, &qword_268A7E3F0, MEMORY[0x263F06828]);
      uint64_t v23 = (uint64_t)v16;
      return sub_23BBC6CA0(v23, &qword_268A7E3F0, v22);
    }
    sub_23BBC6CA0((uint64_t)v18, &qword_268A7E3F0, MEMORY[0x263F06828]);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(a3, v16, v20);
  }
  else
  {
    if (a2) {
      SleepWidgetViewModel.localizedCondensedWakeUpAttributedString.getter((uint64_t)v13);
    }
    else {
      SleepWidgetViewModel.localizedWakeUpAttributedString.getter((uint64_t)v13);
    }
    sub_23BBC6D10((uint64_t)v13, (uint64_t)v10, &qword_268A7E3F0, MEMORY[0x263F06828]);
    uint64_t v24 = sub_23BBDB720();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v24) == 1)
    {
      if (qword_26AEBBAA0 != -1) {
        swift_once();
      }
      sub_23BBDB740();
      sub_23BBDB780();
      sub_23BBDB730();
      uint64_t v22 = (uint64_t (*)(uint64_t))MEMORY[0x263F06828];
      sub_23BBC6CA0((uint64_t)v13, &qword_268A7E3F0, MEMORY[0x263F06828]);
      uint64_t v23 = (uint64_t)v10;
      return sub_23BBC6CA0(v23, &qword_268A7E3F0, v22);
    }
    sub_23BBC6CA0((uint64_t)v13, &qword_268A7E3F0, MEMORY[0x263F06828]);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(a3, v10, v24);
  }
}

uint64_t sub_23BBC3B20(unsigned char *a1)
{
  uint64_t v2 = sub_23BBDB860();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  BOOL v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v14 - v10;
  if (*a1 == 3) {
    sub_23BBC5410((uint64_t)&v14 - v10);
  }
  else {
    sub_23BBC56F0((uint64_t)&v14 - v10);
  }
  sub_23BBC6D10((uint64_t)v11, (uint64_t)v9, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_23BBC6CA0((uint64_t)v9, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    if (qword_26AEBBAA0 != -1) {
      swift_once();
    }
    sub_23BBDB740();
    sub_23BBDBAC0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
    objc_msgSend(v12, sel_setDateStyle_, 0);
    objc_msgSend(v12, sel_setTimeStyle_, 1);
    sub_23BBDC8A0();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_23BBC6CA0((uint64_t)v11, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
}

uint64_t SleepWidgetViewModel.scheduleOccurrenceRelativeDateString(occurrence:)(unsigned __int8 *a1)
{
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = sub_23BBDB860();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v30 - v14;
  int v16 = *a1;
  uint64_t v17 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v18 = v17;
  uint64_t v19 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v16 == 3)
  {
    sub_23BBC6D10(v1 + *(int *)(v17 + 48), (uint64_t)v8, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    if ((*v19)(v8, 1, v9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
      uint64_t v23 = *(void **)(v1 + *(int *)(v18 + 36));
      uint64_t v24 = (void *)sub_23BBDB820();
      id v25 = objc_msgSend(v23, sel_stringFromDate_, v24);

      uint64_t v22 = sub_23BBDC6E0();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      return v22;
    }
    uint64_t v20 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
    uint64_t v21 = (uint64_t)v8;
  }
  else
  {
    sub_23BBC6D10(v1 + *(int *)(v17 + 52), (uint64_t)v6, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    if ((*v19)(v6, 1, v9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, v9);
      uint64_t v26 = *(void **)(v1 + *(int *)(v18 + 36));
      uint64_t v27 = (void *)sub_23BBDB820();
      id v28 = objc_msgSend(v26, sel_stringFromDate_, v27);

      uint64_t v22 = sub_23BBDC6E0();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      return v22;
    }
    uint64_t v20 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
    uint64_t v21 = (uint64_t)v6;
  }
  sub_23BBC6CA0(v21, (unint64_t *)&qword_26AEBB6E8, v20);
  return 0;
}

BOOL static SleepWidgetViewModel.AlarmState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepWidgetViewModel.sleepChart.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for SleepWidgetViewModel();
  if (*(void *)(v1 + *(int *)(result + 40))) {
    return sub_23BB87600(a1);
  }
  *a1 = 0;
  return result;
}

uint64_t SleepWidgetViewModel.init(state:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v7 = a3 + v6[5];
  uint64_t v8 = sub_23BBDB6D0();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  v9(a3 + v6[6], 1, 1, v8);
  sub_23BBDB850();
  uint64_t v10 = v6[9];
  *(void *)(a3 + v10) = objc_msgSend(objc_allocWithZone((Class)sub_23BBDBA90()), sel_init);
  uint64_t v11 = a3 + v6[11];
  uint64_t v12 = sub_23BBDB860();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(a3 + v6[12], 1, 1, v12);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(a3 + v6[13], 1, 1, v12);
  *(void *)a3 = a1;
  *(unsigned char *)(a3 + 8) = a2 & 1;
  *(unsigned char *)(a3 + v6[7]) = 0;
  uint64_t v15 = (void *)(a3 + v6[10]);
  *uint64_t v15 = 0;
  v15[1] = 0;
  void v15[2] = 0;
  return result;
}

id SleepWidgetViewModel.summaryResults.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  uint64_t v6 = *(void **)(v3 + 16);
  *a1 = *(void *)v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_23BB5646C(v4, v5, v6);
}

uint64_t SleepWidgetViewModel.init(state:bedtimeComponents:wakeUpComponents:alarmState:summaryResults:now:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, long long *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v24 = *a5;
  long long v26 = *a6;
  uint64_t v25 = *((void *)a6 + 2);
  uint64_t v13 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v14 = v13[9];
  *(void *)(a8 + v14) = objc_msgSend(objc_allocWithZone((Class)sub_23BBDBA90()), sel_init);
  uint64_t v15 = a8 + v13[11];
  uint64_t v16 = sub_23BBDB860();
  uint64_t v23 = *(void *)(v16 - 8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v17(v15, 1, 1, v16);
  v17(a8 + v13[12], 1, 1, v16);
  v17(a8 + v13[13], 1, 1, v16);
  *(void *)a8 = a1;
  *(unsigned char *)(a8 + 8) = a2 & 1;
  uint64_t v18 = (uint64_t (*)(uint64_t))MEMORY[0x263F063B0];
  sub_23BBC6E24(a3, a8 + v13[5], &qword_26AEBB6D8, MEMORY[0x263F063B0]);
  sub_23BBC6E24(a4, a8 + v13[6], &qword_26AEBB6D8, v18);
  *(unsigned char *)(a8 + v13[7]) = v24;
  uint64_t v19 = a8 + v13[10];
  *(_OWORD *)uint64_t v19 = v26;
  *(void *)(v19 + 16) = v25;
  uint64_t v20 = a8 + v13[8];
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
  return v21(v20, a7, v16);
}

uint64_t SleepWidgetViewModel.init(resolvedOccurrence:summaryResults:state:now:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  LODWORD(v82) = a4;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v72 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v74 = (char *)&v72 - v19;
  sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], v11);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v84 = (char *)&v72 - v24;
  uint64_t v25 = (int *)type metadata accessor for SleepWidgetViewModel();
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *a2;
  uint64_t v29 = a2[1];
  uint64_t v30 = a2[2];
  uint64_t v83 = a6;
  uint64_t v75 = v18;
  uint64_t v76 = v15;
  uint64_t v80 = v23;
  uint64_t v81 = a3;
  uint64_t v78 = v29;
  uint64_t v79 = v28;
  uint64_t v77 = v30;
  if (a1)
  {
    id v31 = objc_msgSend(a1, sel_occurrence);
    id v32 = objc_msgSend(v31, sel_bedtimeComponents);

    uint64_t v33 = a5;
    uint64_t v34 = (uint64_t)v84;
    sub_23BBDB6C0();

    uint64_t v35 = sub_23BBDB6D0();
    uint64_t v36 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
    uint64_t v37 = v34;
    a5 = v33;
    v36(v37, 0, 1, v35);
    id v38 = objc_msgSend(a1, sel_occurrence);
    id v39 = objc_msgSend(v38, sel_wakeUpComponents);

    sub_23BBDB6C0();
    v36((uint64_t)v23, 0, 1, v35);
  }
  else
  {
    uint64_t v40 = sub_23BBDB6D0();
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56);
    v41(v84, 1, 1, v40);
    v41(v23, 1, 1, v40);
  }
  char v42 = v82;
  uint64_t v73 = a1;
  sub_23BBC4D34(a1, &v85);
  char v43 = v85;
  uint64_t v44 = &v27[v25[8]];
  uint64_t v45 = sub_23BBDB860();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v82 = a5;
  v47(v44, a5, v45);
  uint64_t v48 = v25[9];
  *(void *)&v27[v48] = objc_msgSend(objc_allocWithZone((Class)sub_23BBDBA90()), sel_init);
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
  v49(&v27[v25[11]], 1, 1, v45);
  v49(&v27[v25[12]], 1, 1, v45);
  v49(&v27[v25[13]], 1, 1, v45);
  *(void *)uint64_t v27 = v81;
  v27[8] = v42 & 1;
  uint64_t v50 = (uint64_t (*)(uint64_t))MEMORY[0x263F063B0];
  sub_23BBC6E24((uint64_t)v84, (uint64_t)&v27[v25[5]], &qword_26AEBB6D8, MEMORY[0x263F063B0]);
  sub_23BBC6E24((uint64_t)v80, (uint64_t)&v27[v25[6]], &qword_26AEBB6D8, v50);
  v27[v25[7]] = v43;
  uint64_t v51 = &v27[v25[10]];
  uint64_t v52 = v78;
  *(void *)uint64_t v51 = v79;
  *((void *)v51 + 1) = v52;
  *((void *)v51 + 2) = v77;
  uint64_t v53 = (uint64_t)v27;
  uint64_t v54 = v83;
  sub_23BB78F3C(v53, v83);
  uint64_t v84 = a1;
  if (a1)
  {
    uint64_t v55 = v73;
    id v56 = objc_msgSend(v73, sel_windDownEvent);
    if (v56)
    {
      uint64_t v57 = v56;
      id v58 = objc_msgSend(v56, sel_dueDate);

      uint64_t v59 = (uint64_t)v74;
      sub_23BBDB830();

      uint64_t v60 = 0;
    }
    else
    {
      uint64_t v60 = 1;
      uint64_t v59 = (uint64_t)v74;
    }
    v49((char *)v59, v60, 1, v45);
    sub_23BBC6D90(v59, v54 + v25[11]);
    id v62 = objc_msgSend(v55, sel_bedtimeEvent);
    if (v62)
    {
      uint64_t v63 = v62;
      id v64 = [v62 (SEL)0x264E09F1DLL];

      uint64_t v65 = (uint64_t)v75;
      sub_23BBDB830();

      v49((char *)v65, 0, 1, v45);
      sub_23BBC6D90(v65, v54 + v25[12]);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v61 = (uint64_t)v74;
    v49(v74, 1, 1, v45);
    sub_23BBC6D90(v61, v54 + v25[11]);
    uint64_t v55 = v73;
  }
  uint64_t v66 = 1;
  uint64_t v67 = (uint64_t)v75;
  v49(v75, 1, 1, v45);
  sub_23BBC6D90(v67, v54 + v25[12]);
  if (!v84)
  {
    uint64_t v70 = (uint64_t)v76;
    goto LABEL_14;
  }
LABEL_12:
  id v68 = objc_msgSend(v55, sel_wakeUpEvent);
  id v69 = [v68 (SEL)0x264E09F1DLL];

  uint64_t v70 = (uint64_t)v76;
  sub_23BBDB830();

  uint64_t v66 = 0;
LABEL_14:
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v82, v45);
  v49((char *)v70, v66, 1, v45);
  return sub_23BBC6D90(v70, v54 + v25[13]);
}

void sub_23BBC4D34(void *a1@<X0>, char *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_wakeUpEvent);
    id v5 = objc_msgSend(v4, sel_type);

    if (v5 == (id)1)
    {

      char v6 = 1;
    }
    else
    {
      id v7 = objc_msgSend(v3, sel_occurrence);
      id v8 = objc_msgSend(v7, sel_alarmConfiguration);

      LODWORD(v7) = objc_msgSend(v8, sel_isEnabled);
      if (v7) {
        char v6 = 0;
      }
      else {
        char v6 = 2;
      }
    }
  }
  else
  {
    char v6 = 0;
  }
  *a2 = v6;
}

uint64_t SleepWidgetViewModel.init(resolvedOccurrence:summaryResults:state:)@<X0>(char *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v9 = a4 & 1;
  uint64_t v10 = sub_23BBDB860();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *((void *)a2 + 2);
  long long v15 = *a2;
  uint64_t v16 = v13;
  sub_23BBDB850();
  return SleepWidgetViewModel.init(resolvedOccurrence:summaryResults:state:now:)(a1, (uint64_t *)&v15, a3, v9, (uint64_t)v12, a5);
}

uint64_t SleepWidgetViewModel.defaultText.getter()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0x617453206C6C754ELL;
  }
  id v2 = (id)NSStringFromHKSPSleepWidgetState();
  uint64_t v1 = sub_23BBDC6E0();

  return v1;
}

uint64_t SleepWidgetViewModel.localizedCondensedBedtimeAttributedString.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23BBC4F98((void (*)(uint64_t))sub_23BBC5410, a1);
}

uint64_t SleepWidgetViewModel.localizedBedtimeAttributedString.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23BBC520C((void (*)(id))sub_23BBC5410, a1);
}

uint64_t SleepWidgetViewModel.localizedCondensedWakeUpAttributedString.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23BBC4F98((void (*)(uint64_t))sub_23BBC56F0, a1);
}

uint64_t sub_23BBC4F98@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  id v4 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v19 - v6;
  uint64_t v8 = sub_23BBDB890();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB8A620(0, (unint64_t *)&qword_268A7E3D8);
  sub_23BBDB870();
  HKSPIsRemoveSpacesForTimeFormatEnabled();
  uint64_t v12 = (void *)sub_23BBDC890();
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  a1(v13);
  sub_23BBC5E30((uint64_t)v7, v12);
  uint64_t v15 = v14;
  sub_23BBC6CA0((uint64_t)v7, (unint64_t *)&qword_26AEBB6E8, v4);
  if (v15)
  {
    sub_23BBDC750();
    swift_bridgeObjectRelease();

    uint64_t v16 = sub_23BBDB720();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 0, 1, v16);
  }
  else
  {

    uint64_t v18 = sub_23BBDB720();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

uint64_t SleepWidgetViewModel.localizedWakeUpAttributedString.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23BBC520C((void (*)(id))sub_23BBC56F0, a1);
}

uint64_t sub_23BBC520C@<X0>(void (*a1)(id)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_23BBDB790();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - v7;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  objc_msgSend(v9, sel_setDateStyle_, 0);
  a1(objc_msgSend(v9, sel_setTimeStyle_, 1));
  sub_23BBC5E30((uint64_t)v8, v9);
  uint64_t v11 = v10;
  sub_23BBC6CA0((uint64_t)v8, (unint64_t *)&qword_26AEBB6E8, v5);

  if (v11)
  {
    sub_23BBDB780();
    sub_23BBDB730();
    uint64_t v12 = sub_23BBDB720();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 0, 1, v12);
  }
  else
  {
    uint64_t v14 = sub_23BBDB720();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_23BBC5410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v18 = a1;
  id v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F063B0];
  sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v17 - v4;
  uint64_t v6 = sub_23BBDB6D0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_23BBDB970();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDB940();
  uint64_t v14 = type metadata accessor for SleepWidgetViewModel();
  sub_23BBC6D10(v1 + *(int *)(v14 + 20), (uint64_t)v5, &qword_26AEBB6D8, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    sub_23BBC6CA0((uint64_t)v5, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    uint64_t v15 = sub_23BBDB860();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v18, 1, 1, v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    sub_23BBDB910();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_23BBC56F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v18 = a1;
  id v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F063B0];
  sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v17 - v4;
  uint64_t v6 = sub_23BBDB6D0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_23BBDB970();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDB940();
  uint64_t v14 = type metadata accessor for SleepWidgetViewModel();
  sub_23BBC6D10(v1 + *(int *)(v14 + 24), (uint64_t)v5, &qword_26AEBB6D8, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    sub_23BBC6CA0((uint64_t)v5, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
    uint64_t v15 = sub_23BBDB860();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v18, 1, 1, v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    sub_23BBDB910();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t SleepWidgetViewModel.localizedBedtimeRelativeDateString.getter()
{
  uint64_t v1 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v15 - v3;
  uint64_t v5 = sub_23BBDB860();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SleepWidgetViewModel();
  sub_23BBC6D10(v0 + *(int *)(v9 + 48), (uint64_t)v4, (unint64_t *)&qword_26AEBB6E8, v1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_23BBC6CA0((uint64_t)v4, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v11 = *(void **)(v0 + *(int *)(v9 + 36));
    uint64_t v12 = (void *)sub_23BBDB820();
    id v13 = objc_msgSend(v11, sel_stringFromDate_, v12);

    uint64_t v10 = sub_23BBDC6E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v10;
}

uint64_t SleepWidgetViewModel.localizedWakeUpRelativeDateString.getter()
{
  uint64_t v1 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v15 - v3;
  uint64_t v5 = sub_23BBDB860();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SleepWidgetViewModel();
  sub_23BBC6D10(v0 + *(int *)(v9 + 52), (uint64_t)v4, (unint64_t *)&qword_26AEBB6E8, v1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_23BBC6CA0((uint64_t)v4, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v11 = *(void **)(v0 + *(int *)(v9 + 36));
    uint64_t v12 = (void *)sub_23BBDB820();
    id v13 = objc_msgSend(v11, sel_stringFromDate_, v12);

    uint64_t v10 = sub_23BBDC6E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v10;
}

uint64_t sub_23BBC5E30(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = sub_23BBDB860();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBC6D10(a1, (uint64_t)v7, (unint64_t *)&qword_26AEBB6E8, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_23BBC6CA0((uint64_t)v7, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    id v13 = (void *)sub_23BBDB820();
    id v14 = objc_msgSend(a2, sel_stringFromDate_, v13);

    uint64_t v12 = sub_23BBDC6E0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v12;
}

uint64_t SleepWidgetViewModel.localizedBedtimeString.getter()
{
  return sub_23BBC607C((void (*)(id))sub_23BBC5410);
}

uint64_t SleepWidgetViewModel.localizedWakeUpString.getter()
{
  return sub_23BBC607C((void (*)(id))sub_23BBC56F0);
}

uint64_t sub_23BBC607C(void (*a1)(id))
{
  uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  objc_msgSend(v6, sel_setDateStyle_, 0);
  a1(objc_msgSend(v6, sel_setTimeStyle_, 1));
  uint64_t v7 = sub_23BBC5E30((uint64_t)v5, v6);
  sub_23BBC6CA0((uint64_t)v5, (unint64_t *)&qword_26AEBB6E8, v2);

  return v7;
}

uint64_t SleepWidgetViewModel.sleepSampleEndDateString.getter()
{
  uint64_t v1 = sub_23BBDB6B0();
  uint64_t v33 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = sub_23BBDB860();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  id v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40));
  uint64_t v15 = *v14;
  uint64_t v16 = (void *)v14[1];
  if (*v14) {
    BOOL v17 = v16 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_18:
    sub_23BBC6CA0((uint64_t)v9, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
    return 0;
  }
  id v31 = (void *)v14[2];
  id v32 = v13;
  id v18 = v31;
  swift_bridgeObjectRetain();
  id v19 = objc_msgSend(v16, sel_periods);
  sub_23BB8A620(0, &qword_268A7DE10);
  unint64_t v20 = sub_23BBDC780();

  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_23BBDCB20();
    swift_bridgeObjectRelease();
    if (v21)
    {
LABEL_9:
      unint64_t v22 = v21 - 1;
      if (__OFSUB__(v21, 1))
      {
        __break(1u);
      }
      else if ((v20 & 0xC000000000000001) == 0)
      {
        if ((v22 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v22 < *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v23 = *(id *)(v20 + 8 * v22 + 32);
LABEL_14:
          uint64_t v24 = v23;
          swift_bridgeObjectRelease();
          id v25 = objc_msgSend(v24, sel_dateInterval);

          sub_23BBDB660();
          sub_23BBDB670();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v3, v1);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
          goto LABEL_17;
        }
        __break(1u);
LABEL_29:
        swift_once();
        goto LABEL_20;
      }
      id v23 = (id)MEMORY[0x23ECD1130](v22, v20);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v21) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1, 1, v10);
LABEL_17:
  sub_23BBC6E24((uint64_t)v7, (uint64_t)v9, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
  sub_23BB564C0(v15, v16, v31);
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  uint64_t v7 = v32;
  if (v26 == 1) {
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v32, v9, v10);
  unint64_t v20 = sub_23BBDB820();
  if (qword_268A7D9E8 != -1) {
    goto LABEL_29;
  }
LABEL_20:
  id v28 = (id)HKMostRecentSampleEndDateText();

  if (v28)
  {
    uint64_t v27 = sub_23BBDC6E0();
  }
  else
  {
    uint64_t v27 = 0;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
  return v27;
}

uint64_t SleepWidgetViewModel.AlarmState.hash(into:)()
{
  return sub_23BBDCBE0();
}

uint64_t SleepWidgetViewModel.AlarmState.hashValue.getter()
{
  return sub_23BBDCBF0();
}

uint64_t SleepWidgetViewModel.description.getter()
{
  sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = &v20[-v2];
  sub_23BBC6EA4(0, &qword_26AEBC0B0, (uint64_t (*)(uint64_t))sub_23BBC6F08, MEMORY[0x263F8E0F8]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23BBDE0F0;
  if (*(unsigned char *)(v0 + 8))
  {
    unint64_t v5 = 0xEA00000000006574;
    uint64_t v6 = 0x617453206C6C754ELL;
  }
  else
  {
    id v7 = (id)NSStringFromHKSPSleepWidgetState();
    uint64_t v6 = sub_23BBDC6E0();
    unint64_t v5 = v8;
  }
  uint64_t v9 = MEMORY[0x263F8D310];
  *(void *)(v4 + 56) = MEMORY[0x263F8D310];
  unint64_t v10 = sub_23BBC6F60();
  *(void *)(v4 + 64) = v10;
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v5;
  uint64_t v11 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v12 = (uint64_t (*)(uint64_t))MEMORY[0x263F063B0];
  sub_23BBC6D10(v0 + v11[5], (uint64_t)v3, &qword_26AEBB6D8, MEMORY[0x263F063B0]);
  uint64_t v13 = sub_23BBDC700();
  *(void *)(v4 + 96) = v9;
  *(void *)(v4 + 104) = v10;
  *(void *)(v4 + 72) = v13;
  *(void *)(v4 + 80) = v14;
  sub_23BBC6D10(v0 + v11[6], (uint64_t)v3, &qword_26AEBB6D8, v12);
  uint64_t v15 = sub_23BBDC700();
  *(void *)(v4 + 136) = v9;
  *(void *)(v4 + 144) = v10;
  *(void *)(v4 + 112) = v15;
  *(void *)(v4 + 120) = v16;
  v20[15] = *(unsigned char *)(v0 + v11[7]);
  uint64_t v17 = sub_23BBDC700();
  *(void *)(v4 + 176) = v9;
  *(void *)(v4 + 184) = v10;
  *(void *)(v4 + 152) = v17;
  *(void *)(v4 + 160) = v18;
  return sub_23BBDC6F0();
}

uint64_t SleepWidgetViewModel.noDataTexts.getter()
{
  if (*(void *)(v0 + *(int *)(type metadata accessor for SleepWidgetViewModel() + 40))
    && SleepDaySummaryResults.hasAnyDataInLastWeek.getter())
  {
    sub_23BB9D948(0, (unint64_t *)&qword_26AEBC4C8, MEMORY[0x263F8E0F8]);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_23BBDEF50;
    if (qword_26AEBBAA0 != -1) {
      swift_once();
    }
    *(void *)(v1 + 32) = sub_23BBDB740();
    *(void *)(v1 + 40) = v2;
    *(void *)(v1 + 48) = sub_23BBDB740();
    *(void *)(v1 + 56) = v3;
    *(void *)(v1 + 64) = 11565;
    *(void *)(v1 + 72) = 0xE200000000000000;
    sub_23BB9D948(0, &qword_26AEBC4B0, MEMORY[0x263F8D488]);
    sub_23BB9D998();
    uint64_t v4 = sub_23BBDC830();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BB9D948(0, (unint64_t *)&qword_26AEBC4C8, MEMORY[0x263F8E0F8]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_23BBDD2A0;
    if (qword_26AEBBAA0 != -1) {
      swift_once();
    }
    *(void *)(v4 + 32) = sub_23BBDB740();
    *(void *)(v4 + 40) = v5;
    *(void *)(v4 + 48) = 11565;
    *(void *)(v4 + 56) = 0xE200000000000000;
  }
  return v4;
}

id sub_23BBC6BCC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 40);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  uint64_t v6 = *(void **)(v3 + 16);
  *a2 = *(void *)v3;
  a2[1] = v5;
  a2[2] = v6;
  return sub_23BB5646C(v4, v5, v6);
}

uint64_t sub_23BBC6BEC()
{
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_26AEBDD08;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t type metadata accessor for SleepWidgetViewModel()
{
  uint64_t result = qword_26AEBB6C8;
  if (!qword_26AEBB6C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BBC6CA0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_23BBC6EA4(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23BBC6D10(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_23BBC6EA4(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23BBC6D90(uint64_t a1, uint64_t a2)
{
  sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BBC6E24(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_23BBC6EA4(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_23BBC6EA4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_23BBC6F08()
{
  unint64_t result = qword_26AEBC0C0;
  if (!qword_26AEBC0C0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26AEBC0C0);
  }
  return result;
}

unint64_t sub_23BBC6F60()
{
  unint64_t result = qword_26AEBC050;
  if (!qword_26AEBC050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC050);
  }
  return result;
}

unint64_t sub_23BBC6FB8()
{
  unint64_t result = qword_268A7E3F8;
  if (!qword_268A7E3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E3F8);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SleepWidgetViewModel(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a3[5];
    unint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23BBDB6D0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = a3[6];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    uint64_t v19 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    unint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    uint64_t v22 = sub_23BBDB860();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v49(v20, v21, v22);
    uint64_t v24 = a3[9];
    uint64_t v25 = a3[10];
    int v26 = *(void **)((char *)a2 + v24);
    *(void *)((char *)v4 + v24) = v26;
    uint64_t v27 = (void *)((char *)v4 + v25);
    uint64_t v28 = (uint64_t)a2 + v25;
    uint64_t v29 = *(uint64_t *)((char *)a2 + v25);
    id v30 = v26;
    if (v29)
    {
      id v32 = *(void **)(v28 + 8);
      id v31 = *(void **)(v28 + 16);
      void *v27 = v29;
      v27[1] = v32;
      v27[2] = v31;
      swift_bridgeObjectRetain();
      id v33 = v32;
      id v34 = v31;
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      v27[2] = *(void *)(v28 + 16);
    }
    uint64_t v35 = a3[11];
    uint64_t v36 = (char *)v4 + v35;
    uint64_t v37 = (char *)a2 + v35;
    id v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v38((char *)a2 + v35, 1, v22))
    {
      sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v49(v36, (uint64_t)v37, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v36, 0, 1, v22);
    }
    uint64_t v40 = a3[12];
    uint64_t v41 = (char *)v4 + v40;
    char v42 = (char *)a2 + v40;
    if (v38((char *)a2 + v40, 1, v22))
    {
      sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v49(v41, (uint64_t)v42, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v41, 0, 1, v22);
    }
    uint64_t v44 = a3[13];
    uint64_t v45 = (char *)v4 + v44;
    uint64_t v46 = (char *)a2 + v44;
    if (v38(v46, 1, v22))
    {
      sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v49(v45, (uint64_t)v46, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v45, 0, 1, v22);
    }
  }
  return v4;
}

uint64_t destroy for SleepWidgetViewModel(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_23BBDB6D0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = a1 + a2[6];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = sub_23BBDB860();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v18(v9, v10);

  uint64_t v12 = a1 + a2[10];
  if (*(void *)v12)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = a1 + a2[11];
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v14(v13, 1, v10)) {
    v18(v13, v10);
  }
  uint64_t v15 = a1 + a2[12];
  if (!v14(v15, 1, v10)) {
    v18(v15, v10);
  }
  uint64_t v16 = a1 + a2[13];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v16, 1, v10);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v18)(v16, v10);
  }
  return result;
}

uint64_t initializeWithCopy for SleepWidgetViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v47 = *(void (**)(void *, const void *, uint64_t))(v21 + 16);
  v47(v18, v19, v20);
  uint64_t v22 = a3[9];
  uint64_t v23 = a3[10];
  uint64_t v24 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v24;
  uint64_t v25 = (void *)(a1 + v23);
  uint64_t v26 = a2 + v23;
  uint64_t v27 = *(void *)(a2 + v23);
  id v28 = v24;
  if (v27)
  {
    id v30 = *(void **)(v26 + 8);
    uint64_t v29 = *(void **)(v26 + 16);
    *uint64_t v25 = v27;
    v25[1] = v30;
    v25[2] = v29;
    swift_bridgeObjectRetain();
    id v31 = v30;
    id v32 = v29;
  }
  else
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    v25[2] = *(void *)(v26 + 16);
  }
  uint64_t v33 = a3[11];
  id v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  if (v36((const void *)(a2 + v33), 1, v20))
  {
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v47(v34, v35, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v34, 0, 1, v20);
  }
  uint64_t v38 = a3[12];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (const void *)(a2 + v38);
  if (v36((const void *)(a2 + v38), 1, v20))
  {
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v47(v39, v40, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v39, 0, 1, v20);
  }
  uint64_t v42 = a3[13];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (const void *)(a2 + v42);
  if (v36(v44, 1, v20))
  {
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    v47(v43, v44, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v43, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithCopy for SleepWidgetViewModel(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_23BBDB6D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  int v19 = v12((void *)(a1 + v16), 1, v10);
  int v20 = v12(v18, 1, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_12:
    sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v17, v18, v10);
LABEL_13:
  *(unsigned char *)(a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t)a2 + v22;
  uint64_t v25 = sub_23BBDB860();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 24);
  v67(v23, v24, v25);
  uint64_t v27 = a3[9];
  id v28 = *(void **)((char *)a2 + v27);
  uint64_t v29 = *(void **)(a1 + v27);
  *(void *)(a1 + v27) = v28;
  id v30 = v28;

  uint64_t v31 = a3[10];
  id v32 = (void *)(a1 + v31);
  uint64_t v33 = (long long *)((char *)a2 + v31);
  uint64_t v34 = *(uint64_t *)((char *)a2 + v31);
  if (*(void *)(a1 + v31))
  {
    if (v34)
    {
      void *v32 = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v35 = (void *)v32[1];
      uint64_t v36 = (void *)*((void *)v33 + 1);
      v32[1] = v36;
      id v37 = v36;

      uint64_t v38 = (void *)v32[2];
      uint64_t v39 = (void *)*((void *)v33 + 2);
      v32[2] = v39;
      id v40 = v39;
    }
    else
    {
      sub_23BB547F0(a1 + v31);
      uint64_t v45 = *((void *)v33 + 2);
      *(_OWORD *)id v32 = *v33;
      v32[2] = v45;
    }
  }
  else if (v34)
  {
    void *v32 = v34;
    uint64_t v41 = (void *)*((void *)v33 + 1);
    v32[1] = v41;
    uint64_t v42 = (void *)*((void *)v33 + 2);
    v32[2] = v42;
    swift_bridgeObjectRetain();
    id v43 = v41;
    id v44 = v42;
  }
  else
  {
    long long v46 = *v33;
    v32[2] = *((void *)v33 + 2);
    *(_OWORD *)id v32 = v46;
  }
  uint64_t v47 = a3[11];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  int v51 = v50(a1 + v47, 1, v25);
  int v52 = v50((uint64_t)v49, 1, v25);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v48, v49, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v48, 0, 1, v25);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v48, v25);
LABEL_27:
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_28;
  }
  v67((uint64_t)v48, (uint64_t)v49, v25);
LABEL_28:
  uint64_t v54 = a3[12];
  uint64_t v55 = (void *)(a1 + v54);
  id v56 = (char *)a2 + v54;
  int v57 = v50(a1 + v54, 1, v25);
  int v58 = v50((uint64_t)v56, 1, v25);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v55, v56, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v55, 0, 1, v25);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v55, v25);
LABEL_33:
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_34;
  }
  v67((uint64_t)v55, (uint64_t)v56, v25);
LABEL_34:
  uint64_t v60 = a3[13];
  uint64_t v61 = (void *)(a1 + v60);
  id v62 = (char *)a2 + v60;
  int v63 = v50(a1 + v60, 1, v25);
  int v64 = v50((uint64_t)v62, 1, v25);
  if (!v63)
  {
    if (!v64)
    {
      v67((uint64_t)v61, (uint64_t)v62, v25);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v61, v25);
    goto LABEL_39;
  }
  if (v64)
  {
LABEL_39:
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v61, v62, v25);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v61, 0, 1, v25);
  return a1;
}

uint64_t initializeWithTake for SleepWidgetViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[6];
  int v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(void *, const void *, uint64_t))(v21 + 32);
  v22(v18, v19, v20);
  uint64_t v23 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  id v28 = (const void *)(a2 + v26);
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v41(a2 + v26, 1, v20))
  {
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v22(v27, v28, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v27, 0, 1, v20);
  }
  uint64_t v30 = a3[12];
  uint64_t v31 = (void *)(a1 + v30);
  id v32 = (const void *)(a2 + v30);
  if (v41(a2 + v30, 1, v20))
  {
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    uint64_t v34 = v22;
  }
  else
  {
    uint64_t v35 = v32;
    uint64_t v34 = v22;
    v22(v31, v35, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v31, 0, 1, v20);
  }
  uint64_t v36 = a3[13];
  id v37 = (void *)(a1 + v36);
  uint64_t v38 = (const void *)(a2 + v36);
  if (v41((uint64_t)v38, 1, v20))
  {
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    v34(v37, v38, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v37, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithTake for SleepWidgetViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_23BBDB6D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v16, v17, v9);
LABEL_13:
  uint64_t v21 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = sub_23BBDB860();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  v53(v22, v23, v24);
  uint64_t v26 = a3[9];
  uint64_t v27 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);

  uint64_t v28 = a3[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  if (*(void *)(a1 + v28))
  {
    if (*v30)
    {
      *uint64_t v29 = *v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = (void *)v29[1];
      v29[1] = v30[1];

      id v32 = (void *)v29[2];
      v29[2] = v30[2];

      goto LABEL_18;
    }
    sub_23BB547F0((uint64_t)v29);
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  v29[2] = v30[2];
LABEL_18:
  uint64_t v33 = a3[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v37 = v36(a1 + v33, 1, v24);
  int v38 = v36((uint64_t)v35, 1, v24);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v34, v35, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, v24);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v34, v24);
LABEL_23:
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_24;
  }
  v53((uint64_t)v34, (uint64_t)v35, v24);
LABEL_24:
  uint64_t v40 = a3[12];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (const void *)(a2 + v40);
  int v43 = v36(a1 + v40, 1, v24);
  int v44 = v36((uint64_t)v42, 1, v24);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v41, v42, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v41, 0, 1, v24);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v41, v24);
LABEL_29:
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_30;
  }
  v53((uint64_t)v41, (uint64_t)v42, v24);
LABEL_30:
  uint64_t v46 = a3[13];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (const void *)(a2 + v46);
  int v49 = v36(a1 + v46, 1, v24);
  int v50 = v36((uint64_t)v48, 1, v24);
  if (!v49)
  {
    if (!v50)
    {
      v53((uint64_t)v47, (uint64_t)v48, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v47, v24);
    goto LABEL_35;
  }
  if (v50)
  {
LABEL_35:
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v47, v48, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBC9184);
}

uint64_t sub_23BBC9184(uint64_t a1, uint64_t a2, int *a3)
{
  sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_23BBDB860();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[8];
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v13 = *(void *)(a1 + a3[9]);
    if (v13 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    return (v13 + 1);
  }
  else
  {
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[11];
    return v15(v17, a2, v16);
  }
}

uint64_t storeEnumTagSinglePayload for SleepWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBC9374);
}

uint64_t sub_23BBC9374(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_23BBC6EA4(0, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_5:
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  uint64_t result = sub_23BBDB860();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[8];
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[9]) = (a2 - 1);
  }
  else
  {
    sub_23BBC6EA4(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a4[11];
    return v15(v17, a2, a2, v16);
  }
  return result;
}

void sub_23BBC9550()
{
  sub_23BBC6EA4(319, &qword_26AEBB6D8, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_23BBDB860();
    if (v1 <= 0x3F)
    {
      sub_23BBC6EA4(319, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for SleepWidgetViewModel.ScheduleOccurrence(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x23BBC9794);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 3;
  unsigned int v9 = v7 - 3;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for SleepWidgetViewModel.ScheduleOccurrence(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x23BBC987CLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_23BBC98A4(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    return v1 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *sub_23BBC98B8(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepWidgetViewModel.ScheduleOccurrence()
{
  return &type metadata for SleepWidgetViewModel.ScheduleOccurrence;
}

unsigned char *storeEnumTagSinglePayload for SleepWidgetViewModel.AlarmState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23BBC99A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepWidgetViewModel.AlarmState()
{
  return &type metadata for SleepWidgetViewModel.AlarmState;
}

uint64_t sub_23BBC99DC()
{
  uint64_t v0 = sub_23BBDBBA0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  int v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  unsigned int v4 = sub_23BBDBB90();
  os_log_type_t v5 = sub_23BBDC880();
  if (os_log_type_enabled(v4, v5))
  {
    unsigned int v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v10 = v7;
    *(_DWORD *)unsigned int v6 = 136446210;
    uint64_t v9 = sub_23BBD0430(0xD000000000000029, 0x800000023BBDFD20, &v10);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v4, v5, "[%{public}s] Returning placeholder for sleep launcher widget...", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v7, -1, -1);
    MEMORY[0x23ECD1880](v6, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_23BBDB840();
}

uint64_t sub_23BBC9BBC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_23BBDBBA0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v10 = sub_23BBDBB90();
  os_log_type_t v11 = sub_23BBDC880();
  if (os_log_type_enabled(v10, v11))
  {
    v17[1] = a3;
    uint64_t v12 = swift_slowAlloc();
    v17[0] = a1;
    unint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v18 = v14;
    *(_DWORD *)unint64_t v13 = 136446210;
    v17[2] = sub_23BBD0430(0xD000000000000029, 0x800000023BBDFD20, &v18);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v10, v11, "[%{public}s] Returning snapshot for sleep launcher widget", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v14, -1, -1);
    uint64_t v15 = v13;
    a1 = v17[0];
    MEMORY[0x23ECD1880](v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return a2(a1);
}

uint64_t sub_23BBC9DC4(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v30 = a1;
  uint64_t v5 = sub_23BBDC640();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBCACEC();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v29 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_23BBDBBA0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v16 = sub_23BBDBB90();
  os_log_type_t v17 = sub_23BBDC880();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v28 = a2;
    uint64_t v18 = swift_slowAlloc();
    v27[2] = a3;
    int v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    v27[0] = v12;
    uint64_t v21 = v20;
    uint64_t v32 = v20;
    v27[1] = v7;
    *(_DWORD *)int v19 = 136446210;
    uint64_t v31 = sub_23BBD0430(0xD000000000000029, 0x800000023BBDFD20, &v32);
    a2 = v28;
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v16, v17, "[%{public}s] Returning timeline for sleep launcher widget", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v21, -1, -1);
    MEMORY[0x23ECD1880](v19, -1, -1);

    (*(void (**)(char *, void))(v13 + 8))(v15, v27[0]);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  sub_23BBCAD80();
  uint64_t v22 = *(void *)(type metadata accessor for SleepLauncherComplicationEntry() - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_23BBDD290;
  sub_23BBCADD8(v30, v24 + v23);
  sub_23BBDC630();
  sub_23BBCA978(qword_268A7E428, (void (*)(uint64_t))type metadata accessor for SleepLauncherComplicationEntry);
  uint64_t v25 = v29;
  sub_23BBDC680();
  a2(v25);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v25, v9);
}

uint64_t sub_23BBCA1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23BBCAA0C(a1, a2, a3, "[%{public}s] Getting snapshot for sleep launcher widget...", (void (*)(void, void, void))sub_23BBC9BBC);
}

uint64_t sub_23BBCA1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23BBCAA0C(a1, a2, a3, "[%{public}s] Getting timeline for sleep launcher widget...", (void (*)(void, void, void))sub_23BBC9DC4);
}

uint64_t sub_23BBCA224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_23BB5B0A0;
  return MEMORY[0x270F07720](a1, a2, a3);
}

SleepWidgetUI::SleepLauncherComplication __swiftcall SleepLauncherComplication.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23BBDC6E0();
  *uint64_t v1 = v2;
  v1[1] = (uint64_t)v3;
  result.kind._object = v3;
  result.kind._countAndFlagsBits = v2;
  return result;
}

uint64_t SleepLauncherComplication.body.getter@<X0>(uint64_t a1@<X8>)
{
  v16[1] = a1;
  sub_23BBCA614();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBCA6C4();
  v16[0] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBCA670();
  sub_23BBCA794();
  swift_bridgeObjectRetain();
  sub_23BBDC600();
  if (qword_26AEBBAA0 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_23BBDB740();
  uint64_t v18 = v10;
  uint64_t v11 = sub_23BBCA978(&qword_268A7E418, (void (*)(uint64_t))sub_23BBCA614);
  unint64_t v12 = sub_23BB570F4();
  uint64_t v13 = MEMORY[0x263F8D310];
  sub_23BBDBEA0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_23BB9D18C();
  uint64_t v17 = v2;
  uint64_t v18 = v13;
  uint64_t v19 = v11;
  unint64_t v20 = v12;
  swift_getOpaqueTypeConformance2();
  uint64_t v14 = v16[0];
  sub_23BBDBE80();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v14);
}

void sub_23BBCA614()
{
  if (!qword_268A7E400)
  {
    sub_23BBCA670();
    unint64_t v0 = sub_23BBDC610();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E400);
    }
  }
}

unint64_t sub_23BBCA670()
{
  unint64_t result = qword_268A7E408;
  if (!qword_268A7E408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E408);
  }
  return result;
}

void sub_23BBCA6C4()
{
  if (!qword_268A7E410)
  {
    sub_23BBCA614();
    sub_23BBCA978(&qword_268A7E418, (void (*)(uint64_t))sub_23BBCA614);
    sub_23BB570F4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7E410);
    }
  }
}

unint64_t sub_23BBCA794()
{
  unint64_t result = qword_268A7E420;
  if (!qword_268A7E420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E420);
  }
  return result;
}

uint64_t sub_23BBCA7E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_23BBDC6E0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23BBCA820()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SleepLauncherComplication()
{
  return &type metadata for SleepLauncherComplication;
}

uint64_t sub_23BBCA84C()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SleepLauncherComplicationTimelineProvider()
{
  return &type metadata for SleepLauncherComplicationTimelineProvider;
}

uint64_t sub_23BBCA930()
{
  return sub_23BBCA978(qword_268A7E428, (void (*)(uint64_t))type metadata accessor for SleepLauncherComplicationEntry);
}

uint64_t sub_23BBCA978(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SleepLauncherComplicationEntry()
{
  uint64_t result = qword_268A7E450;
  if (!qword_268A7E450) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BBCAA0C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, void (*a5)(void, void, void))
{
  uint64_t v9 = type metadata accessor for SleepLauncherComplicationEntry();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_23BBDBBA0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBB80();
  uint64_t v16 = sub_23BBDBB90();
  os_log_type_t v17 = sub_23BBDC880();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v26 = v12;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v27 = a2;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = a5;
    uint64_t v21 = v20;
    uint64_t v30 = v20;
    uint64_t v25 = a4;
    *(_DWORD *)uint64_t v19 = 136446210;
    uint64_t v29 = sub_23BBD0430(0xD000000000000029, 0x800000023BBDFD20, &v30);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v16, v17, v25, v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v21;
    a5 = v28;
    MEMORY[0x23ECD1880](v22, -1, -1);
    unint64_t v23 = v19;
    a2 = v27;
    MEMORY[0x23ECD1880](v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v26);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  swift_retain();
  sub_23BBDB840();
  a5(v11, a2, a3);
  sub_23BBCAC90((uint64_t)v11);
  return swift_release();
}

uint64_t sub_23BBCAC90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepLauncherComplicationEntry();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23BBCACEC()
{
  if (!qword_268A7E440)
  {
    type metadata accessor for SleepLauncherComplicationEntry();
    sub_23BBCA978(qword_268A7E428, (void (*)(uint64_t))type metadata accessor for SleepLauncherComplicationEntry);
    unint64_t v0 = sub_23BBDC690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E440);
    }
  }
}

void sub_23BBCAD80()
{
  if (!qword_268A7E448)
  {
    type metadata accessor for SleepLauncherComplicationEntry();
    unint64_t v0 = sub_23BBDCB70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E448);
    }
  }
}

uint64_t sub_23BBCADD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepLauncherComplicationEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BBCAE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB860();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t sub_23BBCAEA8(uint64_t a1)
{
  uint64_t v2 = sub_23BBDB860();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t sub_23BBCAF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB860();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_23BBCAF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB860();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_23BBCAFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB860();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_23BBCB038(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB860();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_23BBCB09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBCB0B0);
}

uint64_t sub_23BBCB0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB860();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_23BBCB11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBCB130);
}

uint64_t sub_23BBCB130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23BBDB860();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_23BBCB1A0()
{
  uint64_t result = sub_23BBDB860();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23BBCB22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBCB240);
}

uint64_t sub_23BBCB240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_23BBCB2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBCB2C0);
}

uint64_t sub_23BBCB2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UpcomingSleepWidgetCircularView()
{
  uint64_t result = qword_26AEBC870;
  if (!qword_26AEBC870) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23BBCB37C(uint64_t a1)
{
  uint64_t result = sub_23BBCB9D0(&qword_268A7E300, (void (*)(uint64_t))type metadata accessor for UpcomingSleepWidgetCircularView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BBCB3D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBCB3F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v23 = sub_23BBDBB40();
  uint64_t v3 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UpcomingSleepWidgetCircularView();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BB74B1C(0, (unint64_t *)&qword_26AEBB6E8, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = sub_23BBDB860();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_23BBDC4C0();
  uint64_t v16 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBC5410((uint64_t)v11);
  sub_23BBCB834(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    uint64_t v19 = type metadata accessor for SleepWidgetViewModel();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, &v8[*(int *)(v19 + 32)], v12);
    sub_23BBCB898((uint64_t)v8);
    sub_23BBA2328((uint64_t)v11);
  }
  else
  {
    sub_23BBCB898((uint64_t)v8);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  }
  sub_23BBDBB30();
  sub_23BBDBAF0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v23);
  if (qword_26AEBCB38 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_23BBDC4B0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v24, v18, v22);
}

uint64_t sub_23BBCB78C@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_23BBDC410();
  a1[1] = v3;
  sub_23BBCB7CC();
  return sub_23BBCB3F0(v1, (uint64_t)a1 + *(int *)(v4 + 44));
}

void sub_23BBCB7CC()
{
  if (!qword_268A7E460)
  {
    sub_23BBDC4C0();
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E460);
    }
  }
}

uint64_t sub_23BBCB834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UpcomingSleepWidgetCircularView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BBCB898(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UpcomingSleepWidgetCircularView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BBCB8F4()
{
  return sub_23BBCB9D0(&qword_268A7E468, (void (*)(uint64_t))sub_23BBCB93C);
}

void sub_23BBCB93C()
{
  if (!qword_268A7E470)
  {
    sub_23BBDC4C0();
    sub_23BBCB9D0(&qword_268A7E478, MEMORY[0x263F462C8]);
    unint64_t v0 = sub_23BBDC3B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E470);
    }
  }
}

uint64_t sub_23BBCB9D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t EnvironmentValues.sleepWidgetFamily.getter()
{
  sub_23BB86F84();
  return sub_23BBDBDF0();
}

uint64_t EnvironmentValues.sleepWidgetFamily.setter(uint64_t a1)
{
  uint64_t v2 = sub_23BBDC5A0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  sub_23BB86F84();
  sub_23BBDBE00();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t sub_23BBCBB60()
{
  uint64_t v0 = sub_23BBDC5A0();
  __swift_allocate_value_buffer(v0, qword_26AEBC900);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_26AEBC900);
  uint64_t v2 = *MEMORY[0x263F1FCF0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);
  return v3(v1, v2, v0);
}

uint64_t sub_23BBCBBE8@<X0>(uint64_t a1@<X8>)
{
  if (qword_26AEBC918 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_23BBDC5A0();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26AEBC900);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t sub_23BBCBC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_23BB858E8();
  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

void sub_23BBCBCF4()
{
  id v0 = objc_msgSend(self, sel_sharedBehavior);
  if (v0)
  {
    uint64_t v1 = v0;
    unsigned __int8 v2 = objc_msgSend(v0, sel_isAppleWatch);

    byte_268A7E480 = v2;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23BBCBD58@<X0>(unsigned char *a1@<X8>)
{
  if (qword_268A7D9F0 != -1) {
    uint64_t result = swift_once();
  }
  *a1 = byte_268A7E480;
  return result;
}

uint64_t sub_23BBCBDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, MEMORY[0x263F8D510]);
}

void (*EnvironmentValues.sleepWidgetFamily.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_23BBDC5A0();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  v3[6] = sub_23BB86F84();
  sub_23BBDBDF0();
  return sub_23BBCBEAC;
}

void sub_23BBCBEAC(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 16) + 16);
  v4(*(void *)(*(void *)a1 + 32), v3[5], v3[1]);
  uint64_t v5 = (void *)v3[5];
  uint64_t v7 = (void *)v3[3];
  size_t v6 = (void *)v3[4];
  uint64_t v8 = v3[1];
  uint64_t v9 = v3[2];
  if (a2)
  {
    v4(v3[3], v3[4], v3[1]);
    sub_23BBDBE00();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v6, v8);
    v10(v5, v8);
  }
  else
  {
    sub_23BBDBE00();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v6);
  free(v7);
  free(v3);
}

uint64_t EnvironmentValues.isAppleWatch.getter()
{
  sub_23BB7DA88();
  sub_23BBDBDF0();
  return v1;
}

uint64_t EnvironmentValues.isAppleWatch.setter()
{
  return sub_23BBDBE00();
}

uint64_t (*EnvironmentValues.isAppleWatch.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = sub_23BB7DA88();
  sub_23BBDBDF0();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 17);
  return sub_23BBCC0C4;
}

uint64_t sub_23BBCC0C4(uint64_t a1)
{
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 16);
  return sub_23BBDBE00();
}

ValueMetadata *type metadata accessor for IsAppleWatchKey()
{
  return &type metadata for IsAppleWatchKey;
}

ValueMetadata *type metadata accessor for SleepWidgetFamilyKey()
{
  return &type metadata for SleepWidgetFamilyKey;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id SleepWidgetViewModelProvider.init(healthStore:sleepStore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A130]), sel_init);
  *a3 = a1;
  a3[1] = a2;
  a3[2] = result;
  return result;
}

uint64_t SleepWidgetViewModelProvider.currentSleepStageWidgetViewModel(showLiveContent:completion:)(int a1, void (*a2)(void **, uint64_t), void *a3)
{
  uint64_t v29 = a2;
  LODWORD(v5) = a1;
  uint64_t v6 = sub_23BBDBBA0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)v3;
  uint64_t v10 = *(void **)(v3 + 8);
  uint64_t v28 = *(void **)(v3 + 16);
  sub_23BBDBB80();
  uint64_t v12 = sub_23BBDBB90();
  os_log_type_t v13 = sub_23BBDC880();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v26 = a3;
    uint64_t v15 = v14;
    uint64_t v16 = (void *)swift_slowAlloc();
    int v27 = (int)v5;
    uint64_t v5 = v16;
    v31[0] = v16;
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v30 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, (uint64_t *)v31);
    uint64_t v25 = v6;
    sub_23BBDC950();
    *(_WORD *)(v15 + 12) = 1024;
    LODWORD(v30) = v27 & 1;
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v12, v13, "[%{public}s] getting sleep stage widget view model (live: %{BOOL}d)...", (uint8_t *)v15, 0x12u);
    swift_arrayDestroy();
    uint64_t v17 = v5;
    LOBYTE(v5) = v27;
    MEMORY[0x23ECD1880](v17, -1, -1);
    uint64_t v18 = v15;
    a3 = v26;
    MEMORY[0x23ECD1880](v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v31[0] = v11;
  v31[1] = v10;
  uint64_t v19 = v28;
  v31[2] = v28;
  id v20 = v11;
  id v21 = v10;
  id v22 = v19;
  swift_retain();
  sub_23BBD0CC8(v5 & 1, (void (*)(char *, uint64_t))1, 0, 6, v31, v20, v21, v22, 3u, v29, a3);

  return swift_release();
}

void SleepWidgetViewModelProvider.currentSleepWidgetViewModel(showLiveContent:completion:)(int a1, void (*a2)(char *, void *), uint64_t a3)
{
  int v35 = a1;
  uint64_t v6 = sub_23BBDB860();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v33 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_23BBDBBA0();
  uint64_t v9 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)v3[1];
  os_log_type_t v13 = (void (*)(uint64_t, uint64_t, uint64_t, void *))v3[2];
  uint64_t v36 = *v3;
  int v37 = v12;
  sub_23BBDBB80();
  uint64_t v14 = sub_23BBDBB90();
  os_log_type_t v15 = sub_23BBDC880();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v31 = v13;
    uint64_t v17 = v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v32 = a3;
    uint64_t v19 = v18;
    uint64_t aBlock = v18;
    *(_DWORD *)uint64_t v17 = 136446466;
    uint64_t v38 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &aBlock);
    sub_23BBDC950();
    *(_WORD *)(v17 + 12) = 1024;
    char v20 = v35;
    LODWORD(v38) = v35 & 1;
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v14, v15, "[%{public}s] getting sleep widget view model (live: %{BOOL}d)...", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy();
    uint64_t v21 = v19;
    a3 = v32;
    MEMORY[0x23ECD1880](v21, -1, -1);
    uint64_t v22 = v17;
    os_log_type_t v13 = v31;
    MEMORY[0x23ECD1880](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v34);
    if ((v20 & 1) == 0)
    {
LABEL_3:
      uint64_t aBlock = v36;
      uint64_t v40 = (uint64_t)v37;
      uint64_t v41 = v13;
      uint64_t v23 = (void (*)(void, void))v33;
      sub_23BBDB850();
      SleepWidgetViewModelProvider.sleepWidgetViewModel(showLiveContent:state:date:completion:)(0, 6, v23, a2, a3);
      (*(void (**)(void, uint64_t))(v7 + 8))(v23, v6);
      return;
    }
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v34);
    if ((v35 & 1) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  uint64_t v26 = (void *)v36;
  uint64_t v25 = v37;
  *(void *)(v24 + 32) = v36;
  *(void *)(v24 + 40) = v25;
  *(void *)(v24 + 48) = v13;
  *(unsigned char *)(v24 + 56) = 1;
  int v43 = sub_23BBD1860;
  uint64_t v44 = v24;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v40 = 1107296256;
  uint64_t v41 = sub_23BBCD1BC;
  uint64_t v42 = &block_descriptor;
  int v27 = _Block_copy(&aBlock);
  swift_retain();
  id v28 = v26;
  id v29 = v25;
  uint64_t v30 = v13;
  swift_release();
  objc_msgSend(v29, sel_sleepWidgetStateWithCompletion_, v27);
  _Block_release(v27);
}

uint64_t sub_23BBCC8C0(uint64_t a1, uint64_t a2, void *a3, void (*a4)(char *, void *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v75 = a8;
  uint64_t v74 = a7;
  uint64_t v73 = a6;
  uint64_t v84 = a5;
  uint64_t v12 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  os_log_type_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v81 = (char *)&v70 - v16;
  uint64_t v17 = sub_23BBDB860();
  uint64_t v82 = *(void *)(v17 - 8);
  uint64_t v83 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v72 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_23BBDBBA0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v80 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v88 = (char *)&v70 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v70 - v25;
  sub_23BBDBB80();
  int v27 = sub_23BBDBB90();
  os_log_type_t v28 = sub_23BBDC880();
  BOOL v29 = os_log_type_enabled(v27, v28);
  char v85 = a4;
  uint64_t v86 = v20;
  uint64_t v87 = v19;
  uint64_t v78 = v15;
  uint64_t v79 = (int *)v12;
  uint64_t v76 = a1;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v77 = (void (*)(void, void))swift_slowAlloc();
    v90[0] = (uint64_t)v77;
    *(_DWORD *)uint64_t v30 = 136446466;
    uint64_t v89 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, v90);
    sub_23BBDC950();
    *(_WORD *)(v30 + 12) = 2080;
    id v31 = (id)NSStringFromHKSPSleepWidgetState();
    uint64_t v32 = sub_23BBDC6E0();
    uint64_t v33 = a3;
    unint64_t v35 = v34;

    uint64_t v89 = sub_23BBD0430(v32, v35, v90);
    uint64_t v20 = v86;
    sub_23BBDC950();
    a3 = v33;
    uint64_t v19 = v87;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BB52000, v27, v28, "[%{public}s] sleep widget state: %s", (uint8_t *)v30, 0x16u);
    uint64_t v36 = v77;
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v36, -1, -1);
    MEMORY[0x23ECD1880](v30, -1, -1);
  }

  int v37 = *(void (**)(char *, uint64_t))(v20 + 8);
  v37(v26, v19);
  uint64_t v38 = v88;
  if (a3)
  {
    id v39 = a3;
    sub_23BBDBB80();
    id v40 = a3;
    id v41 = a3;
    uint64_t v42 = sub_23BBDBB90();
    os_log_type_t v43 = sub_23BBDC860();
    BOOL v44 = os_log_type_enabled(v42, v43);
    id v71 = a3;
    uint64_t v77 = (void (*)(void, void))v37;
    if (v44)
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      v90[0] = v46;
      *(_DWORD *)uint64_t v45 = 136446466;
      uint64_t v89 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, v90);
      sub_23BBDC950();
      *(_WORD *)(v45 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v47 = sub_23BBDCBC0();
      uint64_t v89 = sub_23BBD0430(v47, v48, v90);
      sub_23BBDC950();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23BB52000, v42, v43, "[%{public}s] Error getting sleepWidgetState: %{public}s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v46, -1, -1);
      MEMORY[0x23ECD1880](v45, -1, -1);

      v77(v88, v19);
    }
    else
    {

      v37(v38, v19);
    }
    uint64_t v52 = (uint64_t)v78;
    uint64_t v51 = v79;
    uint64_t v53 = v81;
    uint64_t v54 = &v81[v79[5]];
    uint64_t v55 = sub_23BBDB6D0();
    id v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56);
    v56(v54, 1, 1, v55);
    v56(&v53[v51[6]], 1, 1, v55);
    sub_23BBDB850();
    uint64_t v57 = v51[9];
    *(void *)&v53[v57] = objc_msgSend(objc_allocWithZone((Class)sub_23BBDBA90()), sel_init);
    uint64_t v58 = v83;
    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
    v59(&v53[v51[11]], 1, 1, v83);
    v59(&v53[v51[12]], 1, 1, v58);
    v59(&v53[v51[13]], 1, 1, v58);
    *(void *)uint64_t v53 = 0;
    v53[8] = 1;
    v53[v51[7]] = 0;
    uint64_t v60 = &v53[v51[10]];
    *(void *)uint64_t v60 = 0;
    *((void *)v60 + 1) = 0;
    *((void *)v60 + 2) = 0;
    uint64_t v61 = v80;
    sub_23BBDBB80();
    sub_23BBD1A6C((uint64_t)v53, v52);
    id v62 = sub_23BBDBB90();
    os_log_type_t v63 = sub_23BBDC880();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      v90[0] = v65;
      *(_DWORD *)uint64_t v64 = 136446466;
      uint64_t v89 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, v90);
      sub_23BBDC950();
      *(_WORD *)(v64 + 12) = 2080;
      uint64_t v66 = SleepWidgetViewModel.description.getter();
      uint64_t v89 = sub_23BBD0430(v66, v67, v90);
      sub_23BBDC950();
      swift_bridgeObjectRelease();
      sub_23BBD1AD0(v52);
      _os_log_impl(&dword_23BB52000, v62, v63, "[%{public}s] viewmodel=%s", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v65, -1, -1);
      MEMORY[0x23ECD1880](v64, -1, -1);
    }
    else
    {
      sub_23BBD1AD0(v52);
    }

    v77(v61, v87);
    id v68 = v71;
    id v69 = v71;
    v85(v53, v68);

    return sub_23BBD1AD0((uint64_t)v53);
  }
  else
  {
    v90[0] = v73;
    v90[1] = v74;
    v90[2] = v75;
    int v49 = (void (*)(void, void))v72;
    sub_23BBDB850();
    SleepWidgetViewModelProvider.sleepWidgetViewModel(showLiveContent:state:date:completion:)(a9 & 1, v76, v49, v85, v84);
    return (*(uint64_t (**)(void, uint64_t))(v82 + 8))(v49, v83);
  }
}

void sub_23BBCD1BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v8 = a4;
  v7(a2, a3, a4);
  swift_release();
}

void SleepWidgetViewModelProvider.sleepWidgetViewModel(showLiveContent:state:date:completion:)(int a1, uint64_t a2, void (*a3)(void, void), void (*a4)(char *, void *), uint64_t a5)
{
  uint64_t v124 = a4;
  long long v126 = a3;
  uint64_t v121 = a2;
  v129[3] = *(id *)MEMORY[0x263EF8340];
  id v8 = (int *)type metadata accessor for SleepWidgetViewModel();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v117 = &v106[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v106[-v11];
  uint64_t v127 = sub_23BBDB860();
  uint64_t v13 = *(void *)(v127 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v127);
  uint64_t v119 = v15;
  uint64_t v120 = &v106[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v118 = &v106[-v16];
  uint64_t v17 = sub_23BBDBBA0();
  uint64_t v123 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = &v106[-v20];
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v116 = &v106[-v23];
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = &v106[-v25];
  int v27 = *(void **)v5;
  os_log_type_t v28 = *(void **)(v5 + 8);
  BOOL v29 = *(void **)(v5 + 16);
  int v122 = a1;
  uint64_t v125 = a5;
  if ((a1 & 1) == 0)
  {
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    id v41 = *(void (**)(unsigned char *, void (*)(void, void), uint64_t))(v13 + 16);
    uint64_t v42 = v127;
LABEL_13:
    v129[0] = v27;
    v129[1] = v28;
    v129[2] = v29;
    uint64_t v74 = v120;
    uint64_t v75 = v29;
    uint64_t v76 = v27;
    v41(v120, v126, v42);
    unint64_t v77 = (*(unsigned __int8 *)(v13 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v78 = (v119 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v79 = (char *)swift_allocObject();
    *((void *)v79 + 2) = v76;
    *((void *)v79 + 3) = v28;
    uint64_t v80 = v118;
    *((void *)v79 + 4) = v75;
    *((void *)v79 + 5) = v80;
    *((void *)v79 + 6) = v121;
    (*(void (**)(char *, unsigned char *, uint64_t))(v13 + 32))(&v79[v77], v74, v42);
    uint64_t v81 = &v79[v78];
    uint64_t v82 = v125;
    *(void *)uint64_t v81 = v124;
    *((void *)v81 + 1) = v82;
    id v83 = v80;
    swift_retain();
    id v84 = v76;
    id v85 = v28;
    id v86 = v75;
    sub_23BBCECBC(v122 & 1, 7, 0, 0, (void (*)(uint64_t *, void))sub_23BBD19B0, (uint64_t)v79);

    swift_release();
    return;
  }
  uint64_t v109 = v24;
  uint64_t v113 = v12;
  uint64_t v110 = v27;
  uint64_t v112 = v29;
  uint64_t v114 = v13;
  v129[0] = 0;
  uint64_t v111 = v28;
  id v30 = objc_msgSend(v28, sel_sleepScheduleModelWithError_, v129);
  uint64_t v115 = v17;
  if (v30)
  {
    id v31 = v30;
    id v32 = v129[0];
    sub_23BBDBB80();
    id v33 = v31;
    unint64_t v34 = sub_23BBDBB90();
    os_log_type_t v35 = sub_23BBDC880();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      int v37 = (void *)swift_slowAlloc();
      v129[0] = v37;
      *(_DWORD *)uint64_t v36 = 136446466;
      uint64_t v128 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, (uint64_t *)v129);
      sub_23BBDC950();
      *(_WORD *)(v36 + 12) = 2082;
      uint64_t v117 = (unsigned char *)(v36 + 14);
      uint64_t v128 = (uint64_t)v31;
      sub_23BBD1B2C(0, &qword_26AEBC090, &qword_26AEBC088);
      id v38 = v33;
      uint64_t v39 = sub_23BBDC700();
      uint64_t v128 = sub_23BBD0430(v39, v40, (uint64_t *)v129);
      sub_23BBDC950();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BB52000, v34, v35, "[%{public}s] fetched schedule model: %{public}s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v37, -1, -1);
      MEMORY[0x23ECD1880](v36, -1, -1);
    }
    else
    {
    }
    uint64_t v54 = *(void (**)(unsigned char *, uint64_t))(v123 + 8);
    v54(v26, v17);
    uint64_t v55 = v118;
    id v56 = v33;
    uint64_t v57 = v126;
    uint64_t v58 = (void *)sub_23BBDB820();
    uint64_t v59 = objc_msgSend(v56, sel_upcomingResolvedOccurrenceAfterDate_, v58);
    uint64_t v117 = v56;

    uint64_t v118 = v59;
    uint64_t v60 = v59;
    uint64_t v61 = v116;
    sub_23BBDBB80();
    uint64_t v62 = v114;
    uint64_t v42 = v127;
    uint64_t v113 = *(char **)(v114 + 16);
    ((void (*)(unsigned char *, void (*)(void, void), uint64_t))v113)(v55, v57, v127);
    os_log_type_t v63 = v60;
    uint64_t v64 = sub_23BBDBB90();
    os_log_type_t v65 = sub_23BBDC880();
    int v66 = v65;
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v109 = v54;
      uint64_t v68 = v67;
      uint64_t v108 = (void *)swift_slowAlloc();
      v129[0] = v108;
      *(_DWORD *)uint64_t v68 = 136446722;
      int v107 = v66;
      uint64_t v128 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, (uint64_t *)v129);
      sub_23BBDC950();
      *(_WORD *)(v68 + 12) = 2080;
      uint64_t v69 = sub_23BBDB7E0();
      uint64_t v128 = sub_23BBD0430(v69, v70, (uint64_t *)v129);
      sub_23BBDC950();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v62 + 8))(v55, v127);
      *(_WORD *)(v68 + 22) = 2082;
      uint64_t v128 = (uint64_t)v118;
      sub_23BBD1B2C(0, &qword_26AEBC0A0, &qword_26AEBC098);
      uint64_t v71 = sub_23BBDC930();
      uint64_t v128 = sub_23BBD0430(v71, v72, (uint64_t *)v129);
      uint64_t v42 = v127;
      sub_23BBDC950();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BB52000, v64, (os_log_type_t)v107, "[%{public}s] upcomingResolvedOccurrence after %s is: %{public}s", (uint8_t *)v68, 0x20u);
      uint64_t v73 = v108;
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v73, -1, -1);
      MEMORY[0x23ECD1880](v68, -1, -1);

      v109(v61, v115);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v62 + 8))(v55, v42);

      v54(v61, v115);
    }
    uint64_t v13 = v62;
    BOOL v29 = v112;
    os_log_type_t v28 = v111;
    int v27 = v110;
    id v41 = (void (*)(unsigned char *, void (*)(void, void), uint64_t))v113;
    goto LABEL_13;
  }
  id v43 = v129[0];
  BOOL v44 = (void *)sub_23BBDB7B0();

  swift_willThrow();
  sub_23BBDBB80();
  id v45 = v44;
  id v46 = v44;
  uint64_t v47 = sub_23BBDBB90();
  os_log_type_t v48 = sub_23BBDC860();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = swift_slowAlloc();
    int v50 = (void *)swift_slowAlloc();
    v129[0] = v50;
    *(_DWORD *)uint64_t v49 = 136446466;
    uint64_t v128 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, (uint64_t *)v129);
    sub_23BBDC950();
    *(_WORD *)(v49 + 12) = 2082;
    uint64_t v128 = (uint64_t)v44;
    id v51 = v44;
    sub_23BB5D8B4();
    uint64_t v52 = sub_23BBDC700();
    uint64_t v128 = sub_23BBD0430(v52, v53, (uint64_t *)v129);
    sub_23BBDC950();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_23BB52000, v47, v48, "[%{public}s] error getting schedule model: %{public}s", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v50, -1, -1);
    MEMORY[0x23ECD1880](v49, -1, -1);
  }
  else
  {
  }
  long long v126 = *(void (**)(void, void))(v123 + 8);
  v126(v21, v17);
  uint64_t v87 = v44;
  uint64_t v88 = (uint64_t)v113;
  uint64_t v89 = &v113[v8[5]];
  uint64_t v90 = sub_23BBDB6D0();
  uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56);
  v91(v89, 1, 1, v90);
  v91((char *)(v88 + v8[6]), 1, 1, v90);
  sub_23BBDB850();
  uint64_t v92 = v8[9];
  *(void *)(v88 + v92) = objc_msgSend(objc_allocWithZone((Class)sub_23BBDBA90()), sel_init);
  uint64_t v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56);
  uint64_t v94 = v127;
  v93(v88 + v8[11], 1, 1, v127);
  v93(v88 + v8[12], 1, 1, v94);
  v93(v88 + v8[13], 1, 1, v94);
  *(void *)uint64_t v88 = 0;
  *(unsigned char *)(v88 + 8) = 1;
  *(unsigned char *)(v88 + v8[7]) = 0;
  uint64_t v95 = (void *)(v88 + v8[10]);
  void *v95 = 0;
  v95[1] = 0;
  v95[2] = 0;
  uint64_t v96 = (void (*)(void, void))v109;
  sub_23BBDBB80();
  uint64_t v97 = (uint64_t)v117;
  sub_23BBD1A6C(v88, (uint64_t)v117);
  uint64_t v98 = sub_23BBDBB90();
  os_log_type_t v99 = sub_23BBDC880();
  if (os_log_type_enabled(v98, v99))
  {
    uint64_t v100 = swift_slowAlloc();
    uint64_t v101 = (void *)swift_slowAlloc();
    v129[0] = v101;
    *(_DWORD *)uint64_t v100 = 136446466;
    uint64_t v128 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, (uint64_t *)v129);
    sub_23BBDC950();
    *(_WORD *)(v100 + 12) = 2080;
    uint64_t v102 = SleepWidgetViewModel.description.getter();
    uint64_t v128 = sub_23BBD0430(v102, v103, (uint64_t *)v129);
    sub_23BBDC950();
    swift_bridgeObjectRelease();
    sub_23BBD1AD0(v97);
    _os_log_impl(&dword_23BB52000, v98, v99, "[%{public}s] viewmodel=%s", (uint8_t *)v100, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v101, -1, -1);
    MEMORY[0x23ECD1880](v100, -1, -1);
  }
  else
  {
    sub_23BBD1AD0(v97);
  }

  v126(v96, v115);
  id v104 = v87;
  uint64_t v105 = (uint64_t)v113;
  v124(v113, v87);

  sub_23BBD1AD0(v105);
}

uint64_t sub_23BBCDFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void (*a9)(char *, uint64_t), uint64_t a10)
{
  uint64_t v37 = a8;
  uint64_t v38 = a7;
  uint64_t v42 = a10;
  uint64_t v43 = a2;
  id v41 = a9;
  uint64_t v12 = sub_23BBDBBA0();
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v36 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_23BBDB860();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SleepWidgetViewModel();
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v36 - v22;
  uint64_t v24 = *(void **)a1;
  uint64_t v25 = *(void **)(a1 + 8);
  uint64_t v26 = *(void **)(a1 + 16);
  v44[0] = (unint64_t)v24;
  v44[1] = (unint64_t)v25;
  v44[2] = (unint64_t)v26;
  id v27 = a6;
  sub_23BBCE38C(v44);
  v45[0] = (uint64_t)v24;
  v45[1] = (uint64_t)v25;
  v45[2] = (uint64_t)v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v37, v14);
  os_log_type_t v28 = v36;
  sub_23BB5646C(v24, v25, v26);
  SleepWidgetViewModel.init(resolvedOccurrence:summaryResults:state:now:)((char *)a6, v45, v38, 0, (uint64_t)v17, (uint64_t)v23);
  sub_23BBDBB80();
  sub_23BBD1A6C((uint64_t)v23, (uint64_t)v21);
  BOOL v29 = sub_23BBDBB90();
  os_log_type_t v30 = sub_23BBDC880();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v45[0] = v32;
    *(_DWORD *)uint64_t v31 = 136446466;
    v44[0] = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, v45);
    sub_23BBDC950();
    *(_WORD *)(v31 + 12) = 2080;
    uint64_t v33 = SleepWidgetViewModel.description.getter();
    v44[0] = sub_23BBD0430(v33, v34, v45);
    sub_23BBDC950();
    swift_bridgeObjectRelease();
    sub_23BBD1AD0((uint64_t)v21);
    _os_log_impl(&dword_23BB52000, v29, v30, "[%{public}s] viewmodel=%s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v32, -1, -1);
    MEMORY[0x23ECD1880](v31, -1, -1);
  }
  else
  {
    sub_23BBD1AD0((uint64_t)v21);
  }

  (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
  v41(v23, v43);
  return sub_23BBD1AD0((uint64_t)v23);
}

uint64_t sub_23BBCE38C(unint64_t *a1)
{
  uint64_t v2 = sub_23BBDBBA0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v65 - v8;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v65 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v65 - v15;
  unint64_t v17 = *a1;
  if (*a1)
  {
    int v66 = v14;
    uint64_t v69 = v2;
    uint64_t v18 = (void *)a1[1];
    uint64_t v19 = (void *)a1[2];
    id v20 = v19;
    swift_bridgeObjectRetain();
    id v21 = v18;
    sub_23BBDBB80();
    swift_bridgeObjectRetain();
    uint64_t v22 = (void (*)(char *, uint64_t))v21;
    id v23 = v20;
    uint64_t v24 = sub_23BBDBB90();
    os_log_type_t v25 = sub_23BBDC880();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v68 = v3;
    unint64_t v70 = v19;
    if (v26)
    {
      uint64_t v67 = v22;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v72 = v28;
      *(_DWORD *)uint64_t v27 = 136446466;
      uint64_t v71 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &v72);
      sub_23BBDC950();
      *(_WORD *)(v27 + 12) = 2050;
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = sub_23BBDCB20();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v29 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v71 = v29;
      sub_23BBDC950();
      sub_23BB564C0(v17, v18, v70);
      os_log_type_t v30 = v25;
      uint64_t v31 = v18;
      _os_log_impl(&dword_23BB52000, v24, v30, "[%{public}s] found %{public}ld summaries", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v28, -1, -1);
      MEMORY[0x23ECD1880](v27, -1, -1);

      uint64_t v32 = v69;
      uint64_t v33 = *(void (**)(char *, uint64_t))(v68 + 8);
      v33(v16, v69);
      uint64_t v22 = v67;
      if (!v18) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_23BB564C0(v17, v18, v19);

      uint64_t v33 = *(void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v32 = v69;
      v33(v16, v69);
      uint64_t v31 = v18;
      if (!v18) {
        goto LABEL_16;
      }
    }
    objc_msgSend(v22, sel_sleepDuration);
    uint64_t v41 = *(void *)&v40;
    if (v40 > COERCE_DOUBLE(1))
    {
      sub_23BBDBB80();
      uint64_t v42 = sub_23BBDBB90();
      os_log_type_t v43 = sub_23BBDC880();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v67 = v33;
        id v45 = v31;
        uint64_t v46 = v44;
        uint64_t v47 = swift_slowAlloc();
        uint64_t v72 = v47;
        *(_DWORD *)uint64_t v46 = 136446466;
        uint64_t v71 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &v72);
        sub_23BBDC950();
        *(_WORD *)(v46 + 12) = 2050;
        uint64_t v71 = v41;
        sub_23BBDC950();
        _os_log_impl(&dword_23BB52000, v42, v43, "[%{public}s] last time asleep: %{public}f", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23ECD1880](v47, -1, -1);
        MEMORY[0x23ECD1880](v46, -1, -1);

        sub_23BB564C0(v17, v45, v70);
        os_log_type_t v48 = v13;
LABEL_21:
        uint64_t v58 = v32;
        return ((uint64_t (*)(char *, uint64_t))v67)(v48, v58);
      }
      sub_23BB564C0(v17, v31, v70);

      uint64_t v64 = v13;
      return ((uint64_t (*)(char *, uint64_t))v33)(v64, v32);
    }
    objc_msgSend(v22, sel_inBedDuration);
    uint64_t v50 = *(void *)&v49;
    if (v49 > COERCE_DOUBLE(1))
    {
      id v51 = v66;
      sub_23BBDBB80();
      uint64_t v52 = sub_23BBDBB90();
      os_log_type_t v53 = sub_23BBDC880();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        uint64_t v67 = v33;
        uint64_t v55 = v31;
        uint64_t v56 = v54;
        uint64_t v57 = swift_slowAlloc();
        uint64_t v72 = v57;
        *(_DWORD *)uint64_t v56 = 136446466;
        uint64_t v71 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &v72);
        sub_23BBDC950();
        *(_WORD *)(v56 + 12) = 2050;
        uint64_t v71 = v50;
        sub_23BBDC950();
        _os_log_impl(&dword_23BB52000, v52, v53, "[%{public}s] last time in bed: %{public}f", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23ECD1880](v57, -1, -1);
        MEMORY[0x23ECD1880](v56, -1, -1);

        sub_23BB564C0(v17, v55, v70);
        os_log_type_t v48 = v51;
        uint64_t v58 = v69;
        return ((uint64_t (*)(char *, uint64_t))v67)(v48, v58);
      }
      sub_23BB564C0(v17, v31, v70);

      uint64_t v64 = v51;
      return ((uint64_t (*)(char *, uint64_t))v33)(v64, v32);
    }
LABEL_16:
    uint64_t v67 = v33;
    uint64_t v59 = v31;
    sub_23BBDBB80();
    uint64_t v60 = sub_23BBDBB90();
    os_log_type_t v61 = sub_23BBDC880();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      uint64_t v72 = v63;
      *(_DWORD *)uint64_t v62 = 136446210;
      uint64_t v71 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &v72);
      sub_23BBDC950();
      _os_log_impl(&dword_23BB52000, v60, v61, "[%{public}s] last day has no sleep data", v62, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v63, -1, -1);
      MEMORY[0x23ECD1880](v62, -1, -1);

      sub_23BB564C0(v17, v59, v70);
    }
    else
    {
      sub_23BB564C0(v17, v59, v70);
    }
    os_log_type_t v48 = v9;
    goto LABEL_21;
  }
  sub_23BBDBB80();
  unint64_t v34 = sub_23BBDBB90();
  uint64_t v35 = sub_23BBDC880();
  if (os_log_type_enabled(v34, (os_log_type_t)v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = v3;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v72 = v38;
    *(_DWORD *)uint64_t v36 = 136446210;
    uint64_t v71 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &v72);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v34, (os_log_type_t)v35, "[%{public}s] no recentSleepDaySummaries", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v38, -1, -1);
    MEMORY[0x23ECD1880](v36, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v6, v2);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

void sub_23BBCECBC(unint64_t a1, uint64_t a2, int a3, uint64_t a4, void (*a5)(uint64_t *, void), uint64_t a6)
{
  id v85 = a5;
  uint64_t v86 = a6;
  uint64_t v79 = a4;
  int v78 = a3;
  uint64_t v9 = sub_23BBDBBA0();
  uint64_t v87 = *(void *)(v9 - 8);
  uint64_t v88 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  id v83 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v82 = (char *)&v75 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = ((char *)&v75 - v14);
  uint64_t v16 = sub_23BBDB970();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_23BBDB860();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  id v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *v6;
  os_log_type_t v25 = v6[1];
  BOOL v26 = (void (*)(NSObject *, uint64_t))v6[2];
  uint64_t v76 = v24;
  unint64_t v77 = v25;
  sub_23BBDB850();
  id v84 = v26;
  id v27 = objc_msgSend(v26, sel_currentCalendar);
  sub_23BBDB900();

  uint64_t v28 = sub_23BBDB7F0();
  uint64_t v80 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v81 = v16;
  v80(v19, v16);
  os_log_type_t v30 = *(void (**)(char *, uint64_t))(v21 + 8);
  os_log_type_t v29 = v21 + 8;
  v30(v23, v20);
  uint64_t v31 = v28 - a2;
  if (__OFSUB__(v28, a2))
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v16 = v31 + 1;
  if (__OFADD__(v31, 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v32 = a2;
  if ((a1 & 1) == 0
    || (id v33 = objc_msgSend(self, sel_sharedBehavior)) != 0
    && (unint64_t v34 = v33, v35 = objc_msgSend(v33, sel_hksp_useDemoSleepData), v34, v35))
  {
    sub_23BBDBB80();
    uint64_t v36 = sub_23BBDBB90();
    os_log_type_t v37 = sub_23BBDC880();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      id v83 = (char *)swift_slowAlloc();
      v95[0] = (uint64_t)v83;
      *(_DWORD *)uint64_t v38 = 136446466;
      uint64_t aBlock = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, v95);
      sub_23BBDC950();
      *(_WORD *)(v38 + 12) = 2082;
      uint64_t aBlock = v16;
      uint64_t v90 = v32;
      type metadata accessor for HKDayIndexRange(0);
      uint64_t v39 = sub_23BBDC700();
      uint64_t aBlock = sub_23BBD0430(v39, v40, v95);
      sub_23BBDC950();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BB52000, v36, v37, "[%{public}s] generating demo summaries for range: %{public}s", (uint8_t *)v38, 0x16u);
      uint64_t v41 = v83;
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v41, -1, -1);
      MEMORY[0x23ECD1880](v38, -1, -1);
    }

    uint64_t v42 = *(void (**)(NSObject *, uint64_t))(v87 + 8);
    v42(v15, v88);
    a2 = sub_23BB8A620(0, &qword_26AEBC078);
    id v43 = objc_msgSend(v84, sel_currentCalendar);
    sub_23BBDB900();

    a1 = sub_23BBDC8B0();
    v80(v19, v81);
    uint64_t v19 = v82;
    sub_23BBDBB80();
    swift_bridgeObjectRetain_n();
    uint64_t v15 = sub_23BBDBB90();
    os_log_type_t v29 = sub_23BBDC880();
    if (!os_log_type_enabled(v15, v29))
    {

      swift_bridgeObjectRelease_n();
      v42(v19, v88);
      goto LABEL_16;
    }
    id v84 = v42;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t aBlock = v16;
    *(_DWORD *)uint64_t v20 = 136446722;
    v95[0] = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &aBlock);
    sub_23BBDC950();
    *(_WORD *)(v20 + 12) = 2082;
    if (!(a1 >> 62))
    {
      uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_11:
      v95[0] = v44;
      uint64_t v45 = sub_23BBDCB60();
      v95[0] = sub_23BBD0430(v45, v46, &aBlock);
      sub_23BBDC950();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2082;
      uint64_t v47 = swift_bridgeObjectRetain();
      uint64_t v48 = MEMORY[0x23ECD0E20](v47, a2);
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      v95[0] = sub_23BBD0430(v48, v50, &aBlock);
      sub_23BBDC950();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BB52000, v15, v29, "[%{public}s] using %{public}s demo summaries: %{public}s", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v16, -1, -1);
      MEMORY[0x23ECD1880](v20, -1, -1);

      v84(v19, v88);
LABEL_16:
      SleepDaySummaryResults.init(summaries:)(a1, (unint64_t *)&aBlock);
      uint64_t v72 = (void *)v90;
      uint64_t v73 = v91;
      swift_bridgeObjectRetain();
      id v74 = v72;
      v85(&aBlock, 0);

      swift_bridgeObjectRelease_n();
      return;
    }
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v44 = sub_23BBDCB20();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v51 = swift_allocObject();
  uint64_t v52 = v86;
  *(void *)(v51 + 16) = v85;
  *(void *)(v51 + 24) = v52;
  *(unsigned char *)(v51 + 32) = v78 & 1;
  uint64_t v54 = v76;
  os_log_type_t v53 = v77;
  *(void *)(v51 + 40) = v76;
  *(void *)(v51 + 48) = v53;
  uint64_t v55 = v84;
  *(void *)(v51 + 56) = v84;
  *(void *)(v51 + 64) = a2;
  uint64_t v56 = v79;
  *(void *)(v51 + 72) = v79;
  id v57 = objc_allocWithZone(MEMORY[0x263F0A778]);
  uint64_t v93 = sub_23BBD1CE0;
  uint64_t v94 = v51;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v90 = 1107296256;
  uint64_t v91 = sub_23BBD0378;
  uint64_t v92 = &block_descriptor_9;
  uint64_t v58 = _Block_copy(&aBlock);
  swift_retain();
  id v59 = v54;
  id v60 = v53;
  os_log_type_t v61 = v55;
  id v62 = objc_msgSend(v57, sel_initWithMorningIndexRange_ascending_limit_options_resultsHandler_, v16, v32, 1, 0, v56, v58);
  _Block_release(v58);
  swift_release();
  id v63 = objc_allocWithZone(MEMORY[0x263F0A770]);
  uint64_t v64 = (void *)sub_23BBDC6D0();
  id v65 = objc_msgSend(v63, sel_initWithIdentifier_mode_, v64, 0);

  objc_msgSend(v62, sel_setCacheSettings_, v65);
  id v66 = v62;
  uint64_t v67 = (void *)sub_23BBDC6D0();
  objc_msgSend(v66, sel_setDebugIdentifier_, v67);

  sub_23BBDBB80();
  uint64_t v68 = sub_23BBDBB90();
  os_log_type_t v69 = sub_23BBDC880();
  if (os_log_type_enabled(v68, v69))
  {
    unint64_t v70 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    uint64_t aBlock = v71;
    *(_DWORD *)unint64_t v70 = 136446210;
    v95[0] = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &aBlock);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v68, v69, "[%{public}s] running HealthKit query", v70, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v71, -1, -1);
    MEMORY[0x23ECD1880](v70, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v87 + 8))(v83, v88);
  objc_msgSend(v59, sel_executeQuery_, v66);
}

uint64_t SleepWidgetViewModelProvider.sleepStageWidgetViewModel(showLiveContent:overrideState:completion:)(int a1, unsigned __int8 *a2, void (*a3)(void **, uint64_t), void *a4)
{
  unsigned __int8 v8 = *a2;
  uint64_t v9 = *(void **)(v4 + 8);
  uint64_t v10 = *(void **)(v4 + 16);
  v15[0] = *(void **)v4;
  v15[1] = v9;
  void v15[2] = v10;
  uint64_t v11 = v15[0];
  id v12 = v9;
  id v13 = v10;
  swift_retain();
  sub_23BBD0CC8(a1, (void (*)(char *, uint64_t))1, 0, 6, v15, v11, v12, v13, v8, a3, a4);

  return swift_release();
}

uint64_t sub_23BBCF808(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void, void), uint64_t a5, int a6, void *a7, void *a8, void *a9, char *a10, uint64_t a11)
{
  id v102 = a3;
  unint64_t v103 = a8;
  os_log_type_t v99 = a7;
  LODWORD(v100) = a6;
  uint64_t v105 = a4;
  uint64_t v106 = a5;
  uint64_t v12 = sub_23BBDC490();
  uint64_t v101 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v87 - v16;
  uint64_t v18 = sub_23BBDBBA0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v87 - v23;
  uint64_t v25 = sub_23BBDC450();
  id v104 = *(void (***)(char *, uint64_t))(v25 - 8);
  MEMORY[0x270FA5388](v25);
  id v27 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_23BBDC470();
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    id v33 = v32;
    uint64_t v34 = v29;
    uint64_t v35 = v30;
    sub_23BB8A620(0, &qword_26AEBC080);
    swift_bridgeObjectRetain();
    uint64_t v36 = (void *)sub_23BBDC8F0();
    os_log_type_t v37 = (void *)swift_allocObject();
    uint64_t v38 = v105;
    uint64_t v39 = v106;
    v37[2] = a2;
    v37[3] = v38;
    v37[4] = v39;
    uint64_t v112 = sub_23BBD1E60;
    uint64_t v113 = v37;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v109 = 1107296256;
    uint64_t v110 = sub_23BBD0334;
    uint64_t v111 = &block_descriptor_21;
    unint64_t v40 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_23BBDC460();
    uint64_t aBlock = MEMORY[0x263F8EE78];
    sub_23BBD1DD8(&qword_26AEBC038, MEMORY[0x263F8F030]);
    sub_23BBD1D80();
    sub_23BBD1DD8(&qword_26AEBC060, (void (*)(uint64_t))sub_23BBD1D80);
    sub_23BBDC9B0();
    MEMORY[0x23ECD0F90](0, v33, v27, v40);
    _Block_release(v40);

    v104[1](v27, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v33, v34);
  }
  uint64_t v97 = v22;
  uint64_t v98 = v19;
  uint64_t v93 = v15;
  uint64_t v42 = v103;
  uint64_t v94 = v17;
  uint64_t v95 = v27;
  uint64_t v96 = v25;
  id v43 = (uint64_t (*)(uint64_t *, id))v105;
  id v44 = v102;
  if (!v102) {
    goto LABEL_9;
  }
  uint64_t v89 = v32;
  uint64_t v90 = v12;
  uint64_t v91 = v30;
  uint64_t v92 = v29;
  id v45 = v102;
  unint64_t v46 = v24;
  sub_23BBDBB80();
  id v47 = v44;
  id v48 = v44;
  unint64_t v49 = sub_23BBDBB90();
  os_log_type_t v50 = sub_23BBDC860();
  int v51 = v50;
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v52 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    uint64_t aBlock = v53;
    *(_DWORD *)uint64_t v52 = 136446466;
    LODWORD(v88) = v51;
    uint64_t v107 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &aBlock);
    sub_23BBDC950();
    *(_WORD *)(v52 + 12) = 2082;
    uint64_t v87 = v52 + 14;
    swift_getErrorValue();
    uint64_t v54 = sub_23BBDCBC0();
    uint64_t v107 = sub_23BBD0430(v54, v55, &aBlock);
    sub_23BBDC950();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_23BB52000, v49, (os_log_type_t)v88, "[%{public}s] failed to load summaries with error: %{public}s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v53, -1, -1);
    MEMORY[0x23ECD1880](v52, -1, -1);
  }
  else
  {
  }
  uint64_t v56 = *(void (**)(char *, uint64_t))(v98 + 8);
  id v57 = v46;
  uint64_t v58 = v18;
  v56(v57, v18);
  id v59 = v42;
  id v60 = v97;
  if (v100)
  {

LABEL_9:
    uint64_t aBlock = 0;
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    return v43(&aBlock, v44);
  }
  uint64_t v100 = a11;
  uint64_t v97 = a10;
  sub_23BBDBB80();
  os_log_type_t v61 = sub_23BBDBB90();
  os_log_type_t v62 = sub_23BBDC880();
  BOOL v63 = os_log_type_enabled(v61, v62);
  unint64_t v103 = a9;
  if (v63)
  {
    uint64_t v64 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    uint64_t v65 = aBlock;
    *(_DWORD *)uint64_t v64 = 136446210;
    uint64_t v88 = v64 + 4;
    uint64_t v107 = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &aBlock);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v61, v62, "[%{public}s] retrying", v64, 0xCu);
    swift_arrayDestroy();
    uint64_t v66 = v65;
    id v59 = v42;
    MEMORY[0x23ECD1880](v66, -1, -1);
    MEMORY[0x23ECD1880](v64, -1, -1);
  }
  else
  {
  }
  v56(v60, v58);
  uint64_t v67 = v104;
  uint64_t v68 = v101;
  uint64_t v69 = v106;
  unint64_t v70 = v94;
  uint64_t v71 = v93;
  sub_23BB8A620(0, &qword_26AEBC080);
  uint64_t v72 = (void *)sub_23BBDC8F0();
  sub_23BBDC480();
  MEMORY[0x23ECD0B30](v71, 1.0);
  uint64_t v73 = *(void (***)(char *, uint64_t))(v68 + 8);
  uint64_t v101 = v68 + 8;
  id v104 = v73;
  uint64_t v74 = v90;
  ((void (*)(char *, uint64_t))v73)(v71, v90);
  uint64_t v75 = (void *)swift_allocObject();
  uint64_t v76 = v99;
  v75[2] = v99;
  v75[3] = v59;
  unint64_t v77 = v103;
  int v78 = v97;
  v75[4] = v103;
  void v75[5] = v78;
  uint64_t v79 = v105;
  v75[6] = v100;
  v75[7] = v79;
  v75[8] = v69;
  uint64_t v112 = sub_23BBD1D34;
  uint64_t v113 = v75;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v109 = 1107296256;
  uint64_t v110 = sub_23BBD0334;
  uint64_t v111 = &block_descriptor_15;
  uint64_t v80 = _Block_copy(&aBlock);
  swift_retain();
  id v81 = v76;
  id v82 = v59;
  id v83 = v77;
  swift_release();
  id v84 = v89;
  sub_23BBDC460();
  uint64_t aBlock = MEMORY[0x263F8EE78];
  sub_23BBD1DD8(&qword_26AEBC038, MEMORY[0x263F8F030]);
  sub_23BBD1D80();
  sub_23BBD1DD8(&qword_26AEBC060, (void (*)(uint64_t))sub_23BBD1D80);
  id v85 = v95;
  uint64_t v86 = v96;
  sub_23BBDC9B0();
  MEMORY[0x23ECD0F70](v70, v84, v85, v80);
  _Block_release(v80);

  v67[1](v85, v86);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v84, v92);
  return ((uint64_t (*)(char *, uint64_t))v104)(v70, v74);
}

uint64_t sub_23BBD0298(uint64_t a1, void (*a2)(unint64_t *, void))
{
  unint64_t v3 = swift_bridgeObjectRetain();
  SleepDaySummaryResults.init(summaries:)(v3, v8);
  uint64_t v4 = (void *)v8[1];
  id v5 = (id)v8[2];
  swift_bridgeObjectRetain();
  id v6 = v4;
  a2(v8, 0);

  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23BBD0334(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_23BBD0378(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23BB8A620(0, &qword_26AEBC078);
    uint64_t v5 = sub_23BBDC780();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_23BBD0430(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_23BBD0504(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_23BBD1E6C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_23BBD1E6C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_23BBD0504(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23BBDC960();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_23BBD06C0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_23BBDCAB0();
  if (!v8)
  {
    sub_23BBDCB10();
    __break(1u);
LABEL_17:
    uint64_t result = sub_23BBDCB40();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_23BBD06C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_23BBD0758(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_23BBD0934(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_23BBD0934(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23BBD0758(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_23BBD08D0(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_23BBDCA80();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_23BBDCB10();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_23BBDC760();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_23BBDCB40();
    __break(1u);
LABEL_14:
    uint64_t result = sub_23BBDCB10();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_23BBD08D0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_23BBD1EC8();
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23BBD0934(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_23BBD1EC8();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_23BBDCB40();
  __break(1u);
  return result;
}

void sub_23BBD0A80(unint64_t *a1, uint64_t a2, char a3, void (*a4)(void **, uint64_t))
{
  int64_t v7 = (void *)a1[1];
  int64_t v9 = (void *)a1[2];
  v21[0] = *a1;
  unint64_t v8 = v21[0];
  v21[1] = (unint64_t)v7;
  void v21[2] = (unint64_t)v9;
  sub_23BBCE38C(v21);
  if (v8)
  {
    if (v8 >> 62)
    {
      sub_23BB5646C((id)v8, v7, v9);
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_23BBDCB20();
      if (v10) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      sub_23BB5646C((id)v8, v7, v9);
      swift_bridgeObjectRetain();
      if (v10)
      {
LABEL_4:
        uint64_t v17 = (void *)MEMORY[0x263F8EE78];
        sub_23BBDCAE0();
        if (v10 < 0)
        {
          __break(1u);
          return;
        }
        char v16 = a3;
        uint64_t v11 = 0;
        do
        {
          if ((v8 & 0xC000000000000001) != 0) {
            id v12 = (id)MEMORY[0x23ECD1130](v11, v8);
          }
          else {
            id v12 = *(id *)(v8 + 8 * v11 + 32);
          }
          uint64_t v13 = v12;
          if (objc_msgSend(v12, sel_summaryFilteredToLastPeriod)) {

          }
          ++v11;
          sub_23BBDCAC0();
          sub_23BBDCAF0();
          sub_23BBDCB00();
          sub_23BBDCAD0();
        }
        while (v10 != v11);
        unint64_t v14 = (unint64_t)v17;
        swift_bridgeObjectRelease();
        a3 = v16;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v14 = MEMORY[0x263F8EE78];
LABEL_16:
    SleepDaySummaryResults.init(summaries:)(v14, (unint64_t *)&v17);
    sub_23BB564C0(v8, v7, v9);
    uint64_t v15 = v17;
    int64_t v7 = v18;
    int64_t v9 = v19;
    goto LABEL_17;
  }
  uint64_t v15 = 0;
LABEL_17:
  uint64_t v17 = v15;
  uint64_t v18 = v7;
  uint64_t v19 = v9;
  char v20 = a3;
  sub_23BB5646C(v15, v7, v9);
  a4(&v17, a2);
  sub_23BB564C0((uint64_t)v15, v7, v9);
  sub_23BB564C0((uint64_t)v15, v7, v9);
}

void sub_23BBD0CC8(int a1, void (*a2)(char *, uint64_t), int a3, uint64_t a4, void **a5, void *a6, void *a7, void *a8, unsigned __int8 a9, void (*a10)(void **, uint64_t), void *a11)
{
  uint64_t v107 = a8;
  uint64_t v96 = a4;
  int v95 = a3;
  uint64_t v106 = a2;
  LODWORD(v104) = a1;
  uint64_t v111 = a10;
  uint64_t v14 = sub_23BBDBBA0();
  uint64_t v109 = *(void *)(v14 - 8);
  uint64_t v110 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v97 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  unint64_t v103 = (char *)&v92 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v98 = (char *)&v92 - v19;
  uint64_t v20 = sub_23BBDB970();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = (void *)sub_23BBDB860();
  uint64_t v24 = *(v105 - 1);
  MEMORY[0x270FA5388](v105);
  uint64_t v26 = (char *)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = a6;
  *(void *)(v27 + 16) = a6;
  *(void *)(v27 + 24) = a7;
  uint64_t v29 = v107;
  *(void *)(v27 + 32) = v107;
  int v102 = a9;
  *(unsigned char *)(v27 + 40) = a9;
  uint64_t v30 = (uint64_t)v106;
  *(void *)(v27 + 48) = v111;
  *(void *)(v27 + 56) = a11;
  uint64_t v108 = v27;
  uint64_t v93 = *a5;
  uint64_t v31 = a5[1];
  uint64_t v32 = a5[2];
  uint64_t v94 = v31;
  id v33 = v28;
  id v34 = a7;
  id v35 = v29;
  uint64_t v107 = a11;
  swift_retain();
  sub_23BBDB850();
  unint64_t v36 = 0x264E09000uLL;
  id v37 = objc_msgSend(v32, sel_currentCalendar);
  sub_23BBDB900();

  uint64_t v38 = sub_23BBDB7F0();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v40 = v21 + 8;
  uint64_t v39 = v41;
  os_log_type_t v99 = v23;
  uint64_t v100 = v40;
  uint64_t v101 = v20;
  v41(v23, v20);
  id v43 = *(void (**)(char *, void *))(v24 + 8);
  uint64_t v42 = v24 + 8;
  v43(v26, v105);
  id v44 = (char *)v38 - v30;
  if (__OFSUB__(v38, v30))
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v45 = (uint64_t)(v44 + 1);
  if (__OFADD__(v44, 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((v104 & 1) == 0
    || (id v46 = objc_msgSend(self, sel_sharedBehavior)) != 0
    && (v47 = v46, unsigned int v48 = objc_msgSend(v46, sel_hksp_useDemoSleepData), v47, v48))
  {
    id v104 = v39;
    uint64_t v105 = v32;
    unint64_t v49 = v98;
    sub_23BBDBB80();
    os_log_type_t v50 = sub_23BBDBB90();
    os_log_type_t v51 = sub_23BBDC880();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v53 = v45;
      uint64_t v54 = swift_slowAlloc();
      v118[0] = v54;
      *(_DWORD *)uint64_t v52 = 136446466;
      uint64_t aBlock = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, v118);
      sub_23BBDC950();
      *(_WORD *)(v52 + 12) = 2082;
      uint64_t aBlock = v53;
      uint64_t v113 = v30;
      type metadata accessor for HKDayIndexRange(0);
      uint64_t v55 = sub_23BBDC700();
      uint64_t aBlock = sub_23BBD0430(v55, v56, v118);
      sub_23BBDC950();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BB52000, v50, v51, "[%{public}s] generating demo summaries for range: %{public}s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v54, -1, -1);
      MEMORY[0x23ECD1880](v52, -1, -1);
    }

    id v57 = *(void (**)(char *, uint64_t))(v109 + 8);
    v57(v49, v110);
    uint64_t v58 = v103;
    uint64_t v40 = sub_23BB8A620(0, &qword_26AEBC078);
    id v59 = objc_msgSend(v105, sel_currentCalendar);
    id v60 = v99;
    sub_23BBDB900();

    unint64_t v36 = sub_23BBDC8B0();
    v104(v60, v101);
    sub_23BBDBB80();
    swift_bridgeObjectRetain_n();
    uint64_t v38 = sub_23BBDBB90();
    LOBYTE(v32) = sub_23BBDC880();
    if (!os_log_type_enabled(v38, (os_log_type_t)v32))
    {

      swift_bridgeObjectRelease_n();
      v57(v58, v110);
      goto LABEL_16;
    }
    uint64_t v106 = v57;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    uint64_t aBlock = v42;
    *(_DWORD *)uint64_t v30 = 136446722;
    v118[0] = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &aBlock);
    sub_23BBDC950();
    *(_WORD *)(v30 + 12) = 2082;
    if (!(v36 >> 62))
    {
      uint64_t v61 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_11:
      v118[0] = v61;
      uint64_t v62 = sub_23BBDCB60();
      v118[0] = sub_23BBD0430(v62, v63, &aBlock);
      sub_23BBDC950();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 22) = 2082;
      uint64_t v64 = swift_bridgeObjectRetain();
      uint64_t v65 = MEMORY[0x23ECD0E20](v64, v40);
      unint64_t v67 = v66;
      swift_bridgeObjectRelease();
      v118[0] = sub_23BBD0430(v65, v67, &aBlock);
      sub_23BBDC950();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BB52000, v38, (os_log_type_t)v32, "[%{public}s] using %{public}s demo summaries: %{public}s", (uint8_t *)v30, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x23ECD1880](v42, -1, -1);
      MEMORY[0x23ECD1880](v30, -1, -1);

      v106(v103, v110);
LABEL_16:
      SleepDaySummaryResults.init(summaries:)(v36, (unint64_t *)&aBlock);
      uint64_t v89 = (void *)v113;
      uint64_t v90 = v114;
      swift_bridgeObjectRetain();
      id v91 = v89;
      sub_23BBD0A80((unint64_t *)&aBlock, 0, v102, v111);
      swift_release();

      swift_bridgeObjectRelease_n();
      return;
    }
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_23BBDCB20();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v68 = swift_allocObject();
  uint64_t v69 = v108;
  *(void *)(v68 + 16) = sub_23BBD1F70;
  *(void *)(v68 + 24) = v69;
  *(unsigned char *)(v68 + 32) = v95 & 1;
  unint64_t v70 = v93;
  uint64_t v71 = v94;
  *(void *)(v68 + 40) = v93;
  *(void *)(v68 + 48) = v71;
  *(void *)(v68 + 56) = v32;
  *(void *)(v68 + 64) = v30;
  uint64_t v72 = v96;
  *(void *)(v68 + 72) = v96;
  id v73 = objc_allocWithZone(MEMORY[0x263F0A778]);
  uint64_t v116 = sub_23BBD1CE0;
  uint64_t v117 = v68;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v113 = 1107296256;
  uint64_t v114 = sub_23BBD0378;
  uint64_t v115 = &block_descriptor_31;
  uint64_t v74 = _Block_copy(&aBlock);
  swift_retain();
  id v75 = v70;
  id v76 = v71;
  id v77 = v32;
  id v78 = objc_msgSend(v73, sel_initWithMorningIndexRange_ascending_limit_options_resultsHandler_, v45, v30, 1, 0, v72, v74);
  _Block_release(v74);
  swift_release();
  id v79 = objc_allocWithZone(MEMORY[0x263F0A770]);
  uint64_t v80 = (void *)sub_23BBDC6D0();
  id v81 = objc_msgSend(v79, sel_initWithIdentifier_mode_, v80, 0);

  objc_msgSend(v78, sel_setCacheSettings_, v81);
  id v82 = v78;
  id v83 = (void *)sub_23BBDC6D0();
  objc_msgSend(v82, sel_setDebugIdentifier_, v83);

  id v84 = v97;
  sub_23BBDBB80();
  id v85 = sub_23BBDBB90();
  os_log_type_t v86 = sub_23BBDC880();
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v87 = (uint8_t *)swift_slowAlloc();
    uint64_t v88 = swift_slowAlloc();
    uint64_t aBlock = v88;
    *(_DWORD *)uint64_t v87 = 136446210;
    v118[0] = sub_23BBD0430(0xD00000000000001CLL, 0x800000023BBDFF40, &aBlock);
    sub_23BBDC950();
    _os_log_impl(&dword_23BB52000, v85, v86, "[%{public}s] running HealthKit query", v87, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23ECD1880](v88, -1, -1);
    MEMORY[0x23ECD1880](v87, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
  objc_msgSend(v75, sel_executeQuery_, v82);
  swift_release();
}

uint64_t sub_23BBD1810()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t sub_23BBD1860(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_23BBCC8C0(a1, a2, a3, *(void (**)(char *, void *))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned char *)(v3 + 56));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_23BBD18AC()
{
  uint64_t v1 = sub_23BBDB860();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6 + 16, v5);
}

uint64_t sub_23BBD19B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_23BBDB860() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_23BBCDFD0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(void *)(v2 + 48), v7, *(void (**)(char *, uint64_t))v8, *(void *)(v8 + 8));
}

uint64_t sub_23BBD1A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepWidgetViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BBD1AD0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepWidgetViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23BBD1B2C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_23BB8A620(255, a3);
    unint64_t v4 = sub_23BBDC940();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for SleepWidgetViewModelProvider(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

void destroy for SleepWidgetViewModelProvider(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t assignWithCopy for SleepWidgetViewModelProvider(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  uint64_t v10 = *(void **)(a2 + 16);
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  return a1;
}

uint64_t assignWithTake for SleepWidgetViewModelProvider(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for SleepWidgetViewModelProvider()
{
  return &type metadata for SleepWidgetViewModelProvider;
}

uint64_t sub_23BBD1CE4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

void sub_23BBD1D34()
{
  sub_23BBCECBC(1uLL, *(void *)(v0 + 40), 1, *(void *)(v0 + 48), *(void (**)(uint64_t *, void))(v0 + 56), *(void *)(v0 + 64));
}

void sub_23BBD1D80()
{
  if (!qword_26AEBC058)
  {
    sub_23BBDC450();
    unint64_t v0 = sub_23BBDC7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC058);
    }
  }
}

uint64_t sub_23BBD1DD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BBD1E20()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_23BBD1E60()
{
  return sub_23BBD0298(*(void *)(v0 + 16), *(void (**)(unint64_t *, void))(v0 + 24));
}

uint64_t sub_23BBD1E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_23BBD1EC8()
{
  if (!qword_26AEBBD08)
  {
    unint64_t v0 = sub_23BBDCB70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBBD08);
    }
  }
}

uint64_t sub_23BBD1F20()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

void sub_23BBD1F70(unint64_t *a1, uint64_t a2)
{
  sub_23BBD0A80(a1, a2, *(unsigned char *)(v2 + 40), *(void (**)(void **, uint64_t))(v2 + 48));
}

uint64_t objectdestroy_5Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_23BBD1FD0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_23BBCF808(a1, a2, a3, *(uint64_t (**)(void, void))(v3 + 16), *(void *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), *(void **)(v3 + 40), *(void **)(v3 + 48), *(void **)(v3 + 56), *(char **)(v3 + 64), *(void *)(v3 + 72));
}

void destroy for SleepStageWidgetSmallView(uint64_t a1)
{
  sub_23BB63394(*(void *)a1, *(unsigned char *)(a1 + 8));
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();

    uint64_t v2 = *(void **)(a1 + 32);
  }
}

uint64_t initializeWithCopy for SleepStageWidgetSmallView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_23BB631DC(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    id v7 = *(void **)(a2 + 24);
    id v8 = *(void **)(a2 + 32);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    swift_bridgeObjectRetain();
    id v9 = v7;
    id v10 = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for SleepStageWidgetSmallView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_23BB631DC(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_23BB63394(v6, v7);
  id v8 = (_OWORD *)(a1 + 16);
  id v10 = (_OWORD *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v9)
    {
      *(void *)(a1 + 16) = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void **)(a1 + 24);
      id v12 = *(void **)(a2 + 24);
      *(void *)(a1 + 24) = v12;
      id v13 = v12;

      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = *(void **)(a2 + 32);
      *(void *)(a1 + 32) = v15;
      id v16 = v15;
    }
    else
    {
      sub_23BB547F0(a1 + 16);
      uint64_t v21 = *(void *)(a2 + 32);
      *id v8 = *v10;
      *(void *)(a1 + 32) = v21;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 16) = v9;
    uint64_t v17 = *(void **)(a2 + 24);
    *(void *)(a1 + 24) = v17;
    uint64_t v18 = *(void **)(a2 + 32);
    *(void *)(a1 + 32) = v18;
    swift_bridgeObjectRetain();
    id v19 = v17;
    id v20 = v18;
  }
  else
  {
    long long v22 = *v10;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *id v8 = v22;
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SleepStageWidgetSmallView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_23BB63394(v6, v7);
  uint64_t v8 = a2[2];
  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  if (!v8)
  {
    sub_23BB547F0(a1 + 16);
LABEL_5:
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = a2[3];

  id v10 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = a2[4];

LABEL_6:
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStageWidgetSmallView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepStageWidgetSmallView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStageWidgetSmallView()
{
  return &type metadata for SleepStageWidgetSmallView;
}

unint64_t sub_23BBD23C0(uint64_t a1)
{
  unint64_t result = sub_23BB86EC8();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BBD23E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BBD2404@<X0>(uint64_t a1@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v45 = sub_23BBDBF40();
  uint64_t v44 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  unint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD34C0(0, &qword_26AEBB6E0, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  char v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v40 - v8;
  sub_23BBD2CDC();
  uint64_t v43 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  id v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD30D4();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD3134();
  uint64_t v42 = v18;
  uint64_t v41 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  id v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v21 = v1[1];
  long long v53 = *v1;
  v54[0] = v21;
  *(_OWORD *)((char *)v54 + 9) = *(long long *)((char *)v1 + 25);
  v47[0] = sub_23BBDBE60();
  v47[1] = 0;
  char v48 = 0;
  uint64_t v49 = sub_23BBDBE10();
  uint64_t v50 = 0;
  char v51 = 0;
  sub_23BBD29F4(&v53, (uint64_t)&v52);
  id v22 = (id)HKSPSleepURL();
  if (v22)
  {
    uint64_t v23 = v22;
    sub_23BBDB7C0();

    uint64_t v24 = sub_23BBDB7D0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 0, 1, v24);
  }
  else
  {
    uint64_t v25 = sub_23BBDB7D0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 1, 1, v25);
  }
  sub_23BB5656C((uint64_t)v7, (uint64_t)v9);
  sub_23BBD2D90(0);
  sub_23BBD308C(&qword_26AEBCAE8, sub_23BBD2D90);
  sub_23BBDC1F0();
  sub_23BB56600((uint64_t)v9);
  sub_23BBD32A4((uint64_t)v47, (uint64_t (*)(void))sub_23BBD2D90);
  char v26 = sub_23BBDBFB0();
  uint64_t v27 = v53;
  char v28 = BYTE8(v53);
  sub_23BBD3304((uint64_t)&v53, (void (*)(void, void))sub_23BB631DC, (void (*)(uint64_t, uint64_t, uint64_t))sub_23BB5646C);
  sub_23BB631DC(v27, v28);
  sub_23BB77FBC(v27, v28);
  sub_23BB63394(v27, v28);
  sub_23BBD3304((uint64_t)&v53, (void (*)(void, void))sub_23BB63394, (void (*)(uint64_t, uint64_t, uint64_t))sub_23BB564C0);
  sub_23BBDBBB0();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v37 = v43;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v13, v43);
  uint64_t v38 = &v17[*(int *)(v15 + 36)];
  *uint64_t v38 = v26;
  *((void *)v38 + 1) = v30;
  *((void *)v38 + 2) = v32;
  *((void *)v38 + 3) = v34;
  *((void *)v38 + 4) = v36;
  v38[40] = 0;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v37);
  sub_23BBDBF30();
  sub_23BBD31CC();
  sub_23BBDC250();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v3, v45);
  sub_23BBD32A4((uint64_t)v17, (uint64_t (*)(void))sub_23BBD30D4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v46, v20, v42);
}

uint64_t sub_23BBD29F4@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)uint64_t v17 = a1[1];
  *(_OWORD *)((char *)&v17[1] + 1) = *(_OWORD *)((char *)a1 + 25);
  id v13 = &type metadata for SleepStageWidgetViewModel;
  uint64_t v14 = &protocol witness table for SleepStageWidgetViewModel;
  uint64_t v4 = swift_allocObject();
  *(void *)&long long v12 = v4;
  *(_OWORD *)(v4 + 16) = a1[1];
  *(_OWORD *)(v4 + 25) = *(_OWORD *)((char *)a1 + 25);
  uint64_t v5 = (_OWORD *)swift_allocObject();
  long long v6 = a1[1];
  v5[1] = *a1;
  v5[2] = v6;
  *(_OWORD *)((char *)v5 + 41) = *(_OWORD *)((char *)a1 + 25);
  *((void *)&v10 + 1) = swift_getKeyPath();
  char v11 = 0;
  sub_23BBBE3C8(&v12, (uint64_t)v8);
  *((void *)&v9 + 1) = sub_23BBD3410;
  *(void *)&long long v10 = v5;
  char v16 = v11;
  v15[0] = v8[0];
  v15[1] = v8[1];
  void v15[2] = v9;
  v15[3] = v10;
  sub_23BBD341C((uint64_t)v15, (uint64_t)v8);
  sub_23BBD341C((uint64_t)v8, a2);
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  sub_23BBD3480(v17);
  sub_23BBD3304((uint64_t)a1, (void (*)(void, void))sub_23BB631DC, (void (*)(uint64_t, uint64_t, uint64_t))sub_23BB5646C);
  sub_23BBD32A4((uint64_t)v15, (uint64_t (*)(void))sub_23BBD2ED4);
  return sub_23BBD32A4((uint64_t)v8, (uint64_t (*)(void))sub_23BBD2ED4);
}

id *sub_23BBD2B6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SleepStageResultsView(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  char v7 = (uint64_t *)((char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_OWORD *)long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)&v12[1] + 1) = *(_OWORD *)(a1 + 25);
  *char v7 = swift_getKeyPath();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BBD34C0(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  long long v9 = (uint64_t *)((char *)v7 + *(int *)(v5 + 28));
  uint64_t *v9 = swift_getKeyPath();
  sub_23BBD34C0(0, &qword_26AEBC950, MEMORY[0x263F1FC90], v8);
  swift_storeEnumTagMultiPayload();
  long long v10 = (_OWORD *)((char *)v7 + *(int *)(v5 + 32));
  _OWORD *v10 = *(_OWORD *)v12;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)&v12[1] + 1);
  sub_23BB56700((uint64_t)v7, a2);
  return sub_23BBD3480(v12);
}

void sub_23BBD2CDC()
{
  if (!qword_26AEBCAB0)
  {
    sub_23BBD2D90(255);
    sub_23BBD308C(&qword_26AEBCAE8, sub_23BBD2D90);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_26AEBCAB0);
    }
  }
}

void sub_23BBD2D90(uint64_t a1)
{
}

void sub_23BBD2DD8()
{
  if (!qword_26AEBCAE0)
  {
    sub_23BBD34C0(255, &qword_26AEBCB10, (uint64_t (*)(uint64_t))sub_23BBD2E6C, MEMORY[0x263F1BAC8]);
    sub_23BBD2FD0();
    unint64_t v0 = sub_23BBDC370();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBCAE0);
    }
  }
}

void sub_23BBD2E6C()
{
  if (!qword_26AEBC8C0)
  {
    sub_23BBD2ED4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26AEBC8C0);
    }
  }
}

void sub_23BBD2ED4(uint64_t a1)
{
}

void sub_23BBD2F1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_23BBD2F9C()
{
  return sub_23BBD308C(&qword_26AEBC880, (void (*)(uint64_t))type metadata accessor for SleepStageResultsView);
}

unint64_t sub_23BBD2FD0()
{
  unint64_t result = qword_26AEBCB08;
  if (!qword_26AEBCB08)
  {
    sub_23BBD34C0(255, &qword_26AEBCB10, (uint64_t (*)(uint64_t))sub_23BBD2E6C, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBCB08);
  }
  return result;
}

uint64_t sub_23BBD3058()
{
  return sub_23BBD308C(&qword_26AEBCAD8, (void (*)(uint64_t))sub_23BBD2DD8);
}

uint64_t sub_23BBD308C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BBD30D4()
{
  if (!qword_26AEBC978)
  {
    sub_23BBD2CDC();
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEBC978);
    }
  }
}

void sub_23BBD3134()
{
  if (!qword_268A7E488)
  {
    sub_23BBD30D4();
    sub_23BBD31CC();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7E488);
    }
  }
}

unint64_t sub_23BBD31CC()
{
  unint64_t result = qword_26AEBC970;
  if (!qword_26AEBC970)
  {
    sub_23BBD30D4();
    sub_23BBD2D90(255);
    sub_23BBD308C(&qword_26AEBCAE8, sub_23BBD2D90);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEBC970);
  }
  return result;
}

uint64_t sub_23BBD32A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BBD3304(uint64_t a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  a2(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  a3(v5, v6, v7);
  return a1;
}

uint64_t sub_23BBD336C()
{
  if (*(void *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x270FA0238](v0, 41, 7);
}

uint64_t sub_23BBD33B8()
{
  sub_23BB63394(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  if (*(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x270FA0238](v0, 57, 7);
}

id *sub_23BBD3410@<X0>(uint64_t a1@<X8>)
{
  return sub_23BBD2B6C(v1 + 16, a1);
}

uint64_t sub_23BBD341C(uint64_t a1, uint64_t a2)
{
  sub_23BBD2ED4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id *sub_23BBD3480(id *a1)
{
  return a1;
}

void sub_23BBD34C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BBD3524()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *sub_23BBD3590(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a3[7];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    unint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_23BBD3808(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[8];
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = *(void *)v15;
    char v17 = v15[8];
    sub_23BB631DC(*(void *)v15, v17);
    *(void *)uint64_t v14 = v16;
    v14[8] = v17;
    uint64_t v18 = a3[9];
    uint64_t v19 = (uint64_t *)((char *)v7 + v18);
    id v20 = (uint64_t *)((char *)a2 + v18);
    sub_23BBD3808(0, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = sub_23BBDC0D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      void *v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = a3[10];
    uint64_t v23 = (char *)v7 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = *(void *)v24;
    char v26 = v24[8];
    sub_23BB631DC(*(void *)v24, v26);
    *(void *)uint64_t v23 = v25;
    v23[8] = v26;
  }
  return v7;
}

void sub_23BBD3808(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23BBD386C(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  sub_23BBD3808(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(a1 + a2[8]), *(unsigned char *)(a1 + a2[8] + 8));
  uint64_t v6 = a1 + a2[9];
  sub_23BBD3808(0, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_23BBDC0D0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = *(void *)v8;
  char v10 = *(unsigned char *)(v8 + 8);
  return sub_23BB63394(v9, v10);
}

void *sub_23BBD3A0C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  sub_23BBD3808(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_23BBDC5A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  char v15 = v13[8];
  sub_23BB631DC(*(void *)v13, v15);
  *(void *)uint64_t v12 = v14;
  v12[8] = v15;
  uint64_t v16 = a3[9];
  char v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  sub_23BBD3808(0, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = sub_23BBDC0D0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  else
  {
    *char v17 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = a3[10];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = *(void *)v22;
  char v24 = v22[8];
  sub_23BB631DC(*(void *)v22, v24);
  *(void *)uint64_t v21 = v23;
  v21[8] = v24;
  return a1;
}

void *sub_23BBD3C38(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = a3[7];
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BBDA5D4((uint64_t)a1 + v6, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    sub_23BBD3808(0, &qword_26AEBBC40, v9, v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_23BBDC5A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)v14;
  char v16 = v14[8];
  sub_23BB631DC(*(void *)v14, v16);
  uint64_t v17 = *(void *)v13;
  char v18 = v13[8];
  *(void *)uint64_t v13 = v15;
  v13[8] = v16;
  sub_23BB63394(v17, v18);
  if (a1 != a2)
  {
    uint64_t v19 = a3[9];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A668];
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BBDA5D4((uint64_t)a1 + v19, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
    sub_23BBD3808(0, &qword_268A7DDC0, v22, v23);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = sub_23BBDC0D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(v20, v21, v24);
    }
    else
    {
      *uint64_t v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v25 = a3[10];
  char v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = *(void *)v27;
  char v29 = v27[8];
  sub_23BB631DC(*(void *)v27, v29);
  uint64_t v30 = *(void *)v26;
  char v31 = v26[8];
  *(void *)char v26 = v28;
  v26[8] = v29;
  sub_23BB63394(v30, v31);
  return a1;
}

uint64_t sub_23BBD3EE4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  sub_23BBD3808(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  uint64_t v10 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_23BBDC5A0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  char v16 = (void *)(a1 + v13);
  uint64_t v17 = (const void *)(a2 + v13);
  sub_23BBD3808(0, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
  uint64_t v19 = v18;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_23BBDC0D0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v16, v17, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  return a1;
}

void *sub_23BBD40FC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = a3[7];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BBDA5D4((uint64_t)a1 + v7, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
    sub_23BBD3808(0, &qword_26AEBBC40, v10, v11);
    uint64_t v13 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_23BBDC5A0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v8, v9, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v15 = a3[8];
  char v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  LOBYTE(v17) = v17[8];
  uint64_t v19 = *(void *)v16;
  char v20 = v16[8];
  *(void *)char v16 = v18;
  v16[8] = (char)v17;
  sub_23BB63394(v19, v20);
  if (a1 != a2)
  {
    uint64_t v21 = a3[9];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A668];
    uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_23BBDA5D4((uint64_t)a1 + v21, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
    sub_23BBD3808(0, &qword_268A7DDC0, v24, v25);
    uint64_t v27 = v26;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = sub_23BBDC0D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v22, v23, v28);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
    }
  }
  uint64_t v29 = a3[10];
  uint64_t v30 = (char *)a1 + v29;
  char v31 = (char *)a2 + v29;
  uint64_t v32 = *(void *)v31;
  LOBYTE(v31) = v31[8];
  uint64_t v33 = *(void *)v30;
  char v34 = v30[8];
  *(void *)uint64_t v30 = v32;
  v30[8] = (char)v31;
  sub_23BB63394(v33, v34);
  return a1;
}

uint64_t sub_23BBD4398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23BBD43AC);
}

uint64_t sub_23BBD43AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_23BBD3808(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_23BBD3808(0, &qword_268A7E4B8, MEMORY[0x263F1A668], MEMORY[0x263F185D0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_23BBD4538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23BBD454C);
}

uint64_t sub_23BBD454C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_23BBD3808(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_23BBD3808(0, &qword_268A7E4B8, MEMORY[0x263F1A668], MEMORY[0x263F185D0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for SleepWidgetChartView()
{
  uint64_t result = qword_268A7E4C0;
  if (!qword_268A7E4C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_23BBD4724()
{
  sub_23BBD3808(319, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    sub_23BBD3808(319, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_23BBD487C()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 sub_23BBD4898@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BBDC870();
    uint64_t v22 = (void *)sub_23BBDBF70();
    sub_23BBDBB70();
  }
  sub_23BBDBC80();
  a9[4] = v28;
  a9[5] = v29;
  a9[6] = v30;
  *a9 = v24;
  a9[1] = v25;
  __n128 result = v27;
  a9[2] = v26;
  a9[3] = v27;
  return result;
}

__n128 sub_23BBD4A24@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  char v18 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BBDC870();
    __n128 v27 = (void *)sub_23BBDBF70();
    sub_23BBDBB70();

    char v18 = a17;
  }
  sub_23BBDBC80();
  *(void *)a9 = a16;
  *(unsigned char *)(a9 + 8) = v18 & 1;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  __n128 result = v32;
  *(_OWORD *)(a9 + 48) = v31;
  *(__n128 *)(a9 + 64) = v32;
  return result;
}

uint64_t sub_23BBD4BD0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BBDC870();
    uint64_t v23 = (void *)sub_23BBDBF70();
    sub_23BBDBB70();
  }
  sub_23BBDBC80();
  long long v24 = *(_OWORD *)(v13 + 16);
  long long v25 = *(_OWORD *)(v13 + 32);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v24;
  *(_OWORD *)(a9 + 32) = v25;
  *(_OWORD *)(a9 + 104) = v30;
  *(_OWORD *)(a9 + 120) = v31;
  *(_OWORD *)(a9 + 136) = v32;
  *(_OWORD *)(a9 + 152) = v33;
  *(_OWORD *)(a9 + 56) = v27;
  *(_OWORD *)(a9 + 72) = v28;
  *(void *)(a9 + 48) = *(void *)(v13 + 48);
  *(_OWORD *)(a9 + 88) = v29;
  return swift_retain();
}

__n128 sub_23BBD4D9C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t, uint64_t), uint64_t (*a17)(void))
{
  uint64_t v18 = v17;
  char v20 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BBDC870();
    long long v29 = (void *)sub_23BBDBF70();
    sub_23BBDBB70();

    char v20 = a17;
  }
  sub_23BBDBC80();
  a16(v18, a9);
  long long v30 = (_OWORD *)(a9 + *(int *)(v20(0) + 36));
  v30[4] = v36;
  v30[5] = v37;
  v30[6] = v38;
  *long long v30 = v32;
  v30[1] = v33;
  __n128 result = v35;
  void v30[2] = v34;
  v30[3] = v35;
  return result;
}

uint64_t sub_23BBD4F70()
{
  return sub_23BBDBD80();
}

uint64_t sub_23BBD4F94(uint64_t a1)
{
  uint64_t v2 = sub_23BBDC570();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_23BBDBD90();
}

void sub_23BBD505C()
{
  qword_26AEBB6B0 = 0x401C000000000000;
}

void sub_23BBD506C()
{
  qword_268A7E490 = 0x4026000000000000;
}

void sub_23BBD507C()
{
  qword_268A7E498 = 0x401C000000000000;
}

double sub_23BBD508C()
{
  id v0 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v0, sel_scale);
  double v2 = v1;

  double result = 1.0 / v2;
  *(double *)&qword_268A7E4A0 = 1.0 / v2;
  return result;
}

void sub_23BBD50F8()
{
  qword_268A7E4A8 = 0x4022000000000000;
}

void sub_23BBD5108()
{
  qword_268A7E4B0 = 0x4028000000000000;
}

uint64_t sub_23BBD5118@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v97 = a2;
  sub_23BBD8D78();
  uint64_t v82 = v3;
  MEMORY[0x270FA5388](v3);
  id v83 = (uint64_t *)((char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BBD952C();
  uint64_t v87 = v5;
  uint64_t v86 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v85 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD9754(0);
  uint64_t v96 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  id v84 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v88 = (uint64_t)&v79 - v10;
  sub_23BBD92D0(0, &qword_268A7E5D0, (uint64_t (*)(uint64_t))sub_23BBD9754, (uint64_t (*)(uint64_t))sub_23BBD977C, MEMORY[0x263F19B20]);
  uint64_t v94 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v95 = (uint64_t)&v79 - v12;
  sub_23BBD97A4();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v80 = (uint64_t *)((char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BBD977C(0);
  uint64_t v93 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v79 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v81 = (uint64_t)&v79 - v18;
  uint64_t v19 = sub_23BBDC5A0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v91 = (uint64_t)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  long long v25 = (char *)&v79 - v24;
  MEMORY[0x270FA5388](v23);
  long long v27 = (char *)&v79 - v26;
  uint64_t v28 = sub_23BBDC0D0();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  long long v31 = (char *)&v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBDBC00();
  double v33 = v32;
  sub_23BBDBC00();
  double v35 = v34;
  double v36 = 0.0;
  if ((*(unsigned char *)(a1 + 8) & 2) != 0)
  {
    sub_23BBDC020();
    type metadata accessor for SleepWidgetChartView();
    sub_23BB787A0((uint64_t)v31);
    sub_23BBDB980();
    double v36 = v37;
    swift_release();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  }
  double v38 = v33 - v36;
  uint64_t v39 = type metadata accessor for SleepWidgetChartView();
  sub_23BB77A10((uint64_t)v27);
  uint64_t v40 = (uint64_t *)a1;
  uint64_t v41 = *(void *)(a1 + 8);
  uint64_t v42 = *(int *)(v39 + 32);
  uint64_t v92 = v40;
  uint64_t v43 = (uint64_t)v40 + v42;
  uint64_t v44 = *(uint64_t *)((char *)v40 + v42);
  char v45 = *((unsigned char *)v40 + v42 + 8);
  sub_23BB631DC(v44, v45);
  char v46 = sub_23BB77FBC(v44, v45);
  sub_23BB63394(v44, v45);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v27, v19);
  if ((*(unsigned int (**)(char *, uint64_t))(v20 + 88))(v25, v19) == *MEMORY[0x263F1FD08])
  {
    if (v46)
    {
      if (qword_268A7DA18 != -1) {
        swift_once();
      }
      uint64_t v47 = qword_268A7E4B0;
    }
    else
    {
      if (qword_268A7DA10 != -1) {
        swift_once();
      }
      uint64_t v47 = qword_268A7E4A8;
    }
    uint64_t v90 = v47;
  }
  else
  {
    if ((v41 & 4) != 0)
    {
      if (qword_268A7DA00 != -1) {
        swift_once();
      }
      char v48 = &qword_268A7E498;
    }
    else
    {
      if (qword_268A7D9F8 != -1) {
        swift_once();
      }
      char v48 = &qword_268A7E490;
    }
    uint64_t v90 = *v48;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v19);
  }
  uint64_t v49 = *(void (**)(char *, uint64_t))(v20 + 8);
  v49(v27, v19);
  uint64_t v89 = *(void *)&v38;
  uint64_t v50 = v91;
  sub_23BB77A10(v91);
  char v51 = v92;
  unint64_t v52 = v92[1];
  uint64_t v53 = (v52 >> 1) & 1;
  uint64_t v54 = (v52 >> 2) & 1;
  uint64_t v55 = *(void *)v43;
  char v56 = *(unsigned char *)(v43 + 8);
  sub_23BB631DC(*(void *)v43, v56);
  char v57 = sub_23BB77FBC(v55, v56);
  sub_23BB63394(v55, v56);
  double v58 = sub_23BBD5BCC(v53, v54, v57 & 1, v35);
  v49((char *)v50, v19);
  uint64_t v59 = *v51;
  if (*v51)
  {
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_23BBDBE10();
    uint64_t v61 = (uint64_t)v83;
    *id v83 = v60;
    *(void *)(v61 + 8) = 0;
    *(unsigned char *)(v61 + 16) = 0;
    sub_23BBDA068();
    sub_23BBD6088(v59, (uint64_t)v51, v90, v89, 1, v61 + *(int *)(v62 + 44), v58);
    *(void *)&long long v98 = v59;
    sub_23BB83558(0, &qword_268A7E5A8, (uint64_t)&type metadata for SleepWidgetChartBar, MEMORY[0x263F8D488]);
    sub_23BBD9624(&qword_268A7E5B0, (void (*)(uint64_t))sub_23BBD8D78);
    sub_23BBD966C();
    unint64_t v63 = v85;
    sub_23BBDC1B0();
    swift_bridgeObjectRelease();
    sub_23BBDA008(v61, (uint64_t (*)(void))sub_23BBD8D78);
    sub_23BBDC410();
    sub_23BBDBBE0();
    uint64_t v64 = v86;
    uint64_t v65 = v84;
    uint64_t v66 = v87;
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v84, v63, v87);
    unint64_t v67 = &v65[*(int *)(v96 + 36)];
    long long v68 = v99;
    *(_OWORD *)unint64_t v67 = v98;
    *((_OWORD *)v67 + 1) = v68;
    *((_OWORD *)v67 + 2) = v100;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v66);
    uint64_t v69 = (uint64_t)v65;
    uint64_t v70 = v88;
    sub_23BBD9DDC(v69, v88, (uint64_t (*)(void))sub_23BBD9754);
    sub_23BBD9D74(v70, v95, (uint64_t (*)(void))sub_23BBD9754);
    swift_storeEnumTagMultiPayload();
    sub_23BBD9E44();
    sub_23BBD9F60();
    sub_23BBDBED0();
    uint64_t v71 = sub_23BBD9754;
  }
  else
  {
    uint64_t v72 = sub_23BBDBE10();
    uint64_t v73 = (uint64_t)v80;
    *uint64_t v80 = v72;
    *(void *)(v73 + 8) = 0;
    *(unsigned char *)(v73 + 16) = 0;
    sub_23BBD9CDC();
    sub_23BBD78B8((uint64_t)v51, v90, v89, 1, v73 + *(int *)(v74 + 44), v58);
    sub_23BBDC410();
    sub_23BBDBBE0();
    uint64_t v75 = v79;
    sub_23BBD9D74(v73, v79, (uint64_t (*)(void))sub_23BBD97A4);
    id v76 = (_OWORD *)(v75 + *(int *)(v93 + 36));
    long long v77 = v99;
    _OWORD *v76 = v98;
    v76[1] = v77;
    v76[2] = v100;
    sub_23BBDA008(v73, (uint64_t (*)(void))sub_23BBD97A4);
    uint64_t v70 = v81;
    sub_23BBD9DDC(v75, v81, (uint64_t (*)(void))sub_23BBD977C);
    sub_23BBD9D74(v70, v95, (uint64_t (*)(void))sub_23BBD977C);
    swift_storeEnumTagMultiPayload();
    sub_23BBD9E44();
    sub_23BBD9F60();
    sub_23BBDBED0();
    uint64_t v71 = sub_23BBD977C;
  }
  return sub_23BBDA008(v70, (uint64_t (*)(void))v71);
}

double sub_23BBD5BCC(int a1, int a2, int a3, double a4)
{
  uint64_t v5 = v4;
  int v34 = a1;
  int v35 = a3;
  int v33 = a2;
  uint64_t v7 = sub_23BBDC5A0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  double v32 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v31 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v31 - v14;
  if (qword_26AEBB6F0 != -1) {
    swift_once();
  }
  double v16 = *(double *)&qword_26AEBB6B0;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v17(v15, v4, v7);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v8 + 88);
  int v19 = v18(v15, v7);
  int v20 = *MEMORY[0x263F1FD08];
  if (v19 == *MEMORY[0x263F1FD08])
  {
    if (v35)
    {
      if (qword_268A7DA18 != -1) {
        swift_once();
      }
      uint64_t v21 = qword_268A7E4B0;
    }
    else
    {
      if (qword_268A7DA10 != -1) {
        swift_once();
      }
      uint64_t v21 = qword_268A7E4A8;
    }
  }
  else
  {
    if (v33)
    {
      if (qword_268A7DA00 != -1) {
        swift_once();
      }
      uint64_t v22 = &qword_268A7E498;
    }
    else
    {
      if (qword_268A7D9F8 != -1) {
        swift_once();
      }
      uint64_t v22 = &qword_268A7E490;
    }
    uint64_t v21 = *v22;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  }
  double v23 = v16 * *(double *)&v21;
  if (v34)
  {
    if (qword_268A7DA08 != -1) {
      swift_once();
    }
    double v24 = *(double *)&qword_268A7E4A0 * (*(double *)&qword_26AEBB6B0 + 1.0);
    double v25 = *(double *)&qword_26AEBB6B0 + *(double *)&qword_26AEBB6B0;
  }
  else
  {
    double v25 = *(double *)&qword_26AEBB6B0 + -1.0;
    double v24 = 0.0;
  }
  double v26 = (a4 - v23 - v24) / v25;
  v17(v13, v5, v7);
  if (v18(v13, v7) == v20)
  {
    if ((v35 & 1) == 0)
    {
      long long v27 = v32;
      v17(v32, v5, v7);
      if (v18(v27, v7) == v20)
      {
        if (qword_268A7DA10 != -1) {
          swift_once();
        }
        double v28 = *(double *)&qword_268A7E4A8;
      }
      else
      {
        if (v33)
        {
          if (qword_268A7DA00 != -1) {
            swift_once();
          }
          uint64_t v29 = &qword_268A7E498;
        }
        else
        {
          if (qword_268A7D9F8 != -1) {
            swift_once();
          }
          uint64_t v29 = &qword_268A7E490;
        }
        double v28 = *(double *)v29;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v27, v7);
      }
      return v28 * 0.8;
    }
  }
  else
  {
    double v26 = floor(v26);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
  return v26;
}

uint64_t sub_23BBD6088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  int v55 = a5;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  double v58 = (char *)a2;
  sub_23BBD3808(0, &qword_268A7E4D8, (uint64_t (*)(uint64_t))sub_23BBD8E0C, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v57 = (uint64_t)&KeyPath - v11;
  uint64_t v12 = type metadata accessor for SleepWidgetChartView();
  uint64_t v52 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v52 + 64);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&KeyPath - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD9938(0, &qword_268A7E518, sub_23BBD9020);
  uint64_t v16 = v15;
  uint64_t v56 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  int v19 = (char *)&KeyPath - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&KeyPath - v20;
  v68[0] = a1;
  uint64_t v22 = sub_23BBAC800();
  if (v23 & 1) != 0 || (v24 = v22, v68[0] = a1, uint64_t v25 = sub_23BBACAD4(), (v26))
  {
    sub_23BBD8E0C(0);
    double v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
    return v28(a6, 1, 1, v27);
  }
  else
  {
    uint64_t v50 = v25;
    uint64_t v51 = a6;
    if ((v58[8] & 2) != 0)
    {
      sub_23BBDC2D0();
      uint64_t v30 = sub_23BBDC2E0();
      swift_release();
      if (qword_268A7DA08 != -1) {
        swift_once();
      }
      sub_23BBDC410();
      sub_23BBDBBE0();
      uint64_t v73 = v30;
      uint64_t v74 = v68[27];
      char v75 = v69;
      uint64_t v76 = v70;
      char v77 = v71;
      long long v78 = v72;
      sub_23BBDC410();
      sub_23BBD4BD0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v61, 0.0, 1, INFINITY, 0);
      swift_release();
      char v31 = sub_23BBDBFB0();
      sub_23BBDBBB0();
      v60[0] = 0;
      char v62 = v31;
      uint64_t v63 = v32;
      uint64_t v64 = v33;
      uint64_t v65 = v34;
      uint64_t v66 = v35;
      char v67 = 0;
      nullsub_1(v61);
    }
    else
    {
      sub_23BBDA100((uint64_t)v61);
    }
    sub_23BBDAC78((uint64_t)v61, (uint64_t)v68, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, MEMORY[0x263F8D8F0]);
    uint64_t v36 = *(void *)(a1 + 16);
    v61[0] = 0;
    v61[1] = v36;
    uint64_t KeyPath = swift_getKeyPath();
    sub_23BBD9D74((uint64_t)v58, (uint64_t)&KeyPath - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SleepWidgetChartView);
    unint64_t v37 = (*(unsigned __int8 *)(v52 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    unint64_t v38 = (v13 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = v53;
    *(void *)(v39 + 16) = a1;
    *(void *)(v39 + 24) = v40;
    *(void *)(v39 + 32) = v54;
    *(unsigned char *)(v39 + 40) = v55 & 1;
    uint64_t v41 = v50;
    *(void *)(v39 + 48) = v24;
    *(void *)(v39 + 56) = v41;
    sub_23BBD9DDC((uint64_t)v14, v39 + v37, (uint64_t (*)(void))type metadata accessor for SleepWidgetChartView);
    *(double *)(v39 + v38) = a7;
    sub_23BBD8FD0(0, &qword_26AEBBA88, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    sub_23BBD9020(0);
    sub_23BB6771C();
    sub_23BBD9624(&qword_268A7E678, sub_23BBD9020);
    swift_bridgeObjectRetain();
    sub_23BBDC3D0();
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
    sub_23BBDAC78((uint64_t)v68, (uint64_t)v59, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, MEMORY[0x263F8D8F0]);
    uint64_t v43 = v56;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v44(v19, v21, v16);
    double v58 = v21;
    sub_23BBDAC78((uint64_t)v59, (uint64_t)v60, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v42);
    uint64_t v45 = v57;
    sub_23BBDAC78((uint64_t)v60, v57, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v42);
    sub_23BBD8E40(0);
    v44((char *)(v45 + *(int *)(v46 + 48)), v19, v16);
    sub_23BBDA418((uint64_t)v60);
    uint64_t v47 = *(void (**)(char *, uint64_t))(v43 + 8);
    v47(v58, v16);
    v47(v19, v16);
    sub_23BBDAC78((uint64_t)v59, (uint64_t)v61, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v42);
    sub_23BBDA444((uint64_t)v61);
    sub_23BBD8E0C(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v45, 0, 1, v48);
    return sub_23BBDAC78(v45, v51, &qword_268A7E4D8, (uint64_t (*)(uint64_t))sub_23BBD8E0C, v42);
  }
}

uint64_t sub_23BBD67C0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v40 = a7;
  int v16 = a5 & 1;
  sub_23BBD9090();
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  char v23 = (char *)&v39 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v39 - v24;
  unint64_t v26 = *a1;
  *(void *)char v23 = sub_23BBDBE50();
  *((void *)v23 + 1) = 0;
  v23[16] = 0;
  sub_23BBDA470();
  sub_23BBD6C08(a2, v26, a3, a4, v16, a6, (uint64_t)&v23[*(int *)(v27 + 44)], a8, a9);
  sub_23BBD9DDC((uint64_t)v23, (uint64_t)v25, (uint64_t (*)(void))sub_23BBD9090);
  if ((*(unsigned char *)(a6 + 8) & 2) != 0)
  {
    sub_23BBDC2D0();
    uint64_t v28 = sub_23BBDC2E0();
    swift_release();
    if (qword_268A7DA08 != -1) {
      swift_once();
    }
    sub_23BBDC410();
    sub_23BBDBBE0();
    uint64_t v57 = v28;
    uint64_t v58 = v52;
    char v59 = v53;
    uint64_t v60 = v54;
    char v61 = v55;
    long long v62 = v56;
    sub_23BBDC410();
    sub_23BBD4BD0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v42, 0.0, 1, INFINITY, 0);
    swift_release();
    char v29 = sub_23BBDBFB0();
    sub_23BBDBBB0();
    v41[0] = 0;
    v44[8] = v42[8];
    v44[9] = v42[9];
    uint64_t v45 = v43;
    v44[4] = v42[4];
    v44[5] = v42[5];
    v44[6] = v42[6];
    v44[7] = v42[7];
    v44[0] = v42[0];
    v44[1] = v42[1];
    v44[2] = v42[2];
    unint64_t v44[3] = v42[3];
    char v46 = v29;
    uint64_t v47 = v30;
    uint64_t v48 = v31;
    uint64_t v49 = v32;
    uint64_t v50 = v33;
    char v51 = 0;
    nullsub_1(v44);
  }
  else
  {
    sub_23BBDA100((uint64_t)v44);
  }
  sub_23BBDAC78((uint64_t)v44, (uint64_t)v63, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, MEMORY[0x263F8D8F0]);
  sub_23BBD9D74((uint64_t)v25, (uint64_t)v20, (uint64_t (*)(void))sub_23BBD9090);
  uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BBDAC78((uint64_t)v63, (uint64_t)v41, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, MEMORY[0x263F8D8F0]);
  uint64_t v35 = v40;
  sub_23BBD9D74((uint64_t)v20, v40, (uint64_t (*)(void))sub_23BBD9090);
  sub_23BBD9054(0);
  uint64_t v37 = v35 + *(int *)(v36 + 48);
  sub_23BBDAC78((uint64_t)v41, (uint64_t)v42, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v34);
  sub_23BBDAC78((uint64_t)v42, v37, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v34);
  sub_23BBDA418((uint64_t)v42);
  sub_23BBDA008((uint64_t)v25, (uint64_t (*)(void))sub_23BBD9090);
  sub_23BBDAC78((uint64_t)v41, (uint64_t)v44, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v34);
  sub_23BBDA444((uint64_t)v44);
  return sub_23BBDA008((uint64_t)v20, (uint64_t (*)(void))sub_23BBD9090);
}

uint64_t sub_23BBD6C08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  int v108 = a5;
  uint64_t v106 = a3;
  uint64_t v107 = a4;
  sub_23BBD3808(0, &qword_268A7E560, (uint64_t (*)(uint64_t))sub_23BBD91F8, MEMORY[0x263F8D8F0]);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v93 - v19;
  uint64_t v21 = (int *)type metadata accessor for BarView(0);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (uint64_t *)((char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v22);
  uint64_t v111 = (uint64_t)&v93 - v25;
  sub_23BBD91D0(0);
  uint64_t v109 = v26;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD91A8(0);
  uint64_t v110 = v29;
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v93 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD9180(0);
  uint64_t v33 = MEMORY[0x270FA5388](v32 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v33);
  uint64_t result = MEMORY[0x270FA5388](v34);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v39 = *(void *)(a1 + 16);
  if (v39 <= a2)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v101 = v37;
  unint64_t v103 = v20;
  uint64_t v104 = a7;
  uint64_t v105 = v18;
  unint64_t v96 = v39;
  uint64_t v40 = (void *)(a1 + 48 * a2);
  uint64_t v41 = v40[4];
  uint64_t v42 = v40[5];
  uint64_t v97 = v28;
  long long v98 = v31;
  uint64_t v44 = v40[6];
  uint64_t v43 = v40[7];
  long long v100 = (char *)&v93 - v36;
  unint64_t v102 = a2;
  uint64_t v45 = v40[8];
  uint64_t v94 = v40[9];
  BOOL v95 = (*(void *)(a6 + 8) & 1) == 0;
  uint64_t v99 = v38;
  uint64_t *v24 = swift_getKeyPath();
  char v46 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_23BBD3808(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v47 = a6;
  uint64_t v48 = (uint64_t *)((char *)v24 + v21[5]);
  *uint64_t v48 = swift_getKeyPath();
  sub_23BBD3808(0, &qword_26AEBC950, MEMORY[0x263F1FC90], v46);
  uint64_t v49 = v47;
  swift_storeEnumTagMultiPayload();
  uint64_t v50 = (char *)v24 + v21[6];
  *(void *)uint64_t v50 = swift_getKeyPath();
  v50[8] = 0;
  char v51 = (uint64_t *)((char *)v24 + v21[7]);
  void *v51 = v41;
  v51[1] = v42;
  v51[2] = v44;
  v51[3] = v43;
  uint64_t v52 = v94;
  v51[4] = v45;
  v51[5] = v52;
  char v53 = (char *)v24 + v21[8];
  uint64_t v54 = v107;
  *(void *)char v53 = v106;
  *((void *)v53 + 1) = v54;
  v53[16] = v108 & 1;
  char v55 = (double *)((char *)v24 + v21[9]);
  double *v55 = a8;
  v55[1] = a9;
  *((unsigned char *)v24 + v21[10]) = v95;
  uint64_t v56 = v111;
  sub_23BBD9DDC((uint64_t)v24, v111, type metadata accessor for BarView);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v57 = (uint64_t)v100;
  swift_bridgeObjectRetain();
  unint64_t v58 = v102;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v59 = sub_23BBDBFE0();
  uint64_t v60 = *(void *)(v49 + 8);
  sub_23BBDBBB0();
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v69 = (uint64_t)v97;
  sub_23BBD9D74(v56, (uint64_t)v97, type metadata accessor for BarView);
  uint64_t v70 = v69 + *(int *)(v109 + 36);
  *(unsigned char *)uint64_t v70 = v59;
  *(void *)(v70 + 8) = v62;
  *(void *)(v70 + 16) = v64;
  *(void *)(v70 + 24) = v66;
  *(void *)(v70 + 32) = v68;
  *(unsigned char *)(v70 + 40) = 0;
  sub_23BBDA008(v56, type metadata accessor for BarView);
  char v71 = sub_23BBDC000();
  sub_23BBDBBB0();
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  uint64_t v79 = v78;
  uint64_t v80 = (uint64_t)v98;
  sub_23BBD9D74(v69, (uint64_t)v98, (uint64_t (*)(void))sub_23BBD91D0);
  uint64_t v81 = v80 + *(int *)(v110 + 36);
  *(unsigned char *)uint64_t v81 = v71;
  *(void *)(v81 + 8) = v73;
  *(void *)(v81 + 16) = v75;
  *(void *)(v81 + 24) = v77;
  *(void *)(v81 + 32) = v79;
  *(unsigned char *)(v81 + 40) = 0;
  sub_23BBDA008(v69, (uint64_t (*)(void))sub_23BBD91D0);
  uint64_t v82 = sub_23BBDC410();
  uint64_t v83 = v99;
  sub_23BBD4D9C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v99, 0.0, 1, INFINITY, 0, v82, v84, (void (*)(uint64_t, uint64_t))sub_23BBDA8E8, (uint64_t (*)(void))sub_23BBD9180);
  sub_23BBDA008(v80, (uint64_t (*)(void))sub_23BBD91A8);
  sub_23BBD9DDC(v83, v57, (uint64_t (*)(void))sub_23BBD9180);
  if ((v60 & 2) != 0)
  {
    uint64_t v86 = (uint64_t)v103;
    sub_23BBD73F4(v58, (uint64_t)v103);
    sub_23BBD91F8();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v86, 0, 1, v87);
  }
  else
  {
    sub_23BBD91F8();
    uint64_t v86 = (uint64_t)v103;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v103, 1, 1, v85);
  }
  uint64_t v88 = (uint64_t)v105;
  uint64_t v89 = v101;
  sub_23BBD9D74(v57, v101, (uint64_t (*)(void))sub_23BBD9180);
  sub_23BBDA540(v86, v88);
  uint64_t v90 = v104;
  sub_23BBD9D74(v89, v104, (uint64_t (*)(void))sub_23BBD9180);
  sub_23BBD9144(0);
  sub_23BBDA540(v88, v90 + *(int *)(v91 + 48));
  uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BBDA5D4(v86, &qword_268A7E560, (uint64_t (*)(uint64_t))sub_23BBD91F8, MEMORY[0x263F8D8F0]);
  sub_23BBDA008(v57, (uint64_t (*)(void))sub_23BBD9180);
  sub_23BBDA5D4(v88, &qword_268A7E560, (uint64_t (*)(uint64_t))sub_23BBD91F8, v92);
  return sub_23BBDA008(v89, (uint64_t (*)(void))sub_23BBD9180);
}

uint64_t sub_23BBD73F4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_23BBDC0D0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v65 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD93E0();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD9354();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD92D0(0, &qword_268A7E570, (uint64_t (*)(uint64_t))sub_23BBD9354, (uint64_t (*)(uint64_t))sub_23BB82F18, MEMORY[0x263F18E28]);
  uint64_t result = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v54 - v18;
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v20 = *(void *)(v66 + 16);
  if (*(void *)(v20 + 16) <= a1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v64 = a2;
  uint64_t v21 = v20 + 16 * a1;
  uint64_t v61 = result;
  unint64_t v62 = a1;
  uint64_t v22 = *(void *)(v21 + 40);
  uint64_t v67 = *(void *)(v21 + 32);
  uint64_t v68 = v22;
  sub_23BB570F4();
  uint64_t v58 = v5;
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_23BBDC170();
  uint64_t v25 = v24;
  char v59 = v15;
  uint64_t v60 = v13;
  char v27 = v26 & 1;
  sub_23BBDC020();
  uint64_t v63 = v19;
  uint64_t v28 = sub_23BBDC150();
  char v55 = v11;
  uint64_t v56 = v4;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  char v33 = v32;
  uint64_t v57 = v8;
  uint64_t v35 = v34;
  swift_release();
  sub_23BB71078(v23, v25, v27);
  swift_bridgeObjectRelease();
  uint64_t v67 = v29;
  uint64_t v68 = v31;
  char v69 = v33 & 1;
  uint64_t v70 = v35;
  sub_23BBDC020();
  uint64_t v36 = type metadata accessor for SleepWidgetChartView();
  uint64_t v38 = v65;
  uint64_t v37 = v66;
  sub_23BB787A0(v65);
  uint64_t v39 = v37 + *(int *)(v36 + 40);
  uint64_t v40 = *(void *)v39;
  LOBYTE(v36) = *(unsigned char *)(v39 + 8);
  sub_23BB631DC(*(void *)v39, v36);
  sub_23BB77FBC(v40, v36);
  char v41 = v36;
  uint64_t v42 = (uint64_t)v63;
  sub_23BB63394(v40, v41);
  uint64_t v43 = v55;
  sub_23BBDC1A0();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v38, v56);
  sub_23BB71078(v67, v68, v69);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v45 = (uint64_t)v59;
  uint64_t v46 = v57;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v59, v43, v57);
  uint64_t v47 = (uint64_t *)(v45 + *(int *)(v60 + 36));
  uint64_t *v47 = KeyPath;
  v47[1] = 0x3FE0000000000000;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v43, v46);
  uint64_t v48 = swift_getKeyPath();
  sub_23BBD9D74(v45, v42, (uint64_t (*)(void))sub_23BBD9354);
  uint64_t v49 = v42 + *(int *)(v61 + 36);
  *(void *)uint64_t v49 = v48;
  *(void *)(v49 + 8) = 1;
  *(unsigned char *)(v49 + 16) = 0;
  sub_23BBDA008(v45, (uint64_t (*)(void))sub_23BBD9354);
  if (v62 == 6) {
    uint64_t v50 = sub_23BBDC2D0();
  }
  else {
    uint64_t v50 = sub_23BBDC2B0();
  }
  uint64_t v51 = v50;
  uint64_t v52 = v64;
  sub_23BBDA7A0(v42, v64);
  sub_23BBD91F8();
  *(void *)(v52 + *(int *)(v53 + 36)) = v51;
  return sub_23BBDA848(v42);
}

uint64_t sub_23BBD78B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  int v38 = a4;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v40 = a5;
  uint64_t v8 = type metadata accessor for SleepWidgetChartView();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8 - 8);
  sub_23BBD9938(0, &qword_268A7E5F8, sub_23BBD9A00);
  uint64_t v39 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v35 - v16;
  if ((*(unsigned char *)(a1 + 8) & 2) != 0)
  {
    sub_23BBDC2D0();
    uint64_t v18 = sub_23BBDC2E0();
    swift_release();
    if (qword_268A7DA08 != -1) {
      swift_once();
    }
    sub_23BBDC410();
    sub_23BBDBBE0();
    uint64_t v55 = v18;
    uint64_t v56 = v50;
    char v57 = v51;
    uint64_t v58 = v52;
    char v59 = v53;
    long long v60 = v54;
    sub_23BBDC410();
    sub_23BBD4BD0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v43, 0.0, 1, INFINITY, 0);
    swift_release();
    char v19 = sub_23BBDBFB0();
    sub_23BBDBBB0();
    v42[0] = 0;
    char v44 = v19;
    uint64_t v45 = v20;
    uint64_t v46 = v21;
    uint64_t v47 = v22;
    uint64_t v48 = v23;
    char v49 = 0;
    nullsub_1(v43);
  }
  else
  {
    sub_23BBDA100((uint64_t)v43);
  }
  sub_23BBDAC78((uint64_t)v43, (uint64_t)v61, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, MEMORY[0x263F8D8F0]);
  v43[0] = xmmword_23BBE0090;
  swift_getKeyPath();
  sub_23BBD9D74(a1, (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SleepWidgetChartView);
  unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = v37;
  *(void *)(v25 + 16) = v36;
  *(void *)(v25 + 24) = v26;
  *(unsigned char *)(v25 + 32) = v38 & 1;
  sub_23BBD9DDC((uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24, (uint64_t (*)(void))type metadata accessor for SleepWidgetChartView);
  *(double *)(v25 + ((v10 + v24 + 7) & 0xFFFFFFFFFFFFFFF8)) = a6;
  sub_23BBD8FD0(0, &qword_26AEBBA88, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
  sub_23BBD9A00(0);
  sub_23BB6771C();
  sub_23BBD9624(&qword_268A7E688, sub_23BBD9A00);
  uint64_t v35 = v17;
  sub_23BBDC3D0();
  char v27 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BBDAC78((uint64_t)v61, (uint64_t)v41, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, MEMORY[0x263F8D8F0]);
  uint64_t v28 = v12;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v30 = v39;
  v29(v15, v17, v39);
  sub_23BBDAC78((uint64_t)v41, (uint64_t)v42, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v27);
  uint64_t v31 = v40;
  sub_23BBDAC78((uint64_t)v42, v40, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v27);
  sub_23BBD9858(0);
  v29((char *)(v31 + *(int *)(v32 + 48)), v15, v30);
  sub_23BBDA418((uint64_t)v42);
  char v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v35, v30);
  v33(v15, v30);
  sub_23BBDAC78((uint64_t)v41, (uint64_t)v43, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v27);
  return sub_23BBDA444((uint64_t)v43);
}

uint64_t sub_23BBD7E6C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v11 = a4 & 1;
  sub_23BBD9A70();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = &v33[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = &v33[-v17];
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = &v33[-v19];
  unint64_t v21 = *a1;
  *(void *)uint64_t v18 = sub_23BBDBE50();
  *((void *)v18 + 1) = 0;
  v18[16] = 0;
  sub_23BBDABE0();
  sub_23BBD8290(a2, a3, v11, a5, v21, (uint64_t)&v18[*(int *)(v22 + 44)]);
  sub_23BBD9DDC((uint64_t)v18, (uint64_t)v20, (uint64_t (*)(void))sub_23BBD9A70);
  if ((*(unsigned char *)(a5 + 8) & 2) != 0)
  {
    sub_23BBDC2D0();
    uint64_t v23 = sub_23BBDC2E0();
    swift_release();
    if (qword_268A7DA08 != -1) {
      swift_once();
    }
    sub_23BBDC410();
    sub_23BBDBBE0();
    uint64_t v49 = v23;
    uint64_t v50 = v44;
    char v51 = v45;
    uint64_t v52 = v46;
    char v53 = v47;
    long long v54 = v48;
    sub_23BBDC410();
    sub_23BBD4BD0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v34, 0.0, 1, INFINITY, 0);
    swift_release();
    char v24 = sub_23BBDBFB0();
    sub_23BBDBBB0();
    v33[0] = 0;
    v36[8] = v34[8];
    v36[9] = v34[9];
    uint64_t v37 = v35;
    v36[4] = v34[4];
    v36[5] = v34[5];
    v36[6] = v34[6];
    v36[7] = v34[7];
    v36[0] = v34[0];
    v36[1] = v34[1];
    void v36[2] = v34[2];
    v36[3] = v34[3];
    char v38 = v24;
    uint64_t v39 = v25;
    uint64_t v40 = v26;
    uint64_t v41 = v27;
    uint64_t v42 = v28;
    char v43 = 0;
    nullsub_1(v36);
  }
  else
  {
    sub_23BBDA100((uint64_t)v36);
  }
  sub_23BBDAC78((uint64_t)v36, (uint64_t)v55, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, MEMORY[0x263F8D8F0]);
  sub_23BBD9D74((uint64_t)v20, (uint64_t)v15, (uint64_t (*)(void))sub_23BBD9A70);
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BBDAC78((uint64_t)v55, (uint64_t)v33, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, MEMORY[0x263F8D8F0]);
  sub_23BBD9D74((uint64_t)v15, a6, (uint64_t (*)(void))sub_23BBD9A70);
  sub_23BBD9A34(0);
  uint64_t v31 = a6 + *(int *)(v30 + 48);
  sub_23BBDAC78((uint64_t)v33, (uint64_t)v34, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v29);
  sub_23BBDAC78((uint64_t)v34, v31, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v29);
  sub_23BBDA418((uint64_t)v34);
  sub_23BBDA008((uint64_t)v20, (uint64_t (*)(void))sub_23BBD9A70);
  sub_23BBDAC78((uint64_t)v33, (uint64_t)v36, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, v29);
  sub_23BBDA444((uint64_t)v36);
  return sub_23BBDA008((uint64_t)v15, (uint64_t (*)(void))sub_23BBD9A70);
}

uint64_t sub_23BBD8290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v78 = a5;
  uint64_t v79 = a1;
  uint64_t v74 = a4;
  int v81 = a3;
  uint64_t v80 = a2;
  uint64_t v84 = a6;
  sub_23BBD3808(0, &qword_268A7E560, (uint64_t (*)(uint64_t))sub_23BBD91F8, MEMORY[0x263F8D8F0]);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v85 = &v72[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v83 = &v72[-v10];
  int v11 = (uint64_t (*)(uint64_t))MEMORY[0x263F1FD10];
  uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185D0];
  sub_23BBD3808(0, &qword_268A7DAF0, MEMORY[0x263F1FD10], MEMORY[0x263F185D0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (uint64_t *)&v72[-v13];
  uint64_t v15 = type metadata accessor for PlaceholderBarView(0);
  uint64_t v16 = v15 - 8;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = &v72[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23BBD9C50(0);
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = &v72[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23BBD9C28(0);
  uint64_t v76 = v23 - 8;
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = &v72[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23BBD9C00(0);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v82 = &v72[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v77 = &v72[-v30];
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = &v72[-v31];
  BOOL v73 = (*(void *)(a4 + 8) & 1) == 0;
  *uint64_t v14 = swift_getKeyPath();
  char v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  uint64_t v34 = v11;
  sub_23BBD3808(0, &qword_26AEBBC40, v11, MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  *(void *)&v18[*(int *)(v16 + 40)] = swift_getKeyPath();
  uint64_t v35 = v33;
  unint64_t v36 = v78;
  sub_23BBD3808(0, &qword_26AEBC950, MEMORY[0x263F1FC90], v35);
  uint64_t v37 = (uint64_t)v32;
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = v80;
  *(void *)uint64_t v18 = v79;
  *((void *)v18 + 1) = v38;
  v18[16] = v81 & 1;
  *((void *)v18 + 3) = 0x4018000000000000;
  v18[32] = v73;
  uint64_t v39 = (uint64_t)v14;
  uint64_t v40 = v74;
  sub_23BBDAC78(v39, (uint64_t)&v18[*(int *)(v16 + 36)], &qword_268A7DAF0, v34, v75);
  LOBYTE(v16) = sub_23BBDBFE0();
  uint64_t v41 = *(void *)(v40 + 8);
  sub_23BBDBBB0();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  sub_23BBD9D74((uint64_t)v18, (uint64_t)v22, type metadata accessor for PlaceholderBarView);
  uint64_t v50 = &v22[*(int *)(v20 + 44)];
  *uint64_t v50 = v16;
  *((void *)v50 + 1) = v43;
  *((void *)v50 + 2) = v45;
  *((void *)v50 + 3) = v47;
  *((void *)v50 + 4) = v49;
  v50[40] = 0;
  sub_23BBDA008((uint64_t)v18, type metadata accessor for PlaceholderBarView);
  LOBYTE(v16) = sub_23BBDC000();
  sub_23BBDBBB0();
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  sub_23BBD9D74((uint64_t)v22, (uint64_t)v25, (uint64_t (*)(void))sub_23BBD9C50);
  char v59 = &v25[*(int *)(v76 + 44)];
  *char v59 = v16;
  *((void *)v59 + 1) = v52;
  *((void *)v59 + 2) = v54;
  *((void *)v59 + 3) = v56;
  *((void *)v59 + 4) = v58;
  v59[40] = 0;
  sub_23BBDA008((uint64_t)v22, (uint64_t (*)(void))sub_23BBD9C50);
  uint64_t v60 = sub_23BBDC410();
  uint64_t v61 = v77;
  sub_23BBD4D9C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v77, 0.0, 1, INFINITY, 0, v60, v62, (void (*)(uint64_t, uint64_t))sub_23BBDACE8, (uint64_t (*)(void))sub_23BBD9C00);
  sub_23BBDA008((uint64_t)v25, (uint64_t (*)(void))sub_23BBD9C28);
  sub_23BBD9DDC((uint64_t)v61, (uint64_t)v32, (uint64_t (*)(void))sub_23BBD9C00);
  if ((v41 & 2) != 0)
  {
    uint64_t v64 = v83;
    sub_23BBD73F4(v36, (uint64_t)v83);
    sub_23BBD91F8();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v64, 0, 1, v65);
  }
  else
  {
    sub_23BBD91F8();
    uint64_t v64 = v83;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v83, 1, 1, v63);
  }
  uint64_t v66 = v82;
  sub_23BBD9D74((uint64_t)v32, (uint64_t)v82, (uint64_t (*)(void))sub_23BBD9C00);
  uint64_t v67 = v85;
  sub_23BBDA540((uint64_t)v64, (uint64_t)v85);
  uint64_t v68 = v84;
  sub_23BBD9D74((uint64_t)v66, v84, (uint64_t (*)(void))sub_23BBD9C00);
  sub_23BBD9B24(0);
  sub_23BBDA540((uint64_t)v67, v68 + *(int *)(v69 + 48));
  uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23BBDA5D4((uint64_t)v64, &qword_268A7E560, (uint64_t (*)(uint64_t))sub_23BBD91F8, MEMORY[0x263F8D8F0]);
  sub_23BBDA008(v37, (uint64_t (*)(void))sub_23BBD9C00);
  sub_23BBDA5D4((uint64_t)v67, &qword_268A7E560, (uint64_t (*)(uint64_t))sub_23BBD91F8, v70);
  return sub_23BBDA008((uint64_t)v66, (uint64_t (*)(void))sub_23BBD9C00);
}

uint64_t sub_23BBD89C4@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](a1 - 8);
  sub_23BBD9D74(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SleepWidgetChartView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_23BBD9DDC((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, (uint64_t (*)(void))type metadata accessor for SleepWidgetChartView);
  *a2 = sub_23BBD8CF8;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v7;
  return result;
}

uint64_t sub_23BBD8AD8()
{
  double v1 = (int *)type metadata accessor for SleepWidgetChartView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[7];
  sub_23BBD3808(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(v5 + v1[8]), *(unsigned char *)(v5 + v1[8] + 8));
  uint64_t v8 = v5 + v1[9];
  sub_23BBD3808(0, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_23BBDC0D0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(v5 + v1[10]), *(unsigned char *)(v5 + v1[10] + 8));
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t sub_23BBD8CF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SleepWidgetChartView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_23BBD5118(v4, a1);
}

void sub_23BBD8D78()
{
  if (!qword_268A7E4D0)
  {
    sub_23BBD3808(255, &qword_268A7E4D8, (uint64_t (*)(uint64_t))sub_23BBD8E0C, MEMORY[0x263F8D8F0]);
    sub_23BBD945C();
    unint64_t v0 = sub_23BBDC370();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E4D0);
    }
  }
}

void sub_23BBD8E0C(uint64_t a1)
{
}

void sub_23BBD8E40(uint64_t a1)
{
}

void sub_23BBD8E68(uint64_t a1)
{
}

void sub_23BBD8E90(uint64_t a1)
{
}

void sub_23BBD8EB8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23BBDBC60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_23BBD8F1C(uint64_t a1)
{
}

void sub_23BBD8F44()
{
  if (!qword_268A7E510)
  {
    sub_23BBD8FD0(255, &qword_268A7DB88, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A180]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E510);
    }
  }
}

void sub_23BBD8FD0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_23BBD9020(uint64_t a1)
{
}

void sub_23BBD9054(uint64_t a1)
{
}

void sub_23BBD9090()
{
  if (!qword_268A7E530)
  {
    sub_23BBD3808(255, &qword_268A7E538, (uint64_t (*)(uint64_t))sub_23BBD9144, MEMORY[0x263F1BAC8]);
    sub_23BBD9C78(&qword_268A7E588, &qword_268A7E538, (uint64_t (*)(uint64_t))sub_23BBD9144);
    unint64_t v0 = sub_23BBDC3A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E530);
    }
  }
}

void sub_23BBD9144(uint64_t a1)
{
}

void sub_23BBD9180(uint64_t a1)
{
}

void sub_23BBD91A8(uint64_t a1)
{
}

void sub_23BBD91D0(uint64_t a1)
{
}

void sub_23BBD91F8()
{
  if (!qword_268A7E568)
  {
    sub_23BBD92D0(255, &qword_268A7E570, (uint64_t (*)(uint64_t))sub_23BBD9354, (uint64_t (*)(uint64_t))sub_23BB82F18, MEMORY[0x263F18E28]);
    sub_23BBD8FD0(255, &qword_268A7DB88, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A180]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E568);
    }
  }
}

void sub_23BBD92D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_23BBD9354()
{
  if (!qword_268A7E578)
  {
    sub_23BBD93E0();
    sub_23BB83558(255, (unint64_t *)&qword_26AEBBA28, MEMORY[0x263F8EF38], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_23BBDBC60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E578);
    }
  }
}

void sub_23BBD93E0()
{
  if (!qword_268A7E580)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7E580);
    }
  }
}

unint64_t sub_23BBD945C()
{
  unint64_t result = qword_268A7E590;
  if (!qword_268A7E590)
  {
    sub_23BBD3808(255, &qword_268A7E4D8, (uint64_t (*)(uint64_t))sub_23BBD8E0C, MEMORY[0x263F8D8F0]);
    sub_23BBD9624(&qword_268A7E598, sub_23BBD8E0C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E590);
  }
  return result;
}

void sub_23BBD952C()
{
  if (!qword_268A7E5A0)
  {
    sub_23BBD8D78();
    sub_23BB83558(255, &qword_268A7E5A8, (uint64_t)&type metadata for SleepWidgetChartBar, MEMORY[0x263F8D488]);
    sub_23BBD9624(&qword_268A7E5B0, (void (*)(uint64_t))sub_23BBD8D78);
    sub_23BBD966C();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_268A7E5A0);
    }
  }
}

uint64_t sub_23BBD9624(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BBD966C()
{
  unint64_t result = qword_268A7E5B8;
  if (!qword_268A7E5B8)
  {
    sub_23BB83558(255, &qword_268A7E5A8, (uint64_t)&type metadata for SleepWidgetChartBar, MEMORY[0x263F8D488]);
    sub_23BBD9700();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E5B8);
  }
  return result;
}

unint64_t sub_23BBD9700()
{
  unint64_t result = qword_268A7E5C0;
  if (!qword_268A7E5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E5C0);
  }
  return result;
}

void sub_23BBD9754(uint64_t a1)
{
}

void sub_23BBD977C(uint64_t a1)
{
}

void sub_23BBD97A4()
{
  if (!qword_268A7E5E0)
  {
    sub_23BBD3808(255, &qword_268A7E5E8, (uint64_t (*)(uint64_t))sub_23BBD9858, MEMORY[0x263F1BAC8]);
    sub_23BBD9C78(&qword_268A7E648, &qword_268A7E5E8, (uint64_t (*)(uint64_t))sub_23BBD9858);
    unint64_t v0 = sub_23BBDC370();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E5E0);
    }
  }
}

void sub_23BBD9858(uint64_t a1)
{
}

void sub_23BBD9880(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_23BBD3808(255, &qword_268A7E4F0, (uint64_t (*)(uint64_t))sub_23BBD8E68, MEMORY[0x263F8D8F0]);
    sub_23BBD9938(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v8) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_23BBD9938(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    sub_23BBD8FD0(255, &qword_26AEBBA88, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    a3(255);
    sub_23BB6771C();
    unint64_t v5 = sub_23BBDC3E0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_23BBD9A00(uint64_t a1)
{
}

void sub_23BBD9A34(uint64_t a1)
{
}

void sub_23BBD9A70()
{
  if (!qword_268A7E610)
  {
    sub_23BBD3808(255, &qword_268A7E618, (uint64_t (*)(uint64_t))sub_23BBD9B24, MEMORY[0x263F1BAC8]);
    sub_23BBD9C78(&qword_268A7E640, &qword_268A7E618, (uint64_t (*)(uint64_t))sub_23BBD9B24);
    unint64_t v0 = sub_23BBDC3A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E610);
    }
  }
}

void sub_23BBD9B24(uint64_t a1)
{
}

void sub_23BBD9B60(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_23BBD3808(255, a4, a5, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v9) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_23BBD9C00(uint64_t a1)
{
}

void sub_23BBD9C28(uint64_t a1)
{
}

void sub_23BBD9C50(uint64_t a1)
{
}

uint64_t sub_23BBD9C78(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23BBD3808(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BBD9CDC()
{
  if (!qword_268A7E650)
  {
    sub_23BBD3808(255, &qword_268A7E5E8, (uint64_t (*)(uint64_t))sub_23BBD9858, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E650);
    }
  }
}

uint64_t sub_23BBD9D74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BBD9DDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_23BBD9E44()
{
  unint64_t result = qword_268A7E658;
  if (!qword_268A7E658)
  {
    sub_23BBD9754(255);
    sub_23BBD8D78();
    sub_23BB83558(255, &qword_268A7E5A8, (uint64_t)&type metadata for SleepWidgetChartBar, MEMORY[0x263F8D488]);
    sub_23BBD9624(&qword_268A7E5B0, (void (*)(uint64_t))sub_23BBD8D78);
    sub_23BBD966C();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E658);
  }
  return result;
}

unint64_t sub_23BBD9F60()
{
  unint64_t result = qword_268A7E660;
  if (!qword_268A7E660)
  {
    sub_23BBD977C(255);
    sub_23BBD9624(&qword_268A7E668, (void (*)(uint64_t))sub_23BBD97A4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E660);
  }
  return result;
}

uint64_t sub_23BBDA008(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_23BBDA068()
{
  if (!qword_268A7E670)
  {
    sub_23BBD3808(255, &qword_268A7E4D8, (uint64_t (*)(uint64_t))sub_23BBD8E0C, MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E670);
    }
  }
}

double sub_23BBDA100(uint64_t a1)
{
  *(unsigned char *)(a1 + 208) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_23BBDA128()
{
  uint64_t v1 = (int *)type metadata accessor for SleepWidgetChartView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[7];
  sub_23BBD3808(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(v5 + v1[8]), *(unsigned char *)(v5 + v1[8] + 8));
  uint64_t v8 = v5 + v1[9];
  sub_23BBD3808(0, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_23BBDC0D0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(v5 + v1[10]), *(unsigned char *)(v5 + v1[10] + 8));
  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_23BBDA35C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SleepWidgetChartView() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(unsigned char *)(v2 + 40);
  double v10 = *(double *)(v2 + 48);
  double v11 = *(double *)(v2 + 56);
  uint64_t v12 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_23BBD67C0(a1, v6, v7, v8, v9, v12, a2, v10, v11);
}

uint64_t sub_23BBDA418(uint64_t a1)
{
  return a1;
}

uint64_t sub_23BBDA444(uint64_t a1)
{
  return a1;
}

void sub_23BBDA470()
{
  if (!qword_268A7E680)
  {
    sub_23BBD3808(255, &qword_268A7E538, (uint64_t (*)(uint64_t))sub_23BBD9144, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E680);
    }
  }
}

uint64_t sub_23BBDA510()
{
  return sub_23BBDBD80();
}

uint64_t sub_23BBDA540(uint64_t a1, uint64_t a2)
{
  sub_23BBD3808(0, &qword_268A7E560, (uint64_t (*)(uint64_t))sub_23BBD91F8, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BBDA5D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_23BBD3808(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_23BBDA630@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_23BBDBD00();
  *a1 = v3;
  return result;
}

uint64_t sub_23BBDA65C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_23BBDBD00();
  *a1 = v3;
  return result;
}

uint64_t sub_23BBDA688()
{
  return sub_23BBDBD10();
}

uint64_t sub_23BBDA6B0()
{
  return sub_23BBDBD10();
}

uint64_t sub_23BBDA6D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_23BBDBDB0();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23BBDA70C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_23BBDBDB0();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23BBDA740()
{
  return sub_23BBDBDC0();
}

uint64_t sub_23BBDA770()
{
  return sub_23BBDBDC0();
}

uint64_t sub_23BBDA7A0(uint64_t a1, uint64_t a2)
{
  sub_23BBD92D0(0, &qword_268A7E570, (uint64_t (*)(uint64_t))sub_23BBD9354, (uint64_t (*)(uint64_t))sub_23BB82F18, MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BBDA848(uint64_t a1)
{
  sub_23BBD92D0(0, &qword_268A7E570, (uint64_t (*)(uint64_t))sub_23BBD9354, (uint64_t (*)(uint64_t))sub_23BB82F18, MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BBDA8E8(uint64_t a1, uint64_t a2)
{
  return sub_23BBD9D74(a1, a2, (uint64_t (*)(void))sub_23BBD91A8);
}

uint64_t sub_23BBDA900()
{
  uint64_t v1 = (int *)type metadata accessor for SleepWidgetChartView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 33) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[7];
  sub_23BBD3808(0, &qword_26AEBBC40, MEMORY[0x263F1FD10], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_23BBDC5A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(v5 + v1[8]), *(unsigned char *)(v5 + v1[8] + 8));
  uint64_t v8 = v5 + v1[9];
  sub_23BBD3808(0, &qword_268A7DDC0, MEMORY[0x263F1A668], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_23BBDC0D0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  sub_23BB63394(*(void *)(v5 + v1[10]), *(unsigned char *)(v5 + v1[10] + 8));
  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_23BBDAB2C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SleepWidgetChartView() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  char v8 = *(unsigned char *)(v2 + 32);
  uint64_t v9 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_23BBD7E6C(a1, v6, v7, v8, v9, a2);
}

void sub_23BBDABE0()
{
  if (!qword_268A7E690)
  {
    sub_23BBD3808(255, &qword_268A7E618, (uint64_t (*)(uint64_t))sub_23BBD9B24, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_23BBDBC10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E690);
    }
  }
}

uint64_t sub_23BBDAC78(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_23BBD3808(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_23BBDACE8(uint64_t a1, uint64_t a2)
{
  return sub_23BBD9D74(a1, a2, (uint64_t (*)(void))sub_23BBD9C28);
}

uint64_t sub_23BBDAD00()
{
  uint64_t v0 = sub_23BBDB950();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BBD3808(0, &qword_268A7E698, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v26 - v5;
  uint64_t v7 = sub_23BBDB8A0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_23BBDB970();
  uint64_t v11 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F07740], v7);
  sub_23BBDB8B0();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_23BBDB870();
  uint64_t v14 = sub_23BBDB890();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 0, 1, v14);
  sub_23BBDB930();
  uint64_t v15 = sub_23BBDB8F0();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F078E8], v0);
  uint64_t v16 = sub_23BBDB960();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17 < v16)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v16 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_23BB88FD8(v15, v0, v16, (2 * v17) | 1);
    goto LABEL_8;
  }
  uint64_t v0 = v15 + 32;
  sub_23BBDCBA0();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v18 = swift_dynamicCastClass();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x263F8EE78];
  }
  uint64_t v19 = *(void *)(v18 + 16);
  swift_release();
  if (v19 != v17 - v16) {
    goto LABEL_16;
  }
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
LABEL_8:
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain_n();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x263F8EE78];
  }
  uint64_t v22 = *(void *)(v21 + 16);
  swift_release();
  if (v22 == v16)
  {
    uint64_t v23 = swift_dynamicCastClass();
    if (!v23)
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = MEMORY[0x263F8EE78];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_23BB88FD8(v15, v0, 0, (2 * v16) | 1);
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = v20;
  sub_23BB87188(v23);
  uint64_t v24 = v27;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v26);
  return v24;
}

ValueMetadata *type metadata accessor for SleepWidgetChartView.Options()
{
  return &type metadata for SleepWidgetChartView.Options;
}

uint64_t sub_23BBDB1A0()
{
  return sub_23BBD9624(&qword_268A7E6A0, (void (*)(uint64_t))sub_23BBDB1E8);
}

void sub_23BBDB1E8()
{
  if (!qword_268A7E6A8)
  {
    sub_23BBD92D0(255, &qword_268A7E6B0, (uint64_t (*)(uint64_t))sub_23BBD9754, (uint64_t (*)(uint64_t))sub_23BBD977C, MEMORY[0x263F19B28]);
    sub_23BBDB290();
    unint64_t v0 = sub_23BBDBC30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268A7E6A8);
    }
  }
}

unint64_t sub_23BBDB290()
{
  unint64_t result = qword_268A7E6B8;
  if (!qword_268A7E6B8)
  {
    sub_23BBD92D0(255, &qword_268A7E6B0, (uint64_t (*)(uint64_t))sub_23BBD9754, (uint64_t (*)(uint64_t))sub_23BBD977C, MEMORY[0x263F19B28]);
    sub_23BBD9E44();
    sub_23BBD9F60();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E6B8);
  }
  return result;
}

unint64_t sub_23BBDB350()
{
  unint64_t result = qword_268A7E6C0;
  if (!qword_268A7E6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E6C0);
  }
  return result;
}

unint64_t sub_23BBDB3A8()
{
  unint64_t result = qword_268A7E6C8;
  if (!qword_268A7E6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E6C8);
  }
  return result;
}

unint64_t sub_23BBDB400()
{
  unint64_t result = qword_268A7E6D0;
  if (!qword_268A7E6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E6D0);
  }
  return result;
}

unint64_t sub_23BBDB458()
{
  unint64_t result = qword_268A7E6D8;
  if (!qword_268A7E6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A7E6D8);
  }
  return result;
}

uint64_t sub_23BBDB4AC(uint64_t a1)
{
  return sub_23BBDB4F4(a1, (uint64_t)&unk_26EF0E5D8, &qword_268A80508, &qword_268A80510);
}

uint64_t sub_23BBDB4C4(uint64_t a1)
{
  return sub_23BBDB4F4(a1, (uint64_t)&unk_26EF0E5A8, &qword_26AEBDD08, &qword_26AEBDD10);
}

uint64_t sub_23BBDB4DC(uint64_t a1)
{
  return sub_23BBDB4F4(a1, (uint64_t)&unk_26EF0E550, &qword_26AEBDCF8, &qword_26AEBDD00);
}

uint64_t sub_23BBDB4F4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = sub_23BBDBA60();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F76008], v6);
  uint64_t v10 = sub_23BBDC710();
  uint64_t v12 = v11;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v10;
  *a4 = v12;
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t sub_23BBDB630()
{
  return MEMORY[0x270EE1368]();
}

uint64_t sub_23BBDB640()
{
  return MEMORY[0x270EE1390]();
}

uint64_t sub_23BBDB650()
{
  return MEMORY[0x270F731B0]();
}

uint64_t sub_23BBDB660()
{
  return MEMORY[0x270EEE2E8]();
}

uint64_t sub_23BBDB670()
{
  return MEMORY[0x270EEE2F0]();
}

uint64_t sub_23BBDB680()
{
  return MEMORY[0x270EEE2F8]();
}

uint64_t sub_23BBDB690()
{
  return MEMORY[0x270EEE308]();
}

uint64_t sub_23BBDB6A0()
{
  return MEMORY[0x270EEE330]();
}

uint64_t sub_23BBDB6B0()
{
  return MEMORY[0x270EEE338]();
}

uint64_t sub_23BBDB6C0()
{
  return MEMORY[0x270EEE760]();
}

uint64_t sub_23BBDB6D0()
{
  return MEMORY[0x270EEE8E8]();
}

uint64_t sub_23BBDB6E0()
{
  return MEMORY[0x270EFEAE8]();
}

uint64_t sub_23BBDB6F0()
{
  return MEMORY[0x270EFEB00]();
}

uint64_t sub_23BBDB700()
{
  return MEMORY[0x270F731B8]();
}

uint64_t sub_23BBDB710()
{
  return MEMORY[0x270EEEB38]();
}

uint64_t sub_23BBDB720()
{
  return MEMORY[0x270EEEDD8]();
}

uint64_t sub_23BBDB730()
{
  return MEMORY[0x270EEEDF0]();
}

uint64_t sub_23BBDB740()
{
  return MEMORY[0x270EEEEC0]();
}

uint64_t sub_23BBDB750()
{
  return MEMORY[0x270EEF038]();
}

uint64_t sub_23BBDB760()
{
  return MEMORY[0x270EEF050]();
}

uint64_t sub_23BBDB770()
{
  return MEMORY[0x270EEF058]();
}

uint64_t sub_23BBDB780()
{
  return MEMORY[0x270EEF060]();
}

uint64_t sub_23BBDB790()
{
  return MEMORY[0x270EEF070]();
}

uint64_t sub_23BBDB7A0()
{
  return MEMORY[0x270EFEB28]();
}

uint64_t sub_23BBDB7B0()
{
  return MEMORY[0x270EEF840]();
}

uint64_t sub_23BBDB7C0()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t sub_23BBDB7D0()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t sub_23BBDB7E0()
{
  return MEMORY[0x270F731D0]();
}

uint64_t sub_23BBDB7F0()
{
  return MEMORY[0x270F731E0]();
}

uint64_t sub_23BBDB800()
{
  return MEMORY[0x270EF07E0]();
}

uint64_t sub_23BBDB810()
{
  return MEMORY[0x270EF0898]();
}

uint64_t sub_23BBDB820()
{
  return MEMORY[0x270EF0998]();
}

uint64_t sub_23BBDB830()
{
  return MEMORY[0x270EF0BA8]();
}

uint64_t sub_23BBDB840()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t sub_23BBDB850()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t sub_23BBDB860()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t sub_23BBDB870()
{
  return MEMORY[0x270EF0FA0]();
}

uint64_t sub_23BBDB880()
{
  return MEMORY[0x270F37DD0]();
}

uint64_t sub_23BBDB890()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t sub_23BBDB8A0()
{
  return MEMORY[0x270EF10C8]();
}

uint64_t sub_23BBDB8B0()
{
  return MEMORY[0x270EF10D8]();
}

uint64_t sub_23BBDB8C0()
{
  return MEMORY[0x270EF1100]();
}

uint64_t sub_23BBDB8D0()
{
  return MEMORY[0x270F731F0]();
}

uint64_t sub_23BBDB8E0()
{
  return MEMORY[0x270EF12C8]();
}

uint64_t sub_23BBDB8F0()
{
  return MEMORY[0x270EF1308]();
}

uint64_t sub_23BBDB900()
{
  return MEMORY[0x270EF1350]();
}

uint64_t sub_23BBDB910()
{
  return MEMORY[0x270EF1368]();
}

uint64_t sub_23BBDB920()
{
  return MEMORY[0x270EF1388]();
}

uint64_t sub_23BBDB930()
{
  return MEMORY[0x270EF13C8]();
}

uint64_t sub_23BBDB940()
{
  return MEMORY[0x270EF13D8]();
}

uint64_t sub_23BBDB950()
{
  return MEMORY[0x270EF1428]();
}

uint64_t sub_23BBDB960()
{
  return MEMORY[0x270EF1430]();
}

uint64_t sub_23BBDB970()
{
  return MEMORY[0x270EF1440]();
}

uint64_t sub_23BBDB980()
{
  return MEMORY[0x270F731F8]();
}

uint64_t sub_23BBDB9A0()
{
  return MEMORY[0x270F73218]();
}

uint64_t sub_23BBDB9B0()
{
  return MEMORY[0x270F73290]();
}

uint64_t sub_23BBDB9C0()
{
  return MEMORY[0x270F73298]();
}

uint64_t sub_23BBDB9D0()
{
  return MEMORY[0x270F732A0]();
}

uint64_t sub_23BBDB9E0()
{
  return MEMORY[0x270F732A8]();
}

uint64_t sub_23BBDB9F0()
{
  return MEMORY[0x270F732B0]();
}

uint64_t sub_23BBDBA00()
{
  return MEMORY[0x270F732B8]();
}

uint64_t sub_23BBDBA10()
{
  return MEMORY[0x270F732C0]();
}

uint64_t sub_23BBDBA20()
{
  return MEMORY[0x270F732D0]();
}

uint64_t sub_23BBDBA30()
{
  return MEMORY[0x270F732D8]();
}

uint64_t sub_23BBDBA40()
{
  return MEMORY[0x270F732E0]();
}

uint64_t sub_23BBDBA50()
{
  return MEMORY[0x270F732E8]();
}

uint64_t sub_23BBDBA60()
{
  return MEMORY[0x270F733D0]();
}

uint64_t sub_23BBDBA70()
{
  return MEMORY[0x270F73468]();
}

uint64_t sub_23BBDBA80()
{
  return MEMORY[0x270F73470]();
}

uint64_t sub_23BBDBA90()
{
  return MEMORY[0x270F73550]();
}

uint64_t sub_23BBDBAA0()
{
  return MEMORY[0x270F735F8]();
}

uint64_t sub_23BBDBAB0()
{
  return MEMORY[0x270F73600]();
}

uint64_t sub_23BBDBAC0()
{
  return MEMORY[0x270F73608]();
}

uint64_t sub_23BBDBAD0()
{
  return MEMORY[0x270F73610]();
}

uint64_t sub_23BBDBAE0()
{
  return MEMORY[0x270F73618]();
}

uint64_t sub_23BBDBAF0()
{
  return MEMORY[0x270F73620]();
}

uint64_t sub_23BBDBB00()
{
  return MEMORY[0x270F73628]();
}

uint64_t sub_23BBDBB10()
{
  return MEMORY[0x270F73630]();
}

uint64_t sub_23BBDBB20()
{
  return MEMORY[0x270F73638]();
}

uint64_t sub_23BBDBB30()
{
  return MEMORY[0x270F73640]();
}

uint64_t sub_23BBDBB40()
{
  return MEMORY[0x270F73650]();
}

uint64_t sub_23BBDBB60()
{
  return MEMORY[0x270F73660]();
}

uint64_t sub_23BBDBB70()
{
  return MEMORY[0x270FA2C78]();
}

uint64_t sub_23BBDBB80()
{
  return MEMORY[0x270F73680]();
}

uint64_t sub_23BBDBB90()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_23BBDBBA0()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_23BBDBBB0()
{
  return MEMORY[0x270EFECF8]();
}

uint64_t sub_23BBDBBC0()
{
  return MEMORY[0x270EFF230]();
}

uint64_t sub_23BBDBBD0()
{
  return MEMORY[0x270EFF558]();
}

uint64_t sub_23BBDBBE0()
{
  return MEMORY[0x270EFF598]();
}

uint64_t sub_23BBDBBF0()
{
  return MEMORY[0x270EFF5F0]();
}

uint64_t sub_23BBDBC00()
{
  return MEMORY[0x270EFF6D0]();
}

uint64_t sub_23BBDBC10()
{
  return MEMORY[0x270EFF918]();
}

uint64_t sub_23BBDBC30()
{
  return MEMORY[0x270EFFA10]();
}

uint64_t sub_23BBDBC40()
{
  return MEMORY[0x270EFFED0]();
}

uint64_t sub_23BBDBC50()
{
  return MEMORY[0x270EFFEE0]();
}

uint64_t sub_23BBDBC60()
{
  return MEMORY[0x270F001A8]();
}

uint64_t sub_23BBDBC70()
{
  return MEMORY[0x270F00598]();
}

uint64_t sub_23BBDBC80()
{
  return MEMORY[0x270F00688]();
}

uint64_t sub_23BBDBC90()
{
  return MEMORY[0x270F00860]();
}

uint64_t sub_23BBDBCA0()
{
  return MEMORY[0x270F00868]();
}

uint64_t sub_23BBDBCB0()
{
  return MEMORY[0x270F008B8]();
}

uint64_t sub_23BBDBCC0()
{
  return MEMORY[0x270F008C0]();
}

uint64_t sub_23BBDBCD0()
{
  return MEMORY[0x270F00A00]();
}

uint64_t sub_23BBDBCE0()
{
  return MEMORY[0x270F00A20]();
}

uint64_t sub_23BBDBCF0()
{
  return MEMORY[0x270F00A30]();
}

uint64_t sub_23BBDBD00()
{
  return MEMORY[0x270F00B78]();
}

uint64_t sub_23BBDBD10()
{
  return MEMORY[0x270F00B80]();
}

uint64_t sub_23BBDBD20()
{
  return MEMORY[0x270F00C48]();
}

uint64_t sub_23BBDBD30()
{
  return MEMORY[0x270F00D80]();
}

uint64_t sub_23BBDBD40()
{
  return MEMORY[0x270F00D90]();
}

uint64_t sub_23BBDBD50()
{
  return MEMORY[0x270F00DC0]();
}

uint64_t sub_23BBDBD60()
{
  return MEMORY[0x270F07348]();
}

uint64_t sub_23BBDBD70()
{
  return MEMORY[0x270F07370]();
}

uint64_t sub_23BBDBD80()
{
  return MEMORY[0x270F073D8]();
}

uint64_t sub_23BBDBD90()
{
  return MEMORY[0x270F073E0]();
}

uint64_t sub_23BBDBDA0()
{
  return MEMORY[0x270F073F0]();
}

uint64_t sub_23BBDBDB0()
{
  return MEMORY[0x270F00E88]();
}

uint64_t sub_23BBDBDC0()
{
  return MEMORY[0x270F00E98]();
}

uint64_t sub_23BBDBDD0()
{
  return MEMORY[0x270F00ED8]();
}

uint64_t sub_23BBDBDE0()
{
  return MEMORY[0x270F00EE0]();
}

uint64_t sub_23BBDBDF0()
{
  return MEMORY[0x270F00F10]();
}

uint64_t sub_23BBDBE00()
{
  return MEMORY[0x270F00F20]();
}

uint64_t sub_23BBDBE10()
{
  return MEMORY[0x270F01050]();
}

uint64_t sub_23BBDBE20()
{
  return MEMORY[0x270F01070]();
}

uint64_t sub_23BBDBE30()
{
  return MEMORY[0x270F01358]();
}

uint64_t sub_23BBDBE40()
{
  return MEMORY[0x270F01370]();
}

uint64_t sub_23BBDBE50()
{
  return MEMORY[0x270F01510]();
}

uint64_t sub_23BBDBE60()
{
  return MEMORY[0x270F01520]();
}

uint64_t sub_23BBDBE70()
{
  return MEMORY[0x270F073F8]();
}

uint64_t sub_23BBDBE80()
{
  return MEMORY[0x270F07400]();
}

uint64_t sub_23BBDBE90()
{
  return MEMORY[0x270F07408]();
}

uint64_t sub_23BBDBEA0()
{
  return MEMORY[0x270F07410]();
}

uint64_t sub_23BBDBEB0()
{
  return MEMORY[0x270F07420]();
}

uint64_t sub_23BBDBEC0()
{
  return MEMORY[0x270F017F8]();
}

uint64_t sub_23BBDBED0()
{
  return MEMORY[0x270F01800]();
}

uint64_t sub_23BBDBEE0()
{
  return MEMORY[0x270F01818]();
}

uint64_t sub_23BBDBEF0()
{
  return MEMORY[0x270F01C58]();
}

uint64_t sub_23BBDBF00()
{
  return MEMORY[0x270F01D20]();
}

uint64_t sub_23BBDBF10()
{
  return MEMORY[0x270F01D30]();
}

uint64_t sub_23BBDBF20()
{
  return MEMORY[0x270F01D38]();
}

uint64_t sub_23BBDBF30()
{
  return MEMORY[0x270F07428]();
}

uint64_t sub_23BBDBF40()
{
  return MEMORY[0x270F025F0]();
}

uint64_t sub_23BBDBF50()
{
  return MEMORY[0x270F02798]();
}

uint64_t sub_23BBDBF60()
{
  return MEMORY[0x270F027A8]();
}

uint64_t sub_23BBDBF70()
{
  return MEMORY[0x270F029E0]();
}

uint64_t sub_23BBDBF80()
{
  return MEMORY[0x270F029F0]();
}

uint64_t sub_23BBDBF90()
{
  return MEMORY[0x270F029F8]();
}

uint64_t sub_23BBDBFA0()
{
  return MEMORY[0x270F02A00]();
}

uint64_t sub_23BBDBFB0()
{
  return MEMORY[0x270F02A30]();
}

uint64_t sub_23BBDBFC0()
{
  return MEMORY[0x270F02A38]();
}

uint64_t sub_23BBDBFD0()
{
  return MEMORY[0x270F02A48]();
}

uint64_t sub_23BBDBFE0()
{
  return MEMORY[0x270F02A60]();
}

uint64_t sub_23BBDBFF0()
{
  return MEMORY[0x270F02A68]();
}

uint64_t sub_23BBDC000()
{
  return MEMORY[0x270F02A78]();
}

uint64_t sub_23BBDC010()
{
  return MEMORY[0x270F73690]();
}

uint64_t sub_23BBDC020()
{
  return MEMORY[0x270F73698]();
}

uint64_t sub_23BBDC030()
{
  return MEMORY[0x270F02AE8]();
}

uint64_t sub_23BBDC040()
{
  return MEMORY[0x270F02B48]();
}

uint64_t sub_23BBDC050()
{
  return MEMORY[0x270F02B50]();
}

uint64_t sub_23BBDC060()
{
  return MEMORY[0x270F02BA8]();
}

uint64_t sub_23BBDC070()
{
  return MEMORY[0x270F02BC0]();
}

uint64_t sub_23BBDC080()
{
  return MEMORY[0x270F02BF8]();
}

uint64_t sub_23BBDC090()
{
  return MEMORY[0x270F02C10]();
}

uint64_t sub_23BBDC0A0()
{
  return MEMORY[0x270F02C40]();
}

uint64_t sub_23BBDC0B0()
{
  return MEMORY[0x270F02C68]();
}

uint64_t sub_23BBDC0C0()
{
  return MEMORY[0x270F02C98]();
}

uint64_t sub_23BBDC0D0()
{
  return MEMORY[0x270F02CA0]();
}

uint64_t sub_23BBDC0E0()
{
  return MEMORY[0x270F02CB0]();
}

uint64_t sub_23BBDC0F0()
{
  return MEMORY[0x270F02CD0]();
}

uint64_t sub_23BBDC100()
{
  return MEMORY[0x270F02CE8]();
}

uint64_t sub_23BBDC110()
{
  return MEMORY[0x270F02D10]();
}

uint64_t sub_23BBDC120()
{
  return MEMORY[0x270F02D30]();
}

uint64_t sub_23BBDC130()
{
  return MEMORY[0x270F02F28]();
}

uint64_t sub_23BBDC140()
{
  return MEMORY[0x270F03008]();
}

uint64_t sub_23BBDC150()
{
  return MEMORY[0x270F030A8]();
}

uint64_t sub_23BBDC160()
{
  return MEMORY[0x270F03238]();
}

uint64_t sub_23BBDC170()
{
  return MEMORY[0x270F03250]();
}

uint64_t sub_23BBDC180()
{
  return MEMORY[0x270F736A8]();
}

uint64_t sub_23BBDC190()
{
  return MEMORY[0x270F736B0]();
}

uint64_t sub_23BBDC1A0()
{
  return MEMORY[0x270F736B8]();
}

uint64_t sub_23BBDC1B0()
{
  return MEMORY[0x270F736C8]();
}

uint64_t sub_23BBDC1C0()
{
  return MEMORY[0x270F736D0]();
}

uint64_t sub_23BBDC1D0()
{
  return MEMORY[0x270F736D8]();
}

uint64_t sub_23BBDC1E0()
{
  return MEMORY[0x270F07438]();
}

uint64_t sub_23BBDC1F0()
{
  return MEMORY[0x270F07458]();
}

uint64_t sub_23BBDC200()
{
  return MEMORY[0x270F032C0]();
}

uint64_t sub_23BBDC210()
{
  return MEMORY[0x270F032D0]();
}

uint64_t sub_23BBDC220()
{
  return MEMORY[0x270F03648]();
}

uint64_t sub_23BBDC230()
{
  return MEMORY[0x270F036C0]();
}

uint64_t sub_23BBDC240()
{
  return MEMORY[0x270F03790]();
}

uint64_t sub_23BBDC250()
{
  return MEMORY[0x270F03B20]();
}

uint64_t sub_23BBDC260()
{
  return MEMORY[0x270F03D30]();
}

uint64_t sub_23BBDC270()
{
  return MEMORY[0x270F04110]();
}

uint64_t sub_23BBDC280()
{
  return MEMORY[0x270F736E8]();
}

uint64_t sub_23BBDC290()
{
  return MEMORY[0x270F04378]();
}

uint64_t sub_23BBDC2A0()
{
  return MEMORY[0x270F04388]();
}

uint64_t sub_23BBDC2B0()
{
  return MEMORY[0x270F04410]();
}

uint64_t sub_23BBDC2C0()
{
  return MEMORY[0x270F04478]();
}

uint64_t sub_23BBDC2D0()
{
  return MEMORY[0x270F04498]();
}

uint64_t sub_23BBDC2E0()
{
  return MEMORY[0x270F044E8]();
}

uint64_t sub_23BBDC2F0()
{
  return MEMORY[0x270F044F0]();
}

uint64_t sub_23BBDC300()
{
  return MEMORY[0x270F04558]();
}

uint64_t sub_23BBDC310()
{
  return MEMORY[0x270F04588]();
}

uint64_t sub_23BBDC320()
{
  return MEMORY[0x270F04608]();
}

uint64_t sub_23BBDC330()
{
  return MEMORY[0x270F04620]();
}

uint64_t sub_23BBDC340()
{
  return MEMORY[0x270F04690]();
}

uint64_t sub_23BBDC350()
{
  return MEMORY[0x270F04708]();
}

uint64_t sub_23BBDC360()
{
  return MEMORY[0x270F04718]();
}

uint64_t sub_23BBDC370()
{
  return MEMORY[0x270F04960]();
}

uint64_t sub_23BBDC380()
{
  return MEMORY[0x270F04978]();
}

uint64_t sub_23BBDC390()
{
  return MEMORY[0x270F04AF0]();
}

uint64_t sub_23BBDC3A0()
{
  return MEMORY[0x270F04AF8]();
}

uint64_t sub_23BBDC3B0()
{
  return MEMORY[0x270F04B10]();
}

uint64_t sub_23BBDC3C0()
{
  return MEMORY[0x270F04B20]();
}

uint64_t sub_23BBDC3D0()
{
  return MEMORY[0x270F04C90]();
}

uint64_t sub_23BBDC3E0()
{
  return MEMORY[0x270F04CC0]();
}

uint64_t sub_23BBDC3F0()
{
  return MEMORY[0x270F05010]();
}

uint64_t sub_23BBDC400()
{
  return MEMORY[0x270F05058]();
}

uint64_t sub_23BBDC410()
{
  return MEMORY[0x270F05078]();
}

uint64_t sub_23BBDC420()
{
  return MEMORY[0x270F05088]();
}

uint64_t sub_23BBDC430()
{
  return MEMORY[0x270F05320]();
}

uint64_t sub_23BBDC440()
{
  return MEMORY[0x270F05330]();
}

uint64_t sub_23BBDC450()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t sub_23BBDC460()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t sub_23BBDC470()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t sub_23BBDC480()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t sub_23BBDC490()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t sub_23BBDC4A0()
{
  return MEMORY[0x270FA0BC8]();
}

uint64_t sub_23BBDC4B0()
{
  return MEMORY[0x270F37F58]();
}

uint64_t sub_23BBDC4C0()
{
  return MEMORY[0x270F37F60]();
}

uint64_t sub_23BBDC4D0()
{
  return MEMORY[0x270F37FF8]();
}

uint64_t sub_23BBDC4E0()
{
  return MEMORY[0x270F38000]();
}

uint64_t sub_23BBDC4F0()
{
  return MEMORY[0x270F38058]();
}

uint64_t sub_23BBDC500()
{
  return MEMORY[0x270F38060]();
}

uint64_t sub_23BBDC510()
{
  return MEMORY[0x270F38070]();
}

uint64_t sub_23BBDC520()
{
  return MEMORY[0x270F38078]();
}

uint64_t sub_23BBDC530()
{
  return MEMORY[0x270F074A8]();
}

uint64_t sub_23BBDC540()
{
  return MEMORY[0x270F07550]();
}

uint64_t sub_23BBDC550()
{
  return MEMORY[0x270F07558]();
}

uint64_t sub_23BBDC560()
{
  return MEMORY[0x270F07568]();
}

uint64_t sub_23BBDC570()
{
  return MEMORY[0x270F07570]();
}

uint64_t sub_23BBDC580()
{
  return MEMORY[0x270F07578]();
}

uint64_t sub_23BBDC590()
{
  return MEMORY[0x270F07580]();
}

uint64_t sub_23BBDC5A0()
{
  return MEMORY[0x270F07608]();
}

uint64_t sub_23BBDC5B0()
{
  return MEMORY[0x270F07698]();
}

uint64_t sub_23BBDC5C0()
{
  return MEMORY[0x270F076A0]();
}

uint64_t sub_23BBDC5D0()
{
  return MEMORY[0x270F076E8]();
}

uint64_t sub_23BBDC600()
{
  return MEMORY[0x270F07788]();
}

uint64_t sub_23BBDC610()
{
  return MEMORY[0x270F07790]();
}

uint64_t sub_23BBDC620()
{
  return MEMORY[0x270F077A0]();
}

uint64_t sub_23BBDC630()
{
  return MEMORY[0x270F077B0]();
}

uint64_t sub_23BBDC640()
{
  return MEMORY[0x270F077B8]();
}

uint64_t sub_23BBDC650()
{
  return MEMORY[0x270F07848]();
}

uint64_t sub_23BBDC660()
{
  return MEMORY[0x270F07850]();
}

uint64_t sub_23BBDC670()
{
  return MEMORY[0x270F078B8]();
}

uint64_t sub_23BBDC680()
{
  return MEMORY[0x270F079F0]();
}

uint64_t sub_23BBDC690()
{
  return MEMORY[0x270F079F8]();
}

uint64_t sub_23BBDC6A0()
{
  return MEMORY[0x270F9D328]();
}

uint64_t sub_23BBDC6B0()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_23BBDC6C0()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_23BBDC6D0()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_23BBDC6E0()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_23BBDC6F0()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t sub_23BBDC700()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_23BBDC710()
{
  return MEMORY[0x270F73728]();
}

uint64_t sub_23BBDC720()
{
  return MEMORY[0x270F73750]();
}

uint64_t sub_23BBDC730()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_23BBDC740()
{
  return MEMORY[0x270F38130]();
}

uint64_t sub_23BBDC750()
{
  return MEMORY[0x270F38138]();
}

uint64_t sub_23BBDC760()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_23BBDC770()
{
  return MEMORY[0x270EF1B88]();
}

uint64_t sub_23BBDC780()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_23BBDC790()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t sub_23BBDC7A0()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_23BBDC7B0()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_23BBDC7C0()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t sub_23BBDC7D0()
{
  return MEMORY[0x270FA1E28]();
}

uint64_t sub_23BBDC7E0()
{
  return MEMORY[0x270F73760]();
}

uint64_t sub_23BBDC7F0()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t sub_23BBDC800()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_23BBDC810()
{
  return MEMORY[0x270F9DF28]();
}

uint64_t sub_23BBDC820()
{
  return MEMORY[0x270F9DF30]();
}

uint64_t sub_23BBDC830()
{
  return MEMORY[0x270F38140]();
}

uint64_t sub_23BBDC840()
{
  return MEMORY[0x270F73778]();
}

uint64_t sub_23BBDC850()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t sub_23BBDC860()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_23BBDC870()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t sub_23BBDC880()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t sub_23BBDC890()
{
  return MEMORY[0x270F737D8]();
}

uint64_t sub_23BBDC8A0()
{
  return MEMORY[0x270F737E0]();
}

uint64_t sub_23BBDC8B0()
{
  return MEMORY[0x270F737F8]();
}

uint64_t sub_23BBDC8C0()
{
  return MEMORY[0x270F73800]();
}

uint64_t sub_23BBDC8D0()
{
  return MEMORY[0x270F73808]();
}

uint64_t sub_23BBDC8E0()
{
  return MEMORY[0x270FA0C78]();
}

uint64_t sub_23BBDC8F0()
{
  return MEMORY[0x270FA0D70]();
}

uint64_t sub_23BBDC900()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t sub_23BBDC910()
{
  return MEMORY[0x270FA1170]();
}

uint64_t sub_23BBDC920()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_23BBDC930()
{
  return MEMORY[0x270F9E3B0]();
}

uint64_t sub_23BBDC940()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_23BBDC950()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_23BBDC960()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_23BBDC970()
{
  return MEMORY[0x270EF2470]();
}

uint64_t sub_23BBDC980()
{
  return MEMORY[0x270F9E740]();
}

uint64_t sub_23BBDC990()
{
  return MEMORY[0x270F9E798]();
}

uint64_t sub_23BBDC9B0()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_23BBDC9C0()
{
  return MEMORY[0x270F9E810]();
}

uint64_t sub_23BBDC9D0()
{
  return MEMORY[0x270F9E820]();
}

uint64_t sub_23BBDC9E0()
{
  return MEMORY[0x270F9E838]();
}

uint64_t sub_23BBDC9F0()
{
  return MEMORY[0x270F9E840]();
}

uint64_t sub_23BBDCA00()
{
  return MEMORY[0x270F9E848]();
}

uint64_t sub_23BBDCA10()
{
  return MEMORY[0x270F9E860]();
}

uint64_t sub_23BBDCA20()
{
  return MEMORY[0x270F9E888]();
}

uint64_t sub_23BBDCA30()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_23BBDCA40()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_23BBDCA50()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_23BBDCA60()
{
  return MEMORY[0x270F9E978]();
}

uint64_t sub_23BBDCA70()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_23BBDCA80()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_23BBDCA90()
{
  return MEMORY[0x270F9EA30]();
}

uint64_t sub_23BBDCAA0()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_23BBDCAB0()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_23BBDCAC0()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_23BBDCAD0()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_23BBDCAE0()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_23BBDCAF0()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_23BBDCB00()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_23BBDCB10()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_23BBDCB20()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_23BBDCB30()
{
  return MEMORY[0x270F9F088]();
}

uint64_t sub_23BBDCB40()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_23BBDCB50()
{
  return MEMORY[0x270F9F0C8]();
}

uint64_t sub_23BBDCB60()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_23BBDCB70()
{
  return MEMORY[0x270F9F4F8]();
}

uint64_t sub_23BBDCB90()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_23BBDCBA0()
{
  return MEMORY[0x270F9F920]();
}

uint64_t sub_23BBDCBB0()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_23BBDCBC0()
{
  return MEMORY[0x270EF2680]();
}

uint64_t sub_23BBDCBD0()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_23BBDCBE0()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_23BBDCBF0()
{
  return MEMORY[0x270F9FC90]();
}

NSSet *HKCategoryValueSleepAnalysisAsleepValues(void)
{
  return (NSSet *)MEMORY[0x270EF3628]();
}

uint64_t HKMostRecentSampleEndDateText()
{
  return MEMORY[0x270F38280]();
}

uint64_t HKSPIsRemoveSpacesForTimeFormatEnabled()
{
  return MEMORY[0x270F73010]();
}

uint64_t HKSPSleepURL()
{
  return MEMORY[0x270F73120]();
}

uint64_t NSStringFromHKSPSleepWidgetState()
{
  return MEMORY[0x270F73180]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _HKCategoryValueSleepAnalysisDefaultAsleepValue()
{
  return MEMORY[0x270EF3938]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x270FA0358]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x270FA03F8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x270FA0420]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x270FA0430]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}